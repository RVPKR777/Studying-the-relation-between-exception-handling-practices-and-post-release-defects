id,TryLine,ThrowsBlock,ExceptionType,FilePath,StartLine
1,"'-tryline","@Override public void evaluate() throws Throwable {
  StringBuilder messageBuilder=new StringBuilder(description.testCount());
  messageBuilder.append(Skipped ).append(description.toString());
  if (reason != null && !reason.trim().isEmpty()) {
    messageBuilder.append( because: ).append(reason);
  }
  System.out.println(messageBuilder.toString());
}
","java.lang.Throwable","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\junit\AnnotationBasedTestRule.java",23
2,"'-tryline","@Override public void evaluate() throws Throwable {
  Throwable failure=null;
  try {
    base.evaluate();
  }
 catch (  final Throwable t) {
    failure=t;
  }
  if (condition.get() && failure == null) {
    Assert.fail(Expected failing test for  + description);
  }
 else   if (condition.get() && failure != null) {
    System.out.println(Ignored failure for  + description);
  }
 else   if (failure != null) {
    throw failure;
  }
}
","java.lang.Throwable","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\junit\ConditionalFail.java",33
3,"'-tryline","/** 
 * Return the value of this token and move to the next token.
 * @return the value of the current token
 * @throws ParsingException if there is no such token to consume
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public String consume() throws ParsingException, IllegalStateException {
  if (completed) {
    throwNoMoreContent();
  }
  String result=currentToken().value();
  moveToNextToken();
  return result;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",567
4,"'-tryline","public String peek() throws IllegalStateException {
  if (completed) {
    throwNoMoreContent();
  }
  return currentToken().value();
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",589
5,"'-tryline","/** 
 * Attempt to consume this current token as long as it matches the expected value, or throw an exception if the token does not match. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param expected the expected value of the current token
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if the current token doesn't match the supplied value
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consume(String expected) throws ParsingException, IllegalStateException {
  if (completed) {
    throw new ParsingException(tokens.get(tokens.size() - 1).position(),No more content but was expecting token  + expected);
  }
  if (expected != ANY_VALUE && !currentToken().matches(expected)) {
    String found=currentToken().value();
    Position pos=currentToken().position();
    String fragment=generateFragment();
    String msg=Expecting  + expected +  at line + pos.line()+ , column + pos.column()+  but found '+ found+ ': + fragment;
    throw new ParsingException(pos,msg);
  }
  moveToNextToken();
  return this;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",597
6,"'-tryline","/** 
 * Attempt to consume this current token as long as it matches the expected character, or throw an exception if the token does not match.
 * @param expected the expected character of the current token
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if the current token doesn't match the supplied value
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consume(char expected) throws ParsingException, IllegalStateException {
  if (completed) {
    throw new ParsingException(tokens.get(tokens.size() - 1).position(),No more content but was expecting ' + expected + ');
  }
  if (!currentToken().matches(expected)) {
    String found=currentToken().value();
    Position pos=currentToken().position();
    String fragment=generateFragment();
    String msg=Expecting ' + expected + ' at line + pos.line()+ , column + pos.column()+  but found '+ found+ ': + fragment;
    throw new ParsingException(pos,msg);
  }
  moveToNextToken();
  return this;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",626
7,"'-tryline","/** 
 * Attempt to consume this current token as long as it matches the expected character, or throw an exception if the token does not match. <p> The  {@link #ANY_TYPE ANY_TYPE} constant can be used in the expected values as a wildcard.</p>
 * @param expectedType the expected token type of the current token
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if the current token doesn't match the supplied value
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consume(int expectedType) throws ParsingException, IllegalStateException {
  if (completed) {
    throw new ParsingException(tokens.get(tokens.size() - 1).position(),No more content but was expecting token of type  + expectedType);
  }
  if (expectedType != ANY_TYPE && (currentToken().type() & expectedType) != expectedType) {
    String found=currentToken().value();
    Position pos=currentToken().position();
    String fragment=generateFragment();
    String msg=Expecting token type  + expectedType +  at line + pos.line()+ , column + pos.column()+  but found '+ found+ ': + fragment;
    throw new ParsingException(pos,msg);
  }
  moveToNextToken();
  return this;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",652
8,"'-tryline","/** 
 * Attempt to consume this current token as the next tokens as long as they match the expected values, or throw an exception if the token does not match. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param expected the expected value of the current token
 * @param expectedForNextTokens the expected values of the following tokens
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if the current token doesn't match the supplied value
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consume(String expected,String... expectedForNextTokens) throws ParsingException, IllegalStateException {
  consume(expected);
  for (  String nextExpected : expectedForNextTokens) {
    consume(nextExpected);
  }
  return this;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",683
9,"'-tryline","/** 
 * Attempt to consume this current token as the next tokens as long as they match the expected values, or throw an exception if the token does not match. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param nextTokens the expected values for the next tokens
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if the current token doesn't match the supplied value
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consume(String[] nextTokens) throws ParsingException, IllegalStateException {
  for (  String nextExpected : nextTokens) {
    consume(nextExpected);
  }
  return this;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",706
10,"'-tryline","/** 
 * Attempt to consume this current token as the next tokens as long as they match the expected values, or throw an exception if the token does not match. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param nextTokens the expected values for the next tokens
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if the current token doesn't match the supplied value
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consume(Iterable<String> nextTokens) throws ParsingException, IllegalStateException {
  for (  String nextExpected : nextTokens) {
    consume(nextExpected);
  }
  return this;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",725
11,"'-tryline","/** 
 * Consume and return the next token that must match one of the supplied values.
 * @param typeOptions the options for the type of the current token
 * @return the token that was consumed and that matches one of the supplied options
 * @throws ParsingException if the current token doesn't match the supplied value
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public String consumeAnyOf(int... typeOptions) throws IllegalStateException {
  if (completed) {
    throw new ParsingException(tokens.get(tokens.size() - 1).position(),No more content but was expecting one token of type  + Strings.join(|,typeOptions));
  }
  for (  int typeOption : typeOptions) {
    if (typeOption == ANY_TYPE || matches(typeOption)) {
      return consume();
    }
  }
  String found=currentToken().value();
  Position pos=currentToken().position();
  String fragment=generateFragment();
  String msg=Expecting  + Strings.join(|,typeOptions) +  at line + pos.line()+ , column + pos.column()+  but found '+ found+ ': + fragment;
  throw new ParsingException(pos,msg);
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",744
12,"'-tryline","/** 
 * Consume and return the next token that must match one of the supplied values.
 * @param options the additional options for the value of the current token
 * @return the token that was consumed and that matches one of the supplied options
 * @throws ParsingException if the current token doesn't match the supplied value
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public String consumeAnyOf(String... options) throws IllegalStateException {
  if (completed) {
    throw new ParsingException(tokens.get(tokens.size() - 1).position(),No more content but was expecting one token of  + String.join(|,options));
  }
  for (  String option : options) {
    if (option == ANY_VALUE || matches(option)) {
      return consume();
    }
  }
  String found=currentToken().value();
  Position pos=currentToken().position();
  String fragment=generateFragment();
  String msg=Expecting  + String.join(|,options) +  at line + pos.line()+ , column + pos.column()+  but found '+ found+ ': + fragment;
  throw new ParsingException(pos,msg);
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",771
13,"'-tryline","/** 
 * Attempt to consume all tokens until the specified token is consumed, and then stop. If it is not found, then the token stream is left untouched and a ParsingException is thrown. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param expected the token that is to be found
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if the specified token cannot be found
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consumeThrough(char expected) throws ParsingException, IllegalStateException {
  return consumeThrough(String.valueOf(expected),null);
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",798
14,"'-tryline","/** 
 * Attempt to consume all tokens until the specified token is consumed, and then stop. If it is not found, then the token stream is left untouched and a ParsingException is thrown. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param expected the token that is to be found
 * @param skipMatchingTokens the token that, if found, should result in skipping {@code expected} once for each occurrenceof  {@code skipMatchingTokens}; may be null
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if the specified token cannot be found
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consumeThrough(char expected,char skipMatchingTokens) throws ParsingException, IllegalStateException {
  return consumeThrough(String.valueOf(expected),String.valueOf(skipMatchingTokens));
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",814
15,"'-tryline","/** 
 * Attempt to consume all tokens until the specified token is consumed, and then stop. If it is not found, then the token stream is left untouched and a ParsingException is thrown. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param expected the token that is to be found
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if the specified token cannot be found
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consumeThrough(String expected) throws ParsingException, IllegalStateException {
  return consumeThrough(expected,null);
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",832
16,"'-tryline","/** 
 * Attempt to consume all tokens until the specified token is consumed, and then stop. If it is not found, then the token stream is left untouched and a ParsingException is thrown. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param expected the token that is to be found
 * @param skipMatchingTokens the token that, if found, should result in skipping {@code expected} once for each occurrenceof  {@code skipMatchingTokens}; may be null
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if the specified token cannot be found
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consumeThrough(String expected,String skipMatchingTokens) throws ParsingException, IllegalStateException {
  if (ANY_VALUE == expected) {
    consume();
    return this;
  }
  consumeUntil(expected,skipMatchingTokens);
  consume(expected);
  return this;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",848
17,"'-tryline","/** 
 * Attempt to consume all tokens until the specified token is found, and then stop before consuming that token. If it is not found, then the token stream is left untouched and a ParsingException is thrown. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param expected the token that is to be found
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if the specified token cannot be found
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consumeUntil(char expected) throws ParsingException, IllegalStateException {
  return consumeUntil(String.valueOf(expected),(String[])null);
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",872
18,"'-tryline","/** 
 * Attempt to consume all tokens until the specified token is found, and then stop before consuming that token. If it is not found, then the token stream is left untouched and a ParsingException is thrown. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param expected the token that is to be found
 * @param skipMatchingTokens the token that, if found, should result in skipping {@code expected} once for each occurrenceof  {@code skipMatchingTokens}
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if the specified token cannot be found
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consumeUntil(char expected,char skipMatchingTokens) throws ParsingException, IllegalStateException {
  return consumeUntil(String.valueOf(expected),String.valueOf(skipMatchingTokens));
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",888
19,"'-tryline","/** 
 * Attempt to consume all tokens until the specified token is found, and then stop before consuming that token. If it is not found, then the token stream is left untouched and a ParsingException is thrown. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param expected the token that is to be found
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if the specified token cannot be found
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consumeUntil(String expected) throws ParsingException, IllegalStateException {
  return consumeUntil(expected,(String[])null);
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",906
20,"'-tryline","/** 
 * Attempt to consume all tokens until the specified token is found, and then stop before consuming that token. If it is not found, then the token stream is left untouched and a ParsingException is thrown. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param expected the token that is to be found
 * @param skipMatchingTokens the token that, if found, should result in skipping {@code expected} once for each occurrenceof  {@code skipMatchingTokens}; may be null
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if the specified token cannot be found
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consumeUntil(String expected,String... skipMatchingTokens) throws ParsingException, IllegalStateException {
  if (ANY_VALUE == expected) {
    consume();
    return this;
  }
  Marker start=mark();
  int remaining=0;
  while (hasNext()) {
    if (skipMatchingTokens != null && matchesAnyOf(skipMatchingTokens)) {
      ++remaining;
    }
    if (matches(expected)) {
      if (remaining == 0) {
        break;
      }
      --remaining;
    }
    consume();
  }
  if (completed) {
    rewind(start);
    throw new ParsingException(tokens.get(tokens.size() - 1).position(),No more content but was expecting to find  + expected);
  }
  return this;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",922
21,"'-tryline","/** 
 * Consume the token stream until one of the stop tokens or the end of the stream is found.
 * @param stopTokens the stop tokens; may not be null
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if none of the specified tokens can be found
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consumeUntilEndOrOneOf(String... stopTokens) throws ParsingException, IllegalStateException {
  while (hasNext()) {
    if (matchesAnyOf(stopTokens)) {
      break;
    }
    consume();
  }
  return this;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",963
22,"'-tryline","/** 
 * Attempt to consume this current token if it can be parsed as an integer, and return whether this method was indeed able to consume the token.
 * @param consumer the function that should be called with the integer value if the current token token could be parsed
 * @return true if the current token did match and was consumed, or false if the current token did not match and therefore wasnot consumed
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean canConsumeInteger(IntConsumer consumer) throws IllegalStateException {
  if (completed) {
    throwNoMoreContent();
  }
  String value=currentToken().value();
  try {
    int result=Integer.parseInt(value);
    moveToNextToken();
    consumer.accept(result);
    return true;
  }
 catch (  NumberFormatException e) {
    return false;
  }
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",982
23,"'-tryline","/** 
 * Attempt to consume this current token if it can be parsed as a boolean, and return whether this method was indeed able to consume the token.
 * @param consumer the function that should be called with the boolean value if the current token token could be parsed
 * @return true if the current token did match and was consumed, or false if the current token did not match and therefore wasnot consumed
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean canConsumeBoolean(BooleanConsumer consumer) throws IllegalStateException {
  if (completed) {
    throwNoMoreContent();
  }
  String value=currentToken().value();
  try {
    boolean result=Boolean.parseBoolean(value);
    moveToNextToken();
    consumer.accept(result);
    return true;
  }
 catch (  NumberFormatException e) {
    return false;
  }
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1008
24,"'-tryline","/** 
 * Attempt to consume this current token if it can be parsed as a long, and return whether this method was indeed able to consume the token.
 * @param consumer the function that should be called with the long value if the current token token could be parsed
 * @return true if the current token did match and was consumed, or false if the current token did not match and therefore wasnot consumed
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean canConsumeLong(LongConsumer consumer) throws IllegalStateException {
  if (completed) {
    throwNoMoreContent();
  }
  String value=currentToken().value();
  try {
    long result=Long.parseLong(value);
    moveToNextToken();
    consumer.accept(result);
    return true;
  }
 catch (  NumberFormatException e) {
    return false;
  }
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1034
25,"'-tryline","/** 
 * Attempt to consume this current token if it matches the expected value, and return whether this method was indeed able to consume the token. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected value as a wildcard.</p>
 * @param expected the expected value of the current token
 * @return true if the current token did match and was consumed, or false if the current token did not match and therefore wasnot consumed
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean canConsume(String expected) throws IllegalStateException {
  return canConsume(ANY_TYPE,expected);
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1060
26,"'-tryline","/** 
 * Attempt to consume this current token if it matches the expected value, and return whether this method was indeed able to consume the token. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected value as a wildcard.</p>
 * @param type the expected type of the current token
 * @param expected the expected value of the current token
 * @return true if the current token did match and was consumed, or false if the current token did not match and therefore wasnot consumed
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean canConsume(int type,String expected) throws IllegalStateException {
  if (!(matches(expected) && matches(type))) {
    return false;
  }
  moveToNextToken();
  return true;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1076
27,"'-tryline","/** 
 * Attempt to consume this current token if it is  {@link BasicTokenizer#WORD} and it matches the expected value,and return whether this method was indeed able to consume the token. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected value as a wildcard.</p>
 * @param expected the expected value of the current token
 * @return true if the current token did match and was consumed, or false if the current token did not match and therefore wasnot consumed
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean canConsumeWord(String expected) throws IllegalStateException {
  return canConsume(BasicTokenizer.WORD,expected);
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1097
28,"'-tryline","/** 
 * Attempt to consume this current token if it matches the expected value, and return whether this method was indeed able to consume the token.
 * @param expected the expected value of the current token token
 * @return true if the current token did match and was consumed, or false if the current token did not match and therefore wasnot consumed
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean canConsume(char expected) throws IllegalStateException {
  if (!matches(expected)) {
    return false;
  }
  moveToNextToken();
  return true;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1113
29,"'-tryline","/** 
 * Attempt to consume this current token if it matches the expected token type, and return whether this method was indeed able to consume the token. <p> The  {@link #ANY_TYPE ANY_TYPE} constant can be used in the expected type as a wildcard.</p>
 * @param expectedType the expected token type of the current token
 * @return true if the current token did match and was consumed, or false if the current token did not match and therefore wasnot consumed
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean canConsume(int expectedType) throws IllegalStateException {
  if (!matches(expectedType)) {
    return false;
  }
  moveToNextToken();
  return true;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1130
30,"'-tryline","/** 
 * Attempt to consume this current token and the next tokens if and only if they match the expected values, and return whether this method was indeed able to consume all of the supplied tokens. <p> This is <i>not</i> the same as calling  {@link #canConsume(String)} for each of the supplied arguments, since this methodensures that <i>all</i> of the supplied values can be consumed. </p> <p> This method <i>is</i> equivalent to calling the following: <pre> if (tokens.matches(currentExpected, expectedForNextTokens)) { tokens.consume(currentExpected, expectedForNextTokens); } </pre> </p> <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param currentExpected the expected value of the current token
 * @param expectedForNextTokens the expected values fo the following tokens
 * @return true if the current token did match and was consumed, or false if the current token did not match and therefore wasnot consumed
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean canConsume(String currentExpected,String... expectedForNextTokens) throws IllegalStateException {
  return canConsume(ANY_TYPE,currentExpected,expectedForNextTokens);
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1150
31,"'-tryline","/** 
 * Attempt to consume this current token and the next tokens if and only if they match the expected type and values, and return whether this method was indeed able to consume all of the supplied tokens. <p> This is <i>not</i> the same as calling  {@link #canConsume(type String)} for each of the supplied arguments, since this methodensures that <i>all</i> of the supplied values can be consumed. </p> <p> This method <i>is</i> equivalent to calling the following: <pre> if (tokens.matches(currentExpected, expectedForNextTokens) && tokens.matches(type, type, ...)) { tokens.consume(currentExpected, expectedForNextTokens); } </pre> </p> <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param type the expect type of the tokens
 * @param currentExpected the expected value of the current token
 * @param expectedForNextTokens the expected values fo the following tokens
 * @return true if the current token did match and was consumed, or false if the current token did not match and therefore wasnot consumed
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean canConsume(int type,String currentExpected,String... expectedForNextTokens) throws IllegalStateException {
  if (completed) {
    return false;
  }
  ListIterator<Token> iter=tokens.listIterator(tokenIterator.previousIndex());
  if (!iter.hasNext()) {
    return false;
  }
  Token token=iter.next();
  if (currentExpected != ANY_VALUE && !token.matches(type,currentExpected)) {
    return false;
  }
  for (  String nextExpected : expectedForNextTokens) {
    if (!iter.hasNext()) {
      return false;
    }
    token=iter.next();
    if (nextExpected == ANY_VALUE) {
      continue;
    }
    if (!token.matches(type,nextExpected)) {
      return false;
    }
  }
  this.tokenIterator=iter;
  this.currentToken=tokenIterator.hasNext() ? tokenIterator.next() : null;
  this.completed=this.currentToken == null;
  return true;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1185
32,"'-tryline","/** 
 * Attempt to consume this current token and the next tokens if and only if they are of  {@link BasicTokenizer#WORD} and match the expected values,and return whether this method was indeed able to consume all of the supplied tokens.
 * @param currentExpected the expected value of the current token
 * @param expectedForNextTokens the expected values fo the following tokens
 * @return true if the current token did match and was consumed, or false if the current token did not match and therefore wasnot consumed
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 * @see #canConsume(int,String,String...)
 */
public boolean canConsumeWords(String currentExpected,String... expectedForNextTokens) throws IllegalStateException {
  return canConsume(BasicTokenizer.WORD,currentExpected,expectedForNextTokens);
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1246
33,"'-tryline","/** 
 * Attempt to consume this current token and the next tokens if and only if they match the expected values, and return whether this method was indeed able to consume all of the supplied tokens. <p> This is <i>not</i> the same as calling  {@link #canConsume(String)} for each of the supplied arguments, since this methodensures that <i>all</i> of the supplied values can be consumed. </p> <p> This method <i>is</i> equivalent to calling the following: <pre> if (tokens.matches(currentExpected, expectedForNextTokens)) { tokens.consume(currentExpected, expectedForNextTokens); } </pre> </p> <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param nextTokens the expected values of the next tokens
 * @return true if the current token did match and was consumed, or false if the current token did not match and therefore wasnot consumed
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean canConsume(String[] nextTokens) throws IllegalStateException {
  if (completed) {
    return false;
  }
  ListIterator<Token> iter=tokens.listIterator(tokenIterator.previousIndex());
  Token token=null;
  for (  String nextExpected : nextTokens) {
    if (!iter.hasNext()) {
      return false;
    }
    token=iter.next();
    if (nextExpected == ANY_VALUE) {
      continue;
    }
    if (!token.matches(nextExpected)) {
      return false;
    }
  }
  this.tokenIterator=iter;
  this.currentToken=tokenIterator.hasNext() ? tokenIterator.next() : null;
  this.completed=this.currentToken == null;
  return true;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1261
34,"'-tryline","/** 
 * Attempt to consume this current token and the next tokens if and only if they match the expected values, and return whether this method was indeed able to consume all of the supplied tokens. <p> This is <i>not</i> the same as calling  {@link #canConsume(String)} for each of the supplied arguments, since this methodensures that <i>all</i> of the supplied values can be consumed. </p> <p> This method <i>is</i> equivalent to calling the following: <pre> if (tokens.matches(currentExpected, expectedForNextTokens)) { tokens.consume(currentExpected, expectedForNextTokens); } </pre> </p> <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param nextTokens the expected values of the next tokens
 * @return true if the current token did match and was consumed, or false if the current token did not match and therefore wasnot consumed
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean canConsume(Iterable<String> nextTokens) throws IllegalStateException {
  if (completed) {
    return false;
  }
  ListIterator<Token> iter=tokens.listIterator(tokenIterator.previousIndex());
  Token token=null;
  for (  String nextExpected : nextTokens) {
    if (!iter.hasNext()) {
      return false;
    }
    token=iter.next();
    if (nextExpected == ANY_VALUE) {
      continue;
    }
    if (!token.matches(nextExpected)) {
      return false;
    }
  }
  this.tokenIterator=iter;
  this.currentToken=tokenIterator.hasNext() ? tokenIterator.next() : null;
  this.completed=this.currentToken == null;
  return true;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1313
35,"'-tryline","/** 
 * Attempt to consume the next token if it matches one of the supplied values.
 * @param firstOption the first option for the value of the current token
 * @param additionalOptions the additional options for the value of the current token
 * @return true if the current token's value did match one of the supplied options, or false otherwise
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean canConsumeAnyOf(String firstOption,String... additionalOptions) throws IllegalStateException {
  if (completed) {
    return false;
  }
  if (canConsume(firstOption)) {
    return true;
  }
  for (  String nextOption : additionalOptions) {
    if (canConsume(nextOption)) {
      return true;
    }
  }
  return false;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1365
36,"'-tryline","/** 
 * Attempt to consume the next token if it matches one of the supplied values.
 * @param options the options for the value of the current token
 * @return true if the current token's value did match one of the suplied options, or false otherwise
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean canConsumeAnyOf(String[] options) throws IllegalStateException {
  if (completed) {
    return false;
  }
  for (  String option : options) {
    if (canConsume(option)) {
      return true;
    }
  }
  return false;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1390
37,"'-tryline","/** 
 * Attempt to consume the next token if it matches one of the supplied values.
 * @param options the options for the value of the current token
 * @return true if the current token's value did match one of the supplied options, or false otherwise
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean canConsumeAnyOf(Iterable<String> options) throws IllegalStateException {
  if (completed) {
    return false;
  }
  for (  String option : options) {
    if (canConsume(option)) {
      return true;
    }
  }
  return false;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1409
38,"'-tryline","/** 
 * Attempt to consume the next token if it matches one of the supplied types.
 * @param firstTypeOption the first option for the type of the current token
 * @param additionalTypeOptions the additional options for the type of the current token
 * @return true if the current token's type matched one of the supplied options, or false otherwise
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean canConsumeAnyOf(int firstTypeOption,int... additionalTypeOptions) throws IllegalStateException {
  if (completed) {
    return false;
  }
  if (canConsume(firstTypeOption)) {
    return true;
  }
  for (  int nextTypeOption : additionalTypeOptions) {
    if (canConsume(nextTypeOption)) {
      return true;
    }
  }
  return false;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1428
39,"'-tryline","/** 
 * Attempt to consume the next token if it matches one of the supplied types.
 * @param typeOptions the options for the type of the current token
 * @return true if the current token's type matched one of the supplied options, or false otherwise
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean canConsumeAnyOf(int[] typeOptions) throws IllegalStateException {
  if (completed) {
    return false;
  }
  for (  int nextTypeOption : typeOptions) {
    if (canConsume(nextTypeOption)) {
      return true;
    }
  }
  return false;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1453
40,"'-tryline","/** 
 * Determine if the current token matches the expected value. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used as a wildcard.</p>
 * @param expected the expected value of the current token
 * @return true if the current token did match, or false if the current token did not match
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean matches(String expected) throws IllegalStateException {
  return matches(ANY_TYPE,expected);
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1472
41,"'-tryline","/** 
 * Determine if the current token matches the expected type and a value. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used as a wildcard.</p>
 * @param type the expected type of the curent token
 * @param expected the expected value of the current token
 * @return true if the current token did match, or false if the current token did not match
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean matches(int type,String expected) throws IllegalStateException {
  return !completed && (expected == ANY_VALUE || currentToken().matches(expected)) && currentToken().matches(type);
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1486
42,"'-tryline","/** 
 * Determine if the current token is  {@link BasicTokenizer#WORD} and matches the expected value.<p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used as a wildcard.</p>
 * @param expected the expected value of the current token
 * @return true if the current token did match, or false if the current token did not match
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean matchesWord(String expected) throws IllegalStateException {
  return matches(BasicTokenizer.WORD,expected);
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1501
43,"'-tryline","/** 
 * Determine if the current token matches the expected value.
 * @param expected the expected value of the current token token
 * @return true if the current token did match, or false if the current token did not match
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean matches(char expected) throws IllegalStateException {
  return !completed && currentToken().matches(expected);
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1515
44,"'-tryline","/** 
 * Determine if the current token matches the expected token type.
 * @param expectedType the expected token type of the current token
 * @return true if the current token did match, or false if the current token did not match
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean matches(int expectedType) throws IllegalStateException {
  return !completed && currentToken().matches(expectedType);
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1526
45,"'-tryline","/** 
 * Determine if the next few tokens match the expected values. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param currentExpected the expected value of the current token
 * @param expectedForNextTokens the expected values for the following tokens
 * @return true if the tokens did match, or false otherwise
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean matches(String currentExpected,String... expectedForNextTokens) throws IllegalStateException {
  if (completed) {
    return false;
  }
  ListIterator<Token> iter=tokens.listIterator(tokenIterator.previousIndex());
  if (!iter.hasNext()) {
    return false;
  }
  Token token=iter.next();
  if (currentExpected != ANY_VALUE && !token.matches(currentExpected)) {
    return false;
  }
  for (  String nextExpected : expectedForNextTokens) {
    if (!iter.hasNext()) {
      return false;
    }
    token=iter.next();
    if (nextExpected == ANY_VALUE) {
      continue;
    }
    if (!token.matches(nextExpected)) {
      return false;
    }
  }
  return true;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1537
46,"'-tryline","/** 
 * Determine if the next few tokens match the expected values. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param nextTokens the expected value of the next tokens
 * @return true if the tokens did match, or false otherwise
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean matches(String[] nextTokens) throws IllegalStateException {
  if (completed) {
    return false;
  }
  ListIterator<Token> iter=tokens.listIterator(tokenIterator.previousIndex());
  Token token=null;
  for (  String nextExpected : nextTokens) {
    if (!iter.hasNext()) {
      return false;
    }
    token=iter.next();
    if (nextExpected == ANY_VALUE) {
      continue;
    }
    if (!token.matches(nextExpected)) {
      return false;
    }
  }
  return true;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1577
47,"'-tryline","/** 
 * Determine if the next few tokens match the expected values. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param nextTokens the expected value of the next tokens
 * @return true if the tokens did match, or false otherwise
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean matches(Iterable<String> nextTokens) throws IllegalStateException {
  if (completed) {
    return false;
  }
  ListIterator<Token> iter=tokens.listIterator(tokenIterator.previousIndex());
  Token token=null;
  for (  String nextExpected : nextTokens) {
    if (!iter.hasNext()) {
      return false;
    }
    token=iter.next();
    if (nextExpected == ANY_VALUE) {
      continue;
    }
    if (!token.matches(nextExpected)) {
      return false;
    }
  }
  return true;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1608
48,"'-tryline","/** 
 * Determine if the next few tokens have the supplied types. <p> The  {@link #ANY_TYPE ANY_TYPE} constant can be used in the expected values as a wildcard.</p>
 * @param currentExpectedType the expected type of the current token
 * @param expectedTypeForNextTokens the expected type for the following tokens
 * @return true if the tokens did match, or false otherwise
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean matches(int currentExpectedType,int... expectedTypeForNextTokens) throws IllegalStateException {
  if (completed) {
    return false;
  }
  ListIterator<Token> iter=tokens.listIterator(tokenIterator.previousIndex());
  if (!iter.hasNext()) {
    return false;
  }
  Token token=iter.next();
  if (currentExpectedType != ANY_TYPE && (currentToken().type() & currentExpectedType) != currentExpectedType) {
    return false;
  }
  for (  int nextExpectedType : expectedTypeForNextTokens) {
    if (!iter.hasNext()) {
      return false;
    }
    token=iter.next();
    if (nextExpectedType == ANY_TYPE) {
      continue;
    }
    if ((token.type() & nextExpectedType) != nextExpectedType) {
      return false;
    }
  }
  return true;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1639
49,"'-tryline","/** 
 * Determine if the next few tokens have the supplied types. <p> The  {@link #ANY_TYPE ANY_TYPE} constant can be used in the expected values as a wildcard.</p>
 * @param typesForNextTokens the expected type for each of the next tokens
 * @return true if the tokens did match, or false otherwise
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean matches(int[] typesForNextTokens) throws IllegalStateException {
  if (completed) {
    return false;
  }
  ListIterator<Token> iter=tokens.listIterator(tokenIterator.previousIndex());
  Token token=null;
  for (  int nextExpectedType : typesForNextTokens) {
    if (!iter.hasNext()) {
      return false;
    }
    token=iter.next();
    if (nextExpectedType == ANY_TYPE) {
      continue;
    }
    if (!token.matches(nextExpectedType)) {
      return false;
    }
  }
  return true;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1679
50,"'-tryline","/** 
 * Determine if the next token matches one of the supplied values.
 * @param firstOption the first option for the value of the current token
 * @param additionalOptions the additional options for the value of the current token
 * @return true if the current token's value did match one of the supplied options, or false otherwise
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean matchesAnyOf(String firstOption,String... additionalOptions) throws IllegalStateException {
  return matchesAnyOf(ANY_TYPE,firstOption,additionalOptions);
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1710
51,"'-tryline","/** 
 * Determine if the next token matches one of the supplied values of the expected type.
 * @param type the expected type of tokens
 * @param firstOption the first option for the value of the current token
 * @param additionalOptions the additional options for the value of the current token
 * @return true if the current token's value did match one of the supplied options, or false otherwise
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean matchesAnyOf(int type,String firstOption,String... additionalOptions) throws IllegalStateException {
  if (completed) {
    return false;
  }
  Token current=currentToken();
  if (current.matches(type,firstOption)) {
    return true;
  }
  for (  String nextOption : additionalOptions) {
    if (current.matches(type,nextOption)) {
      return true;
    }
  }
  return false;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1724
52,"'-tryline","/** 
 * Determine if the next token matches one of the supplied values of the type  {@link BasicTokenizer#WORD}
 * @param firstOption the first option for the value of the current token
 * @param additionalOptions the additional options for the value of the current token
 * @return true if the current token's value did match one of the supplied options, or false otherwise
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean matchesAnyWordOf(String firstOption,String... additionalOptions) throws IllegalStateException {
  return matchesAnyOf(BasicTokenizer.WORD,firstOption,additionalOptions);
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1750
53,"'-tryline","/** 
 * Determine if the next token matches one of the supplied values.
 * @param options the options for the value of the current token
 * @return true if the current token's value did match one of the supplied options, or false otherwise
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean matchesAnyOf(String[] options) throws IllegalStateException {
  if (completed) {
    return false;
  }
  Token current=currentToken();
  for (  String option : options) {
    if (current.matches(option)) {
      return true;
    }
  }
  return false;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1763
54,"'-tryline","/** 
 * Determine if the next token matches one of the supplied values.
 * @param options the options for the value of the current token
 * @return true if the current token's value did match one of the supplied options, or false otherwise
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean matchesAnyOf(Iterable<String> options) throws IllegalStateException {
  if (completed) {
    return false;
  }
  Token current=currentToken();
  for (  String option : options) {
    if (current.matches(option)) {
      return true;
    }
  }
  return false;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1783
55,"'-tryline","/** 
 * Determine if the next token have one of the supplied types.
 * @param firstTypeOption the first option for the type of the current token
 * @param additionalTypeOptions the additional options for the type of the current token
 * @return true if the current token's type matched one of the supplied options, or false otherwise
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean matchesAnyOf(int firstTypeOption,int... additionalTypeOptions) throws IllegalStateException {
  if (completed) {
    return false;
  }
  Token current=currentToken();
  if (current.matches(firstTypeOption)) {
    return true;
  }
  for (  int nextTypeOption : additionalTypeOptions) {
    if (current.matches(nextTypeOption)) {
      return true;
    }
  }
  return false;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1803
56,"'-tryline","/** 
 * Determine if the next token have one of the supplied types.
 * @param typeOptions the options for the type of the current token
 * @return true if the current token's type matched one of the supplied options, or false otherwise
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public boolean matchesAnyOf(int[] typeOptions) throws IllegalStateException {
  if (completed) {
    return false;
  }
  Token current=currentToken();
  for (  int nextTypeOption : typeOptions) {
    if (current.matches(nextTypeOption)) {
      return true;
    }
  }
  return false;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1829
57,"'-tryline","/** 
 * Get the current token.
 * @return the current token; never null
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 * @throws NoSuchElementException if there are no more tokens
 */
final Token currentToken() throws IllegalStateException, NoSuchElementException {
  if (currentToken == null) {
    if (completed) {
      throw new NoSuchElementException(No more content);
    }
    throw new IllegalStateException(start() method must be called before consuming or matching);
  }
  assert currentToken != null;
  return currentToken;
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1907
58,"'-tryline","/** 
 * Get the previous token. This does not modify the state.
 * @param count the number of tokens back from the current position that this method should return
 * @return the previous token; never null
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 * @throws NoSuchElementException if there is no previous token
 */
public final Token previousToken(int count) throws IllegalStateException, NoSuchElementException {
  if (count < 1) {
    throw new IllegalArgumentException(The count must be positive);
  }
  if (currentToken == null) {
    if (completed) {
      if (tokens.isEmpty()) {
        throw new NoSuchElementException(No more content);
      }
      return tokens.get(tokens.size() - 1);
    }
    throw new IllegalStateException(start() method must be called before consuming or matching);
  }
  int index=tokenIterator.previousIndex() - count;
  if (index < 0) {
    throw new NoSuchElementException(No more content);
  }
  return tokens.get(tokenIterator.previousIndex() - count);
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1974
59,"'-tryline","/** 
 * Given an object, returns the total allocated size, in bytes, of the object and all other objects reachable from it.  Attempts to to detect the current JVM memory layout, but may fail with  {@link UnsupportedOperationException};
 * @param obj the object; can be null. Passing in a {@link java.lang.Class} object doesn't doanything special, it measures the size of all objects reachable through it (which will include its class loader, and by extension, all other Class objects loaded by the same loader, and all the parent class loaders). It doesn't provide the size of the static fields in the JVM class that the Class object represents.
 * @return the total allocated size of the object and all other objects itretains.
 * @throws UnsupportedOperationException if the current vm memory layout cannot be detected.
 */
public static long getObjectSize(Object obj) throws UnsupportedOperationException {
  return obj == null ? 0 : new ObjectSizeCalculator(CurrentLayout.SPEC).calculateObjectSize(obj);
}
","java.lang.UnsupportedOperationException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\ObjectSizeCalculator.java",93
60,"'-tryline","@Override public void tokenize(CharacterStream input,Tokens tokens) throws ParsingException {
  ParsingState previousState=null;
  ParsingState currentState=ParsingState.INITIAL;
  ParsingContext parsingContext=new ParsingContext(input,tokens);
  currentState.onEntry(parsingContext);
  while (input.hasNext()) {
    previousState=currentState;
    currentState=currentState.handleCharacter(input.next(),parsingContext);
    if (currentState != previousState) {
      previousState.onExit(parsingContext);
      currentState.onEntry(parsingContext);
    }
  }
  currentState.onExit(parsingContext);
  if (currentState != ParsingState.BEFORE_SEPARATOR && currentState != ParsingState.IN_IDENTIFIER) {
    throw new IllegalArgumentException(Invalid identifier:  + identifier);
  }
}
","io.debezium.text.ParsingException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\TableIdParser.java",47
61,"'-tryline","/** 
 * Begin the token stream, including (if required) the tokenization of the input content.
 * @return this object for easy method chaining; never null
 * @throws ParsingException if an error occurs during tokenization of the content
 */
public TokenStream start() throws ParsingException {
  if (tokens == null) {
    TokenFactory tokenFactory=caseSensitive ? new CaseSensitiveTokenFactory() : new CaseInsensitiveTokenFactory();
    CharacterStream characterStream=new CharacterArrayStream(inputContent);
    tokenizer.tokenize(characterStream,tokenFactory);
    this.tokens=initializeTokens(tokenFactory.getTokens());
  }
  tokenIterator=this.tokens.listIterator();
  moveToNextToken();
  return this;
}
","io.debezium.text.ParsingException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",435
62,"'-tryline","/** 
 * Return the value of this token and move to the next token.
 * @return the value of the current token
 * @throws ParsingException if there is no such token to consume
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public String consume() throws ParsingException, IllegalStateException {
  if (completed) {
    throwNoMoreContent();
  }
  String result=currentToken().value();
  moveToNextToken();
  return result;
}
","io.debezium.text.ParsingException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",567
63,"'-tryline","protected void throwNoMoreContent() throws ParsingException {
  Position pos=tokens.isEmpty() ? new Position(-1,1,0) : tokens.get(tokens.size() - 1).position();
  throw new ParsingException(pos,No more content);
}
","io.debezium.text.ParsingException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",584
64,"'-tryline","/** 
 * Attempt to consume this current token as long as it matches the expected value, or throw an exception if the token does not match. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param expected the expected value of the current token
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if the current token doesn't match the supplied value
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consume(String expected) throws ParsingException, IllegalStateException {
  if (completed) {
    throw new ParsingException(tokens.get(tokens.size() - 1).position(),No more content but was expecting token  + expected);
  }
  if (expected != ANY_VALUE && !currentToken().matches(expected)) {
    String found=currentToken().value();
    Position pos=currentToken().position();
    String fragment=generateFragment();
    String msg=Expecting  + expected +  at line + pos.line()+ , column + pos.column()+  but found '+ found+ ': + fragment;
    throw new ParsingException(pos,msg);
  }
  moveToNextToken();
  return this;
}
","io.debezium.text.ParsingException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",597
65,"'-tryline","/** 
 * Attempt to consume this current token as long as it matches the expected character, or throw an exception if the token does not match.
 * @param expected the expected character of the current token
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if the current token doesn't match the supplied value
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consume(char expected) throws ParsingException, IllegalStateException {
  if (completed) {
    throw new ParsingException(tokens.get(tokens.size() - 1).position(),No more content but was expecting ' + expected + ');
  }
  if (!currentToken().matches(expected)) {
    String found=currentToken().value();
    Position pos=currentToken().position();
    String fragment=generateFragment();
    String msg=Expecting ' + expected + ' at line + pos.line()+ , column + pos.column()+  but found '+ found+ ': + fragment;
    throw new ParsingException(pos,msg);
  }
  moveToNextToken();
  return this;
}
","io.debezium.text.ParsingException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",626
66,"'-tryline","/** 
 * Attempt to consume this current token as long as it matches the expected character, or throw an exception if the token does not match. <p> The  {@link #ANY_TYPE ANY_TYPE} constant can be used in the expected values as a wildcard.</p>
 * @param expectedType the expected token type of the current token
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if the current token doesn't match the supplied value
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consume(int expectedType) throws ParsingException, IllegalStateException {
  if (completed) {
    throw new ParsingException(tokens.get(tokens.size() - 1).position(),No more content but was expecting token of type  + expectedType);
  }
  if (expectedType != ANY_TYPE && (currentToken().type() & expectedType) != expectedType) {
    String found=currentToken().value();
    Position pos=currentToken().position();
    String fragment=generateFragment();
    String msg=Expecting token type  + expectedType +  at line + pos.line()+ , column + pos.column()+  but found '+ found+ ': + fragment;
    throw new ParsingException(pos,msg);
  }
  moveToNextToken();
  return this;
}
","io.debezium.text.ParsingException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",652
67,"'-tryline","/** 
 * Attempt to consume this current token as the next tokens as long as they match the expected values, or throw an exception if the token does not match. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param expected the expected value of the current token
 * @param expectedForNextTokens the expected values of the following tokens
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if the current token doesn't match the supplied value
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consume(String expected,String... expectedForNextTokens) throws ParsingException, IllegalStateException {
  consume(expected);
  for (  String nextExpected : expectedForNextTokens) {
    consume(nextExpected);
  }
  return this;
}
","io.debezium.text.ParsingException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",683
68,"'-tryline","/** 
 * Attempt to consume this current token as the next tokens as long as they match the expected values, or throw an exception if the token does not match. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param nextTokens the expected values for the next tokens
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if the current token doesn't match the supplied value
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consume(String[] nextTokens) throws ParsingException, IllegalStateException {
  for (  String nextExpected : nextTokens) {
    consume(nextExpected);
  }
  return this;
}
","io.debezium.text.ParsingException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",706
69,"'-tryline","/** 
 * Attempt to consume this current token as the next tokens as long as they match the expected values, or throw an exception if the token does not match. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param nextTokens the expected values for the next tokens
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if the current token doesn't match the supplied value
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consume(Iterable<String> nextTokens) throws ParsingException, IllegalStateException {
  for (  String nextExpected : nextTokens) {
    consume(nextExpected);
  }
  return this;
}
","io.debezium.text.ParsingException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",725
70,"'-tryline","/** 
 * Attempt to consume all tokens until the specified token is consumed, and then stop. If it is not found, then the token stream is left untouched and a ParsingException is thrown. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param expected the token that is to be found
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if the specified token cannot be found
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consumeThrough(char expected) throws ParsingException, IllegalStateException {
  return consumeThrough(String.valueOf(expected),null);
}
","io.debezium.text.ParsingException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",798
71,"'-tryline","/** 
 * Attempt to consume all tokens until the specified token is consumed, and then stop. If it is not found, then the token stream is left untouched and a ParsingException is thrown. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param expected the token that is to be found
 * @param skipMatchingTokens the token that, if found, should result in skipping {@code expected} once for each occurrenceof  {@code skipMatchingTokens}; may be null
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if the specified token cannot be found
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consumeThrough(char expected,char skipMatchingTokens) throws ParsingException, IllegalStateException {
  return consumeThrough(String.valueOf(expected),String.valueOf(skipMatchingTokens));
}
","io.debezium.text.ParsingException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",814
72,"'-tryline","/** 
 * Attempt to consume all tokens until the specified token is consumed, and then stop. If it is not found, then the token stream is left untouched and a ParsingException is thrown. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param expected the token that is to be found
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if the specified token cannot be found
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consumeThrough(String expected) throws ParsingException, IllegalStateException {
  return consumeThrough(expected,null);
}
","io.debezium.text.ParsingException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",832
73,"'-tryline","/** 
 * Attempt to consume all tokens until the specified token is consumed, and then stop. If it is not found, then the token stream is left untouched and a ParsingException is thrown. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param expected the token that is to be found
 * @param skipMatchingTokens the token that, if found, should result in skipping {@code expected} once for each occurrenceof  {@code skipMatchingTokens}; may be null
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if the specified token cannot be found
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consumeThrough(String expected,String skipMatchingTokens) throws ParsingException, IllegalStateException {
  if (ANY_VALUE == expected) {
    consume();
    return this;
  }
  consumeUntil(expected,skipMatchingTokens);
  consume(expected);
  return this;
}
","io.debezium.text.ParsingException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",848
74,"'-tryline","/** 
 * Attempt to consume all tokens until the specified token is found, and then stop before consuming that token. If it is not found, then the token stream is left untouched and a ParsingException is thrown. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param expected the token that is to be found
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if the specified token cannot be found
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consumeUntil(char expected) throws ParsingException, IllegalStateException {
  return consumeUntil(String.valueOf(expected),(String[])null);
}
","io.debezium.text.ParsingException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",872
75,"'-tryline","/** 
 * Attempt to consume all tokens until the specified token is found, and then stop before consuming that token. If it is not found, then the token stream is left untouched and a ParsingException is thrown. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param expected the token that is to be found
 * @param skipMatchingTokens the token that, if found, should result in skipping {@code expected} once for each occurrenceof  {@code skipMatchingTokens}
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if the specified token cannot be found
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consumeUntil(char expected,char skipMatchingTokens) throws ParsingException, IllegalStateException {
  return consumeUntil(String.valueOf(expected),String.valueOf(skipMatchingTokens));
}
","io.debezium.text.ParsingException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",888
76,"'-tryline","/** 
 * Attempt to consume all tokens until the specified token is found, and then stop before consuming that token. If it is not found, then the token stream is left untouched and a ParsingException is thrown. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param expected the token that is to be found
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if the specified token cannot be found
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consumeUntil(String expected) throws ParsingException, IllegalStateException {
  return consumeUntil(expected,(String[])null);
}
","io.debezium.text.ParsingException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",906
77,"'-tryline","/** 
 * Attempt to consume all tokens until the specified token is found, and then stop before consuming that token. If it is not found, then the token stream is left untouched and a ParsingException is thrown. <p> The  {@link #ANY_VALUE ANY_VALUE} constant can be used in the expected values as a wildcard.</p>
 * @param expected the token that is to be found
 * @param skipMatchingTokens the token that, if found, should result in skipping {@code expected} once for each occurrenceof  {@code skipMatchingTokens}; may be null
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if the specified token cannot be found
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consumeUntil(String expected,String... skipMatchingTokens) throws ParsingException, IllegalStateException {
  if (ANY_VALUE == expected) {
    consume();
    return this;
  }
  Marker start=mark();
  int remaining=0;
  while (hasNext()) {
    if (skipMatchingTokens != null && matchesAnyOf(skipMatchingTokens)) {
      ++remaining;
    }
    if (matches(expected)) {
      if (remaining == 0) {
        break;
      }
      --remaining;
    }
    consume();
  }
  if (completed) {
    rewind(start);
    throw new ParsingException(tokens.get(tokens.size() - 1).position(),No more content but was expecting to find  + expected);
  }
  return this;
}
","io.debezium.text.ParsingException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",922
78,"'-tryline","/** 
 * Consume the token stream until one of the stop tokens or the end of the stream is found.
 * @param stopTokens the stop tokens; may not be null
 * @return this token stream instance so callers can chain together methods; never null
 * @throws ParsingException if none of the specified tokens can be found
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 */
public TokenStream consumeUntilEndOrOneOf(String... stopTokens) throws ParsingException, IllegalStateException {
  while (hasNext()) {
    if (matchesAnyOf(stopTokens)) {
      break;
    }
    consume();
  }
  return this;
}
","io.debezium.text.ParsingException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",963
79,"'-tryline","/** 
 * Process the supplied characters and construct the appropriate  {@link Token} objects.
 * @param input the character input stream; never null
 * @param tokens the factory for {@link Token} objects, which records the order in which the tokens are created
 * @throws ParsingException if there is an error while processing the character stream (e.g., a quote is not closed, etc.)
 */
void tokenize(CharacterStream input,Tokens tokens) throws ParsingException ;
","io.debezium.text.ParsingException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",2042
80,"'-tryline","@Override public void tokenize(CharacterStream input,Tokens tokens) throws ParsingException {
  while (input.hasNext()) {
    char c=input.next();
switch (c) {
case ' ':
case '\t':
case '\n':
case '\r':
      break;
case '-':
case '(':
case ')':
case '{':
case '}':
case '*':
case ',':
case ';':
case '+':
case '%':
case '?':
case '$':
case '[':
case ']':
case '!':
case '<':
case '>':
case '|':
case '=':
case ':':
    tokens.addToken(input.position(input.index()),input.index(),input.index() + 1,SYMBOL);
  break;
case '.':
tokens.addToken(input.position(input.index()),input.index(),input.index() + 1,DECIMAL);
break;
case '\':
int startIndex=input.index();
Position startingPosition=input.position(startIndex);
boolean foundClosingQuote=false;
while (input.hasNext()) {
c=input.next();
if (c == '\\' && input.isNext('')) {
c=input.next();
}
 else if (c == '' && input.isNext('')) {
c=input.next();
}
 else if (c == '') {
foundClosingQuote=true;
break;
}
}
if (!foundClosingQuote) {
String msg=No matching double quote found at line  + startingPosition.line() + , column + startingPosition.column();
throw new ParsingException(startingPosition,msg);
}
int endIndex=input.index() + 1;
tokens.addToken(startingPosition,startIndex,endIndex,DOUBLE_QUOTED_STRING);
break;
case '\'':
startIndex=input.index();
startingPosition=input.position(startIndex);
foundClosingQuote=false;
while (input.hasNext()) {
c=input.next();
if (c == '\\' && input.isNext('\'')) {
c=input.next();
}
 else if (c == '\'' && input.isNext('\'')) {
c=input.next();
}
 else if (c == '\'') {
foundClosingQuote=true;
break;
}
}
if (!foundClosingQuote) {
String msg=No matching single quote found at line  + startingPosition.line() + , column + startingPosition.column();
throw new ParsingException(startingPosition,msg);
}
endIndex=input.index() + 1;
tokens.addToken(startingPosition,startIndex,endIndex,SINGLE_QUOTED_STRING);
break;
case '/':
startIndex=input.index();
startingPosition=input.position(startIndex);
if (input.isNext('/')) {
boolean foundLineTerminator=false;
while (input.hasNext()) {
c=input.next();
if (c == '\n' || c == '\r') {
foundLineTerminator=true;
break;
}
}
endIndex=input.index();
if (!foundLineTerminator) {
++endIndex;
}
if (c == '\r' && input.isNext('\n')) {
input.next();
}
if (useComments) {
tokens.addToken(startingPosition,startIndex,endIndex,COMMENT);
}
}
 else if (input.isNext('*')) {
while (input.hasNext() && !input.isNext('*','/')) {
c=input.next();
}
if (input.hasNext()) {
input.next();
}
if (input.hasNext()) {
input.next();
}
if (useComments) {
endIndex=input.index() + 1;
tokens.addToken(startingPosition,startIndex,endIndex,COMMENT);
}
}
 else {
tokens.addToken(startingPosition,startIndex,startIndex + 1,SYMBOL);
}
break;
default :
startIndex=input.index();
startingPosition=input.position(startIndex);
while (input.hasNext() && !(input.isNextWhitespace() || input.isNextAnyOf(/.-(){}*,;+%?$[]!<>|=:))) {
c=input.next();
}
endIndex=input.index() + 1;
tokens.addToken(startingPosition,startIndex,endIndex,WORD);
}
}
}
","io.debezium.text.ParsingException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",2669
81,"'-tryline","@Override public void tokenize(CharacterStream input,Tokens tokens) throws ParsingException {
  int tokenStart=0;
  while (input.hasNext()) {
    char c=input.next();
    if (c == '\\') {
      if (!input.hasNext()) {
        throw new ParsingException(input.position(input.index()),Unterminated escape sequence at the end of the string);
      }
      input.next();
    }
 else     if (c == ',') {
      tokens.addToken(input.position(tokenStart),tokenStart,input.index());
      tokenStart=input.index() + 1;
    }
  }
  tokens.addToken(input.position(tokenStart),tokenStart,input.index() + 1);
}
","io.debezium.text.ParsingException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\Strings.java",1081
82,"'-tryline","/** 
 * Performs this operation on the given argument.
 * @param t the input argument
 * @throws E possibly thrown exception
 */
void execute(T t) throws E ;
","E","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\databases\Commands.java",18
83,"'-tryline","void execute(Commands<C,E> commands) throws E ;
","E","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\databases\DatabaseClient.java",14
84,"'-tryline","private String getFile(String fileName) throws IOException, URISyntaxException {
  URL jsonResource=getClass().getClassLoader().getResource(fileName);
  return new String(Files.readAllBytes(Paths.get(jsonResource.toURI())),StandardCharsets.UTF_8);
}
","java.net.URISyntaxException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\MongoDataConverterTest.java",125
85,"'-tryline","private String getFile(String fileName) throws IOException, URISyntaxException {
  URL jsonResource=getClass().getClassLoader().getResource(fileName);
  return new String(Files.readAllBytes(Paths.get(jsonResource.toURI())),StandardCharsets.UTF_8);
}
","java.net.URISyntaxException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ToAvroMongoDataConverterTest.java",98
86,"'-tryline","@Before public void beforeEach() throws TimeoutException, IOException, SQLException, InterruptedException {
  events.clear();
  DATABASE.createAndInitialize();
  conn=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName());
  conn.connect();
  config=conn.config();
}
","java.util.concurrent.TimeoutException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\ReadBinLogIT.java",81
87,"'-tryline","protected void startClient() throws IOException, TimeoutException, SQLException {
  startClient(null);
}
","java.util.concurrent.TimeoutException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\ReadBinLogIT.java",115
88,"'-tryline","protected void startClient(Consumer<BinaryLogClient> preConnect) throws IOException, TimeoutException, SQLException {
  counters=new EventQueue(DEFAULT_TIMEOUT,this::logConsumedEvent,this::logIgnoredEvent);
  client=new BinaryLogClient(config.getHostname(),config.getPort(),replicator,replpass);
  client.setServerId(client.getServerId() - 1);
  client.setKeepAlive(false);
  client.setSSLMode(SSLMode.DISABLED);
  client.registerEventListener(counters);
  client.registerEventListener(this::recordEvent);
  client.registerLifecycleListener(new TraceLifecycleListener());
  EventDeserializer eventDeserializer=new EventDeserializer();
  eventDeserializer.setEventDataDeserializer(EventType.STOP,new StopEventDataDeserializer());
  client.setEventDeserializer(eventDeserializer);
  if (preConnect != null) {
    preConnect.accept(client);
  }
  client.connect(DEFAULT_TIMEOUT);
  conn.execute(DROP TABLE IF EXISTS person,CREATE TABLE person ( +   name VARCHAR(255) primary key, +   age INTEGER NULL DEFAULT 10,+   createdAt DATETIME NULL DEFAULT CURRENT_TIMESTAMP,+   updatedAt DATETIME NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP+ ));
  counters.consume(2,EventType.QUERY);
  counters.reset();
}
","java.util.concurrent.TimeoutException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\ReadBinLogIT.java",119
89,"'-tryline","/** 
 * Blocks for the specified amount of time, consuming (and discarding) all events.
 * @param timeout the maximum amount of time that this method should block
 * @param unit the time unit for {@code timeout}
 * @throws TimeoutException if the waiting timed out before the expected number of events were received
 */
public void consumeAll(long timeout,TimeUnit unit) throws TimeoutException {
  final long stopTime=System.currentTimeMillis() + unit.toMillis(timeout);
  while (System.currentTimeMillis() < stopTime) {
    Event nextEvent=queue.poll();
    if (nextEvent != null) {
      Testing.print(Found event:  + nextEvent);
      consumedEvents.accept(nextEvent);
    }
  }
}
","java.util.concurrent.TimeoutException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\ReadBinLogIT.java",511
90,"'-tryline","/** 
 * Blocks until the listener has consume the specified number of matching events, blocking at most the default number of milliseconds. If this method has not reached the number of matching events and comes across events that do not satisfy the predicate, those events are consumed and ignored.
 * @param eventCount the number of events
 * @param condition the event-based predicate that signals a match; may not be null
 * @throws TimeoutException if the waiting timed out before the expected number of events were received
 */
public void consume(int eventCount,Predicate<Event> condition) throws TimeoutException {
  consume(eventCount,defaultTimeoutInMillis,condition);
}
","java.util.concurrent.TimeoutException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\ReadBinLogIT.java",529
91,"'-tryline","/** 
 * Blocks until the listener has consume the specified number of matching events, blocking at most the specified number of milliseconds. If this method has not reached the number of matching events and comes across events that do not satisfy the predicate, those events are consumed and ignored.
 * @param eventCount the number of events
 * @param timeoutInMillis the maximum amount of time in milliseconds that this method should block
 * @param condition the event-based predicate that signals a match; may not be null
 * @throws TimeoutException if the waiting timed out before the expected number of events were received
 */
public void consume(int eventCount,long timeoutInMillis,Predicate<Event> condition) throws TimeoutException {
  if (eventCount < 0) {
    throw new IllegalArgumentException(The eventCount may not be negative);
  }
  if (eventCount == 0) {
    return;
  }
  int eventsRemaining=eventCount;
  final long stopTime=System.currentTimeMillis() + timeoutInMillis;
  while (eventsRemaining > 0 && System.currentTimeMillis() < stopTime) {
    Event nextEvent=queue.poll();
    if (nextEvent != null) {
      if (condition.test(nextEvent)) {
        --eventsRemaining;
        consumedEvents.accept(nextEvent);
      }
 else {
        ignoredEvents.accept(nextEvent);
      }
    }
  }
  if (eventsRemaining > 0) {
    throw new TimeoutException(Received  + (eventCount - eventsRemaining) +  of + eventCount+  in + timeoutInMillis+ ms);
  }
}
","java.util.concurrent.TimeoutException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\ReadBinLogIT.java",542
92,"'-tryline","/** 
 * Blocks until the listener has seen the specified number of events with the given type, or until the default timeout has passed.
 * @param eventCount the number of events
 * @param type the type of event
 * @throws TimeoutException if the waiting timed out before the expected number of events were received
 */
public void consume(int eventCount,EventType type) throws TimeoutException {
  consume(eventCount,type,defaultTimeoutInMillis);
}
","java.util.concurrent.TimeoutException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\ReadBinLogIT.java",580
93,"'-tryline","/** 
 * Blocks until the listener has seen the specified number of events with the given type, or until the specified time has passed.
 * @param eventCount the number of events
 * @param type the type of event
 * @param timeoutMillis the maximum amount of time in milliseconds that this method should block
 * @throws TimeoutException if the waiting timed out before the expected number of events were received
 */
public void consume(int eventCount,EventType type,long timeoutMillis) throws TimeoutException {
  consume(eventCount,defaultTimeoutInMillis,event -> {
    EventHeader header=event.getHeader();
    EventType eventType=header == null ? null : header.getEventType();
    return type.equals(eventType);
  }
);
}
","java.util.concurrent.TimeoutException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\ReadBinLogIT.java",592
94,"'-tryline","/** 
 * Blocks until the listener has seen the specified number of events with the given type, or until the default timeout has passed.
 * @param eventCount the number of events
 * @param eventDataClass the EventData subclass
 * @throws TimeoutException if the waiting timed out before the expected number of events were received
 */
public void consume(int eventCount,Class<? extends EventData> eventDataClass) throws TimeoutException {
  consume(eventCount,eventDataClass,defaultTimeoutInMillis);
}
","java.util.concurrent.TimeoutException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\ReadBinLogIT.java",609
95,"'-tryline","/** 
 * Blocks until the listener has seen the specified number of events with event data matching the specified class, or until the specified time has passed.
 * @param eventCount the number of events
 * @param eventDataClass the EventData subclass
 * @param timeoutMillis the maximum amount of time in milliseconds that this method should block
 * @throws TimeoutException if the waiting timed out before the expected number of events were received
 */
public void consume(int eventCount,Class<? extends EventData> eventDataClass,long timeoutMillis) throws TimeoutException {
  consume(eventCount,defaultTimeoutInMillis,event -> {
    EventData data=event.getData();
    return data != null && data.getClass().equals(eventDataClass);
  }
);
}
","java.util.concurrent.TimeoutException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\ReadBinLogIT.java",621
96,"'-tryline","@Test public void shouldConsumeAllEventsFromDatabase() throws InterruptedException, IOException {
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.POLL_INTERVAL_MS,10).with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).build();
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbit);
  storeDocuments(dbit,simpletons,simple_objects.json);
  storeDocuments(dbit,restaurants,restaurants1.json);
  start(MongoDbConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(12);
  records.topics().forEach(System.out::println);
  assertThat(records.recordsForTopic(mongo.dbit.simpletons).size()).isEqualTo(6);
  assertThat(records.recordsForTopic(mongo.dbit.restaurants).size()).isEqualTo(6);
  assertThat(records.topics().size()).isEqualTo(2);
  AtomicBoolean foundLast=new AtomicBoolean(false);
  records.forEach(record -> {
    validate(record);
    verifyFromInitialSync(record,foundLast);
    verifyReadOperation(record);
  }
);
  assertThat(foundLast.get()).isTrue();
  storeDocuments(dbit,restaurants,restaurants2.json);
  SourceRecords records2=consumeRecordsByTopic(4);
  assertThat(records2.recordsForTopic(mongo.dbit.restaurants).size()).isEqualTo(4);
  assertThat(records2.topics().size()).isEqualTo(1);
  records2.forEach(record -> {
    validate(record);
    verifyNotFromInitialSync(record);
    verifyCreateOperation(record);
    verifyNotFromTransaction(record);
  }
);
  stopConnector();
  storeDocuments(dbit,restaurants,restaurants3.json);
  start(MongoDbConnector.class,config);
  SourceRecords records3=consumeRecordsByTopic(5);
  assertThat(records3.recordsForTopic(mongo.dbit.restaurants).size()).isEqualTo(5);
  assertThat(records3.topics().size()).isEqualTo(1);
  records3.forEach(record -> {
    validate(record);
    verifyNotFromInitialSync(record);
    verifyCreateOperation(record);
  }
);
  storeDocuments(dbit,restaurants,restaurants4.json);
  SourceRecords records4=consumeRecordsByTopic(8);
  assertThat(records4.recordsForTopic(mongo.dbit.restaurants).size()).isEqualTo(8);
  assertThat(records4.topics().size()).isEqualTo(1);
  records4.forEach(record -> {
    validate(record);
    verifyNotFromInitialSync(record);
    verifyCreateOperation(record);
  }
);
  AtomicReference<String> id=new AtomicReference<>();
  primary().execute(create,mongo -> {
    MongoDatabase db1=mongo.getDatabase(dbit);
    MongoCollection<Document> coll=db1.getCollection(arbitrary);
    coll.drop();
    Document doc=Document.parse({\a\: 1, \b\: 2});
    InsertOneOptions insertOptions=new InsertOneOptions().bypassDocumentValidation(true);
    coll.insertOne(doc,insertOptions);
    doc=coll.find().first();
    Testing.debug(Document:  + doc);
    id.set(doc.getObjectId(_id).toString());
    Testing.debug(Document ID:  + id.get());
  }
);
  primary().execute(update,mongo -> {
    MongoDatabase db1=mongo.getDatabase(dbit);
    MongoCollection<Document> coll=db1.getCollection(arbitrary);
    Document doc=coll.find().first();
    Testing.debug(Document:  + doc);
    Document filter=Document.parse({\a\: 1});
    Document operation=Document.parse({ \$set\: { \b\: 10 } });
    coll.updateOne(filter,operation);
    doc=coll.find().first();
    Testing.debug(Document:  + doc);
  }
);
  SourceRecords insertAndUpdate=consumeRecordsByTopic(2);
  assertThat(insertAndUpdate.recordsForTopic(mongo.dbit.arbitrary).size()).isEqualTo(2);
  assertThat(insertAndUpdate.topics().size()).isEqualTo(1);
  records4.forEach(record -> {
    validate(record);
    verifyNotFromInitialSync(record);
    verifyCreateOperation(record);
  }
);
  SourceRecord insertRecord=insertAndUpdate.allRecordsInOrder().get(0);
  SourceRecord updateRecord=insertAndUpdate.allRecordsInOrder().get(1);
  Testing.debug(Insert event:  + insertRecord);
  Testing.debug(Update event:  + updateRecord);
  Struct insertKey=(Struct)insertRecord.key();
  Struct updateKey=(Struct)updateRecord.key();
  String insertId=toObjectId(insertKey.getString(id)).toString();
  String updateId=toObjectId(updateKey.getString(id)).toString();
  assertThat(insertId).isEqualTo(id.get());
  assertThat(updateId).isEqualTo(id.get());
  primary().execute(delete,mongo -> {
    MongoDatabase db1=mongo.getDatabase(dbit);
    MongoCollection<Document> coll=db1.getCollection(arbitrary);
    Document filter=Document.parse({\a\: 1});
    coll.deleteOne(filter);
  }
);
  SourceRecords delete=consumeRecordsByTopic(2);
  assertThat(delete.recordsForTopic(mongo.dbit.arbitrary).size()).isEqualTo(2);
  assertThat(delete.topics().size()).isEqualTo(1);
  SourceRecord deleteRecord=delete.allRecordsInOrder().get(0);
  validate(deleteRecord);
  verifyNotFromInitialSync(deleteRecord);
  verifyDeleteOperation(deleteRecord);
  SourceRecord tombStoneRecord=delete.allRecordsInOrder().get(1);
  validate(tombStoneRecord);
  Testing.debug(Delete event:  + deleteRecord);
  Testing.debug(Tombstone event:  + tombStoneRecord);
  Struct deleteKey=(Struct)deleteRecord.key();
  String deleteId=toObjectId(deleteKey.getString(id)).toString();
  assertThat(deleteId).isEqualTo(id.get());
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",183
97,"'-tryline","@Test @FixFor(DBZ-1831) public void shouldConsumeAllEventsFromDatabaseWithSkippedOperations() throws InterruptedException, IOException {
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.POLL_INTERVAL_MS,10).with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).with(MongoDbConnectorConfig.SKIPPED_OPERATIONS,u).build();
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbit);
  start(MongoDbConnector.class,config);
  waitForStreamingRunning(mongodb,mongo);
  AtomicReference<String> id=new AtomicReference<>();
  primary().execute(create,mongo -> {
    MongoDatabase db1=mongo.getDatabase(dbit);
    MongoCollection<Document> coll=db1.getCollection(arbitrary);
    coll.drop();
    Document doc=Document.parse({\a\: 1, \b\: 2});
    InsertOneOptions insertOptions=new InsertOneOptions().bypassDocumentValidation(true);
    coll.insertOne(doc,insertOptions);
    doc=coll.find().first();
    Testing.debug(Document:  + doc);
    id.set(doc.getObjectId(_id).toString());
    Testing.debug(Document ID:  + id.get());
  }
);
  SourceRecords insert=consumeRecordsByTopic(1);
  assertThat(insert.recordsForTopic(mongo.dbit.arbitrary)).hasSize(1);
  primary().execute(update,mongo -> {
    MongoDatabase db1=mongo.getDatabase(dbit);
    MongoCollection<Document> coll=db1.getCollection(arbitrary);
    Document doc=coll.find().first();
    Testing.debug(Document:  + doc);
    Document filter=Document.parse({\a\: 1});
    Document operation=Document.parse({ \$set\: { \b\: 10 } });
    coll.updateOne(filter,operation);
    doc=coll.find().first();
    Testing.debug(Document:  + doc);
  }
);
  primary().execute(delete,mongo -> {
    MongoDatabase db1=mongo.getDatabase(dbit);
    MongoCollection<Document> coll=db1.getCollection(arbitrary);
    Document doc=coll.find().first();
    Testing.debug(Document:  + doc);
    Document filter=Document.parse({\a\: 1});
    coll.deleteOne(filter);
    doc=coll.find().first();
    Testing.debug(Document:  + doc);
  }
);
  SourceRecords delete=consumeRecordsByTopic(1);
  assertThat(delete.recordsForTopic(mongo.dbit.arbitrary)).hasSize(1);
  SourceRecord deleteRecord=delete.allRecordsInOrder().get(0);
  validate(deleteRecord);
  verifyDeleteOperation(deleteRecord);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",372
98,"'-tryline","@Test @FixFor(DBZ-1168) public void shouldConsumeAllEventsFromDatabaseWithCustomAuthSource() throws InterruptedException, IOException {
  final String authDbName=authdb;
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.POLL_INTERVAL_MS,10).with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).build();
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbit);
  primary().execute(Create auth database,client -> {
    final MongoDatabase db=client.getDatabase(authDbName);
    try {
      db.runCommand(BsonDocument.parse({dropUser: \dbz\}));
    }
 catch (    Exception e) {
      logger.info(Expected error while dropping user,e);
    }
    db.runCommand(BsonDocument.parse({createUser: \dbz\, pwd: \pass\, roles: [{role: \readAnyDatabase\, db: \admin\}]}));
  }
);
  storeDocuments(dbit,simpletons,simple_objects.json);
  storeDocuments(dbit,restaurants,restaurants1.json);
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.USER,dbz).with(MongoDbConnectorConfig.PASSWORD,pass).with(MongoDbConnectorConfig.AUTH_SOURCE,authDbName).with(MongoDbConnectorConfig.POLL_INTERVAL_MS,10).with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).build();
  context=new MongoDbTaskContext(config);
  start(MongoDbConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(12);
  records.topics().forEach(System.out::println);
  assertThat(records.recordsForTopic(mongo.dbit.simpletons).size()).isEqualTo(6);
  assertThat(records.recordsForTopic(mongo.dbit.restaurants).size()).isEqualTo(6);
  assertThat(records.topics().size()).isEqualTo(2);
  AtomicBoolean foundLast=new AtomicBoolean(false);
  records.forEach(record -> {
    validate(record);
    verifyFromInitialSync(record,foundLast);
    verifyReadOperation(record);
  }
);
  assertThat(foundLast.get()).isTrue();
  storeDocuments(dbit,restaurants,restaurants2.json);
  SourceRecords records2=consumeRecordsByTopic(4);
  assertThat(records2.recordsForTopic(mongo.dbit.restaurants).size()).isEqualTo(4);
  assertThat(records2.topics().size()).isEqualTo(1);
  records2.forEach(record -> {
    validate(record);
    verifyNotFromInitialSync(record);
    verifyCreateOperation(record);
    verifyNotFromTransaction(record);
  }
);
  stopConnector();
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",457
99,"'-tryline","@Test @FixFor(DBZ-1767) public void shouldSupportDbRef() throws InterruptedException, IOException {
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.POLL_INTERVAL_MS,10).with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).build();
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbit);
  storeDocuments(dbit,spec,spec_objects.json);
  context=new MongoDbTaskContext(config);
  start(MongoDbConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(mongo.dbit.spec).size()).isEqualTo(1);
  assertThat(records.topics().size()).isEqualTo(1);
  AtomicBoolean foundLast=new AtomicBoolean(false);
  records.forEach(record -> {
    validate(record);
    verifyFromInitialSync(record,foundLast);
    verifyReadOperation(record);
  }
);
  assertThat(foundLast.get()).isTrue();
  primary().execute(insert,client -> {
    client.getDatabase(dbit).getCollection(spec).insertOne(Document.parse({ '_id' : 2, 'data' : { '$ref' : 'a2', '$id' : 4, '$db' : 'b2' } }));
  }
);
  SourceRecords records2=consumeRecordsByTopic(1);
  assertThat(records2.recordsForTopic(mongo.dbit.spec).size()).isEqualTo(1);
  assertThat(records2.topics().size()).isEqualTo(1);
  records2.forEach(record -> {
    validate(record);
    verifyNotFromInitialSync(record);
    verifyCreateOperation(record);
    verifyNotFromTransaction(record);
  }
);
  stopConnector();
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",550
100,"'-tryline","@Test @FixFor(DBZ-865 and DBZ-1242) public void shouldConsumeEventsFromCollectionWithReplacedTopicName() throws InterruptedException, IOException {
  final LogInterceptor logInterceptor=new LogInterceptor();
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.POLL_INTERVAL_MS,10).with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.dbz865.*).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).build();
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbit);
  primary().execute(create,mongo -> {
    MongoDatabase db1=mongo.getDatabase(dbit);
    MongoCollection<Document> coll=db1.getCollection(dbz865_my@collection);
    coll.drop();
    Document doc=Document.parse({\a\: 1, \b\: 2});
    InsertOneOptions insertOptions=new InsertOneOptions().bypassDocumentValidation(true);
    coll.insertOne(doc,insertOptions);
  }
);
  start(MongoDbConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(12);
  records.topics().forEach(System.out::println);
  assertThat(records.recordsForTopic(mongo.dbit.dbz865_my_collection)).hasSize(1);
  assertThat(records.topics().size()).isEqualTo(1);
  AtomicBoolean foundLast=new AtomicBoolean(false);
  records.forEach(record -> {
    validate(record);
    verifyFromInitialSync(record,foundLast);
    verifyReadOperation(record);
  }
);
  assertThat(foundLast.get()).isTrue();
  stopConnector(value -> assertThat(logInterceptor.containsWarnMessage(DatabaseSchema.NO_CAPTURED_DATA_COLLECTIONS_WARNING)).isFalse());
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",618
101,"'-tryline","@Test @FixFor(DBZ-1215) public void shouldConsumeTransaction() throws InterruptedException, IOException {
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.POLL_INTERVAL_MS,10).with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).build();
  context=new MongoDbTaskContext(config);
  if (!TestHelper.transactionsSupported(primary(),dbit)) {
    logger.info(Test not executed, transactions not supported in the server);
    return;
  }
  TestHelper.cleanDatabase(primary(),dbit);
  storeDocuments(dbit,simpletons,simple_objects.json);
  storeDocuments(dbit,restaurants,restaurants1.json);
  start(MongoDbConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(12);
  records.topics().forEach(System.out::println);
  assertThat(records.recordsForTopic(mongo.dbit.simpletons).size()).isEqualTo(6);
  assertThat(records.recordsForTopic(mongo.dbit.restaurants).size()).isEqualTo(6);
  assertThat(records.topics().size()).isEqualTo(2);
  AtomicBoolean foundLast=new AtomicBoolean(false);
  records.forEach(record -> {
    validate(record);
    verifyFromInitialSync(record,foundLast);
    verifyReadOperation(record);
  }
);
  assertThat(foundLast.get()).isTrue();
  storeDocumentsInTx(dbit,restaurants,restaurants2.json);
  SourceRecords records2=consumeRecordsByTopic(4);
  assertThat(records2.recordsForTopic(mongo.dbit.restaurants).size()).isEqualTo(4);
  assertThat(records2.topics().size()).isEqualTo(1);
  final AtomicLong txOrder=new AtomicLong(0);
  records2.forEach(record -> {
    validate(record);
    verifyNotFromInitialSync(record);
    verifyCreateOperation(record);
    verifyFromTransaction(record,txOrder.incrementAndGet());
  }
);
  stopConnector();
  storeDocumentsInTx(dbit,restaurants,restaurants3.json);
  start(MongoDbConnector.class,config);
  SourceRecords records3=consumeRecordsByTopic(5);
  assertThat(records3.recordsForTopic(mongo.dbit.restaurants).size()).isEqualTo(5);
  assertThat(records3.topics().size()).isEqualTo(1);
  txOrder.set(0);
  records3.forEach(record -> {
    validate(record);
    verifyNotFromInitialSync(record);
    verifyCreateOperation(record);
    verifyFromTransaction(record,txOrder.incrementAndGet());
  }
);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",725
102,"'-tryline","@Test @FixFor(DBZ-1215) public void shouldResumeTransactionInMiddle() throws InterruptedException, IOException {
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.POLL_INTERVAL_MS,10).with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).build();
  context=new MongoDbTaskContext(config);
  if (!TestHelper.transactionsSupported(primary(),dbit)) {
    logger.info(Test not executed, transactions not supported in the server);
    return;
  }
  TestHelper.cleanDatabase(primary(),dbit);
  storeDocuments(dbit,simpletons,simple_objects.json);
  storeDocuments(dbit,restaurants,restaurants1.json);
  start(MongoDbConnector.class,config,record -> {
    final Struct struct=(Struct)record.value();
    final Long txOrder=struct.getStruct(source).getInt64(tord);
    return txOrder != null && txOrder.equals(3L);
  }
);
  SourceRecords records=consumeRecordsByTopic(12);
  records.topics().forEach(System.out::println);
  assertThat(records.recordsForTopic(mongo.dbit.simpletons).size()).isEqualTo(6);
  assertThat(records.recordsForTopic(mongo.dbit.restaurants).size()).isEqualTo(6);
  assertThat(records.topics().size()).isEqualTo(2);
  AtomicBoolean foundLast=new AtomicBoolean(false);
  records.forEach(record -> {
    validate(record);
    verifyFromInitialSync(record,foundLast);
    verifyReadOperation(record);
  }
);
  assertThat(foundLast.get()).isTrue();
  storeDocumentsInTx(dbit,restaurants,restaurants2.json);
  SourceRecords records2=consumeRecordsByTopic(2);
  assertThat(records2.recordsForTopic(mongo.dbit.restaurants).size()).isEqualTo(2);
  assertThat(records2.topics().size()).isEqualTo(1);
  final AtomicLong txOrder=new AtomicLong(0);
  records2.forEach(record -> {
    validate(record);
    verifyNotFromInitialSync(record);
    verifyCreateOperation(record);
    verifyFromTransaction(record,txOrder.incrementAndGet());
  }
);
  stopConnector();
  storeDocumentsInTx(dbit,restaurants,restaurants3.json);
  start(MongoDbConnector.class,config);
  SourceRecords records3=consumeRecordsByTopic(7);
  assertThat(records3.recordsForTopic(mongo.dbit.restaurants).size()).isEqualTo(7);
  assertThat(records3.topics().size()).isEqualTo(1);
  final List<Long> expectedTxOrd=Collect.arrayListOf(3L,4L,1L,2L,3L,4L,5L);
  records3.forEach(record -> {
    validate(record);
    verifyNotFromInitialSync(record);
    verifyCreateOperation(record);
    verifyFromTransaction(record,expectedTxOrd.remove(0));
  }
);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",819
103,"'-tryline","@Test(expected=ConnectException.class) public void shouldUseSSL() throws InterruptedException, IOException {
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.POLL_INTERVAL_MS,10).with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).with(MongoDbConnectorConfig.MAX_FAILED_CONNECTIONS,0).with(MongoDbConnectorConfig.SSL_ENABLED,true).with(MongoDbConnectorConfig.SERVER_SELECTION_TIMEOUT_MS,2000).build();
  context=new MongoDbTaskContext(config);
  final MongoPrimary primary=primary();
  primary.executeBlocking(Try SSL connection,mongo -> {
    primary.stop();
    mongo.getDatabase(dbit).listCollectionNames().first();
  }
);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",1186
104,"'-tryline","@Test @FixFor(DBZ-1198) public void shouldEmitHeartbeatMessages() throws InterruptedException, IOException {
  Testing.Print.enable();
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.POLL_INTERVAL_MS,10).with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.mhb).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).with(Heartbeat.HEARTBEAT_INTERVAL,1).build();
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbit);
  primary().execute(create,mongo -> {
    MongoDatabase db1=mongo.getDatabase(dbit);
    MongoCollection<Document> coll1=db1.getCollection(mhb);
    coll1.drop();
    Document doc=Document.parse({\a\: 1, \b\: 2});
    InsertOneOptions insertOptions=new InsertOneOptions().bypassDocumentValidation(true);
    coll1.insertOne(doc,insertOptions);
    MongoCollection<Document> coll2=db1.getCollection(nmhb);
    coll2.drop();
  }
);
  start(MongoDbConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.allRecordsInOrder()).hasSize(1);
  assertThat(records.recordsForTopic(mongo.dbit.mhb)).hasSize(1);
  primary().execute(insert-monitored,mongo -> {
    MongoDatabase db1=mongo.getDatabase(dbit);
    MongoCollection<Document> coll=db1.getCollection(mhb);
    Document doc=Document.parse({\a\: 2, \b\: 2});
    InsertOneOptions insertOptions=new InsertOneOptions().bypassDocumentValidation(true);
    coll.insertOne(doc,insertOptions);
  }
);
  records=consumeRecordsByTopic(2);
  assertThat(records.recordsForTopic(mongo.dbit.mhb)).hasSize(1);
  final Map<String,?> monitoredOffset=records.recordsForTopic(mongo.dbit.mhb).get(0).sourceOffset();
  final Integer monitoredTs=(Integer)monitoredOffset.get(SourceInfo.TIMESTAMP);
  final Integer monitoredOrd=(Integer)monitoredOffset.get(SourceInfo.ORDER);
  assertThat(records.recordsForTopic(__debezium-heartbeat.mongo)).hasSize(1);
  final Map<String,?> hbAfterMonitoredOffset=records.recordsForTopic(__debezium-heartbeat.mongo).get(0).sourceOffset();
  assertThat(monitoredTs).isEqualTo((Integer)hbAfterMonitoredOffset.get(SourceInfo.TIMESTAMP));
  assertThat(monitoredOrd).isEqualTo((Integer)hbAfterMonitoredOffset.get(SourceInfo.ORDER));
  primary().execute(insert-nonmonitored,mongo -> {
    MongoDatabase db1=mongo.getDatabase(dbit);
    MongoCollection<Document> coll=db1.getCollection(nmhb);
    Document doc=Document.parse({\a\: 3, \b\: 2});
    InsertOneOptions insertOptions=new InsertOneOptions().bypassDocumentValidation(true);
    coll.insertOne(doc,insertOptions);
  }
);
  records=consumeRecordsByTopic(2);
  final List<SourceRecord> heartbeatRecords=records.recordsForTopic(__debezium-heartbeat.mongo);
  assertThat(heartbeatRecords.size()).isGreaterThanOrEqualTo(1);
  heartbeatRecords.forEach(record -> {
    final Map<String,?> offset=record.sourceOffset();
    final Integer ts=(Integer)offset.get(SourceInfo.TIMESTAMP);
    final Integer ord=(Integer)offset.get(SourceInfo.ORDER);
    assertThat(ts > monitoredTs || (ts == monitoredTs && ord > monitoredOrd));
  }
);
  stopConnector();
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",1208
105,"'-tryline","@Test public void shouldTransformEvents() throws InterruptedException, IOException {
  final Map<String,String> transformationConfig=new HashMap<>();
  transformationConfig.put(CONFIG_DROP_TOMBSTONES,false);
  transformationConfig.put(HANDLE_DELETES,none);
  transformation.configure(transformationConfig);
  primary().execute(insert,client -> {
    long timestamp=ZonedDateTime.of(2020,1,28,10,00,33,0,ZoneId.of(UTC)).toEpochSecond();
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(Document.parse({ +   '_id': 1,  +   'dataStr': 'hello', +   'dataInt': 123, +   'dataLong': 80000000000, +   'dataDate': ISODate(\2020-01-27T10:47:12.311Z\), +   'dataTimestamp': Timestamp( + timestamp + , 1)+ }));
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  final SourceRecord insertRecord=records.recordsForTopic(this.topicName()).get(0);
  final SourceRecord transformedInsert=transformation.apply(insertRecord);
  final Struct transformedInsertValue=(Struct)transformedInsert.value();
  assertThat(transformedInsert.valueSchema().field(id).schema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(transformedInsert.valueSchema().field(dataStr).schema()).isEqualTo(Schema.OPTIONAL_STRING_SCHEMA);
  assertThat(transformedInsert.valueSchema().field(dataInt).schema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(transformedInsert.valueSchema().field(dataLong).schema()).isEqualTo(Schema.OPTIONAL_INT64_SCHEMA);
  assertThat(transformedInsertValue.get(id)).isEqualTo(1);
  assertThat(transformedInsertValue.get(dataStr)).isEqualTo(hello);
  assertThat(transformedInsertValue.get(dataInt)).isEqualTo(123);
  assertThat(transformedInsertValue.get(dataLong)).isEqualTo(80_000_000_000l);
  assertThat(transformedInsertValue.get(dataDate)).isEqualTo(Date.from(Instant.from(ZonedDateTime.of(2020,1,27,10,47,12,311000000,ZoneId.of(UTC)))));
  assertThat(transformedInsertValue.get(dataTimestamp)).isEqualTo(Date.from(Instant.from(ZonedDateTime.of(2020,1,28,10,00,33,0,ZoneId.of(UTC)))));
  primary().execute(update,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).updateOne(RawBsonDocument.parse({'_id' : 1}),RawBsonDocument.parse({'$set': {'dataStr': 'bye'}}));
  }
);
  records=consumeRecordsByTopic(1);
  final SourceRecord candidateUpdateRecord=records.recordsForTopic(this.topicName()).get(0);
  if (((Struct)candidateUpdateRecord.value()).get(op).equals(c)) {
    records=consumeRecordsByTopic(1);
  }
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  final SourceRecord updateRecord=records.recordsForTopic(this.topicName()).get(0);
  final SourceRecord transformedUpdate=transformation.apply(updateRecord);
  final Struct transformedUpdateValue=(Struct)transformedUpdate.value();
  assertThat(transformedUpdate.valueSchema().field(id).schema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(transformedUpdate.valueSchema().field(dataStr).schema()).isEqualTo(Schema.OPTIONAL_STRING_SCHEMA);
  assertThat(transformedUpdateValue.get(id)).isEqualTo(1);
  assertThat(transformedUpdateValue.get(dataStr)).isEqualTo(bye);
  primary().execute(update,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).updateOne(RawBsonDocument.parse({'_id' : 1}),RawBsonDocument.parse({'$set': {'newStr': 'hello', 'dataInt': 456}}));
  }
);
  records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  final SourceRecord updateMultipleRecord=records.recordsForTopic(this.topicName()).get(0);
  final SourceRecord transformedMultipleUpdate=transformation.apply(updateMultipleRecord);
  final Struct transformedMultipleUpdateValue=(Struct)transformedMultipleUpdate.value();
  assertThat(transformedMultipleUpdate.valueSchema().field(id).schema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(transformedMultipleUpdate.valueSchema().field(newStr).schema()).isEqualTo(Schema.OPTIONAL_STRING_SCHEMA);
  assertThat(transformedMultipleUpdate.valueSchema().field(dataInt).schema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(transformedMultipleUpdateValue.get(id)).isEqualTo(1);
  assertThat(transformedMultipleUpdateValue.get(newStr)).isEqualTo(hello);
  assertThat(transformedMultipleUpdateValue.get(dataInt)).isEqualTo(456);
  primary().execute(update,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).updateOne(RawBsonDocument.parse({'_id' : 1}),RawBsonDocument.parse({'$unset': {'newStr': ''}}));
  }
);
  records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  final SourceRecord updateUnsetRecord=records.recordsForTopic(this.topicName()).get(0);
  final SourceRecord transformedUnsetUpdate=transformation.apply(updateUnsetRecord);
  final Struct transformedUnsetUpdateValue=(Struct)transformedUnsetUpdate.value();
  assertThat(transformedUnsetUpdate.valueSchema().field(id).schema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(transformedUnsetUpdate.valueSchema().field(newStr).schema()).isEqualTo(Schema.OPTIONAL_STRING_SCHEMA);
  assertThat(transformedUnsetUpdateValue.get(id)).isEqualTo(1);
  assertThat(transformedUnsetUpdateValue.get(newStr)).isEqualTo(null);
  primary().execute(update,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).updateOne(RawBsonDocument.parse({'_id' : 1}),RawBsonDocument.parse({'dataStr': 'Hi again'}));
  }
);
  records=consumeRecordsByTopic(1);
  final SourceRecord candidateFullUpdateRecord=records.recordsForTopic(this.topicName()).get(0);
  if (((Struct)candidateFullUpdateRecord.value()).get(op).equals(c)) {
    records=consumeRecordsByTopic(1);
  }
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  final SourceRecord FullUpdateRecord=records.recordsForTopic(this.topicName()).get(0);
  final SourceRecord transformedFullUpdate=transformation.apply(FullUpdateRecord);
  final Struct transformedFullUpdateValue=(Struct)transformedFullUpdate.value();
  assertThat(transformedFullUpdate.valueSchema().field(id).schema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(transformedFullUpdate.valueSchema().field(dataStr).schema()).isEqualTo(Schema.OPTIONAL_STRING_SCHEMA);
  assertThat(transformedFullUpdateValue.get(id)).isEqualTo(1);
  assertThat(transformedFullUpdateValue.get(dataStr)).isEqualTo(Hi again);
  primary().execute(delete,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).deleteOne(RawBsonDocument.parse({'_id' : 1}));
  }
);
  records=consumeRecordsByTopic(2);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(2);
  final SourceRecord deleteRecord=records.recordsForTopic(this.topicName()).get(0);
  final SourceRecord transformedDelete=transformation.apply(deleteRecord);
  final Struct transformedDeleteValue=(Struct)transformedDelete.value();
  assertThat(transformedDeleteValue).isNull();
  final SourceRecord tombstoneRecord=records.recordsForTopic(this.topicName()).get(1);
  final SourceRecord transformedTombstone=transformation.apply(tombstoneRecord);
  assertThat(transformedTombstone.value()).isNull();
  assertThat(SchemaUtil.asString(transformedDelete.keySchema())).isEqualTo(SchemaUtil.asString(transformedTombstone.keySchema()));
  assertThat(transformedDelete.key().toString()).isEqualTo(transformedTombstone.key().toString());
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",110
106,"'-tryline","@Test @FixFor(DBZ-1767) public void shouldSupportDbRef() throws InterruptedException, IOException {
  final Map<String,String> transformationConfig=new HashMap<>();
  transformationConfig.put(array.encoding,array);
  transformationConfig.put(operation.header,true);
  transformationConfig.put(sanitize.field.names,true);
  transformation.configure(transformationConfig);
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(Document.parse({ '_id' : 2, 'data' : { '$ref' : 'a2', '$id' : 4, '$db' : 'b2' } }));
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  final SourceRecord transformed=transformation.apply(records.allRecordsInOrder().get(0));
  validate(transformed);
  final Struct value=((Struct)transformed.value()).getStruct(data);
  Assertions.assertThat(value.getString(_ref)).isEqualTo(a2);
  Assertions.assertThat(value.getInt32(_id)).isEqualTo(4);
  Assertions.assertThat(value.getString(_db)).isEqualTo(b2);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",262
107,"'-tryline","@Test @FixFor(DBZ-2680) public void shouldSupportSubSanitizeFieldName() throws InterruptedException, IOException {
  final Map<String,String> transformationConfig=new HashMap<>();
  transformationConfig.put(array.encoding,array);
  transformationConfig.put(operation.header,true);
  transformationConfig.put(sanitize.field.names,true);
  transformation.configure(transformationConfig);
  final String doc={ +   \_id\: \222\, +   \metrics\: {+     \metric::fct\: {+       \min\: 0,+       \max\: 1,+     },+   }+ };
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(Document.parse(doc));
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  final SourceRecord transformed=transformation.apply(records.allRecordsInOrder().get(0));
  validate(transformed);
  final Struct metric=((Struct)transformed.value()).getStruct(metrics).getStruct(metric__fct);
  Assertions.assertThat(metric.getInt32(min)).isEqualTo(0);
  Assertions.assertThat(metric.getInt32(max)).isEqualTo(1);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",288
108,"'-tryline","@Test @FixFor(DBZ-2585) public void testEmptyArray() throws InterruptedException, IOException {
  final Map<String,String> transformationConfig=new HashMap<>();
  transformationConfig.put(array.encoding,array);
  transformationConfig.put(sanitize.field.names,true);
  transformation.configure(transformationConfig);
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(Document.parse({'empty_array': [] }));
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  final SourceRecord insertRecord=records.recordsForTopic(this.topicName()).get(0);
  final SourceRecord transformedInsert=transformation.apply(insertRecord);
  assertThat(transformedInsert.valueSchema().field(empty_array)).isNull();
  VerifyRecord.isValid(transformedInsert);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",1433
109,"'-tryline","@Test @FixFor(DBZ-2569) public void testMatrixType() throws InterruptedException, IOException {
  final Map<String,String> transformationConfig=new HashMap<>();
  transformationConfig.put(array.encoding,array);
  transformationConfig.put(CONFIG_DROP_TOMBSTONES,false);
  transformationConfig.put(HANDLE_DELETES,none);
  transformation.configure(transformationConfig);
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(Document.parse({ +   'matrix': [ +     [1,2,3],+     [4,5,6],+     [7,8,9],+   ]+   ,'array_complex': [+     {'k1' : 'v1','k2' : 1},+     {'k1' : 'v2','k2' : 2},+   ]+   ,'matrix_complex': [+     [+       {'k3' : 'v111',+        'k4' : [1,2,3]},+       {'k3' : 'v211',+        'k4' : [4,5,6]}+     ],+     [+       {'k3' : 'v112',+        'k4' : [7,8]},+       {'k3' : 'v212',+        'k4' : [8]}+     ],+   ]+ }));
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  final SourceRecord insertRecord=records.recordsForTopic(this.topicName()).get(0);
  final SourceRecord transformedInsert=transformation.apply(insertRecord);
  final Struct transformedInsertValue=(Struct)transformedInsert.value();
  final Schema matrixSchema=transformedInsert.valueSchema().field(matrix).schema();
  assertThat(matrixSchema.type()).isEqualTo(Schema.Type.ARRAY);
  final Schema subMatrixSchema=matrixSchema.valueSchema().schema();
  assertThat(subMatrixSchema.type()).isEqualTo(Schema.Type.ARRAY);
  assertThat(subMatrixSchema.valueSchema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(transformedInsertValue.get(matrix)).isEqualTo(Arrays.asList(Arrays.asList(1,2,3),Arrays.asList(4,5,6),Arrays.asList(7,8,9)));
  final Schema arrayComplexSchema=transformedInsert.valueSchema().field(array_complex).schema();
  assertThat(arrayComplexSchema.type()).isEqualTo(Schema.Type.ARRAY);
  final Schema subArrayComplexSchema=arrayComplexSchema.valueSchema().schema();
  assertThat(subArrayComplexSchema.type()).isEqualTo(Schema.Type.STRUCT);
  assertThat(subArrayComplexSchema.field(k1).schema()).isEqualTo(Schema.OPTIONAL_STRING_SCHEMA);
  assertThat(subArrayComplexSchema.field(k2).schema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  final Field k1=subArrayComplexSchema.field(k1);
  final Field k2=subArrayComplexSchema.field(k2);
  final Struct subStruct1=new Struct(subArrayComplexSchema);
  subStruct1.put(k1,v1);
  subStruct1.put(k2,1);
  final Struct subStruct2=new Struct(subArrayComplexSchema);
  subStruct2.put(k1,v2);
  subStruct2.put(k2,2);
  assertThat(transformedInsertValue.get(array_complex)).isEqualTo(Arrays.asList(subStruct1,subStruct2));
  final Schema matrixComplexSchema=transformedInsert.valueSchema().field(matrix_complex).schema();
  assertThat(matrixComplexSchema.type()).isEqualTo(Schema.Type.ARRAY);
  final Schema subMatrixComplexSchema=matrixComplexSchema.valueSchema().schema();
  assertThat(subMatrixComplexSchema.type()).isEqualTo(Schema.Type.ARRAY);
  Schema strucSchema=subMatrixComplexSchema.valueSchema();
  assertThat(strucSchema.schema().type()).isEqualTo(Schema.Type.STRUCT);
  assertThat(strucSchema.field(k3).schema()).isEqualTo(Schema.OPTIONAL_STRING_SCHEMA);
  assertThat(strucSchema.field(k4).schema().type()).isEqualTo(Schema.Type.ARRAY);
  assertThat(strucSchema.field(k4).schema().valueSchema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  final Field k3=strucSchema.field(k3);
  final Field k4=strucSchema.field(k4);
  final Struct subStruct11=new Struct(strucSchema.schema());
  subStruct11.put(k3,v111);
  subStruct11.put(k4,Arrays.asList(1,2,3));
  final Struct subStruct12=new Struct(strucSchema.schema());
  subStruct12.put(k3,v112);
  subStruct12.put(k4,Arrays.asList(7,8));
  final Struct subStruct21=new Struct(strucSchema.schema());
  subStruct21.put(k3,v211);
  subStruct21.put(k4,Arrays.asList(4,5,6));
  final Struct subStruct22=new Struct(strucSchema.schema());
  subStruct22.put(k3,v212);
  subStruct22.put(k4,Arrays.asList(8));
  assertThat(transformedInsertValue.get(matrix_complex)).isEqualTo(Arrays.asList(Arrays.asList(subStruct11,subStruct21),Arrays.asList(subStruct12,subStruct22)));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",1534
110,"'-tryline","@Test @FixFor(DBZ-2569) public void testMatrixArrayAsDocumentType() throws InterruptedException, IOException {
  final Map<String,String> transformationConfig=new HashMap<>();
  transformationConfig.put(array.encoding,document);
  transformationConfig.put(CONFIG_DROP_TOMBSTONES,false);
  transformationConfig.put(HANDLE_DELETES,none);
  transformation.configure(transformationConfig);
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(Document.parse({ +   'matrix': [ +     [1,'aa',3],+     [4,5,'6'],+     [7.0,8],+   ]+ }));
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  final SourceRecord insertRecord=records.recordsForTopic(this.topicName()).get(0);
  final SourceRecord transformedInsert=transformation.apply(insertRecord);
  final Schema matrixSchema=transformedInsert.valueSchema().field(matrix).schema();
  assertThat(matrixSchema.type()).isEqualTo(Schema.Type.STRUCT);
  assertThat(matrixSchema.fields().size()).isEqualTo(3);
  final Schema firstSubSchema=matrixSchema.field(_0).schema();
  assertThat(firstSubSchema.type()).isEqualTo(Schema.Type.STRUCT);
  assertThat(firstSubSchema.fields().size()).isEqualTo(3);
  assertThat(firstSubSchema.field(_0).schema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(firstSubSchema.field(_1).schema()).isEqualTo(Schema.OPTIONAL_STRING_SCHEMA);
  assertThat(firstSubSchema.field(_2).schema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  final Schema secondSubSchema=matrixSchema.field(_1).schema();
  assertThat(secondSubSchema.type()).isEqualTo(Schema.Type.STRUCT);
  assertThat(secondSubSchema.fields().size()).isEqualTo(3);
  assertThat(secondSubSchema.field(_0).schema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(secondSubSchema.field(_1).schema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(secondSubSchema.field(_2).schema()).isEqualTo(Schema.OPTIONAL_STRING_SCHEMA);
  final Schema thirdSubSchema=matrixSchema.field(_2).schema();
  assertThat(thirdSubSchema.type()).isEqualTo(Schema.Type.STRUCT);
  assertThat(thirdSubSchema.fields().size()).isEqualTo(2);
  assertThat(thirdSubSchema.field(_0).schema()).isEqualTo(Schema.OPTIONAL_FLOAT64_SCHEMA);
  assertThat(thirdSubSchema.field(_1).schema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  final Struct transformedInsertValue=(Struct)transformedInsert.value();
  final Struct firstSubStruct=new Struct(firstSubSchema);
  firstSubStruct.put(firstSubSchema.field(_0),1);
  firstSubStruct.put(firstSubSchema.field(_1),aa);
  firstSubStruct.put(firstSubSchema.field(_2),3);
  final Struct secondSubStruct=new Struct(secondSubSchema);
  secondSubStruct.put(secondSubSchema.field(_0),4);
  secondSubStruct.put(secondSubSchema.field(_1),5);
  secondSubStruct.put(secondSubSchema.field(_2),6);
  final Struct thirdSubStruct=new Struct(thirdSubSchema);
  thirdSubStruct.put(thirdSubSchema.field(_0),7.0);
  thirdSubStruct.put(thirdSubSchema.field(_1),8);
  final Struct struct=new Struct(matrixSchema);
  struct.put(matrixSchema.field(_0),firstSubStruct);
  struct.put(matrixSchema.field(_1),secondSubStruct);
  struct.put(matrixSchema.field(_2),thirdSubStruct);
  assertThat(transformedInsertValue.get(matrix)).isEqualTo(struct);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",1630
111,"'-tryline","private String getFile(String fileName) throws IOException, URISyntaxException {
  URL jsonResource=getClass().getClassLoader().getResource(fileName);
  return new String(Files.readAllBytes(Paths.get(jsonResource.toURI())),StandardCharsets.UTF_8);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\MongoDataConverterTest.java",125
112,"'-tryline","private String getFile(String fileName) throws IOException, URISyntaxException {
  URL jsonResource=getClass().getClassLoader().getResource(fileName);
  return new String(Files.readAllBytes(Paths.get(jsonResource.toURI())),StandardCharsets.UTF_8);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ToAvroMongoDataConverterTest.java",98
113,"'-tryline","@Override public Event nextEvent(ByteArrayInputStream inputStream) throws IOException {
  try {
    Event event=super.nextEvent(inputStream);
    if (event.getHeader().getEventType() == EventType.TABLE_MAP) {
      TableMapEventData tableMapEvent=event.getData();
      tableMapEventByTableId.put(tableMapEvent.getTableId(),tableMapEvent);
    }
    return event;
  }
 catch (  EventDataDeserializationException edde) {
    EventHeaderV4 header=new EventHeaderV4();
    header.setEventType(EventType.INCIDENT);
    header.setTimestamp(edde.getEventHeader().getTimestamp());
    header.setServerId(edde.getEventHeader().getServerId());
    if (edde.getEventHeader() instanceof EventHeaderV4) {
      header.setEventLength(((EventHeaderV4)edde.getEventHeader()).getEventLength());
      header.setNextPosition(((EventHeaderV4)edde.getEventHeader()).getNextPosition());
      header.setFlags(((EventHeaderV4)edde.getEventHeader()).getFlags());
    }
    EventData data=new EventDataDeserializationExceptionData(edde);
    return new Event(header,data);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\BinlogReader.java",255
114,"'-tryline","@Override public Event nextEvent(ByteArrayInputStream inputStream) throws IOException {
  try {
    Event event=super.nextEvent(inputStream);
    if (event.getHeader().getEventType() == EventType.TABLE_MAP) {
      TableMapEventData tableMapEvent=event.getData();
      tableMapEventByTableId.put(tableMapEvent.getTableId(),tableMapEvent);
    }
    return event;
  }
 catch (  EventDataDeserializationException edde) {
    if (edde.getCause() instanceof IOException) {
      throw edde;
    }
    EventHeaderV4 header=new EventHeaderV4();
    header.setEventType(EventType.INCIDENT);
    header.setTimestamp(edde.getEventHeader().getTimestamp());
    header.setServerId(edde.getEventHeader().getServerId());
    if (edde.getEventHeader() instanceof EventHeaderV4) {
      header.setEventLength(((EventHeaderV4)edde.getEventHeader()).getEventLength());
      header.setNextPosition(((EventHeaderV4)edde.getEventHeader()).getNextPosition());
      header.setFlags(((EventHeaderV4)edde.getEventHeader()).getFlags());
    }
    EventData data=new EventDataDeserializationExceptionData(edde);
    return new Event(header,data);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlStreamingChangeEventSource.java",229
115,"'-tryline","@Override protected Serializable deserializeString(int length,ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeString(length,inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",61
116,"'-tryline","@Override protected Serializable deserializeVarString(int meta,ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeVarString(meta,inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",66
117,"'-tryline","@Override protected Serializable deserializeDate(ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeDate(inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",71
118,"'-tryline","@Override protected Serializable deserializeDatetime(ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeDatetime(inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",76
119,"'-tryline","@Override protected Serializable deserializeDatetimeV2(int meta,ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeDatetimeV2(meta,inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",81
120,"'-tryline","@Override protected Serializable deserializeTimeV2(int meta,ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeTimeV2(meta,inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",86
121,"'-tryline","@Override protected Serializable deserializeTime(ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeTime(inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",91
122,"'-tryline","@Override protected Serializable deserializeTimestamp(ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeTimestamp(inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",96
123,"'-tryline","@Override protected Serializable deserializeTimestampV2(int meta,ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeTimestampV2(meta,inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",101
124,"'-tryline","@Override protected Serializable deserializeYear(ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeYear(inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",106
125,"'-tryline","@Override protected Serializable deserializeString(int length,ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeString(length,inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",123
126,"'-tryline","@Override protected Serializable deserializeVarString(int meta,ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeVarString(meta,inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",128
127,"'-tryline","@Override protected Serializable deserializeDate(ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeDate(inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",133
128,"'-tryline","@Override protected Serializable deserializeDatetime(ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeDatetime(inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",138
129,"'-tryline","@Override protected Serializable deserializeDatetimeV2(int meta,ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeDatetimeV2(meta,inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",143
130,"'-tryline","@Override protected Serializable deserializeTimeV2(int meta,ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeTimeV2(meta,inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",148
131,"'-tryline","@Override protected Serializable deserializeTime(ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeTime(inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",153
132,"'-tryline","@Override protected Serializable deserializeTimestamp(ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeTimestamp(inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",158
133,"'-tryline","@Override protected Serializable deserializeTimestampV2(int meta,ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeTimestampV2(meta,inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",163
134,"'-tryline","@Override protected Serializable deserializeYear(ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeYear(inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",168
135,"'-tryline","@Override protected Serializable deserializeString(int length,ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeString(length,inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",185
136,"'-tryline","@Override protected Serializable deserializeVarString(int meta,ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeVarString(meta,inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",190
137,"'-tryline","@Override protected Serializable deserializeDate(ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeDate(inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",195
138,"'-tryline","@Override protected Serializable deserializeDatetime(ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeDatetime(inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",200
139,"'-tryline","@Override protected Serializable deserializeDatetimeV2(int meta,ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeDatetimeV2(meta,inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",205
140,"'-tryline","@Override protected Serializable deserializeTimeV2(int meta,ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeTimeV2(meta,inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",210
141,"'-tryline","@Override protected Serializable deserializeTime(ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeTime(inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",215
142,"'-tryline","@Override protected Serializable deserializeTimestamp(ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeTimestamp(inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",220
143,"'-tryline","@Override protected Serializable deserializeTimestampV2(int meta,ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeTimestampV2(meta,inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",225
144,"'-tryline","@Override protected Serializable deserializeYear(ByteArrayInputStream inputStream) throws IOException {
  return RowDeserializers.deserializeYear(inputStream);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",230
145,"'-tryline","/** 
 * Converts a MySQL string to a  {@code byte[]}.
 * @param length the number of bytes used to store the length of the string
 * @param inputStream the binary stream containing the raw binlog event data for the value
 * @return the {@code byte[]} object
 * @throws IOException if there is an error reading from the binlog event data
 */
protected static Serializable deserializeString(int length,ByteArrayInputStream inputStream) throws IOException {
  int stringLength=length < 256 ? inputStream.readInteger(1) : inputStream.readInteger(2);
  return inputStream.read(stringLength);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",239
146,"'-tryline","/** 
 * Converts a MySQL string to a  {@code byte[]}.
 * @param meta the {@code meta} value containing the number of bytes in the length field
 * @param inputStream the binary stream containing the raw binlog event data for the value
 * @return the {@code byte[]} object
 * @throws IOException if there is an error reading from the binlog event data
 */
protected static Serializable deserializeVarString(int meta,ByteArrayInputStream inputStream) throws IOException {
  int varcharLength=meta < 256 ? inputStream.readInteger(1) : inputStream.readInteger(2);
  return inputStream.read(varcharLength);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",254
147,"'-tryline","/** 
 * Converts a MySQL  {@code DATE} value to a {@link LocalDate}. <p> This method treats all <a href=http://dev.mysql.com/doc/refman/5.7/en/date-and-time-types.html>zero values</a> for  {@code DATE} columns as NULL, since they cannot be accurately represented as valid {@link LocalDate} objects.
 * @param inputStream the binary stream containing the raw binlog event data for the value
 * @return the {@link LocalDate} object
 * @throws IOException if there is an error reading from the binlog event data
 */
protected static Serializable deserializeDate(ByteArrayInputStream inputStream) throws IOException {
  int value=inputStream.readInteger(3);
  int day=value % 32;
  value>>>=5;
  int month=value % 16;
  int year=value >> 4;
  if (year == 0 || month == 0 || day == 0) {
    return null;
  }
  return LocalDate.of(year,month,day);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",267
148,"'-tryline","/** 
 * Converts a MySQL  {@code TIME} value <em>without fractional seconds</em> to a {@link java.time.Duration}.
 * @param inputStream the binary stream containing the raw binlog event data for the value
 * @return the {@link LocalTime} object
 * @throws IOException if there is an error reading from the binlog event data
 */
protected static Serializable deserializeTime(ByteArrayInputStream inputStream) throws IOException {
  int value=inputStream.readInteger(3);
  int[] split=split(value,100,3);
  int hours=split[2];
  int minutes=split[1];
  int seconds=split[0];
  return Duration.ofHours(hours).plusMinutes(minutes).plusSeconds(seconds);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",289
149,"'-tryline","/** 
 * Converts a MySQL  {@code TIME} value <em>with fractional seconds</em> to a {@link java.time.Duration}.
 * @param meta the {@code meta} value containing the fractional second precision, or {@code fsp}
 * @param inputStream the binary stream containing the raw binlog event data for the value
 * @return the {@link java.time.Duration} object
 * @throws IOException if there is an error reading from the binlog event data
 */
protected static Serializable deserializeTimeV2(int meta,ByteArrayInputStream inputStream) throws IOException {
  long time=bigEndianLong(inputStream.read(3),0,3);
  boolean is_negative=bitSlice(time,0,1,24) == 0;
  int hours=bitSlice(time,2,10,24);
  int minutes=bitSlice(time,12,6,24);
  int seconds=bitSlice(time,18,6,24);
  int nanoSeconds;
  if (is_negative) {
    hours=~hours & MASK_10_BITS;
    hours=hours & ~(1 << 10);
    minutes=~minutes & MASK_6_BITS;
    minutes=minutes & ~(1 << 6);
    seconds=~seconds & MASK_6_BITS;
    seconds=seconds & ~(1 << 6);
    nanoSeconds=deserializeFractionalSecondsInNanosNegative(meta,inputStream);
    if (nanoSeconds == 0 && seconds < 59) {
      ++seconds;
    }
    hours=-hours;
    minutes=-minutes;
    seconds=-seconds;
    nanoSeconds=-nanoSeconds;
  }
 else {
    nanoSeconds=deserializeFractionalSecondsInNanos(meta,inputStream);
  }
  return Duration.ofHours(hours).plusMinutes(minutes).plusSeconds(seconds).plusNanos(nanoSeconds);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",306
150,"'-tryline","/** 
 * Converts a MySQL  {@code DATETIME} value <em>without fractional seconds</em> to a {@link LocalDateTime}. <p> This method treats all <a href=http://dev.mysql.com/doc/refman/5.7/en/date-and-time-types.html>zero values</a> for  {@code DATETIME} columns as NULL, since they cannot be accurately represented as valid {@link LocalDateTime} objects.
 * @param inputStream the binary stream containing the raw binlog event data for the value
 * @return the {@link LocalDateTime} object
 * @throws IOException if there is an error reading from the binlog event data
 */
protected static Serializable deserializeDatetime(ByteArrayInputStream inputStream) throws IOException {
  int[] split=split(inputStream.readLong(8),100,6);
  int year=split[5];
  int month=split[4];
  int day=split[3];
  int hours=split[2];
  int minutes=split[1];
  int seconds=split[0];
  int nanoOfSecond=0;
  if (year == 0 || month == 0 || day == 0) {
    return null;
  }
  return LocalDateTime.of(year,month,day,hours,minutes,seconds,nanoOfSecond);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",356
151,"'-tryline","/** 
 * Converts a MySQL  {@code DATETIME} value <em>with fractional seconds</em> to a {@link LocalDateTime}. <p> This method treats all <a href=http://dev.mysql.com/doc/refman/5.7/en/date-and-time-types.html>zero values</a> for  {@code DATETIME} columns as NULL, since they cannot be accurately represented as valid {@link LocalDateTime} objects.
 * @param meta the {@code meta} value containing the fractional second precision, or {@code fsp}
 * @param inputStream the binary stream containing the raw binlog event data for the value
 * @return the {@link LocalDateTime} object
 * @throws IOException if there is an error reading from the binlog event data
 */
protected static Serializable deserializeDatetimeV2(int meta,ByteArrayInputStream inputStream) throws IOException {
  long datetime=bigEndianLong(inputStream.read(5),0,5);
  int yearMonth=bitSlice(datetime,1,17,40);
  int year=yearMonth / 13;
  int month=yearMonth % 13;
  int day=bitSlice(datetime,18,5,40);
  int hours=bitSlice(datetime,23,5,40);
  int minutes=bitSlice(datetime,28,6,40);
  int seconds=bitSlice(datetime,34,6,40);
  int nanoOfSecond=deserializeFractionalSecondsInNanos(meta,inputStream);
  if (year == 0 || month == 0 || day == 0) {
    return null;
  }
  return LocalDateTime.of(year,month,day,hours,minutes,seconds,nanoOfSecond);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",381
152,"'-tryline","/** 
 * Converts a MySQL  {@code TIMESTAMP} value <em>without fractional seconds</em> to a {@link OffsetDateTime}. MySQL stores the  {@code TIMESTAMP} values as seconds past epoch in UTC, but the resulting {@link OffsetDateTime} willbe in the local timezone.
 * @param inputStream the binary stream containing the raw binlog event data for the value
 * @return the {@link OffsetDateTime} object
 * @throws IOException if there is an error reading from the binlog event data
 */
protected static Serializable deserializeTimestamp(ByteArrayInputStream inputStream) throws IOException {
  long epochSecond=inputStream.readLong(4);
  int nanoSeconds=0;
  return ZonedDateTime.ofInstant(Instant.ofEpochSecond(epochSecond,nanoSeconds),ZoneOffset.UTC);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",422
153,"'-tryline","/** 
 * Converts a MySQL  {@code TIMESTAMP} value <em>with fractional seconds</em> to a {@link OffsetDateTime}. MySQL stores the  {@code TIMESTAMP} values as seconds + fractional seconds past epoch in UTC, but the resulting{@link OffsetDateTime} will be in the local timezone.
 * @param meta the {@code meta} value containing the fractional second precision, or {@code fsp}
 * @param inputStream the binary stream containing the raw binlog event data for the value
 * @return the {@link OffsetDateTime} object
 * @throws IOException if there is an error reading from the binlog event data
 */
protected static Serializable deserializeTimestampV2(int meta,ByteArrayInputStream inputStream) throws IOException {
  long epochSecond=bigEndianLong(inputStream.read(4),0,4);
  int nanoSeconds=deserializeFractionalSecondsInNanos(meta,inputStream);
  return ZonedDateTime.ofInstant(Instant.ofEpochSecond(epochSecond,nanoSeconds),ZoneOffset.UTC);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",437
154,"'-tryline","/** 
 * Converts a MySQL  {@code YEAR} value to a {@link Year} object.
 * @param inputStream the binary stream containing the raw binlog event data for the value
 * @return the {@link Year} object
 * @throws IOException if there is an error reading from the binlog event data
 */
protected static Serializable deserializeYear(ByteArrayInputStream inputStream) throws IOException {
  return Year.of(1900 + inputStream.readInteger(1));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",453
155,"'-tryline","/** 
 * Read the binary input stream to obtain the number of nanoseconds given the <em>fractional seconds precision</em>, or <em>fsp</em>. <p> We can't use/access the  {@code deserializeFractionalSeconds} method in the {@link AbstractRowsEventDataDeserializer} class,so we replicate it here with modifications to support nanoseconds rather than microseconds. Note the original is licensed under the same Apache Software License 2.0 as Debezium.
 * @param fsp the fractional seconds precision describing the number of digits precision used to store the fractional seconds(e.g., 1 for storing tenths of a second, 2 for storing hundredths, 3 for storing milliseconds, etc.)
 * @param inputStream the binary data stream
 * @return the number of nanoseconds
 * @throws IOException if there is an error reading from the binlog event data
 */
protected static int deserializeFractionalSecondsInNanos(int fsp,ByteArrayInputStream inputStream) throws IOException {
  int length=(fsp + 1) / 2;
  if (length > 0) {
    long fraction=bigEndianLong(inputStream.read(length),0,length);
    return (int)(fraction / (0.0000001 * Math.pow(100,length - 1)));
  }
  return 0;
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",526
156,"'-tryline","/** 
 * Read the binary input stream to obtain the number of nanoseconds given the <em>fractional seconds precision</em>, or <em>fsp</em>. <p> We can't use/access the  {@code deserializeFractionalSeconds} method in the {@link AbstractRowsEventDataDeserializer} class,so we replicate it here with modifications to support nanoseconds rather than microseconds and negative values. Note the original is licensed under the same Apache Software License 2.0 as Debezium.
 * @param fsp the fractional seconds precision describing the number of digits precision used to store the fractional seconds(e.g., 1 for storing tenths of a second, 2 for storing hundredths, 3 for storing milliseconds, etc.)
 * @param inputStream the binary data stream
 * @return the number of nanoseconds
 * @throws IOException if there is an error reading from the binlog event data
 */
protected static int deserializeFractionalSecondsInNanosNegative(int fsp,ByteArrayInputStream inputStream) throws IOException {
  int length=(fsp + 1) / 2;
  if (length > 0) {
    long fraction=bigEndianLong(inputStream.read(length),0,length);
    int maskBits=0;
switch (length) {
case 1:
      maskBits=8;
    break;
case 2:
  maskBits=15;
break;
case 3:
maskBits=20;
break;
default :
break;
}
fraction=~fraction & ((1 << maskBits) - 1);
fraction=(fraction & ~(1 << maskBits)) + 1;
return (int)(fraction / (0.0000001 * Math.pow(100,length - 1)));
}
return 0;
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\RowDeserializers.java",554
157,"'-tryline","@Override public StopEventData deserialize(ByteArrayInputStream inputStream) throws IOException {
  return new StopEventData();
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\StopEventDataDeserializer.java",18
158,"'-tryline","@Before public void beforeEach() throws TimeoutException, IOException, SQLException, InterruptedException {
  events.clear();
  DATABASE.createAndInitialize();
  conn=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName());
  conn.connect();
  config=conn.config();
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\ReadBinLogIT.java",81
159,"'-tryline","@After public void afterEach() throws IOException, SQLException {
  events.clear();
  try {
    if (client != null) {
      client.disconnect();
    }
  }
  finally {
    client=null;
    try {
      if (conn != null) {
        conn.close();
      }
    }
  finally {
      conn=null;
    }
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\ReadBinLogIT.java",94
160,"'-tryline","protected void startClient() throws IOException, TimeoutException, SQLException {
  startClient(null);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\ReadBinLogIT.java",115
161,"'-tryline","protected void startClient(Consumer<BinaryLogClient> preConnect) throws IOException, TimeoutException, SQLException {
  counters=new EventQueue(DEFAULT_TIMEOUT,this::logConsumedEvent,this::logIgnoredEvent);
  client=new BinaryLogClient(config.getHostname(),config.getPort(),replicator,replpass);
  client.setServerId(client.getServerId() - 1);
  client.setKeepAlive(false);
  client.setSSLMode(SSLMode.DISABLED);
  client.registerEventListener(counters);
  client.registerEventListener(this::recordEvent);
  client.registerLifecycleListener(new TraceLifecycleListener());
  EventDeserializer eventDeserializer=new EventDeserializer();
  eventDeserializer.setEventDataDeserializer(EventType.STOP,new StopEventDataDeserializer());
  client.setEventDeserializer(eventDeserializer);
  if (preConnect != null) {
    preConnect.accept(client);
  }
  client.connect(DEFAULT_TIMEOUT);
  conn.execute(DROP TABLE IF EXISTS person,CREATE TABLE person ( +   name VARCHAR(255) primary key, +   age INTEGER NULL DEFAULT 10,+   createdAt DATETIME NULL DEFAULT CURRENT_TIMESTAMP,+   updatedAt DATETIME NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP+ ));
  counters.consume(2,EventType.QUERY);
  counters.reset();
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\ReadBinLogIT.java",119
162,"'-tryline","protected void nonInitialChunk(ReplicationMessageProcessor processor,TypeRegistry typeRegistry,final byte[] content) throws IOException, SQLException, InterruptedException {
  byte firstChar=getFirstNonWhiteChar(content);
  if (firstChar == LEFT_BRACE) {
    currentChunk=content;
  }
 else   if (firstChar == COMMA) {
    if (currentChunk != null) {
      doProcessMessage(processor,typeRegistry,currentChunk,false);
    }
    replaceFirstNonWhiteChar(content,SPACE);
    currentChunk=content;
  }
 else   if (firstChar == RIGHT_BRACKET) {
    doProcessMessage(processor,typeRegistry,currentChunk,true);
    messageInProgress=false;
    processor.process(new TransactionMessage(Operation.COMMIT,txId,commitTime));
  }
 else {
    throw new ConnectException(Chunk arrived in unexpected state);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\wal2json\StreamingWal2JsonMessageDecoder.java",172
163,"'-tryline","private void doProcessMessage(ReplicationMessageProcessor processor,TypeRegistry typeRegistry,byte[] content,boolean lastMessage) throws IOException, SQLException, InterruptedException {
  if (content != null) {
    final Document change=DocumentReader.floatNumbersAsTextReader().read(content);
    LOGGER.trace(Change arrived for decoding {},change);
    processor.process(new Wal2JsonReplicationMessage(txId,commitTime,change,containsMetadata,lastMessage,typeRegistry));
  }
 else {
    LOGGER.trace(Empty change arrived);
    processor.process(new NoopMessage(txId,commitTime));
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\wal2json\StreamingWal2JsonMessageDecoder.java",253
164,"'-tryline","/** 
 * Obtain a configuration instance by loading the Properties from the supplied URL.
 * @param url the URL to the stream containing the configuration properties; may not be null
 * @return the configuration; never null
 * @throws IOException if there is an error reading the stream
 */
public static Configuration load(URL url) throws IOException {
  try (InputStream stream=url.openStream()){
    return load(stream);
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\config\Configuration.java",856
165,"'-tryline","/** 
 * Obtain a configuration instance by loading the Properties from the supplied file.
 * @param file the file containing the configuration properties; may not be null
 * @return the configuration; never null
 * @throws IOException if there is an error reading the stream
 */
public static Configuration load(File file) throws IOException {
  try (InputStream stream=new FileInputStream(file)){
    return load(stream);
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\config\Configuration.java",869
166,"'-tryline","/** 
 * Obtain a configuration instance by loading the Properties from the supplied stream.
 * @param stream the stream containing the properties; may not be null
 * @return the configuration; never null
 * @throws IOException if there is an error reading the stream
 */
public static Configuration load(InputStream stream) throws IOException {
  try {
    Properties properties=new Properties();
    properties.load(stream);
    return from(properties);
  }
  finally {
    stream.close();
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\config\Configuration.java",882
167,"'-tryline","/** 
 * Obtain a configuration instance by loading the Properties from the supplied reader.
 * @param reader the reader containing the properties; may not be null
 * @return the configuration; never null
 * @throws IOException if there is an error reading the stream
 */
public static Configuration load(Reader reader) throws IOException {
  try {
    Properties properties=new Properties();
    properties.load(reader);
    return from(properties);
  }
  finally {
    reader.close();
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\config\Configuration.java",900
168,"'-tryline","/** 
 * Obtain a configuration instance by loading the Properties from a file on the file system or classpath given by the supplied path.
 * @param path the path to the file containing the configuration properties; may not be null
 * @param clazz the class whose classpath is to be used to find the file; may be null
 * @return the configuration; never null but possibly empty
 * @throws IOException if there is an error reading the stream
 */
public static Configuration load(String path,Class<?> clazz) throws IOException {
  return load(path,clazz.getClassLoader());
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\config\Configuration.java",918
169,"'-tryline","/** 
 * Obtain a configuration instance by loading the Properties from a file on the file system or classpath given by the supplied path.
 * @param path the path to the file containing the configuration properties; may not be null
 * @param classLoader the class loader to use; may be null
 * @return the configuration; never null but possibly empty
 * @throws IOException if there is an error reading the stream
 */
public static Configuration load(String path,ClassLoader classLoader) throws IOException {
  Logger logger=LoggerFactory.getLogger(Configuration.class);
  return load(path,classLoader,logger::debug);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\config\Configuration.java",931
170,"'-tryline","/** 
 * Obtain a configuration instance by loading the Properties from a file on the file system or classpath given by the supplied path.
 * @param path the path to the file containing the configuration properties; may not be null
 * @param classLoader the class loader to use; may be null
 * @param logger the function that will be called with status updates; may be null
 * @return the configuration; never null but possibly empty
 * @throws IOException if there is an error reading the stream
 */
public static Configuration load(String path,ClassLoader classLoader,Consumer<String> logger) throws IOException {
  try (InputStream stream=IoUtil.getResourceAsStream(path,classLoader,null,null,logger)){
    Properties props=new Properties();
    if (stream != null) {
      props.load(stream);
    }
    return from(props);
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\config\Configuration.java",945
171,"'-tryline","/** 
 * Read an array from the supplied stream.
 * @param jsonStream the input stream to be read; may not be null
 * @return the array instance; never null
 * @throws IOException if an array could not be read from the supplied stream
 */
Array readArray(InputStream jsonStream) throws IOException ;
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\ArrayReader.java",36
172,"'-tryline","/** 
 * Read an array from the supplied  {@link Reader}.
 * @param jsonReader the reader to be read; may not be null
 * @return the array instance; never null
 * @throws IOException if an array could not be read from the supplied reader
 */
Array readArray(Reader jsonReader) throws IOException ;
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\ArrayReader.java",45
173,"'-tryline","/** 
 * Read an array from the supplied JSON-formatted string.
 * @param json the JSON string representation to be read; may not be null
 * @return the array instance; never null
 * @throws IOException if an array could not be read from the supplied string
 */
Array readArray(String json) throws IOException ;
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\ArrayReader.java",54
174,"'-tryline","/** 
 * Read an array from the content at the given URL.
 * @param jsonUrl the URL to the content that is to be read; may not be null
 * @return the array instance; never null
 * @throws IOException if an array could not be read from the supplied content
 */
default Array readArray(URL jsonUrl) throws IOException {
  return readArray(jsonUrl.openStream());
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\ArrayReader.java",63
175,"'-tryline","/** 
 * Read an array from the supplied file.
 * @param jsonFile the file to be read; may not be null
 * @return the array instance; never null
 * @throws IOException if an array could not be read from the supplied file
 */
default Array readArray(File jsonFile) throws IOException {
  return readArray(new BufferedInputStream(new FileInputStream(jsonFile)));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\ArrayReader.java",74
176,"'-tryline","/** 
 * Read an array from the supplied bytes.
 * @param rawBytes the UTF-8 bytes to be read; may not be null
 * @return the array instance; never null
 * @throws IOException if an array could not be read from the supplied bytes
 */
default Array readArray(byte[] rawBytes) throws IOException {
  try (ByteArrayInputStream stream=new ByteArrayInputStream(rawBytes)){
    return ArrayReader.defaultReader().readArray(stream);
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\ArrayReader.java",85
177,"'-tryline","/** 
 * Write the supplied array to bytes using UTF-8.
 * @param array the array to be written; may not be null
 * @param jsonStream the stream to which the array is to be written; may not be null
 * @throws IOException if an array could not be written to the supplied stream
 */
void write(Array array,OutputStream jsonStream) throws IOException ;
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\ArrayWriter.java",56
178,"'-tryline","/** 
 * Write the supplied array to bytes using UTF-8.
 * @param array the array to be written; may not be null
 * @param jsonWriter the IO writer to which the array is to be written; may not be null
 * @throws IOException if an array could not be written to the supplied stream
 */
void write(Array array,Writer jsonWriter) throws IOException ;
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\ArrayWriter.java",64
179,"'-tryline","/** 
 * Write the supplied array to a string using UTF-8.
 * @param array the array to be written; may not be null
 * @return the string containing the output JSON-formatted array; never null
 * @throws IOException if an array could not be written to the supplied stream
 */
String write(Array array) throws IOException ;
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\ArrayWriter.java",72
180,"'-tryline","/** 
 * Read a document from the supplied stream.
 * @param jsonStream the input stream to be read; may not be null
 * @return the document instance; never null
 * @throws IOException if a document could not be read from the supplied stream
 */
Document read(InputStream jsonStream) throws IOException ;
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\DocumentReader.java",45
181,"'-tryline","/** 
 * Read a document from the supplied  {@link Reader}.
 * @param jsonReader the reader to be read; may not be null
 * @return the document instance; never null
 * @throws IOException if a document could not be read from the supplied reader
 */
Document read(Reader jsonReader) throws IOException ;
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\DocumentReader.java",54
182,"'-tryline","/** 
 * Read a document from the supplied JSON-formatted string.
 * @param json the JSON string representation to be read; may not be null
 * @return the document instance; never null
 * @throws IOException if a document could not be read from the supplied string
 */
Document read(String json) throws IOException ;
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\DocumentReader.java",63
183,"'-tryline","/** 
 * Read a document from the content at the given URL.
 * @param jsonUrl the URL to the content that is to be read; may not be null
 * @return the document instance; never null
 * @throws IOException if a document could not be read from the supplied content
 */
default Document read(URL jsonUrl) throws IOException {
  return read(jsonUrl.openStream());
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\DocumentReader.java",72
184,"'-tryline","/** 
 * Read a document from the supplied file.
 * @param jsonFile the file to be read; may not be null
 * @return the document instance; never null
 * @throws IOException if a document could not be read from the supplied file
 */
default Document read(File jsonFile) throws IOException {
  return read(new BufferedInputStream(new FileInputStream(jsonFile)));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\DocumentReader.java",83
185,"'-tryline","/** 
 * Read a document from the supplied bytes.
 * @param rawBytes the UTF-8 bytes to be read; may not be null
 * @return the document instance; never null
 * @throws IOException if a document could not be read from the supplied bytes
 */
default Document read(byte[] rawBytes) throws IOException {
  try (ByteArrayInputStream stream=new ByteArrayInputStream(rawBytes)){
    return DocumentReader.defaultReader().read(stream);
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\DocumentReader.java",94
186,"'-tryline","/** 
 * Write the supplied document to bytes using UTF-8.
 * @param document the array to be written; may not be null
 * @param jsonStream the stream to which the document is to be written; may not be null
 * @throws IOException if a document could not be written to the supplied stream
 */
void write(Document document,OutputStream jsonStream) throws IOException ;
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\DocumentWriter.java",58
187,"'-tryline","/** 
 * Write the supplied document to bytes using UTF-8.
 * @param document the array to be written; may not be null
 * @param jsonWriter the writer to which the document is to be written; may not be null
 * @throws IOException if a document could not be written to the supplied stream
 */
void write(Document document,Writer jsonWriter) throws IOException ;
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\DocumentWriter.java",66
188,"'-tryline","/** 
 * Write the supplied document to a string using UTF-8.
 * @param document the document to be written; may not be null
 * @return the string containing the output JSON-formatted document; never null
 * @throws IOException if a document could not be written to the supplied stream
 */
String write(Document document) throws IOException ;
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\DocumentWriter.java",74
189,"'-tryline","@Override public Document read(InputStream jsonStream) throws IOException {
  return parse(factory.createParser(jsonStream));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\JacksonReader.java",45
190,"'-tryline","@Override public Document read(Reader jsonReader) throws IOException {
  return parse(factory.createParser(jsonReader));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\JacksonReader.java",50
191,"'-tryline","@Override public Document read(String json) throws IOException {
  return parse(factory.createParser(json));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\JacksonReader.java",55
192,"'-tryline","@Override public Document read(File jsonFile) throws IOException {
  return parse(factory.createParser(jsonFile));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\JacksonReader.java",60
193,"'-tryline","@Override public Document read(URL jsonUrl) throws IOException {
  return parse(factory.createParser(jsonUrl));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\JacksonReader.java",65
194,"'-tryline","@Override public Document read(byte[] rawBytes) throws IOException {
  return parse(factory.createParser(rawBytes));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\JacksonReader.java",70
195,"'-tryline","@Override public Array readArray(InputStream jsonStream) throws IOException {
  return parseArray(factory.createParser(jsonStream),false);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\JacksonReader.java",75
196,"'-tryline","@Override public Array readArray(Reader jsonReader) throws IOException {
  return parseArray(factory.createParser(jsonReader),false);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\JacksonReader.java",80
197,"'-tryline","@Override public Array readArray(URL jsonUrl) throws IOException {
  return parseArray(factory.createParser(jsonUrl),false);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\JacksonReader.java",85
198,"'-tryline","@Override public Array readArray(File jsonFile) throws IOException {
  return parseArray(factory.createParser(jsonFile),false);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\JacksonReader.java",90
199,"'-tryline","@Override public Array readArray(String jsonArray) throws IOException {
  return parseArray(factory.createParser(jsonArray),false);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\JacksonReader.java",95
200,"'-tryline","private Document parse(JsonParser parser) throws IOException {
  try {
    return parseDocument(parser,false);
  }
  finally {
    parser.close();
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\JacksonReader.java",100
201,"'-tryline","private Document parseDocument(JsonParser parser,boolean nested) throws IOException {
  BasicDocument doc=new BasicDocument();
  JsonToken token=null;
  if (!nested) {
    token=parser.nextToken();
    if (!nested && token != JsonToken.START_OBJECT) {
      throw new IOException(Expected data to start with an Object, but was  + token);
    }
  }
  String fieldName=null;
  token=parser.nextToken();
  while (token != JsonToken.END_OBJECT) {
switch (token) {
case FIELD_NAME:
      fieldName=parser.getCurrentName();
    break;
case START_OBJECT:
  doc.setDocument(fieldName,parseDocument(parser,true));
break;
case START_ARRAY:
doc.setArray(fieldName,parseArray(parser,true));
break;
case VALUE_STRING:
doc.setString(fieldName,parser.getValueAsString());
break;
case VALUE_TRUE:
doc.setBoolean(fieldName,true);
break;
case VALUE_FALSE:
doc.setBoolean(fieldName,false);
break;
case VALUE_NULL:
doc.setNull(fieldName);
break;
case VALUE_NUMBER_FLOAT:
case VALUE_NUMBER_INT:
switch (parser.getNumberType()) {
case FLOAT:
if (handleFloatNumbersAsText) {
doc.setString(fieldName,parser.getText());
}
 else {
doc.setNumber(fieldName,parser.getFloatValue());
}
break;
case DOUBLE:
if (handleFloatNumbersAsText) {
doc.setString(fieldName,parser.getText());
}
 else {
doc.setNumber(fieldName,parser.getDoubleValue());
}
break;
case BIG_DECIMAL:
if (handleFloatNumbersAsText) {
doc.setString(fieldName,parser.getText());
}
 else {
doc.setNumber(fieldName,parser.getDecimalValue());
}
break;
case INT:
doc.setNumber(fieldName,parser.getIntValue());
break;
case LONG:
doc.setNumber(fieldName,parser.getLongValue());
break;
case BIG_INTEGER:
doc.setNumber(fieldName,parser.getBigIntegerValue());
break;
}
break;
case VALUE_EMBEDDED_OBJECT:
break;
case NOT_AVAILABLE:
throw new JsonParseException(parser,Non-blocking parsers are not supported,parser.getCurrentLocation());
case END_ARRAY:
throw new JsonParseException(parser,Not expecting an END_ARRAY token,parser.getCurrentLocation());
case END_OBJECT:
throw new JsonParseException(parser,Not expecting an END_OBJECT token,parser.getCurrentLocation());
}
token=parser.nextToken();
}
return doc;
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\JacksonReader.java",109
202,"'-tryline","private Array parseArray(JsonParser parser,boolean nested) throws IOException {
  BasicArray array=new BasicArray();
  JsonToken token=null;
  if (!nested) {
    token=parser.nextToken();
    if (!nested && token != JsonToken.START_ARRAY) {
      throw new IOException(Expected data to start with an Array, but was  + token);
    }
  }
  token=parser.nextToken();
  while (token != JsonToken.END_ARRAY) {
switch (token) {
case START_OBJECT:
      array.add(parseDocument(parser,true));
    break;
case START_ARRAY:
  array.add(parseArray(parser,true));
break;
case VALUE_STRING:
array.add(parser.getValueAsString());
break;
case VALUE_TRUE:
array.add(true);
break;
case VALUE_FALSE:
array.add(false);
break;
case VALUE_NULL:
array.addNull();
break;
case VALUE_NUMBER_FLOAT:
case VALUE_NUMBER_INT:
switch (parser.getNumberType()) {
case FLOAT:
if (handleFloatNumbersAsText) {
array.add(parser.getText());
}
 else {
array.add(parser.getFloatValue());
}
break;
case DOUBLE:
if (handleFloatNumbersAsText) {
array.add(parser.getText());
}
 else {
array.add(parser.getDoubleValue());
}
break;
case BIG_DECIMAL:
if (handleFloatNumbersAsText) {
array.add(parser.getText());
}
 else {
array.add(parser.getDecimalValue());
}
break;
case INT:
array.add(parser.getIntValue());
break;
case LONG:
array.add(parser.getLongValue());
break;
case BIG_INTEGER:
array.add(parser.getBigIntegerValue());
break;
}
break;
case VALUE_EMBEDDED_OBJECT:
break;
case NOT_AVAILABLE:
throw new JsonParseException(parser,Non-blocking parsers are not supported,parser.getCurrentLocation());
case FIELD_NAME:
throw new JsonParseException(parser,Not expecting a FIELD_NAME token,parser.getCurrentLocation());
case END_ARRAY:
throw new JsonParseException(parser,Not expecting an END_ARRAY token,parser.getCurrentLocation());
case END_OBJECT:
throw new JsonParseException(parser,Not expecting an END_OBJECT token,parser.getCurrentLocation());
}
token=parser.nextToken();
}
return array;
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\JacksonReader.java",198
203,"'-tryline","@Override public void write(Document document,OutputStream jsonStream) throws IOException {
  try (JsonGenerator jsonGenerator=factory.createGenerator(jsonStream)){
    configure(jsonGenerator);
    writeDocument(document,jsonGenerator);
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\JacksonWriter.java",44
204,"'-tryline","@Override public void write(Document document,Writer jsonWriter) throws IOException {
  try (JsonGenerator jsonGenerator=factory.createGenerator(jsonWriter)){
    configure(jsonGenerator);
    writeDocument(document,jsonGenerator);
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\JacksonWriter.java",52
205,"'-tryline","@Override public String write(Document document) throws IOException {
  StringWriter writer=new StringWriter();
  try (JsonGenerator jsonGenerator=factory.createGenerator(writer)){
    configure(jsonGenerator);
    writeDocument(document,jsonGenerator);
  }
   return writer.getBuffer().toString();
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\JacksonWriter.java",60
206,"'-tryline","@Override public void write(Array array,OutputStream jsonStream) throws IOException {
  try (JsonGenerator jsonGenerator=factory.createGenerator(jsonStream)){
    configure(jsonGenerator);
    writeArray(array,jsonGenerator);
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\JacksonWriter.java",84
207,"'-tryline","@Override public void write(Array array,Writer jsonWriter) throws IOException {
  try (JsonGenerator jsonGenerator=factory.createGenerator(jsonWriter)){
    configure(jsonGenerator);
    writeArray(array,jsonGenerator);
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\JacksonWriter.java",92
208,"'-tryline","@Override public String write(Array array) throws IOException {
  StringWriter writer=new StringWriter();
  try (JsonGenerator jsonGenerator=factory.createGenerator(writer)){
    configure(jsonGenerator);
    writeArray(array,jsonGenerator);
  }
   return writer.getBuffer().toString();
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\JacksonWriter.java",100
209,"'-tryline","protected void writeDocument(Document document,JsonGenerator generator) throws IOException {
  generator.writeStartObject();
  try {
    document.stream().forEach((field) -> {
      try {
        generator.writeFieldName(field.getName().toString());
        writeValue(field.getValue(),generator);
      }
 catch (      IOException e) {
        throw new WritingError(e);
      }
    }
);
    generator.writeEndObject();
  }
 catch (  WritingError e) {
    throw e.wrapped();
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\JacksonWriter.java",116
210,"'-tryline","protected void writeArray(Array array,JsonGenerator generator) throws IOException {
  generator.writeStartArray();
  try {
    array.streamValues().forEach((value) -> {
      try {
        writeValue(value,generator);
      }
 catch (      IOException e) {
        throw new WritingError(e);
      }
    }
);
    generator.writeEndArray();
  }
 catch (  WritingError e) {
    throw e.wrapped();
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\JacksonWriter.java",135
211,"'-tryline","protected void writeValue(Value value,JsonGenerator generator) throws IOException {
switch (value.getType()) {
case NULL:
    generator.writeNull();
  break;
case STRING:
generator.writeString(value.asString());
break;
case BOOLEAN:
generator.writeBoolean(value.asBoolean());
break;
case BINARY:
generator.writeBinary(value.asBytes());
break;
case INTEGER:
generator.writeNumber(value.asInteger());
break;
case LONG:
generator.writeNumber(value.asLong());
break;
case FLOAT:
generator.writeNumber(value.asFloat());
break;
case DOUBLE:
generator.writeNumber(value.asDouble());
break;
case BIG_INTEGER:
generator.writeNumber(value.asBigInteger());
break;
case DECIMAL:
generator.writeNumber(value.asBigDecimal());
break;
case DOCUMENT:
writeDocument(value.asDocument(),generator);
break;
case ARRAY:
writeArray(value.asArray(),generator);
break;
}
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\document\JacksonWriter.java",153
212,"'-tryline","private String toHash(Serializable value) throws IOException {
  hashAlgorithm.reset();
  hashAlgorithm.update(salt);
  try (ByteArrayOutputStream bos=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(bos)){
    out.writeObject(value);
    return convertToHexadecimalFormat(hashAlgorithm.digest(bos.toByteArray()));
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\mapping\MaskStrings.java",142
213,"'-tryline","private T readValue(JsonNode node) throws IOException {
  JsonNode payload=node.get(PAYLOAD_FIELD);
  if (payload != null) {
    node=payload;
  }
  if (config.asEnvelope()) {
    return reader.readValue(node);
  }
 else   if (node.has(Envelope.FieldName.SOURCE) && node.has(config.sourceField())) {
    return reader.readValue(node.get(config.sourceField()));
  }
 else {
    return reader.readValue(node);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\serde\json\JsonSerde.java",99
214,"'-tryline","private T readKey(JsonNode node) throws IOException {
  if (!node.isObject()) {
    return reader.readValue(node);
  }
  final JsonNode keys=node.has(PAYLOAD_FIELD) ? node.get(PAYLOAD_FIELD) : node;
  final Iterator<String> keyFields=keys.fieldNames();
  if (keyFields.hasNext()) {
    final String id=keyFields.next();
    if (!keyFields.hasNext()) {
      return reader.readValue(keys.get(id));
    }
    return reader.readValue(keys);
  }
  return reader.readValue(keys);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\serde\json\JsonSerde.java",119
215,"'-tryline","/** 
 * Save the state of the <tt>ConcurrentHashMap</tt> instance to a stream (i.e., serialize it).
 * @param s the stream
 * @serialData the key (Object) and value (Object)for each key-value mapping, followed by a null pair. The key-value mappings are emitted in no particular order.
 */
private void writeObject(java.io.ObjectOutputStream s) throws IOException {
  s.defaultWriteObject();
  for (int k=0; k < segments.length; ++k) {
    Segment<K,V> seg=segments[k];
    seg.lock();
    try {
      HashEntry<K,V>[] tab=seg.table;
      for (int i=0; i < tab.length; ++i) {
        for (HashEntry<K,V> e=tab[i]; e != null; e=e.next) {
          s.writeObject(e.key);
          s.writeObject(e.value);
        }
      }
    }
  finally {
      seg.unlock();
    }
  }
  s.writeObject(null);
  s.writeObject(null);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\BoundedConcurrentHashMap.java",2407
216,"'-tryline","/** 
 * Reconstitute the <tt>ConcurrentHashMap</tt> instance from a stream (i.e., deserialize it).
 * @param s the stream
 */
@SuppressWarnings(unchecked) private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
  s.defaultReadObject();
  for (int i=0; i < segments.length; ++i) {
    segments[i].setTable(new HashEntry[1]);
  }
  for (; ; ) {
    K key=(K)s.readObject();
    V value=(V)s.readObject();
    if (key == null) {
      break;
    }
    put(key,value);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\BoundedConcurrentHashMap.java",2440
217,"'-tryline","/** 
 * Read and return the entire contents of the supplied  {@link InputStream stream}. This method always closes the stream when finished reading.
 * @param stream the stream to the contents; may be null
 * @return the contents, or an empty byte array if the supplied reader is null
 * @throws IOException if there is an error reading the content
 */
public static byte[] readBytes(InputStream stream) throws IOException {
  if (stream == null) {
    return new byte[]{};
  }
  byte[] buffer=new byte[1024];
  try (ByteArrayOutputStream output=new ByteArrayOutputStream()){
    int numRead=0;
    while ((numRead=stream.read(buffer)) > -1) {
      output.write(buffer,0,numRead);
    }
    output.flush();
    return output.toByteArray();
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\IoUtil.java",52
218,"'-tryline","/** 
 * Read and return the entire contents of the supplied  {@link File file}.
 * @param file the file containing the contents; may be null
 * @return the contents, or an empty byte array if the supplied file is null
 * @throws IOException if there is an error reading the content
 */
public static byte[] readBytes(File file) throws IOException {
  if (file == null) {
    return new byte[]{};
  }
  try (InputStream stream=new BufferedInputStream(new FileInputStream(file))){
    return readBytes(stream);
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\IoUtil.java",75
219,"'-tryline","/** 
 * Read the lines from the content of the resource file at the given path on the classpath.
 * @param resourcePath the logical path to the classpath, file, or URL resource
 * @param classLoader the classloader that should be used to load the resource as a stream; may be null
 * @param clazz the class that should be used to load the resource as a stream; may be null
 * @param lineProcessor the function that this method calls for each line read from the supplied stream; may not be null
 * @throws IOException if an I/O error occurs
 */
public static void readLines(String resourcePath,ClassLoader classLoader,Class<?> clazz,Consumer<String> lineProcessor) throws IOException {
  try (InputStream stream=IoUtil.getResourceAsStream(resourcePath,classLoader,clazz,null,null)){
    IoUtil.readLines(stream,lineProcessor);
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\IoUtil.java",91
220,"'-tryline","/** 
 * Read the lines from the supplied stream. This function completely reads the stream and therefore closes the stream.
 * @param stream the stream with the contents to be read; may not be null
 * @param lineProcessor the function that this method calls for each line read from the supplied stream; may not be null
 * @throws IOException if an I/O error occurs
 */
public static void readLines(InputStream stream,Consumer<String> lineProcessor) throws IOException {
  try (BufferedReader reader=new BufferedReader(new InputStreamReader(stream))){
    String line=null;
    while ((line=reader.readLine()) != null) {
      lineProcessor.accept(line);
    }
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\IoUtil.java",107
221,"'-tryline","/** 
 * Read the lines from the supplied stream. This function completely reads the stream and therefore closes the stream.
 * @param stream the stream with the contents to be read; may not be null
 * @param lineProcessor the function that this method calls for each line read from the supplied stream; may not be null
 * @param charset the character set used to interpret the stream content
 * @throws IOException if an I/O error occurs
 */
public static void readLines(InputStream stream,Consumer<String> lineProcessor,Charset charset) throws IOException {
  try (BufferedReader reader=new BufferedReader(new InputStreamReader(stream,charset))){
    String line=null;
    while ((line=reader.readLine()) != null) {
      lineProcessor.accept(line);
    }
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\IoUtil.java",123
222,"'-tryline","/** 
 * Read the lines from the supplied stream. This function completely reads the stream and therefore closes the stream.
 * @param path path to the file with the contents to be read; may not be null
 * @param lineProcessor the function that this method calls for each line read from the supplied stream; may not be null
 * @throws IOException if an I/O error occurs
 */
public static void readLines(Path path,Consumer<String> lineProcessor) throws IOException {
  Files.lines(path).forEach(lineProcessor);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\IoUtil.java",140
223,"'-tryline","/** 
 * Read and return the entire contents of the supplied  {@link Reader}. This method always closes the reader when finished reading.
 * @param reader the reader of the contents; may be null
 * @return the contents, or an empty string if the supplied reader is null
 * @throws IOException if there is an error reading the content
 */
public static String read(Reader reader) throws IOException {
  if (reader == null) {
    return ;
  }
  StringBuilder sb=new StringBuilder();
  try (Reader r=reader){
    int numRead=0;
    char[] buffer=new char[1024];
    while ((numRead=reader.read(buffer)) > -1) {
      sb.append(buffer,0,numRead);
    }
  }
   return sb.toString();
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\IoUtil.java",151
224,"'-tryline","/** 
 * Read and return the entire contents of the supplied  {@link InputStream}. This method always closes the stream when finished reading.
 * @param stream the streamed contents; may be null
 * @return the contents, or an empty string if the supplied stream is null
 * @throws IOException if there is an error reading the content
 */
public static String read(InputStream stream) throws IOException {
  return stream == null ?  : read(new InputStreamReader(stream));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\IoUtil.java",174
225,"'-tryline","/** 
 * Read and return the entire contents of the supplied  {@link InputStream}. This method always closes the stream when finished reading.
 * @param stream the streamed contents; may be null
 * @param charset character set of the stream data; may not be null
 * @return the contents, or an empty string if the supplied stream is null
 * @throws IOException if there is an error reading the content
 */
public static String read(InputStream stream,String charset) throws IOException {
  return stream == null ?  : read(new InputStreamReader(stream,charset));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\IoUtil.java",186
226,"'-tryline","/** 
 * Read and return the entire contents of the supplied  {@link File}.
 * @param file the file containing the information to be read; may be null
 * @return the contents, or an empty string if the supplied reader is null
 * @throws IOException if there is an error reading the content
 */
public static String read(File file) throws IOException {
  if (file == null) {
    return ;
  }
  StringBuilder sb=new StringBuilder();
  try (Reader reader=new FileReader(file)){
    int numRead=0;
    char[] buffer=new char[1024];
    while ((numRead=reader.read(buffer)) > -1) {
      sb.append(buffer,0,numRead);
    }
  }
   return sb.toString();
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\IoUtil.java",201
227,"'-tryline","/** 
 * Create a directory at the given absolute or relative path, removing any existing content beforehand.
 * @param path the relative or absolute path of the directory to recreate; may not be null
 * @param removeExistingContent true if any existing content should be removed
 * @return the reference to the existing readable and writable directory
 * @throws IOException if there is a problem deleting the files at this path
 */
public static File createDirectory(Path path,boolean removeExistingContent) throws IOException {
  File dir=path.toAbsolutePath().toFile();
  if (dir.exists() && dir.canRead() && dir.canWrite()) {
    if (dir.isDirectory()) {
      if (removeExistingContent) {
        delete(path);
      }
      return dir;
    }
    throw new IllegalStateException(Expecting ' + path + ' to be a directory but found a file);
  }
  dir.mkdirs();
  return dir;
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\IoUtil.java",360
228,"'-tryline","/** 
 * A method that will delete a file or folder only if it is within the 'target' directory (for safety). Folders are removed recursively.
 * @param path the path to the file or folder in the target directory
 * @throws IOException if there is a problem deleting the file at the given path
 */
public static void delete(String path) throws IOException {
  if (path != null) {
    delete(Paths.get(path));
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\IoUtil.java",383
229,"'-tryline","/** 
 * A method that will delete a file or folder. Folders are removed recursively.
 * @param fileOrFolder the file or folder to be deleted
 * @throws IOException if there is a problem deleting the file at the given path
 */
public static void delete(File fileOrFolder) throws IOException {
  if (fileOrFolder != null) {
    delete(fileOrFolder.toPath());
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\IoUtil.java",396
230,"'-tryline","/** 
 * A method that will delete multiple file and/or folders. Folders are removed recursively.
 * @param filesOrFolder the files and folders to be deleted
 * @throws IOException if there is a problem deleting the file at the given path
 */
public static void delete(File... filesOrFolder) throws IOException {
  for (  File fileOrFolder : filesOrFolder) {
    delete(fileOrFolder);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\IoUtil.java",408
231,"'-tryline","/** 
 * A method that will recursively delete a file or folder.
 * @param path the path to the file or folder in the target directory
 * @throws IOException if there is a problem deleting the file at the given path
 */
public static void delete(Path path) throws IOException {
  if (path != null) {
    if (path.toAbsolutePath().toFile().exists()) {
      LOGGER.debug(Deleting '{}'...,path);
      Set<FileVisitOption> options=EnumSet.noneOf(FileVisitOption.class);
      int maxDepth=10;
      FileVisitor<Path> removingVisitor=new SimpleFileVisitor<Path>(){
        @Override public FileVisitResult visitFile(        Path file,        BasicFileAttributes attrs) throws IOException {
          java.nio.file.Files.delete(file);
          return FileVisitResult.SKIP_SUBTREE;
        }
        @Override public FileVisitResult postVisitDirectory(        Path dir,        IOException exc) throws IOException {
          java.nio.file.Files.delete(dir);
          return FileVisitResult.CONTINUE;
        }
        @Override public FileVisitResult visitFileFailed(        Path file,        IOException exc) throws IOException {
          LOGGER.error(Unable to remove '{}',file.getFileName(),exc);
          return FileVisitResult.CONTINUE;
        }
      }
;
      java.nio.file.Files.walkFileTree(path,options,maxDepth,removingVisitor);
    }
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\IoUtil.java",420
232,"'-tryline","@Override public FileVisitResult visitFile(Path file,BasicFileAttributes attrs) throws IOException {
  java.nio.file.Files.delete(file);
  return FileVisitResult.SKIP_SUBTREE;
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\IoUtil.java",433
233,"'-tryline","@Override public FileVisitResult postVisitDirectory(Path dir,IOException exc) throws IOException {
  java.nio.file.Files.delete(dir);
  return FileVisitResult.CONTINUE;
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\IoUtil.java",439
234,"'-tryline","@Override public FileVisitResult visitFileFailed(Path file,IOException exc) throws IOException {
  LOGGER.error(Unable to remove '{}',file.getFileName(),exc);
  return FileVisitResult.CONTINUE;
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\IoUtil.java",445
235,"'-tryline","@Test public void shouldConvertFromBytesToArray1() throws IOException {
  readAsStringAndBytes(json/array1.json);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\document\ArraySerdesTest.java",24
236,"'-tryline","@Test public void shouldConvertFromBytesToArray2() throws IOException {
  readAsStringAndBytes(json/array2.json);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\document\ArraySerdesTest.java",29
237,"'-tryline","protected void readAsStringAndBytes(String resourceFile) throws IOException {
  String content=Testing.Files.readResourceAsString(resourceFile);
  Array doc=ArrayReader.defaultReader().readArray(content);
  byte[] bytes=SERDES.serialize(topicA,doc);
  Array reconstituted=SERDES.deserialize(topicA,bytes);
  assertThat((Object)reconstituted).isEqualTo(doc);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\document\ArraySerdesTest.java",34
238,"'-tryline","@Test public void shouldConvertFromBytesToDocument1() throws IOException {
  readAsStringAndBytes(json/sample1.json);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\document\DocumentSerdesTest.java",27
239,"'-tryline","@Test public void shouldUseSerdeMethodToConvertFromBytesToDocument2() throws IOException {
  readAsStringAndBytes(json/sample2.json);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\document\DocumentSerdesTest.java",32
240,"'-tryline","@Test public void shouldUseSerdeMethodToConvertFromBytesToDocument3() throws IOException {
  readAsStringAndBytes(json/sample3.json);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\document\DocumentSerdesTest.java",37
241,"'-tryline","@Test public void shouldUseSerdeMethodToConvertFromBytesToDocumentForResponse1() throws IOException {
  readAsStringAndBytes(json/response1.json);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\document\DocumentSerdesTest.java",42
242,"'-tryline","@Test public void shouldUseSerdeMethodToConvertFromBytesToDocumentForResponse2() throws IOException {
  readAsStringAndBytes(json/response2.json);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\document\DocumentSerdesTest.java",47
243,"'-tryline","protected void readAsStringAndBytes(String resourceFile) throws IOException {
  String content=Testing.Files.readResourceAsString(resourceFile);
  Document doc=DocumentReader.defaultReader().read(content);
  roundTrip(doc,size -> Testing.print(message size  + size +  bytes: \n+ doc));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\document\DocumentSerdesTest.java",52
244,"'-tryline","protected List<Document> readResources(String prefix,String... resources) throws IOException {
  List<Document> documents=new ArrayList<>();
  for (  String resource : resources) {
    String content=Testing.Files.readResourceAsString(prefix + resource);
    Array array=null;
    try {
      Document doc=DocumentReader.defaultReader().read(content);
      array=doc.getArray(entityChanges);
    }
 catch (    IOException e) {
      array=ArrayReader.defaultReader().readArray(content);
    }
    array.forEach(entry -> documents.add(entry.getValue().asDocument()));
  }
  return documents;
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\document\DocumentSerdesTest.java",67
245,"'-tryline","/** 
 * Start the embedded Zookeeper server and the Kafka servers  {@link #addBrokers(int) in the cluster}. This method does nothing if the cluster is already running.
 * @return this instance to allow chaining methods; never null
 * @throws IOException if there is an error during startup
 */
public synchronized KafkaCluster startup() throws IOException {
  if (!running) {
    if (dataDir == null) {
      try {
        File temp=File.createTempFile(kafka,suffix);
        dataDir=new File(temp.getParentFile(),cluster);
        dataDir.mkdirs();
        temp.delete();
      }
 catch (      IOException e) {
        throw new RuntimeException(Unable to create temporary directory,e);
      }
    }
 else     if (deleteDataPriorToStartup) {
      IoUtil.delete(dataDir);
      dataDir.mkdirs();
    }
    File zkDir=new File(dataDir,zk);
    zkServer.setStateDirectory(zkDir);
    this.dataDir=dataDir;
    File kafkaDir=new File(dataDir,kafka);
    kafkaServers.values().forEach(server -> server.setStateDirectory(new File(kafkaDir,broker + server.brokerId())));
    zkServer.startup();
    LOGGER.debug(Starting {} brokers,kafkaServers.size());
    kafkaServers.values().forEach(KafkaServer::startup);
    running=true;
  }
  return this;
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\kafka\KafkaCluster.java",218
246,"'-tryline","/** 
 * Start the embedded Zookeeper server.
 * @return this instance to allow chaining methods; never null
 * @throws IOException if there is an error during startup
 * @throws IllegalStateException if the server is already running
 */
public synchronized ZookeeperServer startup() throws IOException {
  if (factory != null) {
    throw new IllegalStateException( + this +  is already running);
  }
  if (this.port == -1) {
    this.port=IoUtil.getAvailablePort();
  }
  this.factory=ServerCnxnFactory.createFactory(new InetSocketAddress(localhost,port),1024);
  if (this.dataDir == null) {
    try {
      File temp=File.createTempFile(kafka,suffix);
      this.dataDir=temp.getParentFile();
      temp.delete();
    }
 catch (    IOException e) {
      throw new RuntimeException(Unable to create temporary directory,e);
    }
  }
  this.snapshotDir=new File(this.dataDir,snapshot);
  this.logDir=new File(this.dataDir,log);
  this.snapshotDir.mkdirs();
  this.logDir.mkdirs();
  try {
    server=new ZooKeeperServer(snapshotDir,logDir,tickTime);
    factory.startup(server);
    return this;
  }
 catch (  InterruptedException e) {
    factory=null;
    Thread.currentThread().interrupt();
    throw new IOException(e);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\kafka\ZookeeperServer.java",52
247,"'-tryline","/** 
 * Create a directory within the test data directory at the given relative path.
 * @param relativePath the path of the directory within the test data directory; may not be null
 * @param removeExistingContent true if any existing content should be removed
 * @return the reference to the existing readable and writable directory
 * @throws IOException if there is a problem deleting the files at this path
 */
public static File createTestingDirectory(String relativePath,boolean removeExistingContent) throws IOException {
  Path dirPath=createTestingPath(relativePath);
  return IoUtil.createDirectory(dirPath,removeExistingContent);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\util\Testing.java",258
248,"'-tryline","@Override public void close() throws IOException {
  engine.close();
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\main\java\io\debezium\embedded\ConvertingEngineBuilder.java",184
249,"'-tryline","@Override public void close() throws IOException {
  stop();
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\main\java\io\debezium\embedded\EmbeddedEngine.java",1068
250,"'-tryline","@Override public void close() throws IOException {
  for (  Transformation<SourceRecord> t : transforms) {
    try {
      t.close();
    }
 catch (    Exception e) {
      LOGGER.warn(Error while closing transformation,e);
    }
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\main\java\io\debezium\embedded\Transformations.java",82
251,"'-tryline","protected void writeConfigurationFileWithDefaultName(Path dir,Properties props) throws IOException {
  Path configFilePath=dir.resolve(DEFAULT_CONNECTOR_PROPERTIES_FILENAME);
  writeConfigurationFile(configFilePath,props);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\connector\simple\SimpleSourceConnectorOutputTest.java",137
252,"'-tryline","protected void writeEnvironmentFileWithDefaultName(Path dir,Properties props) throws IOException {
  Path configFilePath=dir.resolve(DEFAULT_ENV_PROPERTIES_FILENAME);
  writeConfigurationFile(configFilePath,props);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\connector\simple\SimpleSourceConnectorOutputTest.java",142
253,"'-tryline","protected void writeConfigurationFile(Path configFilePath,Properties props) throws IOException {
  File configFile=Testing.Files.createTestingFile(configFilePath);
  try (OutputStream ostream=new FileOutputStream(configFile)){
    props.store(ostream,MockConnector configuration);
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\connector\simple\SimpleSourceConnectorOutputTest.java",147
254,"'-tryline","protected Properties readConfiguration(Path configFilePath) throws IOException {
  File configFile=Testing.Files.createTestingFile(configFilePath);
  Properties props=new Properties();
  try (InputStream ostream=new FileInputStream(configFile)){
    props.load(ostream);
  }
   return props;
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\connector\simple\SimpleSourceConnectorOutputTest.java",154
255,"'-tryline","protected void appendStop(Path results) throws IOException {
  appendCommand(results,Document.create(CONTROL_KEY,CONTROL_STOP));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\connector\simple\SimpleSourceConnectorOutputTest.java",163
256,"'-tryline","protected Array readResults(File file) throws IOException {
  return ArrayReader.defaultReader().readArray(file);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\connector\simple\SimpleSourceConnectorOutputTest.java",167
257,"'-tryline","protected void appendCommand(Path results,Document command) throws IOException {
  assertThat(command).isNotNull();
  assertThat(Files.exists(results)).isTrue();
  Array arrayOfDocuments=readResults(results.toFile());
  arrayOfDocuments.add(command);
  try (OutputStream stream=new FileOutputStream(results.toFile())){
    ArrayWriter.prettyWriter().write(arrayOfDocuments,stream);
  }
   if (Testing.Debug.isEnabled()) {
    String content=IoUtil.read(results.toFile());
    Testing.debug(expected results file ' + results + ' after appending command:);
    Testing.debug(content);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\connector\simple\SimpleSourceConnectorOutputTest.java",171
258,"'-tryline","protected void assertExpectedRecords(Path path,int batchCount,int recordsPerBatch) throws IOException {
  assertThat(Files.exists(path)).isTrue();
  if (Testing.Debug.isEnabled()) {
    String content=IoUtil.read(path.toFile());
    Testing.debug(expected results file ' + path + ':);
    Testing.debug(content);
  }
  Array expected=readResults(path.toFile());
  int expectedId=0;
  int expectedBatch=1;
  int expectedRecord=0;
  Iterator<Array.Entry> docs=expected.iterator();
  while (docs.hasNext()) {
    Document doc=docs.next().getValue().asDocument();
    if (doc.has(CONTROL_KEY)) {
      continue;
    }
    ++expectedId;
    ++expectedRecord;
    if (expectedRecord > recordsPerBatch) {
      ++expectedBatch;
      expectedRecord=1;
    }
    Document sourcePartition=doc.getDocument(sourcePartition);
    assertThat(sourcePartition.getString(source)).isEqualTo(simple);
    Document offset=doc.getDocument(sourceOffset);
    assertThat(offset.getInteger(id)).isEqualTo(expectedId);
    assertThat(doc.getString(topic)).isEqualTo(TOPIC_NAME);
    assertThat(doc.getInteger(kafkaPartition)).isEqualTo(1);
    Document key=doc.getDocument(key);
    assertThat(key.getInteger(id)).isEqualTo(expectedId);
    Document value=doc.getDocument(value);
    assertThat(value.getInteger(batch)).isEqualTo(expectedBatch);
    assertThat(value.getInteger(record)).isEqualTo(expectedRecord);
    Document keySchema=doc.getDocument(keySchema);
    assertThat(keySchema.getString(name)).isEqualTo(simple.key);
    assertThat(keySchema.getString(type)).isEqualToIgnoringCase(Schema.Type.STRUCT.name());
    assertThat(keySchema.getBoolean(optional)).isEqualTo(false);
    Array keySchemaFields=keySchema.getArray(fields);
    Document keyIdField=keySchemaFields.get(0).asDocument();
    assertRequiredFieldSchema(keyIdField,id,Schema.Type.INT32);
    Document valueSchema=doc.getDocument(valueSchema);
    assertThat(valueSchema.getString(name)).isEqualTo(simple.value);
    assertThat(valueSchema.getString(type)).isEqualToIgnoringCase(Schema.Type.STRUCT.name());
    assertThat(valueSchema.getBoolean(optional)).isEqualTo(false);
    Array valueSchemaFields=valueSchema.getArray(fields);
    Document batchField=valueSchemaFields.get(0).asDocument();
    assertRequiredFieldSchema(batchField,batch,Schema.Type.INT32);
    Document recordField=valueSchemaFields.get(1).asDocument();
    assertRequiredFieldSchema(recordField,record,Schema.Type.INT32);
  }
  assertThat(expectedBatch).isEqualTo(batchCount);
  assertThat(expectedId).isEqualTo(batchCount * recordsPerBatch);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\connector\simple\SimpleSourceConnectorOutputTest.java",186
259,"'-tryline","/** 
 * Read the records that are expected by the test.
 * @return the expected records, or null if there are none
 * @throws IOException if there is a problem reading the expected records
 */
Iterator<Document> read() throws IOException ;
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\ConnectorOutputTest.java",194
260,"'-tryline","/** 
 * If records are being recorded, then complete writing them and close all resources associated with the test data. By default this method does nothing.
 * @throws IOException if there is a problem writing the expected records
 */
@Override default void close() throws IOException {
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\ConnectorOutputTest.java",212
261,"'-tryline","@Override public void close() throws IOException {
  Iterable<?> docs=recorded;
  Array arrayOfDocs=Array.create(docs);
  try (OutputStream str=stream.get()){
    ArrayWriter.prettyWriter().write(arrayOfDocs,str);
  }
   TestData.super.close();
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\ConnectorOutputTest.java",533
262,"'-tryline","InputStream get() throws IOException ;
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\ConnectorOutputTest.java",583
263,"'-tryline","OutputStream get() throws IOException ;
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\ConnectorOutputTest.java",588
264,"'-tryline","private SourceRecord rehydrateSourceRecord(Document record,SchemaAndValueConverter keyConverter,SchemaAndValueConverter valueConverter) throws IOException {
  Document sourcePartitionDoc=record.getDocument(sourcePartition);
  Document sourceOffsetDoc=record.getDocument(sourceOffset);
  String topic=record.getString(topic);
  Integer kafkaPartition=record.getInteger(kafkaPartition);
  Document keySchema=record.getDocument(keySchema);
  Document valueSchema=record.getDocument(valueSchema);
  Document key=record.getDocument(key);
  Document value=record.getDocument(value);
  Document keyAndSchemaDoc=Document.create(schema,keySchema,payload,key);
  Document valueAndSchemaDoc=Document.create(schema,valueSchema,payload,value);
  SchemaAndValue keyWithSchema=keyConverter.deserialize(topic,keyAndSchemaDoc);
  SchemaAndValue valueWithSchema=valueConverter.deserialize(topic,valueAndSchemaDoc);
  Map<String,?> sourcePartition=toMap(sourcePartitionDoc);
  Map<String,?> sourceOffset=toMap(sourceOffsetDoc);
  return new SourceRecord(sourcePartition,sourceOffset,topic,kafkaPartition,keyWithSchema.schema(),keyWithSchema.value(),valueWithSchema.schema(),valueWithSchema.value());
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\ConnectorOutputTest.java",1097
265,"'-tryline","/** 
 * Serialize the source record to document form.
 * @param record the record; may not be null
 * @param keyConverter the converter for the record key's schema and payload
 * @param valueConverter the converter for the record value's schema and payload
 * @return the document form of the source record; never null
 * @throws IOException if there is an error converting the key or value
 */
private Document serializeSourceRecord(SourceRecord record,SchemaAndValueConverter keyConverter,SchemaAndValueConverter valueConverter) throws IOException {
  Document keyAndSchema=keyConverter.serialize(record.topic(),record.keySchema(),record.key());
  Document valueAndSchema=valueConverter.serialize(record.topic(),record.valueSchema(),record.value());
  Document sourcePartition=Document.create().putAll(record.sourcePartition());
  Document sourceOffset=Document.create().putAll(record.sourceOffset());
  Document parent=Document.create();
  parent.set(sourcePartition,sourcePartition);
  parent.set(sourceOffset,sourceOffset);
  parent.set(topic,record.topic());
  parent.set(kafkaPartition,record.kafkaPartition());
  parent.set(keySchema,keyAndSchema.getDocument(schema));
  parent.set(key,keyAndSchema.getDocument(payload));
  parent.set(valueSchema,valueAndSchema.getDocument(schema));
  parent.set(value,valueAndSchema.getDocument(payload));
  return parent;
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\ConnectorOutputTest.java",1119
266,"'-tryline","public SchemaAndValue deserialize(String topic,Document doc) throws IOException {
  String jsonString=doc.toString();
  JsonNode jsonNode=mapper.readTree(jsonString);
  byte[] rawValue=jsonSerializer.serialize(topic,jsonNode);
  return jsonConverter.toConnectData(topic,rawValue);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\ConnectorOutputTest.java",1178
267,"'-tryline","public Document serialize(String topic,Schema schema,Object value) throws IOException {
  byte[] rawBytes=jsonConverter.fromConnectData(topic,schema,value);
  JsonNode jsonNode=jsonDeserializer.deserialize(topic,rawBytes);
  String jsonStr=mapper.writeValueAsString(jsonNode);
  return jsonReader.read(jsonStr);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\ConnectorOutputTest.java",1185
268,"'-tryline","/** 
 * Read the contents of the supplied  {@link InputStream}, replace all variables found in the content, and write the result to a temporary file.
 * @param stream the input stream containing zero or more {@link Strings#replaceVariables(String,java.util.function.Function) variable expressions}
 * @param variables the variables
 * @return the temporary file that exists in the data directory
 * @throws IOException if there is a problem reading the input stream or writing to the temporary file
 */
protected static File replaceVariables(InputStream stream,AvailableVariables variables) throws IOException {
  File tmpFile=Testing.Files.createTestingFile();
  try (OutputStream ostream=new FileOutputStream(tmpFile)){
    IoUtil.readLines(stream,(line) -> {
      String newLine=Strings.replaceVariables(line,variables::variableForName);
      try {
        ostream.write(newLine.getBytes(StandardCharsets.UTF_8));
      }
 catch (      IOException e) {
        throw new RuntimeException(Error writing to file ' + tmpFile + ',e);
      }
    }
,StandardCharsets.UTF_8);
  }
   return tmpFile;
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\ConnectorOutputTest.java",1226
269,"'-tryline","protected void appendLinesToSource(int numberOfLines) throws IOException {
  CharSequence[] lines=new CharSequence[numberOfLines];
  for (int i=0; i != numberOfLines; ++i) {
    lines[i]=generateLine(linesAdded + i + 1);
  }
  java.nio.file.Files.write(inputFile.toPath(),Collect.arrayListOf(lines),UTF8,StandardOpenOption.APPEND);
  linesAdded+=numberOfLines;
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\EmbeddedEngineTest.java",564
270,"'-tryline","@AfterAll static void stop() throws IOException {
  if (subscriber != null) {
    subscriber.stopAsync();
    subscriber.awaitTerminated();
    try (SubscriptionAdminClient subscriptionAdminClient=SubscriptionAdminClient.create()){
      subscriptionAdminClient.deleteSubscription(subscriptionName);
    }
   }
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-server\debezium-server-pubsub\src\test\java\io\debezium\server\pubsub\PubSubIT.java",63
271,"'-tryline","void setupDependencies(@Observes ConnectorStartedEvent event) throws IOException {
  Testing.Print.enable();
  try (SubscriptionAdminClient subscriptionAdminClient=SubscriptionAdminClient.create()){
    final TopicName topic=TopicName.ofProjectTopicName(ServiceOptions.getDefaultProjectId(),STREAM_NAME);
    int ackDeadlineSeconds=0;
    subscriptionAdminClient.createSubscription(subscriptionName,topic,PushConfig.newBuilder().build(),ackDeadlineSeconds);
  }
   subscriber=Subscriber.newBuilder(subscriptionName,new TestMessageReceiver()).build();
  subscriber.startAsync().awaitRunning();
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-server\debezium-server-pubsub\src\test\java\io\debezium\server\pubsub\PubSubIT.java",90
272,"'-tryline","void setupDependencies(@Observes ConnectorStartedEvent event) throws IOException {
  Testing.Print.enable();
  pulsarClient=PulsarClient.builder().serviceUrl(PulsarTestResourceLifecycleManager.getPulsarServiceUrl()).build();
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-server\debezium-server-pulsar\src\test\java\io\debezium\server\pulsar\PulsarIT.java",51
273,"'-tryline","private boolean pingApi(HttpUrl address) throws IOException {
  Request r=new Request.Builder().url(address).build();
  try (Response res=http.newCall(r).execute()){
    return res.isSuccessful();
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\HttpUtils.java",47
274,"'-tryline","/** 
 * Deploys Kafka connector with given name and configuration via REST
 * @param name connector name
 * @param config connector config
 * @throws IOException or request error
 */
public void deployConnector(String name,ConnectorConfigBuilder config) throws IOException, InterruptedException {
  LOGGER.info(Deploying connector  + name);
  if (useConnectorResources) {
    deployConnectorCr(name,config);
  }
 else {
    deployConnectorJson(name,config);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\kafka\KafkaConnectController.java",175
275,"'-tryline","private void deployConnectorJson(String name,ConnectorConfigBuilder config) throws IOException {
  if (apiRoute == null) {
    throw new IllegalStateException(KafkaConnect API was not exposed);
  }
  HttpUrl url=getApiURL().resolve(/connectors/ + name + /config);
  Request r=new Request.Builder().url(url).put(RequestBody.create(config.getJsonString(),MediaType.parse(application/json))).build();
  try (Response res=http.newCall(r).execute()){
    if (!res.isSuccessful()) {
      LOGGER.error(res.request().url().toString());
      throw new RuntimeException(Connector registration request returned status code ' + res.code() + ');
    }
    LOGGER.info(Registered kafka connector ' + name + ');
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\kafka\KafkaConnectController.java",191
276,"'-tryline","/** 
 * Deletes Kafka connector with given name
 * @param name connector name
 * @throws IOException on request error
 */
public void undeployConnector(String name) throws IOException {
  LOGGER.info(Undeploying kafka connector  + name);
  if (useConnectorResources) {
    undeployConnectorCr(name);
  }
 else {
    undeployConnectorJson(name);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\kafka\KafkaConnectController.java",239
277,"'-tryline","private void undeployConnectorJson(String name) throws IOException {
  if (apiRoute == null) {
    throw new IllegalStateException(KafkaConnect API was not exposed);
  }
  HttpUrl url=getApiURL().resolve(/connectors/ + name);
  Request r=new Request.Builder().url(url).delete().build();
  try (Response res=http.newCall(r).execute()){
    if (!res.isSuccessful()) {
      LOGGER.error(res.request().url().toString());
      throw new RuntimeException(Connector deletion request returned status code ' + res.code() + ');
    }
    LOGGER.info(Deleted kafka connector ' + name + ');
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\kafka\KafkaConnectController.java",254
278,"'-tryline","public List<String> getConnectMetrics() throws IOException {
  LOGGER.info(Retrieving connector metrics);
  OkHttpClient httpClient=new OkHttpClient();
  Request r=new Request.Builder().url(getMetricsURL()).get().build();
  try (Response res=httpClient.newCall(r).execute()){
    String metrics=res.body().string();
    return Stream.of(metrics.split(\\r?\\n)).collect(Collectors.toList());
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\kafka\KafkaConnectController.java",279
279,"'-tryline","/** 
 * Waits until Snapshot phase of given connector completes
 * @param connectorName name of the connect
 * @param metricName name of the metric used to determine the state
 * @throws IOException on metric request error
 */
public void waitForSnapshot(String connectorName,String metricName) throws IOException {
  LOGGER.info(Waiting for connector ' + connectorName + ' to finish snapshot);
  await().atMost(scaled(5),TimeUnit.MINUTES).pollInterval(10,TimeUnit.SECONDS).until(() -> getConnectMetrics().stream().anyMatch(s -> s.contains(metricName) && s.contains(connectorName)));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\kafka\KafkaConnectController.java",290
280,"'-tryline","/** 
 * Waits until snapshot phase of given MySQL connector completes
 * @param connectorName connector name
 * @throws IOException on metric request error
 */
public void waitForMySqlSnapshot(String connectorName) throws IOException {
  waitForSnapshot(connectorName,debezium_mysql_connector_metrics_snapshotcompleted);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\kafka\KafkaConnectController.java",304
281,"'-tryline","/** 
 * Waits until snapshot phase of given PostgreSQL connector completes
 * @param connectorName connector name
 * @throws IOException on metric request error
 */
public void waitForPostgreSqlSnapshot(String connectorName) throws IOException {
  waitForSnapshot(connectorName,debezium_postgres_connector_metrics_snapshotcompleted);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\kafka\KafkaConnectController.java",313
282,"'-tryline","/** 
 * Waits until snapshot phase of given SQL Server connector completes
 * @param connectorName connector name
 * @throws IOException on metric request error
 */
public void waitForSqlServerSnapshot(String connectorName) throws IOException {
  waitForSnapshot(connectorName,debezium_sql_server_connector_metrics_snapshotcompleted);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\kafka\KafkaConnectController.java",322
283,"'-tryline","/** 
 * Waits until snapshot phase of given MongoDB connector completes
 * @param connectorName connector name
 * @throws IOException on metric request error
 */
public void waitForMongoSnapshot(String connectorName) throws IOException {
  waitForSnapshot(connectorName,debezium_mongodb_connector_metrics_snapshotcompleted);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\kafka\KafkaConnectController.java",331
284,"'-tryline","/** 
 * Waits until snapshot phase of given DB2 connector completes
 * @param connectorName connector name
 * @throws IOException on metric request error
 */
public void waitForDB2Snapshot(String connectorName) throws IOException {
  waitForSnapshot(connectorName,debezium_db2_server_connector_metrics_snapshotcompleted);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\kafka\KafkaConnectController.java",340
285,"'-tryline","@BeforeAll public static void setupDatabase() throws IOException, InterruptedException, ClassNotFoundException {
  Class.forName(com.ibm.db2.jcc.DB2Driver);
  if (!ConfigProperties.DATABASE_DB2_HOST.isPresent()) {
    dbDeployer=new DB2Deployer(ocp).withProject(ConfigProperties.OCP_PROJECT_DB2).withDeployment(DB_DEPLOYMENT_PATH).withServices(DB_SERVICE_PATH_LB,DB_SERVICE_PATH);
    dbController=dbDeployer.deploy();
    dbController.initialize();
  }
  String id=testUtils.getUniqueId();
  connectorName=CONNECTOR_NAME + - + id;
  connectorConfig=connectorFactories.db2().put(database.server.name,connectorName);
  if (ConfigProperties.DEPLOY_SERVICE_REGISTRY) {
    connectorConfig.addApicurioAvroSupport(registryController.getRegistryApiAddress());
  }
  kafkaConnectController.deployConnector(connectorName,connectorConfig);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\db2\DB2ConnectorIT.java",58
286,"'-tryline","@AfterAll public static void tearDownDatabase() throws IOException, InterruptedException {
  kafkaConnectController.undeployConnector(connectorName);
  dbController.reload();
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\db2\DB2ConnectorIT.java",80
287,"'-tryline","@Test @Order(3) public void shouldContainRecordsInCustomersTopic() throws IOException {
  kafkaConnectController.waitForDB2Snapshot(connectorName);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .DB2INST1.CUSTOMERS,4));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\db2\DB2ConnectorIT.java",116
288,"'-tryline","@Test @Order(5) public void shouldBeDown() throws SQLException, IOException {
  kafkaConnectController.undeployConnector(connectorName);
  insertCustomer(Jerry,Tester,jerry@test.com);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .DB2INST1.CUSTOMERS,5));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\db2\DB2ConnectorIT.java",131
289,"'-tryline","@Test @Order(6) public void shouldResumeStreamingAfterRedeployment() throws IOException, InterruptedException {
  kafkaConnectController.deployConnector(connectorName,connectorConfig);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .DB2INST1.CUSTOMERS,6));
  awaitAssert(() -> assertions.assertRecordsContain(connectorName + .DB2INST1.CUSTOMERS,jerry@test.com));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\db2\DB2ConnectorIT.java",139
290,"'-tryline","@BeforeAll public static void setupDatabase() throws IOException, InterruptedException {
  if (!ConfigProperties.DATABASE_MONGO_HOST.isPresent()) {
    dbDeployer=new MongoDeployer(ocp).withProject(ConfigProperties.OCP_PROJECT_MONGO).withDeployment(DB_DEPLOYMENT_PATH).withServices(DB_SERVICE_PATH_LB,DB_SERVICE_PATH);
    dbController=dbDeployer.deploy();
    dbController.initialize();
  }
  String id=testUtils.getUniqueId();
  connectorName=CONNECTOR_NAME + - + id;
  connectorConfig=connectorFactories.mongo().put(mongodb.name,connectorName);
  if (ConfigProperties.DEPLOY_SERVICE_REGISTRY) {
    connectorConfig.addApicurioAvroSupport(registryController.getRegistryApiAddress());
  }
  kafkaConnectController.deployConnector(connectorName,connectorConfig);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\mongodb\MongoConnectorIT.java",57
291,"'-tryline","@AfterAll public static void tearDownDatabase() throws IOException, InterruptedException {
  kafkaConnectController.undeployConnector(connectorName);
  dbController.reload();
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\mongodb\MongoConnectorIT.java",78
292,"'-tryline","@Test @Order(3) public void shouldContainRecordsInCustomersTopic() throws IOException {
  kafkaConnectController.waitForMongoSnapshot(connectorName);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .inventory.customers,4));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\mongodb\MongoConnectorIT.java",118
293,"'-tryline","@Test @Order(5) public void shouldBeDown() throws IOException {
  kafkaConnectController.undeployConnector(connectorName);
  insertCustomer(Jerry,Tester,jerry@test.com);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .inventory.customers,5));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\mongodb\MongoConnectorIT.java",133
294,"'-tryline","@Test @Order(6) public void shouldResumeStreamingAfterRedeployment() throws IOException, InterruptedException {
  kafkaConnectController.deployConnector(connectorName,connectorConfig);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .inventory.customers,6));
  awaitAssert(() -> assertions.assertRecordsContain(connectorName + .inventory.customers,jerry@test.com));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\mongodb\MongoConnectorIT.java",141
295,"'-tryline","@BeforeAll public static void setupDatabase() throws IOException, InterruptedException, ClassNotFoundException {
  if (!ConfigProperties.DATABASE_MYSQL_HOST.isPresent()) {
    dbDeployer=new MySqlDeployer(ocp).withProject(ConfigProperties.OCP_PROJECT_MYSQL).withDeployment(DB_DEPLOYMENT_PATH).withServices(DB_SERVICE_PATH_LB,DB_SERVICE_PATH);
    dbController=dbDeployer.deploy();
  }
  connectorName=CONNECTOR_NAME + - + testUtils.getUniqueId();
  connectorConfig=connectorFactories.mysql().put(database.server.name,connectorName);
  if (ConfigProperties.DEPLOY_SERVICE_REGISTRY) {
    connectorConfig.addApicurioAvroSupport(registryController.getRegistryApiAddress());
  }
  kafkaConnectController.deployConnector(connectorName,connectorConfig);
  Class.forName(com.mysql.cj.jdbc.Driver);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\mysql\MySqlConnectorIT.java",55
296,"'-tryline","@AfterAll public static void tearDownDatabase() throws IOException, InterruptedException {
  dbController.reload();
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\mysql\MySqlConnectorIT.java",75
297,"'-tryline","@Test @Order(3) public void shouldSnapshotChanges() throws IOException {
  kafkaConnectController.waitForMySqlSnapshot(connectorName);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .inventory.customers,4));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\mysql\MySqlConnectorIT.java",113
298,"'-tryline","@Test @Order(5) public void shouldBeDown() throws SQLException, IOException {
  kafkaConnectController.undeployConnector(connectorName);
  insertCustomer(Jerry,Tester,jerry@test.com);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .inventory.customers,5));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\mysql\MySqlConnectorIT.java",128
299,"'-tryline","@Test @Order(6) public void shouldResumeStreamingAfterRedeployment() throws IOException, InterruptedException {
  kafkaConnectController.deployConnector(connectorName,connectorConfig);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .inventory.customers,6));
  awaitAssert(() -> assertions.assertRecordsContain(connectorName + .inventory.customers,jerry@test.com));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\mysql\MySqlConnectorIT.java",136
300,"'-tryline","@BeforeAll public static void setupDatabase() throws IOException, InterruptedException, ClassNotFoundException {
  if (!ConfigProperties.DATABASE_MYSQL_HOST.isPresent()) {
    dbDeployer=new PostgreSqlDeployer(ocp).withProject(ConfigProperties.OCP_PROJECT_POSTGRESQL).withDeployment(DB_DEPLOYMENT_PATH).withServices(DB_SERVICE_PATH_LB,DB_SERVICE_PATH);
    dbController=dbDeployer.deploy();
  }
  String id=testUtils.getUniqueId();
  connectorName=CONNECTOR_NAME + - + id;
  connectorConfig=connectorFactories.postgresql().put(database.server.name,connectorName);
  if (ConfigProperties.DEPLOY_SERVICE_REGISTRY) {
    connectorConfig.addApicurioAvroSupport(registryController.getRegistryApiAddress());
  }
  kafkaConnectController.deployConnector(connectorName,connectorConfig);
  Class.forName(org.postgresql.Driver);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\postgresql\PostgreSqlConnectorIT.java",56
301,"'-tryline","@AfterAll public static void tearDownDatabase() throws IOException, InterruptedException {
  kafkaConnectController.undeployConnector(connectorName);
  dbController.reload();
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\postgresql\PostgreSqlConnectorIT.java",77
302,"'-tryline","@Test @Order(3) public void shouldContainRecordsInCustomersTopic() throws IOException {
  kafkaConnectController.waitForPostgreSqlSnapshot(connectorName);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .inventory.customers,4));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\postgresql\PostgreSqlConnectorIT.java",113
303,"'-tryline","@Test @Order(5) public void shouldBeDown() throws SQLException, IOException {
  kafkaConnectController.undeployConnector(connectorName);
  insertCustomer(Jerry,Tester,jerry@test.com);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .inventory.customers,5));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\postgresql\PostgreSqlConnectorIT.java",128
304,"'-tryline","@Test @Order(6) public void shouldResumeStreamingAfterRedeployment() throws IOException, InterruptedException {
  kafkaConnectController.deployConnector(connectorName,connectorConfig);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .inventory.customers,6));
  awaitAssert(() -> assertions.assertRecordsContain(connectorName + .inventory.customers,jerry@test.com));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\postgresql\PostgreSqlConnectorIT.java",136
305,"'-tryline","@BeforeAll public static void setupDatabase() throws IOException, InterruptedException, ClassNotFoundException {
  if (!ConfigProperties.DATABASE_SQLSERVER_HOST.isPresent()) {
    dbDeployer=new SqlServerDeployer(ocp).withProject(ConfigProperties.OCP_PROJECT_SQLSERVER).withDeployment(DB_DEPLOYMENT_PATH).withServices(DB_SERVICE_PATH_LB,DB_SERVICE_PATH);
    dbController=dbDeployer.deploy();
    dbController.initialize();
  }
  String id=testUtils.getUniqueId();
  connectorName=CONNECTOR_NAME + - + id;
  connectorConfig=connectorFactories.sqlserver().put(database.server.name,connectorName);
  kafkaConnectController.deployConnector(connectorName,connectorConfig);
  Class.forName(com.microsoft.sqlserver.jdbc.SQLServerDriver);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\sqlserver\SqlServerConnectorIT.java",56
306,"'-tryline","@AfterAll public static void tearDownDatabase() throws IOException, InterruptedException {
  kafkaConnectController.undeployConnector(connectorName);
  dbController.reload();
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\sqlserver\SqlServerConnectorIT.java",75
307,"'-tryline","@Test @Order(3) public void shouldContainRecordsInCustomersTopic() throws IOException {
  kafkaConnectController.waitForSqlServerSnapshot(connectorName);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .dbo.customers,4));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\sqlserver\SqlServerConnectorIT.java",110
308,"'-tryline","@Test @Order(5) public void shouldBeDown() throws SQLException, IOException {
  kafkaConnectController.undeployConnector(connectorName);
  insertCustomer(Jerry,Tester,jerry@test.com);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .dbo.customers,5));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\sqlserver\SqlServerConnectorIT.java",126
309,"'-tryline","@Test @Order(6) public void shouldResumeStreamingAfterRedeployment() throws IOException, InterruptedException {
  kafkaConnectController.deployConnector(connectorName,connectorConfig);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .dbo.customers,6));
  awaitAssert(() -> assertions.assertRecordsContain(connectorName + .dbo.customers,jerry@test.com));
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\sqlserver\SqlServerConnectorIT.java",134
310,"'-tryline","@Test public void shouldSerializeConnectorConfiguration() throws IOException {
  final ConnectorConfiguration configuration=ConnectorConfiguration.create();
  configuration.with(connector.class,foo);
  configuration.with(database.hostname,bar);
  final Connector connector=Connector.from(myconnector,configuration);
  final String json=connector.toJson();
  final ObjectNode connectionNode=mapper.readValue(json,ObjectNode.class);
  assertThat(connectionNode.get(name).asText()).isEqualTo(myconnector);
  final JsonNode configNode=connectionNode.get(config);
  assertThat(configNode.get(connector.class).asText()).isEqualTo(foo);
  assertThat(configNode.get(database.hostname).asText()).isEqualTo(bar);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-testcontainers\src\test\java\io\debezium\testing\testcontainers\ConnectorConfigurationTest.java",29
311,"'-tryline","@Test public void shouldLoadConnectorConfigurationFromFile() throws IOException {
  final InputStream configFile=ConnectorConfigurationTest.class.getClassLoader().getResourceAsStream(config.json);
  final Connector connector=Connector.fromJson(configFile);
  final String json=connector.toJson();
  final ObjectNode connectionNode=mapper.readValue(json,ObjectNode.class);
  assertThat(connectionNode.get(name).asText()).isEqualTo(inventory-connector);
  final JsonNode configNode=connectionNode.get(config);
  assertThat(configNode.get(connector.class).asText()).isEqualTo(io.debezium.connector.mysql.MySqlConnector);
  assertThat(configNode.get(database.hostname).asText()).isEqualTo(192.168.99.100);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-testcontainers\src\test\java\io\debezium\testing\testcontainers\ConnectorConfigurationTest.java",46
312,"'-tryline","@Test public void shouldOverrideConfigurationFromJdbcContainer() throws IOException {
  final ContainerConfig containerConfig=mock(ContainerConfig.class);
  when(containerConfig.getHostName()).thenReturn(localhost);
  final InspectContainerResponse inspectContainerResponse=mock(InspectContainerResponse.class);
  when(inspectContainerResponse.getConfig()).thenReturn(containerConfig);
  final JdbcDatabaseContainer<?> jdbcDatabaseContainer=mock(JdbcDatabaseContainer.class);
  when(jdbcDatabaseContainer.getDriverClassName()).thenReturn(org.postgresql.Driver);
  when(jdbcDatabaseContainer.getDatabaseName()).thenReturn(db);
  when(jdbcDatabaseContainer.getPassword()).thenReturn();
  when(jdbcDatabaseContainer.getUsername()).thenReturn();
  when(jdbcDatabaseContainer.getExposedPorts()).thenReturn(Arrays.asList(9090));
  when(jdbcDatabaseContainer.getContainerInfo()).thenReturn(inspectContainerResponse);
  final InputStream configFile=ConnectorConfigurationTest.class.getClassLoader().getResourceAsStream(config.json);
  final Connector connector=Connector.fromJson(configFile);
  connector.appendOrOverrideConfiguration(ConnectorConfiguration.forJdbcContainer(jdbcDatabaseContainer));
  final String json=connector.toJson();
  final ObjectNode connectionNode=mapper.readValue(json,ObjectNode.class);
  assertThat(connectionNode.get(name).asText()).isEqualTo(inventory-connector);
  final JsonNode configNode=connectionNode.get(config);
  assertThat(configNode.get(connector.class).asText()).isEqualTo(io.debezium.connector.postgresql.PostgresConnector);
  assertThat(configNode.get(database.hostname).asText()).isEqualTo(localhost);
  assertThat(configNode.get(database.dbname).asText()).isEqualTo(db);
}
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-testcontainers\src\test\java\io\debezium\testing\testcontainers\ConnectorConfigurationTest.java",61
313,"'-tryline","private String executeHttpRequest(String url) throws IOException {
  final OkHttpClient client=new OkHttpClient();
  final Request request=new Request.Builder().url(url).build();
  try (Response response=client.newCall(request).execute()){
    return response.body().string();
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-testcontainers\src\test\java\io\debezium\testing\testcontainers\DebeziumContainerTest.java",165
314,"'-tryline","@Override public void checkClientTrusted(X509Certificate[] x509Certificates,String s) throws CertificateException {
}
","java.security.cert.CertificateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\BinlogReader.java",1238
315,"'-tryline","@Override public void checkServerTrusted(X509Certificate[] x509Certificates,String s) throws CertificateException {
}
","java.security.cert.CertificateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\BinlogReader.java",1245
316,"'-tryline","@Override public void checkClientTrusted(X509Certificate[] x509Certificates,String s) throws CertificateException {
}
","java.security.cert.CertificateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlStreamingChangeEventSource.java",992
317,"'-tryline","@Override public void checkServerTrusted(X509Certificate[] x509Certificates,String s) throws CertificateException {
}
","java.security.cert.CertificateException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlStreamingChangeEventSource.java",999
318,"'-tryline","@Override public void record(Map<String,?> source,Map<String,?> position,String databaseName,String ddl) throws DatabaseHistoryException {
  delegate.record(source,position,databaseName,ddl);
}
","io.debezium.relational.history.DatabaseHistoryException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",2484
319,"'-tryline","@Override public void record(Map<String,?> source,Map<String,?> position,String databaseName,String schemaName,String ddl,TableChanges changes) throws DatabaseHistoryException {
  delegate.record(source,position,databaseName,schemaName,ddl,changes);
}
","io.debezium.relational.history.DatabaseHistoryException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",2490
320,"'-tryline","@Override public final void record(Map<String,?> source,Map<String,?> position,String databaseName,String ddl) throws DatabaseHistoryException {
  record(source,position,databaseName,null,ddl,null);
}
","io.debezium.relational.history.DatabaseHistoryException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\history\AbstractDatabaseHistory.java",64
321,"'-tryline","@Override public final void record(Map<String,?> source,Map<String,?> position,String databaseName,String schemaName,String ddl,TableChanges changes) throws DatabaseHistoryException {
  final HistoryRecord record=new HistoryRecord(source,position,databaseName,schemaName,ddl,changes);
  storeRecord(record);
  listener.onChangeApplied(record);
}
","io.debezium.relational.history.DatabaseHistoryException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\history\AbstractDatabaseHistory.java",71
322,"'-tryline","protected abstract void storeRecord(HistoryRecord record) throws DatabaseHistoryException ;
","io.debezium.relational.history.DatabaseHistoryException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\history\AbstractDatabaseHistory.java",137
323,"'-tryline","/** 
 * Record a change to the schema of the named database, and store it in the schema storage.
 * @param source the information about the source database; may not be null
 * @param position the point in history where these DDL changes were made, which may be used when{@link #recover(Map,Map,Tables,DdlParser) recovering} the schema to some point in history; may not benull
 * @param databaseName the name of the database whose schema is being changed; may be null
 * @param ddl the DDL statements that describe the changes to the database schema; may not be null
 * @throws DatabaseHistoryException if the record could not be written
 */
void record(Map<String,?> source,Map<String,?> position,String databaseName,String ddl) throws DatabaseHistoryException ;
","io.debezium.relational.history.DatabaseHistoryException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\history\DatabaseHistory.java",98
324,"'-tryline","void record(Map<String,?> source,Map<String,?> position,String databaseName,String schemaName,String ddl,TableChanges changes) throws DatabaseHistoryException ;
","io.debezium.relational.history.DatabaseHistoryException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\history\DatabaseHistory.java",111
325,"'-tryline","@Override protected void storeRecord(HistoryRecord record) throws DatabaseHistoryException {
  if (record == null) {
    return;
  }
  lock.write(() -> {
    if (!running.get()) {
      throw new IllegalStateException(The history has been stopped and will not accept more records);
    }
    try {
      String line=writer.write(record.document());
      try (BufferedWriter historyWriter=Files.newBufferedWriter(path,StandardOpenOption.APPEND)){
        try {
          historyWriter.append(line);
          historyWriter.newLine();
        }
 catch (        IOException e) {
          logger.error(Failed to add record to history at {}: {},path,record,e);
          return;
        }
      }
 catch (      IOException e) {
        throw new DatabaseHistoryException(Unable to create writer for history file  + path + : + e.getMessage(),e);
      }
    }
 catch (    IOException e) {
      logger.error(Failed to convert record to string: {},record,e);
    }
  }
);
}
","io.debezium.relational.history.DatabaseHistoryException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\history\FileDatabaseHistory.java",98
326,"'-tryline","@Override protected void storeRecord(HistoryRecord record) throws DatabaseHistoryException {
  if (this.producer == null) {
    throw new IllegalStateException(No producer is available. Ensure that 'start()' is called before storing database history records.);
  }
  LOGGER.trace(Storing record into database history: {},record);
  try {
    ProducerRecord<String,String> produced=new ProducerRecord<>(topicName,PARTITION,null,record.toString());
    Future<RecordMetadata> future=this.producer.send(produced);
    this.producer.flush();
    RecordMetadata metadata=future.get();
    if (metadata != null) {
      LOGGER.debug(Stored record in topic '{}' partition {} at offset {} ,metadata.topic(),metadata.partition(),metadata.offset());
    }
  }
 catch (  InterruptedException e) {
    LOGGER.trace(Interrupted before record was written into database history: {},record);
    Thread.currentThread().interrupt();
    throw new DatabaseHistoryException(e);
  }
catch (  ExecutionException e) {
    throw new DatabaseHistoryException(e);
  }
}
","io.debezium.relational.history.DatabaseHistoryException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\history\KafkaDatabaseHistory.java",239
327,"'-tryline","void onError(SQLException exception) throws RuntimeException ;
","java.lang.RuntimeException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\heartbeat\HeartbeatErrorHandler.java",15
328,"'-tryline","private boolean doExecute(Commands<MongoClient,RuntimeException> commands) throws RuntimeException {
  MongoCredential credential=MongoCredential.createCredential(username,authSource,password.toCharArray());
  ConnectionString connString=new ConnectionString(url);
  MongoClientSettings settings=MongoClientSettings.builder().applyConnectionString(connString).credential(credential).retryWrites(true).build();
  MongoClient client=MongoClients.create(settings);
  commands.execute(client);
  return true;
}
","java.lang.RuntimeException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\databases\mongodb\MongoDatabaseClient.java",44
329,"'-tryline","public void execute(Commands<MongoClient,RuntimeException> commands) throws RuntimeException {
  await().atMost(scaled(2),TimeUnit.MINUTES).pollInterval(5,TimeUnit.SECONDS).ignoreExceptions().until(() -> doExecute(commands));
}
","java.lang.RuntimeException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\databases\mongodb\MongoDatabaseClient.java",59
330,"'-tryline","private byte getLastNonWhiteChar(byte[] array) throws IllegalArgumentException {
  for (int i=array.length - 1; i >= 0; i--) {
    if (!isWhitespace(array[i])) {
      return array[i];
    }
  }
  throw new IllegalArgumentException(No non-white char);
}
","java.lang.IllegalArgumentException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\wal2json\StreamingWal2JsonMessageDecoder.java",222
331,"'-tryline","private byte getFirstNonWhiteChar(byte[] array) throws IllegalArgumentException {
  for (int i=0; i < array.length; i++) {
    if (!isWhitespace(array[i])) {
      return array[i];
    }
  }
  throw new IllegalArgumentException(No non-white char);
}
","java.lang.IllegalArgumentException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\wal2json\StreamingWal2JsonMessageDecoder.java",231
332,"'-tryline","/** 
 * Parses a 2D WKB Point into a {x,y} coordinate array. Returns null for any non-point or points with Z/M/etc modifiers.
 * @param wkb OGC WKB geometry
 * @return x,y coordinate array
 */
public static double[] parseWKBPoint(byte[] wkb) throws IllegalArgumentException {
  if (wkb.length != WKB_POINT_SIZE) {
    throw new IllegalArgumentException(String.format(Invalid WKB for Point (length %d < %d),wkb.length,WKB_POINT_SIZE));
  }
  final ByteBuffer reader=ByteBuffer.wrap(wkb);
  reader.order((reader.get() != 0) ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);
  int geomType=reader.getInt();
  if (geomType != WKB_POINT) {
    throw new IllegalArgumentException(String.format(Invalid WKB for 2D Point (wrong type %d),geomType));
  }
  double x=reader.getDouble();
  double y=reader.getDouble();
  return new double[]{x,y};
}
","java.lang.IllegalArgumentException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\data\geometry\Point.java",69
333,"'-tryline","/** 
 * Create a value for this schema using WKB
 * @param pointSchema a {@link Schema} instance which represents a point; may not be null
 * @param wkb the original Well-Known binary representation of the coordinate; may not be null
 * @param srid the coordinate reference system identifier; null if unset/unknown
 * @return a {@link Struct} which represents a Connect value for this schema; never null
 */
public static Struct createValue(Schema geomSchema,byte[] wkb,Integer srid) throws IllegalArgumentException {
  Struct result=Geometry.createValue(geomSchema,wkb,srid);
  double[] pt=parseWKBPoint(wkb);
  result.put(X_FIELD,pt[0]);
  result.put(Y_FIELD,pt[1]);
  return result;
}
","java.lang.IllegalArgumentException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\data\geometry\Point.java",113
334,"'-tryline","@Override protected SnapshotResult doExecute(ChangeEventSourceContext context,SnapshotContext snapshotContext,SnapshottingTask snapshottingTask) throws Exception {
  final MongoDbSnapshottingTask mongoDbSnapshottingTask=(MongoDbSnapshottingTask)snapshottingTask;
  final MongoDbSnapshotContext mongoDbSnapshotContext=(MongoDbSnapshotContext)snapshotContext;
  LOGGER.info(Snapshot step 1 - Preparing);
  if (previousOffset != null && previousOffset.isSnapshotRunning()) {
    LOGGER.info(Previous snapshot was cancelled before completion; a new snapshot will be taken.);
  }
  LOGGER.info(Snapshot step 2 - Determining snapshot offsets);
  determineSnapshotOffsets(mongoDbSnapshotContext,replicaSets);
  List<ReplicaSet> replicaSetsToSnapshot=mongoDbSnapshottingTask.getReplicaSetsToSnapshot();
  final int threads=replicaSetsToSnapshot.size();
  final ExecutorService executor=Threads.newFixedThreadPool(MongoDbConnector.class,taskContext.serverName(),replicator-snapshot,threads);
  final CountDownLatch latch=new CountDownLatch(threads);
  LOGGER.info(Ignoring unnamed replica sets: {},replicaSets.unnamedReplicaSets());
  LOGGER.info(Starting {} thread(s) to snapshot replica sets: {},threads,replicaSetsToSnapshot);
  LOGGER.info(Snapshot step 3 - Snapshotting data);
  replicaSetsToSnapshot.forEach(replicaSet -> {
    executor.submit(() -> {
      try {
        taskContext.configureLoggingContext(replicaSet.replicaSetName());
        try {
          snapshotReplicaSet(context,mongoDbSnapshotContext,replicaSet);
        }
  finally {
          final MongoDbOffsetContext offset=(MongoDbOffsetContext)snapshotContext.offset;
        }
      }
 catch (      Throwable t) {
        LOGGER.error(Snapshot for replica set {} failed,replicaSet.replicaSetName(),t);
        errorHandler.setProducerThrowable(t);
      }
 finally {
        latch.countDown();
      }
    }
);
  }
);
  try {
    latch.await();
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    aborted.set(true);
  }
  try {
    executor.shutdown();
  }
  finally {
    LOGGER.info(Stopping mongodb connections);
    taskContext.getConnectionContext().shutdown();
  }
  if (aborted.get()) {
    return SnapshotResult.aborted();
  }
  return SnapshotResult.completed(snapshotContext.offset);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\main\java\io\debezium\connector\mongodb\MongoDbSnapshotChangeEventSource.java",86
335,"'-tryline","@Override protected SnapshotContext prepare(ChangeEventSourceContext sourceContext) throws Exception {
  return new MongoDbSnapshotContext();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\main\java\io\debezium\connector\mongodb\MongoDbSnapshotChangeEventSource.java",204
336,"'-tryline","@Test public void shouldNotRenameMissingFieldsForReadEvent() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(ID,objId).append(name,Sally).append(phone,123L).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  SourceRecord record=getReadRecord(*.c1.missing:new_missing,obj);
  Struct value=(Struct)record.value();
  assertThat(value.get(AFTER)).isEqualTo(obj.toJson(COMPACT_JSON_SETTINGS));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",39
337,"'-tryline","@Test public void shouldNotRenameNestedMissingFieldsForReadEvent() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(ID,objId).append(name,Sally).append(phone,123L).append(address,new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  SourceRecord record=getReadRecord(*.c1.address.missing:new_missing,obj);
  Struct value=(Struct)record.value();
  assertThat(value.get(AFTER)).isEqualTo(obj.toJson(COMPACT_JSON_SETTINGS));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",55
338,"'-tryline","@Test public void shouldNotRenameMissingFieldsForInsertEvent() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(ID,objId).append(name,Sally).append(phone,123L).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  SourceRecord record=getInsertRecord(*.c1.missing:new_missing,obj);
  Struct value=(Struct)record.value();
  assertThat(value.get(AFTER)).isEqualTo(obj.toJson(COMPACT_JSON_SETTINGS));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",75
339,"'-tryline","@Test public void shouldNotRenameNestedMissingFieldsForInsertEvent() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(ID,objId).append(name,Sally).append(phone,123L).append(address,new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  SourceRecord record=getInsertRecord(*.c1.address.missing:new_missing,obj);
  Struct value=(Struct)record.value();
  assertThat(value.get(AFTER)).isEqualTo(obj.toJson(COMPACT_JSON_SETTINGS));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",91
340,"'-tryline","@Test public void shouldNotRenameNestedMissingFieldsForUpdateEventWithEmbeddedDocument() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(ID,objId).append(name,Sally May).append(phone,456L).append(address,new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)).append(active,false).append(scores,Arrays.asList(1.2,3.4,5.6,7.8));
  Document updateObj=new Document().append($set,new Document().append(name,Sally).append(phone,123L).append(address,new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6)));
  SourceRecord record=getUpdateRecord(*.c1.address.missing:new_missing,obj,updateObj);
  Struct value=(Struct)record.value();
  assertThat(getDocumentFromPatch(value)).isEqualTo(updateObj);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",111
341,"'-tryline","@Test public void shouldNotRenameFieldsForEventOfOtherCollection() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  SourceRecord record=getReadRecord(*.c2.name:new_name,*.c2.active:new_active,obj);
  Struct value=(Struct)record.value();
  assertThat(value.get(AFTER)).isEqualTo(obj.toJson(COMPACT_JSON_SETTINGS));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",142
342,"'-tryline","@Test public void shouldRenameFieldsForReadEvent() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  String expected={ + \_id\: {\$oid\: \ + objId + \},+ \phone\: {\$numberLong\: \123\},+ \scores\: [1.2,3.4,5.6],+ \new_name\: \Sally\,+ \new_active\: true+ };
  SourceRecord record=getReadRecord(*.c1.name:new_name,*.c1.active:new_active,obj);
  Struct value=(Struct)record.value();
  assertThat(value.get(AFTER)).isEqualTo(expected);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",158
343,"'-tryline","@Test public void shouldRenameNestedFieldsForReadEvent() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(address,new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  String expected={ + \_id\: {\$oid\: \ + objId + \},+ \phone\: {\$numberLong\: \123\},+ \address\: {+ \street\: \Claude Debussylaan\,+ \city\: \Amsterdam\,+ \new_number\: {\$numberLong\: \34\}+ },+ \scores\: [1.2,3.4,5.6],+ \new_name\: \Sally\,+ \new_active\: true+ };
  SourceRecord record=getReadRecord(*.c1.name:new_name,*.c1.active:new_active,*.c1.address.number:new_number,obj);
  Struct value=(Struct)record.value();
  assertThat(value.get(AFTER)).isEqualTo(expected);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",184
344,"'-tryline","@Test public void shouldNotRenameNestedFieldsToExistingNamesForReadEvent() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(address,new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  assertShouldNotRenameDuringRead(*.c1.address.street:city,obj,city);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",219
345,"'-tryline","@Test public void shouldRenameFieldsForInsertEvent() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  String expected={ + \_id\: {\$oid\: \ + objId + \},+ \phone\: {\$numberLong\: \123\},+ \scores\: [1.2,3.4,5.6],+ \new_name\: \Sally\,+ \new_active\: true+ };
  SourceRecord record=getInsertRecord(*.c1.name:new_name,*.c1.active:new_active,obj);
  Struct value=(Struct)record.value();
  assertThat(value.get(AFTER)).isEqualTo(expected);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",236
346,"'-tryline","@Test public void shouldRenameNestedFieldsForInsertEvent() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(address,new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  String expected={ + \_id\: {\$oid\: \ + objId + \},+ \phone\: {\$numberLong\: \123\},+ \address\: {+ \street\: \Claude Debussylaan\,+ \city\: \Amsterdam\,+ \new_number\: {\$numberLong\: \34\}+ },+ \scores\: [1.2,3.4,5.6],+ \new_name\: \Sally\,+ \new_active\: true+ };
  SourceRecord record=getInsertRecord(*.c1.name:new_name,*.c1.active:new_active,*.c1.address.number:new_number,obj);
  Struct value=(Struct)record.value();
  assertThat(value.get(AFTER)).isEqualTo(expected);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",262
347,"'-tryline","@Test public void shouldNotRenameNestedFieldsToExistingNamesForInsertEvent() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(address,new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  assertShouldNotRenameDuringInsert(*.c1.address.street:city,obj,city);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",297
348,"'-tryline","@Test public void shouldRenameFieldsForUpdateEvent() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(phone,456L).append(active,false).append(scores,Arrays.asList(1.2,3.4,5.6,7.8));
  Document updateObj=new Document().append($set,new Document().append(name,Sally).append(phone,123L).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6)));
  String expected={ + \$v\: 1, + \$set\: {+ \phone\: {\$numberLong\: \123\},+ \scores\: [1.2,3.4,5.6],+ \new_name\: \Sally\,+ \new_active\: true+ }+ };
  SourceRecord record=getUpdateRecord(*.c1.name:new_name,*.c1.active:new_active,obj,updateObj);
  Struct value=(Struct)record.value();
  final Document actualDoc=TestHelper.getDocumentWithoutLanguageVersion(value.getString(PATCH));
  final Document expectedDoc=TestHelper.getDocumentWithoutLanguageVersion(expected);
  assertThat(actualDoc).isEqualTo(expectedDoc);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",314
349,"'-tryline","@Test public void shouldNotRenameMissingFieldsForUpdateEvent() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(phone,456L).append(active,false).append(scores,Arrays.asList(1.2,3.4,5.6,7.8));
  Document updateObj=new Document().append($set,new Document().append(name,Sally).append(phone,123L).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6)));
  String expected={ + \$v\: 1, + \$set\: {+ \active\: true,+ \name\: \Sally\,+ \phone\: {\$numberLong\: \123\},+ \scores\: [1.2,3.4,5.6]+ }+ };
  SourceRecord record=getUpdateRecord(*.c1.missing:new_missing,obj,updateObj);
  Struct value=(Struct)record.value();
  final Document actualDoc=TestHelper.getDocumentWithoutLanguageVersion(value.getString(PATCH));
  final Document expectedDoc=TestHelper.getDocumentWithoutLanguageVersion(expected);
  assertThat(actualDoc).isEqualTo(expectedDoc);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",351
350,"'-tryline","@Test public void shouldRenameNestedFieldsForUpdateEventWithEmbeddedDocument() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(phone,456L).append(address,new Document().append(number,56L).append(street,Claude Debussylaann).append(city,Amsterdame)).append(active,false).append(scores,Arrays.asList(1.2,3.4,5.6,7.8));
  Document updateObj=new Document().append($set,new Document().append(name,Sally).append(phone,123L).append(address,new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6)));
  String expected={ + \$v\: 1, + \$set\: {+ \address\: {+ \street\: \Claude Debussylaan\,+ \city\: \Amsterdam\,+ \new_number\: {\$numberLong\: \34\}+ },+ \phone\: {\$numberLong\: \123\},+ \scores\: [1.2,3.4,5.6],+ \new_name\: \Sally\,+ \new_active\: true+ }+ };
  SourceRecord record=getUpdateRecord(*.c1.name:new_name,*.c1.active:new_active,*.c1.address.number:new_number,obj,updateObj);
  Struct value=(Struct)record.value();
  final Document actualDoc=TestHelper.getDocumentWithoutLanguageVersion(value.getString(PATCH));
  final Document expectedDoc=TestHelper.getDocumentWithoutLanguageVersion(expected);
  assertThat(actualDoc).isEqualTo(expectedDoc);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",388
351,"'-tryline","@Test public void shouldNotRenameNestedFieldsToExistingNamesForUpdateEventWithEmbeddedDocument() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(phone,456L).append(address,new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)).append(active,false).append(scores,Arrays.asList(1.2,3.4,5.6,7.8));
  Document updateObj=new Document().append(name,Sally).append(phone,123L).append(address,new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  assertShouldNotRenameDuringUpdate(*.c1.address.street:city,obj,updateObj,false,city);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",438
352,"'-tryline","@Test public void shouldRenameNestedFieldsForUpdateEventWithArrayOfEmbeddedDocuments() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(phone,456L).append(addresses,Arrays.asList(new Document().append(number,56L).append(street,Claude Debussylaann).append(city,Amsterdame),new Document().append(number,8L).append(street,Fragkokklisiass).append(city,Athense))).append(active,false).append(scores,Arrays.asList(1.2,3.4,5.6,7.8));
  Document updateObj=new Document().append($set,new Document().append(name,Sally).append(phone,123L).append(addresses,Arrays.asList(new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam),new Document().append(number,7L).append(street,Fragkokklisias).append(city,Athens))).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6)));
  String expected={ + \$v\: 1, + \$set\: {+ \active\: true,+ \addresses\: [+ {+ \street\: \Claude Debussylaan\,+ \city\: \Amsterdam\,+ \new_number\: {\$numberLong\: \34\}+ },+ {+ \street\: \Fragkokklisias\,+ \city\: \Athens\,+ \new_number\: {\$numberLong\: \7\}+ }+ ],+ \phone\: {\$numberLong\: \123\},+ \scores\: [1.2,3.4,5.6],+ \new_name\: \Sally\+ }+ };
  SourceRecord record=getUpdateRecord(*.c1.name:new_name,*.c1.addresses.number:new_number,obj,updateObj);
  Struct value=(Struct)record.value();
  final Document actualDoc=TestHelper.getDocumentWithoutLanguageVersion(value.getString(PATCH));
  final Document expectedDoc=TestHelper.getDocumentWithoutLanguageVersion(expected);
  assertThat(actualDoc).isEqualTo(expectedDoc);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",465
353,"'-tryline","@Test public void shouldNotRenameNestedFieldsForUpdateEventWithArrayOfArrays() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(phone,456L).append(addresses,Arrays.asList(Collections.singletonList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)),Collections.singletonList(new Document().append(number,8L).append(street,Fragkokklisiass).append(city,Athense)))).append(active,false).append(scores,Arrays.asList(1.2,3.4,5.6,7.8));
  Document updateObj=new Document().append($set,new Document().append(name,Sally).append(phone,123L).append(addresses,Arrays.asList(Collections.singletonList(new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)),Collections.singletonList(new Document().append(number,7L).append(street,Fragkokklisias).append(city,Athens)))).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6)));
  String expected={ + \$v\: 1, + \$set\: {+ \active\: true,+ \addresses\: [+ [+ {+ \number\: {\$numberLong\: \34\},+ \street\: \Claude Debussylaan\,+ \city\: \Amsterdam\+ }+ ],+ [+ {+ \number\: {\$numberLong\: \7\},+ \street\: \Fragkokklisias\,+ \city\: \Athens\+ }+ ]+ ],+ \phone\: {\$numberLong\: \123\},+ \scores\: [1.2,3.4,5.6],+ \new_name\: \Sally\+ }+ };
  SourceRecord record=getUpdateRecord(*.c1.name:new_name,*.c1.addresses.number:new_number,obj,updateObj);
  Struct value=(Struct)record.value();
  final Document actualDoc=TestHelper.getDocumentWithoutLanguageVersion(value.getString(PATCH));
  final Document expectedDoc=TestHelper.getDocumentWithoutLanguageVersion(expected);
  assertThat(actualDoc).isEqualTo(expectedDoc);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",532
354,"'-tryline","@Test public void shouldRenameFieldsForSetTopLevelFieldUpdateEvent() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(phone,456L);
  Document updateObj=new Document().append($set,new Document().append(name,Sally).append(phone,123L));
  String expected={ + \$v\: 1, + \$set\: {+ \phone\: {\$numberLong\: \123\},+ \new_name\: \Sally\+ }+ };
  SourceRecord record=getUpdateRecord(*.c1.name:new_name,obj,updateObj);
  Struct value=(Struct)record.value();
  final Document actualDoc=TestHelper.getDocumentWithoutLanguageVersion(value.getString(PATCH));
  final Document expectedDoc=TestHelper.getDocumentWithoutLanguageVersion(expected);
  assertThat(actualDoc).isEqualTo(expectedDoc);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",604
355,"'-tryline","@Test public void shouldNotRenameFieldsToExistingNamesForSetTopLevelFieldUpdateEvent() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(phone,456L);
  Document updateObj=new Document().append(name,Sally).append(phone,123L);
  assertShouldNotRenameDuringUpdate(*.c1.name:phone,obj,updateObj,false,phone);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",635
356,"'-tryline","@Test public void shouldRenameFieldsForUnsetTopLevelFieldUpdateEvent() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(phone,456L);
  Document updateObj=new Document().append($unset,new Document().append(name,).append(phone,));
  String expected={ + \$v\: 1, + \$unset\: {+ \phone\: true,+ \new_name\: true+ }+ };
  SourceRecord record=getUpdateRecord(*.c1.name:new_name,obj,updateObj);
  Struct value=(Struct)record.value();
  final Document actualDoc=TestHelper.getDocumentWithoutLanguageVersion(value.getString(PATCH));
  final Document expectedDoc=TestHelper.getDocumentWithoutLanguageVersion(expected);
  assertThat(actualDoc).isEqualTo(expectedDoc);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",650
357,"'-tryline","@Test public void shouldNotRenameFieldsToExistingNamesForUnsetTopLevelFieldUpdateEvent() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(phone,456L);
  Document updateObj=new Document().append(name,).append(phone,);
  assertShouldNotRenameDuringUpdate(*.c1.name:phone,obj,updateObj,false,phone);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",681
358,"'-tryline","@Test public void shouldRenameNestedFieldsForSetTopLevelFieldUpdateEventWithEmbeddedDocument() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(phone,456L).append(address,new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame));
  Document updateObj=new Document().append($set,new Document().append(name,Sally).append(phone,123L).append(address,new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)));
  String expected={ + \$v\: 1, + \$set\: {+ \address\: {+ \street\: \Claude Debussylaan\,+ \city\: \Amsterdam\,+ \new_number\: {\$numberLong\: \34\}+ },+ \phone\: {\$numberLong\: \123\},+ \new_name\: \Sally\+ }+ };
  SourceRecord record=getUpdateRecord(*.c1.name:new_name,*.c1.address.number:new_number,obj,updateObj);
  Struct value=(Struct)record.value();
  final Document actualDoc=TestHelper.getDocumentWithoutLanguageVersion(value.getString(PATCH));
  final Document expectedDoc=TestHelper.getDocumentWithoutLanguageVersion(expected);
  assertThat(actualDoc).isEqualTo(expectedDoc);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",696
359,"'-tryline","@Test public void shouldRenameNestedFieldsForSetTopLevelFieldUpdateEventWithArrayOfEmbeddedDocuments() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(phone,456L).append(addresses,Arrays.asList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame),new Document().append(number,8L).append(street,Fragkokklisiass).append(city,Athense)));
  Document updateObj=new Document().append($set,new Document().append(name,Sally).append(phone,123L).append(addresses,Arrays.asList(new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam),new Document().append(number,7L).append(street,Fragkokklisias).append(city,Athens))));
  String expected={ + \$v\: 1, + \$set\: {+ \addresses\: [+ {+ \street\: \Claude Debussylaan\,+ \city\: \Amsterdam\,+ \new_number\: {\$numberLong\: \34\}+ },+ {+ \street\: \Fragkokklisias\,+ \city\: \Athens\,+ \new_number\: {\$numberLong\: \7\}+ }+ ],+ \phone\: {\$numberLong\: \123\},+ \new_name\: \Sally\+ }+ };
  SourceRecord record=getUpdateRecord(*.c1.name:new_name,*.c1.addresses.number:new_number,obj,updateObj);
  Struct value=(Struct)record.value();
  final Document actualDoc=TestHelper.getDocumentWithoutLanguageVersion(value.getString(PATCH));
  final Document expectedDoc=TestHelper.getDocumentWithoutLanguageVersion(expected);
  assertThat(actualDoc).isEqualTo(expectedDoc);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",740
360,"'-tryline","@Test public void shouldNotRenameNestedFieldsForSetTopLevelFieldUpdateEventWithArrayOfArrays() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(phone,456L).append(addresses,Arrays.asList(Collections.singletonList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)),Collections.singletonList(new Document().append(number,8L).append(street,Fragkokklisiass).append(city,Athense))));
  Document updateObj=new Document().append($set,new Document().append(name,Sally).append(phone,123L).append(addresses,Arrays.asList(Collections.singletonList(new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)),Collections.singletonList(new Document().append(number,7L).append(street,Fragkokklisias).append(city,Athens)))));
  String expected={ + \$v\: 1, + \$set\: {+ \addresses\: [+ [+ {+ \number\: {\$numberLong\: \34\},+ \street\: \Claude Debussylaan\,+ \city\: \Amsterdam\+ }+ ],+ [+ {+ \number\: {\$numberLong\: \7\},+ \street\: \Fragkokklisias\,+ \city\: \Athens\+ }+ ]+ ],+ \phone\: {\$numberLong\: \123\},+ \new_name\: \Sally\+ }+ };
  SourceRecord record=getUpdateRecord(*.c1.name:new_name,*.c1.addresses.number:new_number,obj,updateObj);
  Struct value=(Struct)record.value();
  final Document actualDoc=TestHelper.getDocumentWithoutLanguageVersion(value.getString(PATCH));
  final Document expectedDoc=TestHelper.getDocumentWithoutLanguageVersion(expected);
  assertThat(actualDoc).isEqualTo(expectedDoc);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",800
361,"'-tryline","@Test public void shouldRenameNestedFieldsForSetNestedFieldUpdateEventWithEmbeddedDocument() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(address,new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame));
  Document updateObj=new Document().append($set,new Document().append(name,Sally).append(address.number,34L).append(address.street,Claude Debussylaan).append(address.city,Amsterdam));
  String expected={ + \$v\: 1, + \$set\: {+ \address.city\: \Amsterdam\,+ \address.street\: \Claude Debussylaan\,+ \new_name\: \Sally\,+ \address.new_number\: {\$numberLong\: \34\}+ }+ };
  SourceRecord record=getUpdateRecord(*.c1.name:new_name,*.c1.address.number:new_number,obj,updateObj);
  Struct value=(Struct)record.value();
  final Document actualDoc=TestHelper.getDocumentWithoutLanguageVersion(value.getString(PATCH));
  final Document expectedDoc=TestHelper.getDocumentWithoutLanguageVersion(expected);
  assertThat(actualDoc).isEqualTo(expectedDoc);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",865
362,"'-tryline","@Test public void shouldRenameNestedFieldsForSetNestedFieldUpdateEventWithArrayOfEmbeddedDocuments() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(addresses,Arrays.asList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)));
  Document updateObj=new Document().append($set,new Document().append(name,Sally).append(addresses.0.number,34L).append(addresses.0.street,Claude Debussylaan).append(addresses.0.city,Amsterdam));
  String expected={ + \$v\: 1, + \$set\: {+ \addresses.0.city\: \Amsterdam\,+ \addresses.0.street\: \Claude Debussylaan\,+ \name\: \Sally\,+ \addresses.0.new_number\: {\$numberLong\: \34\}+ }+ };
  SourceRecord record=getUpdateRecord(*.c1.addresses.number:new_number,obj,updateObj);
  Struct value=(Struct)record.value();
  final Document actualDoc=TestHelper.getDocumentWithoutLanguageVersion(value.getString(PATCH));
  final Document expectedDoc=TestHelper.getDocumentWithoutLanguageVersion(expected);
  assertThat(actualDoc).isEqualTo(expectedDoc);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",903
363,"'-tryline","@Test public void shouldNotRenameNestedFieldsToExistingNamesForSetNestedFieldUpdateEventWithArrayOfEmbeddedDocuments() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(addresses,Arrays.asList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)));
  Document updateObj=new Document().append(name,Sally).append(addresses.0.number,34L).append(addresses.0.street,Claude Debussylaan).append(addresses.0.city,Amsterdam);
  assertShouldNotRenameDuringUpdate(*.c1.addresses.street:city,obj,updateObj,false,addresses.0.city);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",941
364,"'-tryline","@Test public void shouldNotRenameNestedFieldsForSetNestedFieldUpdateEventWithArrayOfArrays() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(addresses,Arrays.asList(Arrays.asList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame))));
  Document updateObj=new Document().append($set,new Document().append(name,Sally).append(addresses.0.0.number,34L).append(addresses.0.0.street,Claude Debussylaan).append(addresses.0.0.city,Amsterdam));
  String expected={ + \$v\: 1, + \$set\: {+ \addresses.0.0.city\: \Amsterdam\,+ \addresses.0.0.number\: {\$numberLong\: \34\},+ \addresses.0.0.street\: \Claude Debussylaan\,+ \name\: \Sally\+ }+ };
  SourceRecord record=getUpdateRecord(*.c1.addresses.number:new_number,obj,updateObj);
  Struct value=(Struct)record.value();
  final Document actualDoc=TestHelper.getDocumentWithoutLanguageVersion(value.getString(PATCH));
  final Document expectedDoc=TestHelper.getDocumentWithoutLanguageVersion(expected);
  assertThat(actualDoc).isEqualTo(expectedDoc);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",961
365,"'-tryline","@Test public void shouldRenameNestedFieldsForSetNestedFieldUpdateEventWithSeveralArrays() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(addresses,Arrays.asList(Collections.singletonMap(second,new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame))));
  Document updateObj=new Document().append($set,new Document().append(name,Sally).append(addresses.0.second.0.number,34L).append(addresses.0.second.0.street,Claude Debussylaan).append(addresses.0.second.0.city,Amsterdam));
  String expected={ + \$v\: 1, + \$set\: {+ \addresses.0.second.0.city\: \Amsterdam\,+ \addresses.0.second.0.street\: \Claude Debussylaan\,+ \name\: \Sally\,+ \addresses.0.second.0.new_number\: {\$numberLong\: \34\}+ }+ };
  SourceRecord record=getUpdateRecord(*.c1.addresses.second.number:new_number,obj,updateObj);
  Struct value=(Struct)record.value();
  final Document actualDoc=TestHelper.getDocumentWithoutLanguageVersion(value.getString(PATCH));
  final Document expectedDoc=TestHelper.getDocumentWithoutLanguageVersion(expected);
  assertThat(actualDoc).isEqualTo(expectedDoc);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",999
366,"'-tryline","@Test public void shouldRenameFieldsForSetNestedFieldUpdateEventWithArrayOfEmbeddedDocuments() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(addresses,Arrays.asList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)));
  Document updateObj=new Document().append($set,new Document().append(name,Sally).append(addresses.0.number,34L).append(addresses.0.street,Claude Debussylaan).append(addresses.0.city,Amsterdam));
  String expected={ + \$v\: 1, + \$set\: {+ \name\: \Sally\,+ \new_addresses.0.city\: \Amsterdam\,+ \new_addresses.0.number\: {\$numberLong\: \34\},+ \new_addresses.0.street\: \Claude Debussylaan\+ }+ };
  SourceRecord record=getUpdateRecord(*.c1.addresses:new_addresses,obj,updateObj);
  Struct value=(Struct)record.value();
  final Document actualDoc=TestHelper.getDocumentWithoutLanguageVersion(value.getString(PATCH));
  final Document expectedDoc=TestHelper.getDocumentWithoutLanguageVersion(expected);
  assertThat(actualDoc).isEqualTo(expectedDoc);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",1037
367,"'-tryline","@Test public void shouldRenameFieldsForSetToArrayFieldUpdateEventWithArrayOfEmbeddedDocuments() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(addresses,Arrays.asList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)));
  Document updateObj=new Document().append($set,new Document().append(name,Sally).append(addresses.0,new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)));
  String expected={ + \$v\: 1, + \$set\: {+ \name\: \Sally\,+ \new_addresses.0\: {+ \number\: {\$numberLong\: \34\},+ \street\: \Claude Debussylaan\,+ \city\: \Amsterdam\+ }+ }+ };
  SourceRecord record=getUpdateRecord(*.c1.addresses:new_addresses,obj,updateObj);
  Struct value=(Struct)record.value();
  final Document actualDoc=TestHelper.getDocumentWithoutLanguageVersion(value.getString(PATCH));
  final Document expectedDoc=TestHelper.getDocumentWithoutLanguageVersion(expected);
  assertThat(actualDoc).isEqualTo(expectedDoc);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",1075
368,"'-tryline","@Test public void shouldRenameNestedFieldsForUnsetNestedFieldUpdateEventWithEmbeddedDocument() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(address,new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame));
  Document updateObj=new Document().append($unset,new Document().append(name,).append(address.number,).append(address.street,).append(address.city,));
  String expected={ + \$v\: 1, + \$unset\: {+ \address.city\: true,+ \address.street\: true,+ \new_name\: true,+ \address.new_number\: true+ }+ };
  SourceRecord record=getUpdateRecord(*.c1.name:new_name,*.c1.address.number:new_number,obj,updateObj);
  Struct value=(Struct)record.value();
  final Document actualDoc=TestHelper.getDocumentWithoutLanguageVersion(value.getString(PATCH));
  final Document expectedDoc=TestHelper.getDocumentWithoutLanguageVersion(expected);
  assertThat(actualDoc).isEqualTo(expectedDoc);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",1116
369,"'-tryline","@Test public void shouldRenameNestedFieldsForUnsetNestedFieldUpdateEventWithArrayOfEmbeddedDocuments() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(addresses,Arrays.asList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)));
  Document updateObj=new Document().append($unset,new Document().append(name,).append(addresses.0.number,).append(addresses.0.street,).append(addresses.0.city,));
  String expected={ + \$v\: 1, + \$unset\: {+ \addresses.0.city\: true,+ \addresses.0.street\: true,+ \name\: true,+ \addresses.0.new_number\: true+ }+ };
  SourceRecord record=getUpdateRecord(*.c1.addresses.number:new_number,obj,updateObj);
  Struct value=(Struct)record.value();
  final Document actualDoc=TestHelper.getDocumentWithoutLanguageVersion(value.getString(PATCH));
  final Document expectedDoc=TestHelper.getDocumentWithoutLanguageVersion(expected);
  assertThat(actualDoc).isEqualTo(expectedDoc);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",1154
370,"'-tryline","@Test public void shouldNotRenameNestedFieldsToExistingNamesForUnsetNestedFieldUpdateEventWithArrayOfEmbeddedDocuments() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(addresses,Arrays.asList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)));
  Document updateObj=new Document().append(name,).append(addresses.0.number,).append(addresses.0.street,).append(addresses.0.city,);
  assertShouldNotRenameDuringUpdate(*.c1.addresses.street:city,obj,updateObj,true,addresses.0.city);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",1192
371,"'-tryline","@Test public void shouldNotRenameNestedFieldsForUnsetNestedFieldUpdateEventWithArrayOfArrays() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(addresses,Arrays.asList(Arrays.asList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame))));
  Document updateObj=new Document().append($unset,new Document().append(name,).append(addresses.0.0.number,).append(addresses.0.0.street,).append(addresses.0.0.city,));
  String expected={ + \$v\: 1, + \$unset\: {+ \addresses.0.0.city\: true,+ \addresses.0.0.number\: true,+ \addresses.0.0.street\: true,+ \name\: true+ }+ };
  SourceRecord record=getUpdateRecord(*.c1.addresses.number:new_number,obj,updateObj);
  Struct value=(Struct)record.value();
  final Document actualDoc=TestHelper.getDocumentWithoutLanguageVersion(value.getString(PATCH));
  final Document expectedDoc=TestHelper.getDocumentWithoutLanguageVersion(expected);
  assertThat(actualDoc).isEqualTo(expectedDoc);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",1212
372,"'-tryline","@Test public void shouldRenameNestedFieldsForUnsetNestedFieldUpdateEventWithSeveralArrays() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(addresses,Arrays.asList(Collections.singletonMap(second,Arrays.asList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)))));
  Document updateObj=new Document().append($unset,new Document().append(name,).append(addresses.0.second.0.number,).append(addresses.0.second.0.street,).append(addresses.0.second.0.city,));
  String expected={ + \$v\: 1, + \$unset\: {+ \addresses.0.second.0.city\: true,+ \addresses.0.second.0.street\: true,+ \name\: true,+ \addresses.0.second.0.new_number\: true+ }+ };
  SourceRecord record=getUpdateRecord(*.c1.addresses.second.number:new_number,obj,updateObj);
  Struct value=(Struct)record.value();
  final Document actualDoc=TestHelper.getDocumentWithoutLanguageVersion(value.getString(PATCH));
  final Document expectedDoc=TestHelper.getDocumentWithoutLanguageVersion(expected);
  assertThat(actualDoc).isEqualTo(expectedDoc);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",1250
373,"'-tryline","@Test public void shouldRenameFieldsForUnsetNestedFieldUpdateEventWithArrayOfEmbeddedDocuments() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(addresses,Arrays.asList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)));
  Document updateObj=new Document().append($unset,new Document().append(name,).append(addresses.0.number,).append(addresses.0.street,).append(addresses.0.city,));
  String expected={ + \$v\: 1, + \$unset\: {+ \name\: true,+ \new_addresses.0.city\: true,+ \new_addresses.0.number\: true,+ \new_addresses.0.street\: true+ }+ };
  SourceRecord record=getUpdateRecord(*.c1.addresses:new_addresses,obj,updateObj);
  Struct value=(Struct)record.value();
  final Document actualDoc=TestHelper.getDocumentWithoutLanguageVersion(value.getString(PATCH));
  final Document expectedDoc=TestHelper.getDocumentWithoutLanguageVersion(expected);
  assertThat(actualDoc).isEqualTo(expectedDoc);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",1288
374,"'-tryline","@Test public void shouldRenameFieldsForDeleteEvent() throws Exception {
  config=getConfiguration(*.c1.name:new_name,*.c1.active:new_active);
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbA);
  ObjectId objId=new ObjectId();
  Document obj=new Document(_id,objId);
  dropAndInsertDocuments(dbA,c1,obj);
  start(MongoDbConnector.class,config);
  SourceRecords snapshotRecords=consumeRecordsByTopic(1);
  assertThat(snapshotRecords.topics().size()).isEqualTo(1);
  assertThat(snapshotRecords.allRecordsInOrder().size()).isEqualTo(1);
  waitForStreamingRunning(mongodb,SERVER_NAME);
  deleteDocuments(dbA,c1,getFilterFromId(objId));
  SourceRecords deleteRecords=consumeRecordsByTopic(2);
  assertThat(deleteRecords.topics().size()).isEqualTo(1);
  assertThat(deleteRecords.allRecordsInOrder().size()).isEqualTo(2);
  SourceRecord record=deleteRecords.allRecordsInOrder().get(0);
  Struct value=(Struct)record.value();
  String json=value.getString(AFTER);
  if (json == null) {
    json=value.getString(PATCH);
  }
  assertThat(json).isNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",1326
375,"'-tryline","@Test public void shouldRenameFieldsForDeleteTombstoneEvent() throws Exception {
  config=getConfiguration(*.c1.name:new_name,*.c1.active:new_active);
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbA);
  ObjectId objId=new ObjectId();
  Document obj=new Document(_id,objId);
  dropAndInsertDocuments(dbA,c1,obj);
  start(MongoDbConnector.class,config);
  SourceRecords snapshotRecords=consumeRecordsByTopic(1);
  assertThat(snapshotRecords.topics().size()).isEqualTo(1);
  assertThat(snapshotRecords.allRecordsInOrder().size()).isEqualTo(1);
  waitForStreamingRunning(mongodb,SERVER_NAME);
  deleteDocuments(dbA,c1,getFilterFromId(objId));
  SourceRecords deleteRecords=consumeRecordsByTopic(2);
  assertThat(deleteRecords.topics().size()).isEqualTo(1);
  assertThat(deleteRecords.allRecordsInOrder().size()).isEqualTo(2);
  SourceRecord record=deleteRecords.allRecordsInOrder().get(1);
  Struct value=(Struct)record.value();
  assertThat(value).isNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",1363
376,"'-tryline","private SourceRecord getReadRecord(String fieldRenames,Document document) throws Exception {
  return getReadRecord(DATABASE_NAME,COLLECTION_NAME,fieldRenames,document);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",1430
377,"'-tryline","private SourceRecord getReadRecord(String database,String collection,String fieldRenames,Document document) throws Exception {
  config=getConfiguration(fieldRenames,database,collection);
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),database);
  dropAndInsertDocuments(database,collection,document);
  logInterceptor=new LogInterceptor();
  start(MongoDbConnector.class,config);
  SourceRecords sourceRecords=consumeRecordsByTopic(1);
  assertThat(sourceRecords.allRecordsInOrder().size()).isEqualTo(1);
  return sourceRecords.allRecordsInOrder().get(0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",1434
378,"'-tryline","private SourceRecord getInsertRecord(String fieldRenames,Document document) throws Exception {
  return getInsertRecord(DATABASE_NAME,COLLECTION_NAME,fieldRenames,document);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",1452
379,"'-tryline","private SourceRecord getInsertRecord(String database,String collection,String fieldRenames,Document document) throws Exception {
  config=getConfiguration(fieldRenames,database,collection);
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),database);
  insertDocuments(database,collection,document);
  logInterceptor=new LogInterceptor();
  start(MongoDbConnector.class,config);
  SourceRecords sourceRecords=consumeRecordsByTopic(1);
  assertThat(sourceRecords.allRecordsInOrder().size()).isEqualTo(1);
  return sourceRecords.allRecordsInOrder().get(0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",1456
380,"'-tryline","private SourceRecord getUpdateRecord(String fieldRenames,Document snapshot,Document document) throws Exception {
  return getUpdateRecord(DATABASE_NAME,COLLECTION_NAME,fieldRenames,snapshot,document);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",1473
381,"'-tryline","private SourceRecord getUpdateRecord(String database,String collection,String fieldRenames,Document snapshot,Document document) throws Exception {
  final SourceRecord readRecord=getReadRecord(database,collection,fieldRenames,snapshot);
  updateDocument(database,collection,getFilterFromId(snapshot.getObjectId(ID)),document);
  SourceRecords sourceRecords=consumeRecordsByTopic(1);
  assertThat(sourceRecords.allRecordsInOrder().size()).isEqualTo(1);
  return sourceRecords.allRecordsInOrder().get(0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",1477
382,"'-tryline","private void assertShouldNotRenameDuringRead(String renamesList,Document snapshot,String fieldName) throws Exception {
  config=getConfiguration(renamesList);
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),DATABASE_NAME);
  dropAndInsertDocuments(DATABASE_NAME,COLLECTION_NAME,snapshot);
  logInterceptor=new LogInterceptor();
  start(MongoDbConnector.class,config);
  waitForStreamingRunning(mongodb,SERVER_NAME);
  assertNoRecordsToConsume();
  assertDocumentContainsFieldError(fieldName);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",1505
383,"'-tryline","private void assertShouldNotRenameDuringInsert(String renamesList,Document document,String fieldName) throws Exception {
  config=getConfiguration(renamesList);
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),DATABASE_NAME);
  logInterceptor=new LogInterceptor();
  start(MongoDbConnector.class,config);
  waitForStreamingRunning(mongodb,SERVER_NAME);
  insertDocuments(DATABASE_NAME,COLLECTION_NAME,document);
  assertNoRecordsToConsume();
  assertDocumentContainsFieldError(fieldName);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",1521
384,"'-tryline","private void assertShouldNotRenameDuringUpdate(String renamesList,Document snapshot,Document update,boolean unset,String fieldName) throws Exception {
  final SourceRecord snapshotRecord=getReadRecord(DATABASE_NAME,COLLECTION_NAME,null,snapshot);
  waitForStreamingRunning(mongodb,SERVER_NAME);
  stopConnector();
  config=getConfiguration(renamesList,DATABASE_NAME,COLLECTION_NAME);
  context=new MongoDbTaskContext(config);
  logInterceptor=new LogInterceptor();
  start(MongoDbConnector.class,config);
  waitForStreamingRunning(mongodb,SERVER_NAME);
  final Document document=new Document().append(unset ? $unset : $set,update);
  updateDocument(DATABASE_NAME,COLLECTION_NAME,getFilterFromId(snapshot.getObjectId(ID)),document);
  assertNoRecordsToConsume();
  assertDocumentContainsFieldError(fieldName);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldRenamesIT.java",1537
385,"'-tryline","@Test @FixFor(DBZ-1242) public void testEmptySchemaWarningAfterApplyingCollectionFilters() throws Exception {
  final LogInterceptor logInterceptor=new LogInterceptor();
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.POLL_INTERVAL_MS,10).with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.dbz865.my_products).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).build();
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbit);
  primary().execute(create,mongo -> {
    MongoDatabase db1=mongo.getDatabase(dbit);
    MongoCollection<Document> coll=db1.getCollection(dbz865_my@collection);
    coll.drop();
    Document doc=Document.parse({\a\: 1, \b\: 2});
    InsertOneOptions insertOptions=new InsertOneOptions().bypassDocumentValidation(true);
    coll.insertOne(doc,insertOptions);
  }
);
  start(MongoDbConnector.class,config);
  consumeRecordsByTopic(12);
  stopConnector(value -> assertThat(logInterceptor.containsWarnMessage(DatabaseSchema.NO_CAPTURED_DATA_COLLECTIONS_WARNING)).isTrue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",672
386,"'-tryline","@Test @FixFor(DBZ-2116) public void shouldSnapshotDocumentContainingFieldNamedOp() throws Exception {
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.POLL_INTERVAL_MS,10).with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).build();
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbit);
  storeDocuments(dbit,fieldnamedop,fieldnamedop.json);
  start(MongoDbConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(2);
  assertThat(records.recordsForTopic(mongo.dbit.fieldnamedop).size()).isEqualTo(2);
  assertThat(records.topics().size()).isEqualTo(1);
  AtomicBoolean foundLast=new AtomicBoolean(false);
  records.forEach(record -> {
    validate(record);
    verifyFromInitialSync(record,foundLast);
    verifyReadOperation(record);
  }
);
  assertThat(foundLast.get()).isTrue();
  SourceRecord record=records.recordsForTopic(mongo.dbit.fieldnamedop).get(0);
  assertThat(((Struct)record.value()).get(op)).isEqualTo(r);
  Document after=Document.parse((String)((Struct)record.value()).get(after));
  assertThat(after.get(op)).isEqualTo(foo);
  record=records.recordsForTopic(mongo.dbit.fieldnamedop).get(1);
  assertThat(((Struct)record.value()).get(op)).isEqualTo(r);
  after=Document.parse((String)((Struct)record.value()).get(after));
  assertThat(after.get(op)).isEqualTo(bar);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",919
387,"'-tryline","@Test @FixFor(DBZ-2496) public void shouldFilterItemsInCollectionWhileTakingSnapshot() throws Exception {
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.POLL_INTERVAL_MS,10).with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).with(MongoDbConnectorConfig.SNAPSHOT_FILTER_QUERY_BY_COLLECTION,dbit.simpletons,dbit.restaurants1,dbit.restaurants4).with(MongoDbConnectorConfig.SNAPSHOT_FILTER_QUERY_BY_COLLECTION + . + dbit.simpletons,{ \_id\: { \$gt\: 4 } }).with(MongoDbConnectorConfig.SNAPSHOT_FILTER_QUERY_BY_COLLECTION + . + dbit.restaurants1,{ $or: [ { cuisine: \American \}, { \grades.grade\: \Z\ } ] }).with(MongoDbConnectorConfig.SNAPSHOT_FILTER_QUERY_BY_COLLECTION + . + dbit.restaurants4,{ cuisine: \American \ , borough: \Manhattan\  }).build();
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbit);
  storeDocuments(dbit,simpletons,simple_objects.json);
  storeDocuments(dbit,restaurants1,restaurants1.json);
  storeDocuments(dbit,restaurants2,restaurants2.json);
  storeDocuments(dbit,restaurants4,restaurants4.json);
  start(MongoDbConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(15);
  assertThat(records.topics().size()).isEqualTo(4);
  assertThat(records.recordsForTopic(mongo.dbit.simpletons).size()).isEqualTo(4);
  assertThat(records.recordsForTopic(mongo.dbit.restaurants1).size()).isEqualTo(3);
  assertThat(records.recordsForTopic(mongo.dbit.restaurants2).size()).isEqualTo(4);
  assertThat(records.recordsForTopic(mongo.dbit.restaurants4).size()).isEqualTo(4);
  assertNoRecordsToConsume();
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",969
388,"'-tryline","@Test @FixFor(DBZ-1292) public void shouldOutputRecordsInCloudEventsFormat() throws Exception {
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.POLL_INTERVAL_MS,10).with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).build();
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbit);
  storeDocuments(dbit,restaurants,restaurants1.json);
  start(MongoDbConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(12);
  List<SourceRecord> topicRecords=records.recordsForTopic(mongo.dbit.restaurants);
  for (  SourceRecord record : topicRecords) {
    CloudEventsConverterTest.shouldConvertToCloudEventsInJson(record,false);
    CloudEventsConverterTest.shouldConvertToCloudEventsInJsonWithDataAsAvro(record,false);
    CloudEventsConverterTest.shouldConvertToCloudEventsInAvro(record,mongodb,mongo,false);
  }
  storeDocuments(dbit,restaurants,restaurants2.json);
  SourceRecords records2=consumeRecordsByTopic(4);
  List<SourceRecord> topicRecords2=records2.recordsForTopic(mongo.dbit.restaurants);
  for (  SourceRecord record : topicRecords2) {
    CloudEventsConverterTest.shouldConvertToCloudEventsInJson(record,false);
    CloudEventsConverterTest.shouldConvertToCloudEventsInJsonWithDataAsAvro(record,false);
    CloudEventsConverterTest.shouldConvertToCloudEventsInAvro(record,mongodb,mongo,false);
  }
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",1287
389,"'-tryline","@Test public void shouldGenerateRecordForInsertEvent() throws Exception {
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).build();
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbit);
  start(MongoDbConnector.class,config);
  waitForStreamingRunning(mongodb,mongo);
  final Instant timestamp=Instant.now();
  ObjectId objId=new ObjectId();
  Document obj=new Document(_id,objId);
  insertDocuments(dbit,c1,obj);
  final SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.allRecordsInOrder().size()).isEqualTo(1);
  assertNoRecordsToConsume();
  final SourceRecord deleteRecord=records.allRecordsInOrder().get(0);
  final Struct key=(Struct)deleteRecord.key();
  final Struct value=(Struct)deleteRecord.value();
  assertThat(key.schema()).isSameAs(deleteRecord.keySchema());
  assertThat(key.get(id)).isEqualTo(formatObjectId(objId));
  assertThat(value.schema()).isSameAs(deleteRecord.valueSchema());
  assertThat(value.getString(Envelope.FieldName.AFTER)).isEqualTo(obj.toJson(COMPACT_JSON_SETTINGS));
  assertThat(value.getString(Envelope.FieldName.OPERATION)).isEqualTo(Operation.CREATE.code());
  assertThat(value.getInt64(Envelope.FieldName.TIMESTAMP)).isGreaterThanOrEqualTo(timestamp.toEpochMilli());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",1324
390,"'-tryline","@Test public void shouldGenerateRecordForUpdateEvent() throws Exception {
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).build();
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbit);
  start(MongoDbConnector.class,config);
  waitForStreamingRunning(mongodb,mongo);
  ObjectId objId=new ObjectId();
  Document obj=new Document(_id,objId);
  insertDocuments(dbit,c1,obj);
  consumeRecordsByTopic(1);
  assertNoRecordsToConsume();
  Document updateObj=new Document().append($set,new Document().append(name,Sally));
  final Instant timestamp=Instant.now();
  final Document filter=Document.parse({\_id\: {\$oid\: \ + objId + \}});
  updateDocuments(dbit,c1,filter,updateObj);
  final SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.allRecordsInOrder().size()).isEqualTo(1);
  assertNoRecordsToConsume();
  final SourceRecord deleteRecord=records.allRecordsInOrder().get(0);
  final Struct key=(Struct)deleteRecord.key();
  final Struct value=(Struct)deleteRecord.value();
  assertThat(key.schema()).isSameAs(deleteRecord.keySchema());
  assertThat(key.get(id)).isEqualTo(formatObjectId(objId));
  Document patchObj=Document.parse(value.getString(MongoDbFieldName.PATCH));
  patchObj.remove($v);
  assertThat(value.schema()).isSameAs(deleteRecord.valueSchema());
  assertThat(value.getString(Envelope.FieldName.AFTER)).isNull();
  assertThat(patchObj.toJson(COMPACT_JSON_SETTINGS)).isEqualTo(updateObj.toJson(COMPACT_JSON_SETTINGS));
  assertThat(value.getString(Envelope.FieldName.OPERATION)).isEqualTo(Operation.UPDATE.code());
  assertThat(value.getInt64(Envelope.FieldName.TIMESTAMP)).isGreaterThanOrEqualTo(timestamp.toEpochMilli());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",1367
391,"'-tryline","@Test public void shouldGeneratorRecordForDeleteEvent() throws Exception {
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).build();
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbit);
  start(MongoDbConnector.class,config);
  waitForStreamingRunning(mongodb,mongo);
  ObjectId objId=new ObjectId();
  Document obj=new Document(_id,objId);
  insertDocuments(dbit,c1,obj);
  consumeRecordsByTopic(1);
  assertNoRecordsToConsume();
  final Instant timestamp=Instant.now();
  deleteDocument(dbit,c1,objId);
  final SourceRecords records=consumeRecordsByTopic(2);
  assertThat(records.allRecordsInOrder().size()).isEqualTo(2);
  assertNoRecordsToConsume();
  final SourceRecord deleteRecord=records.allRecordsInOrder().get(0);
  final Struct key=(Struct)deleteRecord.key();
  final Struct value=(Struct)deleteRecord.value();
  assertThat(key.schema()).isSameAs(deleteRecord.keySchema());
  assertThat(key.get(id)).isEqualTo(formatObjectId(objId));
  assertThat(value.schema()).isSameAs(deleteRecord.valueSchema());
  assertThat(value.getString(Envelope.FieldName.AFTER)).isNull();
  assertThat(value.getString(MongoDbFieldName.PATCH)).isNull();
  assertThat(value.getString(Envelope.FieldName.OPERATION)).isEqualTo(Operation.DELETE.code());
  assertThat(value.getInt64(Envelope.FieldName.TIMESTAMP)).isGreaterThanOrEqualTo(timestamp.toEpochMilli());
  final SourceRecord tombstoneRecord=records.allRecordsInOrder().get(1);
  final Struct tombstoneKey=(Struct)tombstoneRecord.key();
  assertThat(tombstoneKey.schema()).isSameAs(tombstoneRecord.keySchema());
  assertThat(tombstoneKey.get(id)).isEqualTo(formatObjectId(objId));
  assertThat(tombstoneRecord.value()).isNull();
  assertThat(tombstoneRecord.valueSchema()).isNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",1424
392,"'-tryline","@Test @FixFor(DBZ-582) public void shouldGenerateRecordForDeleteEventWithoutTombstone() throws Exception {
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).with(MongoDbConnectorConfig.TOMBSTONES_ON_DELETE,false).build();
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbit);
  start(MongoDbConnector.class,config);
  waitForStreamingRunning(mongodb,mongo);
  ObjectId objId=new ObjectId();
  Document obj=new Document(_id,objId);
  insertDocuments(dbit,c1,obj);
  consumeRecordsByTopic(1);
  assertNoRecordsToConsume();
  final Instant timestamp=Instant.now();
  deleteDocument(dbit,c1,objId);
  final SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.allRecordsInOrder().size()).isEqualTo(1);
  assertNoRecordsToConsume();
  final SourceRecord record=records.allRecordsInOrder().get(0);
  final Struct key=(Struct)record.key();
  final Struct value=(Struct)record.value();
  assertThat(key.schema()).isSameAs(record.keySchema());
  assertThat(key.get(id)).isEqualTo(formatObjectId(objId));
  assertThat(value.schema()).isSameAs(record.valueSchema());
  assertThat(value.getString(Envelope.FieldName.AFTER)).isNull();
  assertThat(value.getString(MongoDbFieldName.PATCH)).isNull();
  assertThat(value.getString(Envelope.FieldName.OPERATION)).isEqualTo(Operation.DELETE.code());
  assertThat(value.getInt64(Envelope.FieldName.TIMESTAMP)).isGreaterThanOrEqualTo(timestamp.toEpochMilli());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",1481
393,"'-tryline","@Test public void shouldGenerateRecordsWithCorrectlySerializedId() throws Exception {
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).build();
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbit);
  start(MongoDbConnector.class,config);
  waitForStreamingRunning(mongodb,mongo);
  Document obj0=new Document().append(_id,Long.valueOf(Integer.MAX_VALUE) + 10).append(name,Sally);
  insertDocuments(dbit,c1,obj0);
  Document obj1=new Document().append(_id,123).append(name,Sally);
  insertDocuments(dbit,c1,obj1);
  Document obj2=new Document().append(_id,new Document().append(company,32).append(dept,home improvement)).append(name,Sally);
  insertDocuments(dbit,c1,obj2);
  Calendar cal=Calendar.getInstance();
  cal.set(2017,9,19);
  Document obj3=new Document().append(_id,cal.getTime()).append(name,Sally);
  insertDocuments(dbit,c1,obj3);
  final boolean decimal128Supported=TestHelper.decimal128Supported(primary(),mongo);
  if (decimal128Supported) {
    Document obj4=new Document().append(_id,new Decimal128(new BigDecimal(123.45678))).append(name,Sally);
    insertDocuments(dbit,c1,obj4);
  }
  final SourceRecords records=consumeRecordsByTopic(decimal128Supported ? 5 : 4);
  final List<SourceRecord> sourceRecords=records.allRecordsInOrder();
  assertSourceRecordKeyFieldIsEqualTo(sourceRecords.get(0),id,2147483657);
  assertSourceRecordKeyFieldIsEqualTo(sourceRecords.get(1),id,\123\);
  assertSourceRecordKeyFieldIsEqualTo(sourceRecords.get(2),id,{\company\: 32,\dept\: \home improvement\});
  assertSourceRecordKeyFieldIsEqualTo(sourceRecords.get(3),id,{\$date\: \ + ZonedDateTime.ofInstant(Instant.ofEpochMilli(cal.getTimeInMillis()),ZoneId.of(Z)).format(ISO_OFFSET_DATE_TIME) + \});
  if (decimal128Supported) {
    assertSourceRecordKeyFieldIsEqualTo(sourceRecords.get(4),id,{\$numberDecimal\: \123.45678\});
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",1533
394,"'-tryline","@Test public void shouldSupportDbRef2() throws Exception {
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).build();
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbit);
  start(MongoDbConnector.class,config);
  waitForStreamingRunning(mongodb,mongo);
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(ref,new DBRef(othercollection,15));
  final Instant timestamp=Instant.now();
  insertDocuments(dbit,c1,obj);
  final SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.topics().size()).isEqualTo(1);
  assertThat(records.allRecordsInOrder().size()).isEqualTo(1);
  final SourceRecord record=records.allRecordsInOrder().get(0);
  final Struct key=(Struct)record.key();
  final Struct value=(Struct)record.value();
  assertThat(key.schema()).isSameAs(record.keySchema());
  assertThat(key.get(id)).isEqualTo(formatObjectId(objId));
  assertThat(value.schema()).isSameAs(record.valueSchema());
  String expected={ + \_id\: {\$oid\: \ + objId + \},+ \name\: \Sally\,+ \ref\: {\$ref\: \othercollection\,\$id\: 15}+ };
  assertThat(value.getString(Envelope.FieldName.AFTER)).isEqualTo(expected);
  assertThat(value.getString(Envelope.FieldName.OPERATION)).isEqualTo(Operation.CREATE.code());
  assertThat(value.getInt64(Envelope.FieldName.TIMESTAMP)).isGreaterThanOrEqualTo(timestamp.toEpochMilli());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",1603
395,"'-tryline","@Test public void shouldReplicateContent() throws Exception {
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbA.contacts).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).with(MongoDbConnectorConfig.SNAPSHOT_MODE,MongoDbConnectorConfig.SnapshotMode.INITIAL).build();
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbA);
  primary().execute(shouldCreateContactsDatabase,mongo -> {
    MongoDatabase db=mongo.getDatabase(dbA);
    MongoCollection<Document> contacts=db.getCollection(contacts);
    InsertOneOptions options=new InsertOneOptions().bypassDocumentValidation(true);
    contacts.insertOne(new Document().append(name,Jon Snow),options);
    assertThat(db.getCollection(contacts).countDocuments()).isEqualTo(1);
    Bson filter=com.mongodb.client.model.Filters.eq(name,Jon Snow);
    FindIterable<Document> results=db.getCollection(contacts).find(filter);
    try (MongoCursor<Document> cursor=results.iterator()){
      assertThat(cursor.tryNext().getString(name)).isEqualTo(Jon Snow);
      assertThat(cursor.tryNext()).isNull();
    }
   }
);
  start(MongoDbConnector.class,config);
  waitForStreamingRunning(mongodb,mongo);
  final Object[] expectedNames={Jon Snow,Sally Hamm};
  primary().execute(shouldAddMoreRecordsToContacts,mongo -> {
    MongoDatabase db=mongo.getDatabase(dbA);
    MongoCollection<Document> contacts=db.getCollection(contacts);
    InsertOneOptions options=new InsertOneOptions().bypassDocumentValidation(true);
    contacts.insertOne(new Document().append(name,Sally Hamm),options);
    assertThat(db.getCollection(contacts).countDocuments()).isEqualTo(2);
    FindIterable<Document> results=db.getCollection(contacts).find();
    Set<String> foundNames=new HashSet<>();
    try (MongoCursor<Document> cursor=results.iterator()){
      while (cursor.hasNext()) {
        final String name=cursor.next().getString(name);
        foundNames.add(name);
      }
    }
     assertThat(foundNames).containsOnly(expectedNames);
  }
);
  List<SourceRecord> records=consumeRecordsByTopic(2).allRecordsInOrder();
  final Set<String> foundNames=new HashSet<>();
  records.forEach(record -> {
    VerifyRecord.isValid(record);
    final Struct value=(Struct)record.value();
    final String after=value.getString(Envelope.FieldName.AFTER);
    final Document document=Document.parse(after);
    foundNames.add(document.getString(name));
    final Operation operation=Operation.forCode(value.getString(Envelope.FieldName.OPERATION));
    assertThat(operation == Operation.READ || operation == Operation.CREATE).isTrue();
  }
);
  assertNoRecordsToConsume();
  assertThat(foundNames).containsOnly(expectedNames);
  stopConnector();
  start(MongoDbConnector.class,config);
  waitForStreamingRunning(mongodb,mongo);
  assertNoRecordsToConsume();
  AtomicReference<ObjectId> jonSnowId=new AtomicReference<>();
  primary().execute(removeJohnSnow,mongo -> {
    MongoDatabase db=mongo.getDatabase(dbA);
    MongoCollection<Document> contacts=db.getCollection(contacts);
    Bson filter=com.mongodb.client.model.Filters.eq(name,Jon Snow);
    FindIterable<Document> results=db.getCollection(contacts).find(filter);
    try (MongoCursor<Document> cursor=results.iterator()){
      final Document document=cursor.tryNext();
      assertThat(document.getString(name)).isEqualTo(Jon Snow);
      assertThat(cursor.tryNext()).isNull();
      jonSnowId.set(document.getObjectId(_id));
      assertThat(jonSnowId.get()).isNotNull();
    }
     contacts.deleteOne(filter);
  }
);
  records=consumeRecordsByTopic(2).allRecordsInOrder();
  final Set<ObjectId> foundIds=new HashSet<>();
  records.forEach(record -> {
    VerifyRecord.isValid(record);
    final Struct key=(Struct)record.key();
    final ObjectId id=toObjectId(key.getString(id));
    foundIds.add(id);
    if (record.value() != null) {
      final Struct value=(Struct)record.value();
      final Operation operation=Operation.forCode(value.getString(Envelope.FieldName.OPERATION));
      assertThat(operation).isEqualTo(Operation.DELETE);
    }
  }
);
  stopConnector();
  initializeConnectorTestFramework();
  start(MongoDbConnector.class,config);
  waitForSnapshotToBeCompleted(mongodb,mongo);
  records=consumeRecordsByTopic(1).allRecordsInOrder();
  foundNames.clear();
  records.forEach(record -> {
    VerifyRecord.isValid(record);
    final Struct value=(Struct)record.value();
    final String after=value.getString(Envelope.FieldName.AFTER);
    final Document document=Document.parse(after);
    foundNames.add(document.getString(name));
    final Operation operation=Operation.forCode(value.getString(Envelope.FieldName.OPERATION));
    assertThat(operation).isEqualTo(Operation.READ);
  }
);
  final Object[] allExpectedNames={Sally Hamm};
  assertThat(foundNames).containsOnly(allExpectedNames);
  waitForStreamingRunning(mongodb,mongo);
  assertNoRecordsToConsume();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",1655
396,"'-tryline","@Test public void shouldNotReplicateSnapshot() throws Exception {
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbA.contacts).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).with(MongoDbConnectorConfig.SNAPSHOT_MODE,MongoDbConnectorConfig.SnapshotMode.NEVER).build();
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbA);
  primary().execute(shouldCreateContactsDatabase,mongo -> {
    MongoDatabase db=mongo.getDatabase(dbA);
    MongoCollection<Document> contacts=db.getCollection(contacts);
    InsertOneOptions options=new InsertOneOptions().bypassDocumentValidation(true);
    contacts.insertOne(new Document().append(name,Jon Snow),options);
    assertThat(db.getCollection(contacts).countDocuments()).isEqualTo(1);
  }
);
  start(MongoDbConnector.class,config);
  waitForStreamingRunning(mongodb,mongo);
  primary().execute(shouldAddMoreRecordsToContacts,mongo -> {
    MongoDatabase db=mongo.getDatabase(dbA);
    MongoCollection<Document> contacts=db.getCollection(contacts);
    InsertOneOptions options=new InsertOneOptions().bypassDocumentValidation(true);
    contacts.insertOne(new Document().append(name,Ygritte),options);
    assertThat(db.getCollection(contacts).countDocuments()).isEqualTo(2);
  }
);
  List<SourceRecord> records=consumeRecordsByTopic(1).allRecordsInOrder();
  final Set<String> foundNames=new HashSet<>();
  records.forEach(record -> {
    VerifyRecord.isValid(record);
    final Struct value=(Struct)record.value();
    final String after=value.getString(Envelope.FieldName.AFTER);
    final Document document=Document.parse(after);
    foundNames.add(document.getString(name));
    final Operation operation=Operation.forCode(value.getString(Envelope.FieldName.OPERATION));
    assertThat(operation).isEqualTo(Operation.CREATE);
  }
);
  assertNoRecordsToConsume();
  assertThat(foundNames).containsOnly(Ygritte);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",1807
397,"'-tryline","@Test @FixFor(DBZ-1880) public void shouldGenerateRecordForUpdateEventUsingLegacyV1SourceInfo() throws Exception {
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).with(CommonConnectorConfig.SOURCE_STRUCT_MAKER_VERSION,v1).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).build();
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbit);
  start(MongoDbConnector.class,config);
  waitForStreamingRunning(mongodb,mongo);
  ObjectId objId=new ObjectId();
  Document obj=new Document(_id,objId).append(name,John);
  insertDocuments(dbit,c1,obj);
  consumeRecordsByTopic(1);
  assertNoRecordsToConsume();
  Document updateObj=new Document().append($set,new Document().append(name,Sally));
  final Instant timestamp=Instant.now();
  final Document filter=Document.parse({\_id\: {\$oid\: \ + objId + \}});
  updateDocuments(dbit,c1,filter,updateObj);
  final SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.allRecordsInOrder().size()).isEqualTo(1);
  assertNoRecordsToConsume();
  final SourceRecord deleteRecord=records.allRecordsInOrder().get(0);
  final Struct key=(Struct)deleteRecord.key();
  final Struct value=(Struct)deleteRecord.value();
  assertThat(key.schema()).isSameAs(deleteRecord.keySchema());
  assertThat(key.get(id)).isEqualTo(formatObjectId(objId));
  Document patchObj=Document.parse(value.getString(MongoDbFieldName.PATCH));
  patchObj.remove($v);
  assertThat(value.schema()).isSameAs(deleteRecord.valueSchema());
  assertThat(value.getString(Envelope.FieldName.AFTER)).isNull();
  assertThat(patchObj.toJson(COMPACT_JSON_SETTINGS)).isEqualTo(updateObj.toJson(COMPACT_JSON_SETTINGS));
  assertThat(value.getString(Envelope.FieldName.OPERATION)).isEqualTo(Operation.UPDATE.code());
  assertThat(value.getInt64(Envelope.FieldName.TIMESTAMP)).isGreaterThanOrEqualTo(timestamp.toEpochMilli());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",1860
398,"'-tryline","@Test public void testLifecycle() throws Exception {
  this.config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.SNAPSHOT_MODE,MongoDbConnectorConfig.SnapshotMode.INITIAL).with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).build();
  this.context=new MongoDbTaskContext(config);
  start(MongoDbConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(mongodb,mongo1);
  waitForStreamingRunning(mongodb,mongo1);
  stopConnector();
  final MBeanServer mBeanServer=ManagementFactory.getPlatformMBeanServer();
  try {
    mBeanServer.getMBeanInfo(getSnapshotMetricsObjectName(mongodb,mongo1));
    fail(Expected Snapshot Metrics no longer to exist);
  }
 catch (  InstanceNotFoundException e) {
  }
  try {
    mBeanServer.getMBeanInfo(getStreamingMetricsObjectName(mongodb,mongo1));
    fail(Expected Streaming Metrics no longer to exist);
  }
 catch (  InstanceNotFoundException e) {
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoMetricsIT.java",24
399,"'-tryline","@Test public void testSnapshotOnlyMetrics() throws Exception {
  this.config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.SNAPSHOT_MODE,MongoDbConnectorConfig.SnapshotMode.INITIAL).with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).build();
  this.context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbit);
  storeDocuments(dbit,restaurants,restaurants1.json);
  start(MongoDbConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(mongodb,mongo1);
  SourceRecords records=consumeRecordsByTopic(6);
  assertThat(records.topics().size()).isEqualTo(1);
  assertThat(records.recordsForTopic(mongo1.dbit.restaurants).size()).isEqualTo(6);
  final MBeanServer mBeanServer=ManagementFactory.getPlatformMBeanServer();
  final ObjectName objectName=getSnapshotMetricsObjectName(mongodb,mongo1);
  assertThat(mBeanServer.getAttribute(objectName,TotalTableCount)).isEqualTo(1);
  assertThat(mBeanServer.getAttribute(objectName,RemainingTableCount)).isEqualTo(0);
  assertThat(mBeanServer.getAttribute(objectName,SnapshotRunning)).isEqualTo(false);
  assertThat(mBeanServer.getAttribute(objectName,SnapshotAborted)).isEqualTo(false);
  assertThat(mBeanServer.getAttribute(objectName,SnapshotCompleted)).isEqualTo(true);
  assertThat(mBeanServer.getAttribute(objectName,TotalNumberOfEventsSeen)).isEqualTo(6L);
  assertThat(mBeanServer.getAttribute(objectName,NumberOfEventsFiltered)).isEqualTo(0L);
  assertThat(mBeanServer.getAttribute(objectName,NumberOfErroneousEvents)).isEqualTo(0L);
  assertThat(mBeanServer.getAttribute(objectName,MonitoredTables)).isEqualTo(new String[]{rs0.dbit.restaurants});
  assertThat(mBeanServer.getAttribute(objectName,LastEvent)).isNotNull();
  assertThat(mBeanServer.getAttribute(objectName,NumberOfDisconnects)).isEqualTo(0L);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoMetricsIT.java",65
400,"'-tryline","@Test public void testStreamingOnlyMetrics() throws Exception {
  this.config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.SNAPSHOT_MODE,MongoDbConnectorConfig.SnapshotMode.NEVER).with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).build();
  this.context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbit);
  start(MongoDbConnector.class,config);
  assertConnectorIsRunning();
  waitForStreamingRunning(mongodb,mongo1);
  storeDocuments(dbit,restaurants,restaurants1.json);
  SourceRecords records=consumeRecordsByTopic(6);
  assertThat(records.topics().size()).isEqualTo(1);
  assertThat(records.recordsForTopic(mongo1.dbit.restaurants).size()).isEqualTo(6);
  final MBeanServer mBeanServer=ManagementFactory.getPlatformMBeanServer();
  final ObjectName objectName=getStreamingMetricsObjectName(mongodb,mongo1);
  assertThat(mBeanServer.getAttribute(objectName,SourceEventPosition)).isNotNull();
  assertThat(mBeanServer.getAttribute(objectName,NumberOfCommittedTransactions)).isEqualTo(6L);
  assertThat(mBeanServer.getAttribute(objectName,LastTransactionId)).isNotNull();
  assertThat(mBeanServer.getAttribute(objectName,Connected)).isEqualTo(true);
  assertThat(mBeanServer.getAttribute(objectName,MonitoredTables)).isEqualTo(new String[]{});
  assertThat(mBeanServer.getAttribute(objectName,LastEvent)).isNotNull();
  assertThat(mBeanServer.getAttribute(objectName,TotalNumberOfEventsSeen)).isEqualTo(6L);
  assertThat(mBeanServer.getAttribute(objectName,NumberOfEventsFiltered)).isEqualTo(0L);
  assertThat(mBeanServer.getAttribute(objectName,NumberOfErroneousEvents)).isEqualTo(0L);
  assertThat((Long)mBeanServer.getAttribute(objectName,MilliSecondsSinceLastEvent)).isGreaterThanOrEqualTo(0);
  assertThat((Long)mBeanServer.getAttribute(objectName,MilliSecondsBehindSource)).isGreaterThanOrEqualTo(0);
  assertThat(mBeanServer.getAttribute(objectName,NumberOfDisconnects)).isEqualTo(0L);
  assertThat(mBeanServer.getAttribute(objectName,NumberOfPrimaryElections)).isEqualTo(0L);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoMetricsIT.java",105
401,"'-tryline","@Test public void transactionMetadata() throws Exception {
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbA.c1).with(MongoDbConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(MongoDbConnectorConfig.PROVIDE_TRANSACTION_METADATA,true).build();
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbA);
  if (!TestHelper.transactionsSupported(primary(),mongo1)) {
    return;
  }
  start(MongoDbConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(mongodb,mongo1);
  List<Document> documentsToInsert=loadTestDocuments(restaurants1.json);
  insertDocumentsInTx(dbA,c1,documentsToInsert.toArray(new Document[0]));
  List<Document> documentsToInsert2=loadTestDocuments(restaurants6.json);
  insertDocuments(dbA,c1,documentsToInsert2.toArray(new Document[0]));
  final SourceRecords records=consumeRecordsByTopic(1 + 6 + 1+ 1+ 1);
  final List<SourceRecord> c1s=records.recordsForTopic(mongo1.dbA.c1);
  final List<SourceRecord> txs=records.recordsForTopic(mongo1.transaction);
  assertThat(c1s).hasSize(7);
  assertThat(txs).hasSize(3);
  final List<SourceRecord> all=records.allRecordsInOrder();
  final String txId1=assertBeginTransaction(all.get(0));
  long counter=1;
  for (int i=1; i <= 6; ++i) {
    assertRecordTransactionMetadata(all.get(i),txId1,counter,counter);
    counter++;
  }
  assertEndTransaction(all.get(7),txId1,6,Collect.hashMapOf(rs0.dbA.c1,6));
  final String txId2=assertBeginTransaction(all.get(8));
  assertRecordTransactionMetadata(all.get(9),txId2,1,1);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\TransactionMetadataIT.java",26
402,"'-tryline","@Test @FixFor(DBZ-1791) public void testAddHeader() throws Exception {
  waitForStreamingRunning();
  final Map<String,String> props=new HashMap<>();
  props.put(ADD_HEADERS,op);
  transformation.configure(props);
  final SourceRecord createRecord=createCreateRecord();
  final SourceRecord transformed=transformation.apply(createRecord);
  assertThat(transformed.headers()).hasSize(1);
  assertThat(getSourceRecordHeaderByKey(transformed,__op)).isEqualTo(Operation.CREATE.code());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",1248
403,"'-tryline","@Test @FixFor(DBZ-1791) public void testAddHeadersForMissingOrInvalidFields() throws Exception {
  waitForStreamingRunning();
  final Map<String,String> props=new HashMap<>();
  props.put(ADD_HEADERS,op,id);
  transformation.configure(props);
  final SourceRecord createRecord=createCreateRecord();
  final SourceRecord transformed=transformation.apply(createRecord);
  assertThat(transformed.headers()).hasSize(2);
  assertThat(getSourceRecordHeaderByKey(transformed,__op)).isEqualTo(Operation.CREATE.code());
  assertThat(getSourceRecordHeaderByKey(transformed,__id)).isNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",1263
404,"'-tryline","@Test @FixFor({DBZ-1791,DBZ-2504}) public void testAddHeadersSpecifyingStruct() throws Exception {
  waitForStreamingRunning();
  final Map<String,String> props=new HashMap<>();
  props.put(ADD_HEADERS,op,source.rs,source.collection);
  props.put(ADD_HEADERS_PREFIX,prefix.);
  transformation.configure(props);
  final SourceRecord createRecord=createCreateRecord();
  final SourceRecord transformed=transformation.apply(createRecord);
  assertThat(transformed.headers()).hasSize(3);
  assertThat(getSourceRecordHeaderByKey(transformed,prefix.op)).isEqualTo(Operation.CREATE.code());
  assertThat(getSourceRecordHeaderByKey(transformed,prefix.source_rs)).isEqualTo(rs0);
  assertThat(getSourceRecordHeaderByKey(transformed,prefix.source_collection)).isEqualTo(getCollectionName());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",1279
405,"'-tryline","@Test @FixFor(DBZ-1791) public void testAddField() throws Exception {
  waitForStreamingRunning();
  final Map<String,String> props=new HashMap<>();
  props.put(ADD_FIELDS,op);
  transformation.configure(props);
  final SourceRecord createRecord=createCreateRecord();
  final SourceRecord transformed=transformation.apply(createRecord);
  assertThat(((Struct)transformed.value()).get(__op)).isEqualTo(Operation.CREATE.code());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",1297
406,"'-tryline","@Test @FixFor({DBZ-1791,DBZ-2504}) public void testAddFields() throws Exception {
  waitForStreamingRunning();
  final Map<String,String> props=new HashMap<>();
  props.put(ADD_FIELDS,op , ts_ms);
  props.put(ADD_FIELDS_PREFIX,prefix.);
  transformation.configure(props);
  final SourceRecord createRecord=createCreateRecord();
  final SourceRecord transformed=transformation.apply(createRecord);
  assertThat(((Struct)transformed.value()).get(prefix.op)).isEqualTo(Operation.CREATE.code());
  assertThat(((Struct)transformed.value()).get(prefix.ts_ms)).isNotNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",1311
407,"'-tryline","@Test @FixFor(DBZ-1791) public void testAddFieldsForMissingOptionalField() throws Exception {
  waitForStreamingRunning();
  final Map<String,String> props=new HashMap<>();
  props.put(ADD_FIELDS,op,id);
  transformation.configure(props);
  final SourceRecord createRecord=createCreateRecord();
  final SourceRecord transformed=transformation.apply(createRecord);
  assertThat(((Struct)transformed.value()).get(__op)).isEqualTo(Operation.CREATE.code());
  assertThat(((Struct)transformed.value()).get(__id)).isNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",1327
408,"'-tryline","@Test @FixFor(DBZ-1791) public void testAddFieldsSpecifyStruct() throws Exception {
  waitForStreamingRunning();
  final Map<String,String> props=new HashMap<>();
  props.put(ADD_FIELDS,op,source.rs,source.collection);
  transformation.configure(props);
  final SourceRecord createRecord=createCreateRecord();
  final SourceRecord transformed=transformation.apply(createRecord);
  assertThat(((Struct)transformed.value()).get(__op)).isEqualTo(Operation.CREATE.code());
  assertThat(((Struct)transformed.value()).get(__source_rs)).isEqualTo(rs0);
  assertThat(((Struct)transformed.value()).get(__source_collection)).isEqualTo(getCollectionName());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",1342
409,"'-tryline","@Test @FixFor(DBZ-1791) public void testAddFieldHandleDeleteRewrite() throws Exception {
  waitForStreamingRunning();
  final Map<String,String> props=new HashMap<>();
  props.put(HANDLE_DELETES,rewrite);
  props.put(ADD_FIELDS,op);
  transformation.configure(props);
  final SourceRecord deleteRecord=createDeleteRecordWithTombstone().allRecordsInOrder().get(0);
  final SourceRecord transformed=transformation.apply(deleteRecord);
  assertThat(((Struct)transformed.value()).get(__deleted)).isEqualTo(true);
  assertThat(((Struct)transformed.value()).get(__op)).isEqualTo(Operation.DELETE.code());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",1358
410,"'-tryline","@Test @FixFor(DBZ-1791) public void tesAddFieldsHandleDeleteRewrite() throws Exception {
  waitForStreamingRunning();
  final Map<String,String> props=new HashMap<>();
  props.put(HANDLE_DELETES,rewrite);
  props.put(ADD_FIELDS,op,ts_ms);
  transformation.configure(props);
  final SourceRecord deleteRecord=createDeleteRecordWithTombstone().allRecordsInOrder().get(0);
  final SourceRecord transformed=transformation.apply(deleteRecord);
  assertThat(((Struct)transformed.value()).get(__deleted)).isEqualTo(true);
  assertThat(((Struct)transformed.value()).get(__op)).isEqualTo(Operation.DELETE.code());
  assertThat(((Struct)transformed.value()).get(__ts_ms)).isNotNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",1374
411,"'-tryline","@Test @FixFor(DBZ-1791) public void testAddFieldsSpecifyStructHandleDeleteRewrite() throws Exception {
  waitForStreamingRunning();
  final Map<String,String> props=new HashMap<>();
  props.put(HANDLE_DELETES,rewrite);
  props.put(ADD_FIELDS,op,source.rs,source.collection);
  transformation.configure(props);
  final SourceRecord deleteRecord=createDeleteRecordWithTombstone().allRecordsInOrder().get(0);
  final SourceRecord transformed=transformation.apply(deleteRecord);
  assertThat(((Struct)transformed.value()).get(__deleted)).isEqualTo(true);
  assertThat(((Struct)transformed.value()).get(__op)).isEqualTo(Operation.DELETE.code());
  assertThat(((Struct)transformed.value()).get(__source_rs)).isEqualTo(rs0);
  assertThat(((Struct)transformed.value()).get(__source_collection)).isEqualTo(getCollectionName());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",1391
412,"'-tryline","@Test @FixFor(DBZ-1791) public void testAddFieldsHandleDeleteRewriteAndTombstone() throws Exception {
  waitForStreamingRunning();
  final Map<String,String> props=new HashMap<>();
  props.put(HANDLE_DELETES,rewrite);
  props.put(ADD_FIELDS,op,ts_ms);
  props.put(DROP_TOMBSTONE,false);
  transformation.configure(props);
  final SourceRecords records=createDeleteRecordWithTombstone();
  final SourceRecord deleteRecord=records.allRecordsInOrder().get(0);
  final SourceRecord deleteTransformed=transformation.apply(deleteRecord);
  assertThat(((Struct)deleteTransformed.value()).get(__deleted)).isEqualTo(true);
  assertThat(((Struct)deleteTransformed.value()).get(__op)).isEqualTo(Operation.DELETE.code());
  assertThat(((Struct)deleteTransformed.value()).get(__ts_ms)).isNotNull();
  final SourceRecord tombstoneRecord=records.allRecordsInOrder().get(1);
  final SourceRecord tombstoneTransformed=transformation.apply(tombstoneRecord);
  assertThat(tombstoneTransformed.value()).isNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",1409
413,"'-tryline","@Test @FixFor(DBZ-2455) public void testAddPatchFieldAfterUpdate() throws Exception {
  waitForStreamingRunning();
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(a,1).append(b,2).append(c,3);
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(obj);
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  Document updateObj=new Document().append($set,new Document(Collect.hashMapOf(a,22)));
  primary().execute(update,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).updateOne(RawBsonDocument.parse({ '_id' : { '$oid' : ' + objId + '}}),updateObj);
  }
);
  records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  final Map<String,String> props=new HashMap<>();
  props.put(ADD_FIELDS,MongoDbFieldName.PATCH);
  transformation.configure(props);
  final SourceRecord transformed=transformation.apply(records.allRecordsInOrder().get(0));
  Struct key=(Struct)transformed.key();
  Struct value=(Struct)transformed.value();
  assertThat(key.schema()).isSameAs(transformed.keySchema());
  assertThat(key.schema().field(id).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(key.get(id)).isEqualTo(objId.toString());
  assertThat(value.schema()).isSameAs(transformed.valueSchema());
  assertThat(value.get(id)).isEqualTo(objId.toString());
  assertThat(value.get(a)).isEqualTo(22);
  String valueJson=TestHelper.getDocumentWithoutLanguageVersion(value.getString(__patch)).toJson();
  assertThat(valueJson).isEqualTo({\$set\: {\a\: 22}});
  assertThat(value.schema().field(id).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(value.schema().field(a).schema()).isEqualTo(SchemaBuilder.OPTIONAL_INT32_SCHEMA);
  assertThat(value.schema().field(__patch).schema()).isEqualTo(io.debezium.data.Json.builder().optional().build());
  assertThat(value.schema().fields()).hasSize(3);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",1456
414,"'-tryline","@Test(expected=DataException.class) @FixFor(DBZ-2316) public void testShouldThrowExceptionWithElementsDifferingStructures() throws Exception {
  waitForStreamingRunning();
  final Map<String,String> props=new HashMap<>();
  props.put(ARRAY_ENCODING,array);
  props.put(ADD_FIELDS,op,source.ts_ms);
  transformation.configure(props);
  final SourceRecords records=createCreateRecordFromJson(dbz-2316.json);
  for (  SourceRecord record : records.allRecordsInOrder()) {
    transformation.apply(record);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",1518
415,"'-tryline","private SourceRecords createCreateRecordFromJson(String pathOnClasspath) throws Exception {
  final List<Document> documents=loadTestDocuments(pathOnClasspath);
  primary().execute(Load JSON,client -> {
    for (    Document document : documents) {
      client.getDatabase(DB_NAME).getCollection(getCollectionName()).insertOne(document);
    }
  }
);
  final SourceRecords records=consumeRecordsByTopic(documents.size());
  assertThat(records.recordsForTopic(topicName()).size()).isEqualTo(documents.size());
  assertNoRecordsToConsume();
  return records;
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",1696
416,"'-tryline","private SourceRecord createCreateRecord() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(address,new Document().append(struct,Morris Park Ave).append(zipcode,10462));
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(getCollectionName()).insertOne(obj);
  }
);
  final SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  return records.allRecordsInOrder().get(0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",1727
417,"'-tryline","private SourceRecords createDeleteRecordWithTombstone() throws Exception {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(address,new Document().append(struct,Morris Park Ave).append(zipcode,10462));
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(getCollectionName()).insertOne(obj);
  }
);
  final SourceRecords createRecords=consumeRecordsByTopic(1);
  assertThat(createRecords.recordsForTopic(topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  primary().execute(delete,client -> {
    Document filter=Document.parse({\_id\: {\$oid\: \ + objId + \}});
    client.getDatabase(DB_NAME).getCollection(getCollectionName()).deleteOne(filter);
  }
);
  final SourceRecords deleteRecords=consumeRecordsByTopic(2);
  assertThat(deleteRecords.recordsForTopic(topicName()).size()).isEqualTo(2);
  assertNoRecordsToConsume();
  return deleteRecords;
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",1747
418,"'-tryline","@Before public void setup() throws Exception {
  builder=SchemaBuilder.struct().name(array);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\MongoArrayConverterTest.java",79
419,"'-tryline","@Test(expected=ConnectException.class) public void shouldDetectHeterogenousArray() throws Exception {
  final MongoDataConverter converter=new MongoDataConverter(ArrayEncoding.ARRAY);
  final BsonDocument val=BsonDocument.parse(HETEROGENOUS_ARRAY);
  for (  Entry<String,BsonValue> entry : val.entrySet()) {
    converter.addFieldSchema(entry,builder);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\MongoArrayConverterTest.java",84
420,"'-tryline","@Test(expected=ConnectException.class) public void shouldDetectHeterogenousDocumentInArray() throws Exception {
  final MongoDataConverter converter=new MongoDataConverter(ArrayEncoding.ARRAY);
  final BsonDocument val=BsonDocument.parse(HETEROGENOUS_DOCUMENT_IN_ARRAY);
  for (  Entry<String,BsonValue> entry : val.entrySet()) {
    converter.addFieldSchema(entry,builder);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\MongoArrayConverterTest.java",93
421,"'-tryline","@Test public void shouldCreateSchemaForHomogenousArray() throws Exception {
  final MongoDataConverter converter=new MongoDataConverter(ArrayEncoding.ARRAY);
  final BsonDocument val=BsonDocument.parse(HOMOGENOUS_ARRAYS);
  for (  Entry<String,BsonValue> entry : val.entrySet()) {
    converter.addFieldSchema(entry,builder);
  }
  final Schema finalSchema=builder.build();
  assertThat(finalSchema).isEqualTo(SchemaBuilder.struct().name(array).field(_id,Schema.OPTIONAL_INT32_SCHEMA).field(a1,SchemaBuilder.array(SchemaBuilder.struct().name(array.a1).optional().field(a,Schema.OPTIONAL_INT32_SCHEMA).field(b,Schema.OPTIONAL_STRING_SCHEMA).build()).optional().build()).field(a2,SchemaBuilder.array(Schema.OPTIONAL_STRING_SCHEMA).optional().build()).field(empty,SchemaBuilder.array(Schema.OPTIONAL_STRING_SCHEMA).optional().build()).build());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\MongoArrayConverterTest.java",102
422,"'-tryline","@Test public void shouldCreateStructForHomogenousArray() throws Exception {
  final MongoDataConverter converter=new MongoDataConverter(ArrayEncoding.ARRAY);
  final BsonDocument val=BsonDocument.parse(HOMOGENOUS_ARRAYS);
  final SchemaBuilder builder=SchemaBuilder.struct().name(array);
  for (  Entry<String,BsonValue> entry : val.entrySet()) {
    converter.addFieldSchema(entry,builder);
  }
  final Schema finalSchema=builder.build();
  final Struct struct=new Struct(finalSchema);
  for (  Entry<String,BsonValue> entry : val.entrySet()) {
    converter.convertRecord(entry,finalSchema,struct);
  }
  assertThat(struct.toString()).isEqualTo(Struct{ + _id=1, + a1=[+ Struct{a=1}, + Struct{b=c}+ ],+ a2=[11, abc],+ empty=[]});
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\MongoArrayConverterTest.java",124
423,"'-tryline","@Test public void shouldCreateSchemaForEmptyArrayEncodingArray() throws Exception {
  final BsonDocument val=BsonDocument.parse(EMPTY_ARRAY);
  final MongoDataConverter arrayConverter=new MongoDataConverter(ArrayEncoding.ARRAY);
  for (  Entry<String,BsonValue> entry : val.entrySet()) {
    arrayConverter.addFieldSchema(entry,builder);
  }
  final Schema arraySchema=builder.build();
  assertThat(arraySchema).isEqualTo(SchemaBuilder.struct().name(array).field(_id,Schema.OPTIONAL_INT32_SCHEMA).field(f,SchemaBuilder.array(Schema.OPTIONAL_STRING_SCHEMA).optional().build()).build());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\MongoArrayConverterTest.java",154
424,"'-tryline","@Test public void shouldCreateStructForEmptyArrayEncodingArray() throws Exception {
  final BsonDocument val=BsonDocument.parse(EMPTY_ARRAY);
  final MongoDataConverter arrayConverter=new MongoDataConverter(ArrayEncoding.ARRAY);
  for (  Entry<String,BsonValue> entry : val.entrySet()) {
    arrayConverter.addFieldSchema(entry,builder);
  }
  final Schema arraySchema=builder.build();
  final Struct struct=new Struct(arraySchema);
  for (  Entry<String,BsonValue> entry : val.entrySet()) {
    arrayConverter.convertRecord(entry,arraySchema,struct);
  }
  assertThat(struct.toString()).isEqualTo(Struct{ + _id=1, + f=[]+ });
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\MongoArrayConverterTest.java",172
425,"'-tryline","@Test public void shouldCreateSchemaForEmptyArrayEncodingDocument() throws Exception {
  final BsonDocument val=BsonDocument.parse(EMPTY_ARRAY);
  final MongoDataConverter documentConverter=new MongoDataConverter(ArrayEncoding.DOCUMENT);
  for (  Entry<String,BsonValue> entry : val.entrySet()) {
    documentConverter.addFieldSchema(entry,builder);
  }
  final Schema documentSchema=builder.build();
  assertThat(documentSchema).isEqualTo(SchemaBuilder.struct().name(array).field(_id,Schema.OPTIONAL_INT32_SCHEMA).field(f,SchemaBuilder.struct().name(array.f).optional().build()).build());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\MongoArrayConverterTest.java",197
426,"'-tryline","@Test public void shouldCreateStructForEmptyArrayEncodingDocument() throws Exception {
  final BsonDocument val=BsonDocument.parse(EMPTY_ARRAY);
  final MongoDataConverter documentConverter=new MongoDataConverter(ArrayEncoding.DOCUMENT);
  for (  Entry<String,BsonValue> entry : val.entrySet()) {
    documentConverter.addFieldSchema(entry,builder);
  }
  final Schema documentSchema=builder.build();
  final Struct struct=new Struct(documentSchema);
  for (  Entry<String,BsonValue> entry : val.entrySet()) {
    documentConverter.convertRecord(entry,documentSchema,struct);
  }
  assertThat(struct.toString()).isEqualTo(Struct{ + _id=1, + f=Struct{}});
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\MongoArrayConverterTest.java",215
427,"'-tryline","@Test public void shouldCreateSchemaForHeterogenousArray() throws Exception {
  final MongoDataConverter converter=new MongoDataConverter(ArrayEncoding.DOCUMENT);
  final BsonDocument val=BsonDocument.parse(HETEROGENOUS_ARRAY);
  for (  Entry<String,BsonValue> entry : val.entrySet()) {
    converter.addFieldSchema(entry,builder);
  }
  final Schema finalSchema=builder.build();
  assertThat(finalSchema).isEqualTo(SchemaBuilder.struct().name(array).field(_id,Schema.OPTIONAL_INT32_SCHEMA).field(a2,SchemaBuilder.struct().name(array.a2).optional().field(_0,Schema.OPTIONAL_INT32_SCHEMA).field(_1,Schema.OPTIONAL_STRING_SCHEMA).build()).build());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\MongoArrayConverterTest.java",237
428,"'-tryline","@Test public void shouldCreateStructForHeterogenousArray() throws Exception {
  final MongoDataConverter converter=new MongoDataConverter(ArrayEncoding.DOCUMENT);
  final BsonDocument val=BsonDocument.parse(HETEROGENOUS_ARRAY);
  for (  Entry<String,BsonValue> entry : val.entrySet()) {
    converter.addFieldSchema(entry,builder);
  }
  final Schema finalSchema=builder.build();
  final Struct struct=new Struct(finalSchema);
  for (  Entry<String,BsonValue> entry : val.entrySet()) {
    converter.convertRecord(entry,finalSchema,struct);
  }
  assertThat(struct.toString()).isEqualTo(Struct{ + _id=1, + a2=Struct{_0=11,_1=abc}});
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\MongoArrayConverterTest.java",257
429,"'-tryline","@Test public void shouldCreateSchemaForHeterogenousDocumentInArray() throws Exception {
  final MongoDataConverter converter=new MongoDataConverter(ArrayEncoding.DOCUMENT);
  final BsonDocument val=BsonDocument.parse(HETEROGENOUS_DOCUMENT_IN_ARRAY);
  for (  Entry<String,BsonValue> entry : val.entrySet()) {
    converter.addFieldSchema(entry,builder);
  }
  final Schema finalSchema=builder.build();
  assertThat(finalSchema).isEqualTo(SchemaBuilder.struct().name(array).field(_id,Schema.OPTIONAL_INT32_SCHEMA).field(a1,SchemaBuilder.struct().name(array.a1).optional().field(_0,SchemaBuilder.struct().name(array.a1._0).optional().field(a,Schema.OPTIONAL_INT32_SCHEMA).build()).field(_1,SchemaBuilder.struct().name(array.a1._1).optional().field(a,Schema.OPTIONAL_STRING_SCHEMA).build()).build()).build());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\MongoArrayConverterTest.java",278
430,"'-tryline","@Test public void shouldCreateStructForHeterogenousDocumentInArray() throws Exception {
  final MongoDataConverter converter=new MongoDataConverter(ArrayEncoding.DOCUMENT);
  final BsonDocument val=BsonDocument.parse(HETEROGENOUS_DOCUMENT_IN_ARRAY);
  for (  Entry<String,BsonValue> entry : val.entrySet()) {
    converter.addFieldSchema(entry,builder);
  }
  final Schema finalSchema=builder.build();
  final Struct struct=new Struct(finalSchema);
  for (  Entry<String,BsonValue> entry : val.entrySet()) {
    converter.convertRecord(entry,finalSchema,struct);
  }
  assertThat(struct.toString()).isEqualTo(Struct{ + _id=1, + a1=Struct{+ _0=Struct{a=1},+ _1=Struct{a=c}+ }+ });
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\MongoArrayConverterTest.java",302
431,"'-tryline","@Before public void setup() throws Exception {
  record=getFile(restaurants5.json);
  val=BsonDocument.parse(record);
  builder=SchemaBuilder.struct().name(pub);
  converter=new MongoDataConverter(ArrayEncoding.ARRAY);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\MongoDataConverterTest.java",43
432,"'-tryline","@Before public void setup() throws Exception {
  record=getFile(complex_objects.json);
  val=BsonDocument.parse(record);
  builder=SchemaBuilder.struct().name(complex);
  avroData=new AvroData(100);
  converter=new MongoDataConverter(ArrayEncoding.ARRAY);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ToAvroMongoDataConverterTest.java",44
433,"'-tryline","@Override protected SnapshotContext prepare(ChangeEventSourceContext context) throws Exception {
  return new MySqlSnapshotContext();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlSnapshotChangeEventSource.java",109
434,"'-tryline","@Override protected void connectionCreated(RelationalSnapshotContext snapshotContext) throws Exception {
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlSnapshotChangeEventSource.java",114
435,"'-tryline","@Override protected Set<TableId> getAllTableIds(RelationalSnapshotContext ctx) throws Exception {
  LOGGER.info(Read list of available databases);
  final List<String> databaseNames=new ArrayList<>();
  connection.query(SHOW DATABASES,rs -> {
    while (rs.next()) {
      databaseNames.add(rs.getString(1));
    }
  }
);
  LOGGER.info(\t list of available databases is: {},databaseNames);
  LOGGER.info(Read list of available tables in each database);
  final Set<TableId> tableIds=new HashSet<>();
  final Set<String> readableDatabaseNames=new HashSet<>();
  for (  String dbName : databaseNames) {
    try {
      connection.query(SHOW FULL TABLES IN  + quote(dbName) +  where Table_Type = 'BASE TABLE',rs -> {
        while (rs.next()) {
          TableId id=new TableId(dbName,null,rs.getString(1));
          tableIds.add(id);
        }
      }
);
      readableDatabaseNames.add(dbName);
    }
 catch (    SQLException e) {
      LOGGER.warn(\t skipping database '{}' due to error reading tables: {},dbName,e.getMessage());
    }
  }
  final Set<String> includedDatabaseNames=readableDatabaseNames.stream().filter(filters.databaseFilter()).collect(Collectors.toSet());
  LOGGER.info(\tsnapshot continuing with database(s): {},includedDatabaseNames);
  return tableIds;
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlSnapshotChangeEventSource.java",118
436,"'-tryline","@Override protected void releaseDataSnapshotLocks(RelationalSnapshotContext snapshotContext) throws Exception {
  if (isGloballyLocked()) {
    globalUnlock();
  }
  if (isTablesLocked()) {
    tableUnlock();
    if (!delayedSchemaSnapshotTables.isEmpty()) {
      schemaEvents.clear();
      createSchemaEventsForTables(snapshotContext,delayedSchemaSnapshotTables,false);
      for (Iterator<SchemaChangeEvent> i=schemaEvents.iterator(); i.hasNext(); ) {
        final SchemaChangeEvent event=i.next();
        if (databaseSchema.storeOnlyMonitoredTables() && event.getDatabase() != null && event.getDatabase().length() != 0 && !connectorConfig.getTableFilters().databaseFilter().test(event.getDatabase())) {
          LOGGER.debug(Skipping schema event as it belongs to a non-captured database: '{}',event);
          continue;
        }
        LOGGER.debug(Processing schema event {},event);
        final TableId tableId=event.getTables().isEmpty() ? null : event.getTables().iterator().next().id();
        snapshotContext.offset.event(tableId,getClock().currentTime());
        if (!i.hasNext()) {
          super.lastSnapshotRecord(snapshotContext);
        }
        dispatcher.dispatchSchemaChangeEvent(tableId,(receiver) -> receiver.schemaChangeEvent(event));
      }
      databaseSchema.tableIds().forEach(x -> snapshotContext.tables.overwriteTable(databaseSchema.tableFor(x)));
    }
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlSnapshotChangeEventSource.java",224
437,"'-tryline","@Override protected void determineSnapshotOffset(RelationalSnapshotContext ctx) throws Exception {
  if (!isGloballyLocked() && !isTablesLocked() && connectorConfig.getSnapshotLockingMode().usesLocking()) {
    return;
  }
  if (previousOffset != null) {
    ctx.offset=previousOffset;
    tryStartingSnapshot(ctx);
    return;
  }
  final MySqlOffsetContext offsetContext=MySqlOffsetContext.initial(connectorConfig);
  ctx.offset=offsetContext;
  LOGGER.info(Read binlog position of MySQL primary server);
  final String showMasterStmt=SHOW MASTER STATUS;
  connection.query(showMasterStmt,rs -> {
    if (rs.next()) {
      final String binlogFilename=rs.getString(1);
      final long binlogPosition=rs.getLong(2);
      offsetContext.setBinlogStartPoint(binlogFilename,binlogPosition);
      if (rs.getMetaData().getColumnCount() > 4) {
        final String gtidSet=rs.getString(5);
        offsetContext.setCompletedGtidSet(gtidSet);
        LOGGER.info(\t using binlog '{}' at position '{}' and gtid '{}',binlogFilename,binlogPosition,gtidSet);
      }
 else {
        LOGGER.info(\t using binlog '{}' at position '{}',binlogFilename,binlogPosition);
      }
    }
 else {
      throw new DebeziumException(Cannot read the binlog filename and position via ' + showMasterStmt + '. Make sure your server is correctly configured);
    }
  }
);
  tryStartingSnapshot(ctx);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlSnapshotChangeEventSource.java",262
438,"'-tryline","@Override protected void readTableStructure(ChangeEventSourceContext sourceContext,RelationalSnapshotContext snapshotContext) throws Exception {
  Set<TableId> capturedSchemaTables;
  if (twoPhaseSchemaSnapshot()) {
    tableLock(snapshotContext);
    determineSnapshotOffset(snapshotContext);
    capturedSchemaTables=snapshotContext.capturedTables;
    LOGGER.info(Table level locking is in place, the schema will be capture in two phases, now capturing: {},capturedSchemaTables);
    delayedSchemaSnapshotTables=Collect.minus(snapshotContext.capturedSchemaTables,snapshotContext.capturedTables);
    LOGGER.info(Tables for delayed schema capture: {},delayedSchemaSnapshotTables);
  }
  if (databaseSchema.storeOnlyMonitoredTables()) {
    capturedSchemaTables=snapshotContext.capturedTables;
    LOGGER.info(Only monitored tables schema should be captured, capturing: {},capturedSchemaTables);
  }
 else {
    capturedSchemaTables=snapshotContext.capturedSchemaTables;
    LOGGER.info(All eligible tables schema should be captured, capturing: {},capturedSchemaTables);
  }
  final Map<String,List<TableId>> tablesToRead=capturedSchemaTables.stream().collect(Collectors.groupingBy(TableId::catalog,LinkedHashMap::new,Collectors.toList()));
  final Set<String> databases=tablesToRead.keySet();
  addSchemaEvent(snapshotContext,,connection.setStatementFor(connection.readMySqlCharsetSystemVariables()));
  for (  TableId tableId : capturedSchemaTables) {
    if (!sourceContext.isRunning()) {
      throw new InterruptedException(Interrupted while emitting initial DROP TABLE events);
    }
    addSchemaEvent(snapshotContext,tableId.catalog(),DROP TABLE IF EXISTS  + quote(tableId));
  }
  final Map<String,DatabaseLocales> databaseCharsets=connection.readDatabaseCollations();
  for (  String database : databases) {
    if (!sourceContext.isRunning()) {
      throw new InterruptedException(Interrupted while reading structure of schema  + databases);
    }
    LOGGER.info(Reading structure of database '{}',database);
    addSchemaEvent(snapshotContext,database,DROP DATABASE IF EXISTS  + quote(database));
    final StringBuilder createDatabaseDddl=new StringBuilder(CREATE DATABASE  + quote(database));
    final DatabaseLocales defaultDatabaseLocales=databaseCharsets.get(database);
    if (defaultDatabaseLocales != null) {
      defaultDatabaseLocales.appendToDdlStatement(database,createDatabaseDddl);
    }
    addSchemaEvent(snapshotContext,database,createDatabaseDddl.toString());
    addSchemaEvent(snapshotContext,database,USE  + quote(database));
    createSchemaEventsForTables(snapshotContext,tablesToRead.get(database),true);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlSnapshotChangeEventSource.java",305
439,"'-tryline","@Override protected void createSchemaChangeEventsForTables(ChangeEventSourceContext sourceContext,RelationalSnapshotContext snapshotContext,SnapshottingTask snapshottingTask) throws Exception {
  tryStartingSnapshot(snapshotContext);
  for (Iterator<SchemaChangeEvent> i=schemaEvents.iterator(); i.hasNext(); ) {
    final SchemaChangeEvent event=i.next();
    if (!sourceContext.isRunning()) {
      throw new InterruptedException(Interrupted while processing event  + event);
    }
    if (databaseSchema.storeOnlyMonitoredTables() && event.getDatabase() != null && event.getDatabase().length() != 0 && !connectorConfig.getTableFilters().databaseFilter().test(event.getDatabase())) {
      LOGGER.debug(Skipping schema event as it belongs to a non-captured database: '{}',event);
      continue;
    }
    LOGGER.debug(Processing schema event {},event);
    final TableId tableId=event.getTables().isEmpty() ? null : event.getTables().iterator().next().id();
    snapshotContext.offset.event(tableId,getClock().currentTime());
    if (!snapshottingTask.snapshotData() && !i.hasNext()) {
      lastSnapshotRecord(snapshotContext);
    }
    dispatcher.dispatchSchemaChangeEvent(tableId,(receiver) -> receiver.schemaChangeEvent(event));
  }
  databaseSchema.tableIds().forEach(x -> snapshotContext.tables.overwriteTable(databaseSchema.tableFor(x)));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlSnapshotChangeEventSource.java",612
440,"'-tryline","/** 
 * Read the system variables and master status using the given connector configuration. This can be used when creating {@link io.debezium.embedded.ConnectorOutputTest.TestSpecification} instances{@link io.debezium.embedded.ConnectorOutputTest.TestSpecification#withVariables(VariableSupplier) with variables}. <p> When connected to a replica, the GTID source for the master is added to the variables using the @{code master_uuid} variable, which does not correspond to a real MySQL system variable. The GTID source of the server to which the test case connects is given by the  {@code server_uuid} system variable.
 * @param config the connector configuration; never null
 * @return the available system variables
 * @throws Exception if there is a problem connecting to the database and reading the system variables
 */
protected Map<String,String> readSystemVariables(Configuration config) throws Exception {
  Map<String,String> variables=new HashMap<>();
  try (MySqlJdbcContext context=new MySqlJdbcContext(new MySqlConnectorConfig(config))){
    variables.putAll(context.readMySqlSystemVariables());
    String serverUuid=variables.get(server_uuid);
    if (serverUuid != null && !serverUuid.trim().isEmpty()) {
      String availableServerGtidStr=context.knownGtidSet();
      if (availableServerGtidStr != null && !availableServerGtidStr.trim().isEmpty()) {
        GtidSet gtidSet=new GtidSet(availableServerGtidStr);
        Collection<String> uuids=gtidSet.getUUIDSets().stream().map(UUIDSet::getUUID).collect(Collectors.toSet());
        uuids.remove(serverUuid);
        if (uuids.size() == 1) {
          String masterUuid=uuids.iterator().next();
          variables.put(master_uuid,masterUuid);
        }
 else         if (uuids.isEmpty()) {
        }
 else {
          logger.warn(More than 2 GTID sources were found, so unable to determine master UUID: {},gtidSet);
        }
      }
    }
  }
   return variables;
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\AbstractMySqlConnectorOutputTest.java",119
441,"'-tryline","@Test public void shouldCreateSnapshotOfSingleDatabase() throws Exception {
  config=simpleConfig().build();
  Filters filters=new Filters.Builder(config).build();
  context=new MySqlTaskContext(config,filters);
  context.start();
  context.source().setBinlogStartPoint(,0L);
  context.initializeHistory();
  reader=new BinlogReader(binlog,context,new AcceptAllPredicate());
  reader.start();
  int expected=9 + 9 + 4+ 5+ 1;
  int consumed=consumeAtLeast(expected);
  assertThat(consumed).isGreaterThanOrEqualTo(expected);
  store.sourceRecords().forEach(System.out::println);
  assertThat(schemaChanges.recordCount()).isEqualTo(0);
  assertThat(store.collectionCount()).isEqualTo(5);
  Collection products=store.collection(DATABASE.getDatabaseName(),productsTableName());
  assertThat(products.numberOfCreates()).isEqualTo(9);
  assertThat(products.numberOfUpdates()).isEqualTo(0);
  assertThat(products.numberOfDeletes()).isEqualTo(0);
  assertThat(products.numberOfReads()).isEqualTo(0);
  assertThat(products.numberOfTombstones()).isEqualTo(0);
  assertThat(products.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(products.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection products_on_hand=store.collection(DATABASE.getDatabaseName(),products_on_hand);
  assertThat(products_on_hand.numberOfCreates()).isEqualTo(9);
  assertThat(products_on_hand.numberOfUpdates()).isEqualTo(0);
  assertThat(products_on_hand.numberOfDeletes()).isEqualTo(0);
  assertThat(products_on_hand.numberOfReads()).isEqualTo(0);
  assertThat(products_on_hand.numberOfTombstones()).isEqualTo(0);
  assertThat(products_on_hand.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(products_on_hand.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection customers=store.collection(DATABASE.getDatabaseName(),customers);
  assertThat(customers.numberOfCreates()).isEqualTo(4);
  assertThat(customers.numberOfUpdates()).isEqualTo(0);
  assertThat(customers.numberOfDeletes()).isEqualTo(0);
  assertThat(customers.numberOfReads()).isEqualTo(0);
  assertThat(customers.numberOfTombstones()).isEqualTo(0);
  assertThat(customers.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(customers.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection orders=store.collection(DATABASE.getDatabaseName(),orders);
  assertThat(orders.numberOfCreates()).isEqualTo(5);
  assertThat(orders.numberOfUpdates()).isEqualTo(0);
  assertThat(orders.numberOfDeletes()).isEqualTo(0);
  assertThat(orders.numberOfReads()).isEqualTo(0);
  assertThat(orders.numberOfTombstones()).isEqualTo(0);
  assertThat(orders.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(orders.numberOfValueSchemaChanges()).isEqualTo(1);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\BinlogReaderIT.java",149
442,"'-tryline","@Test public void shouldCreateSnapshotOfSingleDatabaseWithSchemaChanges() throws Exception {
  config=simpleConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).build();
  Filters filters=new Filters.Builder(config).build();
  context=new MySqlTaskContext(config,filters);
  context.start();
  context.source().setBinlogStartPoint(,0L);
  context.initializeHistory();
  reader=new BinlogReader(binlog,context,new AcceptAllPredicate());
  reader.start();
  int expectedSchemaChangeCount=5 + 2;
  int expected=(9 + 9 + 4+ 5+ 1) + expectedSchemaChangeCount;
  int consumed=consumeAtLeast(expected);
  assertThat(consumed).isGreaterThanOrEqualTo(expected);
  assertThat(schemaChanges.recordCount()).isEqualTo(expectedSchemaChangeCount);
  final List<String> expectedAffectedTables=Arrays.asList(null,Products,Products,products_on_hand,customers,orders,dbz_342_timetest);
  final List<String> affectedTables=new ArrayList<>();
  schemaChanges.forEach(record -> {
    affectedTables.add(((Struct)record.value()).getStruct(source).getString(table));
    assertThat(((Struct)record.value()).getStruct(source).get(db)).isEqualTo(DATABASE.getDatabaseName());
  }
);
  assertThat(affectedTables).isEqualTo(expectedAffectedTables);
  assertThat(store.collectionCount()).isEqualTo(5);
  Collection products=store.collection(DATABASE.getDatabaseName(),productsTableName());
  assertThat(products.numberOfCreates()).isEqualTo(9);
  assertThat(products.numberOfUpdates()).isEqualTo(0);
  assertThat(products.numberOfDeletes()).isEqualTo(0);
  assertThat(products.numberOfReads()).isEqualTo(0);
  assertThat(products.numberOfTombstones()).isEqualTo(0);
  assertThat(products.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(products.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection products_on_hand=store.collection(DATABASE.getDatabaseName(),products_on_hand);
  assertThat(products_on_hand.numberOfCreates()).isEqualTo(9);
  assertThat(products_on_hand.numberOfUpdates()).isEqualTo(0);
  assertThat(products_on_hand.numberOfDeletes()).isEqualTo(0);
  assertThat(products_on_hand.numberOfReads()).isEqualTo(0);
  assertThat(products_on_hand.numberOfTombstones()).isEqualTo(0);
  assertThat(products_on_hand.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(products_on_hand.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection customers=store.collection(DATABASE.getDatabaseName(),customers);
  assertThat(customers.numberOfCreates()).isEqualTo(4);
  assertThat(customers.numberOfUpdates()).isEqualTo(0);
  assertThat(customers.numberOfDeletes()).isEqualTo(0);
  assertThat(customers.numberOfReads()).isEqualTo(0);
  assertThat(customers.numberOfTombstones()).isEqualTo(0);
  assertThat(customers.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(customers.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection orders=store.collection(DATABASE.getDatabaseName(),orders);
  assertThat(orders.numberOfCreates()).isEqualTo(5);
  assertThat(orders.numberOfUpdates()).isEqualTo(0);
  assertThat(orders.numberOfDeletes()).isEqualTo(0);
  assertThat(orders.numberOfReads()).isEqualTo(0);
  assertThat(orders.numberOfTombstones()).isEqualTo(0);
  assertThat(orders.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(orders.numberOfValueSchemaChanges()).isEqualTo(1);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\BinlogReaderIT.java",211
443,"'-tryline","/** 
 * Setup a DATABASE_WHITELIST filter that filters all events. Verify all events are properly filtered. Verify numberOfFilteredEvents metric is incremented correctly.
 */
@Test @FixFor(DBZ-1206) public void shouldFilterAllRecordsBasedOnDatabaseWhitelistFilter() throws Exception {
  config=simpleConfig().with(MySqlConnectorConfig.DATABASE_WHITELIST,db-does-not-exist).build();
  final Filters filters=new Filters.Builder(config).build();
  context=new MySqlTaskContext(config,filters);
  context.start();
  context.source().setBinlogStartPoint(,0L);
  context.initializeHistory();
  reader=new BinlogReader(binlog,context,new AcceptAllPredicate());
  reader.start();
  final int expectedFilterCount=35;
  final long numberFiltered=filterAtLeast(expectedFilterCount,20,TimeUnit.SECONDS);
  assertThat(numberFiltered).isGreaterThanOrEqualTo(expectedFilterCount);
  assertThat(schemaChanges.recordCount()).isEqualTo(0);
  assertThat(store.collectionCount()).isEqualTo(0);
  assertThat(reader.getMetrics().getNumberOfSkippedEvents()).isEqualTo(0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\BinlogReaderIT.java",289
444,"'-tryline","/** 
 * Setup a DATABASE_INCLUDE_LIST filter that filters all events. Verify all events are properly filtered. Verify numberOfFilteredEvents metric is incremented correctly.
 */
@Test @FixFor(DBZ-1206) public void shouldFilterAllRecordsBasedOnDatabaseIncludeListFilter() throws Exception {
  config=simpleConfig().with(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,db-does-not-exist).build();
  final Filters filters=new Filters.Builder(config).build();
  context=new MySqlTaskContext(config,filters);
  context.start();
  context.source().setBinlogStartPoint(,0L);
  context.initializeHistory();
  reader=new BinlogReader(binlog,context,new AcceptAllPredicate());
  reader.start();
  final int expectedFilterCount=35;
  final long numberFiltered=filterAtLeast(expectedFilterCount,20,TimeUnit.SECONDS);
  assertThat(numberFiltered).isGreaterThanOrEqualTo(expectedFilterCount);
  assertThat(schemaChanges.recordCount()).isEqualTo(0);
  assertThat(store.collectionCount()).isEqualTo(0);
  assertThat(reader.getMetrics().getNumberOfSkippedEvents()).isEqualTo(0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\BinlogReaderIT.java",329
445,"'-tryline","@Test @FixFor(DBZ-183) public void shouldHandleTimestampTimezones() throws Exception {
  final UniqueDatabase REGRESSION_DATABASE=new UniqueDatabase(logical_server_name,regression_test).withDbHistoryPath(DB_HISTORY_PATH);
  REGRESSION_DATABASE.createAndInitialize();
  String tableName=dbz_85_fractest;
  config=simpleConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,REGRESSION_DATABASE.getDatabaseName()).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,REGRESSION_DATABASE.qualifiedTableName(tableName)).build();
  Filters filters=new Filters.Builder(config).build();
  context=new MySqlTaskContext(config,filters);
  context.start();
  context.source().setBinlogStartPoint(,0L);
  context.initializeHistory();
  reader=new BinlogReader(binlog,context,new AcceptAllPredicate());
  reader.start();
  int expectedChanges=1;
  consumeAtLeast(expectedChanges);
  List<SourceRecord> sourceRecords=store.sourceRecords();
  assertThat(sourceRecords.size()).isEqualTo(1);
  ZonedDateTime expectedTimestamp=ZonedDateTime.of(LocalDateTime.parse(2014-09-08T17:51:04.780),UniqueDatabase.TIMEZONE).withZoneSameInstant(ZoneOffset.UTC);
  String expectedTimestampString=expectedTimestamp.format(ZonedTimestamp.FORMATTER);
  SourceRecord sourceRecord=sourceRecords.get(0);
  Struct value=(Struct)sourceRecord.value();
  Struct after=value.getStruct(Envelope.FieldName.AFTER);
  String actualTimestampString=after.getString(c4);
  assertThat(actualTimestampString).isEqualTo(expectedTimestampString);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\BinlogReaderIT.java",369
446,"'-tryline","@Test @FixFor(DBZ-342) public void shouldHandleMySQLTimeCorrectly() throws Exception {
  final UniqueDatabase REGRESSION_DATABASE=new UniqueDatabase(logical_server_name,regression_test).withDbHistoryPath(DB_HISTORY_PATH);
  REGRESSION_DATABASE.createAndInitialize();
  String tableName=dbz_342_timetest;
  config=simpleConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,REGRESSION_DATABASE.getDatabaseName()).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,REGRESSION_DATABASE.qualifiedTableName(tableName)).build();
  Filters filters=new Filters.Builder(config).build();
  context=new MySqlTaskContext(config,filters);
  context.start();
  context.source().setBinlogStartPoint(,0L);
  context.initializeHistory();
  reader=new BinlogReader(binlog,context,null);
  reader.start();
  int expectedChanges=1;
  consumeAtLeast(expectedChanges);
  List<SourceRecord> sourceRecords=store.sourceRecords();
  assertThat(sourceRecords.size()).isEqualTo(1);
  SourceRecord sourceRecord=sourceRecords.get(0);
  Struct value=(Struct)sourceRecord.value();
  Struct after=value.getStruct(Envelope.FieldName.AFTER);
  long c1=after.getInt64(c1);
  Duration c1Time=Duration.ofNanos(c1 * 1_000);
  Duration c1ExpectedTime=toDuration(PT517H51M4.78S);
  assertEquals(c1ExpectedTime,c1Time);
  assertEquals(c1ExpectedTime.toNanos(),c1Time.toNanos());
  assertThat(c1Time.toNanos()).isEqualTo(1864264780000000L);
  assertThat(c1Time).isEqualTo(Duration.ofHours(517).plusMinutes(51).plusSeconds(4).plusMillis(780));
  long c2=after.getInt64(c2);
  Duration c2Time=Duration.ofNanos(c2 * 1_000);
  Duration c2ExpectedTime=toDuration(-PT13H14M50S);
  assertEquals(c2ExpectedTime,c2Time);
  assertEquals(c2ExpectedTime.toNanos(),c2Time.toNanos());
  assertThat(c2Time.toNanos()).isEqualTo(-47690000000000L);
  assertTrue(c2Time.isNegative());
  assertThat(c2Time).isEqualTo(Duration.ofHours(-13).minusMinutes(14).minusSeconds(50));
  long c3=after.getInt64(c3);
  Duration c3Time=Duration.ofNanos(c3 * 1_000);
  Duration c3ExpectedTime=toDuration(-PT733H0M0.001S);
  assertEquals(c3ExpectedTime,c3Time);
  assertEquals(c3ExpectedTime.toNanos(),c3Time.toNanos());
  assertThat(c3Time.toNanos()).isEqualTo(-2638800001000000L);
  assertTrue(c3Time.isNegative());
  assertThat(c3Time).isEqualTo(Duration.ofHours(-733).minusMillis(1));
  long c4=after.getInt64(c4);
  Duration c4Time=Duration.ofNanos(c4 * 1_000);
  Duration c4ExpectedTime=toDuration(-PT1H59M59.001S);
  assertEquals(c4ExpectedTime,c4Time);
  assertEquals(c4ExpectedTime.toNanos(),c4Time.toNanos());
  assertThat(c4Time.toNanos()).isEqualTo(-7199001000000L);
  assertTrue(c4Time.isNegative());
  assertThat(c4Time).isEqualTo(Duration.ofHours(-1).minusMinutes(59).minusSeconds(59).minusMillis(1));
  long c5=after.getInt64(c5);
  Duration c5Time=Duration.ofNanos(c5 * 1_000);
  Duration c5ExpectedTime=toDuration(-PT838H59M58.999999S);
  assertEquals(c5ExpectedTime,c5Time);
  assertEquals(c5ExpectedTime.toNanos(),c5Time.toNanos());
  assertThat(c5Time.toNanos()).isEqualTo(-3020398999999000L);
  assertTrue(c5Time.isNegative());
  assertThat(c5Time).isEqualTo(Duration.ofHours(-838).minusMinutes(59).minusSeconds(58).minusNanos(999999000));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\BinlogReaderIT.java",412
447,"'-tryline","@Test(expected=ConnectException.class) public void shouldFailOnSchemaInconsistency() throws Exception {
  inconsistentSchema(null);
  consumeAtLeast(2);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\BinlogReaderIT.java",496
448,"'-tryline","@Test public void shouldWarnOnSchemaInconsistency() throws Exception {
  inconsistentSchema(EventProcessingFailureHandlingMode.WARN);
  int consumed=consumeAtLeast(2,2,TimeUnit.SECONDS);
  assertThat(consumed).isZero();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\BinlogReaderIT.java",502
449,"'-tryline","@Test public void shouldIgnoreOnSchemaInconsistency() throws Exception {
  inconsistentSchema(EventProcessingFailureHandlingMode.SKIP);
  int consumed=consumeAtLeast(2,2,TimeUnit.SECONDS);
  assertThat(consumed).isZero();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\BinlogReaderIT.java",509
450,"'-tryline","@Test public void shouldCreateTaskFromConfiguration() throws Exception {
  config=simpleConfig().build();
  context=new MySqlTaskContext(config,new Filters.Builder(config).build());
  context.start();
  assertThat(context.config()).isSameAs(config);
  assertThat(context.getClock()).isNotNull();
  assertThat(context.dbSchema()).isNotNull();
  assertThat(context.getConnectionContext().jdbc()).isNotNull();
  assertThat(context.getConnectionContext().logger()).isNotNull();
  assertThat(context.makeRecord()).isNotNull();
  assertThat(context.source()).isNotNull();
  assertThat(context.topicSelector()).isNotNull();
  assertThat(context.getConnectionContext().hostname()).isEqualTo(hostname);
  assertThat(context.getConnectionContext().port()).isEqualTo(port);
  assertThat(context.getConnectionContext().username()).isEqualTo(username);
  assertThat(context.getConnectionContext().password()).isEqualTo(password);
  assertThat(context.serverId()).isEqualTo(serverId);
  assertThat(context.getConnectorConfig().getLogicalName()).isEqualTo(serverName);
  assertThat( + context.includeSchemaChangeRecords()).isEqualTo(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES.defaultValueAsString());
  assertThat( + context.includeSqlQuery()).isEqualTo(MySqlConnectorConfig.INCLUDE_SQL_QUERY.defaultValueAsString());
  assertThat( + context.getConnectorConfig().getMaxBatchSize()).isEqualTo(MySqlConnectorConfig.MAX_BATCH_SIZE.defaultValueAsString());
  assertThat( + context.getConnectorConfig().getMaxQueueSize()).isEqualTo(MySqlConnectorConfig.MAX_QUEUE_SIZE.defaultValueAsString());
  assertThat( + context.getConnectorConfig().getPollInterval().toMillis()).isEqualTo(MySqlConnectorConfig.POLL_INTERVAL_MS.defaultValueAsString());
  assertThat( + context.snapshotMode().getValue()).isEqualTo(MySqlConnectorConfig.SNAPSHOT_MODE.defaultValueAsString());
  assertThat(context.isSnapshotAllowedWhenNeeded()).isEqualTo(false);
  assertThat(context.isSnapshotNeverAllowed()).isEqualTo(false);
  assertConnectedToJdbc();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\MySqlTaskContextIT.java",23
451,"'-tryline","@Test public void shouldCloseJdbcConnectionOnShutdown() throws Exception {
  config=simpleConfig().build();
  context=new MySqlTaskContext(config,new Filters.Builder(config).build());
  context.start();
  assertConnectedToJdbc();
  context.shutdown();
  assertNotConnectedToJdbc();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\MySqlTaskContextIT.java",60
452,"'-tryline","@Test public void shouldCreateTaskFromConfigurationWithNeverSnapshotMode() throws Exception {
  config=simpleConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER).build();
  context=new MySqlTaskContext(config,new Filters.Builder(config).build(),false,null);
  context.start();
  assertThat( + context.snapshotMode().getValue()).isEqualTo(SnapshotMode.NEVER.getValue());
  assertThat(context.isSnapshotAllowedWhenNeeded()).isEqualTo(false);
  assertThat(context.isSnapshotNeverAllowed()).isEqualTo(true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\MySqlTaskContextTest.java",100
453,"'-tryline","@Test public void shouldCreateTaskFromConfigurationWithWhenNeededSnapshotMode() throws Exception {
  config=simpleConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.WHEN_NEEDED).build();
  context=new MySqlTaskContext(config,new Filters.Builder(config).build(),false,null);
  context.start();
  assertThat( + context.snapshotMode().getValue()).isEqualTo(SnapshotMode.WHEN_NEEDED.getValue());
  assertThat(context.isSnapshotAllowedWhenNeeded()).isEqualTo(true);
  assertThat(context.isSnapshotNeverAllowed()).isEqualTo(false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\MySqlTaskContextTest.java",112
454,"'-tryline","@Test public void shouldFilterInternalDmlStatementsUsingDefaultFilter() throws Exception {
  config=simpleConfig().build();
  context=new MySqlTaskContext(config,new Filters.Builder(config).build(),false,null);
  assertThat(context.ddlFilter().test(INSERT INTO mysql.rds_heartbeat2(name) values ('innodb_txn_key') ON DUPLICATE KEY UPDATE value = 'v')).isTrue();
  assertThat(context.ddlFilter().test(INSERT INTO mysql.rds_sysinfo(name, value) values ('innodb_txn_key','Sat Jun 13 06:26:02 UTC 2020'))).isTrue();
  assertThat(context.ddlFilter().test(INSERT INTO mysql.rds_monitor(name, value) values ('innodb_txn_key','Sat Jun 13 06:26:02 UTC 2020'))).isTrue();
  assertThat(context.ddlFilter().test(INSERT INTO mysql.rds_monitor(name) values ('innodb_txn_key') ON DUPLICATE KEY UPDATE value = 'v')).isTrue();
  assertThat(context.ddlFilter().test(DELETE FROM mysql.rds_sysinfo)).isTrue();
  assertThat(context.ddlFilter().test(DELETE FROM mysql.rds_monitor;)).isTrue();
  assertThat(context.ddlFilter().test(FLUSH RELAY LOGS;)).isTrue();
  assertThat(context.ddlFilter().test(SAVEPOINT x)).isTrue();
  assertThat(context.ddlFilter().test(INSERT INTO mysql.rds_heartbeat2(name) values ('innodb_txn_key'))).isFalse();
  assertThat(context.ddlFilter().test(SAVEPOINT;)).isFalse();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\MySqlTaskContextTest.java",124
455,"'-tryline","@Test public void shouldUseGtidSetIncludes() throws Exception {
  config=simpleConfig().with(MySqlConnectorConfig.GTID_SOURCE_INCLUDES,a,b,c,d.*).build();
  context=new MySqlTaskContext(config,new Filters.Builder(config).build(),false,null);
  context.start();
  Predicate<String> filter=context.gtidSourceFilter();
  assertThat(filter).isNotNull();
  assertThat(filter.test(a)).isTrue();
  assertThat(filter.test(b)).isTrue();
  assertThat(filter.test(c)).isTrue();
  assertThat(filter.test(d)).isTrue();
  assertThat(filter.test(d1)).isTrue();
  assertThat(filter.test(d2)).isTrue();
  assertThat(filter.test(d1234xdgfe)).isTrue();
  assertThat(filter.test(a1)).isFalse();
  assertThat(filter.test(a2)).isFalse();
  assertThat(filter.test(b1)).isFalse();
  assertThat(filter.test(c1)).isFalse();
  assertThat(filter.test(e)).isFalse();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\MySqlTaskContextTest.java",143
456,"'-tryline","@Test public void shouldUseGtidSetIncludesLiteralUuids() throws Exception {
  String gtidStr=036d85a9-64e5-11e6-9b48-42010af0000c:1-2, + 7145bf69-d1ca-11e5-a588-0242ac110004:1-3200, + 7c1de3f2-3fd2-11e6-9cdc-42010af000bc:1-41;
  config=simpleConfig().with(MySqlConnectorConfig.GTID_SOURCE_INCLUDES,036d85a9-64e5-11e6-9b48-42010af0000c,7145bf69-d1ca-11e5-a588-0242ac110004).build();
  context=new MySqlTaskContext(config,new Filters.Builder(config).build(),false,null);
  context.start();
  Predicate<String> filter=context.gtidSourceFilter();
  assertThat(filter).isNotNull();
  assertThat(filter.test(036d85a9-64e5-11e6-9b48-42010af0000c)).isTrue();
  assertThat(filter.test(7145bf69-d1ca-11e5-a588-0242ac110004)).isTrue();
  assertThat(filter.test(036d85a9-64e5-11e6-9b48-42010af0000c-extra)).isFalse();
  assertThat(filter.test(7145bf69-d1ca-11e5-a588-0242ac110004-extra)).isFalse();
  assertThat(filter.test(7c1de3f2-3fd2-11e6-9cdc-42010af000bc)).isFalse();
  GtidSet original=new GtidSet(gtidStr);
  assertThat(original.forServerWithId(036d85a9-64e5-11e6-9b48-42010af0000c)).isNotNull();
  assertThat(original.forServerWithId(7c1de3f2-3fd2-11e6-9cdc-42010af000bc)).isNotNull();
  assertThat(original.forServerWithId(7145bf69-d1ca-11e5-a588-0242ac110004)).isNotNull();
  GtidSet filtered=original.retainAll(filter);
  assertThat(filtered.forServerWithId(036d85a9-64e5-11e6-9b48-42010af0000c)).isNotNull();
  assertThat(filtered.forServerWithId(7c1de3f2-3fd2-11e6-9cdc-42010af000bc)).isNull();
  assertThat(filtered.forServerWithId(7145bf69-d1ca-11e5-a588-0242ac110004)).isNotNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\MySqlTaskContextTest.java",166
457,"'-tryline","@Test public void shouldUseGtidSetxcludesLiteralUuids() throws Exception {
  String gtidStr=036d85a9-64e5-11e6-9b48-42010af0000c:1-2, + 7145bf69-d1ca-11e5-a588-0242ac110004:1-3200, + 7c1de3f2-3fd2-11e6-9cdc-42010af000bc:1-41;
  config=simpleConfig().with(MySqlConnectorConfig.GTID_SOURCE_EXCLUDES,7c1de3f2-3fd2-11e6-9cdc-42010af000bc).build();
  context=new MySqlTaskContext(config,new Filters.Builder(config).build(),false,null);
  context.start();
  Predicate<String> filter=context.gtidSourceFilter();
  assertThat(filter).isNotNull();
  assertThat(filter.test(036d85a9-64e5-11e6-9b48-42010af0000c)).isTrue();
  assertThat(filter.test(7145bf69-d1ca-11e5-a588-0242ac110004)).isTrue();
  assertThat(filter.test(036d85a9-64e5-11e6-9b48-42010af0000c-extra)).isTrue();
  assertThat(filter.test(7145bf69-d1ca-11e5-a588-0242ac110004-extra)).isTrue();
  assertThat(filter.test(7c1de3f2-3fd2-11e6-9cdc-42010af000bc)).isFalse();
  GtidSet original=new GtidSet(gtidStr);
  assertThat(original.forServerWithId(036d85a9-64e5-11e6-9b48-42010af0000c)).isNotNull();
  assertThat(original.forServerWithId(7c1de3f2-3fd2-11e6-9cdc-42010af000bc)).isNotNull();
  assertThat(original.forServerWithId(7145bf69-d1ca-11e5-a588-0242ac110004)).isNotNull();
  GtidSet filtered=original.retainAll(filter);
  assertThat(filtered.forServerWithId(036d85a9-64e5-11e6-9b48-42010af0000c)).isNotNull();
  assertThat(filtered.forServerWithId(7c1de3f2-3fd2-11e6-9cdc-42010af000bc)).isNull();
  assertThat(filtered.forServerWithId(7145bf69-d1ca-11e5-a588-0242ac110004)).isNotNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\MySqlTaskContextTest.java",196
458,"'-tryline","@Test public void shouldNotAllowBothGtidSetIncludesAndExcludes() throws Exception {
  config=simpleConfig().with(MySqlConnectorConfig.GTID_SOURCE_INCLUDES,036d85a9-64e5-11e6-9b48-42010af0000c,7145bf69-d1ca-11e5-a588-0242ac110004).with(MySqlConnectorConfig.GTID_SOURCE_EXCLUDES,7c1de3f2-3fd2-11e6-9cdc-42010af000bc:1-41).build();
  context=new MySqlTaskContext(config,new Filters.Builder(config).build(),false,null);
  boolean valid=config.validateAndRecord(MySqlConnectorConfig.ALL_FIELDS,msg -> {
  }
);
  assertThat(valid).isFalse();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\MySqlTaskContextTest.java",226
459,"'-tryline","@Test public void shouldFilterAndMergeGtidSet() throws Exception {
  String gtidStr=036d85a9-64e5-11e6-9b48-42010af0000c:1-2, + 7c1de3f2-3fd2-11e6-9cdc-42010af000bc:5-41;
  String availableServerGtidStr=036d85a9-64e5-11e6-9b48-42010af0000c:1-20, + 7145bf69-d1ca-11e5-a588-0242ac110004:1-3200, + 123e4567-e89b-12d3-a456-426655440000:1-41;
  String purgedServerGtidStr=;
  config=simpleConfig().with(MySqlConnectorConfig.GTID_SOURCE_INCLUDES,036d85a9-64e5-11e6-9b48-42010af0000c).with(MySqlConnectorConfig.GTID_NEW_CHANNEL_POSITION,GtidNewChannelPosition.LATEST).build();
  config.validateAndRecord(MySqlConnectorConfig.ALL_FIELDS,msg -> {
  }
);
  context=new MySqlTaskContext(config,new Filters.Builder(config).build(),false,null);
  context.start();
  context.source().setCompletedGtidSet(gtidStr);
  GtidSet mergedGtidSet=context.filterGtidSet(new GtidSet(availableServerGtidStr),new GtidSet(purgedServerGtidStr));
  assertThat(mergedGtidSet).isNotNull();
  GtidSet.UUIDSet uuidSet1=mergedGtidSet.forServerWithId(036d85a9-64e5-11e6-9b48-42010af0000c);
  GtidSet.UUIDSet uuidSet2=mergedGtidSet.forServerWithId(7145bf69-d1ca-11e5-a588-0242ac110004);
  GtidSet.UUIDSet uuidSet3=mergedGtidSet.forServerWithId(123e4567-e89b-12d3-a456-426655440000);
  GtidSet.UUIDSet uuidSet4=mergedGtidSet.forServerWithId(7c1de3f2-3fd2-11e6-9cdc-42010af000bc);
  assertThat(uuidSet1.getIntervals()).isEqualTo(Arrays.asList(new GtidSet.Interval(1,2)));
  assertThat(uuidSet2.getIntervals()).isEqualTo(Arrays.asList(new GtidSet.Interval(1,3200)));
  assertThat(uuidSet3.getIntervals()).isEqualTo(Arrays.asList(new GtidSet.Interval(1,41)));
  assertThat(uuidSet4).isNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\MySqlTaskContextTest.java",239
460,"'-tryline","@Test @FixFor(DBZ-923) public void shouldMergeToFirstAvailableGtidSetPositions() throws Exception {
  String gtidStr=036d85a9-64e5-11e6-9b48-42010af0000c:1-2, + 7c1de3f2-3fd2-11e6-9cdc-42010af000bc:5-41;
  String availableServerGtidStr=036d85a9-64e5-11e6-9b48-42010af0000c:1-20, + 7145bf69-d1ca-11e5-a588-0242ac110004:1-3200, + 123e4567-e89b-12d3-a456-426655440000:1-41;
  String purgedServerGtidStr=7145bf69-d1ca-11e5-a588-0242ac110004:1-1234;
  config=simpleConfig().with(MySqlConnectorConfig.GTID_SOURCE_INCLUDES,036d85a9-64e5-11e6-9b48-42010af0000c).build();
  context=new MySqlTaskContext(config,new Filters.Builder(config).build(),false,null);
  context.start();
  context.source().setCompletedGtidSet(gtidStr);
  GtidSet mergedGtidSet=context.filterGtidSet(new GtidSet(availableServerGtidStr),new GtidSet(purgedServerGtidStr));
  assertThat(mergedGtidSet).isNotNull();
  GtidSet.UUIDSet uuidSet1=mergedGtidSet.forServerWithId(036d85a9-64e5-11e6-9b48-42010af0000c);
  GtidSet.UUIDSet uuidSet2=mergedGtidSet.forServerWithId(7145bf69-d1ca-11e5-a588-0242ac110004);
  GtidSet.UUIDSet uuidSet3=mergedGtidSet.forServerWithId(123e4567-e89b-12d3-a456-426655440000);
  GtidSet.UUIDSet uuidSet4=mergedGtidSet.forServerWithId(7c1de3f2-3fd2-11e6-9cdc-42010af000bc);
  assertThat(uuidSet1.getIntervals()).isEqualTo(Arrays.asList(new GtidSet.Interval(1,2)));
  assertThat(uuidSet2.getIntervals()).isEqualTo(Arrays.asList(new GtidSet.Interval(1,1234)));
  assertThat(uuidSet3).isNull();
  assertThat(uuidSet4).isNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\MySqlTaskContextTest.java",271
461,"'-tryline","@Test public void shouldIgnoreDatabaseHistoryProperties() throws Exception {
  config=simpleConfig().with(KafkaDatabaseHistory.TOPIC,dummytopic).build();
  context=new MySqlTaskContext(config,new Filters.Builder(config).build(),false,null);
  context.start();
  context.getConnectionContext().jdbc().config().forEach((k,v) -> {
    assertThat(k).doesNotMatch(^history);
  }
);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\MySqlTaskContextTest.java",338
462,"'-tryline","@Test public void shouldCreateSnapshotOfSingleDatabase() throws Exception {
  snapshotOfSingleDatabase(true,false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\SnapshotReaderIT.java",110
463,"'-tryline","@Test public void shouldCreateSnapshotOfSingleDatabaseWithoutGlobalLock() throws Exception {
  snapshotOfSingleDatabase(false,false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\SnapshotReaderIT.java",115
464,"'-tryline","@Test public void shouldCreateSnapshotOfSingleDatabaseWithoutGlobalLockAndStoreOnlyMonitoredTables() throws Exception {
  snapshotOfSingleDatabase(false,true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\SnapshotReaderIT.java",120
465,"'-tryline","private void snapshotOfSingleDatabase(boolean useGlobalLock,boolean storeOnlyMonitoredTables) throws Exception {
  final Builder builder=simpleConfig();
  if (!useGlobalLock) {
    builder.with(MySqlConnectorConfig.USER,cloud).with(MySqlConnectorConfig.PASSWORD,cloudpass).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(DatabaseHistory.STORE_ONLY_MONITORED_TABLES_DDL,storeOnlyMonitoredTables);
  }
  config=builder.build();
  context=new MySqlTaskContext(config,new Filters.Builder(config).build());
  context.start();
  reader=new SnapshotReader(snapshot,context,useGlobalLock);
  reader.uponCompletion(completed::countDown);
  reader.generateReadEvents();
  reader.start();
  List<SourceRecord> records=null;
  KeyValueStore store=KeyValueStore.createForTopicsBeginningWith(DATABASE.getServerName() + .);
  SchemaChangeHistory schemaChanges=new SchemaChangeHistory(DATABASE.getServerName());
  while ((records=reader.poll()) != null) {
    records.forEach(record -> {
      VerifyRecord.isValid(record);
      VerifyRecord.hasNoSourceQuery(record);
      store.add(record);
      schemaChanges.add(record);
    }
);
  }
  assertThat(records).isNull();
  if (!useGlobalLock) {
    assertThat(schemaChanges.recordCount()).isGreaterThan(0);
  }
 else {
    assertThat(schemaChanges.recordCount()).isEqualTo(0);
  }
  assertThat(store.collectionCount()).isEqualTo(5);
  Collection products=store.collection(DATABASE.getDatabaseName(),productsTableName());
  assertThat(products.numberOfCreates()).isEqualTo(0);
  assertThat(products.numberOfUpdates()).isEqualTo(0);
  assertThat(products.numberOfDeletes()).isEqualTo(0);
  assertThat(products.numberOfReads()).isEqualTo(9);
  assertThat(products.numberOfTombstones()).isEqualTo(0);
  assertThat(products.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(products.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection products_on_hand=store.collection(DATABASE.getDatabaseName(),products_on_hand);
  assertThat(products_on_hand.numberOfCreates()).isEqualTo(0);
  assertThat(products_on_hand.numberOfUpdates()).isEqualTo(0);
  assertThat(products_on_hand.numberOfDeletes()).isEqualTo(0);
  assertThat(products_on_hand.numberOfReads()).isEqualTo(9);
  assertThat(products_on_hand.numberOfTombstones()).isEqualTo(0);
  assertThat(products_on_hand.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(products_on_hand.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection customers=store.collection(DATABASE.getDatabaseName(),customers);
  assertThat(customers.numberOfCreates()).isEqualTo(0);
  assertThat(customers.numberOfUpdates()).isEqualTo(0);
  assertThat(customers.numberOfDeletes()).isEqualTo(0);
  assertThat(customers.numberOfReads()).isEqualTo(4);
  assertThat(customers.numberOfTombstones()).isEqualTo(0);
  assertThat(customers.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(customers.numberOfValueSchemaChanges()).isEqualTo(1);
  List<Struct> customerRecrods=new ArrayList<>();
  customers.forEach(val -> {
    customerRecrods.add(((Struct)val.value()).getStruct(after));
  }
);
  Struct customer=customerRecrods.stream().sorted((a,b) -> a.getInt32(id).compareTo(b.getInt32(id))).findFirst().get();
  assertThat(customer.get(first_name)).isInstanceOf(String.class);
  assertThat(customer.get(last_name)).isInstanceOf(String.class);
  assertThat(customer.get(email)).isInstanceOf(String.class);
  assertThat(customer.get(first_name)).isEqualTo(Sally);
  assertThat(customer.get(last_name)).isEqualTo(Thomas);
  assertThat(customer.get(email)).isEqualTo(sally.thomas@acme.com);
  Collection orders=store.collection(DATABASE.getDatabaseName(),orders);
  assertThat(orders.numberOfCreates()).isEqualTo(0);
  assertThat(orders.numberOfUpdates()).isEqualTo(0);
  assertThat(orders.numberOfDeletes()).isEqualTo(0);
  assertThat(orders.numberOfReads()).isEqualTo(5);
  assertThat(orders.numberOfTombstones()).isEqualTo(0);
  assertThat(orders.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(orders.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection timetest=store.collection(DATABASE.getDatabaseName(),dbz_342_timetest);
  assertThat(timetest.numberOfCreates()).isEqualTo(0);
  assertThat(timetest.numberOfUpdates()).isEqualTo(0);
  assertThat(timetest.numberOfDeletes()).isEqualTo(0);
  assertThat(timetest.numberOfReads()).isEqualTo(1);
  assertThat(timetest.numberOfTombstones()).isEqualTo(0);
  assertThat(timetest.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(timetest.numberOfValueSchemaChanges()).isEqualTo(1);
  final List<Struct> timerecords=new ArrayList<>();
  timetest.forEach(val -> {
    timerecords.add(((Struct)val.value()).getStruct(after));
  }
);
  Struct after=timerecords.get(0);
  assertThat(after.get(c1)).isEqualTo(toMicroSeconds(PT517H51M04.78S));
  assertThat(after.get(c2)).isEqualTo(toMicroSeconds(-PT13H14M50S));
  assertThat(after.get(c3)).isEqualTo(toMicroSeconds(-PT733H0M0.001S));
  assertThat(after.get(c4)).isEqualTo(toMicroSeconds(-PT1H59M59.001S));
  assertThat(after.get(c5)).isEqualTo(toMicroSeconds(-PT838H59M58.999999S));
  if (completed.await(10,TimeUnit.SECONDS)) {
    Testing.print(completed the snapshot);
  }
 else {
    fail(failed to complete the snapshot within 10 seconds);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\SnapshotReaderIT.java",125
466,"'-tryline","@Test public void snapshotWithBackupLocksShouldNotWaitForReads() throws Exception {
  final Builder builder=simpleConfig();
  builder.with(MySqlConnectorConfig.USER,cloud).with(MySqlConnectorConfig.PASSWORD,cloudpass).with(MySqlConnectorConfig.SNAPSHOT_LOCKING_MODE,MySqlConnectorConfig.SnapshotLockingMode.MINIMAL_PERCONA);
  config=builder.build();
  context=new MySqlTaskContext(config,new Filters.Builder(config).build());
  context.start();
  reader=new SnapshotReader(snapshot,context,true);
  reader.generateReadEvents();
  if (!MySqlTestConnection.isPerconaServer()) {
    reader.start();
    return;
  }
  MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName());
  Thread t=new Thread(){
    @Override public void run(){
      try {
        JdbcConnection connection=db.connect();
        connection.executeWithoutCommitting(SELECT *, SLEEP(20) FROM products_on_hand);
      }
 catch (      Exception e) {
      }
    }
  }
;
  t.start();
  boolean connectException=false;
  reader.start();
  List<SourceRecord> records=null;
  try {
    reader.poll();
  }
 catch (  org.apache.kafka.connect.errors.ConnectException e) {
    connectException=true;
  }
  t.join();
  assertFalse(connectException);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\SnapshotReaderIT.java",250
467,"'-tryline","@Test @FixFor(DBZ-2456) public void shouldCreateSnapshotSelectively() throws Exception {
  config=simpleConfig().with(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,connector_(.*)_ + DATABASE.getIdentifier()).with(CommonConnectorConfig.SNAPSHOT_MODE_TABLES,connector_(.*).customers).build();
  context=new MySqlTaskContext(config,new Filters.Builder(config).build());
  context.start();
  reader=new SnapshotReader(snapshot,context);
  reader.uponCompletion(completed::countDown);
  reader.generateReadEvents();
  reader.start();
  List<SourceRecord> records=null;
  KeyValueStore store=KeyValueStore.createForTopicsBeginningWith(DATABASE.getServerName() + .);
  SchemaChangeHistory schemaChanges=new SchemaChangeHistory(DATABASE.getServerName());
  while ((records=reader.poll()) != null) {
    records.forEach(record -> {
      VerifyRecord.isValid(record);
      VerifyRecord.hasNoSourceQuery(record);
      store.add(record);
      schemaChanges.add(record);
    }
);
  }
  assertThat(records).isNull();
  assertThat(schemaChanges.recordCount()).isEqualTo(0);
  assertThat(store.databases()).containsOnly(DATABASE.getDatabaseName(),OTHER_DATABASE.getDatabaseName());
  assertThat(store.collectionCount()).isEqualTo(2);
  Collection customers=store.collection(DATABASE.getDatabaseName(),customers);
  assertThat(customers.numberOfCreates()).isEqualTo(0);
  assertThat(customers.numberOfUpdates()).isEqualTo(0);
  assertThat(customers.numberOfDeletes()).isEqualTo(0);
  assertThat(customers.numberOfReads()).isEqualTo(4);
  assertThat(customers.numberOfTombstones()).isEqualTo(0);
  assertThat(customers.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(customers.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection orders=store.collection(DATABASE.getDatabaseName(),orders);
  assertThat(orders).isNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\SnapshotReaderIT.java",300
468,"'-tryline","@Test public void shouldCreateSnapshotOfSingleDatabaseWithSchemaChanges() throws Exception {
  config=simpleConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).build();
  context=new MySqlTaskContext(config,new Filters.Builder(config).build());
  context.start();
  reader=new SnapshotReader(snapshot,context);
  reader.uponCompletion(completed::countDown);
  reader.generateReadEvents();
  reader.start();
  List<SourceRecord> records=null;
  KeyValueStore store=KeyValueStore.createForTopicsBeginningWith(DATABASE.getServerName() + .);
  SchemaChangeHistory schemaChanges=new SchemaChangeHistory(DATABASE.getServerName());
  while ((records=reader.poll()) != null) {
    records.forEach(record -> {
      VerifyRecord.isValid(record);
      VerifyRecord.hasNoSourceQuery(record);
      store.add(record);
      schemaChanges.add(record);
    }
);
  }
  assertThat(records).isNull();
  assertThat(schemaChanges.recordCount()).isEqualTo(14);
  assertThat(schemaChanges.databaseCount()).isEqualTo(2);
  assertThat(schemaChanges.databases()).containsOnly(DATABASE.getDatabaseName(),);
  assertThat(store.collectionCount()).isEqualTo(5);
  Collection products=store.collection(DATABASE.getDatabaseName(),productsTableName());
  assertThat(products.numberOfCreates()).isEqualTo(0);
  assertThat(products.numberOfUpdates()).isEqualTo(0);
  assertThat(products.numberOfDeletes()).isEqualTo(0);
  assertThat(products.numberOfReads()).isEqualTo(9);
  assertThat(products.numberOfTombstones()).isEqualTo(0);
  assertThat(products.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(products.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection products_on_hand=store.collection(DATABASE.getDatabaseName(),products_on_hand);
  assertThat(products_on_hand.numberOfCreates()).isEqualTo(0);
  assertThat(products_on_hand.numberOfUpdates()).isEqualTo(0);
  assertThat(products_on_hand.numberOfDeletes()).isEqualTo(0);
  assertThat(products_on_hand.numberOfReads()).isEqualTo(9);
  assertThat(products_on_hand.numberOfTombstones()).isEqualTo(0);
  assertThat(products_on_hand.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(products_on_hand.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection customers=store.collection(DATABASE.getDatabaseName(),customers);
  assertThat(customers.numberOfCreates()).isEqualTo(0);
  assertThat(customers.numberOfUpdates()).isEqualTo(0);
  assertThat(customers.numberOfDeletes()).isEqualTo(0);
  assertThat(customers.numberOfReads()).isEqualTo(4);
  assertThat(customers.numberOfTombstones()).isEqualTo(0);
  assertThat(customers.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(customers.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection orders=store.collection(DATABASE.getDatabaseName(),orders);
  assertThat(orders.numberOfCreates()).isEqualTo(0);
  assertThat(orders.numberOfUpdates()).isEqualTo(0);
  assertThat(orders.numberOfDeletes()).isEqualTo(0);
  assertThat(orders.numberOfReads()).isEqualTo(5);
  assertThat(orders.numberOfTombstones()).isEqualTo(0);
  assertThat(orders.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(orders.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection timetest=store.collection(DATABASE.getDatabaseName(),dbz_342_timetest);
  assertThat(timetest.numberOfCreates()).isEqualTo(0);
  assertThat(timetest.numberOfUpdates()).isEqualTo(0);
  assertThat(timetest.numberOfDeletes()).isEqualTo(0);
  assertThat(timetest.numberOfReads()).isEqualTo(1);
  assertThat(timetest.numberOfTombstones()).isEqualTo(0);
  assertThat(timetest.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(timetest.numberOfValueSchemaChanges()).isEqualTo(1);
  final List<Struct> timerecords=new ArrayList<>();
  timetest.forEach(val -> {
    timerecords.add(((Struct)val.value()).getStruct(after));
  }
);
  Struct after=timerecords.get(0);
  assertThat(after.get(c1)).isEqualTo(toMicroSeconds(PT517H51M04.78S));
  assertThat(after.get(c2)).isEqualTo(toMicroSeconds(-PT13H14M50S));
  assertThat(after.get(c3)).isEqualTo(toMicroSeconds(-PT733H0M0.001S));
  assertThat(after.get(c4)).isEqualTo(toMicroSeconds(-PT1H59M59.001S));
  assertThat(after.get(c5)).isEqualTo(toMicroSeconds(-PT838H59M58.999999S));
  if (completed.await(10,TimeUnit.SECONDS)) {
    Testing.print(completed the snapshot);
  }
 else {
    fail(failed to complete the snapshot within 10 seconds);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\SnapshotReaderIT.java",357
469,"'-tryline","@Test(expected=ConnectException.class) public void shouldCreateSnapshotSchemaOnlyRecovery_exception() throws Exception {
  config=simpleConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.SCHEMA_ONLY_RECOVERY).build();
  context=new MySqlTaskContext(config,new Filters.Builder(config).build());
  context.start();
  reader=new SnapshotReader(snapshot,context);
  reader.uponCompletion(completed::countDown);
  reader.generateReadEvents();
  reader.start();
  List<SourceRecord> records=null;
  KeyValueStore store=KeyValueStore.createForTopicsBeginningWith(DATABASE.getServerName() + .);
  SchemaChangeHistory schemaChanges=new SchemaChangeHistory(DATABASE.getServerName());
  while ((records=reader.poll()) != null) {
    records.forEach(record -> {
      VerifyRecord.isValid(record);
      VerifyRecord.hasNoSourceQuery(record);
      store.add(record);
      schemaChanges.add(record);
    }
);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\SnapshotReaderIT.java",457
470,"'-tryline","@Test public void shouldCreateSnapshotSchemaOnlyRecovery() throws Exception {
  config=simpleConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.SCHEMA_ONLY_RECOVERY).build();
  context=new MySqlTaskContext(config,new Filters.Builder(config).build());
  context.start();
  context.source().setBinlogStartPoint(binlog1,555);
  reader=new SnapshotReader(snapshot,context);
  reader.uponCompletion(completed::countDown);
  reader.generateReadEvents();
  reader.start();
  List<SourceRecord> records=null;
  KeyValueStore store=KeyValueStore.createForTopicsBeginningWith(DATABASE.getServerName() + .);
  SchemaChangeHistory schemaChanges=new SchemaChangeHistory(DATABASE.getServerName());
  while ((records=reader.poll()) != null) {
    records.forEach(record -> {
      VerifyRecord.isValid(record);
      VerifyRecord.hasNoSourceQuery(record);
      store.add(record);
      schemaChanges.add(record);
    }
);
  }
  assertThat(records).isNull();
  assertThat(schemaChanges.recordCount()).isEqualTo(0);
  assertThat(store.collectionCount()).isEqualTo(0);
  if (completed.await(10,TimeUnit.SECONDS)) {
    Testing.print(completed the snapshot);
  }
 else {
    fail(failed to complete the snapshot within 10 seconds);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\SnapshotReaderIT.java",486
471,"'-tryline","@Test public void shouldSnapshotTablesInOrderSpecifiedInTableIncludeList() throws Exception {
  config=simpleConfig().with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,connector_test_ro_(.*).orders,connector_test_ro_(.*).Products,connector_test_ro_(.*).products_on_hand,connector_test_ro_(.*).dbz_342_timetest).build();
  context=new MySqlTaskContext(config,new Filters.Builder(config).build());
  context.start();
  reader=new SnapshotReader(snapshot,context);
  reader.uponCompletion(completed::countDown);
  reader.generateReadEvents();
  reader.start();
  List<SourceRecord> records;
  LinkedHashSet<String> tablesInOrder=new LinkedHashSet<>();
  LinkedHashSet<String> tablesInOrderExpected=getTableNamesInSpecifiedOrder(orders,Products,products_on_hand,dbz_342_timetest);
  while ((records=reader.poll()) != null) {
    records.forEach(record -> {
      VerifyRecord.isValid(record);
      if (record.value() != null) {
        tablesInOrder.add(getTableNameFromSourceRecord.apply(record));
      }
    }
);
  }
  assertArrayEquals(tablesInOrder.toArray(),tablesInOrderExpected.toArray());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\SnapshotReaderIT.java",531
472,"'-tryline","@Test public void shouldSnapshotTablesInOrderSpecifiedInTablesWhitelist() throws Exception {
  config=simpleConfig().with(MySqlConnectorConfig.TABLE_WHITELIST,connector_test_ro_(.*).orders,connector_test_ro_(.*).Products,connector_test_ro_(.*).products_on_hand,connector_test_ro_(.*).dbz_342_timetest).build();
  context=new MySqlTaskContext(config,new Filters.Builder(config).build());
  context.start();
  reader=new SnapshotReader(snapshot,context);
  reader.uponCompletion(completed::countDown);
  reader.generateReadEvents();
  reader.start();
  List<SourceRecord> records;
  LinkedHashSet<String> tablesInOrder=new LinkedHashSet<>();
  LinkedHashSet<String> tablesInOrderExpected=getTableNamesInSpecifiedOrder(orders,Products,products_on_hand,dbz_342_timetest);
  while ((records=reader.poll()) != null) {
    records.forEach(record -> {
      VerifyRecord.isValid(record);
      if (record.value() != null) {
        tablesInOrder.add(getTableNameFromSourceRecord.apply(record));
      }
    }
);
  }
  assertArrayEquals(tablesInOrder.toArray(),tablesInOrderExpected.toArray());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\SnapshotReaderIT.java",559
473,"'-tryline","@Test public void shouldSnapshotTablesInLexicographicalOrder() throws Exception {
  config=simpleConfig().build();
  context=new MySqlTaskContext(config,new Filters.Builder(config).build());
  context.start();
  reader=new SnapshotReader(snapshot,context);
  reader.uponCompletion(completed::countDown);
  reader.generateReadEvents();
  reader.start();
  List<SourceRecord> records;
  LinkedHashSet<String> tablesInOrder=new LinkedHashSet<>();
  LinkedHashSet<String> tablesInOrderExpected=getTableNamesInSpecifiedOrder(Products,customers,dbz_342_timetest,orders,products_on_hand);
  while ((records=reader.poll()) != null) {
    records.forEach(record -> {
      VerifyRecord.isValid(record);
      VerifyRecord.hasNoSourceQuery(record);
      if (record.value() != null) {
        tablesInOrder.add(getTableNameFromSourceRecord.apply(record));
      }
    }
);
  }
  assertArrayEquals(tablesInOrder.toArray(),tablesInOrderExpected.toArray());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\SnapshotReaderIT.java",587
474,"'-tryline","@Test public void shouldCreateSnapshotSchemaOnly() throws Exception {
  config=simpleConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.SCHEMA_ONLY).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(Heartbeat.HEARTBEAT_INTERVAL,300_000).build();
  context=new MySqlTaskContext(config,new Filters.Builder(config).build());
  context.start();
  reader=new SnapshotReader(snapshot,context);
  reader.uponCompletion(completed::countDown);
  reader.generateReadEvents();
  reader.start();
  List<SourceRecord> records=null;
  KeyValueStore store=KeyValueStore.createForTopicsBeginningWith(DATABASE.getServerName() + .);
  SchemaChangeHistory schemaChanges=new SchemaChangeHistory(DATABASE.getServerName());
  SourceRecord heartbeatRecord=null;
  while ((records=reader.poll()) != null) {
    assertThat(heartbeatRecord).describedAs(Heartbeat record must be the last one).isNull();
    if (heartbeatRecord == null && records.size() > 0 && records.get(records.size() - 1).topic().startsWith(__debezium-heartbeat)) {
      heartbeatRecord=records.get(records.size() - 1);
    }
    records.forEach(record -> {
      if (!record.topic().startsWith(__debezium-heartbeat)) {
        assertThat(record.sourceOffset().get(snapshot)).isEqualTo(true);
        VerifyRecord.isValid(record);
        VerifyRecord.hasNoSourceQuery(record);
        store.add(record);
        schemaChanges.add(record);
      }
    }
);
  }
  assertThat(records).isNull();
  assertThat(schemaChanges.recordCount()).isEqualTo(14);
  assertThat(store.collectionCount()).isEqualTo(0);
  assertThat(heartbeatRecord).isNotNull();
  assertThat(heartbeatRecord.sourceOffset().get(snapshot)).isNotEqualTo(true);
  if (completed.await(10,TimeUnit.SECONDS)) {
    Testing.print(completed the snapshot);
  }
 else {
    fail(failed to complete the snapshot within 10 seconds);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\SnapshotReaderIT.java",621
475,"'-tryline","@Test @FixFor(DBZ-582) public void shouldEmitTombstoneOnDeleteByDefault() throws Exception {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(INITIAL_EVENT_COUNT);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(orders)).size()).isEqualTo(5);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(UPDATE orders SET order_number=10101 WHERE order_number=10001);
    }
   }
   records=consumeRecordsByTopic(3);
  List<SourceRecord> updates=records.recordsForTopic(DATABASE.topicForTable(orders));
  assertThat(updates.size()).isEqualTo(3);
  assertDelete(updates.get(0),order_number,10001);
  assertTombstone(updates.get(1),order_number,10001);
  assertInsert(updates.get(2),order_number,10101);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(DELETE FROM orders WHERE order_number=10101);
    }
   }
   records=consumeRecordsByTopic(2);
  updates=records.recordsForTopic(DATABASE.topicForTable(orders));
  assertThat(updates.size()).isEqualTo(2);
  assertDelete(updates.get(0),order_number,10101);
  assertTombstone(updates.get(1),order_number,10101);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",1447
476,"'-tryline","@Test @FixFor(DBZ-582) public void shouldEmitNoTombstoneOnDelete() throws Exception {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).with(CommonConnectorConfig.TOMBSTONES_ON_DELETE,false).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(INITIAL_EVENT_COUNT);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(orders)).size()).isEqualTo(5);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(UPDATE orders SET order_number=10101 WHERE order_number=10001);
    }
   }
   records=consumeRecordsByTopic(2);
  List<SourceRecord> updates=records.recordsForTopic(DATABASE.topicForTable(orders));
  assertThat(updates.size()).isEqualTo(2);
  assertDelete(updates.get(0),order_number,10001);
  assertInsert(updates.get(1),order_number,10101);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(DELETE FROM orders WHERE order_number = 10101;);
      connection.execute(DELETE FROM orders WHERE order_number = 10002;);
    }
   }
   records=consumeRecordsByTopic(2);
  updates=records.recordsForTopic(DATABASE.topicForTable(orders));
  assertThat(updates.size()).isEqualTo(2);
  assertDelete(updates.get(0),order_number,10101);
  assertDelete(updates.get(1),order_number,10002);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",1490
477,"'-tryline","@Test @FixFor(DBZ-794) public void shouldEmitNoSavepoints() throws Exception {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).with(CommonConnectorConfig.TOMBSTONES_ON_DELETE,false).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(INITIAL_EVENT_COUNT);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(orders)).size()).isEqualTo(5);
  waitForStreamingRunning(DATABASE.getServerName());
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      final Connection jdbc=connection.connection();
      connection.setAutoCommit(false);
      final Statement statement=jdbc.createStatement();
      statement.executeUpdate(DELETE FROM orders WHERE order_number = 10001);
      statement.executeUpdate(SavePoint sp2);
      statement.executeUpdate(DELETE FROM orders WHERE order_number = 10002);
      jdbc.commit();
    }
   }
   records=consumeRecordsByTopic(2);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName())).isNullOrEmpty();
  final List<SourceRecord> deletes=records.recordsForTopic(DATABASE.topicForTable(orders));
  assertDelete(deletes.get(0),order_number,10001);
  assertDelete(deletes.get(1),order_number,10002);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",1536
478,"'-tryline","/** 
 * This test case validates that if you disable MySQL option binlog_rows_query_log_events, then the original SQL statement for an INSERT statement is NOT parsed into the resulting event.
 */
@Test @FixFor(DBZ-706) public void shouldNotParseQueryIfServerOptionDisabled() throws Exception {
  final String tableName=products;
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(CommonConnectorConfig.TOMBSTONES_ON_DELETE,false).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(tableName)).with(MySqlConnectorConfig.INCLUDE_SQL_QUERY,true).build();
  start(MySqlConnector.class,config);
  waitForStreamingRunning(DATABASE.getServerName());
  consumeRecords(PRODUCTS_TABLE_EVENT_COUNT,null);
  final String insertSqlStatement=INSERT INTO products VALUES (default,'robot','Toy robot',1.304);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(SET binlog_rows_query_log_events=OFF);
      connection.execute(insertSqlStatement);
    }
   }
   final SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(tableName)).size()).isEqualTo(1);
  final SourceRecord sourceRecord=records.recordsForTopic(DATABASE.topicForTable(tableName)).get(0);
  validate(sourceRecord);
  assertInsert(sourceRecord,id,110);
  assertHasNoSourceQuery(sourceRecord);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",1578
479,"'-tryline","/** 
 * This test case validates that if you enable MySQL option binlog_rows_query_log_events, but configure the connector to NOT include the query, it will not be included in the event.
 */
@Test @FixFor(DBZ-706) public void shouldNotParseQueryIfConnectorNotConfiguredTo() throws Exception {
  final String tableName=products;
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(CommonConnectorConfig.TOMBSTONES_ON_DELETE,false).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(tableName)).with(MySqlConnectorConfig.INCLUDE_SQL_QUERY,false).build();
  start(MySqlConnector.class,config);
  consumeRecords(PRODUCTS_TABLE_EVENT_COUNT,null);
  final String insertSqlStatement=INSERT INTO products VALUES (default,'robot','Toy robot',1.304);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(SET binlog_rows_query_log_events=ON);
      connection.execute(insertSqlStatement);
    }
   }
   final SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(tableName)).size()).isEqualTo(1);
  final SourceRecord sourceRecord=records.recordsForTopic(DATABASE.topicForTable(tableName)).get(0);
  logger.info(Record: {},sourceRecord);
  validate(sourceRecord);
  assertInsert(sourceRecord,id,110);
  assertHasNoSourceQuery(sourceRecord);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",1630
480,"'-tryline","/** 
 * This test case validates that if you enable MySQL option binlog_rows_query_log_events, then the original SQL statement for an INSERT statement is parsed into the resulting event.
 */
@Test @FixFor(DBZ-706) public void shouldParseQueryIfAvailableAndConnectorOptionEnabled() throws Exception {
  final String tableName=products;
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(CommonConnectorConfig.TOMBSTONES_ON_DELETE,false).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(tableName)).with(MySqlConnectorConfig.INCLUDE_SQL_QUERY,true).build();
  start(MySqlConnector.class,config);
  consumeRecords(PRODUCTS_TABLE_EVENT_COUNT,null);
  final String insertSqlStatement=INSERT INTO products VALUES (default,'robot','Toy robot',1.304);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(SET binlog_rows_query_log_events=ON);
      connection.execute(insertSqlStatement);
    }
   }
   final SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(tableName)).size()).isEqualTo(1);
  final SourceRecord sourceRecord=records.recordsForTopic(DATABASE.topicForTable(tableName)).get(0);
  logger.info(Record: {},sourceRecord);
  validate(sourceRecord);
  assertInsert(sourceRecord,id,110);
  assertSourceQuery(sourceRecord,insertSqlStatement);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",1682
481,"'-tryline","/** 
 * This test case validates that if you enable MySQL option binlog_rows_query_log_events, then the issue multiple INSERTs, the appropriate SQL statements are parsed into the resulting events.
 */
@Test @FixFor(DBZ-706) public void parseMultipleInsertStatements() throws Exception {
  final String tableName=products;
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(CommonConnectorConfig.TOMBSTONES_ON_DELETE,false).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(tableName)).with(MySqlConnectorConfig.INCLUDE_SQL_QUERY,true).build();
  start(MySqlConnector.class,config);
  consumeRecords(PRODUCTS_TABLE_EVENT_COUNT,null);
  final String insertSqlStatement1=INSERT INTO products VALUES (default,'robot','Toy robot',1.304);
  final String insertSqlStatement2=INSERT INTO products VALUES (default,'toaster','Toaster',3.33);
  logger.warn(DATABASE.getDatabaseName());
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(SET binlog_rows_query_log_events=ON);
      connection.execute(insertSqlStatement1);
      connection.execute(insertSqlStatement2);
    }
   }
   final SourceRecords records=consumeRecordsByTopic(2);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(tableName)).size()).isEqualTo(2);
  final SourceRecord sourceRecord1=records.recordsForTopic(DATABASE.topicForTable(tableName)).get(0);
  validate(sourceRecord1);
  assertInsert(sourceRecord1,id,110);
  assertSourceQuery(sourceRecord1,insertSqlStatement1);
  final SourceRecord sourceRecord2=records.recordsForTopic(DATABASE.topicForTable(tableName)).get(1);
  validate(sourceRecord2);
  assertInsert(sourceRecord2,id,111);
  assertSourceQuery(sourceRecord2,insertSqlStatement2);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",1734
482,"'-tryline","/** 
 * This test case validates that if you enable MySQL option binlog_rows_query_log_events, then the issue single multi-row INSERT, the appropriate SQL statements are parsed into the resulting events.
 */
@Test @FixFor(DBZ-706) public void parseMultipleRowInsertStatement() throws Exception {
  final String tableName=products;
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(CommonConnectorConfig.TOMBSTONES_ON_DELETE,false).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(tableName)).with(MySqlConnectorConfig.INCLUDE_SQL_QUERY,true).build();
  start(MySqlConnector.class,config);
  consumeRecords(PRODUCTS_TABLE_EVENT_COUNT,null);
  final String insertSqlStatement=INSERT INTO products VALUES (default,'robot','Toy robot',1.304), (default,'toaster','Toaster',3.33);
  logger.warn(DATABASE.getDatabaseName());
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(SET binlog_rows_query_log_events=ON);
      connection.execute(insertSqlStatement);
    }
   }
   final SourceRecords records=consumeRecordsByTopic(2);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(tableName)).size()).isEqualTo(2);
  final SourceRecord sourceRecord1=records.recordsForTopic(DATABASE.topicForTable(tableName)).get(0);
  validate(sourceRecord1);
  assertInsert(sourceRecord1,id,110);
  assertSourceQuery(sourceRecord1,insertSqlStatement);
  final SourceRecord sourceRecord2=records.recordsForTopic(DATABASE.topicForTable(tableName)).get(1);
  validate(sourceRecord2);
  assertInsert(sourceRecord2,id,111);
  assertSourceQuery(sourceRecord2,insertSqlStatement);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",1797
483,"'-tryline","/** 
 * This test case validates that if you enable MySQL option binlog_rows_query_log_events, then the original SQL statement for a DELETE over a single row is parsed into the resulting event.
 */
@Test @FixFor(DBZ-706) public void parseDeleteQuery() throws Exception {
  final String tableName=orders;
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(CommonConnectorConfig.TOMBSTONES_ON_DELETE,false).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(tableName)).with(MySqlConnectorConfig.INCLUDE_SQL_QUERY,true).build();
  start(MySqlConnector.class,config);
  consumeRecords(ORDERS_TABLE_EVENT_COUNT,null);
  final String deleteSqlStatement=DELETE FROM orders WHERE order_number=10001 LIMIT 1;
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(SET binlog_rows_query_log_events=ON);
      connection.execute(deleteSqlStatement);
    }
   }
   final SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(tableName)).size()).isEqualTo(1);
  final SourceRecord sourceRecord=records.recordsForTopic(DATABASE.topicForTable(tableName)).get(0);
  validate(sourceRecord);
  assertDelete(sourceRecord,order_number,10001);
  assertSourceQuery(sourceRecord,deleteSqlStatement);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",1858
484,"'-tryline","/** 
 * This test case validates that if you enable MySQL option binlog_rows_query_log_events, then issue a multi-row DELETE, the resulting events get the original SQL statement.
 */
@Test @FixFor(DBZ-706) public void parseMultiRowDeleteQuery() throws Exception {
  final String tableName=orders;
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(CommonConnectorConfig.TOMBSTONES_ON_DELETE,false).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(tableName)).with(MySqlConnectorConfig.INCLUDE_SQL_QUERY,true).build();
  start(MySqlConnector.class,config);
  consumeRecords(ORDERS_TABLE_EVENT_COUNT,null);
  final String deleteSqlStatement=DELETE FROM orders WHERE purchaser=1002;
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(SET binlog_rows_query_log_events=ON);
      connection.execute(deleteSqlStatement);
    }
   }
   final SourceRecords records=consumeRecordsByTopic(2);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(tableName)).size()).isEqualTo(2);
  final SourceRecord sourceRecord1=records.recordsForTopic(DATABASE.topicForTable(tableName)).get(0);
  validate(sourceRecord1);
  assertDelete(sourceRecord1,order_number,10002);
  assertSourceQuery(sourceRecord1,deleteSqlStatement);
  final SourceRecord sourceRecord2=records.recordsForTopic(DATABASE.topicForTable(tableName)).get(1);
  validate(sourceRecord2);
  assertDelete(sourceRecord2,order_number,10004);
  assertSourceQuery(sourceRecord2,deleteSqlStatement);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",1909
485,"'-tryline","/** 
 * This test case validates that if you enable MySQL option binlog_rows_query_log_events, then the original SQL statement for an UPDATE over a single row is parsed into the resulting event.
 */
@Test @FixFor(DBZ-706) public void parseUpdateQuery() throws Exception {
  final String tableName=products;
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(CommonConnectorConfig.TOMBSTONES_ON_DELETE,false).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(tableName)).with(MySqlConnectorConfig.INCLUDE_SQL_QUERY,true).build();
  start(MySqlConnector.class,config);
  consumeRecords(PRODUCTS_TABLE_EVENT_COUNT,null);
  final String updateSqlStatement=UPDATE products set name='toaster' where id=109 LIMIT 1;
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(SET binlog_rows_query_log_events=ON);
      connection.execute(updateSqlStatement);
    }
   }
   final SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(tableName)).size()).isEqualTo(1);
  final SourceRecord sourceRecord=records.recordsForTopic(DATABASE.topicForTable(tableName)).get(0);
  validate(sourceRecord);
  assertUpdate(sourceRecord,id,109);
  assertSourceQuery(sourceRecord,updateSqlStatement);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",1968
486,"'-tryline","/** 
 * This test case validates that if you enable MySQL option binlog_rows_query_log_events, then the original SQL statement for an UPDATE over a single row is parsed into the resulting event.
 */
@Test @FixFor(DBZ-706) public void parseMultiRowUpdateQuery() throws Exception {
  final String tableName=orders;
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(CommonConnectorConfig.TOMBSTONES_ON_DELETE,false).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(tableName)).with(MySqlConnectorConfig.INCLUDE_SQL_QUERY,true).build();
  start(MySqlConnector.class,config);
  consumeRecords(ORDERS_TABLE_EVENT_COUNT,null);
  final String updateSqlStatement=UPDATE orders set quantity=0 where order_number in (10001, 10004);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(SET binlog_rows_query_log_events=ON);
      connection.execute(updateSqlStatement);
    }
   }
   final SourceRecords records=consumeRecordsByTopic(2);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(tableName)).size()).isEqualTo(2);
  final SourceRecord sourceRecord1=records.recordsForTopic(DATABASE.topicForTable(tableName)).get(0);
  validate(sourceRecord1);
  assertUpdate(sourceRecord1,order_number,10001);
  assertSourceQuery(sourceRecord1,updateSqlStatement);
  final SourceRecord sourceRecord2=records.recordsForTopic(DATABASE.topicForTable(tableName)).get(1);
  validate(sourceRecord2);
  assertUpdate(sourceRecord2,order_number,10004);
  assertSourceQuery(sourceRecord2,updateSqlStatement);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",2019
487,"'-tryline","@Test @FixFor(DBZ-1242) public void testEmptySchemaLogWarningWithDatabaseWhitelist() throws Exception {
  final LogInterceptor logInterceptor=new LogInterceptor();
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,my_database).build();
  start(MySqlConnector.class,config);
  consumeRecordsByTopic(12);
  waitForAvailableRecords(100,TimeUnit.MILLISECONDS);
  stopConnector(value -> assertThat(logInterceptor.containsWarnMessage(DatabaseSchema.NO_CAPTURED_DATA_COLLECTIONS_WARNING)).isTrue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",2097
488,"'-tryline","@Test @FixFor(DBZ-1242) public void testNoEmptySchemaLogWarningWithDatabaseWhitelist() throws Exception {
  final LogInterceptor logInterceptor=new LogInterceptor();
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).build();
  start(MySqlConnector.class,config);
  consumeRecordsByTopic(12);
  waitForAvailableRecords(100,TimeUnit.MILLISECONDS);
  stopConnector(value -> assertThat(logInterceptor.containsWarnMessage(DatabaseSchema.NO_CAPTURED_DATA_COLLECTIONS_WARNING)).isFalse());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",2115
489,"'-tryline","@Test @FixFor(DBZ-1242) public void testEmptySchemaWarningWithTableWhitelist() throws Exception {
  final LogInterceptor logInterceptor=new LogInterceptor();
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(my_products)).build();
  start(MySqlConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(mysql,DATABASE.getServerName());
  consumeRecordsByTopic(12);
  waitForAvailableRecords(100,TimeUnit.MILLISECONDS);
  stopConnector(value -> assertThat(logInterceptor.containsWarnMessage(DatabaseSchema.NO_CAPTURED_DATA_COLLECTIONS_WARNING)).isTrue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",2132
490,"'-tryline","@Test @FixFor(DBZ-1242) public void testNoEmptySchemaWarningWithTableWhitelist() throws Exception {
  final LogInterceptor logInterceptor=new LogInterceptor();
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).build();
  start(MySqlConnector.class,config);
  assertConnectorIsRunning();
  consumeRecordsByTopic(12);
  waitForAvailableRecords(100,TimeUnit.MILLISECONDS);
  stopConnector(value -> assertThat(logInterceptor.containsWarnMessage(DatabaseSchema.NO_CAPTURED_DATA_COLLECTIONS_WARNING)).isFalse());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",2153
491,"'-tryline","@Test @FixFor(DBZ-1292) public void shouldOutputRecordsInCloudEventsFormat() throws Exception {
  Testing.Files.delete(DB_HISTORY_PATH);
  final String tableName=products;
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(tableName)).build();
  start(MySqlConnector.class,config);
  final SourceRecords records=consumeRecordsByTopic(PRODUCTS_TABLE_EVENT_COUNT);
  final List<SourceRecord> table=records.recordsForTopic(DATABASE.topicForTable(tableName));
  for (  SourceRecord record : table) {
    CloudEventsConverterTest.shouldConvertToCloudEventsInJson(record,false);
    CloudEventsConverterTest.shouldConvertToCloudEventsInJsonWithDataAsAvro(record,false);
    CloudEventsConverterTest.shouldConvertToCloudEventsInAvro(record,mysql,myServer1,false);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",2261
492,"'-tryline","@Test @FixFor(DBZ-1531) public void shouldEmitHeadersOnPrimaryKeyUpdate() throws Exception {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(INITIAL_EVENT_COUNT);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(orders)).size()).isEqualTo(5);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(UPDATE orders SET order_number=10303 WHERE order_number=10003);
    }
   }
   records=consumeRecordsByTopic(3);
  List<SourceRecord> updates=records.recordsForTopic(DATABASE.topicForTable(orders));
  assertThat(updates.size()).isEqualTo(3);
  SourceRecord deleteRecord=updates.get(0);
  Header keyPKUpdateHeader=getPKUpdateNewKeyHeader(deleteRecord).get();
  assertEquals(Integer.valueOf(10303),((Struct)keyPKUpdateHeader.value()).getInt32(order_number));
  SourceRecord insertRecord=updates.get(2);
  keyPKUpdateHeader=getPKUpdateOldKeyHeader(insertRecord).get();
  assertEquals(Integer.valueOf(10003),((Struct)keyPKUpdateHeader.value()).getInt32(order_number));
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(UPDATE orders SET quantity=5 WHERE order_number=10004);
    }
   }
   records=consumeRecordsByTopic(1);
  updates=records.recordsForTopic(DATABASE.topicForTable(orders));
  assertThat(updates.size()).isEqualTo(1);
  SourceRecord updateRecord=updates.get(0);
  assertThat(getPKUpdateNewKeyHeader(updateRecord).isPresent()).isFalse();
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",2295
493,"'-tryline","@Test @FixFor(DBZ-1895) public void shouldEmitNoEventsForSkippedCreateOperations() throws Exception {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.SCHEMA_ONLY).with(MySqlConnectorConfig.SKIPPED_OPERATIONS,c).build();
  start(MySqlConnector.class,config);
  waitForSnapshotToBeCompleted(mysql,DATABASE.getServerName());
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(INSERT INTO products VALUES (201,'rubberduck','Rubber Duck',2.12););
      connection.execute(UPDATE products SET weight=3.13 WHERE name = 'rubberduck');
      connection.execute(INSERT INTO products VALUES (202,'rubbercrocodile','Rubber Crocodile',4.14););
      connection.execute(DELETE FROM products WHERE name = 'rubberduck');
      connection.execute(INSERT INTO products VALUES (203,'rubberfish','Rubber Fish',5.15););
      connection.execute(DELETE FROM products WHERE name = 'rubbercrocodile');
      connection.execute(DELETE FROM products WHERE name = 'rubberfish');
    }
   }
   SourceRecords records=consumeRecordsByTopic(7);
  List<SourceRecord> changeEvents=records.recordsForTopic(DATABASE.topicForTable(products));
  assertUpdate(changeEvents.get(0),id,201);
  assertDelete(changeEvents.get(1),id,201);
  assertTombstone(changeEvents.get(2),id,201);
  assertDelete(changeEvents.get(3),id,202);
  assertTombstone(changeEvents.get(4),id,202);
  assertDelete(changeEvents.get(5),id,203);
  assertTombstone(changeEvents.get(6),id,203);
  assertThat(changeEvents.size()).isEqualTo(7);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",2346
494,"'-tryline","@Test @FixFor(DBZ-1895) public void shouldEmitNoEventsForSkippedUpdateAndDeleteOperations() throws Exception {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.SCHEMA_ONLY).with(MySqlConnectorConfig.TOMBSTONES_ON_DELETE,false).with(MySqlConnectorConfig.SKIPPED_OPERATIONS,u,d).build();
  start(MySqlConnector.class,config);
  waitForSnapshotToBeCompleted(mysql,DATABASE.getServerName());
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(INSERT INTO products VALUES (204,'rubberduck','Rubber Duck',2.12););
      connection.execute(UPDATE products SET weight=3.13 WHERE name = 'rubberduck');
      connection.execute(INSERT INTO products VALUES (205,'rubbercrocodile','Rubber Crocodile',4.14););
      connection.execute(DELETE FROM products WHERE name = 'rubberduck');
      connection.execute(INSERT INTO products VALUES (206,'rubberfish','Rubber Fish',5.15););
    }
   }
   SourceRecords records=consumeRecordsByTopic(3);
  List<SourceRecord> changeEvents=records.recordsForTopic(DATABASE.topicForTable(products));
  assertInsert(changeEvents.get(0),id,204);
  assertInsert(changeEvents.get(1),id,205);
  assertInsert(changeEvents.get(2),id,206);
  assertThat(changeEvents.size()).isEqualTo(3);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",2386
495,"'-tryline","@Test @SkipWhenKafkaVersion(check=EqualityCheck.EQUAL,value=KafkaVersion.KAFKA_1XX,description=Not compatible with Kafka 1.x) public void tinyIntBooleanTest() throws Exception {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).build();
  start(MySqlConnector.class,config);
  consumeRecordsByTopic(EVENT_COUNT);
  try (final Connection conn=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName()).connection()){
    conn.createStatement().execute(CREATE TABLE ti_boolean_table ( +   A TINYINT(1) NOT NULL DEFAULT TRUE, +   B TINYINT(2) NOT NULL DEFAULT FALSE+ ));
    conn.createStatement().execute(INSERT INTO ti_boolean_table VALUES (default, default));
  }
   SourceRecords records=consumeRecordsByTopic(2);
  SourceRecord record=records.recordsForTopic(DATABASE.topicForTable(ti_boolean_table)).get(0);
  validate(record);
  Schema schemaA=record.valueSchema().fields().get(1).schema().fields().get(0).schema();
  Schema schemaB=record.valueSchema().fields().get(1).schema().fields().get(1).schema();
  assertThat(schemaA.defaultValue()).isEqualTo((short)1);
  assertThat(schemaB.defaultValue()).isEqualTo((short)0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MysqlDefaultValueIT.java",425
496,"'-tryline","@Test @FixFor(DBZ-1689) @SkipWhenKafkaVersion(check=EqualityCheck.EQUAL,value=KafkaVersion.KAFKA_1XX,description=Not compatible with Kafka 1.x) public void intBooleanTest() throws Exception {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).build();
  start(MySqlConnector.class,config);
  Testing.Print.enable();
  waitForSnapshotToBeCompleted(mysql,DATABASE.getServerName());
  consumeRecordsByTopic(EVENT_COUNT);
  try (final Connection conn=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName()).connection()){
    conn.createStatement().execute(CREATE TABLE int_boolean_table ( +   A INT(1) NOT NULL DEFAULT TRUE, +   B INT(2) NOT NULL DEFAULT FALSE+ ));
    conn.createStatement().execute(INSERT INTO int_boolean_table VALUES (default, default));
  }
   SourceRecords records=consumeRecordsByTopic(2);
  SourceRecord record=records.recordsForTopic(DATABASE.topicForTable(int_boolean_table)).get(0);
  validate(record);
  Schema schemaA=record.valueSchema().fields().get(1).schema().fields().get(0).schema();
  Schema schemaB=record.valueSchema().fields().get(1).schema().fields().get(1).schema();
  assertThat(schemaA.defaultValue()).isEqualTo((int)1);
  assertThat(schemaB.defaultValue()).isEqualTo((int)0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MysqlDefaultValueIT.java",454
497,"'-tryline","@Test @SkipWhenKafkaVersion(check=EqualityCheck.EQUAL,value=KafkaVersion.KAFKA_1XX,description=Not compatible with Kafka 1.x) public void timeTypeWithConnectMode() throws Exception {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(DATE_TIME_TABLE)).with(MySqlConnectorConfig.TIME_PRECISION_MODE,TemporalPrecisionMode.CONNECT).with(DatabaseHistory.STORE_ONLY_MONITORED_TABLES_DDL,true).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(7);
  final SourceRecord record=records.recordsForTopic(DATABASE.topicForTable(DATE_TIME_TABLE)).get(0);
  validate(record);
  Schema schemaA=record.valueSchema().fields().get(1).schema().fields().get(0).schema();
  Schema schemaB=record.valueSchema().fields().get(1).schema().fields().get(1).schema();
  Schema schemaC=record.valueSchema().fields().get(1).schema().fields().get(2).schema();
  Schema schemaD=record.valueSchema().fields().get(1).schema().fields().get(3).schema();
  Schema schemaE=record.valueSchema().fields().get(1).schema().fields().get(4).schema();
  Schema schemaF=record.valueSchema().fields().get(1).schema().fields().get(5).schema();
  Schema schemaG=record.valueSchema().fields().get(1).schema().fields().get(6).schema();
  Schema schemaH=record.valueSchema().fields().get(1).schema().fields().get(7).schema();
  Schema schemaI=record.valueSchema().fields().get(1).schema().fields().get(8).schema();
  TemporalAccessor accessor=DateTimeFormatter.ofPattern(yyyy-MM-dd).parse(1976-08-23);
  Instant instant=LocalDate.from(accessor).atStartOfDay().toInstant(ZoneOffset.UTC);
  assertThat(schemaA.defaultValue()).isEqualTo(java.util.Date.from(instant));
  String value1=1970-01-01 00:00:01;
  ZonedDateTime t=java.sql.Timestamp.valueOf(value1).toInstant().atZone(ZoneId.systemDefault());
  String isoString=ZonedTimestamp.toIsoString(t,ZoneId.systemDefault(),MySqlValueConverters::adjustTemporal);
  assertThat(schemaB.defaultValue()).isEqualTo(isoString);
  LocalDateTime localDateTimeC=LocalDateTime.from(DateTimeFormatter.ofPattern(yyyy-MM-dd HH:mm:ss).parse(2018-01-03 00:00:10));
  assertThat(schemaC.defaultValue()).isEqualTo(new java.util.Date(Timestamp.toEpochMillis(localDateTimeC,MySqlValueConverters::adjustTemporal)));
  LocalDateTime localDateTimeD=LocalDateTime.from(DateTimeFormatter.ofPattern(yyyy-MM-dd HH:mm:ss.S).parse(2018-01-03 00:00:10.7));
  assertThat(schemaD.defaultValue()).isEqualTo(new java.util.Date(Timestamp.toEpochMillis(localDateTimeD,MySqlValueConverters::adjustTemporal)));
  LocalDateTime localDateTimeE=LocalDateTime.from(DateTimeFormatter.ofPattern(yyyy-MM-dd HH:mm:ss.SSSSSS).parse(2018-01-03 00:00:10.123456));
  assertThat(schemaE.defaultValue()).isEqualTo(new java.util.Date(Timestamp.toEpochMillis(localDateTimeE,MySqlValueConverters::adjustTemporal)));
  assertThat(schemaF.defaultValue()).isEqualTo(2001);
  LocalTime localTime=Time.valueOf(00:00:00).toLocalTime();
  java.util.Date date=new java.util.Date(Timestamp.toEpochMillis(localTime,MySqlValueConverters::adjustTemporal));
  assertThat(schemaG.defaultValue()).isEqualTo(date);
  Duration duration1=Duration.between(LocalTime.MIN,LocalTime.from(DateTimeFormatter.ofPattern(HH:mm:ss.S).parse(23:00:00.7)));
  assertThat(schemaH.defaultValue()).isEqualTo(new java.util.Date(io.debezium.time.Time.toMilliOfDay(duration1,false)));
  Duration duration2=Duration.between(LocalTime.MIN,LocalTime.from(DateTimeFormatter.ofPattern(HH:mm:ss.SSSSSS).parse(23:00:00.123456)));
  assertThat(schemaI.defaultValue()).isEqualTo(new java.util.Date(io.debezium.time.Time.toMilliOfDay(duration2,false)));
  assertEmptyFieldValue(record,K);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MysqlDefaultValueIT.java",639
498,"'-tryline","@Test @FixFor(DBZ-771) @SkipWhenKafkaVersion(check=EqualityCheck.EQUAL,value=KafkaVersion.KAFKA_1XX,description=Not compatible with Kafka 1.x) public void columnTypeAndDefaultValueChange() throws Exception {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(EVENT_COUNT);
  SourceRecord record=records.recordsForTopic(DATABASE.topicForTable(DBZ_771_CUSTOMERS)).get(0);
  validate(record);
  Schema customerTypeSchema=record.valueSchema().fields().get(1).schema().fields().get(1).schema();
  assertThat(customerTypeSchema.defaultValue()).isEqualTo(b2c);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(SET binlog_rows_query_log_events=ON);
      connection.execute(alter table DBZ_771_CUSTOMERS change customer_type customer_type int default 42;);
      connection.execute(insert into DBZ_771_CUSTOMERS (id) values (2););
    }
   }
   records=consumeRecordsByTopic(2);
  record=records.recordsForTopic(DATABASE.topicForTable(DBZ_771_CUSTOMERS)).get(0);
  validate(record);
  customerTypeSchema=record.valueSchema().fields().get(1).schema().fields().get(1).schema();
  assertThat(customerTypeSchema.defaultValue()).isEqualTo(42);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MysqlDefaultValueIT.java",700
499,"'-tryline","@Test @FixFor({DBZ-771,DBZ-1321}) @SkipWhenKafkaVersion(check=EqualityCheck.EQUAL,value=KafkaVersion.KAFKA_1XX,description=Not compatible with Kafka 1.x) public void columnTypeChangeResetsDefaultValue() throws Exception {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(EVENT_COUNT);
  SourceRecord record=records.recordsForTopic(DATABASE.topicForTable(DBZ_771_CUSTOMERS)).get(0);
  validate(record);
  Schema customerTypeSchema=record.valueSchema().fields().get(1).schema().fields().get(1).schema();
  assertThat(customerTypeSchema.defaultValue()).isEqualTo(b2c);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(SET binlog_rows_query_log_events=ON);
      connection.execute(alter table DBZ_771_CUSTOMERS change customer_type customer_type int;);
      connection.execute(insert into DBZ_771_CUSTOMERS (id, customer_type) values (2, 456););
      connection.execute(alter table DBZ_771_CUSTOMERS modify customer_type int null;);
      connection.execute(alter table DBZ_771_CUSTOMERS modify customer_type int not null;);
    }
   }
   records=consumeRecordsByTopic(4);
  record=records.recordsForTopic(DATABASE.topicForTable(DBZ_771_CUSTOMERS)).get(0);
  validate(record);
  customerTypeSchema=record.valueSchema().fields().get(1).schema().fields().get(1).schema();
  assertThat(customerTypeSchema.defaultValue()).isNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MysqlDefaultValueIT.java",740
500,"'-tryline","@Test @FixFor(DBZ-2267) public void alterDateAndTimeTest() throws Exception {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(ALTER_DATE_TIME)).with(DatabaseHistory.STORE_ONLY_MONITORED_TABLES_DDL,true).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).build();
  start(MySqlConnector.class,config);
  waitForSnapshotToBeCompleted(mysql,DATABASE.getServerName());
  Testing.Print.enable();
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(create table ALTER_DATE_TIME (ID int primary key););
      connection.execute(alter table ALTER_DATE_TIME add column CREATED timestamp not null default current_timestamp);
      connection.execute(insert into ALTER_DATE_TIME values(1000, default););
    }
   }
   final SourceRecords records=consumeRecordsByTopic(1);
  final SourceRecord record=records.allRecordsInOrder().get(0);
  validate(record);
  final Schema columnSchema=record.valueSchema().fields().get(1).schema().fields().get(1).schema();
  assertThat(columnSchema.defaultValue()).isEqualTo(1970-01-01T00:00:00Z);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MysqlDefaultValueIT.java",783
501,"'-tryline","@Test @FixFor(DBZ-1203) public void shouldAlterEnumColumnCharacterSet() throws Exception {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(test_stations_10)).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(5);
  Schema schemaBeforeAlter=records.allRecordsInOrder().get(2).valueSchema().field(FieldName.AFTER).schema();
  Schema schemaAfterAlter=records.allRecordsInOrder().get(4).valueSchema().field(FieldName.AFTER).schema();
  String allowedBeforeAlter=schemaBeforeAlter.field(type).schema().parameters().get(VALUES_FIELD);
  String allowedAfterAlter=schemaAfterAlter.field(type).schema().parameters().get(VALUES_FIELD);
  assertThat(allowedBeforeAlter).isEqualTo(station,post_office);
  assertThat(allowedAfterAlter).isEqualTo(station,post_office,plane,ahihi_dongok,now,test,a\\,b,c\\,'d,g\\,'h);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlEnumColumnIT.java",62
502,"'-tryline","@Test @FixFor(DBZ-1636) public void shouldPropagateColumnSourceType() throws Exception {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(test_stations_10)).with(column.propagate.source.type,DATABASE.qualifiedTableName(test_stations_10) + .type).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(5);
  SourceRecord recordBefore=records.allRecordsInOrder().get(2);
  Schema schemaBeforeAlter=recordBefore.valueSchema().field(FieldName.AFTER).schema();
  Schema typeBeforeSchema=schemaBeforeAlter.field(type).schema();
  assertThat(typeBeforeSchema.name()).isEqualTo(LOGICAL_NAME);
  Map<String,String> beforeParameters=typeBeforeSchema.parameters();
  assertThat(beforeParameters.get(TYPE_NAME_PARAMETER_KEY)).isEqualTo(ENUM);
  assertThat(beforeParameters.get(TYPE_LENGTH_PARAMETER_KEY)).isEqualTo(1);
  assertThat(beforeParameters.get(TYPE_SCALE_PARAMETER_KEY)).isNull();
  SourceRecord recordAfter=records.allRecordsInOrder().get(4);
  Schema schemaAfterAlter=recordAfter.valueSchema().field(FieldName.AFTER).schema();
  Schema typeAfterSchema=schemaAfterAlter.field(type).schema();
  assertThat(typeAfterSchema.name()).isEqualTo(LOGICAL_NAME);
  Map<String,String> afterParameters=schemaAfterAlter.field(type).schema().parameters();
  assertThat(afterParameters.get(TYPE_NAME_PARAMETER_KEY)).isEqualTo(ENUM);
  assertThat(afterParameters.get(TYPE_LENGTH_PARAMETER_KEY)).isEqualTo(1);
  assertThat(afterParameters.get(TYPE_SCALE_PARAMETER_KEY)).isNull();
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlEnumColumnIT.java",92
503,"'-tryline","@Test public void shouldConvertMySqlBytesToPoint() throws Exception {
  byte[] mysqlBytes=DatatypeConverter.parseHexBinary(000000000101000000e3a59bc420f01b4015a143a69d383240);
  MySqlGeometry geom=MySqlGeometry.fromBytes(mysqlBytes);
  assertTrue(geom.isPoint());
  assertEquals(geom.getSrid(),null);
  double[] coords=Point.parseWKBPoint(geom.getWkb());
  assertEquals(coords[0],6.9845,0.0001);
  assertEquals(coords[1],18.22115554,0.0001);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlGeometryTest.java",23
504,"'-tryline","@Test public void shouldConvertMySqlBytesToLine() throws Exception {
  byte[] mysqlBytes=DatatypeConverter.parseHexBinary(E6100000010200000002000000E3A59BC420F01B4015A143A69D38324000000000000000000000000000000000);
  MySqlGeometry geom=MySqlGeometry.fromBytes(mysqlBytes);
  assertFalse(geom.isPoint());
  assertEquals(Integer.valueOf(4326),geom.getSrid());
  assertEquals(010200000002000000E3A59BC420F01B4015A143A69D38324000000000000000000000000000000000,DatatypeConverter.printHexBinary(geom.getWkb()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlGeometryTest.java",35
505,"'-tryline","@Test public void shouldConvertMySqlBytesToPolygon() throws Exception {
  byte[] mysqlBytes=DatatypeConverter.parseHexBinary(E61000000103000000010000000400000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F000000000000000000000000000000000000000000000000);
  MySqlGeometry geom=MySqlGeometry.fromBytes(mysqlBytes);
  assertFalse(geom.isPoint());
  assertEquals(geom.getSrid(),Integer.valueOf(4326));
  assertEquals(0103000000010000000400000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F000000000000000000000000000000000000000000000000,DatatypeConverter.printHexBinary(geom.getWkb()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlGeometryTest.java",45
506,"'-tryline","@Test public void shouldConvertMySqlBytesToGeomCollection() throws Exception {
  byte[] mysqlBytes=DatatypeConverter.parseHexBinary(730C00000107000000020000000101000000000000000000F03F000000000000F03F01020000000200000000000000000000000000000000000000000000000000F03F000000000000F03F);
  MySqlGeometry geom=MySqlGeometry.fromBytes(mysqlBytes);
  assertFalse(geom.isPoint());
  assertEquals(geom.getSrid(),Integer.valueOf(3187));
  assertEquals(0107000000020000000101000000000000000000F03F000000000000F03F01020000000200000000000000000000000000000000000000000000000000F03F000000000000F03F,DatatypeConverter.printHexBinary(geom.getWkb()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlGeometryTest.java",58
507,"'-tryline","@Test public void shouldConvertMySqlBytesToMultiGeometry() throws Exception {
  byte[] mysqlBytes=DatatypeConverter.parseHexBinary(000000000104000000020000000101000000000000000000F03F000000000000F03F010100000000000000000000400000000000000040);
  MySqlGeometry geom=MySqlGeometry.fromBytes(mysqlBytes);
  assertFalse(geom.isPoint());
  assertEquals(geom.getSrid(),null);
  assertEquals(0104000000020000000101000000000000000000F03F000000000000F03F010100000000000000000000400000000000000040,DatatypeConverter.printHexBinary(geom.getWkb()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlGeometryTest.java",70
508,"'-tryline","@Before public void before() throws Exception {
  Testing.Print.enable();
  stopConnector();
  DATABASE.createAndInitialize();
  initializeConnectorTestFramework();
  Testing.Files.delete(DB_HISTORY_PATH);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlMetricsIT.java",46
509,"'-tryline","@After public void after() throws Exception {
  try {
    stopConnector();
  }
  finally {
    Testing.Files.delete(DB_HISTORY_PATH);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlMetricsIT.java",55
510,"'-tryline","@Test public void testLifecycle() throws Exception {
  start(MySqlConnector.class,DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(MySqlConnectorConfig.DATABASE_HISTORY,FileDatabaseHistory.class).with(FileDatabaseHistory.FILE_PATH,DB_HISTORY_PATH).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(simple)).with(MySqlConnectorConfig.TABLES_IGNORE_BUILTIN,Boolean.TRUE).with(DatabaseHistory.STORE_ONLY_MONITORED_TABLES_DDL,Boolean.TRUE).build());
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted();
  waitForStreamingToStart();
  stopConnector();
  final MBeanServer mBeanServer=ManagementFactory.getPlatformMBeanServer();
  try {
    mBeanServer.getMBeanInfo(getSnapshotMetricsObjectName());
    Assert.fail(Expected Snapshot Metrics no longer to exist);
  }
 catch (  InstanceNotFoundException e) {
  }
  try {
    mBeanServer.getMBeanInfo(getStreamingMetricsObjectName());
    Assert.fail(Expected Streaming Metrics no longer to exist);
  }
 catch (  InstanceNotFoundException e) {
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlMetricsIT.java",65
511,"'-tryline","@Test public void testSnapshotOnlyMetrics() throws Exception {
  try (Connection connection=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName()).connection()){
    connection.createStatement().execute(INSERT1);
    connection.createStatement().execute(INSERT2);
  }
   start(MySqlConnector.class,DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL_ONLY).with(MySqlConnectorConfig.DATABASE_HISTORY,FileDatabaseHistory.class).with(FileDatabaseHistory.FILE_PATH,DB_HISTORY_PATH).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(simple)).with(MySqlConnectorConfig.TABLES_IGNORE_BUILTIN,Boolean.TRUE).with(DatabaseHistory.STORE_ONLY_MONITORED_TABLES_DDL,Boolean.TRUE).build());
  assertSnapshotMetrics();
  if (isLegacy()) {
    assertNoStreamingMetricsExist();
  }
 else {
    assertStreamingMetricsExist();
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlMetricsIT.java",107
512,"'-tryline","@Test public void testSnapshotAndStreamingMetrics() throws Exception {
  try (Connection connection=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName()).connection()){
    connection.createStatement().execute(INSERT1);
    connection.createStatement().execute(INSERT2);
  }
   start(MySqlConnector.class,DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(MySqlConnectorConfig.DATABASE_HISTORY,FileDatabaseHistory.class).with(FileDatabaseHistory.FILE_PATH,DB_HISTORY_PATH).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(simple)).with(MySqlConnectorConfig.TABLES_IGNORE_BUILTIN,Boolean.TRUE).with(DatabaseHistory.STORE_ONLY_MONITORED_TABLES_DDL,Boolean.TRUE).build());
  assertSnapshotMetrics();
  assertStreamingMetrics(0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlMetricsIT.java",138
513,"'-tryline","@Test public void testStreamingOnlyMetrics() throws Exception {
  start(MySqlConnector.class,DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER).with(MySqlConnectorConfig.DATABASE_HISTORY,FileDatabaseHistory.class).with(FileDatabaseHistory.FILE_PATH,DB_HISTORY_PATH).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(simple)).with(MySqlConnectorConfig.TABLES_IGNORE_BUILTIN,Boolean.TRUE).with(DatabaseHistory.STORE_ONLY_MONITORED_TABLES_DDL,Boolean.TRUE).build());
  assertStreamingMetrics(4);
  if (isLegacy()) {
    assertNoSnapshotMetricsExist();
  }
 else {
    assertSnapshotMetricsExist();
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlMetricsIT.java",161
514,"'-tryline","private void assertNoSnapshotMetricsExist() throws Exception {
  final MBeanServer mBeanServer=ManagementFactory.getPlatformMBeanServer();
  try {
    mBeanServer.getAttribute(getSnapshotMetricsObjectName(),SnapshotCompleted);
    Assert.fail(Expected Snapshot Metrics to not exist);
  }
 catch (  InstanceNotFoundException e) {
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlMetricsIT.java",188
515,"'-tryline","private void assertNoStreamingMetricsExist() throws Exception {
  final MBeanServer mBeanServer=ManagementFactory.getPlatformMBeanServer();
  try {
    mBeanServer.getAttribute(getStreamingMetricsObjectName(),TotalNumberOfEventsSeen);
    Assert.fail(Expected Streaming Metrics to not exist);
  }
 catch (  InstanceNotFoundException e) {
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlMetricsIT.java",199
516,"'-tryline","private void assertStreamingMetricsExist() throws Exception {
  final MBeanServer mBeanServer=ManagementFactory.getPlatformMBeanServer();
  try {
    mBeanServer.getAttribute(getStreamingMetricsObjectName(),TotalNumberOfEventsSeen);
  }
 catch (  InstanceNotFoundException e) {
    Assert.fail(Streaming Metrics should exist);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlMetricsIT.java",210
517,"'-tryline","private void assertSnapshotMetricsExist() throws Exception {
  final MBeanServer mBeanServer=ManagementFactory.getPlatformMBeanServer();
  try {
    mBeanServer.getAttribute(getSnapshotMetricsObjectName(),SnapshotCompleted);
  }
 catch (  InstanceNotFoundException e) {
    Assert.fail(Snapshot Metrics should exist);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlMetricsIT.java",220
518,"'-tryline","private void assertSnapshotMetrics() throws Exception {
  final MBeanServer mBeanServer=ManagementFactory.getPlatformMBeanServer();
  waitForSnapshotToBeCompleted();
  consumeRecords(8);
  assertThat(mBeanServer.getAttribute(getSnapshotMetricsObjectName(),TotalTableCount)).isEqualTo(1);
  assertThat(mBeanServer.getAttribute(getSnapshotMetricsObjectName(),MonitoredTables)).isEqualTo(new String[]{DATABASE.qualifiedTableName(simple)});
  assertThat(mBeanServer.getAttribute(getSnapshotMetricsObjectName(),TotalNumberOfEventsSeen)).isEqualTo(2L);
  assertThat(mBeanServer.getAttribute(getSnapshotMetricsObjectName(),NumberOfEventsFiltered)).isEqualTo(0L);
  assertThat(mBeanServer.getAttribute(getSnapshotMetricsObjectName(),NumberOfErroneousEvents)).isEqualTo(0L);
  assertThat(mBeanServer.getAttribute(getSnapshotMetricsObjectName(),RemainingTableCount)).isEqualTo(0);
  assertThat(mBeanServer.getAttribute(getSnapshotMetricsObjectName(),SnapshotRunning)).isEqualTo(false);
  assertThat(mBeanServer.getAttribute(getSnapshotMetricsObjectName(),SnapshotAborted)).isEqualTo(false);
  assertThat(mBeanServer.getAttribute(getSnapshotMetricsObjectName(),SnapshotCompleted)).isEqualTo(true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlMetricsIT.java",230
519,"'-tryline","private void assertStreamingMetrics(long events) throws Exception {
  final MBeanServer mBeanServer=ManagementFactory.getPlatformMBeanServer();
  waitForStreamingToStart();
  try (Connection connection=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName()).connection()){
    connection.createStatement().execute(INSERT1);
    connection.createStatement().execute(INSERT2);
  }
   waitForAvailableRecords(30,TimeUnit.SECONDS);
  Testing.Print.enable();
  int size=consumeAvailableRecords(VerifyRecord::print);
  assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(),Connected)).isEqualTo(true);
  assertThat((Long)mBeanServer.getAttribute(getStreamingMetricsObjectName(),TotalNumberOfEventsSeen)).isGreaterThanOrEqualTo(events);
  Awaitility.await().atMost(Duration.ofMinutes(1)).until(() -> ((String[])mBeanServer.getAttribute(getStreamingMetricsObjectName(),MonitoredTables)).length > 0);
  assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(),MonitoredTables)).isEqualTo(new String[]{DATABASE.qualifiedTableName(simple)});
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlMetricsIT.java",252
520,"'-tryline","@Test @FixFor(DBZ-1276) public void shouldNotDuplicateEventsAfterRestart() throws Exception {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(restart_table)).build();
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(CREATE TABLE restart_table (id INT PRIMARY KEY, val INT),INSERT INTO restart_table VALUES(1, 10));
    }
   }
   start(MySqlConnector.class,config,record -> {
    final Schema schema=record.valueSchema();
    final Struct value=((Struct)record.value());
    return schema.field(after) != null && value.getStruct(after).getInt32(id).equals(5);
  }
);
  SourceRecords records=consumeRecordsByTopic(15);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(restart_table)).size()).isEqualTo(1);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.connect().setAutoCommit(false);
      connection.execute(INSERT INTO restart_table VALUES(2,12),INSERT INTO restart_table VALUES(3,13),INSERT INTO restart_table VALUES(4,14),INSERT INTO restart_table VALUES(5,15),INSERT INTO restart_table VALUES(6,16));
    }
   }
   records=consumeRecordsByTopic(3);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(restart_table)).size()).isEqualTo(3);
  assertThat(((Struct)((SourceRecord)records.recordsForTopic(DATABASE.topicForTable(restart_table)).get(0)).value()).getStruct(after).getInt32(id)).isEqualTo(2);
  stopConnector();
  start(MySqlConnector.class,config);
  records=consumeRecordsByTopic(2);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(restart_table)).size()).isEqualTo(2);
  assertThat(((Struct)((SourceRecord)records.recordsForTopic(DATABASE.topicForTable(restart_table)).get(0)).value()).getStruct(after).getInt32(id)).isEqualTo(5);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlRestartIT.java",52
521,"'-tryline","@Test @FixFor(DBZ-1243) public void shouldAlterEnumColumnCharacterSet() throws Exception {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(t_user_black_list)).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(5);
  assertThat(records.allRecordsInOrder().size()).isEqualTo(5);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlTimestampColumnIT.java",51
522,"'-tryline","@Ignore @Test(expected=ServerException.class) public void shouldFailToConnectToInvalidBinlogFile() throws Exception {
  Testing.Print.enable();
  startClient(client -> {
    client.setBinlogFilename(invalid-mysql-binlog.filename.000001);
  }
);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\ReadBinLogIT.java",150
523,"'-tryline","@Ignore @Test public void shouldReadMultipleBinlogFiles() throws Exception {
  Testing.Print.enable();
  startClient(client -> {
    client.setBinlogFilename(mysql-bin.000001);
  }
);
  counters.consumeAll(20,TimeUnit.SECONDS);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\ReadBinLogIT.java",159
524,"'-tryline","@Test public void shouldCaptureSingleWriteUpdateDeleteEvents() throws Exception {
  startClient();
  conn.execute(INSERT INTO person(name,age) VALUES ('Georgia',30));
  counters.consume(1,WriteRowsEventData.class);
  List<WriteRowsEventData> writeRowEvents=recordedEventData(WriteRowsEventData.class,1);
  assertRows(writeRowEvents.get(0),rows().insertedRow(Georgia,30,any(),any()));
  conn.execute(UPDATE person SET name = 'Maggie' WHERE name = 'Georgia');
  counters.consume(1,UpdateRowsEventData.class);
  List<UpdateRowsEventData> updateRowEvents=recordedEventData(UpdateRowsEventData.class,1);
  assertRows(updateRowEvents.get(0),rows().changeRow(Georgia,30,any(),any()).to(Maggie,30,any(),any()));
  conn.execute(DELETE FROM person WHERE name = 'Maggie');
  counters.consume(1,DeleteRowsEventData.class);
  List<DeleteRowsEventData> deleteRowEvents=recordedEventData(DeleteRowsEventData.class,1);
  assertRows(deleteRowEvents.get(0),rows().removedRow(Maggie,30,any(),any()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\ReadBinLogIT.java",169
525,"'-tryline","@Test public void shouldCaptureMultipleWriteUpdateDeleteEvents() throws Exception {
  startClient();
  conn.execute(INSERT INTO person(name,age) VALUES ('Georgia',30),INSERT INTO person(name,age) VALUES ('Janice',19));
  counters.consume(1,QueryEventData.class);
  counters.consume(1,TableMapEventData.class);
  counters.consume(2,WriteRowsEventData.class);
  counters.consume(1,XidEventData.class);
  List<WriteRowsEventData> writeRowEvents=recordedEventData(WriteRowsEventData.class,2);
  assertRows(writeRowEvents.get(0),rows().insertedRow(Georgia,30,any(),any()));
  assertRows(writeRowEvents.get(1),rows().insertedRow(Janice,19,any(),any()));
  counters.reset();
  conn.execute(UPDATE person SET name = 'Maggie' WHERE name = 'Georgia',UPDATE person SET name = 'Jamie' WHERE name = 'Janice');
  counters.consume(1,QueryEventData.class);
  counters.consume(1,TableMapEventData.class);
  counters.consume(2,UpdateRowsEventData.class);
  counters.consume(1,XidEventData.class);
  List<UpdateRowsEventData> updateRowEvents=recordedEventData(UpdateRowsEventData.class,2);
  assertRows(updateRowEvents.get(0),rows().changeRow(Georgia,30,any(),any()).to(Maggie,30,any(),any()));
  assertRows(updateRowEvents.get(1),rows().changeRow(Janice,19,any(),any()).to(Jamie,19,any(),any()));
  counters.reset();
  conn.execute(DELETE FROM person WHERE name = 'Maggie',DELETE FROM person WHERE name = 'Jamie');
  counters.consume(1,QueryEventData.class);
  counters.consume(1,TableMapEventData.class);
  counters.consume(2,DeleteRowsEventData.class);
  counters.consume(1,XidEventData.class);
  List<DeleteRowsEventData> deleteRowEvents=recordedEventData(DeleteRowsEventData.class,2);
  assertRows(deleteRowEvents.get(0),rows().removedRow(Maggie,30,any(),any()));
  assertRows(deleteRowEvents.get(1),rows().removedRow(Jamie,19,any(),any()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\ReadBinLogIT.java",193
526,"'-tryline","@Test public void shouldCaptureMultipleWriteUpdateDeletesInSingleEvents() throws Exception {
  startClient();
  conn.execute(INSERT INTO person(name,age) VALUES ('Georgia',30),('Janice',19));
  counters.consume(1,QueryEventData.class);
  counters.consume(1,TableMapEventData.class);
  counters.consume(1,WriteRowsEventData.class);
  counters.consume(1,XidEventData.class);
  List<WriteRowsEventData> writeRowEvents=recordedEventData(WriteRowsEventData.class,1);
  assertRows(writeRowEvents.get(0),rows().insertedRow(Georgia,30,any(),any()).insertedRow(Janice,19,any(),any()));
  counters.reset();
  conn.execute(UPDATE person SET name = CASE  +                           WHEN name = 'Georgia' THEN 'Maggie'  +                           WHEN name = 'Janice' THEN 'Jamie' +                          END + WHERE name IN ('Georgia','Janice'));
  counters.consume(1,QueryEventData.class);
  counters.consume(1,TableMapEventData.class);
  counters.consume(1,UpdateRowsEventData.class);
  counters.consume(1,XidEventData.class);
  List<UpdateRowsEventData> updateRowEvents=recordedEventData(UpdateRowsEventData.class,1);
  assertRows(updateRowEvents.get(0),rows().changeRow(Georgia,30,any(),any()).to(Maggie,30,any(),any()).changeRow(Janice,19,any(),any()).to(Jamie,19,any(),any()));
  counters.reset();
  conn.execute(DELETE FROM person WHERE name IN ('Maggie','Jamie'));
  counters.consume(1,QueryEventData.class);
  counters.consume(1,TableMapEventData.class);
  counters.consume(1,DeleteRowsEventData.class);
  counters.consume(1,XidEventData.class);
  List<DeleteRowsEventData> deleteRowEvents=recordedEventData(DeleteRowsEventData.class,1);
  assertRows(deleteRowEvents.get(0),rows().removedRow(Maggie,30,any(),any()).removedRow(Jamie,19,any(),any()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\ReadBinLogIT.java",232
527,"'-tryline","/** 
 * Test case that is normally commented out since it is only useful to print out the DDL statements recorded by the binlog during a MySQL server initialization and startup.
 * @throws Exception if there are problems
 */
@Ignore @Test public void shouldCaptureQueryEventData() throws Exception {
  startClient(client -> {
    client.setBinlogFilename(mysql-bin.000001);
    client.setBinlogPosition(4);
  }
);
  counters.consumeAll(5,TimeUnit.SECONDS);
  List<QueryEventData> allQueryEvents=recordedEventData(QueryEventData.class,-1);
  allQueryEvents.forEach(event -> {
    String sql=event.getSql();
    if (sql.equalsIgnoreCase(BEGIN) || sql.equalsIgnoreCase(COMMIT)) {
      return;
    }
    System.out.println(event.getSql());
  }
);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\ReadBinLogIT.java",272
528,"'-tryline","@Test public void shouldQueryInformationSchema() throws Exception {
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\ReadBinLogIT.java",297
529,"'-tryline","@Test public void shouldCreateSnapshotOfSingleDatabase() throws Exception {
  snapshotOfSingleDatabase(true,false,true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\SnapshotSourceIT.java",98
530,"'-tryline","@Test public void shouldCreateSnapshotOfSingleDatabaseWithoutGlobalLock() throws Exception {
  snapshotOfSingleDatabase(false,false,true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\SnapshotSourceIT.java",103
531,"'-tryline","@Test public void shouldCreateSnapshotOfSingleDatabaseWithoutGlobalLockAndStoreOnlyMonitoredTables() throws Exception {
  snapshotOfSingleDatabase(false,true,true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\SnapshotSourceIT.java",108
532,"'-tryline","@Test public void shouldCreateSnapshotOfSingleDatabaseNoData() throws Exception {
  snapshotOfSingleDatabase(true,false,false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\SnapshotSourceIT.java",113
533,"'-tryline","@Test public void shouldCreateSnapshotOfSingleDatabaseWithoutGlobalLockNoData() throws Exception {
  snapshotOfSingleDatabase(false,false,false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\SnapshotSourceIT.java",118
534,"'-tryline","@Test public void shouldCreateSnapshotOfSingleDatabaseWithoutGlobalLockAndStoreOnlyMonitoredTablesNoData() throws Exception {
  snapshotOfSingleDatabase(false,true,false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\SnapshotSourceIT.java",123
535,"'-tryline","private void snapshotOfSingleDatabase(boolean useGlobalLock,boolean storeOnlyMonitoredTables,boolean data) throws Exception {
  final LogInterceptor logInterceptor=new LogInterceptor();
  final Builder builder=simpleConfig().with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(customers) + , + DATABASE.qualifiedTableName(products));
  if (!useGlobalLock) {
    builder.with(MySqlConnectorConfig.USER,cloud).with(MySqlConnectorConfig.PASSWORD,cloudpass).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(MySqlConnectorConfig.TEST_DISABLE_GLOBAL_LOCKING,true).with(DatabaseHistory.STORE_ONLY_MONITORED_TABLES_DDL,storeOnlyMonitoredTables);
  }
  if (!data) {
    builder.with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY);
  }
  config=builder.build();
  start(MySqlConnector.class,config);
  waitForSnapshotToBeCompleted(mysql,DATABASE.getServerName());
  KeyValueStore store=KeyValueStore.createForTopicsBeginningWith(DATABASE.getServerName() + .);
  SchemaChangeHistory schemaChanges=new SchemaChangeHistory(DATABASE.getServerName());
  final int schemaEventsCount=!useGlobalLock ? (storeOnlyMonitoredTables ? 8 : 14) : 0;
  SourceRecords sourceRecords=consumeRecordsByTopic(schemaEventsCount + (data ? 9 + 4 : 0));
  for (Iterator<SourceRecord> i=sourceRecords.allRecordsInOrder().iterator(); i.hasNext(); ) {
    final SourceRecord record=i.next();
    VerifyRecord.isValid(record);
    VerifyRecord.hasNoSourceQuery(record);
    store.add(record);
    schemaChanges.add(record);
    final String snapshotSourceField=((Struct)record.value()).getStruct(source).getString(snapshot);
    if (i.hasNext()) {
      final Object snapshotOffsetField=record.sourceOffset().get(snapshot);
      assertThat(snapshotOffsetField).isEqualTo(true);
      assertThat(snapshotSourceField).isEqualTo(true);
    }
 else {
      assertThat(record.sourceOffset().get(snapshot)).isNull();
      assertThat(snapshotSourceField).isEqualTo(last);
    }
  }
  if (!useGlobalLock) {
    logInterceptor.containsMessage(Table level locking is in place, the schema will be capture in two phases, now capturing:);
  }
 else {
    logInterceptor.containsMessage(Releasing global read lock to enable MySQL writes);
  }
  assertThat(schemaChanges.recordCount()).isEqualTo(schemaEventsCount);
  if (!data) {
    return;
  }
  assertThat(store.collectionCount()).isEqualTo(2);
  Collection products=store.collection(DATABASE.getDatabaseName(),productsTableName());
  assertThat(products.numberOfCreates()).isEqualTo(0);
  assertThat(products.numberOfUpdates()).isEqualTo(0);
  assertThat(products.numberOfDeletes()).isEqualTo(0);
  assertThat(products.numberOfReads()).isEqualTo(9);
  assertThat(products.numberOfTombstones()).isEqualTo(0);
  assertThat(products.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(products.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection customers=store.collection(DATABASE.getDatabaseName(),customers);
  assertThat(customers.numberOfCreates()).isEqualTo(0);
  assertThat(customers.numberOfUpdates()).isEqualTo(0);
  assertThat(customers.numberOfDeletes()).isEqualTo(0);
  assertThat(customers.numberOfReads()).isEqualTo(4);
  assertThat(customers.numberOfTombstones()).isEqualTo(0);
  assertThat(customers.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(customers.numberOfValueSchemaChanges()).isEqualTo(1);
  List<Struct> customerRecrods=new ArrayList<>();
  customers.forEach(val -> {
    customerRecrods.add(((Struct)val.value()).getStruct(after));
  }
);
  Struct customer=customerRecrods.stream().sorted((a,b) -> a.getInt32(id).compareTo(b.getInt32(id))).findFirst().get();
  assertThat(customer.get(first_name)).isInstanceOf(String.class);
  assertThat(customer.get(last_name)).isInstanceOf(String.class);
  assertThat(customer.get(email)).isInstanceOf(String.class);
  assertThat(customer.get(first_name)).isEqualTo(Sally);
  assertThat(customer.get(last_name)).isEqualTo(Thomas);
  assertThat(customer.get(email)).isEqualTo(sally.thomas@acme.com);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\SnapshotSourceIT.java",128
536,"'-tryline","@Test public void snapshotWithBackupLocksShouldNotWaitForReads() throws Exception {
  config=simpleConfig().with(MySqlConnectorConfig.USER,cloud).with(MySqlConnectorConfig.PASSWORD,cloudpass).with(MySqlConnectorConfig.SNAPSHOT_LOCKING_MODE,MySqlConnectorConfig.SnapshotLockingMode.MINIMAL_PERCONA).build();
  if (!MySqlTestConnection.isPerconaServer()) {
    return;
  }
  final MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName());
  final JdbcConnection connection=db.connect();
  final CountDownLatch latch=new CountDownLatch(1);
  Thread t=new Thread(){
    @Override public void run(){
      try {
        connection.executeWithoutCommitting(SELECT *, SLEEP(20) FROM products_on_hand WHERE product_id=101);
        latch.countDown();
      }
 catch (      Exception e) {
      }
    }
  }
;
  t.start();
  latch.await(10,TimeUnit.SECONDS);
  start(MySqlConnector.class,config);
  waitForSnapshotToBeCompleted(mysql,DATABASE.getServerName());
  final int recordCount=9 + 9 + 4+ 5+ 1;
  SourceRecords sourceRecords=consumeRecordsByTopic(recordCount);
  assertThat(sourceRecords.allRecordsInOrder()).hasSize(recordCount);
  connection.connection().close();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\SnapshotSourceIT.java",222
537,"'-tryline","@Test @FixFor(DBZ-2456) public void shouldCreateSnapshotSelectively() throws Exception {
  config=simpleConfig().with(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,connector_(.*)_ + DATABASE.getIdentifier()).with(CommonConnectorConfig.SNAPSHOT_MODE_TABLES,connector_(.*).customers).build();
  start(MySqlConnector.class,config);
  waitForSnapshotToBeCompleted(mysql,DATABASE.getServerName());
  KeyValueStore store=KeyValueStore.createForTopicsBeginningWith(DATABASE.getServerName() + .);
  SchemaChangeHistory schemaChanges=new SchemaChangeHistory(DATABASE.getServerName());
  SourceRecords sourceRecords=consumeRecordsByTopic(4 + 4);
  sourceRecords.allRecordsInOrder().forEach(record -> {
    VerifyRecord.isValid(record);
    VerifyRecord.hasNoSourceQuery(record);
    store.add(record);
    schemaChanges.add(record);
  }
);
  assertThat(schemaChanges.recordCount()).isEqualTo(0);
  assertThat(store.databases()).containsOnly(DATABASE.getDatabaseName(),OTHER_DATABASE.getDatabaseName());
  assertThat(store.collectionCount()).isEqualTo(2);
  Collection customers=store.collection(DATABASE.getDatabaseName(),customers);
  assertThat(customers.numberOfCreates()).isEqualTo(0);
  assertThat(customers.numberOfUpdates()).isEqualTo(0);
  assertThat(customers.numberOfDeletes()).isEqualTo(0);
  assertThat(customers.numberOfReads()).isEqualTo(4);
  assertThat(customers.numberOfTombstones()).isEqualTo(0);
  assertThat(customers.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(customers.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection orders=store.collection(DATABASE.getDatabaseName(),orders);
  assertThat(orders).isNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\SnapshotSourceIT.java",264
538,"'-tryline","@Test public void shouldCreateSnapshotOfSingleDatabaseUsingInsertEvents() throws Exception {
  config=simpleConfig().with(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,connector_(.*)_ + DATABASE.getIdentifier()).with(transforms,snapshotasinsert).with(transforms.snapshotasinsert.type,io.debezium.connector.mysql.transforms.ReadToInsertEvent).build();
  start(MySqlConnector.class,config);
  waitForSnapshotToBeCompleted(mysql,DATABASE.getServerName());
  KeyValueStore store=KeyValueStore.createForTopicsBeginningWith(DATABASE.getServerName() + .);
  SchemaChangeHistory schemaChanges=new SchemaChangeHistory(DATABASE.getServerName());
  SourceRecords sourceRecords=consumeRecordsByTopic(2 * (9 + 9 + 4+ 5) + 1);
  sourceRecords.allRecordsInOrder().forEach(record -> {
    VerifyRecord.isValid(record);
    VerifyRecord.hasNoSourceQuery(record);
    store.add(record);
    schemaChanges.add(record);
  }
);
  assertThat(schemaChanges.recordCount()).isEqualTo(0);
  assertThat(store.databases()).containsOnly(DATABASE.getDatabaseName(),OTHER_DATABASE.getDatabaseName());
  assertThat(store.collectionCount()).isEqualTo(9);
  Collection products=store.collection(DATABASE.getDatabaseName(),productsTableName());
  assertThat(products.numberOfCreates()).isEqualTo(9);
  assertThat(products.numberOfUpdates()).isEqualTo(0);
  assertThat(products.numberOfDeletes()).isEqualTo(0);
  assertThat(products.numberOfReads()).isEqualTo(0);
  assertThat(products.numberOfTombstones()).isEqualTo(0);
  assertThat(products.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(products.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection products_on_hand=store.collection(DATABASE.getDatabaseName(),products_on_hand);
  assertThat(products_on_hand.numberOfCreates()).isEqualTo(9);
  assertThat(products_on_hand.numberOfUpdates()).isEqualTo(0);
  assertThat(products_on_hand.numberOfDeletes()).isEqualTo(0);
  assertThat(products_on_hand.numberOfReads()).isEqualTo(0);
  assertThat(products_on_hand.numberOfTombstones()).isEqualTo(0);
  assertThat(products_on_hand.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(products_on_hand.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection customers=store.collection(DATABASE.getDatabaseName(),customers);
  assertThat(customers.numberOfCreates()).isEqualTo(4);
  assertThat(customers.numberOfUpdates()).isEqualTo(0);
  assertThat(customers.numberOfDeletes()).isEqualTo(0);
  assertThat(customers.numberOfReads()).isEqualTo(0);
  assertThat(customers.numberOfTombstones()).isEqualTo(0);
  assertThat(customers.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(customers.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection orders=store.collection(DATABASE.getDatabaseName(),orders);
  assertThat(orders.numberOfCreates()).isEqualTo(5);
  assertThat(orders.numberOfUpdates()).isEqualTo(0);
  assertThat(orders.numberOfDeletes()).isEqualTo(0);
  assertThat(orders.numberOfReads()).isEqualTo(0);
  assertThat(orders.numberOfTombstones()).isEqualTo(0);
  assertThat(orders.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(orders.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection timetest=store.collection(DATABASE.getDatabaseName(),dbz_342_timetest);
  assertThat(timetest.numberOfCreates()).isEqualTo(1);
  assertThat(timetest.numberOfUpdates()).isEqualTo(0);
  assertThat(timetest.numberOfDeletes()).isEqualTo(0);
  assertThat(timetest.numberOfReads()).isEqualTo(0);
  assertThat(timetest.numberOfTombstones()).isEqualTo(0);
  assertThat(timetest.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(timetest.numberOfValueSchemaChanges()).isEqualTo(1);
  final List<Struct> timerecords=new ArrayList<>();
  timetest.forEach(val -> {
    timerecords.add(((Struct)val.value()).getStruct(after));
  }
);
  Struct after=timerecords.get(0);
  assertThat(after.get(c1)).isEqualTo(toMicroSeconds(PT517H51M04.78S));
  assertThat(after.get(c2)).isEqualTo(toMicroSeconds(-PT13H14M50S));
  assertThat(after.get(c3)).isEqualTo(toMicroSeconds(-PT733H0M0.001S));
  assertThat(after.get(c4)).isEqualTo(toMicroSeconds(-PT1H59M59.001S));
  assertThat(after.get(c5)).isEqualTo(toMicroSeconds(-PT838H59M58.999999S));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\SnapshotSourceIT.java",308
539,"'-tryline","@Test public void shouldCreateSnapshotOfSingleDatabaseWithSchemaChanges() throws Exception {
  config=simpleConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).build();
  start(MySqlConnector.class,config);
  waitForSnapshotToBeCompleted(mysql,DATABASE.getServerName());
  KeyValueStore store=KeyValueStore.createForTopicsBeginningWith(DATABASE.getServerName() + .);
  SchemaChangeHistory schemaChanges=new SchemaChangeHistory(DATABASE.getServerName());
  SourceRecords sourceRecords=consumeRecordsByTopic(14 + 9 + 9+ 4+ 5+ 1);
  sourceRecords.allRecordsInOrder().forEach(record -> {
    VerifyRecord.isValid(record);
    VerifyRecord.hasNoSourceQuery(record);
    store.add(record);
    schemaChanges.add(record);
  }
);
  assertThat(schemaChanges.recordCount()).isEqualTo(14);
  assertThat(schemaChanges.databaseCount()).isEqualTo(2);
  assertThat(schemaChanges.databases()).containsOnly(DATABASE.getDatabaseName(),);
  assertThat(store.collectionCount()).isEqualTo(5);
  Collection products=store.collection(DATABASE.getDatabaseName(),productsTableName());
  assertThat(products.numberOfCreates()).isEqualTo(0);
  assertThat(products.numberOfUpdates()).isEqualTo(0);
  assertThat(products.numberOfDeletes()).isEqualTo(0);
  assertThat(products.numberOfReads()).isEqualTo(9);
  assertThat(products.numberOfTombstones()).isEqualTo(0);
  assertThat(products.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(products.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection products_on_hand=store.collection(DATABASE.getDatabaseName(),products_on_hand);
  assertThat(products_on_hand.numberOfCreates()).isEqualTo(0);
  assertThat(products_on_hand.numberOfUpdates()).isEqualTo(0);
  assertThat(products_on_hand.numberOfDeletes()).isEqualTo(0);
  assertThat(products_on_hand.numberOfReads()).isEqualTo(9);
  assertThat(products_on_hand.numberOfTombstones()).isEqualTo(0);
  assertThat(products_on_hand.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(products_on_hand.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection customers=store.collection(DATABASE.getDatabaseName(),customers);
  assertThat(customers.numberOfCreates()).isEqualTo(0);
  assertThat(customers.numberOfUpdates()).isEqualTo(0);
  assertThat(customers.numberOfDeletes()).isEqualTo(0);
  assertThat(customers.numberOfReads()).isEqualTo(4);
  assertThat(customers.numberOfTombstones()).isEqualTo(0);
  assertThat(customers.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(customers.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection orders=store.collection(DATABASE.getDatabaseName(),orders);
  assertThat(orders.numberOfCreates()).isEqualTo(0);
  assertThat(orders.numberOfUpdates()).isEqualTo(0);
  assertThat(orders.numberOfDeletes()).isEqualTo(0);
  assertThat(orders.numberOfReads()).isEqualTo(5);
  assertThat(orders.numberOfTombstones()).isEqualTo(0);
  assertThat(orders.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(orders.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection timetest=store.collection(DATABASE.getDatabaseName(),dbz_342_timetest);
  assertThat(timetest.numberOfCreates()).isEqualTo(0);
  assertThat(timetest.numberOfUpdates()).isEqualTo(0);
  assertThat(timetest.numberOfDeletes()).isEqualTo(0);
  assertThat(timetest.numberOfReads()).isEqualTo(1);
  assertThat(timetest.numberOfTombstones()).isEqualTo(0);
  assertThat(timetest.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(timetest.numberOfValueSchemaChanges()).isEqualTo(1);
  final List<Struct> timerecords=new ArrayList<>();
  timetest.forEach(val -> {
    timerecords.add(((Struct)val.value()).getStruct(after));
  }
);
  Struct after=timerecords.get(0);
  assertThat(after.get(c1)).isEqualTo(toMicroSeconds(PT517H51M04.78S));
  assertThat(after.get(c2)).isEqualTo(toMicroSeconds(-PT13H14M50S));
  assertThat(after.get(c3)).isEqualTo(toMicroSeconds(-PT733H0M0.001S));
  assertThat(after.get(c4)).isEqualTo(toMicroSeconds(-PT1H59M59.001S));
  assertThat(after.get(c5)).isEqualTo(toMicroSeconds(-PT838H59M58.999999S));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\SnapshotSourceIT.java",401
540,"'-tryline","@Test(expected=DebeziumException.class) public void shouldCreateSnapshotSchemaOnlyRecovery_exception() throws Exception {
  config=simpleConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.SCHEMA_ONLY_RECOVERY).build();
  AtomicReference<Throwable> exception=new AtomicReference<>();
  start(MySqlConnector.class,config,(success,message,error) -> exception.set(error));
  throw (RuntimeException)exception.get();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\SnapshotSourceIT.java",485
541,"'-tryline","@Test public void shouldCreateSnapshotSchemaOnlyRecovery() throws Exception {
  Configuration.Builder builder=simpleConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(customers)).with(MySqlConnectorConfig.DATABASE_HISTORY,MemoryDatabaseHistory.class.getName());
  config=builder.build();
  start(MySqlConnector.class,config);
  int recordCount=4;
  SourceRecords sourceRecords=consumeRecordsByTopic(recordCount);
  assertThat(sourceRecords.allRecordsInOrder()).hasSize(recordCount);
  stopConnector();
  builder.with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.SCHEMA_ONLY_RECOVERY);
  config=builder.build();
  start(MySqlConnector.class,config);
  try (final MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName());final JdbcConnection connection=db.connect();final Connection jdbc=connection.connection();final Statement statement=jdbc.createStatement()){
    statement.executeUpdate(INSERT INTO customers VALUES (default,'John','Lazy','john.lazy@acme.com'));
  }
   recordCount=1;
  sourceRecords=consumeRecordsByTopic(recordCount);
  assertThat(sourceRecords.allRecordsInOrder()).hasSize(recordCount);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\SnapshotSourceIT.java",496
542,"'-tryline","@Test public void shouldSnapshotTablesInOrderSpecifiedInTableIncludeList() throws Exception {
  config=simpleConfig().with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,connector_test_ro_(.*).orders,connector_test_ro_(.*).Products,connector_test_ro_(.*).products_on_hand,connector_test_ro_(.*).dbz_342_timetest).build();
  start(MySqlConnector.class,config);
  waitForSnapshotToBeCompleted(mysql,DATABASE.getServerName());
  LinkedHashSet<String> tablesInOrder=new LinkedHashSet<>();
  LinkedHashSet<String> tablesInOrderExpected=getTableNamesInSpecifiedOrder(orders,Products,products_on_hand,dbz_342_timetest);
  SourceRecords sourceRecords=consumeRecordsByTopic(9 + 9 + 5+ 1);
  sourceRecords.allRecordsInOrder().forEach(record -> {
    VerifyRecord.isValid(record);
    VerifyRecord.hasNoSourceQuery(record);
    if (record.value() != null) {
      tablesInOrder.add(getTableNameFromSourceRecord.apply(record));
    }
  }
);
  assertArrayEquals(tablesInOrder.toArray(),tablesInOrderExpected.toArray());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\SnapshotSourceIT.java",529
543,"'-tryline","@Test public void shouldSnapshotTablesInOrderSpecifiedInTablesWhitelist() throws Exception {
  config=simpleConfig().with(MySqlConnectorConfig.TABLE_WHITELIST,connector_test_ro_(.*).orders,connector_test_ro_(.*).Products,connector_test_ro_(.*).products_on_hand,connector_test_ro_(.*).dbz_342_timetest).build();
  start(MySqlConnector.class,config);
  waitForSnapshotToBeCompleted(mysql,DATABASE.getServerName());
  LinkedHashSet<String> tablesInOrder=new LinkedHashSet<>();
  LinkedHashSet<String> tablesInOrderExpected=getTableNamesInSpecifiedOrder(orders,Products,products_on_hand,dbz_342_timetest);
  SourceRecords sourceRecords=consumeRecordsByTopic(9 + 9 + 5+ 1);
  sourceRecords.allRecordsInOrder().forEach(record -> {
    VerifyRecord.isValid(record);
    VerifyRecord.hasNoSourceQuery(record);
    if (record.value() != null) {
      tablesInOrder.add(getTableNameFromSourceRecord.apply(record));
    }
  }
);
  assertArrayEquals(tablesInOrder.toArray(),tablesInOrderExpected.toArray());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\SnapshotSourceIT.java",554
544,"'-tryline","@Test public void shouldSnapshotTablesInLexicographicalOrder() throws Exception {
  config=simpleConfig().build();
  start(MySqlConnector.class,config);
  waitForSnapshotToBeCompleted(mysql,DATABASE.getServerName());
  LinkedHashSet<String> tablesInOrder=new LinkedHashSet<>();
  LinkedHashSet<String> tablesInOrderExpected=getTableNamesInSpecifiedOrder(Products,customers,dbz_342_timetest,orders,products_on_hand);
  SourceRecords sourceRecords=consumeRecordsByTopic(9 + 9 + 5+ 1);
  sourceRecords.allRecordsInOrder().forEach(record -> {
    VerifyRecord.isValid(record);
    VerifyRecord.hasNoSourceQuery(record);
    if (record.value() != null) {
      tablesInOrder.add(getTableNameFromSourceRecord.apply(record));
    }
  }
);
  assertArrayEquals(tablesInOrder.toArray(),tablesInOrderExpected.toArray());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\SnapshotSourceIT.java",580
545,"'-tryline","@Test public void shouldCreateSnapshotSchemaOnly() throws Exception {
  config=simpleConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.SCHEMA_ONLY).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(Heartbeat.HEARTBEAT_INTERVAL,300_000).build();
  start(MySqlConnector.class,config);
  waitForSnapshotToBeCompleted(mysql,DATABASE.getServerName());
  KeyValueStore store=KeyValueStore.createForTopicsBeginningWith(DATABASE.getServerName() + .);
  SchemaChangeHistory schemaChanges=new SchemaChangeHistory(DATABASE.getServerName());
  SourceRecords sourceRecords=consumeRecordsByTopic(14 + 1);
  final List<SourceRecord> allRecords=sourceRecords.allRecordsInOrder();
  for (Iterator<SourceRecord> i=allRecords.subList(0,allRecords.size() - 1).iterator(); i.hasNext(); ) {
    final SourceRecord record=i.next();
    VerifyRecord.isValid(record);
    VerifyRecord.hasNoSourceQuery(record);
    store.add(record);
    schemaChanges.add(record);
    if (record.topic().startsWith(__debezium-heartbeat)) {
      continue;
    }
    final String snapshotSourceField=((Struct)record.value()).getStruct(source).getString(snapshot);
    if (i.hasNext()) {
      final Object snapshotOffsetField=record.sourceOffset().get(snapshot);
      assertThat(snapshotOffsetField).isEqualTo(true);
      assertThat(snapshotSourceField).isEqualTo(true);
    }
 else {
      assertThat(record.sourceOffset().get(snapshot)).isNull();
      assertThat(snapshotSourceField).isEqualTo(last);
    }
  }
  SourceRecord heartbeatRecord=allRecords.get(allRecords.size() - 1);
  assertThat(schemaChanges.recordCount()).isEqualTo(14);
  assertThat(store.collectionCount()).isEqualTo(0);
  assertThat(heartbeatRecord.topic()).startsWith(__debezium-heartbeat);
  assertThat(heartbeatRecord).isNotNull();
  assertThat(heartbeatRecord.sourceOffset().get(snapshot)).isNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\SnapshotSourceIT.java",609
546,"'-tryline","@Test public void shouldCreateSnapshotOfSingleDatabase() throws Exception {
  config=simpleConfig().build();
  start(MySqlConnector.class,config);
  int expected=9 + 9 + 4+ 5+ 1;
  int consumed=consumeAtLeast(expected);
  assertThat(consumed).isGreaterThanOrEqualTo(expected);
  store.sourceRecords().forEach(System.out::println);
  assertThat(schemaChanges.recordCount()).isEqualTo(0);
  assertThat(store.collectionCount()).isEqualTo(5);
  Collection products=store.collection(DATABASE.getDatabaseName(),productsTableName());
  assertThat(products.numberOfCreates()).isEqualTo(9);
  assertThat(products.numberOfUpdates()).isEqualTo(0);
  assertThat(products.numberOfDeletes()).isEqualTo(0);
  assertThat(products.numberOfReads()).isEqualTo(0);
  assertThat(products.numberOfTombstones()).isEqualTo(0);
  assertThat(products.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(products.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection products_on_hand=store.collection(DATABASE.getDatabaseName(),products_on_hand);
  assertThat(products_on_hand.numberOfCreates()).isEqualTo(9);
  assertThat(products_on_hand.numberOfUpdates()).isEqualTo(0);
  assertThat(products_on_hand.numberOfDeletes()).isEqualTo(0);
  assertThat(products_on_hand.numberOfReads()).isEqualTo(0);
  assertThat(products_on_hand.numberOfTombstones()).isEqualTo(0);
  assertThat(products_on_hand.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(products_on_hand.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection customers=store.collection(DATABASE.getDatabaseName(),customers);
  assertThat(customers.numberOfCreates()).isEqualTo(4);
  assertThat(customers.numberOfUpdates()).isEqualTo(0);
  assertThat(customers.numberOfDeletes()).isEqualTo(0);
  assertThat(customers.numberOfReads()).isEqualTo(0);
  assertThat(customers.numberOfTombstones()).isEqualTo(0);
  assertThat(customers.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(customers.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection orders=store.collection(DATABASE.getDatabaseName(),orders);
  assertThat(orders.numberOfCreates()).isEqualTo(5);
  assertThat(orders.numberOfUpdates()).isEqualTo(0);
  assertThat(orders.numberOfDeletes()).isEqualTo(0);
  assertThat(orders.numberOfReads()).isEqualTo(0);
  assertThat(orders.numberOfTombstones()).isEqualTo(0);
  assertThat(orders.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(orders.numberOfValueSchemaChanges()).isEqualTo(1);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\StreamingSourceIT.java",156
547,"'-tryline","@Test public void shouldCreateSnapshotOfSingleDatabaseWithSchemaChanges() throws Exception {
  config=simpleConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).build();
  start(MySqlConnector.class,config);
  int expectedSchemaChangeCount=5 + 2;
  int expected=(9 + 9 + 4+ 5+ 1) + expectedSchemaChangeCount;
  int consumed=consumeAtLeast(expected);
  assertThat(consumed).isGreaterThanOrEqualTo(expected);
  assertThat(schemaChanges.recordCount()).isEqualTo(expectedSchemaChangeCount);
  final List<String> expectedAffectedTables=Arrays.asList(null,Products,Products,products_on_hand,customers,orders,dbz_342_timetest);
  final List<String> affectedTables=new ArrayList<>();
  schemaChanges.forEach(record -> {
    affectedTables.add(((Struct)record.value()).getStruct(source).getString(table));
    assertThat(((Struct)record.value()).getStruct(source).get(db)).isEqualTo(DATABASE.getDatabaseName());
  }
);
  assertThat(affectedTables).isEqualTo(expectedAffectedTables);
  assertThat(store.collectionCount()).isEqualTo(5);
  Collection products=store.collection(DATABASE.getDatabaseName(),productsTableName());
  assertThat(products.numberOfCreates()).isEqualTo(9);
  assertThat(products.numberOfUpdates()).isEqualTo(0);
  assertThat(products.numberOfDeletes()).isEqualTo(0);
  assertThat(products.numberOfReads()).isEqualTo(0);
  assertThat(products.numberOfTombstones()).isEqualTo(0);
  assertThat(products.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(products.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection products_on_hand=store.collection(DATABASE.getDatabaseName(),products_on_hand);
  assertThat(products_on_hand.numberOfCreates()).isEqualTo(9);
  assertThat(products_on_hand.numberOfUpdates()).isEqualTo(0);
  assertThat(products_on_hand.numberOfDeletes()).isEqualTo(0);
  assertThat(products_on_hand.numberOfReads()).isEqualTo(0);
  assertThat(products_on_hand.numberOfTombstones()).isEqualTo(0);
  assertThat(products_on_hand.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(products_on_hand.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection customers=store.collection(DATABASE.getDatabaseName(),customers);
  assertThat(customers.numberOfCreates()).isEqualTo(4);
  assertThat(customers.numberOfUpdates()).isEqualTo(0);
  assertThat(customers.numberOfDeletes()).isEqualTo(0);
  assertThat(customers.numberOfReads()).isEqualTo(0);
  assertThat(customers.numberOfTombstones()).isEqualTo(0);
  assertThat(customers.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(customers.numberOfValueSchemaChanges()).isEqualTo(1);
  Collection orders=store.collection(DATABASE.getDatabaseName(),orders);
  assertThat(orders.numberOfCreates()).isEqualTo(5);
  assertThat(orders.numberOfUpdates()).isEqualTo(0);
  assertThat(orders.numberOfDeletes()).isEqualTo(0);
  assertThat(orders.numberOfReads()).isEqualTo(0);
  assertThat(orders.numberOfTombstones()).isEqualTo(0);
  assertThat(orders.numberOfKeySchemaChanges()).isEqualTo(1);
  assertThat(orders.numberOfValueSchemaChanges()).isEqualTo(1);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\StreamingSourceIT.java",213
548,"'-tryline","/** 
 * Setup a DATABASE_WHITELIST filter that filters all events. Verify all events are properly filtered. Verify numberOfFilteredEvents metric is incremented correctly.
 */
@Test @FixFor(DBZ-1206) public void shouldFilterAllRecordsBasedOnDatabaseWhitelistFilter() throws Exception {
  config=simpleConfig().with(MySqlConnectorConfig.DATABASE_WHITELIST,db-does-not-exist).build();
  start(MySqlConnector.class,config);
  waitForStreamingRunning(mysql,DATABASE.getServerName(),streaming);
  final int expectedFilterCount=35;
  final long numberFiltered=filterAtLeast(expectedFilterCount,20,TimeUnit.SECONDS);
  assertThat(numberFiltered).isGreaterThanOrEqualTo(expectedFilterCount);
  assertThat(schemaChanges.recordCount()).isEqualTo(0);
  assertThat(store.collectionCount()).isEqualTo(0);
  assertThat(getNumberOfSkippedEvents()).isEqualTo(0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\StreamingSourceIT.java",288
549,"'-tryline","/** 
 * Setup a DATABASE_INCLUDE_LIST filter that filters all events. Verify all events are properly filtered. Verify numberOfFilteredEvents metric is incremented correctly.
 */
@Test @FixFor(DBZ-1206) public void shouldFilterAllRecordsBasedOnDatabaseIncludeListFilter() throws Exception {
  config=simpleConfig().with(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,db-does-not-exist).build();
  start(MySqlConnector.class,config);
  waitForStreamingRunning(mysql,DATABASE.getServerName(),streaming);
  final int expectedFilterCount=35;
  final long numberFiltered=filterAtLeast(expectedFilterCount,20,TimeUnit.SECONDS);
  assertThat(numberFiltered).isGreaterThanOrEqualTo(expectedFilterCount);
  assertThat(schemaChanges.recordCount()).isEqualTo(0);
  assertThat(store.collectionCount()).isEqualTo(0);
  assertThat(getNumberOfSkippedEvents()).isEqualTo(0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\StreamingSourceIT.java",322
550,"'-tryline","@Test @FixFor(DBZ-183) public void shouldHandleTimestampTimezones() throws Exception {
  final UniqueDatabase REGRESSION_DATABASE=new UniqueDatabase(logical_server_name,regression_test).withDbHistoryPath(DB_HISTORY_PATH);
  REGRESSION_DATABASE.createAndInitialize();
  String tableName=dbz_85_fractest;
  config=simpleConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,REGRESSION_DATABASE.getDatabaseName()).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,REGRESSION_DATABASE.qualifiedTableName(tableName)).build();
  start(MySqlConnector.class,config);
  int expectedChanges=1;
  consumeAtLeast(expectedChanges);
  List<SourceRecord> sourceRecords=store.sourceRecords();
  assertThat(sourceRecords.size()).isEqualTo(1);
  ZonedDateTime expectedTimestamp=ZonedDateTime.of(LocalDateTime.parse(2014-09-08T17:51:04.780),UniqueDatabase.TIMEZONE).withZoneSameInstant(ZoneOffset.UTC);
  String expectedTimestampString=expectedTimestamp.format(ZonedTimestamp.FORMATTER);
  SourceRecord sourceRecord=sourceRecords.get(0);
  Struct value=(Struct)sourceRecord.value();
  Struct after=value.getStruct(Envelope.FieldName.AFTER);
  String actualTimestampString=after.getString(c4);
  assertThat(actualTimestampString).isEqualTo(expectedTimestampString);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\StreamingSourceIT.java",356
551,"'-tryline","@Test @FixFor(DBZ-342) public void shouldHandleMySQLTimeCorrectly() throws Exception {
  final UniqueDatabase REGRESSION_DATABASE=new UniqueDatabase(logical_server_name,regression_test).withDbHistoryPath(DB_HISTORY_PATH);
  REGRESSION_DATABASE.createAndInitialize();
  String tableName=dbz_342_timetest;
  config=simpleConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,REGRESSION_DATABASE.getDatabaseName()).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,REGRESSION_DATABASE.qualifiedTableName(tableName)).build();
  start(MySqlConnector.class,config);
  int expectedChanges=1;
  consumeAtLeast(expectedChanges);
  List<SourceRecord> sourceRecords=store.sourceRecords();
  assertThat(sourceRecords.size()).isEqualTo(1);
  SourceRecord sourceRecord=sourceRecords.get(0);
  Struct value=(Struct)sourceRecord.value();
  Struct after=value.getStruct(Envelope.FieldName.AFTER);
  long c1=after.getInt64(c1);
  Duration c1Time=Duration.ofNanos(c1 * 1_000);
  Duration c1ExpectedTime=toDuration(PT517H51M4.78S);
  assertEquals(c1ExpectedTime,c1Time);
  assertEquals(c1ExpectedTime.toNanos(),c1Time.toNanos());
  assertThat(c1Time.toNanos()).isEqualTo(1864264780000000L);
  assertThat(c1Time).isEqualTo(Duration.ofHours(517).plusMinutes(51).plusSeconds(4).plusMillis(780));
  long c2=after.getInt64(c2);
  Duration c2Time=Duration.ofNanos(c2 * 1_000);
  Duration c2ExpectedTime=toDuration(-PT13H14M50S);
  assertEquals(c2ExpectedTime,c2Time);
  assertEquals(c2ExpectedTime.toNanos(),c2Time.toNanos());
  assertThat(c2Time.toNanos()).isEqualTo(-47690000000000L);
  assertTrue(c2Time.isNegative());
  assertThat(c2Time).isEqualTo(Duration.ofHours(-13).minusMinutes(14).minusSeconds(50));
  long c3=after.getInt64(c3);
  Duration c3Time=Duration.ofNanos(c3 * 1_000);
  Duration c3ExpectedTime=toDuration(-PT733H0M0.001S);
  assertEquals(c3ExpectedTime,c3Time);
  assertEquals(c3ExpectedTime.toNanos(),c3Time.toNanos());
  assertThat(c3Time.toNanos()).isEqualTo(-2638800001000000L);
  assertTrue(c3Time.isNegative());
  assertThat(c3Time).isEqualTo(Duration.ofHours(-733).minusMillis(1));
  long c4=after.getInt64(c4);
  Duration c4Time=Duration.ofNanos(c4 * 1_000);
  Duration c4ExpectedTime=toDuration(-PT1H59M59.001S);
  assertEquals(c4ExpectedTime,c4Time);
  assertEquals(c4ExpectedTime.toNanos(),c4Time.toNanos());
  assertThat(c4Time.toNanos()).isEqualTo(-7199001000000L);
  assertTrue(c4Time.isNegative());
  assertThat(c4Time).isEqualTo(Duration.ofHours(-1).minusMinutes(59).minusSeconds(59).minusMillis(1));
  long c5=after.getInt64(c5);
  Duration c5Time=Duration.ofNanos(c5 * 1_000);
  Duration c5ExpectedTime=toDuration(-PT838H59M58.999999S);
  assertEquals(c5ExpectedTime,c5Time);
  assertEquals(c5ExpectedTime.toNanos(),c5Time.toNanos());
  assertThat(c5Time.toNanos()).isEqualTo(-3020398999999000L);
  assertTrue(c5Time.isNegative());
  assertThat(c5Time).isEqualTo(Duration.ofHours(-838).minusMinutes(59).minusSeconds(58).minusNanos(999999000));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\StreamingSourceIT.java",393
552,"'-tryline","@Test(expected=ConnectException.class) public void shouldFailOnSchemaInconsistency() throws Exception {
  inconsistentSchema(null);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\StreamingSourceIT.java",471
553,"'-tryline","@Test public void shouldWarnOnSchemaInconsistency() throws Exception {
  inconsistentSchema(EventProcessingFailureHandlingMode.WARN);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\StreamingSourceIT.java",476
554,"'-tryline","@Test public void shouldIgnoreOnSchemaInconsistency() throws Exception {
  inconsistentSchema(EventProcessingFailureHandlingMode.SKIP);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\StreamingSourceIT.java",481
555,"'-tryline","@Test @FixFor(DBZ-1208) @SkipWhenDatabaseVersion(check=LESS_THAN_OR_EQUAL,major=5,minor=6,reason=MySQL 5.6 does not support SSL) public void shouldAcceptTls12() throws Exception {
  final UniqueDatabase REGRESSION_DATABASE=new UniqueDatabase(logical_server_name,regression_test).withDbHistoryPath(DB_HISTORY_PATH);
  REGRESSION_DATABASE.createAndInitialize();
  config=simpleConfig().with(MySqlConnectorConfig.SSL_MODE,SecureConnectionMode.REQUIRED).with(SET_TLS_PROTOCOLS,TLSv1.2).build();
  AtomicReference<Throwable> exception=new AtomicReference<>();
  start(MySqlConnector.class,config,(success,message,error) -> exception.set(error));
  waitForStreamingRunning(mysql,DATABASE.getServerName(),streaming);
  assertThat(exception.get()).isNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\StreamingSourceIT.java",505
556,"'-tryline","@BeforeClass public static void startKafka() throws Exception {
  File dataDir=Testing.Files.createTestingDirectory(history_cluster);
  Testing.Files.delete(dataDir);
  kafka=new KafkaCluster().usingDirectory(dataDir).deleteDataPriorToStartup(true).deleteDataUponShutdown(true).addBrokers(1).withKafkaConfiguration(Collect.propertiesOf(auto.create.topics.enable,false,zookeeper.session.timeout.ms,20000)).startup();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\relational\history\KafkaDatabaseHistoryTest.java",51
557,"'-tryline","@Before public void beforeEach() throws Exception {
  source=Collect.hashMapOf(server,my-server);
  setLogPosition(0);
  history=new KafkaDatabaseHistory();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\relational\history\KafkaDatabaseHistoryTest.java",74
558,"'-tryline","@Test public void shouldStartWithEmptyTopicAndStoreDataAndRecoverAllState() throws Exception {
  String topicName=empty-and-recovery-schema-changes;
  kafka.createTopic(topicName,1,1);
  testHistoryTopicContent(topicName,false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\relational\history\KafkaDatabaseHistoryTest.java",93
559,"'-tryline","@Test public void shouldIgnoreUnparseableMessages() throws Exception {
  String topicName=ignore-unparseable-schema-changes;
  kafka.createTopic(topicName,1,1);
  final ProducerRecord<String,String> nullRecord=new ProducerRecord<>(topicName,PARTITION_NO,null,null);
  final ProducerRecord<String,String> emptyRecord=new ProducerRecord<>(topicName,PARTITION_NO,null,);
  final ProducerRecord<String,String> noSourceRecord=new ProducerRecord<>(topicName,PARTITION_NO,null,{\position\:{\filename\:\my-txn-file.log\,\position\:39},\databaseName\:\db1\,\ddl\:\DROP TABLE foo;\});
  final ProducerRecord<String,String> noPositionRecord=new ProducerRecord<>(topicName,PARTITION_NO,null,{\source\:{\server\:\my-server\},\databaseName\:\db1\,\ddl\:\DROP TABLE foo;\});
  final ProducerRecord<String,String> invalidJSONRecord1=new ProducerRecord<>(topicName,PARTITION_NO,null,{\source\:{\server\:\my-server\},\position\:{\filename\:\my-txn-file.log\,\position\:39},\databaseName\:\db1\,\ddl\:\DROP TABLE foo;\);
  final ProducerRecord<String,String> invalidJSONRecord2=new ProducerRecord<>(topicName,PARTITION_NO,null,\source\:{\server\:\my-server\},\position\:{\filename\:\my-txn-file.log\,\position\:39},\databaseName\:\db1\,\ddl\:\DROP TABLE foo;\});
  final ProducerRecord<String,String> invalidSQL=new ProducerRecord<>(topicName,PARTITION_NO,null,{\source\:{\server\:\my-server\},\position\:{\filename\:\my-txn-file.log\,\position\:39},\databaseName\:\db1\,\ddl\:\xxxDROP TABLE foo;\});
  final Configuration intruderConfig=Configuration.create().withDefault(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,kafka.brokerList()).withDefault(ProducerConfig.CLIENT_ID_CONFIG,intruder).withDefault(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,StringSerializer.class).withDefault(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,StringSerializer.class).build();
  try (final KafkaProducer<String,String> producer=new KafkaProducer<>(intruderConfig.asProperties())){
    producer.send(nullRecord).get();
    producer.send(emptyRecord).get();
    producer.send(noSourceRecord).get();
    producer.send(noPositionRecord).get();
    producer.send(invalidJSONRecord1).get();
    producer.send(invalidJSONRecord2).get();
    producer.send(invalidSQL).get();
  }
   testHistoryTopicContent(topicName,true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\relational\history\KafkaDatabaseHistoryTest.java",214
560,"'-tryline","@Test(expected=ParsingException.class) public void shouldStopOnUnparseableSQL() throws Exception {
  String topicName=stop-on-unparseable-schema-changes;
  kafka.createTopic(topicName,1,1);
  final ProducerRecord<String,String> invalidSQL=new ProducerRecord<>(topicName,PARTITION_NO,null,{\source\:{\server\:\my-server\},\position\:{\filename\:\my-txn-file.log\,\position\:39},\databaseName\:\db1\,\ddl\:\xxxDROP TABLE foo;\});
  final Configuration intruderConfig=Configuration.create().withDefault(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,kafka.brokerList()).withDefault(ProducerConfig.CLIENT_ID_CONFIG,intruder).withDefault(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,StringSerializer.class).withDefault(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,StringSerializer.class).build();
  try (final KafkaProducer<String,String> producer=new KafkaProducer<>(intruderConfig.asProperties())){
    producer.send(invalidSQL).get();
  }
   testHistoryTopicContent(topicName,false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\relational\history\KafkaDatabaseHistoryTest.java",254
561,"'-tryline","@Override protected SnapshotContext prepare(ChangeEventSourceContext context) throws Exception {
  if (connectorConfig.getPdbName() != null) {
    jdbcConnection.setSessionToPdb(connectorConfig.getPdbName());
  }
  return new OracleSnapshotContext(connectorConfig.getCatalogName());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\OracleSnapshotChangeEventSource.java",71
562,"'-tryline","@Override protected Set<TableId> getAllTableIds(RelationalSnapshotContext ctx) throws Exception {
  return jdbcConnection.getAllTableIds(ctx.catalogName);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\OracleSnapshotChangeEventSource.java",80
563,"'-tryline","@Override protected void determineSnapshotOffset(RelationalSnapshotContext ctx) throws Exception {
  Optional<Scn> latestTableDdlScn=getLatestTableDdlScn(ctx);
  Scn currentScn;
  do {
    currentScn=getCurrentScn(ctx);
  }
 while (areSameTimestamp(latestTableDdlScn.orElse(null),currentScn));
  ctx.offset=OracleOffsetContext.create().logicalName(connectorConfig).scn(currentScn).transactionContext(new TransactionContext()).build();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\OracleSnapshotChangeEventSource.java",110
564,"'-tryline","@Test public void stringTypes() throws Exception {
  int expectedRecordCount=0;
  if (insertRecordsDuringTest()) {
    insertStringTypes();
  }
  Testing.debug(Inserted);
  expectedRecordCount++;
  final SourceRecords records=consumeRecordsByTopic(expectedRecordCount);
  List<SourceRecord> testTableRecords=records.recordsForTopic(server1.DEBEZIUM.TYPE_STRING);
  assertThat(testTableRecords).hasSize(expectedRecordCount);
  SourceRecord record=testTableRecords.get(0);
  VerifyRecord.isValid(record);
  if (insertRecordsDuringTest()) {
    VerifyRecord.isValidInsert(record,ID,1);
  }
 else {
    VerifyRecord.isValidRead(record,ID,1);
  }
  Struct after=(Struct)((Struct)record.value()).get(after);
  assertRecord(after,EXPECTED_STRING);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\AbstractOracleDatatypesTest.java",251
565,"'-tryline","@Test public void fpTypes() throws Exception {
  int expectedRecordCount=0;
  if (insertRecordsDuringTest()) {
    insertFpTypes();
  }
  Testing.debug(Inserted);
  expectedRecordCount++;
  final SourceRecords records=consumeRecordsByTopic(expectedRecordCount);
  List<SourceRecord> testTableRecords=records.recordsForTopic(server1.DEBEZIUM.TYPE_FP);
  assertThat(testTableRecords).hasSize(expectedRecordCount);
  SourceRecord record=testTableRecords.get(0);
  VerifyRecord.isValid(record);
  if (insertRecordsDuringTest()) {
    VerifyRecord.isValidInsert(record,ID,1);
  }
 else {
    VerifyRecord.isValidRead(record,ID,1);
  }
  Struct after=(Struct)((Struct)record.value()).get(after);
  assertRecord(after,EXPECTED_FP);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\AbstractOracleDatatypesTest.java",282
566,"'-tryline","@Test @FixFor(DBZ-1552) public void fpTypesAsString() throws Exception {
  stopConnector();
  initializeConnectorTestFramework();
  final Configuration config=connectorConfig().with(OracleConnectorConfig.DECIMAL_HANDLING_MODE,DecimalMode.STRING).build();
  start(OracleConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  int expectedRecordCount=0;
  if (insertRecordsDuringTest()) {
    insertFpTypes();
  }
  Testing.debug(Inserted);
  expectedRecordCount++;
  final SourceRecords records=consumeRecordsByTopic(expectedRecordCount);
  List<SourceRecord> testTableRecords=records.recordsForTopic(server1.DEBEZIUM.TYPE_FP);
  assertThat(testTableRecords).hasSize(expectedRecordCount);
  SourceRecord record=testTableRecords.get(0);
  VerifyRecord.isValid(record);
  if (insertRecordsDuringTest()) {
    VerifyRecord.isValidInsert(record,ID,1);
  }
 else {
    VerifyRecord.isValidRead(record,ID,1);
  }
  Struct after=(Struct)((Struct)record.value()).get(after);
  assertRecord(after,EXPECTED_FP_AS_STRING);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\AbstractOracleDatatypesTest.java",313
567,"'-tryline","@Test @FixFor(DBZ-1552) public void fpTypesAsDouble() throws Exception {
  stopConnector();
  initializeConnectorTestFramework();
  final Configuration config=connectorConfig().with(OracleConnectorConfig.DECIMAL_HANDLING_MODE,DecimalMode.DOUBLE).build();
  start(OracleConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  int expectedRecordCount=0;
  if (insertRecordsDuringTest()) {
    insertFpTypes();
  }
  Testing.debug(Inserted);
  expectedRecordCount++;
  final SourceRecords records=consumeRecordsByTopic(expectedRecordCount);
  List<SourceRecord> testTableRecords=records.recordsForTopic(server1.DEBEZIUM.TYPE_FP);
  assertThat(testTableRecords).hasSize(expectedRecordCount);
  SourceRecord record=testTableRecords.get(0);
  VerifyRecord.isValid(record);
  if (insertRecordsDuringTest()) {
    VerifyRecord.isValidInsert(record,ID,1);
  }
 else {
    VerifyRecord.isValidRead(record,ID,1);
  }
  Struct after=(Struct)((Struct)record.value()).get(after);
  assertRecord(after,EXPECTED_FP_AS_DOUBLE);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\AbstractOracleDatatypesTest.java",356
568,"'-tryline","@Test public void intTypes() throws Exception {
  int expectedRecordCount=0;
  if (insertRecordsDuringTest()) {
    insertIntTypes();
  }
  Testing.debug(Inserted);
  expectedRecordCount++;
  final SourceRecords records=consumeRecordsByTopic(expectedRecordCount);
  List<SourceRecord> testTableRecords=records.recordsForTopic(server1.DEBEZIUM.TYPE_INT);
  assertThat(testTableRecords).hasSize(expectedRecordCount);
  SourceRecord record=testTableRecords.get(0);
  VerifyRecord.isValid(record);
  if (insertRecordsDuringTest()) {
    VerifyRecord.isValidInsert(record,ID,1);
  }
 else {
    VerifyRecord.isValidRead(record,ID,1);
  }
  Struct after=(Struct)((Struct)record.value()).get(after);
  assertRecord(after,EXPECTED_INT);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\AbstractOracleDatatypesTest.java",399
569,"'-tryline","@Test public void timeTypes() throws Exception {
  int expectedRecordCount=0;
  if (insertRecordsDuringTest()) {
    insertTimeTypes();
  }
  Testing.debug(Inserted);
  expectedRecordCount++;
  final SourceRecords records=consumeRecordsByTopic(expectedRecordCount);
  List<SourceRecord> testTableRecords=records.recordsForTopic(server1.DEBEZIUM.TYPE_TIME);
  assertThat(testTableRecords).hasSize(expectedRecordCount);
  SourceRecord record=testTableRecords.get(0);
  VerifyRecord.isValid(record);
  if (insertRecordsDuringTest()) {
    VerifyRecord.isValidInsert(record,ID,1);
  }
 else {
    VerifyRecord.isValidRead(record,ID,1);
  }
  Struct after=(Struct)((Struct)record.value()).get(after);
  assertRecord(after,EXPECTED_TIME);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\AbstractOracleDatatypesTest.java",430
570,"'-tryline","@Before public void beforeEach() throws Exception {
  fastDmlParser=new LogMinerDmlParser();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\LogMinerDmlParserTest.java",28
571,"'-tryline","@Test @FixFor(DBZ-3078) public void testParsingInsert() throws Exception {
  String sql=insert into \DEBEZIUM\.\TEST\(\ID\,\NAME\,\TS\,\UT\,\DATE\,\UT2\,\C1\,\C2\) values  + ('1','Acme',TO_TIMESTAMP('2020-02-01 00:00:00.'),Unsupported Type, + TO_DATE('2020-02-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'),Unsupported Type,NULL,NULL);;
  LogMinerDmlEntry entry=fastDmlParser.parse(sql,null,null,null);
  assertThat(entry.getCommandType()).isEqualTo(Operation.CREATE);
  assertThat(entry.getOldValues()).isEmpty();
  assertThat(entry.getNewValues()).hasSize(8);
  assertThat(entry.getNewValues().get(0).getColumnName()).isEqualTo(ID);
  assertThat(entry.getNewValues().get(1).getColumnName()).isEqualTo(NAME);
  assertThat(entry.getNewValues().get(2).getColumnName()).isEqualTo(TS);
  assertThat(entry.getNewValues().get(3).getColumnName()).isEqualTo(UT);
  assertThat(entry.getNewValues().get(4).getColumnName()).isEqualTo(DATE);
  assertThat(entry.getNewValues().get(5).getColumnName()).isEqualTo(UT2);
  assertThat(entry.getNewValues().get(6).getColumnName()).isEqualTo(C1);
  assertThat(entry.getNewValues().get(0).getColumnData()).isEqualTo(1);
  assertThat(entry.getNewValues().get(1).getColumnData()).isEqualTo(Acme);
  assertThat(entry.getNewValues().get(2).getColumnData()).isEqualTo(TO_TIMESTAMP('2020-02-01 00:00:00.'));
  assertThat(entry.getNewValues().get(3).getColumnData()).isNull();
  assertThat(entry.getNewValues().get(4).getColumnData()).isEqualTo(TO_DATE('2020-02-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'));
  assertThat(entry.getNewValues().get(5).getColumnData()).isNull();
  assertThat(entry.getNewValues().get(6).getColumnData()).isNull();
  assertThat(entry.getNewValues().get(7).getColumnData()).isNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\LogMinerDmlParserTest.java",38
572,"'-tryline","@Test @FixFor(DBZ-3078) public void testParsingUpdate() throws Exception {
  String sql=update \DEBEZIUM\.\TEST\  + set \NAME\ = 'Bob', \TS\ = TO_TIMESTAMP('2020-02-02 00:00:00.'), \UT\ = Unsupported Type,  + \DATE\ = TO_DATE('2020-02-02 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), \UT2\ = Unsupported Type, + \C1\ = NULL where \ID\ = '1' and \NAME\ = 'Acme' and \TS\ = TO_TIMESTAMP('2020-02-01 00:00:00.') and + \UT\ = Unsupported Type and \DATE\ = TO_DATE('2020-02-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS') and + \UT2\ = Unsupported Type and \C1\ = NULL and \IS\ IS NULL and \IS2\ IS NULL;;
  LogMinerDmlEntry entry=fastDmlParser.parse(sql,null,null,null);
  assertThat(entry.getCommandType()).isEqualTo(Operation.UPDATE);
  assertThat(entry.getOldValues()).hasSize(9);
  assertThat(entry.getOldValues().get(0).getColumnName()).isEqualTo(ID);
  assertThat(entry.getOldValues().get(1).getColumnName()).isEqualTo(NAME);
  assertThat(entry.getOldValues().get(2).getColumnName()).isEqualTo(TS);
  assertThat(entry.getOldValues().get(3).getColumnName()).isEqualTo(UT);
  assertThat(entry.getOldValues().get(4).getColumnName()).isEqualTo(DATE);
  assertThat(entry.getOldValues().get(5).getColumnName()).isEqualTo(UT2);
  assertThat(entry.getOldValues().get(0).getColumnData()).isEqualTo(1);
  assertThat(entry.getOldValues().get(1).getColumnData()).isEqualTo(Acme);
  assertThat(entry.getOldValues().get(2).getColumnData()).isEqualTo(TO_TIMESTAMP('2020-02-01 00:00:00.'));
  assertThat(entry.getOldValues().get(3).getColumnData()).isNull();
  assertThat(entry.getOldValues().get(4).getColumnData()).isEqualTo(TO_DATE('2020-02-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'));
  assertThat(entry.getOldValues().get(5).getColumnData()).isNull();
  assertThat(entry.getOldValues().get(6).getColumnData()).isNull();
  assertThat(entry.getOldValues().get(7).getColumnData()).isNull();
  assertThat(entry.getNewValues()).hasSize(9);
  assertThat(entry.getNewValues().get(0).getColumnName()).isEqualTo(ID);
  assertThat(entry.getNewValues().get(1).getColumnName()).isEqualTo(NAME);
  assertThat(entry.getNewValues().get(2).getColumnName()).isEqualTo(TS);
  assertThat(entry.getNewValues().get(3).getColumnName()).isEqualTo(UT);
  assertThat(entry.getNewValues().get(4).getColumnName()).isEqualTo(DATE);
  assertThat(entry.getNewValues().get(5).getColumnName()).isEqualTo(UT2);
  assertThat(entry.getNewValues().get(0).getColumnData()).isEqualTo(1);
  assertThat(entry.getNewValues().get(1).getColumnData()).isEqualTo(Bob);
  assertThat(entry.getNewValues().get(2).getColumnData()).isEqualTo(TO_TIMESTAMP('2020-02-02 00:00:00.'));
  assertThat(entry.getNewValues().get(3).getColumnData()).isNull();
  assertThat(entry.getNewValues().get(4).getColumnData()).isEqualTo(TO_DATE('2020-02-02 00:00:00', 'YYYY-MM-DD HH24:MI:SS'));
  assertThat(entry.getNewValues().get(5).getColumnData()).isNull();
  assertThat(entry.getNewValues().get(6).getColumnData()).isNull();
  assertThat(entry.getNewValues().get(7).getColumnData()).isNull();
  assertThat(entry.getNewValues().get(8).getColumnData()).isNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\LogMinerDmlParserTest.java",66
573,"'-tryline","@Test @FixFor(DBZ-3078) public void testParsingDelete() throws Exception {
  String sql=delete from \DEBEZIUM\.\TEST\  + where \ID\ = '1' and \NAME\ = 'Acme' and \TS\ = TO_TIMESTAMP('2020-02-01 00:00:00.') and  + \UT\ = Unsupported Type and \DATE\ = TO_DATE('2020-02-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS') and + \IS\ IS NULL and \IS2\ IS NULL;;
  LogMinerDmlEntry entry=fastDmlParser.parse(sql,null,null,null);
  assertThat(entry.getCommandType()).isEqualTo(Operation.DELETE);
  assertThat(entry.getOldValues()).hasSize(7);
  assertThat(entry.getOldValues().get(0).getColumnName()).isEqualTo(ID);
  assertThat(entry.getOldValues().get(1).getColumnName()).isEqualTo(NAME);
  assertThat(entry.getOldValues().get(2).getColumnName()).isEqualTo(TS);
  assertThat(entry.getOldValues().get(3).getColumnName()).isEqualTo(UT);
  assertThat(entry.getOldValues().get(4).getColumnName()).isEqualTo(DATE);
  assertThat(entry.getOldValues().get(0).getColumnData()).isEqualTo(1);
  assertThat(entry.getOldValues().get(1).getColumnData()).isEqualTo(Acme);
  assertThat(entry.getOldValues().get(2).getColumnData()).isEqualTo(TO_TIMESTAMP('2020-02-01 00:00:00.'));
  assertThat(entry.getOldValues().get(3).getColumnData()).isNull();
  assertThat(entry.getOldValues().get(4).getColumnData()).isEqualTo(TO_DATE('2020-02-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'));
  assertThat(entry.getOldValues().get(5).getColumnData()).isNull();
  assertThat(entry.getOldValues().get(6).getColumnData()).isNull();
  assertThat(entry.getNewValues()).isEmpty();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\LogMinerDmlParserTest.java",111
574,"'-tryline","@Test @FixFor(DBZ-3235) public void testParsingUpdateWithNoWhereClauseIsAcceptable() throws Exception {
  String sql=update \DEBEZIUM\.\TEST\ set \COL1\ = '1', \COL2\ = NULL, \COL3\ = 'Hello';;
  LogMinerDmlEntry entry=fastDmlParser.parse(sql,null,null,null);
  assertThat(entry.getCommandType()).isEqualTo(Operation.UPDATE);
  assertThat(entry.getOldValues()).isEmpty();
  assertThat(entry.getNewValues()).hasSize(3);
  assertThat(entry.getNewValues().get(0).getColumnName()).isEqualTo(COL1);
  assertThat(entry.getNewValues().get(0).getColumnData()).isEqualTo(1);
  assertThat(entry.getNewValues().get(1).getColumnName()).isEqualTo(COL2);
  assertThat(entry.getNewValues().get(1).getColumnData()).isNull();
  assertThat(entry.getNewValues().get(2).getColumnName()).isEqualTo(COL3);
  assertThat(entry.getNewValues().get(2).getColumnData()).isEqualTo(Hello);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\LogMinerDmlParserTest.java",137
575,"'-tryline","@Test @FixFor(DBZ-3235) public void testParsingDeleteWithNoWhereClauseIsAcceptable() throws Exception {
  String sql=delete from \DEBEZIUM\.\TEST\;;
  LogMinerDmlEntry entry=fastDmlParser.parse(sql,null,null,null);
  assertThat(entry.getCommandType()).isEqualTo(Operation.DELETE);
  assertThat(entry.getOldValues()).isEmpty();
  assertThat(entry.getNewValues()).isEmpty();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\LogMinerDmlParserTest.java",154
576,"'-tryline","@Test @FixFor(DBZ-3258) public void testNameWithWhitespaces() throws Exception {
  String sql=insert into \UNKNOWN\.\OBJ# 74858\(\COL 1\) values (1);
  LogMinerDmlEntry entry=fastDmlParser.parse(sql,null,null,null);
  assertThat(entry.getCommandType()).isEqualTo(Operation.CREATE);
  assertThat(entry.getOldValues()).isEmpty();
  assertThat(entry.getNewValues()).hasSize(1);
  assertThat(entry.getNewValues().get(0).getColumnName()).isEqualTo(COL 1);
  assertThat(entry.getNewValues().get(0).getColumnData()).isEqualTo(1);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\LogMinerDmlParserTest.java",165
577,"'-tryline","@Test @FixFor(DBZ-3305) public void testParsingUpdateWithNoWhereClauseFunctionAsLastColumn() throws Exception {
  String sql=update \TICKETUSER\.\CRS_ORDER\ set \AMOUNT_PAID\ = '0', \AMOUNT_UNPAID\ = '540',  + \PAY_STATUS\ = '10111015', \IS_DEL\ = '0', \TM_UPDATE\ = TO_DATE('2021-03-17 10:18:55', 'YYYY-MM-DD HH24:MI:SS');;
  LogMinerDmlEntry entry=fastDmlParser.parse(sql,null,null,null);
  assertThat(entry.getCommandType()).isEqualTo(Operation.UPDATE);
  assertThat(entry.getOldValues()).isEmpty();
  assertThat(entry.getNewValues()).hasSize(5);
  assertThat(entry.getNewValues().get(0).getColumnName()).isEqualTo(AMOUNT_PAID);
  assertThat(entry.getNewValues().get(1).getColumnName()).isEqualTo(AMOUNT_UNPAID);
  assertThat(entry.getNewValues().get(2).getColumnName()).isEqualTo(PAY_STATUS);
  assertThat(entry.getNewValues().get(3).getColumnName()).isEqualTo(IS_DEL);
  assertThat(entry.getNewValues().get(4).getColumnName()).isEqualTo(TM_UPDATE);
  assertThat(entry.getNewValues().get(0).getColumnData()).isEqualTo(0);
  assertThat(entry.getNewValues().get(1).getColumnData()).isEqualTo(540);
  assertThat(entry.getNewValues().get(2).getColumnData()).isEqualTo(10111015);
  assertThat(entry.getNewValues().get(3).getColumnData()).isEqualTo(0);
  assertThat(entry.getNewValues().get(4).getColumnData()).isEqualTo(TO_DATE('2021-03-17 10:18:55', 'YYYY-MM-DD HH24:MI:SS'));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\LogMinerDmlParserTest.java",178
578,"'-tryline","@Test @FixFor(DBZ-2754) public void testCustomTransactionRetention() throws Exception {
  CdcSourceTaskContext taskContext=getSourceTaskContext();
  Configuration config=Configuration.create().with(OracleConnectorConfig.LOG_MINING_TRANSACTION_RETENTION,3).build();
  OracleConnectorConfig connectorConfig=new OracleConnectorConfig(config);
  LogMinerMetrics metrics=new LogMinerMetrics(taskContext,connectorConfig);
  assertThat(metrics.getHoursToKeepTransactionInBuffer()).isEqualTo(3);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\LogMinerMetricsTest.java",134
579,"'-tryline","@Test public void shouldParseAliasUpdate() throws Exception {
  String createStatement=IoUtil.read(IoUtil.getResourceAsStream(ddl/create_table.sql,null,getClass(),null,null));
  ddlParser.parse(createStatement,tables);
  String dml=update \ + FULL_TABLE_NAME + \ a set a.\col1\ = '9', a.col2 = 'diFFerent', a.col3 = 'anotheR', a.col4 = '123', a.col6 = 5.2, + a.col8 = TO_TIMESTAMP('2019-05-14 02:28:32.302000'), a.col10 = + CLOB_DATA+ , a.col11 = null, a.col12 = '1', + a.col7 = TO_DATE('2018-02-22 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), + a.col13 = TO_DATE('2018-02-22 00:00:00', 'YYYY-MM-DD HH24:MI:SS') + where a.ID = 5 and a.COL1 = 6 and a.\COL2\ = 'text' + and a.COL3 = 'text' and a.COL4 IS NULL and a.\COL5\ IS NULL and a.COL6 IS NULL + and a.COL8 = TO_TIMESTAMP('2019-05-14 02:28:32.') and a.col11 is null;;
  antlrDmlParser.parse(dml,tables);
  LogMinerDmlEntry record=antlrDmlParser.getDmlEntry();
  verifyUpdate(record,false,true,9);
  record=sqlDmlParser.parse(dml,tables,TABLE_ID,1);
  verifyUpdate(record,false,true,9);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\OracleDmlParserTest.java",86
580,"'-tryline","@Test public void shouldParseTimestampFormats() throws Exception {
  String createStatement=IoUtil.read(IoUtil.getResourceAsStream(ddl/create_table.sql,null,getClass(),null,null));
  ddlParser.parse(createStatement,tables);
  String format1=TO_TIMESTAMP('2020-09-22 00:09:37.302000');
  String format2=TO_TIMESTAMP('2020-09-22 00:09:37.');
  String format3=TO_TIMESTAMP('2020-09-22 00:09:37');
  String format4=TO_TIMESTAMP('22-SEP-20 12.09.37 AM');
  String format5=TO_TIMESTAMP('22-SEP-20 12.09.37 PM');
  String format6=TO_TIMESTAMP('29-SEP-20 06.02.24.777000 PM');
  String format7=TO_TIMESTAMP('2020-09-22 00:09:37.0');
  parseTimestamp(format1,false);
  parseTimestamp(format2,true);
  parseTimestamp(format3,true);
  parseTimestamp(format4,true);
  parseTimestamp(format5,false);
  parseTimestamp(format6,false);
  parseTimestamp(format7,true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\OracleDmlParserTest.java",107
581,"'-tryline","@Test @FixFor(DBZ-2784) public void shouldParseDateFormats() throws Exception {
  String createStatement=IoUtil.read(IoUtil.getResourceAsStream(ddl/create_table.sql,null,getClass(),null,null));
  ddlParser.parse(createStatement,tables);
  String format1=TO_DATE('2018-02-22 00:00:00', 'YYYY-MM-DD HH24:MI:SS');
  parseDate(format1,true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\OracleDmlParserTest.java",128
582,"'-tryline","@Test public void shouldParseAliasInsert() throws Exception {
  String createStatement=IoUtil.read(IoUtil.getResourceAsStream(ddl/create_table.sql,null,getClass(),null,null));
  ddlParser.parse(createStatement,tables);
  String dml=insert into \ + FULL_TABLE_NAME + \ a (a.\ID\,a.\COL1\,a.\COL2\,a.\COL3\,a.\COL4\,a.\COL5\,a.\COL6\,a.\COL8\,+ a.\COL9\,a.\COL10\,a.\COL13\) values ('5','4','tExt','text',NULL,NULL,NULL,NULL,EMPTY_BLOB(),EMPTY_CLOB(),TO_DATE('2018-02-22 00:00:00', 'YYYY-MM-DD HH24:MI:SS'));;
  antlrDmlParser.parse(dml,tables);
  LogMinerDmlEntry record=antlrDmlParser.getDmlEntry();
  verifyInsert(record);
  record=sqlDmlParser.parse(dml,tables,TABLE_ID,1);
  verifyInsert(record);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\OracleDmlParserTest.java",168
583,"'-tryline","@Test public void shouldParseAliasDelete() throws Exception {
  String createStatement=IoUtil.read(IoUtil.getResourceAsStream(ddl/create_table.sql,null,getClass(),null,null));
  ddlParser.parse(createStatement,tables);
  String dml=delete from \ + FULL_TABLE_NAME + \ a where a.\id\ = 6 and a.\col1\ = 2 and a.\col2\ = 'text' and a.col3 = 'tExt' and a.col4 is null and a.col5 is null +  and a.col6 is null and a.col8 is null and a.col9 is null and a.col10 is null and a.col11 is null and a.col12 is null;
  antlrDmlParser.parse(dml,tables);
  LogMinerDmlEntry record=antlrDmlParser.getDmlEntry();
  verifyDelete(record,true);
  record=sqlDmlParser.parse(dml,tables,TABLE_ID,1);
  verifyDelete(record,true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\OracleDmlParserTest.java",183
584,"'-tryline","@Test public void shouldParseNoWhereClause() throws Exception {
  String createStatement=IoUtil.read(IoUtil.getResourceAsStream(ddl/create_table.sql,null,getClass(),null,null));
  ddlParser.parse(createStatement,tables);
  String dml=update \ + FULL_TABLE_NAME + \ a set a.\id\=1, a.\col1\ = '9', a.col2 = 'diFFerent', a.col3 = 'anotheR', a.col4 = '123', a.col5 = null, a.col6 = 5.2, + a.col8 = TO_TIMESTAMP('2019-05-14 02:28:32.302000'), a.col9=null, a.col10 = + CLOB_DATA+ , a.col11 = null, a.col12 = '1', + a.col7 = TO_DATE('2018-02-22 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), + a.col13 = TO_DATE('2018-02-22 00:00:00', 'YYYY-MM-DD HH24:MI:SS');
  antlrDmlParser.parse(dml,tables);
  LogMinerDmlEntry record=antlrDmlParser.getDmlEntry();
  verifyUpdate(record,false,false,9);
  record=sqlDmlParser.parse(dml,tables,TABLE_ID,1);
  verifyUpdate(record,false,false,9);
  dml=delete from \ + FULL_TABLE_NAME + \ a ;
  antlrDmlParser.parse(dml,tables);
  record=antlrDmlParser.getDmlEntry();
  verifyDelete(record,false);
  record=sqlDmlParser.parse(dml,tables,TABLE_ID,1);
  verifyDelete(record,false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\OracleDmlParserTest.java",199
585,"'-tryline","@Test public void shouldParseInsertAndDeleteTable() throws Exception {
  String createStatement=IoUtil.read(IoUtil.getResourceAsStream(ddl/create_table.sql,null,getClass(),null,null));
  ddlParser.parse(createStatement,tables);
  String dml=insert into \ + FULL_TABLE_NAME + \(\ID\,\COL1\,\COL2\,\COL3\,\COL4\,\COL5\,\COL6\,\COL8\,+ \COL9\,\COL10\) values ('5','4','tExt','text',NULL,NULL,NULL,NULL,EMPTY_BLOB(),EMPTY_CLOB());;
  antlrDmlParser.parse(dml,tables);
  LogMinerDmlEntry record=antlrDmlParser.getDmlEntry();
  verifyInsert(record);
  record=sqlDmlParser.parse(dml,tables,TABLE_ID,1);
  verifyInsert(record);
  dml=delete from \ + FULL_TABLE_NAME + \ where id = 6 and col1 = 2 and col2 = 'text' and col3 = 'tExt' and col4 is null and col5 is null +  and col6 is null and col8 is null and col9 is null and col10 is null and col11 is null and col12 is null;
  antlrDmlParser.parse(dml,tables);
  record=antlrDmlParser.getDmlEntry();
  verifyDelete(record,true);
  record=sqlDmlParser.parse(dml,tables,TABLE_ID,);
  verifyDelete(record,true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\OracleDmlParserTest.java",226
586,"'-tryline","@Test public void shouldParseUpdateTable() throws Exception {
  String createStatement=IoUtil.read(IoUtil.getResourceAsStream(ddl/create_table.sql,null,getClass(),null,null));
  ddlParser.parse(createStatement,tables);
  String dml=update \ + FULL_TABLE_NAME + \ set \col1\ = '9', col2 = 'diFFerent', col3 = 'anotheR', col4 = '123', col6 = '5.2', + col8 = TO_TIMESTAMP('2019-05-14 02:28:32.302000'), col10='clob_', col12 = '1' + where ID = 5 and COL1 = 6 and \COL2\ = 'text' + and COL3 = 'text' and COL4 IS NULL and \COL5\ IS NULL and COL6 IS NULL AND COL7 = TO_DATE('2018-02-22 00:00:00', 'YYYY-MM-DD HH24:MI:SS') + and COL8 = TO_TIMESTAMP('2019-05-14 02:28:32') and col11 = + SPATIAL_DATA+  and COL13 = TO_DATE('2018-02-22 00:00:00', 'YYYY-MM-DD HH24:MI:SS');;
  antlrDmlParser.parse(dml,tables);
  LogMinerDmlEntry record=antlrDmlParser.getDmlEntry();
  record=sqlDmlParser.parse(dml,tables,TABLE_ID,);
  verifyUpdate(record,true,true,11);
  dml=update \ + FULL_TABLE_NAME + \ set \col1\ = '9', col2 = '$2a$10$aHo.lQk.YAkGl5AkXbjJhODBqwNLkqF94slP5oZ3boNzm0d04WnE2', col3 = NULL, col4 = '123', col6 = '5.2', + col8 = TO_TIMESTAMP('2019-05-14 02:28:32.302000'), col10='clob_', col12 = '1' + where ID = 5 and COL1 = 6 and \COL2\ = 'johan.philtjens@dpworld.com' + and COL3 = 'text' and COL4 IS NULL and \COL5\ IS NULL and COL6 IS NULL + and COL8 = TO_TIMESTAMP('2019-05-14 02:28:32') and col11 = + SPATIAL_DATA+ ;;
  record=sqlDmlParser.parse(dml,tables,TABLE_ID,);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\OracleDmlParserTest.java",253
587,"'-tryline","@Test public void shouldParseUpdateNoChangesTable() throws Exception {
  String createStatement=IoUtil.read(IoUtil.getResourceAsStream(ddl/create_table.sql,null,getClass(),null,null));
  ddlParser.parse(createStatement,tables);
  String dml=update \ + FULL_TABLE_NAME + \ set \col1\ = '6', col2 = 'text', col3 = 'text', col4 = NULL + where ID = 5 and COL1 = 6 and \COL2\ = 'text' + and COL3 = Unsupported Type and COL4 IS NULL and \COL5\ IS NULL and COL6 IS NULL and COL7 IS NULL and COL9 IS NULL and COL10 IS NULL and COL12 IS NULL + and COL8 = TO_TIMESTAMP('2019-05-14 02:28:32') and col11 = + SPATIAL_DATA+ ;;
  LogMinerDmlEntry record=sqlDmlParser.parse(dml,tables,TABLE_ID,);
  boolean pass=record.getCommandType().equals(Envelope.Operation.UPDATE) && record.getOldValues().size() == record.getNewValues().size() && record.getNewValues().containsAll(record.getOldValues());
  assertThat(pass);
  assertThat(record.getOldValues().get(4).getColumnData()).isNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\OracleDmlParserTest.java",282
588,"'-tryline","@Test public void shouldParseSpecialCharacters() throws Exception {
  String createStatement=IoUtil.read(IoUtil.getResourceAsStream(ddl/create_table.sql,null,getClass(),null,null));
  ddlParser.parse(createStatement,tables);
  String dml=insert into \ + FULL_TABLE_NAME + \(\ID\,\COL1\,\COL2\,\COL3\,\COL4\,\COL5\,\COL6\,\COL8\,+ \COL9\,\COL10\) values ('5','4','\\','\\test',NULL,NULL,NULL,NULL,EMPTY_BLOB(),EMPTY_CLOB());;
  antlrDmlParser.parse(dml,tables);
  assertThat(antlrDmlParser.getDmlEntry()).isNotNull();
  LogMinerDmlEntry result=sqlDmlParser.parse(dml,tables,TABLE_ID,1);
  assertThat(result).isNotNull();
  LogMinerColumnValue value=result.getNewValues().get(2);
  assertThat(value.getColumnData().toString()).contains(\\);
  dml=delete from \ + FULL_TABLE_NAME + \ where id = 6 and col1 = 2 and col2 = 'te\\xt' and col3 = 'tExt\\' and col4 is null and col5 is null +  and col6 is null and col8 is null and col9 is null and col10 is null and col11 is null and col12 is null;
  antlrDmlParser.parse(dml,tables);
  assertThat(antlrDmlParser.getDmlEntry()).isNotNull();
  result=sqlDmlParser.parse(dml,tables,TABLE_ID,);
  assertThat(result).isNotNull();
  value=result.getOldValues().get(3);
  assertThat(value.getColumnData().toString()).contains(\\);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\OracleDmlParserTest.java",302
589,"'-tryline","@Test public void shouldParseStrangeDml() throws Exception {
  String createStatement=IoUtil.read(IoUtil.getResourceAsStream(ddl/create_table.sql,null,getClass(),null,null));
  ddlParser.parse(createStatement,tables);
  String dml=null;
  LogMinerDmlEntry result=sqlDmlParser.parse(dml,tables,TABLE_ID,);
  assertThat(result).isNull();
  dml=select * from test;null;;
  assertDmlParserException(dml,sqlDmlParser,tables,TABLE_ID,);
  assertThat(result).isNull();
  dml=full dummy mess;
  assertDmlParserException(dml,sqlDmlParser,tables,TABLE_ID,);
  dml=delete from non_exiting_table  +  where id = 6 and col1 = 2 and col2 = 'te\\xt' and col3 = 'tExt\\' and col4 is null and col5 is null  +  and col6 is null and col8 is null and col9 is null and col10 is null and col11 is null and col12 is null;
  assertDmlParserException(dml,sqlDmlParser,tables,TABLE_ID,);
  Update update=mock(Update.class);
  Mockito.when(update.getTables()).thenReturn(new ArrayList<>());
  dml=update  \ + FULL_TABLE_NAME + \ set col1 = 3 +  where id = 6 and col1 = 2 and col2 = 'te\\xt' and col3 = 'tExt\\' and col4 is null and col5 is null +  and col6 is null and col8 is null and col9 is null and col10 is null and col11 is null and col12 is null and col20 is null;
  result=sqlDmlParser.parse(dml,tables,TABLE_ID,);
  assertThat(result.getOldValues().size()).isEqualTo(12);
  assertThat(result.getOldValues().size() == 12).isTrue();
  dml=update \ + FULL_TABLE_NAME + \ set col1 = 3 +  where id = 6 and col1 = 2 and col2 = 'te\\xt' and col30 = 'tExt\\' and col4 is null and col5 is null +  and col6 is null and col8 is null and col9 is null and col10 is null and col11 is null and col21 is null;
  result=sqlDmlParser.parse(dml,tables,TABLE_ID,);
  assertThat(result.getNewValues().size()).isEqualTo(14);
  dml=update table1, \ + FULL_TABLE_NAME + \ set col1 = 3 +  where id = 6 and col1 = 2 and col2 = 'te\\xt' and col3 = 'tExt\\' and col4 is null and col5 is null +  and col6 is null and col8 is null and col9 is null and col10 is null and col11 is null and col12 is null and col20 is null;
  assertDmlParserException(dml,sqlDmlParser,tables,TABLE_ID,);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\OracleDmlParserTest.java",330
590,"'-tryline","@Test public void testValueHolders() throws Exception {
  LogMinerColumnValue column1=new LogMinerColumnValueImpl(COLUMN1,Types.NUMERIC);
  assertThat(column1.equals(column1)).isTrue();
  assertThat(column1.equals(null)).isFalse();
  assertThat(new LogMinerColumnValueWrapper(column1).isProcessed()).isFalse();
  column1.setColumnData(new BigDecimal(5));
  LogMinerColumnValue column2=new LogMinerColumnValueImpl(COLUMN2,Types.VARCHAR);
  column2.setColumnData(Text);
  List<LogMinerColumnValue> newValues=new ArrayList<>();
  newValues.add(column1);
  newValues.add(column2);
  LogMinerDmlEntryImpl dmlEntryExpected=new LogMinerDmlEntryImpl(Envelope.Operation.CREATE,newValues,Collections.emptyList());
  dmlEntryExpected.setTransactionId(transaction_id);
  dmlEntryExpected.setObjectName(TABLE_NAME);
  dmlEntryExpected.setObjectOwner(SCHEMA_NAME);
  dmlEntryExpected.setScn(SCN_ONE);
  dmlEntryExpected.setSourceTime(new Timestamp(1000));
  String createStatement=IoUtil.read(IoUtil.getResourceAsStream(ddl/create_small_table.sql,null,getClass(),null,null));
  ddlParser.parse(createStatement,tables);
  String dml=insert into \ + FULL_TABLE_NAME + \  (\column1\,\column2\) values ('5','Text');;
  LogMinerDmlEntry dmlEntryParsed=sqlDmlParser.parse(dml,tables,TABLE_ID,1);
  assertThat(dmlEntryParsed.equals(dmlEntryExpected)).isTrue();
  assertThat(dmlEntryExpected.getCommandType() == Envelope.Operation.CREATE).isTrue();
  assertThat(dmlEntryExpected.getScn().equals(SCN_ONE)).isTrue();
  assertThat(dmlEntryExpected.getSourceTime().equals(new Timestamp(1000))).isTrue();
  assertThat(dmlEntryExpected.getTransactionId().equals(transaction_id)).isTrue();
  assertThat(dmlEntryExpected.getObjectOwner().equals(SCHEMA_NAME)).isTrue();
  assertThat(dmlEntryExpected.getObjectName().equals(TABLE_NAME)).isTrue();
  assertThat(dmlEntryExpected.equals(null)).isFalse();
  assertThat(dmlEntryExpected.equals(dmlEntryExpected)).isTrue();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\ValueHolderTest.java",65
591,"'-tryline","@Test public void shouldAddRightArchivedRedoFiles() throws Exception {
  Scn currentScn=LogMinerHelper.getCurrentScn(conn);
  Map<String,String> archivedRedoFiles=LogMinerHelper.getMap(conn,SqlUtils.archiveLogsQuery(currentScn,Duration.ofHours(0L)),-1);
  assertThat(archivedRedoFiles.size() == 0).isTrue();
  List<Scn> oneDayArchivedNextScn=getOneDayArchivedLogNextScn(conn);
  Scn oldestArchivedScn=getOldestArchivedScn(oneDayArchivedNextScn);
  List<LogFile> archivedLogsForMining=LogMinerHelper.getArchivedLogFilesForOffsetScn(conn,oldestArchivedScn,Duration.ofHours(0L));
  if (oneDayArchivedNextScn.isEmpty()) {
    assertThat(archivedLogsForMining.size()).isEqualTo(oneDayArchivedNextScn.size());
  }
 else {
    assertThat(archivedLogsForMining.size()).isEqualTo(oneDayArchivedNextScn.size() - 1);
  }
  archivedRedoFiles=LogMinerHelper.getMap(conn,SqlUtils.archiveLogsQuery(oldestArchivedScn.subtract(Scn.valueOf(1L)),Duration.ofHours(0L)),-1);
  assertThat(archivedRedoFiles.size() == (oneDayArchivedNextScn.size())).isTrue();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\LogMinerHelperIT.java",73
592,"'-tryline","@Test public void shouldAddRightRedoFiles() throws Exception {
  List<Scn> oneDayArchivedNextScn=getOneDayArchivedLogNextScn(conn);
  Scn oldestArchivedScn=getOldestArchivedScn(oneDayArchivedNextScn);
  LogMinerHelper.setRedoLogFilesForMining(conn,oldestArchivedScn,Duration.ofHours(0L));
  List<LogFile> onlineLogFilesForMining=LogMinerHelper.getOnlineLogFilesForOffsetScn(conn,oldestArchivedScn);
  List<LogFile> archivedLogFilesForMining=LogMinerHelper.getArchivedLogFilesForOffsetScn(conn,oldestArchivedScn,Duration.ofHours(0L));
  List<String> redoLogFiles=onlineLogFilesForMining.stream().filter(e -> {
    for (    LogFile log : archivedLogFilesForMining) {
      if (log.isSameRange(e)) {
        return false;
      }
    }
    return true;
  }
).map(LogFile::getFileName).collect(Collectors.toList());
  int redoLogFilesCount=redoLogFiles.size();
  assertThat(redoLogFilesCount + archivedLogFilesForMining.size()).isEqualTo(getNumberOfAddedLogFiles(conn));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\LogMinerHelperIT.java",95
593,"'-tryline","private Scn getOldestArchivedScn(List<Scn> oneDayArchivedNextScn) throws Exception {
  Scn oldestArchivedScn;
  Optional<Scn> archivedScn=oneDayArchivedNextScn.stream().min(Scn::compareTo);
  if (archivedScn.isPresent()) {
    oldestArchivedScn=archivedScn.get();
  }
 else {
    oldestArchivedScn=Scn.ZERO;
  }
  return oldestArchivedScn;
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\LogMinerHelperIT.java",117
594,"'-tryline","@Before public void beforeEach() throws Exception {
  current=0;
  mockRows=new String[][]{};
  ResultSet rs=Mockito.mock(ResultSet.class);
  Connection conn=Mockito.mock(Connection.class);
  Mockito.when(connection.connection()).thenReturn(conn);
  Mockito.when(connection.connection(false)).thenReturn(conn);
  PreparedStatement pstmt=Mockito.mock(PreparedStatement.class);
  Mockito.when(conn.prepareStatement(anyString())).thenReturn(pstmt);
  Mockito.when(pstmt.executeQuery()).thenReturn(rs);
  Mockito.when(rs.next()).thenAnswer(it -> ++current > mockRows.length ? false : true);
  Mockito.when(rs.getString(anyInt())).thenAnswer(it -> {
    return mockRows[current - 1][(Integer)it.getArguments()[0] - 1];
  }
);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\LogMinerHelperTest.java",33
595,"'-tryline","@Test public void logsWithRegularScns() throws Exception {
  mockRows=new String[][]{new String[]{logfile1,103400,11,103700,ACTIVE},new String[]{logfile2,103700,12,104000,ACTIVE}};
  List<LogFile> onlineLogs=LogMinerHelper.getOnlineLogFilesForOffsetScn(connection,Scn.valueOf(10L));
  assertEquals(onlineLogs.size(),2);
  assertEquals(getLogFileNextScnByName(onlineLogs,logfile1),Scn.valueOf(103400L));
  assertEquals(getLogFileNextScnByName(onlineLogs,logfile2),Scn.valueOf(103700L));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\LogMinerHelperTest.java",53
596,"'-tryline","@Test public void excludeLogsBeforeOffsetScn() throws Exception {
  mockRows=new String[][]{new String[]{logfile1,103400,11,103700,ACTIVE},new String[]{logfile2,103700,12,104000,ACTIVE},new String[]{logfile3,500,13,103100,ACTIVE}};
  List<LogFile> onlineLogs=LogMinerHelper.getOnlineLogFilesForOffsetScn(connection,Scn.valueOf(600L));
  assertEquals(onlineLogs.size(),2);
  assertNull(getLogFileNextScnByName(onlineLogs,logfile3));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\LogMinerHelperTest.java",67
597,"'-tryline","@Test public void nullsHandledAsMaxScn() throws Exception {
  mockRows=new String[][]{new String[]{logfile1,103400,11,103700,ACTIVE},new String[]{logfile2,103700,12,104000,ACTIVE},new String[]{logfile3,null,13,103100,CURRENT}};
  List<LogFile> onlineLogs=LogMinerHelper.getOnlineLogFilesForOffsetScn(connection,Scn.valueOf(600L));
  assertEquals(onlineLogs.size(),3);
  assertEquals(getLogFileNextScnByName(onlineLogs,logfile3),Scn.MAX);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\LogMinerHelperTest.java",81
598,"'-tryline","@Test public void canHandleMaxScn() throws Exception {
  mockRows=new String[][]{new String[]{logfile1,103400,11,103700,ACTIVE},new String[]{logfile2,103700,12,104000,ACTIVE},new String[]{logfile3,18446744073709551615,13,104300,CURRENT}};
  List<LogFile> onlineLogs=LogMinerHelper.getOnlineLogFilesForOffsetScn(connection,Scn.valueOf(600L));
  assertEquals(onlineLogs.size(),3);
  assertEquals(getLogFileNextScnByName(onlineLogs,logfile3),Scn.MAX);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\LogMinerHelperTest.java",95
599,"'-tryline","@Test public void logsWithVeryLargeScnAreSupported() throws Exception {
  String scnLonger=18446744073709551615;
  mockRows=new String[][]{new String[]{logfile1,103400,11,103700,ACTIVE},new String[]{logfile2,103700,12,104000,ACTIVE},new String[]{logfile3,scnLonger,13,104300,ACTIVE}};
  List<LogFile> onlineLogs=LogMinerHelper.getOnlineLogFilesForOffsetScn(connection,Scn.valueOf(600L));
  assertEquals(onlineLogs.size(),3);
  assertEquals(getLogFileNextScnByName(onlineLogs,logfile3),Scn.valueOf(scnLonger));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\LogMinerHelperTest.java",109
600,"'-tryline","@Test public void archiveLogsWithRegularScns() throws Exception {
  mockRows=new String[][]{new String[]{logfile1,103400,11,ACTIVE},new String[]{logfile2,103700,12,ACTIVE}};
  List<LogFile> onlineLogs=LogMinerHelper.getArchivedLogFilesForOffsetScn(connection,Scn.valueOf(500L),Duration.ofDays(60));
  assertEquals(onlineLogs.size(),2);
  assertEquals(getLogFileNextScnByName(onlineLogs,logfile1),Scn.valueOf(103400L));
  assertEquals(getLogFileNextScnByName(onlineLogs,logfile2),Scn.valueOf(103700L));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\LogMinerHelperTest.java",125
601,"'-tryline","@Test public void archiveExcludeLogsBeforeOffsetScn() throws Exception {
  mockRows=new String[][]{new String[]{logfile1,103400,11},new String[]{logfile2,103700,12}};
  List<LogFile> onlineLogs=LogMinerHelper.getArchivedLogFilesForOffsetScn(connection,Scn.valueOf(600L),Duration.ofDays(60));
  assertEquals(onlineLogs.size(),2);
  assertNull(getLogFileNextScnByName(onlineLogs,logfile3));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\LogMinerHelperTest.java",140
602,"'-tryline","@Test public void archiveNullsHandledAsMaxScn() throws Exception {
  mockRows=new String[][]{new String[]{logfile1,103400,11,103700},new String[]{logfile2,103700,12,104000},new String[]{logfile3,null,13,104300}};
  List<LogFile> onlineLogs=LogMinerHelper.getArchivedLogFilesForOffsetScn(connection,Scn.valueOf(500L),Duration.ofDays(60));
  assertEquals(onlineLogs.size(),3);
  assertEquals(getLogFileNextScnByName(onlineLogs,logfile3),Scn.MAX);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\LogMinerHelperTest.java",155
603,"'-tryline","@Test public void archiveLogsWithVeryLargeScnAreSupported() throws Exception {
  String scnLonger=18446744073709551615;
  mockRows=new String[][]{new String[]{logfile1,103400,11},new String[]{logfile2,103700,12},new String[]{logfile3,scnLonger,13}};
  List<LogFile> onlineLogs=LogMinerHelper.getArchivedLogFilesForOffsetScn(connection,Scn.valueOf(500L),Duration.ofDays(60));
  assertEquals(onlineLogs.size(),3);
  assertEquals(getLogFileNextScnByName(onlineLogs,logfile3),Scn.valueOf(scnLonger));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\LogMinerHelperTest.java",169
604,"'-tryline","@Test public void validXtreamNoUrl() throws Exception {
  final OracleConnectorConfig connectorConfig=new OracleConnectorConfig(Configuration.create().with(OracleConnectorConfig.SERVER_NAME,myserver).with(OracleConnectorConfig.HOSTNAME,MyHostname).with(OracleConnectorConfig.DATABASE_NAME,mydb).with(OracleConnectorConfig.XSTREAM_SERVER_NAME,myserver).with(OracleConnectorConfig.USER,debezium).with(KafkaDatabaseHistory.BOOTSTRAP_SERVERS,localhost:9092).with(KafkaDatabaseHistory.TOPIC,history).build());
  assertTrue(connectorConfig.validateAndRecord(OracleConnectorConfig.ALL_FIELDS,LOGGER::error));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorConfigTest.java",34
605,"'-tryline","@Test public void validLogminerNoUrl() throws Exception {
  final OracleConnectorConfig connectorConfig=new OracleConnectorConfig(Configuration.create().with(OracleConnectorConfig.CONNECTOR_ADAPTER,logminer).with(OracleConnectorConfig.SERVER_NAME,myserver).with(OracleConnectorConfig.HOSTNAME,MyHostname).with(OracleConnectorConfig.DATABASE_NAME,mydb).with(OracleConnectorConfig.USER,debezium).with(KafkaDatabaseHistory.BOOTSTRAP_SERVERS,localhost:9092).with(KafkaDatabaseHistory.TOPIC,history).build());
  assertTrue(connectorConfig.validateAndRecord(OracleConnectorConfig.ALL_FIELDS,LOGGER::error));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorConfigTest.java",50
606,"'-tryline","@Test public void validXtreamWithUrl() throws Exception {
  final OracleConnectorConfig connectorConfig=new OracleConnectorConfig(Configuration.create().with(OracleConnectorConfig.SERVER_NAME,myserver).with(OracleConnectorConfig.URL,jdbc:oci:thin:@myserver/mydatabase).with(OracleConnectorConfig.DATABASE_NAME,mydb).with(OracleConnectorConfig.XSTREAM_SERVER_NAME,myserver).with(OracleConnectorConfig.USER,debezium).with(KafkaDatabaseHistory.BOOTSTRAP_SERVERS,localhost:9092).with(KafkaDatabaseHistory.TOPIC,history).build());
  assertTrue(connectorConfig.validateAndRecord(OracleConnectorConfig.ALL_FIELDS,LOGGER::error));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorConfigTest.java",66
607,"'-tryline","@Test public void validLogminerWithUrl() throws Exception {
  final OracleConnectorConfig connectorConfig=new OracleConnectorConfig(Configuration.create().with(OracleConnectorConfig.CONNECTOR_ADAPTER,logminer).with(OracleConnectorConfig.SERVER_NAME,myserver).with(OracleConnectorConfig.URL,MyHostname).with(OracleConnectorConfig.DATABASE_NAME,mydb).with(OracleConnectorConfig.USER,debezium).with(KafkaDatabaseHistory.BOOTSTRAP_SERVERS,localhost:9092).with(KafkaDatabaseHistory.TOPIC,history).build());
  assertTrue(connectorConfig.validateAndRecord(OracleConnectorConfig.ALL_FIELDS,LOGGER::error));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorConfigTest.java",82
608,"'-tryline","@Test public void validUrlTNS() throws Exception {
  final OracleConnectorConfig connectorConfig=new OracleConnectorConfig(Configuration.create().with(OracleConnectorConfig.CONNECTOR_ADAPTER,logminer).with(OracleConnectorConfig.SERVER_NAME,myserver).with(OracleConnectorConfig.URL,jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=192.68.1.11)(PORT=1701))(ADDRESS=(PROTOCOL=TCP)(HOST=192.68.1.12)(PORT=1701))(ADDRESS=(PROTOCOL=TCP)(HOST=192.68.1.13)(PORT=1701))(LOAD_BALANCE = yes)(FAILOVER = on)(CONNECT_DATA =(SERVER = DEDICATED)(SERVICE_NAME = myserver.mydomain.com)(FAILOVER_MODE =(TYPE = SELECT)(METHOD = BASIC)(RETRIES = 3)(DELAY = 5))))).with(OracleConnectorConfig.DATABASE_NAME,mydb).with(OracleConnectorConfig.USER,debezium).with(KafkaDatabaseHistory.BOOTSTRAP_SERVERS,localhost:9092).with(KafkaDatabaseHistory.TOPIC,history).build());
  assertTrue(connectorConfig.validateAndRecord(OracleConnectorConfig.ALL_FIELDS,LOGGER::error));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorConfigTest.java",98
609,"'-tryline","@Test public void invalidNoHostnameNoUri() throws Exception {
  final OracleConnectorConfig connectorConfig=new OracleConnectorConfig(Configuration.create().with(OracleConnectorConfig.CONNECTOR_ADAPTER,logminer).with(OracleConnectorConfig.SERVER_NAME,myserver).with(OracleConnectorConfig.DATABASE_NAME,mydb).with(OracleConnectorConfig.USER,debezium).with(KafkaDatabaseHistory.BOOTSTRAP_SERVERS,localhost:9092).with(KafkaDatabaseHistory.TOPIC,history).build());
  assertFalse(connectorConfig.validateAndRecord(OracleConnectorConfig.ALL_FIELDS,LOGGER::error));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorConfigTest.java",115
610,"'-tryline","@Test public void validBatchDefaults() throws Exception {
  final OracleConnectorConfig connectorConfig=new OracleConnectorConfig(Configuration.create().build());
  assertEquals(connectorConfig.getLogMiningBatchSizeDefault(),OracleConnectorConfig.DEFAULT_BATCH_SIZE);
  assertEquals(connectorConfig.getLogMiningBatchSizeMax(),OracleConnectorConfig.MAX_BATCH_SIZE);
  assertEquals(connectorConfig.getLogMiningBatchSizeMin(),OracleConnectorConfig.MIN_BATCH_SIZE);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorConfigTest.java",130
611,"'-tryline","@Test public void validSleepDefaults() throws Exception {
  final OracleConnectorConfig connectorConfig=new OracleConnectorConfig(Configuration.create().build());
  assertEquals(connectorConfig.getLogMiningSleepTimeDefault(),OracleConnectorConfig.DEFAULT_SLEEP_TIME);
  assertEquals(connectorConfig.getLogMiningSleepTimeMax(),OracleConnectorConfig.MAX_SLEEP_TIME);
  assertEquals(connectorConfig.getLogMiningSleepTimeMin(),OracleConnectorConfig.MIN_SLEEP_TIME);
  assertEquals(connectorConfig.getLogMiningSleepTimeIncrement(),OracleConnectorConfig.SLEEP_TIME_INCREMENT);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorConfigTest.java",142
612,"'-tryline","@Test public void validViewFetchSizeDefaults() throws Exception {
  final OracleConnectorConfig connectorConfig=new OracleConnectorConfig(Configuration.create().build());
  assertEquals(connectorConfig.getLogMiningViewFetchSize(),OracleConnectorConfig.DEFAULT_VIEW_FETCH_SIZE);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorConfigTest.java",155
613,"'-tryline","@Test @FixFor(DBZ-2754) public void validTransactionRetentionDefaults() throws Exception {
  final Configuration config=Configuration.create().build();
  final OracleConnectorConfig connectorConfig=new OracleConnectorConfig(config);
  assertThat(connectorConfig.getLogMiningTransactionRetention()).isEqualTo(Duration.ZERO);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorConfigTest.java",165
614,"'-tryline","@Test @FixFor(DBZ-2754) public void testTransactionRetention() throws Exception {
  final Field transactionRetentionField=OracleConnectorConfig.LOG_MINING_TRANSACTION_RETENTION;
  Configuration config=Configuration.create().with(transactionRetentionField,3).build();
  assertThat(config.validateAndRecord(Collections.singletonList(transactionRetentionField),LOGGER::error)).isTrue();
  OracleConnectorConfig connectorConfig=new OracleConnectorConfig(config);
  assertThat(connectorConfig.getLogMiningTransactionRetention()).isEqualTo(Duration.ofHours(3));
  config=Configuration.create().with(transactionRetentionField,0).build();
  assertThat(config.validateAndRecord(Collections.singletonList(transactionRetentionField),LOGGER::error)).isTrue();
  config=Configuration.create().with(transactionRetentionField,-1).build();
  assertThat(config.validateAndRecord(Collections.singletonList(transactionRetentionField),LOGGER::error)).isFalse();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorConfigTest.java",173
615,"'-tryline","@Test @FixFor(DBZ-3190) public void shouldLogDeprecationWarningForTablenameCaseInsensitiveTrue() throws Exception {
  final LogInterceptor logInterceptor=new LogInterceptor();
  final OracleConnectorConfig connectorConfig=new OracleConnectorConfig(Configuration.create().with(OracleConnectorConfig.TABLENAME_CASE_INSENSITIVE,true).build());
  assertThat(connectorConfig.getTablenameCaseInsensitive()).isEqualTo(Optional.of(true));
  assertThat(logInterceptor.containsMessage(TABLENAME_CASE_INSENSITIVE_WARNING)).isTrue();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorConfigTest.java",191
616,"'-tryline","@Test @FixFor(DBZ-3190) public void shouldLogDeprecationWarningForTablenameCaseInsensitiveFalse() throws Exception {
  final LogInterceptor logInterceptor=new LogInterceptor();
  final OracleConnectorConfig connectorConfig=new OracleConnectorConfig(Configuration.create().with(OracleConnectorConfig.TABLENAME_CASE_INSENSITIVE,false).build());
  assertThat(connectorConfig.getTablenameCaseInsensitive()).isEqualTo(Optional.of(false));
  assertThat(logInterceptor.containsMessage(TABLENAME_CASE_INSENSITIVE_WARNING)).isTrue();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorConfigTest.java",203
617,"'-tryline","@Test @FixFor(DBZ-3190) public void shouldNotBePresentWhenTablenameCaseInsensitiveNotSupplied() throws Exception {
  final LogInterceptor logInterceptor=new LogInterceptor();
  final OracleConnectorConfig connectorConfig=new OracleConnectorConfig(Configuration.create().build());
  assertThat(connectorConfig.getTablenameCaseInsensitive()).isEqualTo(Optional.empty());
  assertThat(logInterceptor.containsMessage(TABLENAME_CASE_INSENSITIVE_WARNING)).isFalse();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorConfigTest.java",215
618,"'-tryline","@Test public void shouldApplyTableWhitelistConfiguration() throws Exception {
  shouldApplyTableInclusionConfiguration(true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorFilterIT.java",127
619,"'-tryline","@Test public void shouldApplyTableIncludeListConfiguration() throws Exception {
  shouldApplyTableInclusionConfiguration(false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorFilterIT.java",132
620,"'-tryline","@Test public void shouldApplyTableBlacklistConfiguration() throws Exception {
  shouldApplyTableExclusionsConfiguration(true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorFilterIT.java",137
621,"'-tryline","@Test public void shouldApplyTableExcludeListConfiguration() throws Exception {
  shouldApplyTableExclusionsConfiguration(false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorFilterIT.java",142
622,"'-tryline","@Test @FixFor(DBZ-3009) public void shouldApplySchemaAndTableWhitelistConfiguration() throws Exception {
  shouldApplySchemaAndTableInclusionConfiguration(true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorFilterIT.java",147
623,"'-tryline","@Test @FixFor(DBZ-3009) public void shouldApplySchemaAndTableIncludeListConfiguration() throws Exception {
  shouldApplySchemaAndTableInclusionConfiguration(false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorFilterIT.java",153
624,"'-tryline","@Test @FixFor(DBZ-3009) public void shouldApplySchemaAndTableBlacklistConfiguration() throws Exception {
  shouldApplySchemaAndTableExclusionsConfiguration(true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorFilterIT.java",159
625,"'-tryline","@Test @FixFor(DBZ-3009) public void shouldApplySchemaAndTableExcludeListConfiguration() throws Exception {
  shouldApplySchemaAndTableExclusionsConfiguration(false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorFilterIT.java",165
626,"'-tryline","@Test @FixFor({DBZ-3167,DBZ-3219}) public void shouldApplyColumnIncludeListConfiguration() throws Exception {
  TestHelper.dropTable(connection,table4);
  try {
    String ddl=CREATE TABLE debezium.table4 ( +   id NUMERIC(9,0) NOT NULL,  +   name VARCHAR2(1000), +   birth_date date, +   PRIMARY KEY (id)+ );
    connection.execute(ddl);
    connection.execute(GRANT SELECT ON debezium.table4 TO  + TestHelper.getConnectorUserName());
    connection.execute(ALTER TABLE debezium.table4 ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
    connection.execute(INSERT INTO debezium.table4 VALUES (1, 'Text-1', '01-JAN-1990'));
    connection.execute(COMMIT);
    Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.TABLE_INCLUDE_LIST,DEBEZIUM\\.TABLE4).with(OracleConnectorConfig.COLUMN_INCLUDE_LIST,DEBEZIUM\\.TABLE4\\.ID,DEBEZIUM\\.TABLE4\\.NAME).with(OracleConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).build();
    start(OracleConnector.class,config);
    assertConnectorIsRunning();
    waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
    SourceRecords records=consumeRecordsByTopic(1);
    List<SourceRecord> testTableRecords=records.recordsForTopic(server1.DEBEZIUM.TABLE4);
    assertThat(testTableRecords).hasSize(1);
    VerifyRecord.isValidRead(testTableRecords.get(0),ID,1);
    Struct after=(Struct)((Struct)testTableRecords.get(0).value()).get(after);
    assertThat(after.get(ID)).isEqualTo(1);
    assertThat(after.get(NAME)).isEqualTo(Text-1);
    assertThat(after.schema().field(BIRTH_DATE)).isNull();
    waitForStreamingRunning(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
    connection.execute(INSERT INTO debezium.table4 VALUES (2, 'Text-2', '31-DEC-1990'));
    connection.execute(COMMIT);
    records=consumeRecordsByTopic(1);
    testTableRecords=records.recordsForTopic(server1.DEBEZIUM.TABLE4);
    assertThat(testTableRecords).hasSize(1);
    VerifyRecord.isValidInsert(testTableRecords.get(0),ID,2);
    after=(Struct)((Struct)testTableRecords.get(0).value()).get(after);
    assertThat(after.get(ID)).isEqualTo(2);
    assertThat(after.get(NAME)).isEqualTo(Text-2);
    assertThat(after.schema().field(BIRTH_DATE)).isNull();
  }
  finally {
    TestHelper.dropTable(connection,table4);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorFilterIT.java",171
627,"'-tryline","@Test @FixFor({DBZ-3167,DBZ-3219}) public void shouldApplyColumnExcludeListConfiguration() throws Exception {
  TestHelper.dropTable(connection,table4);
  try {
    String ddl=CREATE TABLE debezium.table4 ( +   id NUMERIC(9,0) NOT NULL,  +   name VARCHAR2(1000), +   birth_date date, +   PRIMARY KEY (id)+ );
    connection.execute(ddl);
    connection.execute(GRANT SELECT ON debezium.table4 TO  + TestHelper.getConnectorUserName());
    connection.execute(ALTER TABLE debezium.table4 ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
    connection.execute(INSERT INTO debezium.table4 VALUES (1, 'Text-1', '01-JAN-1990'));
    connection.execute(COMMIT);
    Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.TABLE_INCLUDE_LIST,DEBEZIUM\\.TABLE4).with(OracleConnectorConfig.COLUMN_EXCLUDE_LIST,DEBEZIUM\\.TABLE4\\.BIRTH_DATE).with(OracleConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).build();
    start(OracleConnector.class,config);
    assertConnectorIsRunning();
    waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
    SourceRecords records=consumeRecordsByTopic(1);
    List<SourceRecord> testTableRecords=records.recordsForTopic(server1.DEBEZIUM.TABLE4);
    assertThat(testTableRecords).hasSize(1);
    VerifyRecord.isValidRead(testTableRecords.get(0),ID,1);
    Struct after=(Struct)((Struct)testTableRecords.get(0).value()).get(after);
    assertThat(after.get(ID)).isEqualTo(1);
    assertThat(after.get(NAME)).isEqualTo(Text-1);
    assertThat(after.schema().field(BIRTH_DATE)).isNull();
    waitForStreamingRunning(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
    connection.execute(INSERT INTO debezium.table4 VALUES (2, 'Text-2', '31-DEC-1990'));
    connection.execute(COMMIT);
    records=consumeRecordsByTopic(1);
    testTableRecords=records.recordsForTopic(server1.DEBEZIUM.TABLE4);
    assertThat(testTableRecords).hasSize(1);
    VerifyRecord.isValidInsert(testTableRecords.get(0),ID,2);
    after=(Struct)((Struct)testTableRecords.get(0).value()).get(after);
    assertThat(after.get(ID)).isEqualTo(2);
    assertThat(after.get(NAME)).isEqualTo(Text-2);
    assertThat(after.schema().field(BIRTH_DATE)).isNull();
  }
  finally {
    TestHelper.dropTable(connection,table4);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorFilterIT.java",235
628,"'-tryline","private void shouldApplyTableInclusionConfiguration(boolean useLegacyOption) throws Exception {
  Field option=OracleConnectorConfig.TABLE_INCLUDE_LIST;
  if (useLegacyOption) {
    option=OracleConnectorConfig.TABLE_WHITELIST;
  }
  boolean includeDdlChanges=true;
  if (TestHelper.adapter().equals(OracleConnectorConfig.ConnectorAdapter.LOG_MINER)) {
    includeDdlChanges=false;
  }
  Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.SCHEMA_INCLUDE_LIST,DEBEZIUM).with(option,DEBEZIUM2\\.TABLE2,DEBEZIUM\\.TABLE1,DEBEZIUM\\.TABLE3).with(OracleConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).build();
  start(OracleConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  waitForStreamingRunning(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  connection.execute(INSERT INTO debezium.table1 VALUES (1, 'Text-1'));
  connection.execute(INSERT INTO debezium.table2 VALUES (2, 'Text-2'));
  connection.execute(COMMIT);
  if (includeDdlChanges) {
    String ddl=CREATE TABLE debezium.table3 ( +   id NUMERIC(9, 0) NOT NULL,  +   name VARCHAR2(1000), +   PRIMARY KEY (id)+ );
    connection.execute(ddl);
    connection.execute(GRANT SELECT ON debezium.table3 TO  + TestHelper.getConnectorUserName());
    connection.execute(ALTER TABLE debezium.table3 ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
    connection.execute(INSERT INTO debezium.table3 VALUES (3, 'Text-3'));
    connection.execute(COMMIT);
  }
  SourceRecords records=consumeRecordsByTopic(includeDdlChanges ? 2 : 1);
  List<SourceRecord> testTableRecords=records.recordsForTopic(server1.DEBEZIUM.TABLE1);
  assertThat(testTableRecords).hasSize(1);
  VerifyRecord.isValidInsert(testTableRecords.get(0),ID,1);
  Struct after=(Struct)((Struct)testTableRecords.get(0).value()).get(after);
  assertThat(after.get(ID)).isEqualTo(1);
  assertThat(after.get(NAME)).isEqualTo(Text-1);
  testTableRecords=records.recordsForTopic(server1.DEBEZIUM.TABLE2);
  assertThat(testTableRecords).isNull();
  if (includeDdlChanges) {
    testTableRecords=records.recordsForTopic(server1.DEBEZIUM.TABLE3);
    assertThat(testTableRecords).hasSize(1);
    VerifyRecord.isValidInsert(testTableRecords.get(0),ID,3);
    after=(Struct)((Struct)testTableRecords.get(0).value()).get(after);
    assertThat(after.get(ID)).isEqualTo(3);
    assertThat(after.get(NAME)).isEqualTo(Text-3);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorFilterIT.java",299
629,"'-tryline","private void shouldApplySchemaAndTableInclusionConfiguration(boolean useLegacyOption) throws Exception {
  Field option=OracleConnectorConfig.TABLE_INCLUDE_LIST;
  if (useLegacyOption) {
    option=OracleConnectorConfig.TABLE_WHITELIST;
  }
  boolean includeDdlChanges=true;
  if (TestHelper.adapter().equals(OracleConnectorConfig.ConnectorAdapter.LOG_MINER)) {
    includeDdlChanges=false;
  }
  Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.SCHEMA_INCLUDE_LIST,DEBEZIUM,DEBEZIUM2).with(option,DEBEZIUM2\\.TABLE2,DEBEZIUM\\.TABLE1,DEBEZIUM\\.TABLE3).with(OracleConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).build();
  start(OracleConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  waitForStreamingRunning(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  connection.execute(INSERT INTO debezium.table1 VALUES (1, 'Text-1'));
  connection.execute(INSERT INTO debezium.table2 VALUES (2, 'Text-2'));
  connection.execute(INSERT INTO debezium2.table2 VALUES (1, 'Text2-1'));
  connection.execute(COMMIT);
  if (includeDdlChanges) {
    String ddl=CREATE TABLE debezium.table3 ( +   id NUMERIC(9, 0) NOT NULL,  +   name VARCHAR2(1000), +   PRIMARY KEY (id)+ );
    connection.execute(ddl);
    connection.execute(GRANT SELECT ON debezium.table3 TO  + TestHelper.getConnectorUserName());
    connection.execute(ALTER TABLE debezium.table3 ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
    connection.execute(INSERT INTO debezium.table3 VALUES (3, 'Text-3'));
    connection.execute(COMMIT);
  }
  SourceRecords records=consumeRecordsByTopic(2);
  List<SourceRecord> testTableRecords=records.recordsForTopic(server1.DEBEZIUM.TABLE1);
  assertThat(testTableRecords).hasSize(1);
  VerifyRecord.isValidInsert(testTableRecords.get(0),ID,1);
  Struct after=(Struct)((Struct)testTableRecords.get(0).value()).get(after);
  assertThat(after.get(ID)).isEqualTo(1);
  assertThat(after.get(NAME)).isEqualTo(Text-1);
  testTableRecords=records.recordsForTopic(server1.DEBEZIUM.TABLE2);
  assertThat(testTableRecords).isNull();
  testTableRecords=records.recordsForTopic(server1.DEBEZIUM2.TABLE2);
  if (TestHelper.adapter().equals(OracleConnectorConfig.ConnectorAdapter.XSTREAM)) {
    assertThat(testTableRecords).isNull();
  }
 else {
    assertThat(testTableRecords).hasSize(1);
    VerifyRecord.isValidInsert(testTableRecords.get(0),ID,1);
    after=(Struct)((Struct)testTableRecords.get(0).value()).get(after);
    assertThat(after.get(ID)).isEqualTo(1);
    assertThat(after.get(NAME)).isEqualTo(Text2-1);
  }
  if (includeDdlChanges) {
    testTableRecords=records.recordsForTopic(server1.DEBEZIUM.TABLE3);
    assertThat(testTableRecords).hasSize(1);
    VerifyRecord.isValidInsert(testTableRecords.get(0),ID,3);
    after=(Struct)((Struct)testTableRecords.get(0).value()).get(after);
    assertThat(after.get(ID)).isEqualTo(3);
    assertThat(after.get(NAME)).isEqualTo(Text-3);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorFilterIT.java",365
630,"'-tryline","private void shouldApplyTableExclusionsConfiguration(boolean useLegacyOption) throws Exception {
  Field option=OracleConnectorConfig.TABLE_EXCLUDE_LIST;
  if (useLegacyOption) {
    option=OracleConnectorConfig.TABLE_BLACKLIST;
  }
  boolean includeDdlChanges=true;
  if (TestHelper.adapter().equals(OracleConnectorConfig.ConnectorAdapter.LOG_MINER)) {
    includeDdlChanges=false;
  }
  Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.SCHEMA_INCLUDE_LIST,DEBEZIUM).with(option,DEBEZIUM\\.TABLE2,DEBEZIUM\\.CUSTOMER.*).with(OracleConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).build();
  start(OracleConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  waitForStreamingRunning(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  connection.execute(INSERT INTO debezium.table1 VALUES (1, 'Text-1'));
  connection.execute(INSERT INTO debezium.table2 VALUES (2, 'Text-2'));
  connection.execute(COMMIT);
  if (includeDdlChanges) {
    String ddl=CREATE TABLE debezium.table3 ( +   id NUMERIC(9,0) NOT NULL,  +   name VARCHAR2(1000), +   PRIMARY KEY (id)+ );
    connection.execute(ddl);
    connection.execute(GRANT SELECT ON debezium.table3 TO   + TestHelper.getConnectorUserName());
    connection.execute(INSERT INTO debezium.table3 VALUES (3, 'Text-3'));
    connection.execute(COMMIT);
  }
  SourceRecords records=consumeRecordsByTopic(includeDdlChanges ? 2 : 1);
  List<SourceRecord> testTableRecords=records.recordsForTopic(server1.DEBEZIUM.TABLE1);
  assertThat(testTableRecords).hasSize(1);
  VerifyRecord.isValidInsert(testTableRecords.get(0),ID,1);
  Struct after=(Struct)((Struct)testTableRecords.get(0).value()).get(after);
  assertThat(after.get(ID)).isEqualTo(1);
  assertThat(after.get(NAME)).isEqualTo(Text-1);
  testTableRecords=records.recordsForTopic(server1.DEBEZIUM.TABLE2);
  assertThat(testTableRecords).isNull();
  if (includeDdlChanges) {
    testTableRecords=records.recordsForTopic(server1.DEBEZIUM.TABLE3);
    assertThat(testTableRecords).hasSize(1);
    VerifyRecord.isValidInsert(testTableRecords.get(0),ID,3);
    after=(Struct)((Struct)testTableRecords.get(0).value()).get(after);
    assertThat(after.get(ID)).isEqualTo(3);
    assertThat(after.get(NAME)).isEqualTo(Text-3);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorFilterIT.java",448
631,"'-tryline","private void shouldApplySchemaAndTableExclusionsConfiguration(boolean useLegacyOption) throws Exception {
  Field option=OracleConnectorConfig.TABLE_EXCLUDE_LIST;
  if (useLegacyOption) {
    option=OracleConnectorConfig.TABLE_BLACKLIST;
  }
  boolean includeDdlChanges=true;
  boolean isLogMiner=false;
  if (TestHelper.adapter().equals(OracleConnectorConfig.ConnectorAdapter.LOG_MINER)) {
    includeDdlChanges=false;
    isLogMiner=true;
  }
  Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.SCHEMA_EXCLUDE_LIST,DEBEZIUM,SYS).with(option,DEBEZIUM\\.TABLE2,DEBEZIUM\\.CUSTOMER.*,DEBEZIUM2\\.NOPK).with(OracleConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).build();
  start(OracleConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  waitForStreamingRunning(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  connection.execute(INSERT INTO debezium.table1 VALUES (1, 'Text-1'));
  connection.execute(INSERT INTO debezium.table2 VALUES (2, 'Text-2'));
  connection.execute(INSERT INTO debezium2.table2 VALUES (1, 'Text2-1'));
  connection.execute(COMMIT);
  if (includeDdlChanges) {
    String ddl=CREATE TABLE debezium.table3 ( +   id NUMERIC(9,0) NOT NULL,  +   name VARCHAR2(1000), +   PRIMARY KEY (id)+ );
    connection.execute(ddl);
    connection.execute(GRANT SELECT ON debezium.table3 TO   + TestHelper.getConnectorUserName());
    connection.execute(INSERT INTO debezium.table3 VALUES (3, 'Text-3'));
    connection.execute(COMMIT);
  }
  SourceRecords records=consumeRecordsByTopic(!isLogMiner ? 0 : 1);
  List<SourceRecord> testTableRecords=records.recordsForTopic(server1.DEBEZIUM.TABLE1);
  assertThat(testTableRecords).isNull();
  testTableRecords=records.recordsForTopic(server1.DEBEZIUM.TABLE2);
  assertThat(testTableRecords).isNull();
  testTableRecords=records.recordsForTopic(server1.DEBEZIUM2.TABLE2);
  if (!isLogMiner) {
    assertThat(testTableRecords).isNull();
  }
 else {
    assertThat(testTableRecords).hasSize(1);
    VerifyRecord.isValidInsert(testTableRecords.get(0),ID,1);
    Struct after=(Struct)((Struct)testTableRecords.get(0).value()).get(after);
    assertThat(after.get(ID)).isEqualTo(1);
    assertThat(after.get(NAME)).isEqualTo(Text2-1);
  }
  if (includeDdlChanges) {
    testTableRecords=records.recordsForTopic(server1.DEBEZIUM.TABLE3);
    assertThat(testTableRecords).isNull();
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorFilterIT.java",514
632,"'-tryline","@Test public void shouldTakeTimeDifference() throws Exception {
  Testing.Print.enable();
  String stmt=select current_timestamp from dual;
  try (Connection conn=connection.connection(true);PreparedStatement ps=conn.prepareStatement(stmt);ResultSet rs=ps.executeQuery()){
    rs.next();
    java.sql.Timestamp ts=rs.getTimestamp(1);
    Instant fromDb=ts.toInstant();
    Instant now=Instant.now();
    long diff=Duration.between(fromDb,now).toMillis();
    Testing.print(diff:  + diff);
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorFilterIT.java",589
633,"'-tryline","@Test @FixFor(DBZ-2452) public void shouldSnapshotAndStreamWithHyphenedTableName() throws Exception {
  TestHelper.dropTable(connection,debezium.\my-table\);
  try {
    String ddl=create table \my-table\ ( +  id numeric(9,0) not null,  +  c1 int, +  c2 varchar(128), +  primary key (id));
    connection.execute(ddl);
    connection.execute(GRANT SELECT ON debezium.\my-table\ to  + TestHelper.getConnectorUserName());
    connection.execute(ALTER TABLE debezium.\my-table\ ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
    connection.execute(INSERT INTO debezium.\my-table\ VALUES (1, 25, 'Test'));
    connection.execute(COMMIT);
    Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.TABLE_INCLUDE_LIST,DEBEZIUM\\.MY-TABLE).build();
    start(OracleConnector.class,config);
    assertConnectorIsRunning();
    waitForStreamingRunning(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
    connection.execute(INSERT INTO debezium.\my-table\ VALUES (2, 50, 'Test2'));
    connection.execute(COMMIT);
    SourceRecords records=consumeRecordsByTopic(2);
    List<SourceRecord> hyphenatedTableRecords=records.recordsForTopic(server1.DEBEZIUM.my-table);
    assertThat(hyphenatedTableRecords).hasSize(2);
    SourceRecord record1=hyphenatedTableRecords.get(0);
    VerifyRecord.isValidRead(record1,ID,1);
    Struct after1=(Struct)((Struct)record1.value()).get(AFTER);
    assertThat(after1.get(ID)).isEqualTo(1);
    assertThat(after1.get(C1)).isEqualTo(BigDecimal.valueOf(25L));
    assertThat(after1.get(C2)).isEqualTo(Test);
    assertThat(record1.sourceOffset().get(SourceInfo.SNAPSHOT_KEY)).isEqualTo(true);
    assertThat(record1.sourceOffset().get(SNAPSHOT_COMPLETED_KEY)).isEqualTo(true);
    SourceRecord record2=hyphenatedTableRecords.get(1);
    VerifyRecord.isValidInsert(record2,ID,2);
    Struct after2=(Struct)((Struct)record2.value()).get(AFTER);
    assertThat(after2.get(ID)).isEqualTo(2);
    assertThat(after2.get(C1)).isEqualTo(BigDecimal.valueOf(50L));
    assertThat(after2.get(C2)).isEqualTo(Test2);
  }
  finally {
    TestHelper.dropTable(connection,debezium.\my-table\);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",154
634,"'-tryline","@Test public void shouldTakeSnapshot() throws Exception {
  Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.TABLE_INCLUDE_LIST,DEBEZIUM\\.CUSTOMER).build();
  int expectedRecordCount=0;
  connection.execute(INSERT INTO debezium.customer VALUES (1, 'Billie-Bob', 1234.56, TO_DATE('2018/02/22', 'yyyy-mm-dd')));
  connection.execute(INSERT INTO debezium.customer VALUES (2, 'Bruce', 2345.67, null));
  connection.execute(COMMIT);
  expectedRecordCount+=2;
  start(OracleConnector.class,config);
  assertConnectorIsRunning();
  SourceRecords records=consumeRecordsByTopic(expectedRecordCount);
  List<SourceRecord> testTableRecords=records.recordsForTopic(server1.DEBEZIUM.CUSTOMER);
  assertThat(testTableRecords).hasSize(expectedRecordCount);
  SourceRecord record1=testTableRecords.get(0);
  VerifyRecord.isValidRead(record1,ID,1);
  Struct after=(Struct)((Struct)record1.value()).get(after);
  assertThat(after.get(ID)).isEqualTo(1);
  assertThat(after.get(NAME)).isEqualTo(Billie-Bob);
  assertThat(after.get(SCORE)).isEqualTo(BigDecimal.valueOf(1234.56));
  assertThat(after.get(REGISTERED)).isEqualTo(toMicroSecondsSinceEpoch(LocalDateTime.of(2018,2,22,0,0,0)));
  assertThat(record1.sourceOffset().get(SourceInfo.SNAPSHOT_KEY)).isEqualTo(true);
  assertThat(record1.sourceOffset().get(SNAPSHOT_COMPLETED_KEY)).isEqualTo(false);
  Struct source=(Struct)((Struct)record1.value()).get(source);
  assertThat(source.get(SourceInfo.SNAPSHOT_KEY)).isEqualTo(true);
  SourceRecord record2=testTableRecords.get(1);
  VerifyRecord.isValidRead(record2,ID,2);
  after=(Struct)((Struct)record2.value()).get(after);
  assertThat(after.get(ID)).isEqualTo(2);
  assertThat(after.get(NAME)).isEqualTo(Bruce);
  assertThat(after.get(SCORE)).isEqualTo(BigDecimal.valueOf(2345.67));
  assertThat(after.get(REGISTERED)).isNull();
  assertThat(record2.sourceOffset().get(SourceInfo.SNAPSHOT_KEY)).isEqualTo(true);
  assertThat(record2.sourceOffset().get(SNAPSHOT_COMPLETED_KEY)).isEqualTo(true);
  source=(Struct)((Struct)record2.value()).get(source);
  assertThat(source.get(SourceInfo.SNAPSHOT_KEY)).isEqualTo(last);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",210
635,"'-tryline","@Test public void shouldContinueWithStreamingAfterSnapshot() throws Exception {
  Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.TABLE_INCLUDE_LIST,DEBEZIUM\\.CUSTOMER).build();
  continueStreamingAfterSnapshot(config);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",259
636,"'-tryline","private void continueStreamingAfterSnapshot(Configuration config) throws Exception {
  int expectedRecordCount=0;
  connection.execute(INSERT INTO debezium.customer VALUES (1, 'Billie-Bob', 1234.56, TO_DATE('2018/02/22', 'yyyy-mm-dd')));
  connection.execute(INSERT INTO debezium.customer VALUES (2, 'Bruce', 2345.67, null));
  connection.execute(COMMIT);
  expectedRecordCount+=2;
  start(OracleConnector.class,config);
  assertConnectorIsRunning();
  SourceRecords records=consumeRecordsByTopic(expectedRecordCount);
  List<SourceRecord> testTableRecords=records.recordsForTopic(server1.DEBEZIUM.CUSTOMER);
  assertThat(testTableRecords).hasSize(expectedRecordCount);
  SourceRecord record1=testTableRecords.get(0);
  VerifyRecord.isValidRead(record1,ID,1);
  Struct after=(Struct)((Struct)record1.value()).get(after);
  assertThat(after.get(ID)).isEqualTo(1);
  Struct source=(Struct)((Struct)record1.value()).get(source);
  assertThat(source.get(SourceInfo.SNAPSHOT_KEY)).isEqualTo(true);
  assertThat(source.get(SourceInfo.SCN_KEY)).isNotNull();
  assertThat(source.get(SourceInfo.SERVER_NAME_KEY)).isEqualTo(server1);
  assertThat(source.get(SourceInfo.DEBEZIUM_VERSION_KEY)).isNotNull();
  assertThat(source.get(SourceInfo.TXID_KEY)).isNull();
  assertThat(source.get(SourceInfo.TIMESTAMP_KEY)).isNotNull();
  assertThat(record1.sourceOffset().get(SourceInfo.SNAPSHOT_KEY)).isEqualTo(true);
  assertThat(record1.sourceOffset().get(SNAPSHOT_COMPLETED_KEY)).isEqualTo(false);
  SourceRecord record2=testTableRecords.get(1);
  VerifyRecord.isValidRead(record2,ID,2);
  after=(Struct)((Struct)record2.value()).get(after);
  assertThat(after.get(ID)).isEqualTo(2);
  assertThat(record2.sourceOffset().get(SourceInfo.SNAPSHOT_KEY)).isEqualTo(true);
  assertThat(record2.sourceOffset().get(SNAPSHOT_COMPLETED_KEY)).isEqualTo(true);
  expectedRecordCount=0;
  connection.execute(INSERT INTO debezium.customer VALUES (3, 'Brian', 2345.67, null));
  connection.execute(COMMIT);
  expectedRecordCount+=1;
  records=consumeRecordsByTopic(expectedRecordCount);
  testTableRecords=records.recordsForTopic(server1.DEBEZIUM.CUSTOMER);
  assertThat(testTableRecords).hasSize(expectedRecordCount);
  SourceRecord record3=testTableRecords.get(0);
  VerifyRecord.isValidInsert(record3,ID,3);
  after=(Struct)((Struct)record3.value()).get(after);
  assertThat(after.get(ID)).isEqualTo(3);
  assertThat(record3.sourceOffset().containsKey(SourceInfo.SNAPSHOT_KEY)).isFalse();
  assertThat(record3.sourceOffset().containsKey(SNAPSHOT_COMPLETED_KEY)).isFalse();
  source=(Struct)((Struct)record3.value()).get(source);
  assertThat(source.get(SourceInfo.SNAPSHOT_KEY)).isEqualTo(false);
  assertThat(source.get(SourceInfo.SCN_KEY)).isNotNull();
  assertThat(source.get(SourceInfo.SERVER_NAME_KEY)).isEqualTo(server1);
  assertThat(source.get(SourceInfo.DEBEZIUM_VERSION_KEY)).isNotNull();
  assertThat(source.get(SourceInfo.TXID_KEY)).isNotNull();
  assertThat(source.get(SourceInfo.TIMESTAMP_KEY)).isNotNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",268
637,"'-tryline","@Test @FixFor(DBZ-1223) @SkipWhenAdapterNameIs(value=SkipWhenAdapterNameIs.AdapterName.LOGMINER,reason=sendTxBatch randomly fails) public void shouldStreamTransaction() throws Exception {
  Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.TABLE_INCLUDE_LIST,DEBEZIUM\\.CUSTOMER).build();
  int expectedRecordCount=0;
  connection.execute(INSERT INTO debezium.customer VALUES (1, 'Billie-Bob', 1234.56, TO_DATE('2018/02/22', 'yyyy-mm-dd')));
  connection.execute(INSERT INTO debezium.customer VALUES (2, 'Bruce', 2345.67, null));
  connection.execute(COMMIT);
  expectedRecordCount+=2;
  start(OracleConnector.class,config);
  assertConnectorIsRunning();
  SourceRecords records=consumeRecordsByTopic(expectedRecordCount);
  List<SourceRecord> testTableRecords=records.recordsForTopic(server1.DEBEZIUM.CUSTOMER);
  assertThat(testTableRecords).hasSize(expectedRecordCount);
  SourceRecord record1=testTableRecords.get(0);
  VerifyRecord.isValidRead(record1,ID,1);
  Struct after=(Struct)((Struct)record1.value()).get(after);
  assertThat(after.get(ID)).isEqualTo(1);
  Struct source=(Struct)((Struct)record1.value()).get(source);
  assertThat(source.get(SourceInfo.SNAPSHOT_KEY)).isEqualTo(true);
  assertThat(source.get(SourceInfo.SCN_KEY)).isNotNull();
  assertThat(source.get(SourceInfo.SERVER_NAME_KEY)).isEqualTo(server1);
  assertThat(source.get(SourceInfo.DEBEZIUM_VERSION_KEY)).isNotNull();
  assertThat(source.get(SourceInfo.TXID_KEY)).isNull();
  assertThat(source.get(SourceInfo.TIMESTAMP_KEY)).isNotNull();
  assertThat(record1.sourceOffset().get(SourceInfo.SNAPSHOT_KEY)).isEqualTo(true);
  assertThat(record1.sourceOffset().get(SNAPSHOT_COMPLETED_KEY)).isEqualTo(false);
  SourceRecord record2=testTableRecords.get(1);
  VerifyRecord.isValidRead(record2,ID,2);
  after=(Struct)((Struct)record2.value()).get(after);
  assertThat(after.get(ID)).isEqualTo(2);
  assertThat(record2.sourceOffset().get(SourceInfo.SNAPSHOT_KEY)).isEqualTo(true);
  assertThat(record2.sourceOffset().get(SNAPSHOT_COMPLETED_KEY)).isEqualTo(true);
  expectedRecordCount=30;
  connection.setAutoCommit(false);
  sendTxBatch(config,expectedRecordCount,100);
  sendTxBatch(config,expectedRecordCount,200);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",333
638,"'-tryline","@Test @SkipWhenAdapterNameIs(value=SkipWhenAdapterNameIs.AdapterName.LOGMINER,reason=Test randomly fails in sendTxBatch) public void shouldStreamAfterRestart() throws Exception {
  Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.TABLE_INCLUDE_LIST,DEBEZIUM\\.CUSTOMER).build();
  int expectedRecordCount=0;
  connection.execute(INSERT INTO debezium.customer VALUES (1, 'Billie-Bob', 1234.56, TO_DATE('2018/02/22', 'yyyy-mm-dd')));
  connection.execute(INSERT INTO debezium.customer VALUES (2, 'Bruce', 2345.67, null));
  connection.execute(COMMIT);
  expectedRecordCount+=2;
  start(OracleConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  SourceRecords records=consumeRecordsByTopic(expectedRecordCount);
  List<SourceRecord> testTableRecords=records.recordsForTopic(server1.DEBEZIUM.CUSTOMER);
  assertThat(testTableRecords).hasSize(expectedRecordCount);
  expectedRecordCount=30;
  connection.setAutoCommit(false);
  sendTxBatch(config,expectedRecordCount,100);
  sendTxBatch(config,expectedRecordCount,200);
  stopConnector();
  final int OFFSET=300;
  for (int i=OFFSET; i < expectedRecordCount + OFFSET; i++) {
    connection.executeWithoutCommitting(String.format(INSERT INTO debezium.customer VALUES (%s, 'Brian%s', 2345.67, null),i,i));
  }
  connection.connection().commit();
  start(OracleConnector.class,config);
  assertConnectorIsRunning();
  waitForStreamingRunning(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  assertTxBatch(config,expectedRecordCount,300);
  sendTxBatch(config,expectedRecordCount,400);
  sendTxBatch(config,expectedRecordCount,500);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",441
639,"'-tryline","@Test public void shouldStreamAfterRestartAfterSnapshot() throws Exception {
  Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.TABLE_INCLUDE_LIST,DEBEZIUM\\.CUSTOMER).build();
  int expectedRecordCount=0;
  connection.execute(INSERT INTO debezium.customer VALUES (1, 'Billie-Bob', 1234.56, TO_DATE('2018/02/22', 'yyyy-mm-dd')));
  connection.execute(INSERT INTO debezium.customer VALUES (2, 'Bruce', 2345.67, null));
  connection.execute(COMMIT);
  expectedRecordCount+=2;
  start(OracleConnector.class,config);
  assertConnectorIsRunning();
  SourceRecords records=consumeRecordsByTopic(expectedRecordCount);
  List<SourceRecord> testTableRecords=records.recordsForTopic(server1.DEBEZIUM.CUSTOMER);
  assertThat(testTableRecords).hasSize(expectedRecordCount);
  stopConnector();
  connection.setAutoCommit(false);
  final int OFFSET=100;
  for (int i=OFFSET; i < expectedRecordCount + OFFSET; i++) {
    connection.executeWithoutCommitting(String.format(INSERT INTO debezium.customer VALUES (%s, 'Brian%s', 2345.67, null),i,i));
  }
  connection.connection().commit();
  connection.setAutoCommit(true);
  Testing.print(=== Starting connector second time ===);
  start(OracleConnector.class,config);
  assertConnectorIsRunning();
  assertTxBatch(config,expectedRecordCount,100);
  sendTxBatch(config,expectedRecordCount,200);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",486
640,"'-tryline","@Test public void shouldReadChangeStreamForExistingTable() throws Exception {
  Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.TABLE_INCLUDE_LIST,DEBEZIUM\\.CUSTOMER).with(OracleConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).build();
  start(OracleConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  int expectedRecordCount=0;
  connection.execute(INSERT INTO debezium.customer VALUES (1, 'Billie-Bob', 1234.56, TO_DATE('2018/02/22', 'yyyy-mm-dd')));
  connection.execute(COMMIT);
  expectedRecordCount+=1;
  connection.execute(UPDATE debezium.customer SET name = 'Bruce', score = 2345.67, registered = TO_DATE('2018/03/23', 'yyyy-mm-dd') WHERE id = 1);
  connection.execute(COMMIT);
  expectedRecordCount+=1;
  connection.execute(UPDATE debezium.customer SET id = 2 WHERE id = 1);
  connection.execute(COMMIT);
  expectedRecordCount+=3;
  connection.execute(DELETE debezium.customer WHERE id = 2);
  connection.execute(COMMIT);
  expectedRecordCount+=2;
  SourceRecords records=consumeRecordsByTopic(expectedRecordCount);
  List<SourceRecord> testTableRecords=records.recordsForTopic(server1.DEBEZIUM.CUSTOMER);
  assertThat(testTableRecords).hasSize(expectedRecordCount);
  VerifyRecord.isValidInsert(testTableRecords.get(0),ID,1);
  Struct after=(Struct)((Struct)testTableRecords.get(0).value()).get(after);
  assertThat(after.get(ID)).isEqualTo(1);
  assertThat(after.get(NAME)).isEqualTo(Billie-Bob);
  assertThat(after.get(SCORE)).isEqualTo(BigDecimal.valueOf(1234.56));
  assertThat(after.get(REGISTERED)).isEqualTo(toMicroSecondsSinceEpoch(LocalDateTime.of(2018,2,22,0,0,0)));
  Map<String,?> offset=testTableRecords.get(0).sourceOffset();
  assertThat(offset.get(SourceInfo.SNAPSHOT_KEY)).isNull();
  assertThat(offset.get(snapshot_completed)).isNull();
  VerifyRecord.isValidUpdate(testTableRecords.get(1),ID,1);
  Struct before=(Struct)((Struct)testTableRecords.get(1).value()).get(before);
  assertThat(before.get(ID)).isEqualTo(1);
  assertThat(before.get(NAME)).isEqualTo(Billie-Bob);
  assertThat(before.get(SCORE)).isEqualTo(BigDecimal.valueOf(1234.56));
  assertThat(before.get(REGISTERED)).isEqualTo(toMicroSecondsSinceEpoch(LocalDateTime.of(2018,2,22,0,0,0)));
  after=(Struct)((Struct)testTableRecords.get(1).value()).get(after);
  assertThat(after.get(ID)).isEqualTo(1);
  assertThat(after.get(NAME)).isEqualTo(Bruce);
  assertThat(after.get(SCORE)).isEqualTo(BigDecimal.valueOf(2345.67));
  assertThat(after.get(REGISTERED)).isEqualTo(toMicroSecondsSinceEpoch(LocalDateTime.of(2018,3,23,0,0,0)));
  VerifyRecord.isValidDelete(testTableRecords.get(2),ID,1);
  before=(Struct)((Struct)testTableRecords.get(2).value()).get(before);
  assertThat(before.get(ID)).isEqualTo(1);
  assertThat(before.get(NAME)).isEqualTo(Bruce);
  assertThat(before.get(SCORE)).isEqualTo(BigDecimal.valueOf(2345.67));
  assertThat(before.get(REGISTERED)).isEqualTo(toMicroSecondsSinceEpoch(LocalDateTime.of(2018,3,23,0,0,0)));
  VerifyRecord.isValidTombstone(testTableRecords.get(3));
  VerifyRecord.isValidInsert(testTableRecords.get(4),ID,2);
  after=(Struct)((Struct)testTableRecords.get(4).value()).get(after);
  assertThat(after.get(ID)).isEqualTo(2);
  assertThat(after.get(NAME)).isEqualTo(Bruce);
  assertThat(after.get(SCORE)).isEqualTo(BigDecimal.valueOf(2345.67));
  assertThat(after.get(REGISTERED)).isEqualTo(toMicroSecondsSinceEpoch(LocalDateTime.of(2018,3,23,0,0,0)));
  VerifyRecord.isValidDelete(testTableRecords.get(5),ID,2);
  before=(Struct)((Struct)testTableRecords.get(5).value()).get(before);
  assertThat(before.get(ID)).isEqualTo(2);
  assertThat(before.get(NAME)).isEqualTo(Bruce);
  assertThat(before.get(SCORE)).isEqualTo(BigDecimal.valueOf(2345.67));
  assertThat(before.get(REGISTERED)).isEqualTo(toMicroSecondsSinceEpoch(LocalDateTime.of(2018,3,23,0,0,0)));
  VerifyRecord.isValidTombstone(testTableRecords.get(6));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",525
641,"'-tryline","@Test @FixFor(DBZ-835) public void deleteWithoutTombstone() throws Exception {
  Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.TABLE_INCLUDE_LIST,DEBEZIUM\\.CUSTOMER).with(OracleConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(OracleConnectorConfig.TOMBSTONES_ON_DELETE,false).build();
  start(OracleConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  int expectedRecordCount=0;
  connection.execute(INSERT INTO debezium.customer VALUES (1, 'Billie-Bob', 1234.56, TO_DATE('2018/02/22', 'yyyy-mm-dd')));
  connection.execute(COMMIT);
  expectedRecordCount+=1;
  connection.execute(DELETE debezium.customer WHERE id = 1);
  connection.execute(COMMIT);
  expectedRecordCount+=1;
  connection.execute(INSERT INTO debezium.customer VALUES (2, 'Billie-Bob', 1234.56, TO_DATE('2018/02/22', 'yyyy-mm-dd')));
  connection.execute(COMMIT);
  expectedRecordCount+=1;
  SourceRecords records=consumeRecordsByTopic(expectedRecordCount);
  List<SourceRecord> testTableRecords=records.recordsForTopic(server1.DEBEZIUM.CUSTOMER);
  assertThat(testTableRecords).hasSize(expectedRecordCount);
  VerifyRecord.isValidDelete(testTableRecords.get(1),ID,1);
  final Struct before=((Struct)testTableRecords.get(1).value()).getStruct(before);
  assertThat(before.get(ID)).isEqualTo(1);
  assertThat(before.get(NAME)).isEqualTo(Billie-Bob);
  assertThat(before.get(SCORE)).isEqualTo(BigDecimal.valueOf(1234.56));
  assertThat(before.get(REGISTERED)).isEqualTo(toMicroSecondsSinceEpoch(LocalDateTime.of(2018,2,22,0,0,0)));
  VerifyRecord.isValidInsert(testTableRecords.get(2),ID,2);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",614
642,"'-tryline","@Test @SkipWhenAdapterNameIs(value=SkipWhenAdapterNameIs.AdapterName.LOGMINER,reason=LogMiner does not yet support DDL during streaming) public void shouldReadChangeStreamForTableCreatedWhileStreaming() throws Exception {
  TestHelper.dropTable(connection,debezium.customer2);
  Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.TABLE_INCLUDE_LIST,DEBEZIUM\\.CUSTOMER2).build();
  start(OracleConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  String ddl=create table debezium.customer2 ( +   id numeric(9,0) not null,  +   name varchar2(1000), +   score decimal(6, 2), +   registered timestamp, +   primary key (id)+ );
  connection.execute(ddl);
  connection.execute(GRANT SELECT ON debezium.customer2 to  + TestHelper.getConnectorUserName());
  connection.execute(INSERT INTO debezium.customer2 VALUES (2, 'Billie-Bob', 1234.56, TO_DATE('2018/02/22', 'yyyy-mm-dd')));
  connection.execute(COMMIT);
  SourceRecords records=consumeRecordsByTopic(1);
  List<SourceRecord> testTableRecords=records.recordsForTopic(server1.DEBEZIUM.CUSTOMER2);
  assertThat(testTableRecords).hasSize(1);
  VerifyRecord.isValidInsert(testTableRecords.get(0),ID,2);
  Struct after=(Struct)((Struct)testTableRecords.get(0).value()).get(after);
  assertThat(after.get(ID)).isEqualTo(2);
  assertThat(after.get(NAME)).isEqualTo(Billie-Bob);
  assertThat(after.get(SCORE)).isEqualTo(BigDecimal.valueOf(1234.56));
  assertThat(after.get(REGISTERED)).isEqualTo(toMicroSecondsSinceEpoch(LocalDateTime.of(2018,2,22,0,0,0)));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",657
643,"'-tryline","@Test @FixFor(DBZ-800) @SkipWhenAdapterNameIs(value=SkipWhenAdapterNameIs.AdapterName.LOGMINER,reason=LogMiner does not yet support DDL during streaming) public void shouldReceiveHeartbeatAlsoWhenChangingTableIncludeListTables() throws Exception {
  TestHelper.dropTable(connection,debezium.dbz800a);
  TestHelper.dropTable(connection,debezium.dbz800b);
  Configuration config=TestHelper.defaultConfig().with(Heartbeat.HEARTBEAT_INTERVAL,1).with(OracleConnectorConfig.TABLE_INCLUDE_LIST,DEBEZIUM\\.DBZ800B).build();
  start(OracleConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  connection.execute(CREATE TABLE debezium.dbz800a (id NUMBER(9) NOT NULL, aaa VARCHAR2(100), PRIMARY KEY (id) ));
  connection.execute(CREATE TABLE debezium.dbz800b (id NUMBER(9) NOT NULL, bbb VARCHAR2(100), PRIMARY KEY (id) ));
  connection.execute(INSERT INTO debezium.dbz800a VALUES (1, 'AAA'));
  connection.execute(INSERT INTO debezium.dbz800b VALUES (2, 'BBB'));
  connection.execute(COMMIT);
  List<SourceRecord> records=consumeRecordsByTopic(3).allRecordsInOrder();
  verifyHeartbeatRecord(records.get(0));
  verifyHeartbeatRecord(records.get(1));
  VerifyRecord.isValidInsert(records.get(2),ID,2);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",698
644,"'-tryline","@Test @FixFor(DBZ-775) public void shouldConsumeEventsWithMaskedAndTruncatedColumnsWithDatabaseName() throws Exception {
  shouldConsumeEventsWithMaskedAndTruncatedColumns(true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",734
645,"'-tryline","@Test @FixFor(DBZ-775) public void shouldConsumeEventsWithMaskedAndTruncatedColumnsWithoutDatabaseName() throws Exception {
  shouldConsumeEventsWithMaskedAndTruncatedColumns(false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",740
646,"'-tryline","public void shouldConsumeEventsWithMaskedAndTruncatedColumns(boolean useDatabaseName) throws Exception {
  final Configuration config;
  if (useDatabaseName) {
    final String dbName=TestHelper.getDatabaseName();
    config=TestHelper.defaultConfig().with(OracleConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(column.mask.with.12.chars,dbName + .DEBEZIUM.MASKED_HASHED_COLUMN_TABLE.NAME).with(column.mask.hash.SHA-256.with.salt.CzQMA0cB5K,dbName + .DEBEZIUM.MASKED_HASHED_COLUMN_TABLE.NAME2, + dbName+ .DEBEZIUM.MASKED_HASHED_COLUMN_TABLE.NAME3).with(column.truncate.to.4.chars,dbName + .DEBEZIUM.TRUNCATED_COLUMN_TABLE.NAME).build();
  }
 else {
    config=TestHelper.defaultConfig().with(OracleConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(column.mask.with.12.chars,DEBEZIUM.MASKED_HASHED_COLUMN_TABLE.NAME).with(column.mask.hash.SHA-256.with.salt.CzQMA0cB5K,DEBEZIUM.MASKED_HASHED_COLUMN_TABLE.NAME2,DEBEZIUM.MASKED_HASHED_COLUMN_TABLE.NAME3).with(column.truncate.to.4.chars,DEBEZIUM.TRUNCATED_COLUMN_TABLE.NAME).build();
  }
  start(OracleConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  connection.execute(INSERT INTO debezium.masked_hashed_column_table (id, name, name2, name3) VALUES (10, 'some_name', 'test', 'test'));
  connection.execute(INSERT INTO debezium.truncated_column_table VALUES(11, 'some_name'));
  connection.execute(COMMIT);
  final SourceRecords records=consumeRecordsByTopic(2);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.DEBEZIUM.MASKED_HASHED_COLUMN_TABLE);
  final List<SourceRecord> tableB=records.recordsForTopic(server1.DEBEZIUM.TRUNCATED_COLUMN_TABLE);
  assertThat(tableA).hasSize(1);
  SourceRecord record=tableA.get(0);
  VerifyRecord.isValidInsert(record,ID,10);
  Struct value=(Struct)record.value();
  if (value.getStruct(after) != null) {
    Struct after=value.getStruct(after);
    assertThat(after.getString(NAME)).isEqualTo(************);
    assertThat(after.getString(NAME2)).isEqualTo(8e68c68edbbac316dfe2f6ada6b0d2d3e2002b487a985d4b7c7c82dd83b0f4d7);
    assertThat(after.getString(NAME3)).isEqualTo(8e68c68edbbac316dfe2);
  }
  assertThat(tableB).hasSize(1);
  record=tableB.get(0);
  VerifyRecord.isValidInsert(record,ID,11);
  value=(Struct)record.value();
  if (value.getStruct(after) != null) {
    assertThat(value.getStruct(after).getString(NAME)).isEqualTo(some);
  }
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",746
647,"'-tryline","@Test @FixFor(DBZ-775) public void shouldRewriteIdentityKeyWithDatabaseName() throws Exception {
  shouldRewriteIdentityKey(true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",804
648,"'-tryline","@Test @FixFor(DBZ-775) public void shouldRewriteIdentityKeyWithoutDatabaseName() throws Exception {
  shouldRewriteIdentityKey(false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",810
649,"'-tryline","private void shouldRewriteIdentityKey(boolean useDatabaseName) throws Exception {
  final Configuration config;
  if (useDatabaseName) {
    config=TestHelper.defaultConfig().with(OracleConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(OracleConnectorConfig.MSG_KEY_COLUMNS,(.*).debezium.customer:id,name).build();
  }
 else {
    config=TestHelper.defaultConfig().with(OracleConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(OracleConnectorConfig.MSG_KEY_COLUMNS,debezium.customer:id,name).build();
  }
  start(OracleConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  connection.execute(INSERT INTO debezium.customer VALUES (3, 'Nest', 1234.56, TO_DATE('2018/02/22', 'yyyy-mm-dd')));
  connection.execute(COMMIT);
  SourceRecords records=consumeRecordsByTopic(1);
  List<SourceRecord> recordsForTopic=records.recordsForTopic(server1.DEBEZIUM.CUSTOMER);
  assertThat(recordsForTopic.get(0).key()).isNotNull();
  Struct key=(Struct)recordsForTopic.get(0).key();
  assertThat(key.get(ID)).isNotNull();
  assertThat(key.get(NAME)).isNotNull();
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",816
650,"'-tryline","@Test @FixFor({DBZ-1916,DBZ-1830}) public void shouldPropagateSourceTypeByDatatype() throws Exception {
  final Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(datatype.propagate.source.type,.+\\.NUMBER,.+\\.VARCHAR2,.+\\.FLOAT).build();
  start(OracleConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  connection.execute(INSERT INTO debezium.dt_table (id,c1,c2,c3a,c3b,f1,f2) values (1,123,456,789.01,'test',1.228,234.56));
  connection.execute(COMMIT);
  final SourceRecords records=consumeRecordsByTopic(1);
  List<SourceRecord> recordsForTopic=records.recordsForTopic(server1.DEBEZIUM.DT_TABLE);
  assertThat(recordsForTopic).hasSize(1);
  final Field before=recordsForTopic.get(0).valueSchema().field(before);
  assertThat(before.schema().field(ID).schema().parameters()).includes(entry(TYPE_NAME_PARAMETER_KEY,NUMBER),entry(TYPE_LENGTH_PARAMETER_KEY,9),entry(TYPE_SCALE_PARAMETER_KEY,0));
  assertThat(before.schema().field(C1).schema().parameters()).includes(entry(TYPE_NAME_PARAMETER_KEY,NUMBER),entry(TYPE_LENGTH_PARAMETER_KEY,38),entry(TYPE_SCALE_PARAMETER_KEY,0));
  assertThat(before.schema().field(C2).schema().parameters()).includes(entry(TYPE_NAME_PARAMETER_KEY,NUMBER),entry(TYPE_LENGTH_PARAMETER_KEY,38),entry(TYPE_SCALE_PARAMETER_KEY,0));
  assertThat(before.schema().field(C3A).schema().parameters()).includes(entry(TYPE_NAME_PARAMETER_KEY,NUMBER),entry(TYPE_LENGTH_PARAMETER_KEY,5),entry(TYPE_SCALE_PARAMETER_KEY,2));
  assertThat(before.schema().field(C3B).schema().parameters()).includes(entry(TYPE_NAME_PARAMETER_KEY,VARCHAR2),entry(TYPE_LENGTH_PARAMETER_KEY,128));
  assertThat(before.schema().field(F2).schema().parameters()).includes(entry(TYPE_NAME_PARAMETER_KEY,NUMBER),entry(TYPE_LENGTH_PARAMETER_KEY,8),entry(TYPE_SCALE_PARAMETER_KEY,4));
  assertThat(before.schema().field(F1).schema().parameters()).includes(entry(TYPE_NAME_PARAMETER_KEY,FLOAT),entry(TYPE_LENGTH_PARAMETER_KEY,10));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",849
651,"'-tryline","@Test @FixFor(DBZ-2624) public void shouldSnapshotAndStreamChangesFromTableWithNumericDefaultValues() throws Exception {
  TestHelper.dropTable(connection,debezium.complex_ddl);
  try {
    final String ddl=create table debezium.complex_ddl ( +  id numeric(6) constraint customers_id_nn not null,  +  name varchar2(100),+  value numeric default 1, +  constraint customers_pk primary key(id)+ );
    connection.execute(ddl);
    connection.execute(GRANT SELECT ON debezium.complex_ddl to  + TestHelper.getConnectorUserName());
    connection.execute(ALTER TABLE debezium.complex_ddl ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
    connection.execute(INSERT INTO debezium.complex_ddl (id, name) values (1, 'Acme'));
    connection.commit();
    final Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.TABLE_INCLUDE_LIST,DEBEZIUM.COMPLEX_DDL).with(OracleConnectorConfig.LOG_MINING_STRATEGY,online_catalog).build();
    start(OracleConnector.class,config);
    assertConnectorIsRunning();
    waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
    final SourceRecords snapshotRecords=consumeRecordsByTopic(1);
    assertThat(snapshotRecords.recordsForTopic(server1.DEBEZIUM.COMPLEX_DDL).size()).isEqualTo(1);
    waitForStreamingRunning(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
    connection.execute(INSERT INTO debezium.complex_ddl (id, name)values (2, 'Acme2'));
    connection.commit();
    final SourceRecords streamingRecords=consumeRecordsByTopic(1);
    assertThat(streamingRecords.recordsForTopic(server1.DEBEZIUM.COMPLEX_DDL).size()).isEqualTo(1);
  }
  finally {
    TestHelper.dropTable(connection,debezium.complex_ddl);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",906
652,"'-tryline","@Test @FixFor(DBZ-2683) @RequireDatabaseOption(Partitioning) public void shouldSnapshotAndStreamChangesFromPartitionedTable() throws Exception {
  TestHelper.dropTable(connection,players);
  try {
    final String ddl=CREATE TABLE players ( + id NUMERIC(6),  + name VARCHAR(100), + birth_date DATE,+ primary key(id)) + PARTITION BY RANGE (birth_date) (+ PARTITION p2019 VALUES LESS THAN (TO_DATE('01-JAN-2020', 'dd-MON-yyyy')), + PARTITION p2020 VALUES LESS THAN (TO_DATE('01-JAN-2021', 'dd-MON-yyyy'))+ );
    connection.execute(ddl);
    connection.execute(GRANT SELECT ON debezium.players to  + TestHelper.getConnectorUserName());
    connection.execute(ALTER TABLE debezium.players ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
    connection.execute(INSERT INTO debezium.players (id, name, birth_date) VALUES (1, 'Roger Rabbit', '01-MAY-2019'));
    connection.commit();
    final Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.TABLE_INCLUDE_LIST,DEBEZIUM.PLAYERS).build();
    start(OracleConnector.class,config);
    assertConnectorIsRunning();
    waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
    final SourceRecords snapshotRecords=consumeRecordsByTopic(1);
    assertThat(snapshotRecords.recordsForTopic(server1.DEBEZIUM.PLAYERS).size()).isEqualTo(1);
    waitForStreamingRunning(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
    connection.execute(INSERT INTO debezium.players (id, name, birth_date) VALUES (2, 'Bugs Bunny', '26-JUN-2019'));
    connection.execute(INSERT INTO debezium.players (id, name, birth_date) VALUES (3, 'Elmer Fud', '01-NOV-2020'));
    connection.commit();
    final SourceRecords streamRecords=consumeRecordsByTopic(2);
    assertThat(streamRecords.recordsForTopic(server1.DEBEZIUM.PLAYERS).size()).isEqualTo(2);
  }
  finally {
    TestHelper.dropTable(connection,players);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",959
653,"'-tryline","@Test @FixFor(DBZ-2849) public void shouldAvroSerializeColumnsWithSpecialCharacters() throws Exception {
  TestHelper.dropTable(connection,columns_test);
  try {
    connection.execute(CREATE TABLE columns_test (id NUMERIC(6), amount$ number not null, primary key(id)));
    connection.execute(GRANT SELECT ON debezium.columns_test to  + TestHelper.getConnectorUserName());
    connection.execute(ALTER TABLE debezium.columns_test ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
    connection.execute(INSERT INTO debezium.columns_test (id, amount$) values (1, 12345.67));
    connection.commit();
    final Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.TABLE_INCLUDE_LIST,DEBEZIUM.COLUMNS_TEST).with(OracleConnectorConfig.SANITIZE_FIELD_NAMES,true).build();
    start(OracleConnector.class,config);
    assertConnectorIsRunning();
    waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
    final SourceRecords snapshots=consumeRecordsByTopic(1);
    assertThat(snapshots.recordsForTopic(server1.DEBEZIUM.COLUMNS_TEST).size()).isEqualTo(1);
    final SourceRecord snapshot=snapshots.recordsForTopic(server1.DEBEZIUM.COLUMNS_TEST).get(0);
    VerifyRecord.isValidRead(snapshot,ID,1);
    Struct after=((Struct)snapshot.value()).getStruct(AFTER);
    assertThat(after.getInt32(ID)).isEqualTo(1);
    assertThat(after.get(AMOUNT_)).isEqualTo(VariableScaleDecimal.fromLogical(after.schema().field(AMOUNT_).schema(),BigDecimal.valueOf(12345.67d)));
    waitForStreamingRunning(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
    connection.execute(INSERT INTO debezium.columns_test (id, amount$) values (2, 23456.78));
    connection.commit();
    final SourceRecords streams=consumeRecordsByTopic(1);
    assertThat(streams.recordsForTopic(server1.DEBEZIUM.COLUMNS_TEST).size()).isEqualTo(1);
    final SourceRecord stream=streams.recordsForTopic(server1.DEBEZIUM.COLUMNS_TEST).get(0);
    VerifyRecord.isValidInsert(stream,ID,2);
    after=((Struct)stream.value()).getStruct(AFTER);
    assertThat(after.getInt32(ID)).isEqualTo(2);
    assertThat(after.get(AMOUNT_)).isEqualTo(VariableScaleDecimal.fromLogical(after.schema().field(AMOUNT_).schema(),BigDecimal.valueOf(23456.78d)));
  }
  finally {
    TestHelper.dropTable(connection,columns_test);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",1009
654,"'-tryline","@Test @FixFor(DBZ-2825) @SkipWhenAdapterNameIsNot(value=SkipWhenAdapterNameIsNot.AdapterName.LOGMINER,reason=Tests archive log support for LogMiner only) public void testArchiveLogScnBoundariesAreIncluded() throws Exception {
  TestHelper.dropTable(connection,alog_test);
  try {
    final String ddl=CREATE TABLE alog_test (id numeric, name varchar2(50), primary key(id));
    connection.execute(ddl);
    connection.execute(GRANT SELECT ON debezium.alog_test TO  + TestHelper.getConnectorUserName());
    connection.execute(ALTER TABLE debezium.alog_test ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
    connection.commit();
    connection.execute(INSERT INTO debezium.alog_test (id, name) VALUES (1, 'Test'));
    connection.commit();
    final Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.TABLE_INCLUDE_LIST,DEBEZIUM.ALOG_TEST).build();
    start(OracleConnector.class,config);
    assertConnectorIsRunning();
    waitForStreamingRunning(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
    final SourceRecords snapshotRecords=consumeRecordsByTopic(1);
    assertThat(snapshotRecords.recordsForTopic(server1.DEBEZIUM.ALOG_TEST).size()).isEqualTo(1);
    SourceRecord record=snapshotRecords.recordsForTopic(server1.DEBEZIUM.ALOG_TEST).get(0);
    Struct after=(Struct)((Struct)record.value()).get(AFTER);
    assertThat(after.get(ID)).isEqualTo(BigDecimal.valueOf(1));
    assertThat(after.get(NAME)).isEqualTo(Test);
    stopConnector();
    TestHelper.forceFlushOfRedoLogsToArchiveLogs();
    start(OracleConnector.class,config);
    waitForStreamingRunning(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
    connection.execute(INSERT INTO debezium.alog_test (id, name) values (2, 'Home'));
    connection.execute(COMMIT);
    final SourceRecords records=consumeRecordsByTopic(1);
    assertThat(records.recordsForTopic(server1.DEBEZIUM.ALOG_TEST).size()).isEqualTo(1);
    record=records.recordsForTopic(server1.DEBEZIUM.ALOG_TEST).get(0);
    after=(Struct)((Struct)record.value()).get(AFTER);
    assertThat(after.get(ID)).isEqualTo(BigDecimal.valueOf(2));
    assertThat(after.get(NAME)).isEqualTo(Home);
  }
  finally {
    TestHelper.dropTable(connection,alog_test);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",1064
655,"'-tryline","@Test @FixFor(DBZ-2784) public void shouldConvertDatesSpecifiedAsStringInSQL() throws Exception {
  try {
    TestHelper.dropTable(connection,orders);
    final String ddl=CREATE TABLE orders ( + id NUMERIC(6),  + order_date date not null,+ primary key(id));
    connection.execute(ddl);
    connection.execute(GRANT SELECT ON debezium.orders TO  + TestHelper.getConnectorUserName());
    connection.execute(ALTER TABLE debezium.orders ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
    connection.execute(INSERT INTO debezium.orders VALUES (9, '22-FEB-2018'));
    connection.execute(COMMIT);
    final Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(OracleConnectorConfig.TABLE_INCLUDE_LIST,debezium.orders).build();
    start(OracleConnector.class,config);
    assertNoRecordsToConsume();
    waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
    final SourceRecords snapshotRecords=consumeRecordsByTopic(1);
    final List<SourceRecord> snapshotOrders=snapshotRecords.recordsForTopic(server1.DEBEZIUM.ORDERS);
    assertThat(snapshotOrders.size()).isEqualTo(1);
    final Struct snapshotAfter=((Struct)snapshotOrders.get(0).value()).getStruct(AFTER);
    assertThat(snapshotAfter.get(ID)).isEqualTo(9);
    assertThat(snapshotAfter.get(ORDER_DATE)).isEqualTo(1519257600000L);
    waitForStreamingRunning(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
    connection.execute(INSERT INTO debezium.orders VALUES (10, '22-FEB-2018'));
    connection.execute(COMMIT);
    final SourceRecords streamRecords=consumeRecordsByTopic(1);
    final List<SourceRecord> orders=streamRecords.recordsForTopic(server1.DEBEZIUM.ORDERS);
    assertThat(orders).hasSize(1);
    final Struct after=((Struct)orders.get(0).value()).getStruct(AFTER);
    assertThat(after.get(ID)).isEqualTo(10);
    assertThat(after.get(ORDER_DATE)).isEqualTo(1519257600000L);
  }
  finally {
    TestHelper.dropTable(connection,orders);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",1125
656,"'-tryline","@Test @FixFor(DBZ-2733) public void shouldConvertNumericAsStringDecimalHandlingMode() throws Exception {
  TestHelper.dropTable(connection,table_number_pk);
  try {
    final String ddl=CREATE TABLE table_number_pk (id NUMBER, name varchar2(255), age number, primary key (id));
    connection.execute(ddl);
    connection.execute(GRANT SELECT ON debezium.table_number_pk TO  + TestHelper.getConnectorUserName());
    connection.execute(ALTER TABLE debezium.table_number_pk ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
    connection.execute(INSERT INTO debezium.table_number_pk (id, name, age) values (1, 'Bob', 25));
    connection.execute(COMMIT);
    final Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(OracleConnectorConfig.TABLE_INCLUDE_LIST,debezium.table_number_pk).with(OracleConnectorConfig.DECIMAL_HANDLING_MODE,string).build();
    start(OracleConnector.class,config);
    assertNoRecordsToConsume();
    waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
    SourceRecords records=consumeRecordsByTopic(1);
    assertThat(records.recordsForTopic(server1.DEBEZIUM.TABLE_NUMBER_PK)).hasSize(1);
    SourceRecord record=records.recordsForTopic(server1.DEBEZIUM.TABLE_NUMBER_PK).get(0);
    List<SchemaAndValueField> expected=Arrays.asList(new SchemaAndValueField(ID,Schema.STRING_SCHEMA,1),new SchemaAndValueField(NAME,Schema.OPTIONAL_STRING_SCHEMA,Bob),new SchemaAndValueField(AGE,Schema.OPTIONAL_STRING_SCHEMA,25));
    assertRecordSchemaAndValues(expected,record,AFTER);
    waitForStreamingRunning(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
    connection.execute(INSERT INTO debezium.table_number_pk (id, name, age) values (2, 'Sue', 30));
    connection.execute(COMMIT);
    records=consumeRecordsByTopic(1);
    assertThat(records.recordsForTopic(server1.DEBEZIUM.TABLE_NUMBER_PK)).hasSize(1);
    record=records.recordsForTopic(server1.DEBEZIUM.TABLE_NUMBER_PK).get(0);
    expected=Arrays.asList(new SchemaAndValueField(ID,Schema.STRING_SCHEMA,2),new SchemaAndValueField(NAME,Schema.OPTIONAL_STRING_SCHEMA,Sue),new SchemaAndValueField(AGE,Schema.OPTIONAL_STRING_SCHEMA,30));
    assertRecordSchemaAndValues(expected,record,AFTER);
  }
  finally {
    TestHelper.dropTable(connection,table_number_pk);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",1179
657,"'-tryline","@Test @FixFor(DBZ-2920) public void shouldStreamDdlThatExceeds4000() throws Exception {
  TestHelper.dropTable(connection,large_dml);
  final String ddl=CREATE TABLE large_dml (id NUMERIC(6), value varchar2(4000), value2 varchar2(4000), primary key(id));
  connection.execute(ddl);
  connection.execute(GRANT SELECT ON debezium.large_dml TO  + TestHelper.getConnectorUserName());
  connection.execute(ALTER TABLE debezium.large_dml ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
  String largeValue=generateAlphaNumericStringColumn(4000);
  String largeValue2=generateAlphaNumericStringColumn(4000);
  connection.execute(INSERT INTO large_dml (id, value, value2) values (1, ' + largeValue + ', '+ largeValue2+ '));
  connection.commit();
  final Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.TABLE_INCLUDE_LIST,debezium.large_dml).with(OracleConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).build();
  start(OracleConnector.class,config);
  assertNoRecordsToConsume();
  waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.topics()).hasSize(1);
  assertThat(records.recordsForTopic(server1.DEBEZIUM.LARGE_DML)).hasSize(1);
  Struct after=((Struct)records.recordsForTopic(server1.DEBEZIUM.LARGE_DML).get(0).value()).getStruct(AFTER);
  assertThat(after.get(ID)).isEqualTo(1);
  assertThat(after.get(VALUE)).isEqualTo(largeValue);
  assertThat(after.get(VALUE2)).isEqualTo(largeValue2);
  waitForStreamingRunning(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  List<String> largeValues=new ArrayList<>();
  List<String> largeValues2=new ArrayList<>();
  for (int i=0; i < 10; ++i) {
    largeValues.add(generateAlphaNumericStringColumn(4000));
    largeValues2.add(generateAlphaNumericStringColumn(4000));
    connection.execute(INSERT INTO large_dml (id, value, value2) values ( + (2 + i) + , '+ largeValues.get(largeValues.size() - 1)+ ', '+ largeValues2.get(largeValues2.size() - 1)+ '));
  }
  connection.commit();
  records=consumeRecordsByTopic(10);
  assertThat(records.topics()).hasSize(1);
  assertThat(records.recordsForTopic(server1.DEBEZIUM.LARGE_DML)).hasSize(10);
  List<SourceRecord> entries=records.recordsForTopic(server1.DEBEZIUM.LARGE_DML);
  for (int i=0; i < 10; ++i) {
    SourceRecord record=entries.get(i);
    after=((Struct)record.value()).getStruct(AFTER);
    assertThat(after.get(ID)).isEqualTo(2 + i);
    assertThat(after.get(VALUE)).isEqualTo(largeValues.get(i));
    assertThat(after.get(VALUE2)).isEqualTo(largeValues2.get(i));
  }
  stopConnector((r) -> TestHelper.dropTable(connection,large_dml));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",1250
658,"'-tryline","@Test @FixFor(DBZ-2891) @SkipWhenAdapterNameIsNot(value=SkipWhenAdapterNameIsNot.AdapterName.XSTREAM,reason=Only applies to Xstreams) public void shouldNotObserveDeadlockWhileStreamingWithXstream() throws Exception {
  long oldPollTimeInMs=pollTimeoutInMs;
  TestHelper.dropTable(connection,deadlock_test);
  try {
    final String ddl=CREATE TABLE deadlock_test (id numeric(9), name varchar2(50), primary key(id));
    connection.execute(ddl);
    connection.execute(GRANT SELECT ON debezium.deadlock_test TO  + TestHelper.getConnectorUserName());
    connection.execute(ALTER TABLE debezium.deadlock_test ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
    this.pollTimeoutInMs=TimeUnit.SECONDS.toMillis(20);
    final Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.TABLE_INCLUDE_LIST,debezium.deadlock_test).with(OracleConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(OracleConnectorConfig.MAX_QUEUE_SIZE,2).with(RelationalDatabaseConnectorConfig.MAX_BATCH_SIZE,1).build();
    start(OracleConnector.class,config);
    assertNoRecordsToConsume();
    waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
    for (int i=0; i < 10; ++i) {
      connection.execute(INSERT INTO deadlock_test (id, name) values ( + i + , 'Test + i+ '));
      connection.execute(COMMIT);
    }
    SourceRecords records=consumeRecordsByTopic(10,24);
    assertThat(records.topics()).hasSize(1);
    assertThat(records.recordsForTopic(server1.DEBEZIUM.DEADLOCK_TEST)).hasSize(10);
  }
  finally {
    this.pollTimeoutInMs=oldPollTimeInMs;
    TestHelper.dropTable(connection,deadlock_test);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",1316
659,"'-tryline","@Test @FixFor(DBZ-3057) public void shouldReadTableUniqueIndicesWithCharactersThatRequireExplicitQuotes() throws Exception {
  final String TABLE_NAME=debezium.\#T70_Sid:582003931_1_ConnConne\;
  try {
    TestHelper.dropTable(connection,TABLE_NAME);
    final String ddl=CREATE GLOBAL TEMPORARY TABLE  + TABLE_NAME +  (id number, name varchar2(50));
    connection.execute(ddl);
    connection.execute(GRANT SELECT ON  + TABLE_NAME +  TO + TestHelper.getConnectorUserName());
    connection.execute(ALTER TABLE  + TABLE_NAME +  ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
    final Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.SNAPSHOT_MODE,OracleConnectorConfig.SnapshotMode.INITIAL).build();
    start(OracleConnector.class,config);
    assertConnectorIsRunning();
    waitForStreamingRunning(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  }
  finally {
    TestHelper.dropTable(connection,TABLE_NAME);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",1360
660,"'-tryline","@Test @FixFor(DBZ-3151) public void testSnapshotCompletesWithSystemGeneratedUniqueIndexOnKeylessTable() throws Exception {
  TestHelper.dropTable(connection,XML_TABLE);
  try {
    final String ddl=CREATE TABLE XML_TABLE of XMLTYPE;
    connection.execute(ddl);
    connection.execute(GRANT SELECT ON DEBEZIUM.XML_TABLE TO  + TestHelper.getConnectorUserName());
    connection.execute(ALTER TABLE DEBEZIUM.XML_TABLE ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
    connection.execute(INSERT INTO DEBEZIUM.XML_TABLE values (xmltype('<?xml version=\1.0\?><tab><name>Hi</name></tab>')));
    connection.execute(COMMIT);
    final Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).build();
    start(OracleConnector.class,config);
    assertNoRecordsToConsume();
    waitForStreamingRunning(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  }
  finally {
    TestHelper.dropTable(connection,XML_TABLE);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",1386
661,"'-tryline","@Test @FixFor(DBZ-3001) public void shouldGetOracleDatabaseVersion() throws Exception {
  OracleDatabaseVersion version=connection.getOracleVersion();
  assertThat(version).isNotNull();
  assertThat(version.getMajor()).isGreaterThan(0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",1413
662,"'-tryline","@Test @FixFor(DBZ-3109) public void shouldStreamChangesForTableWithMultipleLogGroupTypes() throws Exception {
  try {
    TestHelper.dropTable(connection,log_group_test);
    final String ddl=CREATE TABLE log_group_test (id numeric(9,0) primary key, name varchar2(50));
    connection.execute(ddl);
    connection.execute(GRANT SELECT ON debezium.log_group_test TO  + TestHelper.getConnectorUserName());
    connection.execute(ALTER TABLE debezium.log_group_test ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
    connection.execute(ALTER TABLE debezium.log_group_test ADD SUPPLEMENTAL LOG DATA (PRIMARY KEY) COLUMNS);
    final Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(OracleConnectorConfig.TABLE_INCLUDE_LIST,DEBEZIUM\\.LOG_GROUP_TEST).build();
    start(OracleConnector.class,config);
    assertConnectorIsRunning();
    waitForStreamingRunning(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
    connection.execute(INSERT INTO debezium.log_group_test (id, name) values (1,'Test'));
    connection.execute(COMMIT);
    SourceRecords records=consumeRecordsByTopic(1);
    assertThat(records.recordsForTopic(server1.DEBEZIUM.LOG_GROUP_TEST)).hasSize(1);
  }
  finally {
    TestHelper.dropTable(connection,log_group_test);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",1421
663,"'-tryline","@Test @FixFor(DBZ-2875) public void shouldResumeStreamingAtCorrectScnOffset() throws Exception {
  TestHelper.dropTable(connection,offset_test);
  try {
    Testing.Debug.enable();
    connection.execute(CREATE TABLE offset_test (id numeric(9,0) primary key, name varchar2(50)));
    connection.execute(GRANT SELECT ON debezium.offset_test TO  + TestHelper.getConnectorUserName());
    connection.execute(ALTER TABLE debezium.offset_test ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
    final Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(OracleConnectorConfig.TABLE_INCLUDE_LIST,DEBEZIUM\\.OFFSET_TEST).build();
    start(OracleConnector.class,config);
    assertNoRecordsToConsume();
    waitForStreamingRunning(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
    connection.execute(INSERT INTO debezium.offset_test (id, name) values (1, 'Bob'));
    SourceRecords records1=consumeRecordsByTopic(1);
    assertThat(records1.recordsForTopic(server1.DEBEZIUM.OFFSET_TEST)).hasSize(1);
    Struct after=(Struct)((Struct)records1.allRecordsInOrder().get(0).value()).get(after);
    Testing.print(after);
    assertThat(after.get(ID)).isEqualTo(1);
    assertThat(after.get(NAME)).isEqualTo(Bob);
    stopConnector();
    start(OracleConnector.class,config);
    assertNoRecordsToConsume();
    waitForStreamingRunning(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
    connection.execute(INSERT INTO debezium.offset_test (id, name) values (2, 'Bill'));
    SourceRecords records2=consumeRecordsByTopic(1);
    assertThat(records2.recordsForTopic(server1.DEBEZIUM.OFFSET_TEST)).hasSize(1);
    after=(Struct)((Struct)records2.allRecordsInOrder().get(0).value()).get(after);
    Testing.print(after);
    assertThat(after.get(ID)).isEqualTo(2);
    assertThat(after.get(NAME)).isEqualTo(Bill);
  }
  finally {
    TestHelper.dropTable(connection,offset_test);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",1454
664,"'-tryline","@Test @FixFor(DBZ-3036) public void shouldHandleParentChildIndexOrganizedTables() throws Exception {
  TestHelper.dropTable(connection,test_iot);
  try {
    String ddl=CREATE TABLE test_iot ( + id numeric(9,0),  + description varchar2(50) not null, + primary key(id)) + ORGANIZATION INDEX + INCLUDING description + OVERFLOW;
    connection.execute(ddl);
    TestHelper.streamTable(connection,debezium.test_iot);
    connection.executeWithoutCommitting(INSERT INTO debezium.test_iot VALUES ('1', 'Hello World'));
    connection.execute(COMMIT);
    Configuration config=defaultConfig().with(OracleConnectorConfig.SCHEMA_INCLUDE_LIST,DEBEZIUM).with(OracleConnectorConfig.TABLE_INCLUDE_LIST,(.)*IOT(.)*).build();
    start(OracleConnector.class,config);
    assertNoRecordsToConsume();
    waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
    SourceRecords records=consumeRecordsByTopic(1);
    assertThat(records.recordsForTopic(server1.DEBEZIUM.TEST_IOT)).hasSize(1);
    SourceRecord record=records.recordsForTopic(server1.DEBEZIUM.TEST_IOT).get(0);
    Struct after=(Struct)((Struct)record.value()).get(FieldName.AFTER);
    VerifyRecord.isValidRead(record,ID,1);
    assertThat(after.get(DESCRIPTION)).isEqualTo(Hello World);
    waitForStreamingRunning(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
    connection.executeWithoutCommitting(INSERT INTO debezium.test_iot VALUES ('2', 'Goodbye'));
    connection.execute(COMMIT);
    records=consumeRecordsByTopic(1);
    assertThat(records.recordsForTopic(server1.DEBEZIUM.TEST_IOT)).hasSize(1);
    record=records.recordsForTopic(server1.DEBEZIUM.TEST_IOT).get(0);
    after=(Struct)((Struct)record.value()).get(FieldName.AFTER);
    VerifyRecord.isValidInsert(record,ID,2);
    assertThat(after.get(DESCRIPTION)).isEqualTo(Goodbye);
  }
  finally {
    TestHelper.dropTable(connection,test_iot);
    TestHelper.purgeRecycleBin(connection);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",1507
665,"'-tryline","@Test public void shouldParseCreateAndAlterTable() throws Exception {
  final String createStatement=IoUtil.read(IoUtil.getResourceAsStream(ddl/create_table.sql,null,getClass(),null,null));
  Objects.requireNonNull(createStatement);
  parser.parse(createStatement,tables);
  Table table=tables.forTable(new TableId(null,null,TABLE_NAME));
  assertThat(tables.size()).isEqualTo(1);
  assertThat(table.retrieveColumnNames()).containsExactly(ID,COL1,COL2,COL3,COL4,COL5,COL6,COL7,COL8,COL9,COL10,COL11,COL12,COL13);
  assertThat(table.columnWithName(ID).position()).isEqualTo(1);
  assertThat(table.isPrimaryKeyColumn(ID));
  testColumn(table,ID,false,Types.NUMERIC,NUMBER,19,0,false,null);
  testColumn(table,COL1,true,Types.NUMERIC,NUMBER,4,2,true,null);
  testColumn(table,COL2,false,Types.VARCHAR,VARCHAR2,255,null,true,debezium);
  testColumn(table,COL3,false,Types.NVARCHAR,NVARCHAR2,255,null,false,null);
  testColumn(table,COL4,true,Types.CHAR,CHAR,1,null,true,null);
  testColumn(table,COL5,true,Types.NCHAR,NCHAR,1,0,true,null);
  testColumn(table,COL6,true,Types.FLOAT,FLOAT,126,0,true,null);
  testColumn(table,COL7,true,Types.TIMESTAMP,DATE,-1,null,true,null);
  testColumn(table,COL8,true,Types.TIMESTAMP,TIMESTAMP,6,null,true,null);
  testColumn(table,COL9,true,Types.BLOB,BLOB,-1,null,true,null);
  testColumn(table,COL10,true,Types.CLOB,CLOB,-1,null,true,null);
  testColumn(table,col11,true,Types.STRUCT,MDSYS.SDO_GEOMETRY,-1,null,true,null);
  testColumn(table,col12,true,Types.NUMERIC,NUMBER,1,0,true,null);
  testColumn(table,col13,false,Types.TIMESTAMP,DATE,-1,null,false,null);
  String ddl=alter table  + TABLE_NAME +  add (col21 varchar2(20), col22 number(19));;
  parser.parse(ddl,tables);
  Table alteredTable=tables.forTable(new TableId(null,null,TABLE_NAME));
  assertThat(alteredTable.retrieveColumnNames()).containsExactly(ID,COL1,COL2,COL3,COL4,COL5,COL6,COL7,COL8,COL9,COL10,COL11,COL12,COL13,COL21,COL22);
  testColumn(alteredTable,COL21,true,Types.VARCHAR,VARCHAR2,20,null,true,null);
  testColumn(alteredTable,COL22,true,Types.NUMERIC,NUMBER,19,0,true,null);
  ddl=alter table  + TABLE_NAME +  add col23 varchar2(20);;
  try {
    parser.parse(ddl,tables);
  }
 catch (  Exception e) {
    assertThat(e.getMessage().contains(no viable alternative at input));
  }
  ddl=alter table  + TABLE_NAME +  add (col23 varchar2(20) not null);;
  parser.parse(ddl,tables);
  alteredTable=tables.forTable(new TableId(null,null,TABLE_NAME));
  assertThat(alteredTable.retrieveColumnNames()).containsExactly(ID,COL1,COL2,COL3,COL4,COL5,COL6,COL7,COL8,COL9,COL10,COL11,COL12,COL13,COL21,COL22,COL23);
  testColumn(alteredTable,COL23,false,Types.VARCHAR,VARCHAR2,20,null,false,null);
  ddl=alter table  + TABLE_NAME +  drop (col22, col23);;
  parser.parse(ddl,tables);
  alteredTable=tables.forTable(new TableId(null,null,TABLE_NAME));
  assertThat(alteredTable.retrieveColumnNames()).containsExactly(ID,COL1,COL2,COL3,COL4,COL5,COL6,COL7,COL8,COL9,COL10,COL11,COL12,COL13,COL21);
  ddl=drop table  + TABLE_NAME + ;;
  parser.parse(ddl,tables);
  assertThat(tables.size()).isZero();
  ddl=drop table  + TABLE_NAME +  cascade constrains purge;;
  ddl=ALTER TABLE  + TABLE_NAME +  ADD CONSTRAINT FKB97209E040C4205 FOREIGN KEY (col1) REFERENCES debezium_ref(ID);;
  ddl=ALTER TABLE  + TABLE_NAME +  MODIFY COL1 varchar2(50) not null;;
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleDdlParserTest.java",43
666,"'-tryline","@Before public void before() throws Exception {
  connection=TestHelper.testConnection();
  TestHelper.dropTable(connection,debezium.number_one_test);
  setConsumeTimeout(TestHelper.defaultMessageConsumerPollTimeout(),TimeUnit.SECONDS);
  initializeConnectorTestFramework();
  Testing.Files.delete(TestHelper.DB_HISTORY_PATH);
  connection.execute(CREATE TABLE NUMBER_ONE_TEST (id numeric primary key, data number(1) default 0, data2 number(1) default 1));
  TestHelper.streamTable(connection,debezium.number_one_test);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleNumberOneIT.java",38
667,"'-tryline","@After public void after() throws Exception {
  if (connection != null && connection.isConnected()) {
    TestHelper.dropTable(connection,debezium.number_one_test);
    connection.close();
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleNumberOneIT.java",52
668,"'-tryline","@Test @FixFor(DBZ-3208) public void shouldHandleNumberOneAsNumber() throws Exception {
  Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.TABLE_INCLUDE_LIST,DEBEZIUM\\.NUMBER_ONE_TEST).build();
  insertDataBatchStartingAtKey(1);
  start(OracleConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  SourceRecords records=consumeRecordsByTopic(5);
  List<SourceRecord> testRecords=records.recordsForTopic(server1.DEBEZIUM.NUMBER_ONE_TEST);
  assertThat(testRecords).hasSize(5);
  assertRecordNumberValue(testRecords,0,BigDecimal.valueOf(1),Byte.valueOf(0),Byte.valueOf(0));
  assertRecordNumberValue(testRecords,1,BigDecimal.valueOf(2),Byte.valueOf(1),Byte.valueOf(1));
  assertRecordNumberValue(testRecords,2,BigDecimal.valueOf(3),Byte.valueOf(2),Byte.valueOf(2));
  assertRecordNumberValue(testRecords,3,BigDecimal.valueOf(4),Byte.valueOf(-1),Byte.valueOf(-1));
  assertRecordNumberValue(testRecords,4,BigDecimal.valueOf(5),Byte.valueOf(0),Byte.valueOf(1));
  waitForStreamingRunning(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  insertDataBatchStartingAtKey(6);
  records=consumeRecordsByTopic(5);
  testRecords=records.recordsForTopic(server1.DEBEZIUM.NUMBER_ONE_TEST);
  assertThat(testRecords).hasSize(5);
  assertRecordNumberValue(testRecords,0,BigDecimal.valueOf(6),Byte.valueOf(0),Byte.valueOf(0));
  assertRecordNumberValue(testRecords,1,BigDecimal.valueOf(7),Byte.valueOf(1),Byte.valueOf(1));
  assertRecordNumberValue(testRecords,2,BigDecimal.valueOf(8),Byte.valueOf(2),Byte.valueOf(2));
  assertRecordNumberValue(testRecords,3,BigDecimal.valueOf(9),Byte.valueOf(-1),Byte.valueOf(-1));
  assertRecordNumberValue(testRecords,4,BigDecimal.valueOf(10),Byte.valueOf(0),Byte.valueOf(1));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleNumberOneIT.java",60
669,"'-tryline","@Test @FixFor(DBZ-3208) public void shouldHandleNumberOneAsBoolean() throws Exception {
  Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.TABLE_INCLUDE_LIST,DEBEZIUM\\.NUMBER_ONE_TEST).with(OracleConnectorConfig.CUSTOM_CONVERTERS,boolean).with(boolean.type,NumberOneToBooleanConverter.class.getName()).with(boolean.selector,.*NUMBER_ONE_TEST\\.DATA.*).build();
  insertDataBatchStartingAtKey(1);
  start(OracleConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  SourceRecords records=consumeRecordsByTopic(5);
  List<SourceRecord> testRecords=records.recordsForTopic(server1.DEBEZIUM.NUMBER_ONE_TEST);
  assertThat(testRecords).hasSize(5);
  assertRecordNumberValue(testRecords,0,BigDecimal.valueOf(1),false,false);
  assertRecordNumberValue(testRecords,1,BigDecimal.valueOf(2),true,true);
  assertRecordNumberValue(testRecords,2,BigDecimal.valueOf(3),true,true);
  assertRecordNumberValue(testRecords,3,BigDecimal.valueOf(4),false,false);
  assertRecordNumberValue(testRecords,4,BigDecimal.valueOf(5),false,true);
  waitForStreamingRunning(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  insertDataBatchStartingAtKey(6);
  records=consumeRecordsByTopic(5);
  testRecords=records.recordsForTopic(server1.DEBEZIUM.NUMBER_ONE_TEST);
  assertThat(testRecords).hasSize(5);
  assertRecordNumberValue(testRecords,0,BigDecimal.valueOf(6),false,false);
  assertRecordNumberValue(testRecords,1,BigDecimal.valueOf(7),true,true);
  assertRecordNumberValue(testRecords,2,BigDecimal.valueOf(8),true,true);
  assertRecordNumberValue(testRecords,3,BigDecimal.valueOf(9),false,false);
  assertRecordNumberValue(testRecords,4,BigDecimal.valueOf(10),false,true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleNumberOneIT.java",101
670,"'-tryline","@Before public void beforeEach() throws Exception {
  this.connectorConfig=new OracleConnectorConfig(TestHelper.defaultConfig().build());
  this.offsetLoader=new OracleOffsetContext.Loader(connectorConfig,TestHelper.adapter());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleOffsetContextTest.java",29
671,"'-tryline","@Test @FixFor(DBZ-2994) public void shouldreadScnAndCommitScnAsLongValues() throws Exception {
  final Map<String,Object> offsetValues=new HashMap<>();
  offsetValues.put(SourceInfo.SCN_KEY,12345L);
  offsetValues.put(SourceInfo.COMMIT_SCN_KEY,23456L);
  final OracleOffsetContext offsetContext=(OracleOffsetContext)offsetLoader.load(offsetValues);
  assertThat(offsetContext.getScn()).isEqualTo(Scn.valueOf(12345));
  if (TestHelper.adapter().equals(OracleConnectorConfig.ConnectorAdapter.LOG_MINER)) {
    assertThat(offsetContext.getCommitScn()).isEqualTo(Scn.valueOf(23456));
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleOffsetContextTest.java",35
672,"'-tryline","@Test @FixFor(DBZ-2994) public void shouldReadScnAndCommitScnAsStringValues() throws Exception {
  final Map<String,Object> offsetValues=new HashMap<>();
  offsetValues.put(SourceInfo.SCN_KEY,12345);
  offsetValues.put(SourceInfo.COMMIT_SCN_KEY,23456);
  final OracleOffsetContext offsetContext=(OracleOffsetContext)offsetLoader.load(offsetValues);
  assertThat(offsetContext.getScn()).isEqualTo(Scn.valueOf(12345));
  if (TestHelper.adapter().equals(OracleConnectorConfig.ConnectorAdapter.LOG_MINER)) {
    assertThat(offsetContext.getCommitScn()).isEqualTo(Scn.valueOf(23456));
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleOffsetContextTest.java",49
673,"'-tryline","@Test @FixFor(DBZ-2994) public void shouldHandleNullScnAndCommitScnValues() throws Exception {
  final Map<String,Object> offsetValues=new HashMap<>();
  offsetValues.put(SourceInfo.SCN_KEY,null);
  offsetValues.put(SourceInfo.COMMIT_SCN_KEY,null);
  final OracleOffsetContext offsetContext=(OracleOffsetContext)offsetLoader.load(offsetValues);
  assertThat(offsetContext.getScn()).isNull();
  assertThat(offsetContext.getCommitScn()).isNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleOffsetContextTest.java",63
674,"'-tryline","@Test @FixFor(DBZ-1904) public void snapshotSchemaChanges() throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int TABLES=2;
  final int ID_START_1=10;
  final Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(OracleConnectorConfig.TABLE_INCLUDE_LIST,DEBEZIUM\\.TABLE[ABC]).with(OracleConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).build();
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START_1 + i;
    connection.execute(INSERT INTO debezium.tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO debezium.tableb VALUES( + id + , 'b'));
  }
  start(OracleConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  Testing.Print.enable();
  SourceRecords records=consumeRecordsByTopic(3);
  final List<SourceRecord> schemaRecords=records.allRecordsInOrder();
  Assertions.assertThat(schemaRecords).hasSize(3);
  schemaRecords.forEach(record -> {
    Assertions.assertThat(record.topic()).isEqualTo(server1);
    Assertions.assertThat(((Struct)record.key()).getString(databaseName)).isEqualTo(TestHelper.getDatabaseName());
    Assertions.assertThat(record.sourceOffset().get(snapshot)).isEqualTo(true);
  }
);
  Assertions.assertThat(((Struct)schemaRecords.get(0).value()).getStruct(source).getString(snapshot)).isEqualTo(true);
  Assertions.assertThat(((Struct)schemaRecords.get(1).value()).getStruct(source).getString(snapshot)).isEqualTo(true);
  Assertions.assertThat(((Struct)schemaRecords.get(2).value()).getStruct(source).getString(snapshot)).isEqualTo(true);
  Assertions.assertThat(((Struct)schemaRecords.get(0).value()).getStruct(source).getString(schema)).isEqualTo(DEBEZIUM);
  Assertions.assertThat(((Struct)schemaRecords.get(0).value()).getString(ddl)).contains(CREATE TABLE);
  Assertions.assertThat(((Struct)schemaRecords.get(0).value()).getString(schemaName)).isEqualTo(DEBEZIUM);
  final List<Struct> tableChanges=((Struct)schemaRecords.get(0).value()).getArray(tableChanges);
  Assertions.assertThat(tableChanges).hasSize(1);
  Assertions.assertThat(tableChanges.get(0).get(type)).isEqualTo(CREATE);
  records=consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES);
  Assertions.assertThat(records.recordsForTopic(server1.DEBEZIUM.TABLEA)).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.DEBEZIUM.TABLEB)).hasSize(RECORDS_PER_TABLE);
  records.recordsForTopic(server1.DEBEZIUM.TABLEB).forEach(record -> {
    assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.DEBEZIUM.TABLEB.Value).field(ID,Schema.INT32_SCHEMA).field(COLB,Schema.OPTIONAL_STRING_SCHEMA).build());
  }
);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\SchemaHistoryTopicIT.java",71
675,"'-tryline","@Test public void signalSchemaChange() throws Exception {
  Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.TABLE_INCLUDE_LIST,DEBEZIUM\\.CUSTOMER,DEBEZIUM\\.DEBEZIUM_SIGNAL).with(OracleConnectorConfig.SIGNAL_DATA_COLLECTION,ORCLPDB1.DEBEZIUM.DEBEZIUM_SIGNAL).with(OracleConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(OracleConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(OracleConnectorConfig.LOG_MINING_STRATEGY,OracleConnectorConfig.LogMiningStrategy.ONLINE_CATALOG).build();
  start(OracleConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  connection.execute(INSERT INTO debezium.customer VALUES (1, 'Billie-Bob', 1234.56, TO_DATE('2018/02/22', 'yyyy-mm-dd')));
  connection.execute(ALTER TABLE debezium.customer DROP CONSTRAINT mypk);
  connection.execute(ALTER TABLE debezium.customer ADD CONSTRAINT mypk PRIMARY KEY (id, name));
  connection.execute(INSERT INTO debezium.debezium_signal VALUES('1', 'schema-changes', '{\database\: \ORCLPDB1\, \schema\: \DEBEZIUM\, \changes\:[{\type\:\ALTER\,\id\:\\\\ORCLPDB1\\\.\\\DEBEZIUM\\\.\\\CUSTOMER\\\\,\table\:{\defaultCharsetName\:null,\primaryKeyColumnNames\:[\ID\, \NAME\],\columns\:[{\name\:\ID\,\jdbcType\:2,\typeName\:\NUMBER\,\typeExpression\:\NUMBER\,\charsetName\:null,\length\:9,\scale\:0,\position\:1,\optional\:false,\autoIncremented\:false,\generated\:false},{\name\:\NAME\,\jdbcType\:12,\typeName\:\VARCHAR2\,\typeExpression\:\VARCHAR2\,\charsetName\:null,\length\:1000,\position\:2,\optional\:true,\autoIncremented\:false,\generated\:false},{\name\:\SCORE\,\jdbcType\:2,\typeName\:\NUMBER\,\typeExpression\:\NUMBER\,\charsetName\:null,\length\:6,\scale\:2,\position\:3,\optional\:true,\autoIncremented\:false,\generated\:false},{\name\:\REGISTERED\,\jdbcType\:93,\typeName\:\TIMESTAMP(6)\,\typeExpression\:\TIMESTAMP(6)\,\charsetName\:null,\length\:6,\position\:4,\optional\:true,\autoIncremented\:false,\generated\:false}]}}]}'));
  connection.execute(INSERT INTO debezium.customer VALUES (2, 'Battle-Bug', 1234.56, TO_DATE('2018/02/22', 'yyyy-mm-dd')));
  final int expected=2 + 1 + 1+ 1+ 1;
  List<SourceRecord> records=consumeRecordsByTopic(expected).allRecordsInOrder();
  assertThat(records).hasSize(expected);
  final SourceRecord pre=records.get(0);
  final SourceRecord post=records.get(5);
  Assertions.assertThat(((Struct)pre.key()).schema().fields()).hasSize(1);
  final Struct postKey=(Struct)post.key();
  Assertions.assertThat(postKey.schema().fields()).hasSize(2);
  Assertions.assertThat(postKey.schema().field(ID)).isNotNull();
  Assertions.assertThat(postKey.schema().field(NAME)).isNotNull();
  stopConnector();
  start(OracleConnector.class,config);
  assertConnectorIsRunning();
  connection.execute(INSERT INTO debezium.customer VALUES (3, 'Crazy-Frog', 1234.56, TO_DATE('2018/02/22', 'yyyy-mm-dd')));
  records=consumeRecordsByTopic(1).allRecordsInOrder();
  assertThat(records).hasSize(1);
  final SourceRecord post2=records.get(0);
  final Struct postKey2=(Struct)post2.key();
  Assertions.assertThat(postKey2.schema().fields()).hasSize(2);
  Assertions.assertThat(postKey2.schema().field(ID)).isNotNull();
  Assertions.assertThat(postKey2.schema().field(NAME)).isNotNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\SignalsIT.java",84
676,"'-tryline","@Before public void before() throws Exception {
  setConsumeTimeout(TestHelper.defaultMessageConsumerPollTimeout(),TimeUnit.SECONDS);
  initializeConnectorTestFramework();
  Testing.Debug.enable();
  Testing.Files.delete(TestHelper.DB_HISTORY_PATH);
  Configuration config=connectorConfig().build();
  start(OracleConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\SnapshotDatatypesIT.java",42
677,"'-tryline","@After public void after() throws Exception {
  if (connection != null) {
    cleanupTables();
    connection.close();
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\SnapshotSelectOverridesIT.java",71
678,"'-tryline","@Test @FixFor(DBZ-3250) public void takeSnapshotWithOverrides() throws Exception {
  final Configuration config=TestHelper.defaultConfig().with(TABLE_INCLUDE_LIST,DEBEZIUM\\.TABLE[1-3]).with(SNAPSHOT_SELECT_STATEMENT_OVERRIDES_BY_TABLE,DEBEZIUM.TABLE1,DEBEZIUM.TABLE3).with(SNAPSHOT_SELECT_STATEMENT_OVERRIDES_BY_TABLE + .DEBEZIUM.TABLE1,SELECT * FROM DEBEZIUM.TABLE1 WHERE SOFT_DELETED = 0 ORDER BY ID DESC).with(SNAPSHOT_SELECT_STATEMENT_OVERRIDES_BY_TABLE + .DEBEZIUM.TABLE3,SELECT * FROM DEBEZIUM.TABLE3 WHERE SOFT_DELETED = 0).build();
  start(OracleConnector.class,config);
  assertConnectorIsRunning();
  int expected=INITIAL_RECORDS_PER_TABLE + (INITIAL_RECORDS_PER_TABLE + INITIAL_RECORDS_PER_TABLE) / 2;
  SourceRecords records=consumeRecordsByTopic(expected);
  List<SourceRecord> table1=records.recordsForTopic(server1.DEBEZIUM.TABLE1);
  List<SourceRecord> table2=records.recordsForTopic(server1.DEBEZIUM.TABLE2);
  List<SourceRecord> table3=records.recordsForTopic(server1.DEBEZIUM.TABLE3);
  assertThat(table1).hasSize(INITIAL_RECORDS_PER_TABLE / 2);
  assertThat(table2).hasSize(INITIAL_RECORDS_PER_TABLE);
  assertThat(table3).hasSize(INITIAL_RECORDS_PER_TABLE / 2);
  StringBuilder actualIdsForTable1=new StringBuilder();
  for (int i=0; i < INITIAL_RECORDS_PER_TABLE / 2; ++i) {
    SourceRecord record=table1.get(i);
    Struct key=(Struct)record.key();
    actualIdsForTable1.append(key.get(ID));
    Struct value=(Struct)record.value();
    assertThat(((Struct)value.get(Envelope.FieldName.AFTER)).get(SOFT_DELETED)).isEqualTo((byte)0);
  }
  final String expectedIdsForTable1=86420;
  assertThat(actualIdsForTable1.toString()).isEqualTo(expectedIdsForTable1);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\SnapshotSelectOverridesIT.java",85
679,"'-tryline","@Before public void before() throws Exception {
  setConsumeTimeout(TestHelper.defaultMessageConsumerPollTimeout(),TimeUnit.SECONDS);
  dropTables();
  initializeConnectorTestFramework();
  Testing.Files.delete(TestHelper.DB_HISTORY_PATH);
  Configuration config=connectorConfig().build();
  createTables();
  start(OracleConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\StreamingDatatypesIT.java",32
680,"'-tryline","@Test public void transactionMetadata() throws Exception {
  Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.TABLE_INCLUDE_LIST,DEBEZIUM\\.CUSTOMER,DEBEZIUM\\.ORDERS).with(OracleConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(OracleConnectorConfig.PROVIDE_TRANSACTION_METADATA,true).with(OracleConnectorConfig.LOG_MINING_STRATEGY,OracleConnectorConfig.LogMiningStrategy.ONLINE_CATALOG).build();
  start(OracleConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
  connection.executeWithoutCommitting(INSERT INTO debezium.customer VALUES (1, 'Billie-Bob', 1234.56, TO_DATE('2018/02/22', 'yyyy-mm-dd')));
  connection.executeWithoutCommitting(INSERT INTO debezium.orders VALUES (1, '01-FEB-2021', 1001, 1, 102));
  connection.execute(COMMIT);
  final int expectedRecordCount=1 + 2 + 1;
  List<SourceRecord> records=consumeRecordsByTopic(expectedRecordCount).allRecordsInOrder();
  assertThat(records).hasSize(expectedRecordCount);
  SourceRecord record=records.get(0);
  String expectedTxId=assertBeginTransaction(record);
  record=records.get(1);
  VerifyRecord.isValidInsert(record,ID,1);
  Struct after=(Struct)((Struct)record.value()).get(Envelope.FieldName.AFTER);
  assertThat(after.get(ID)).isEqualTo(1);
  assertThat(after.get(NAME)).isEqualTo(Billie-Bob);
  assertThat(after.get(SCORE)).isEqualTo(BigDecimal.valueOf(1234.56));
  assertRecordTransactionMetadata(record,expectedTxId,1,1);
  record=records.get(2);
  VerifyRecord.isValidInsert(record,ID,1);
  after=(Struct)((Struct)record.value()).get(Envelope.FieldName.AFTER);
  assertThat(after.get(ID)).isEqualTo(1);
  assertThat(after.get(ORDER_DATE)).isEqualTo(1612137600000L);
  assertThat(after.get(PURCHASER)).isEqualTo((short)1001);
  assertThat(after.get(QUANTITY)).isEqualTo((short)1);
  assertThat(after.get(PRODUCT_ID)).isEqualTo((short)102);
  assertRecordTransactionMetadata(record,expectedTxId,2,1);
  record=records.get(3);
  final String dbName=TestHelper.getDatabaseName();
  assertEndTransaction(record,expectedTxId,2,Collect.hashMapOf(dbName + .DEBEZIUM.CUSTOMER,1,dbName + .DEBEZIUM.ORDERS,1));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\TransactionMetadataIT.java",91
681,"'-tryline","@Test @FixFor(DBZ-3090) public void transactionMetadataMultipleTransactions() throws Exception {
  try (OracleConnection secondaryConn=TestHelper.testConnection()){
    final String dbName=TestHelper.getDatabaseName();
    Configuration config=TestHelper.defaultConfig().with(OracleConnectorConfig.TABLE_INCLUDE_LIST,DEBEZIUM\\.CUSTOMER,DEBEZIUM\\.ORDERS).with(OracleConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(OracleConnectorConfig.PROVIDE_TRANSACTION_METADATA,true).with(OracleConnectorConfig.LOG_MINING_STRATEGY,OracleConnectorConfig.LogMiningStrategy.ONLINE_CATALOG).build();
    start(OracleConnector.class,config);
    assertConnectorIsRunning();
    waitForSnapshotToBeCompleted(TestHelper.CONNECTOR_NAME,TestHelper.SERVER_NAME);
    connection.executeWithoutCommitting(INSERT INTO debezium.customer VALUES (1, 'Billie-Bob', 1234.56, TO_DATE('2018/02/22', 'yyyy-mm-dd')));
    connection.executeWithoutCommitting(INSERT INTO debezium.orders VALUES (2, '01-FEB-2021', 1001, 2, 102));
    secondaryConn.executeWithoutCommitting(INSERT INTO debezium.orders VALUES (1, '01-FEB-2021', 1001, 1, 102));
    secondaryConn.execute(COMMIT);
    connection.execute(COMMIT);
    final int expectedRecordCount=2 + 3 + 2;
    List<SourceRecord> records=consumeRecordsByTopic(expectedRecordCount).allRecordsInOrder();
    assertThat(records).hasSize(expectedRecordCount);
    SourceRecord record=records.get(0);
    String expectedTxId=assertBeginTransaction(record);
    record=records.get(1);
    VerifyRecord.isValidInsert(record,ID,1);
    Struct after=(Struct)((Struct)record.value()).get(Envelope.FieldName.AFTER);
    assertThat(after.get(ID)).isEqualTo(1);
    assertThat(after.get(ORDER_DATE)).isEqualTo(1612137600000L);
    assertThat(after.get(PURCHASER)).isEqualTo((short)1001);
    assertThat(after.get(QUANTITY)).isEqualTo((short)1);
    assertThat(after.get(PRODUCT_ID)).isEqualTo((short)102);
    assertRecordTransactionMetadata(record,expectedTxId,1,1);
    record=records.get(2);
    assertEndTransaction(record,expectedTxId,1,Collect.hashMapOf(dbName + .DEBEZIUM.ORDERS,1));
    record=records.get(3);
    expectedTxId=assertBeginTransaction(record);
    record=records.get(4);
    VerifyRecord.isValidInsert(record,ID,1);
    after=(Struct)((Struct)record.value()).get(Envelope.FieldName.AFTER);
    assertThat(after.get(ID)).isEqualTo(1);
    assertThat(after.get(NAME)).isEqualTo(Billie-Bob);
    assertThat(after.get(SCORE)).isEqualTo(BigDecimal.valueOf(1234.56));
    assertRecordTransactionMetadata(record,expectedTxId,1,1);
    record=records.get(5);
    VerifyRecord.isValidInsert(record,ID,2);
    after=(Struct)((Struct)record.value()).get(Envelope.FieldName.AFTER);
    assertThat(after.get(ID)).isEqualTo(2);
    assertThat(after.get(ORDER_DATE)).isEqualTo(1612137600000L);
    assertThat(after.get(PURCHASER)).isEqualTo((short)1001);
    assertThat(after.get(QUANTITY)).isEqualTo((short)2);
    assertThat(after.get(PRODUCT_ID)).isEqualTo((short)102);
    assertRecordTransactionMetadata(record,expectedTxId,2,1);
    record=records.get(6);
    assertEndTransaction(record,expectedTxId,2,Collect.hashMapOf(dbName + .DEBEZIUM.CUSTOMER,1,dbName + .DEBEZIUM.ORDERS,1));
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\TransactionMetadataIT.java",145
682,"'-tryline","private Set<TableId> determineCapturedTables() throws Exception {
  Set<TableId> allTableIds=this.connect().readTableNames(pgConnection().getCatalog(),null,null,new String[]{TABLE});
  Set<TableId> capturedTables=new HashSet<>();
  for (  TableId tableId : allTableIds) {
    if (tableFilter.dataCollectionFilter().isIncluded(tableId)) {
      LOGGER.trace(Adding table {} to the list of captured tables,tableId);
      capturedTables.add(tableId);
    }
 else {
      LOGGER.trace(Ignoring table {} as it's not included in the filter configuration,tableId);
    }
  }
  return capturedTables.stream().sorted().collect(Collectors.toCollection(LinkedHashSet::new));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresReplicationConnection.java",194
683,"'-tryline","/** 
 * //TODO author=Horia Chiorean date=13/10/2016 description=Don't use this for now, because of the bug from the PG server This is stream is closed atm. once the replication connection which created it is closed.
 * @see PGReplicationStream#close()
 */
@Override void close() throws Exception ;
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\ReplicationStream.java",95
684,"'-tryline","@Override protected SnapshotContext prepare(ChangeEventSourceContext context) throws Exception {
  return new PostgresSnapshotContext(connectorConfig.databaseName());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresSnapshotChangeEventSource.java",79
685,"'-tryline","@Override protected void connectionCreated(RelationalSnapshotContext snapshotContext) throws Exception {
  if (snapshotter.shouldStreamEventsStartingFromSnapshot() && startingSlotInfo == null) {
    setSnapshotTransactionIsolationLevel();
  }
  schema.refresh(jdbcConnection,false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresSnapshotChangeEventSource.java",84
686,"'-tryline","@Override protected Set<TableId> getAllTableIds(RelationalSnapshotContext ctx) throws Exception {
  return jdbcConnection.readTableNames(ctx.catalogName,null,null,new String[]{TABLE});
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresSnapshotChangeEventSource.java",98
687,"'-tryline","@Override protected void determineSnapshotOffset(RelationalSnapshotContext ctx) throws Exception {
  PostgresOffsetContext offset=(PostgresOffsetContext)ctx.offset;
  if (offset == null) {
    if (previousOffset != null && !snapshotter.shouldStreamEventsStartingFromSnapshot()) {
      offset=PostgresOffsetContext.initialContext(connectorConfig,jdbcConnection,getClock(),previousOffset.lastCommitLsn(),previousOffset.lastCompletelyProcessedLsn());
    }
 else {
      offset=PostgresOffsetContext.initialContext(connectorConfig,jdbcConnection,getClock());
    }
    ctx.offset=offset;
  }
  updateOffsetForSnapshot(offset);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresSnapshotChangeEventSource.java",131
688,"'-tryline","@Test public void shouldReadServerInformation() throws Exception {
  try (PostgresConnection connection=TestHelper.create()){
    ServerInfo serverInfo=connection.serverInfo();
    assertNotNull(serverInfo);
    assertNotNull(serverInfo.server());
    assertNotNull(serverInfo.username());
    assertNotNull(serverInfo.database());
    Map<String,String> permissionsByRoleName=serverInfo.permissionsByRoleName();
    assertNotNull(permissionsByRoleName);
    assertTrue(!permissionsByRoleName.isEmpty());
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\connection\PostgresConnectionIT.java",70
689,"'-tryline","@Test public void shouldReadReplicationSlotInfo() throws Exception {
  try (PostgresConnection connection=TestHelper.create()){
    ServerInfo.ReplicationSlot slotInfo=connection.readReplicationSlotInfo(test,test);
    assertEquals(ServerInfo.ReplicationSlot.INVALID,slotInfo);
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\connection\PostgresConnectionIT.java",84
690,"'-tryline","@Test public void shouldPrintReplicateIdentityInfo() throws Exception {
  String statement=DROP SCHEMA IF EXISTS public CASCADE; + CREATE SCHEMA public; + CREATE TABLE test(pk serial, PRIMARY KEY (pk));;
  TestHelper.execute(statement);
  try (PostgresConnection connection=TestHelper.create()){
    assertEquals(ServerInfo.ReplicaIdentity.DEFAULT,connection.readReplicaIdentityInfo(TableId.parse(public.test)));
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\connection\PostgresConnectionIT.java",92
691,"'-tryline","@Test public void shouldDropReplicationSlot() throws Exception {
  try (PostgresConnection connection=TestHelper.create()){
    assertFalse(connection.dropReplicationSlot(test));
  }
   try (ReplicationConnection connection=TestHelper.createForReplication(test,false)){
    connection.initConnection();
    assertTrue(connection.isConnected());
  }
   try (PostgresConnection connection=TestHelper.create()){
    assertTrue(connection.dropReplicationSlot(test));
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\connection\PostgresConnectionIT.java",103
692,"'-tryline","@Test @FixFor(DBZ-934) @Ignore public void temporaryReplicationSlotsShouldGetDroppedAutomatically() throws Exception {
  try (ReplicationConnection replicationConnection=TestHelper.createForReplication(test,true)){
    replicationConnection.initConnection();
    PgConnection pgConnection=getUnderlyingConnection(replicationConnection);
    if (pgConnection.getServerMajorVersion() < 10) {
      return;
    }
    pgConnection.close();
    try (PostgresConnection connection=TestHelper.create()){
      assertFalse(postgres did not drop replication slot,connection.dropReplicationSlot(test));
    }
   }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\connection\PostgresConnectionIT.java",121
693,"'-tryline","private PgConnection getUnderlyingConnection(ReplicationConnection connection) throws Exception {
  Field connField=JdbcConnection.class.getDeclaredField(conn);
  connField.setAccessible(true);
  return (PgConnection)connField.get(connection);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\connection\PostgresConnectionIT.java",144
694,"'-tryline","@Test public void shouldDetectRunningConncurrentTxOnInit() throws Exception {
  Testing.Print.enable();
  final String slotName=block;
  try (PostgresConnection connection=TestHelper.create()){
    connection.dropReplicationSlot(slotName);
    connection.execute(DROP SCHEMA IF EXISTS public CASCADE,CREATE SCHEMA public,CREATE TABLE test(pk serial, PRIMARY KEY (pk)));
  }
   try (PostgresConnection blockingConnection=TestHelper.create(blocker)){
    blockingConnection.connection().setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
    blockingConnection.connection().setAutoCommit(false);
    blockingConnection.executeWithoutCommitting(INSERT INTO test VALUES(default));
    Testing.print(Blocking exception started);
    final Future<?> f1=Executors.newSingleThreadExecutor().submit(() -> {
      try (ReplicationConnection replConnection=TestHelper.createForReplication(slotName,false)){
        Testing.print(Connecting with replication connection 1);
        replConnection.initConnection();
        assertTrue(replConnection.isConnected());
        Testing.print(Replication connection 1 - completed);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
);
    Thread.sleep(3000);
    final Future<?> f2=Executors.newSingleThreadExecutor().submit(() -> {
      try (ReplicationConnection replConnection=TestHelper.createForReplication(slotName,false)){
        Testing.print(Connecting with replication connection 2);
        replConnection.initConnection();
        assertTrue(replConnection.isConnected());
        Testing.print(Replication connection 2 - completed);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
);
    Thread.sleep(3000);
    blockingConnection.connection().commit();
    Testing.print(Blocking exception finished);
    Thread.sleep(6000);
    f1.get();
    f2.get();
    try (PostgresConnection connection=TestHelper.create()){
      assertTrue(connection.dropReplicationSlot(slotName));
    }
   }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\connection\PostgresConnectionIT.java",151
695,"'-tryline","@Test public void shouldSupportPG95RestartLsn() throws Exception {
  String slotName=pg95;
  try (ReplicationConnection replConnection=TestHelper.createForReplication(slotName,false)){
    replConnection.initConnection();
    assertTrue(replConnection.isConnected());
  }
   try (PostgresConnection conn=buildPG95PGConn(pg95)){
    ServerInfo.ReplicationSlot slotInfo=conn.readReplicationSlotInfo(slotName,TestHelper.decoderPlugin().getPostgresPluginName());
    assertNotNull(slotInfo);
    assertNotEquals(ServerInfo.ReplicationSlot.INVALID,slotInfo);
    conn.dropReplicationSlot(slotName);
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\connection\PostgresConnectionIT.java",217
696,"'-tryline","@Before public void before() throws Exception {
  TestHelper.dropAllSchemas();
  String statement=CREATE SCHEMA IF NOT EXISTS public; + CREATE TABLE table_with_pk (a SERIAL, b VARCHAR(30), c TIMESTAMP NOT NULL, PRIMARY KEY(a, c)); + CREATE TABLE table_without_pk (a SERIAL, b NUMERIC(5,2), c TEXT);;
  TestHelper.execute(statement);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\connection\ReplicationConnectionIT.java",51
697,"'-tryline","@Test public void shouldCreateAndDropReplicationSlots() throws Exception {
  try (ReplicationConnection connection=TestHelper.createForReplication(test1,true)){
    ReplicationStream stream=connection.startStreaming(new WalPositionLocator());
    assertNull(stream.lastReceivedLsn());
    stream.close();
  }
   try (ReplicationConnection connection=TestHelper.createForReplication(test2,true)){
    ReplicationStream stream=connection.startStreaming(new WalPositionLocator());
    assertNull(stream.lastReceivedLsn());
    stream.close();
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\connection\ReplicationConnectionIT.java",60
698,"'-tryline","@Test(expected=DebeziumException.class) public void shouldNotAllowMultipleReplicationSlotsOnTheSameDBSlotAndPlugin() throws Exception {
  try (ReplicationConnection conn1=TestHelper.createForReplication(test1,true)){
    conn1.startStreaming(new WalPositionLocator());
    try (ReplicationConnection conn2=TestHelper.createForReplication(test1,false)){
      conn2.startStreaming(new WalPositionLocator());
      fail(Should not be able to create 2 replication connections on the same db, plugin and slot);
    }
   }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\connection\ReplicationConnectionIT.java",76
699,"'-tryline","@Test public void shouldCloseConnectionOnInvalidSlotName() throws Exception {
  final int closeRetries=60;
  final int waitPeriod=2_000;
  final String slotQuery=select count(*) from pg_stat_replication where state = 'startup';
  final ResultSetMapper<Integer> slotQueryMapper=rs -> {
    rs.next();
    return rs.getInt(1);
  }
;
  final int slotsBefore;
  try (PostgresConnection connection=TestHelper.create()){
    slotsBefore=connection.queryAndMap(slotQuery,slotQueryMapper);
  }
   try (ReplicationConnection conn1=TestHelper.createForReplication(test1-,true)){
    conn1.startStreaming(new WalPositionLocator());
    fail(Invalid slot name should fail);
  }
 catch (  Exception e) {
    try (PostgresConnection connection=TestHelper.create()){
      final int slotsAfter=connection.queryAndMap(slotQuery,slotQueryMapper);
      for (int retry=1; retry <= closeRetries; retry++) {
        if (slotsAfter <= slotsBefore) {
          break;
        }
        if (retry == closeRetries) {
          Assert.fail(Connection should not be active);
        }
        Thread.sleep(waitPeriod);
      }
    }
   }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\connection\ReplicationConnectionIT.java",88
700,"'-tryline","@Test @SkipWhenDecoderPluginNameIs(value=SkipWhenDecoderPluginNameIs.DecoderPluginName.PGOUTPUT,reason=An update on a table with no primary key throws PSQLException as tables must have a PK) public void shouldReceiveAndDecodeIndividualChanges() throws Exception {
  try (ReplicationConnection connection=TestHelper.createForReplication(test,true)){
    ReplicationStream stream=connection.startStreaming(new WalPositionLocator());
    int expectedMessages=DecoderDifferences.updatesWithoutPK(insertLargeTestData(),1);
    expectedMessagesFromStream(stream,expectedMessages);
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\connection\ReplicationConnectionIT.java",123
701,"'-tryline","@Test public void shouldReceiveSameChangesIfNotFlushed() throws Exception {
  String slotName=test;
  int receivedMessagesCount=startInsertStop(slotName,null);
  try (ReplicationConnection connection=TestHelper.createForReplication(slotName,true)){
    ReplicationStream stream=connection.startStreaming(new WalPositionLocator());
    expectedMessagesFromStream(stream,receivedMessagesCount);
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\connection\ReplicationConnectionIT.java",134
702,"'-tryline","@Test public void shouldNotReceiveSameChangesIfFlushed() throws Exception {
  String slotName=test;
  startInsertStop(slotName,this::flushLsn);
  try (ReplicationConnection connection=TestHelper.createForReplication(slotName,true)){
    ReplicationStream stream=connection.startStreaming(new WalPositionLocator());
    expectedMessagesFromStream(stream,0);
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\connection\ReplicationConnectionIT.java",148
703,"'-tryline","@Test public void shouldReceiveMissedChangesWhileDown() throws Exception {
  String slotName=test;
  startInsertStop(slotName,this::flushLsn);
  TestHelper.execute(DELETE FROM table_with_pk WHERE a < 3;);
  int additionalMessages=2;
  try (ReplicationConnection connection=TestHelper.createForReplication(slotName,true)){
    ReplicationStream stream=connection.startStreaming(new WalPositionLocator());
    expectedMessagesFromStream(stream,additionalMessages);
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\connection\ReplicationConnectionIT.java",163
704,"'-tryline","@Test public void shouldResumeFromLastReceivedLSN() throws Exception {
  String slotName=test;
  AtomicReference<Lsn> lastReceivedLsn=new AtomicReference<>();
  startInsertStop(slotName,stream -> lastReceivedLsn.compareAndSet(null,stream.lastReceivedLsn()));
  assertTrue(lastReceivedLsn.get().isValid());
  try (ReplicationConnection connection=TestHelper.createForReplication(slotName,true)){
    ReplicationStream stream=connection.startStreaming(lastReceivedLsn.get(),new WalPositionLocator());
    expectedMessagesFromStream(stream,0);
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\connection\ReplicationConnectionIT.java",180
705,"'-tryline","@Test public void shouldTolerateInvalidLSNValues() throws Exception {
  String slotName=test;
  startInsertStop(slotName,null);
  try (ReplicationConnection connection=TestHelper.createForReplication(slotName,true)){
    ReplicationStream stream=connection.startStreaming(Lsn.valueOf(Long.MAX_VALUE),new WalPositionLocator());
    expectedMessagesFromStream(stream,0);
    TestHelper.execute(DELETE FROM table_with_pk WHERE a < 3;);
    expectedMessagesFromStream(stream,0);
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\connection\ReplicationConnectionIT.java",194
706,"'-tryline","@Test public void shouldReceiveOneMessagePerDMLOnTransactionCommit() throws Exception {
  try (ReplicationConnection connection=TestHelper.createForReplication(test,true)){
    ReplicationStream stream=connection.startStreaming(new WalPositionLocator());
    String statement=DROP TABLE IF EXISTS table_with_pk; + DROP TABLE IF EXISTS table_without_pk; + CREATE TABLE table_with_pk (a SERIAL, b VARCHAR(30), c TIMESTAMP NOT NULL, PRIMARY KEY(a, c));+ CREATE TABLE table_without_pk (a SERIAL, b NUMERIC(5,2), c TEXT);+ INSERT INTO table_with_pk (b, c) VALUES('val1', now()); + INSERT INTO table_with_pk (b, c) VALUES('val2', now()); ;
    TestHelper.execute(statement);
    expectedMessagesFromStream(stream,2);
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\connection\ReplicationConnectionIT.java",210
707,"'-tryline","@Test public void shouldNotReceiveMessagesOnTransactionRollback() throws Exception {
  try (ReplicationConnection connection=TestHelper.createForReplication(test,true)){
    ReplicationStream stream=connection.startStreaming(new WalPositionLocator());
    String statement=DROP TABLE IF EXISTS table_with_pk; + CREATE TABLE table_with_pk (a SERIAL, b VARCHAR(30), c TIMESTAMP NOT NULL, PRIMARY KEY(a, c)); + INSERT INTO table_with_pk (b, c) VALUES('val1', now()); + ROLLBACK;;
    TestHelper.execute(statement);
    expectedMessagesFromStream(stream,0);
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\connection\ReplicationConnectionIT.java",225
708,"'-tryline","@Test public void shouldGeneratesEventsForMultipleSchemas() throws Exception {
  try (ReplicationConnection connection=TestHelper.createForReplication(test,true)){
    ReplicationStream stream=connection.startStreaming(new WalPositionLocator());
    String statements=CREATE SCHEMA schema1; + CREATE SCHEMA schema2; + DROP TABLE IF EXISTS schema1.table;+ DROP TABLE IF EXISTS schema2.table;+ CREATE TABLE schema1.table (a SERIAL, b VARCHAR(30), c TIMESTAMP NOT NULL, PRIMARY KEY(a, c));+ CREATE TABLE schema2.table (a SERIAL, b VARCHAR(30), c TIMESTAMP NOT NULL, PRIMARY KEY(a, c));+ INSERT INTO schema1.table (b, c) VALUES('Value for schema1', now());+ INSERT INTO schema2.table (b, c) VALUES('Value for schema2', now());;
    TestHelper.execute(statements);
    expectedMessagesFromStream(stream,2);
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\connection\ReplicationConnectionIT.java",238
709,"'-tryline","@Test @SkipWhenDecoderPluginNameIsNot(value=SkipWhenDecoderPluginNameIsNot.DecoderPluginName.PGOUTPUT,reason=A pgoutput specific test streaming changes, stopping connector, making downtime changes, and verifying restart picks up changes) public void testHowRelationMessagesAreReceived() throws Exception {
  TestHelper.create().dropReplicationSlot(test);
  try (ReplicationConnection connection=TestHelper.createForReplication(test,false)){
    connection.initConnection();
    final String statements=CREATE TABLE t0 (pk SERIAL, val INTEGER, PRIMARY KEY (pk)); + ALTER TABLE t0 REPLICA IDENTITY FULL; + INSERT INTO t0 VALUES (1,1);+ INSERT INTO t0 VALUES (2,1);+ INSERT INTO t0 VALUES (3,1);+ INSERT INTO t0 VALUES (4,1);+ INSERT INTO t0 VALUES (5,1);+ ALTER TABLE t0 ALTER COLUMN val TYPE BIGINT;+ ALTER TABLE t0 ADD COLUMN val2 INTEGER;+ INSERT INTO t0 VALUES (6,1,1);+ DROP TABLE t0;+ CREATE TABLE t0 (pk SERIAL, val3 BIGINT, PRIMARY KEY (pk));+ ALTER TABLE t0 REPLICA IDENTITY FULL;+ INSERT INTO t0 VALUES (7,2);+ INSERT INTO t0 VALUES (8,2);;
    TestHelper.execute(statements);
    try (ReplicationStream stream=connection.startStreaming(new WalPositionLocator())){
      expectedMessagesFromStream(stream,8);
      flushLsn(stream);
    }
   }
   TestHelper.execute(INSERT INTO t0 VALUES (9,2); + INSERT INTO t0 VALUES (10,2); + DROP TABLE t0;+ CREATE TABLE t0 (pk SERIAL, val3 INT, PRIMARY KEY (pk));+ ALTER TABLE t0 REPLICA IDENTITY FULL;+ INSERT INTO t0 VALUES (11,1););
  try (ReplicationConnection connection=TestHelper.createForReplication(test,true)){
    try (ReplicationStream stream=connection.startStreaming(new WalPositionLocator())){
      expectedMessagesFromStream(stream,3);
    }
   }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\connection\ReplicationConnectionIT.java",255
710,"'-tryline","private int startInsertStop(String slotName,Consumer<ReplicationStream> streamProcessor) throws Exception {
  int expectedMessageCount;
  try (ReplicationConnection connection=TestHelper.createForReplication(slotName,false)){
    try {
      ReplicationStream stream=connection.startStreaming(new WalPositionLocator());
      expectedMessageCount=insertSmallTestData();
      expectedMessagesFromStream(stream,expectedMessageCount);
      if (streamProcessor != null) {
        streamProcessor.accept(stream);
      }
    }
 catch (    Throwable t) {
      try (PostgresConnection conn=TestHelper.create()){
        conn.dropReplicationSlot(slotName);
      }
       throw t;
    }
  }
   Thread.sleep(100);
  return expectedMessageCount;
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\connection\ReplicationConnectionIT.java",310
711,"'-tryline","private List<ReplicationMessage> expectedMessagesFromStream(ReplicationStream stream,int expectedMessages) throws Exception {
  List<ReplicationMessage> actualMessages=new ArrayList<>();
  ExecutorService executorService=Executors.newSingleThreadExecutor();
  Semaphore latch=new Semaphore(0);
  Metronome metronome=Metronome.sleeper(Duration.ofMillis(50),Clock.SYSTEM);
  Future<?> result=executorService.submit(() -> {
    while (!Thread.interrupted()) {
      for (; ; ) {
        List<ReplicationMessage> message=new ArrayList<>();
        stream.read(x -> {
          if (!x.isTransactionalMessage()) {
            message.add(x);
          }
        }
);
        if (message.isEmpty()) {
          break;
        }
        actualMessages.addAll(message);
        latch.release(message.size());
      }
      metronome.pause();
    }
    return null;
  }
);
  try {
    if (!latch.tryAcquire(expectedMessages,TestHelper.waitTimeForRecords() * 5,TimeUnit.SECONDS)) {
      result.cancel(true);
      fail(expected  + expectedMessages +  messages, but read only + actualMessages.size());
    }
  }
  finally {
    executorService.shutdownNow();
  }
  return actualMessages;
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\connection\ReplicationConnectionIT.java",336
712,"'-tryline","private int insertSmallTestData() throws Exception {
  String statement=INSERT INTO table_with_pk (b, c) VALUES('Backup and Restore', now()); + INSERT INTO table_with_pk (b, c) VALUES('Tuning', now());;
  TestHelper.execute(statement);
  return 2;
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\connection\ReplicationConnectionIT.java",379
713,"'-tryline","private int insertLargeTestData() throws Exception {
  String statement=INSERT INTO table_with_pk (b, c) VALUES('Backup and Restore', now()); + INSERT INTO table_with_pk (b, c) VALUES('Tuning', now()); + DELETE FROM table_with_pk WHERE a < 3;+ INSERT INTO table_without_pk (b,c) VALUES (1, 'Foo');+ UPDATE table_without_pk SET c = 'Bar' WHERE c = 'Foo';+ ALTER TABLE table_without_pk REPLICA IDENTITY FULL;+ UPDATE table_without_pk SET c = 'Baz' WHERE c = 'Bar';+ DELETE FROM table_without_pk WHERE c = 'Baz';;
  TestHelper.execute(statement);
  return 8;
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\connection\ReplicationConnectionIT.java",387
714,"'-tryline","@Test @FixFor(DBZ-1807) public void shouldSerializeToJson() throws Exception {
  final Properties props=new Properties();
  props.putAll(TestHelper.defaultConfig().build().asMap());
  props.setProperty(name,debezium-engine);
  props.setProperty(connector.class,io.debezium.connector.postgresql.PostgresConnector);
  props.setProperty(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG,OFFSET_STORE_PATH.toAbsolutePath().toString());
  props.setProperty(offset.flush.interval.ms,0);
  props.setProperty(converter.schemas.enable,false);
  CountDownLatch allLatch=new CountDownLatch(1);
  final ExecutorService executor=Executors.newFixedThreadPool(1);
  try (final DebeziumEngine<ChangeEvent<String,String>> engine=DebeziumEngine.create(Json.class).using(props).notifying((records,committer) -> {
    for (    ChangeEvent<String,String> r : records) {
      Assertions.assertThat(r.key()).isNotNull();
      Assertions.assertThat(r.value()).isNotNull();
      try {
        final Document key=DocumentReader.defaultReader().read(r.key());
        final Document value=DocumentReader.defaultReader().read(r.value());
        Assertions.assertThat(key.getInteger(id)).isEqualTo(1);
        Assertions.assertThat(value.getDocument(after).getInteger(id)).isEqualTo(1);
        Assertions.assertThat(value.getDocument(after).getString(val)).isEqualTo(value1);
      }
 catch (      IOException e) {
        throw new IllegalStateException(e);
      }
      allLatch.countDown();
      committer.markProcessed(r);
    }
    committer.markBatchFinished();
  }
).using(this.getClass().getClassLoader()).build()){
    executor.execute(() -> {
      LoggingContext.forConnector(getClass().getSimpleName(),debezium-engine,engine);
      engine.run();
    }
);
    allLatch.await(5000,TimeUnit.MILLISECONDS);
    assertThat(allLatch.getCount()).isEqualTo(0);
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\DebeziumEngineIT.java",78
715,"'-tryline","@Test @FixFor(DBZ-1807) @SkipWhenKafkaVersion(check=EqualityCheck.EQUAL,value=KafkaVersion.KAFKA_1XX,description=Not compatible with Kafka 1.x) public void shouldSerializeToAvro() throws Exception {
  final Properties props=new Properties();
  props.putAll(TestHelper.defaultConfig().build().asMap());
  props.setProperty(name,debezium-engine);
  props.setProperty(connector.class,io.debezium.connector.postgresql.PostgresConnector);
  props.setProperty(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG,OFFSET_STORE_PATH.toAbsolutePath().toString());
  props.setProperty(offset.flush.interval.ms,0);
  props.setProperty(converter.schema.registry.url,http://localhost: + TestHelper.defaultJdbcConfig().getPort());
  CountDownLatch allLatch=new CountDownLatch(1);
  final ExecutorService executor=Executors.newFixedThreadPool(1);
  try (final DebeziumEngine<ChangeEvent<byte[],byte[]>> engine=DebeziumEngine.create(Avro.class).using(props).notifying((records,committer) -> {
    Assert.fail(Should not be invoked due to serialization error);
  }
).using(new CompletionCallback(){
    @Override public void handle(    boolean success,    String message,    Throwable error){
      Assertions.assertThat(success).isFalse();
      Assertions.assertThat(message).contains(Failed to serialize Avro data from topic debezium);
      allLatch.countDown();
    }
  }
).build()){
    executor.execute(() -> {
      LoggingContext.forConnector(getClass().getSimpleName(),debezium-engine,engine);
      engine.run();
    }
);
    allLatch.await(5000,TimeUnit.MILLISECONDS);
    assertThat(allLatch.getCount()).isEqualTo(0);
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\DebeziumEngineIT.java",124
716,"'-tryline","@Test @FixFor(DBZ-1807) public void shouldSerializeToCloudEvents() throws Exception {
  final Properties props=new Properties();
  props.putAll(TestHelper.defaultConfig().build().asMap());
  props.setProperty(name,debezium-engine);
  props.setProperty(connector.class,io.debezium.connector.postgresql.PostgresConnector);
  props.setProperty(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG,OFFSET_STORE_PATH.toAbsolutePath().toString());
  props.setProperty(offset.flush.interval.ms,0);
  props.setProperty(converter.schemas.enable,false);
  CountDownLatch allLatch=new CountDownLatch(1);
  final ExecutorService executor=Executors.newFixedThreadPool(1);
  try (final DebeziumEngine<ChangeEvent<String,String>> engine=DebeziumEngine.create(Json.class,CloudEvents.class).using(props).notifying((records,committer) -> {
    for (    ChangeEvent<String,String> r : records) {
      try {
        final Document key=DocumentReader.defaultReader().read(r.key());
        Assertions.assertThat(key.getInteger(id)).isEqualTo(1);
        Assertions.assertThat(r.value()).isNotNull();
        final Document value=DocumentReader.defaultReader().read(r.value());
        Assertions.assertThat(value.getString(id)).contains(txId);
        Assertions.assertThat(value.getDocument(data).getDocument(payload).getDocument(after).getInteger(id)).isEqualTo(1);
        Assertions.assertThat(value.getDocument(data).getDocument(payload).getDocument(after).getString(val)).isEqualTo(value1);
      }
 catch (      IOException e) {
        throw new IllegalStateException(e);
      }
      allLatch.countDown();
      committer.markProcessed(r);
    }
    committer.markBatchFinished();
  }
).using(this.getClass().getClassLoader()).build()){
    executor.execute(() -> {
      LoggingContext.forConnector(getClass().getSimpleName(),debezium-engine,engine);
      engine.run();
    }
);
    allLatch.await(5000,TimeUnit.MILLISECONDS);
    assertThat(allLatch.getCount()).isEqualTo(0);
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\DebeziumEngineIT.java",165
717,"'-tryline","@Test @FixFor(DBZ-2461) public void testOffsetsCommitAfterStop() throws Exception {
  final AtomicReference<Throwable> exception=new AtomicReference<>();
  DebeziumEngine<ChangeEvent<String,String>> engine;
  TestHelper.execute(DROP TABLE IF EXISTS tests;,CREATE TABLE tests (id SERIAL PRIMARY KEY););
  final Properties props=new Properties();
  props.putAll(TestHelper.defaultConfig().build().asMap());
  props.setProperty(name,debezium-engine);
  props.setProperty(connector.class,io.debezium.connector.postgresql.PostgresConnector);
  props.setProperty(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG,OFFSET_STORE_PATH.toAbsolutePath().toString());
  props.setProperty(offset.flush.interval.ms,3000);
  props.setProperty(converter.schemas.enable,false);
  props.setProperty(offset.storage,TestOffsetStore.class.getName());
  engine=DebeziumEngine.create(Json.class).using(props).using(new DebeziumEngine.ConnectorCallback(){
    @Override public void connectorStarted(){
    }
    @Override public void connectorStopped(){
    }
  }
).using((success,message,error) -> {
    exception.compareAndSet(null,error);
  }
).notifying((records,committer) -> {
    try {
      for (      ChangeEvent<String,String> record : records) {
        committer.markProcessed(record);
      }
      committer.markBatchFinished();
    }
 catch (    Exception e) {
      Testing.printError(e);
    }
  }
).build();
  ExecutorService executor=Executors.newSingleThreadExecutor();
  executor.execute(engine);
  while (offsetStoreSetCalls.get() < 1) {
    TestHelper.execute(INSERT INTO tests VALUES(default));
  }
  engine.close();
  Assertions.assertThat(offsetStoreSetCalls.get()).isGreaterThanOrEqualTo(1);
  offsetStoreSetCalls.set(0);
  for (int i=0; i < 100; i++) {
    TestHelper.execute(INSERT INTO tests VALUES(default));
  }
  executor.execute(engine);
  while (offsetStoreSetCalls.get() < 1) {
    TestHelper.execute(INSERT INTO tests VALUES(default));
  }
  engine.close();
  Assertions.assertThat(offsetStoreSetCalls.get()).isGreaterThanOrEqualTo(1);
  Assertions.assertThat(exception.get()).isNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\DebeziumEngineIT.java",231
718,"'-tryline","@Test public void shouldConsumeRecordsFromInsert() throws Exception {
  startConnectorWithInitialSnapshotRecord();
  TestHelper.execute(createEventInsert(UUID.fromString(59a42efd-b015-44a9-9dde-cb36d9002425),UserCreated,User,10711fa5,{},));
  SourceRecords actualRecords=consumeRecordsByTopic(1);
  assertThat(actualRecords.topics().size()).isEqualTo(1);
  SourceRecord newEventRecord=actualRecords.recordsForTopic(topicName(outboxsmtit.outbox)).get(0);
  SourceRecord routedEvent=outboxEventRouter.apply(newEventRecord);
  assertThat(routedEvent).isNotNull();
  assertThat(routedEvent.topic()).isEqualTo(outbox.event.User);
  assertThat(routedEvent.keySchema()).isEqualTo(Schema.STRING_SCHEMA);
  assertThat(routedEvent.key()).isEqualTo(10711fa5);
  assertThat(routedEvent.value()).isInstanceOf(String.class);
  JsonNode payload=(new ObjectMapper()).readTree((String)routedEvent.value());
  assertThat(payload.get(email)).isEqualTo(null);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\OutboxEventRouterIT.java",114
719,"'-tryline","@Test public void shouldSendEventTypeAsHeader() throws Exception {
  startConnectorWithInitialSnapshotRecord();
  TestHelper.execute(createEventInsert(UUID.fromString(59a42efd-b015-44a9-9dde-cb36d9002425),UserCreated,User,10711fa5,{\email\: \gh@mefi.in\},));
  final Map<String,String> config=new HashMap<>();
  config.put(table.fields.additional.placement,type:header:eventType);
  outboxEventRouter.configure(config);
  SourceRecords actualRecords=consumeRecordsByTopic(1);
  assertThat(actualRecords.topics().size()).isEqualTo(1);
  SourceRecord newEventRecord=actualRecords.recordsForTopic(topicName(outboxsmtit.outbox)).get(0);
  SourceRecord routedEvent=outboxEventRouter.apply(newEventRecord);
  assertThat(routedEvent).isNotNull();
  assertThat(routedEvent.topic()).isEqualTo(outbox.event.User);
  Object value=routedEvent.value();
  assertThat(routedEvent.headers().lastWithName(eventType).value()).isEqualTo(UserCreated);
  assertThat(value).isInstanceOf(String.class);
  JsonNode payload=(new ObjectMapper()).readTree((String)value);
  assertThat(payload.get(email).asText()).isEqualTo(gh@mefi.in);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\OutboxEventRouterIT.java",144
720,"'-tryline","@Test @FixFor(DBZ-2014) public void shouldSendEventTypeAsValue() throws Exception {
  startConnectorWithInitialSnapshotRecord();
  TestHelper.execute(createEventInsert(UUID.fromString(d4da2428-8b19-11ea-bc55-0242ac130003),UserCreated,User,9948fcad,{\email\: \gh@mefi.in\},));
  final Map<String,String> config=new HashMap<>();
  config.put(table.fields.additional.placement,type:envelope:eventType);
  outboxEventRouter.configure(config);
  SourceRecords actualRecords=consumeRecordsByTopic(1);
  assertThat(actualRecords.topics().size()).isEqualTo(1);
  SourceRecord newEventRecord=actualRecords.recordsForTopic(topicName(outboxsmtit.outbox)).get(0);
  SourceRecord routedEvent=outboxEventRouter.apply(newEventRecord);
  assertThat(routedEvent).isNotNull();
  assertThat(routedEvent.topic()).isEqualTo(outbox.event.User);
  Struct valueStruct=requireStruct(routedEvent.value(),test payload);
  assertThat(valueStruct.getString(eventType)).isEqualTo(UserCreated);
  JsonNode payload=(new ObjectMapper()).readTree(valueStruct.getString(payload));
  assertThat(payload.get(email).asText()).isEqualTo(gh@mefi.in);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\OutboxEventRouterIT.java",178
721,"'-tryline","@Test public void shouldRespectJsonFormatAsString() throws Exception {
  startConnectorWithInitialSnapshotRecord();
  TestHelper.execute(createEventInsert(UUID.fromString(f9171eb6-19f3-4579-9206-0e179d2ebad7),UserCreated,User,7bdf2e9e,{\email\: \gh@mefi.in\},));
  SourceRecords actualRecords=consumeRecordsByTopic(1);
  assertThat(actualRecords.topics().size()).isEqualTo(1);
  SourceRecord newEventRecord=actualRecords.recordsForTopic(topicName(outboxsmtit.outbox)).get(0);
  SourceRecord routedEvent=outboxEventRouter.apply(newEventRecord);
  assertThat(routedEvent.value()).isInstanceOf(String.class);
  JsonNode payload=(new ObjectMapper()).readTree((String)routedEvent.value());
  assertThat(payload.get(email).asText()).isEqualTo(gh@mefi.in);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\OutboxEventRouterIT.java",212
722,"'-tryline","@Test public void shouldSupportAllFeatures() throws Exception {
  startConnectorWithNoSnapshot();
  outboxEventRouter=new EventRouter<>();
  final Map<String,String> config=new HashMap<>();
  config.put(table.field.event.schema.version,version);
  config.put(table.field.event.timestamp,createdat);
  config.put(table.fields.additional.placement,version:envelope:eventVersion, + aggregatetype:envelope:aggregateType, + somebooltype:envelope:someBoolType,+ somebooltype:header,+ is_deleted:envelope:deleted);
  outboxEventRouter.configure(config);
  TestHelper.execute(ALTER TABLE outboxsmtit.outbox add version int not null;);
  TestHelper.execute(ALTER TABLE outboxsmtit.outbox add somebooltype boolean not null;);
  TestHelper.execute(ALTER TABLE outboxsmtit.outbox add createdat timestamp without time zone not null;);
  TestHelper.execute(ALTER TABLE outboxsmtit.outbox add is_deleted boolean default false;);
  TestHelper.execute(createEventInsert(UUID.fromString(f9171eb6-19f3-4579-9206-0e179d2ebad7),UserUpdated,UserEmail,7bdf2e9e,{\email\: \gh@mefi.in\},, 1, true, TIMESTAMP(3) '2019-03-24 20:52:59'));
  SourceRecords actualRecords=consumeRecordsByTopic(1);
  assertThat(actualRecords.topics().size()).isEqualTo(1);
  SourceRecord newEventRecord=actualRecords.recordsForTopic(topicName(outboxsmtit.outbox)).get(0);
  SourceRecord eventRouted=outboxEventRouter.apply(newEventRecord);
  Schema expectedSchema=SchemaBuilder.struct().version(1).name(test_server.outboxsmtit.outbox.UserEmail.Value).field(payload,Json.builder().optional().build()).field(eventVersion,Schema.INT32_SCHEMA).field(aggregateType,Schema.STRING_SCHEMA).field(someBoolType,Schema.BOOLEAN_SCHEMA).field(deleted,Schema.OPTIONAL_BOOLEAN_SCHEMA).build();
  assertConnectSchemasAreEqual(null,eventRouted.valueSchema(),expectedSchema);
  assertThat(eventRouted.timestamp()).isEqualTo(1553460779000L);
  assertThat(eventRouted.topic()).isEqualTo(outbox.event.UserEmail);
  Headers headers=eventRouted.headers();
  assertThat(headers.size()).isEqualTo(2);
  Header headerId=headers.lastWithName(id);
  assertThat(headerId.schema()).isEqualTo(Uuid.builder().build());
  assertThat(headerId.value()).isEqualTo(f9171eb6-19f3-4579-9206-0e179d2ebad7);
  Header headerBool=headers.lastWithName(somebooltype);
  assertThat(headerBool.schema()).isEqualTo(SchemaBuilder.BOOLEAN_SCHEMA);
  assertThat(headerBool.value()).isEqualTo(true);
  assertThat(eventRouted.keySchema()).isEqualTo(SchemaBuilder.STRING_SCHEMA);
  assertThat(eventRouted.key()).isEqualTo(7bdf2e9e);
  Struct valueStruct=requireStruct(eventRouted.value(),test envelope);
  assertThat(valueStruct.getString(aggregateType)).isEqualTo(UserEmail);
  assertThat(valueStruct.getInt32(eventVersion)).isEqualTo(1);
  assertThat(valueStruct.getBoolean(someBoolType)).isEqualTo(true);
  assertThat(valueStruct.getBoolean(deleted)).isEqualTo(false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\OutboxEventRouterIT.java",234
723,"'-tryline","@Test @FixFor(DBZ-1707) public void shouldConvertMicroSecondsTimestampToMilliSeconds() throws Exception {
  startConnectorWithNoSnapshot();
  outboxEventRouter=new EventRouter<>();
  final Map<String,String> config=new HashMap<>();
  config.put(table.field.event.timestamp,createdat);
  outboxEventRouter.configure(config);
  TestHelper.execute(ALTER TABLE outboxsmtit.outbox add createdat timestamp without time zone not null;);
  TestHelper.execute(createEventInsert(UUID.fromString(f9171eb6-19f3-4579-9206-0e179d2ebad7),UserUpdated,UserEmail,7bdf2e9e,{\email\: \gh@mefi.in\},, TIMESTAMP '2019-03-24 20:52:59'));
  SourceRecords actualRecords=consumeRecordsByTopic(1);
  assertThat(actualRecords.topics().size()).isEqualTo(1);
  SourceRecord newEventRecord=actualRecords.recordsForTopic(topicName(outboxsmtit.outbox)).get(0);
  SourceRecord eventRouted=outboxEventRouter.apply(newEventRecord);
  assertThat(eventRouted.timestamp()).isEqualTo(1553460779000L);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\OutboxEventRouterIT.java",308
724,"'-tryline","@Test @FixFor(DBZ-1320) public void shouldNotProduceTombstoneEventForNullPayload() throws Exception {
  startConnectorWithNoSnapshot();
  outboxEventRouter=new EventRouter<>();
  final Map<String,String> config=new HashMap<>();
  config.put(table.field.event.schema.version,version);
  config.put(table.field.event.timestamp,createdat);
  config.put(table.fields.additional.placement,version:envelope:eventVersion, + aggregatetype:envelope:aggregateType, + somebooltype:envelope:someBoolType,+ somebooltype:header,+ is_deleted:envelope:deleted);
  outboxEventRouter.configure(config);
  TestHelper.execute(ALTER TABLE outboxsmtit.outbox add version int not null;);
  TestHelper.execute(ALTER TABLE outboxsmtit.outbox add somebooltype boolean not null;);
  TestHelper.execute(ALTER TABLE outboxsmtit.outbox add createdat timestamp without time zone not null;);
  TestHelper.execute(ALTER TABLE outboxsmtit.outbox add is_deleted boolean not null default false;);
  TestHelper.execute(createEventInsert(UUID.fromString(a9d76f78-bda6-48d3-97ed-13a146163218),UserUpdated,UserEmail,a9d76f78,null,, 1, true, TIMESTAMP '2019-03-24 20:52:59', true));
  SourceRecords actualRecords=consumeRecordsByTopic(1);
  assertThat(actualRecords.topics().size()).isEqualTo(1);
  SourceRecord newEventRecord=actualRecords.recordsForTopic(topicName(outboxsmtit.outbox)).get(0);
  SourceRecord eventRouted=outboxEventRouter.apply(newEventRecord);
  assertThat(eventRouted.valueSchema()).isNotNull();
  assertThat(eventRouted.timestamp()).isEqualTo(1553460779000L);
  assertThat(eventRouted.topic()).isEqualTo(outbox.event.UserEmail);
  Headers headers=eventRouted.headers();
  assertThat(headers.size()).isEqualTo(2);
  Header headerId=headers.lastWithName(id);
  assertThat(headerId.schema()).isEqualTo(Uuid.schema());
  assertThat(headerId.value()).isEqualTo(a9d76f78-bda6-48d3-97ed-13a146163218);
  Header headerBool=headers.lastWithName(somebooltype);
  assertThat(headerBool.schema()).isEqualTo(SchemaBuilder.BOOLEAN_SCHEMA);
  assertThat(headerBool.value()).isEqualTo(true);
  assertThat(eventRouted.keySchema()).isEqualTo(SchemaBuilder.STRING_SCHEMA);
  assertThat(eventRouted.key()).isEqualTo(a9d76f78);
  assertThat(eventRouted.value()).isNotNull();
  assertThat(((Struct)eventRouted.value()).get(payload)).isNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\OutboxEventRouterIT.java",340
725,"'-tryline","@Test @FixFor(DBZ-1320) public void shouldProduceTombstoneEventForNullPayload() throws Exception {
  startConnectorWithNoSnapshot();
  outboxEventRouter=new EventRouter<>();
  final Map<String,String> config=new HashMap<>();
  config.put(table.field.event.schema.version,version);
  config.put(table.field.event.timestamp,createdat);
  config.put(route.tombstone.on.empty.payload,true);
  config.put(table.fields.additional.placement,version:envelope:eventVersion, + aggregatetype:envelope:aggregateType, + somebooltype:envelope:someBoolType,+ somebooltype:header,+ is_deleted:envelope:deleted);
  outboxEventRouter.configure(config);
  TestHelper.execute(ALTER TABLE outboxsmtit.outbox add version int not null;);
  TestHelper.execute(ALTER TABLE outboxsmtit.outbox add somebooltype boolean not null;);
  TestHelper.execute(ALTER TABLE outboxsmtit.outbox add createdat timestamp without time zone not null;);
  TestHelper.execute(ALTER TABLE outboxsmtit.outbox add is_deleted boolean not null default false;);
  TestHelper.execute(createEventInsert(UUID.fromString(a9d76f78-bda6-48d3-97ed-13a146163218),UserUpdated,UserEmail,a9d76f78,null,, 1, true, TIMESTAMP '2019-03-24 20:52:59', true));
  SourceRecords actualRecords=consumeRecordsByTopic(1);
  assertThat(actualRecords.topics().size()).isEqualTo(1);
  SourceRecord newEventRecord=actualRecords.recordsForTopic(topicName(outboxsmtit.outbox)).get(0);
  SourceRecord eventRouted=outboxEventRouter.apply(newEventRecord);
  assertThat(eventRouted.valueSchema()).isNull();
  assertThat(eventRouted.timestamp()).isEqualTo(1553460779000L);
  assertThat(eventRouted.topic()).isEqualTo(outbox.event.UserEmail);
  Headers headers=eventRouted.headers();
  assertThat(headers.size()).isEqualTo(2);
  Header headerId=headers.lastWithName(id);
  assertThat(headerId.schema()).isEqualTo(Uuid.schema());
  assertThat(headerId.value()).isEqualTo(a9d76f78-bda6-48d3-97ed-13a146163218);
  Header headerBool=headers.lastWithName(somebooltype);
  assertThat(headerBool.schema()).isEqualTo(SchemaBuilder.BOOLEAN_SCHEMA);
  assertThat(headerBool.value()).isEqualTo(true);
  assertThat(eventRouted.keySchema()).isEqualTo(SchemaBuilder.STRING_SCHEMA);
  assertThat(eventRouted.key()).isEqualTo(a9d76f78);
  assertThat(eventRouted.value()).isNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\OutboxEventRouterIT.java",401
726,"'-tryline","@Test @FixFor(DBZ-1320) public void shouldProduceTombstoneEventForEmptyPayload() throws Exception {
  startConnectorWithNoSnapshot();
  outboxEventRouter=new EventRouter<>();
  final Map<String,String> config=new HashMap<>();
  config.put(route.tombstone.on.empty.payload,true);
  outboxEventRouter.configure(config);
  TestHelper.execute(ALTER TABLE outboxsmtit.outbox ALTER COLUMN payload SET DATA TYPE VARCHAR(1000););
  TestHelper.execute(createEventInsert(UUID.fromString(a9d76f78-bda6-48d3-97ed-13a146163218),UserUpdated,UserEmail,a9d76f78,,null));
  SourceRecords actualRecords=consumeRecordsByTopic(1);
  assertThat(actualRecords.topics().size()).isEqualTo(1);
  SourceRecord newEventRecord=actualRecords.recordsForTopic(topicName(outboxsmtit.outbox)).get(0);
  SourceRecord eventRouted=outboxEventRouter.apply(newEventRecord);
  assertThat(eventRouted.valueSchema()).isNull();
  assertThat(eventRouted.topic()).isEqualTo(outbox.event.UserEmail);
  Headers headers=eventRouted.headers();
  assertThat(headers.size()).isEqualTo(1);
  Header headerId=headers.lastWithName(id);
  assertThat(headerId.schema()).isEqualTo(Uuid.schema());
  assertThat(headerId.value()).isEqualTo(a9d76f78-bda6-48d3-97ed-13a146163218);
  assertThat(eventRouted.keySchema()).isEqualTo(SchemaBuilder.STRING_SCHEMA);
  assertThat(eventRouted.key()).isEqualTo(a9d76f78);
  assertThat(eventRouted.value()).isNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\OutboxEventRouterIT.java",462
727,"'-tryline","private void startConnectorWithInitialSnapshotRecord() throws Exception {
  TestHelper.execute(createEventInsert(UUID.fromString(70f52ae3-f671-4bac-ae62-1b9be6e73700),UserCreated,User,10711faf,{},));
  Configuration.Builder configBuilder=getConfigurationBuilder(SnapshotMode.INITIAL);
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  SourceRecords snapshotRecords=consumeRecordsByTopic(1);
  assertThat(snapshotRecords.allRecordsInOrder().size()).isEqualTo(1);
  List<SourceRecord> recordsFromOutbox=snapshotRecords.recordsForTopic(topicName(outboxsmtit.outbox));
  assertThat(recordsFromOutbox.size()).isEqualTo(1);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\OutboxEventRouterIT.java",507
728,"'-tryline","@Test public void shouldNotStartWithInvalidConfiguration() throws Exception {
  Configuration config=Configuration.create().build();
  logger.info(Attempting to start the connector with an INVALID configuration, so MULTIPLE error messages & one exceptions will appear in the log);
  start(PostgresConnector.class,config,(success,msg,error) -> {
    assertThat(success).isFalse();
    assertThat(error).isNotNull();
  }
);
  assertConnectorNotRunning();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",139
729,"'-tryline","@Test public void shouldValidateMinimalConfiguration() throws Exception {
  Configuration config=TestHelper.defaultConfig().build();
  Config validateConfig=new PostgresConnector().validate(config.asMap());
  validateConfig.configValues().forEach(configValue -> assertTrue(Unexpected error for:  + configValue.name(),configValue.errorMessages().isEmpty()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",153
730,"'-tryline","@Test public void shouldNotStartWithInvalidSlotConfigAndUserRoles() throws Exception {
  TestHelper.dropAllSchemas();
  TestHelper.dropPublication();
  TestHelper.dropDefaultReplicationSlot();
  TestHelper.executeDDL(postgres_create_tables.ddl);
  TestHelper.execute(CREATE USER badboy WITH PASSWORD 'failing';,GRANT ALL PRIVILEGES ON DATABASE postgres TO badboy;);
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER).with(PostgresConnectorConfig.SLOT_NAME,ReplicationConnection.Builder.DEFAULT_SLOT_NAME).build();
  start(PostgresConnector.class,config);
  waitForStreamingRunning();
  Configuration failingConfig=TestHelper.defaultConfig().with(name,failingPGConnector).with(PostgresConnectorConfig.DATABASE_CONFIG_PREFIX + JdbcConfiguration.USER,badboy).with(PostgresConnectorConfig.DATABASE_CONFIG_PREFIX + JdbcConfiguration.PASSWORD,failing).with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER).with(PostgresConnectorConfig.SLOT_NAME,ReplicationConnection.Builder.DEFAULT_SLOT_NAME).build();
  List<ConfigValue> validatedConfig=new PostgresConnector().validate(failingConfig.asMap()).configValues();
  final List<String> invalidProperties=Collections.singletonList(database.user);
  validatedConfig.forEach(configValue -> {
    if (!invalidProperties.contains(configValue.name())) {
      assertTrue(Unexpected error for \ + configValue.name() + \: + configValue.errorMessages(),configValue.errorMessages().isEmpty());
    }
  }
);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",161
731,"'-tryline","@Test public void shouldValidateConfiguration() throws Exception {
  Configuration config=Configuration.create().build();
  PostgresConnector connector=new PostgresConnector();
  Config validatedConfig=connector.validate(config.asMap());
  assertConfigurationErrors(validatedConfig,PostgresConnectorConfig.HOSTNAME,1);
  assertConfigurationErrors(validatedConfig,PostgresConnectorConfig.USER,1);
  assertConfigurationErrors(validatedConfig,PostgresConnectorConfig.DATABASE_NAME,1);
  assertConfigurationErrors(validatedConfig,PostgresConnectorConfig.SERVER_NAME,1);
  validateField(validatedConfig,PostgresConnectorConfig.PLUGIN_NAME,LogicalDecoder.DECODERBUFS.getValue());
  validateField(validatedConfig,PostgresConnectorConfig.SLOT_NAME,ReplicationConnection.Builder.DEFAULT_SLOT_NAME);
  validateField(validatedConfig,PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.FALSE);
  validateField(validatedConfig,PostgresConnectorConfig.PORT,PostgresConnectorConfig.DEFAULT_PORT);
  validateField(validatedConfig,PostgresConnectorConfig.MAX_QUEUE_SIZE,PostgresConnectorConfig.DEFAULT_MAX_QUEUE_SIZE);
  validateField(validatedConfig,PostgresConnectorConfig.MAX_BATCH_SIZE,PostgresConnectorConfig.DEFAULT_MAX_BATCH_SIZE);
  validateField(validatedConfig,PostgresConnectorConfig.SNAPSHOT_FETCH_SIZE,null);
  validateField(validatedConfig,PostgresConnectorConfig.POLL_INTERVAL_MS,PostgresConnectorConfig.DEFAULT_POLL_INTERVAL_MILLIS);
  validateField(validatedConfig,PostgresConnectorConfig.SSL_MODE,PostgresConnectorConfig.SecureConnectionMode.DISABLED);
  validateField(validatedConfig,PostgresConnectorConfig.SSL_CLIENT_CERT,null);
  validateField(validatedConfig,PostgresConnectorConfig.SSL_CLIENT_KEY,null);
  validateField(validatedConfig,PostgresConnectorConfig.SSL_CLIENT_KEY_PASSWORD,null);
  validateField(validatedConfig,PostgresConnectorConfig.SSL_ROOT_CERT,null);
  validateField(validatedConfig,PostgresConnectorConfig.SCHEMA_WHITELIST,null);
  validateField(validatedConfig,PostgresConnectorConfig.SCHEMA_INCLUDE_LIST,null);
  validateField(validatedConfig,PostgresConnectorConfig.SCHEMA_BLACKLIST,null);
  validateField(validatedConfig,PostgresConnectorConfig.SCHEMA_EXCLUDE_LIST,null);
  validateField(validatedConfig,PostgresConnectorConfig.TABLE_WHITELIST,null);
  validateField(validatedConfig,PostgresConnectorConfig.TABLE_INCLUDE_LIST,null);
  validateField(validatedConfig,PostgresConnectorConfig.TABLE_BLACKLIST,null);
  validateField(validatedConfig,PostgresConnectorConfig.TABLE_EXCLUDE_LIST,null);
  validateField(validatedConfig,PostgresConnectorConfig.COLUMN_BLACKLIST,null);
  validateField(validatedConfig,PostgresConnectorConfig.COLUMN_EXCLUDE_LIST,null);
  validateField(validatedConfig,PostgresConnectorConfig.COLUMN_WHITELIST,null);
  validateField(validatedConfig,PostgresConnectorConfig.COLUMN_INCLUDE_LIST,null);
  validateField(validatedConfig,PostgresConnectorConfig.MSG_KEY_COLUMNS,null);
  validateField(validatedConfig,PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL);
  validateField(validatedConfig,RelationalDatabaseConnectorConfig.SNAPSHOT_LOCK_TIMEOUT_MS,RelationalDatabaseConnectorConfig.DEFAULT_SNAPSHOT_LOCK_TIMEOUT_MILLIS);
  validateField(validatedConfig,PostgresConnectorConfig.TIME_PRECISION_MODE,TemporalPrecisionMode.ADAPTIVE);
  validateField(validatedConfig,PostgresConnectorConfig.DECIMAL_HANDLING_MODE,PostgresConnectorConfig.DecimalHandlingMode.PRECISE);
  validateField(validatedConfig,PostgresConnectorConfig.SSL_SOCKET_FACTORY,null);
  validateField(validatedConfig,PostgresConnectorConfig.TCP_KEEPALIVE,true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",198
732,"'-tryline","@Test public void shouldValidateReplicationSlotName() throws Exception {
  Configuration config=Configuration.create().with(PostgresConnectorConfig.SLOT_NAME,xx-aa).build();
  PostgresConnector connector=new PostgresConnector();
  Config validatedConfig=connector.validate(config.asMap());
  assertConfigurationErrors(validatedConfig,PostgresConnectorConfig.SLOT_NAME,1);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",246
733,"'-tryline","@Test public void shouldSupportSSLParameters() throws Exception {
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SSL_MODE,PostgresConnectorConfig.SecureConnectionMode.REQUIRED).build();
  start(PostgresConnector.class,config,(success,msg,error) -> {
    if (TestHelper.shouldSSLConnectionFail()) {
      assertThat(success).isFalse();
      assertThat(error).isInstanceOf(ConnectException.class);
      Throwable cause=error.getCause();
      assertThat(cause).isInstanceOf(SQLException.class);
      assertThat(PSQLState.CONNECTION_REJECTED.getState().equals(((SQLException)cause).getSQLState()));
    }
  }
);
  if (TestHelper.shouldSSLConnectionFail()) {
    assertConnectorNotRunning();
  }
 else {
    assertConnectorIsRunning();
    Thread.sleep(10000);
    stopConnector();
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",257
734,"'-tryline","@Test public void shouldProduceEventsWithInitialSnapshot() throws Exception {
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.FALSE);
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  assertRecordsFromSnapshot(2,1,1);
  TestHelper.execute(INSERT_STMT);
  assertRecordsAfterInsert(2,2,2);
  stopConnector();
  assertNoRecordsToConsume();
  TestHelper.execute(INSERT_STMT);
  start(PostgresConnector.class,configBuilder.with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).build());
  assertConnectorIsRunning();
  assertRecordsAfterInsert(2,3,3);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",283
735,"'-tryline","@Test @FixFor(DBZ-1161) public void shouldConsumeMessagesFromSnapshot() throws Exception {
  TestHelper.execute(SETUP_TABLES_STMT);
  final int recordCount=100;
  for (int i=0; i < recordCount - 1; i++) {
    TestHelper.execute(INSERT_STMT);
  }
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL.getValue()).with(PostgresConnectorConfig.MAX_QUEUE_SIZE,recordCount / 2).with(PostgresConnectorConfig.MAX_BATCH_SIZE,10).with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST,s1);
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted();
  SourceRecords records=consumeRecordsByTopic(recordCount);
  Assertions.assertThat(records.recordsForTopic(test_server.s1.a)).hasSize(recordCount);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",372
736,"'-tryline","@Test public void shouldConsumeMessagesFromSnapshotOld() throws Exception {
  TestHelper.execute(SETUP_TABLES_STMT);
  final int recordCount=100;
  for (int i=0; i < recordCount - 1; i++) {
    TestHelper.execute(INSERT_STMT);
  }
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL.getValue()).with(PostgresConnectorConfig.MAX_QUEUE_SIZE,recordCount / 2).with(PostgresConnectorConfig.MAX_BATCH_SIZE,10).with(PostgresConnectorConfig.SCHEMA_WHITELIST,s1);
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted();
  SourceRecords records=consumeRecordsByTopic(recordCount);
  Assertions.assertThat(records.recordsForTopic(test_server.s1.a)).hasSize(recordCount);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",396
737,"'-tryline","@Test @FixFor(DBZ-997) public void shouldReceiveChangesForChangePKColumnDefinition() throws Exception {
  Testing.Print.enable();
  final String slotName=pkcolumndef + new Random().nextInt(100);
  TestHelper.create().dropReplicationSlot(slotName);
  try {
    final PostgresConnectorConfig config=new PostgresConnectorConfig(TestHelper.defaultConfig().with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,Boolean.FALSE).with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST,changepk).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.FALSE).with(PostgresConnectorConfig.SLOT_NAME,slotName).build());
    final String newPkField=newpk;
    final String topicName=topicName(changepk.test_table);
    TestHelper.execute(CREATE SCHEMA IF NOT EXISTS changepk;,DROP TABLE IF EXISTS changepk.test_table;,CREATE TABLE changepk.test_table (pk SERIAL, text TEXT, PRIMARY KEY(pk));,INSERT INTO changepk.test_table(text) VALUES ('insert'););
    start(PostgresConnector.class,config.getConfig());
    assertConnectorIsRunning();
    SourceRecords records=consumeRecordsByTopic(1);
    TestHelper.execute(ALTER TABLE changepk.test_table DROP CONSTRAINT test_table_pkey; + ALTER TABLE changepk.test_table RENAME COLUMN pk TO newpk; + ALTER TABLE changepk.test_table ADD PRIMARY KEY(newpk);+ INSERT INTO changepk.test_table VALUES(2, 'newpkcol'));
    records=consumeRecordsByTopic(1);
    SourceRecord insertRecord=records.recordsForTopic(topicName).get(0);
    assertEquals(topicName,insertRecord.topic());
    VerifyRecord.isValidInsert(insertRecord,newpk,2);
    TestHelper.execute(ALTER TABLE changepk.test_table ADD COLUMN pk2 SERIAL; + ALTER TABLE changepk.test_table DROP CONSTRAINT test_table_pkey; + ALTER TABLE changepk.test_table ADD PRIMARY KEY(newpk,pk2);+ INSERT INTO changepk.test_table VALUES(3, 'newpkcol', 8));
    records=consumeRecordsByTopic(1);
    insertRecord=records.recordsForTopic(topicName).get(0);
    assertEquals(topicName,insertRecord.topic());
    VerifyRecord.isValidInsert(insertRecord,newPkField,3);
    VerifyRecord.isValidInsert(insertRecord,pk2,8);
    stopConnector();
    TestHelper.execute(INSERT INTO changepk.test_table VALUES(4, 'newpkcol', 20));
    TestHelper.execute(ALTER TABLE changepk.test_table DROP CONSTRAINT test_table_pkey; + ALTER TABLE changepk.test_table DROP COLUMN pk2; + ALTER TABLE changepk.test_table ADD COLUMN pk3 SERIAL;+ ALTER TABLE changepk.test_table ADD PRIMARY KEY(newpk,pk3);+ INSERT INTO changepk.test_table VALUES(5, 'dropandaddpkcol',10));
    start(PostgresConnector.class,config.getConfig());
    records=consumeRecordsByTopic(2);
    insertRecord=records.recordsForTopic(topicName).get(0);
    assertEquals(topicName,insertRecord.topic());
    VerifyRecord.isValidInsert(insertRecord,newPkField,4);
    Struct key=(Struct)insertRecord.key();
    assertThat(key.schema().field(pk2)).isNull();
    assertThat(key.schema().field(pk3)).isNull();
    insertRecord=records.recordsForTopic(topicName).get(1);
    assertEquals(topicName,insertRecord.topic());
    VerifyRecord.isValidInsert(insertRecord,newPkField,5);
    VerifyRecord.isValidInsert(insertRecord,pk3,10);
    key=(Struct)insertRecord.key();
    assertThat(key.schema().field(pk2)).isNull();
    stopConnector();
    TestHelper.create().dropReplicationSlot(slotName);
    TestHelper.execute(DROP SCHEMA IF EXISTS changepk CASCADE;);
  }
 catch (  Throwable t) {
    stopConnector(null);
    TestHelper.create().dropReplicationSlot(slotName);
    throw t;
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",419
738,"'-tryline","@Test @FixFor(DBZ-1021) @SkipWhenDecoderPluginNameIs(value=SkipWhenDecoderPluginNameIs.DecoderPluginName.PGOUTPUT,reason=Pgoutput will generate insert statements even for dropped tables, column optionality will default to true however) public void shouldIgnoreEventsForDeletedTable() throws Exception {
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.FALSE);
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted();
  assertRecordsFromSnapshot(2,1,1);
  waitForStreamingRunning();
  TestHelper.execute(INSERT_STMT);
  assertRecordsAfterInsert(2,2,2);
  stopConnector();
  assertNoRecordsToConsume();
  TestHelper.execute(INSERT_STMT);
  TestHelper.execute(DROP TABLE s1.a);
  start(PostgresConnector.class,configBuilder.with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).build());
  assertConnectorIsRunning();
  waitForStreamingRunning();
  SourceRecords actualRecords=consumeRecordsByTopic(1);
  assertThat(actualRecords.topics()).hasSize(1);
  assertThat(actualRecords.recordsForTopic(topicName(s2.a))).hasSize(1);
  stopConnector();
  TestHelper.dropDefaultReplicationSlot();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",518
739,"'-tryline","@Test @FixFor(DBZ-1021) @SkipWhenDecoderPluginNameIsNot(value=SkipWhenDecoderPluginNameIsNot.DecoderPluginName.PGOUTPUT,reason=Pgoutput will generate insert statements even for dropped tables, column optionality will default to true however) public void shouldNotIgnoreEventsForDeletedTable() throws Exception {
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.FALSE);
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted();
  assertRecordsFromSnapshot(2,1,1);
  waitForStreamingRunning();
  TestHelper.execute(INSERT_STMT);
  assertRecordsAfterInsert(2,2,2);
  stopConnector();
  assertNoRecordsToConsume();
  TestHelper.execute(INSERT_STMT);
  TestHelper.execute(DROP TABLE s1.a);
  start(PostgresConnector.class,configBuilder.with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).build());
  assertConnectorIsRunning();
  waitForStreamingRunning();
  SourceRecords actualRecords=consumeRecordsByTopic(2);
  assertThat(actualRecords.topics()).hasSize(2);
  assertThat(actualRecords.recordsForTopic(topicName(s1.a))).hasSize(1);
  assertThat(actualRecords.recordsForTopic(topicName(s2.a))).hasSize(1);
  stopConnector();
  TestHelper.dropDefaultReplicationSlot();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",558
740,"'-tryline","@Test public void shouldIgnoreViews() throws Exception {
  TestHelper.execute(SETUP_TABLES_STMT + CREATE VIEW s1.myview AS SELECT * from s1.a;);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.FALSE);
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted();
  assertRecordsFromSnapshot(2,1,1);
  waitForStreamingRunning();
  TestHelper.execute(INSERT_STMT);
  assertRecordsAfterInsert(2,2,2);
  stopConnector();
  assertNoRecordsToConsume();
  TestHelper.execute(INSERT_STMT);
  start(PostgresConnector.class,configBuilder.with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).build());
  assertConnectorIsRunning();
  waitForStreamingRunning();
  assertRecordsAfterInsert(2,3,3);
  stopConnector();
  TestHelper.dropDefaultReplicationSlot();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",599
741,"'-tryline","@Test @FixFor(DBZ-693) public void shouldExecuteOnConnectStatements() throws Exception {
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL.getValue()).with(PostgresConnectorConfig.ON_CONNECT_STATEMENTS,INSERT INTO s1.a (aa) VALUES (2); INSERT INTO s2.a (aa, bb) VALUES (2, 'hello;; world');).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.FALSE);
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  waitForStreamingRunning();
  SourceRecords actualRecords=consumeRecordsByTopic(6);
  assertKey(actualRecords.allRecordsInOrder().get(0),pk,1);
  assertKey(actualRecords.allRecordsInOrder().get(1),pk,2);
  assertValueField(actualRecords.allRecordsInOrder().get(5),after/bb,hello; world);
  stopConnector();
  TestHelper.dropDefaultReplicationSlot();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",638
742,"'-tryline","@Test public void shouldResumeSnapshotIfFailingMidstream() throws Exception {
  CountDownLatch latch=new CountDownLatch(1);
  String setupStmt=SETUP_TABLES_STMT + INSERT_STMT;
  TestHelper.execute(setupStmt);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.FALSE);
  EmbeddedEngine.CompletionCallback completionCallback=(success,message,error) -> {
    if (error != null) {
      latch.countDown();
    }
 else {
      fail(A controlled exception was expected....);
    }
  }
;
  start(PostgresConnector.class,configBuilder.build(),completionCallback,stopOnPKPredicate(2));
  if (!latch.await(TestHelper.waitTimeForRecords() * 5,TimeUnit.SECONDS)) {
    fail(did not reach stop condition in time);
  }
  assertConnectorNotRunning();
  consumeAvailableRecords(record -> {
  }
);
  stopConnector();
  assertNoRecordsToConsume();
  start(PostgresConnector.class,configBuilder.with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).build());
  assertConnectorIsRunning();
  assertRecordsFromSnapshot(4,1,2,1,2);
  TestHelper.execute(INSERT_STMT);
  assertRecordsAfterInsert(2,3,3);
  stopConnector();
  TestHelper.dropDefaultReplicationSlot();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",737
743,"'-tryline","@Test @FixFor(DBZ-1857) @SkipWhenDatabaseVersion(check=LESS_THAN,major=10,reason=Database version less than 10.0) public void shouldRecoverFromRetriableException() throws Exception {
  String setupStmt=SETUP_TABLES_STMT;
  TestHelper.execute(setupStmt);
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.FALSE).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  waitForStreamingRunning(postgres,TestHelper.TEST_SERVER);
  assertRecordsFromSnapshot(2,1,1);
  TestHelper.execute(SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE backend_type='walsender');
  TestHelper.execute(INSERT_STMT);
  assertRecordsAfterInsert(2,2,2);
  stopConnector();
  TestHelper.dropDefaultReplicationSlot();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",784
744,"'-tryline","@Test public void shouldTakeExcludeListFiltersIntoAccount() throws Exception {
  String setupStmt=SETUP_TABLES_STMT + CREATE TABLE s1.b (pk SERIAL, aa integer, bb integer, PRIMARY KEY(pk)); + ALTER TABLE s1.a ADD COLUMN bb integer;+ INSERT INTO s1.a (aa, bb) VALUES (2, 2);+ INSERT INTO s1.a (aa, bb) VALUES (3, 3);+ INSERT INTO s1.b (aa, bb) VALUES (4, 4);+ INSERT INTO s2.a (aa) VALUES (5);;
  TestHelper.execute(setupStmt);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).with(PostgresConnectorConfig.SCHEMA_EXCLUDE_LIST,s2).with(PostgresConnectorConfig.TABLE_EXCLUDE_LIST,.+b).with(PostgresConnectorConfig.COLUMN_EXCLUDE_LIST,.+bb);
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  SourceRecords actualRecords=consumeRecordsByTopic(4);
  assertThat(actualRecords.recordsForTopic(topicName(s2.a))).isNullOrEmpty();
  assertThat(actualRecords.recordsForTopic(topicName(s1.b))).isNullOrEmpty();
  List<SourceRecord> recordsForS1a=actualRecords.recordsForTopic(topicName(s1.a));
  assertThat(recordsForS1a.size()).isEqualTo(3);
  AtomicInteger pkValue=new AtomicInteger(1);
  recordsForS1a.forEach(record -> {
    VerifyRecord.isValidRead(record,PK_FIELD,pkValue.getAndIncrement());
    assertFieldAbsent(record,bb);
  }
);
  String insertStmt=INSERT INTO s1.b (aa, bb) VALUES (6, 6); + INSERT INTO s2.a (aa) VALUES (7);;
  TestHelper.execute(insertStmt);
  assertNoRecordsToConsume();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",811
745,"'-tryline","@Test public void shouldTakeBlacklistFiltersIntoAccount() throws Exception {
  String setupStmt=SETUP_TABLES_STMT + CREATE TABLE s1.b (pk SERIAL, aa integer, bb integer, PRIMARY KEY(pk)); + ALTER TABLE s1.a ADD COLUMN bb integer;+ INSERT INTO s1.a (aa, bb) VALUES (2, 2);+ INSERT INTO s1.a (aa, bb) VALUES (3, 3);+ INSERT INTO s1.b (aa, bb) VALUES (4, 4);+ INSERT INTO s2.a (aa) VALUES (5);;
  TestHelper.execute(setupStmt);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).with(PostgresConnectorConfig.SCHEMA_BLACKLIST,s2).with(PostgresConnectorConfig.TABLE_BLACKLIST,.+b).with(PostgresConnectorConfig.COLUMN_BLACKLIST,.+bb);
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  SourceRecords actualRecords=consumeRecordsByTopic(4);
  assertThat(actualRecords.recordsForTopic(topicName(s2.a))).isNullOrEmpty();
  assertThat(actualRecords.recordsForTopic(topicName(s1.b))).isNullOrEmpty();
  List<SourceRecord> recordsForS1a=actualRecords.recordsForTopic(topicName(s1.a));
  assertThat(recordsForS1a.size()).isEqualTo(3);
  AtomicInteger pkValue=new AtomicInteger(1);
  recordsForS1a.forEach(record -> {
    VerifyRecord.isValidRead(record,PK_FIELD,pkValue.getAndIncrement());
    assertFieldAbsent(record,bb);
  }
);
  String insertStmt=INSERT INTO s1.b (aa, bb) VALUES (6, 6); + INSERT INTO s2.a (aa) VALUES (7);;
  TestHelper.execute(insertStmt);
  assertNoRecordsToConsume();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",851
746,"'-tryline","@Test @FixFor(DBZ-1962) public void shouldTakeColumnWhitelistFilterIntoAccount() throws Exception {
  String setupStmt=SETUP_TABLES_STMT + ALTER TABLE s1.a ADD COLUMN bb integer; + ALTER TABLE s1.a ADD COLUMN cc char(12);+ INSERT INTO s1.a (aa, bb) VALUES (2, 2);;
  TestHelper.execute(setupStmt);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).with(column.mask.with.5.chars,.+cc).with(PostgresConnectorConfig.COLUMN_INCLUDE_LIST,.+aa,.+cc);
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  SourceRecords actualRecords=consumeRecordsByTopic(1);
  List<SourceRecord> recordsForS1a=actualRecords.recordsForTopic(topicName(s1.a));
  recordsForS1a.forEach(record -> {
    assertFieldAbsent(record,bb);
    Struct recordValue=((Struct)record.value());
    assertThat(recordValue.getStruct(after).getString(cc)).isEqualTo(*****);
  }
);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",891
747,"'-tryline","@Test @FixFor(DBZ-1546) public void shouldRemoveWhiteSpaceChars() throws Exception {
  String setupStmt=SETUP_TABLES_STMT + CREATE TABLE s1.b (pk SERIAL, aa integer, PRIMARY KEY(pk)); + INSERT INTO s1.b (aa) VALUES (123);;
  String tableWhitelistWithWhitespace=s1.a, s1.b;
  TestHelper.execute(setupStmt);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST,s1).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,tableWhitelistWithWhitespace);
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  SourceRecords actualRecords=consumeRecordsByTopic(2);
  List<SourceRecord> records=actualRecords.recordsForTopic(topicName(s1.b));
  assertThat(records.size()).isEqualTo(1);
  SourceRecord record=records.get(0);
  VerifyRecord.isValidRead(record,PK_FIELD,1);
  String sourceTable=((Struct)record.value()).getStruct(source).getString(table);
  assertThat(sourceTable).isEqualTo(b);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",918
748,"'-tryline","@Test public void shouldRemoveWhiteSpaceCharsOld() throws Exception {
  String setupStmt=SETUP_TABLES_STMT + CREATE TABLE s1.b (pk SERIAL, aa integer, PRIMARY KEY(pk)); + INSERT INTO s1.b (aa) VALUES (123);;
  String tableWhitelistWithWhitespace=s1.a, s1.b;
  TestHelper.execute(setupStmt);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).with(PostgresConnectorConfig.SCHEMA_WHITELIST,s1).with(PostgresConnectorConfig.TABLE_WHITELIST,tableWhitelistWithWhitespace);
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  SourceRecords actualRecords=consumeRecordsByTopic(2);
  List<SourceRecord> records=actualRecords.recordsForTopic(topicName(s1.b));
  assertThat(records.size()).isEqualTo(1);
  SourceRecord record=records.get(0);
  VerifyRecord.isValidRead(record,PK_FIELD,1);
  String sourceTable=((Struct)record.value()).getStruct(source).getString(table);
  assertThat(sourceTable).isEqualTo(b);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",949
749,"'-tryline","@Test @FixFor(DBZ-2118) public void shouldCloseTxAfterTypeQuery() throws Exception {
  String setupStmt=SETUP_TABLES_STMT;
  TestHelper.execute(setupStmt);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST,s1).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,s1.b).with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true);
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted();
  TestHelper.execute(CREATE TABLE s1.b (pk SERIAL, aa isbn, PRIMARY KEY(pk));,INSERT INTO s1.b (aa) VALUES ('978-0-393-04002-9'));
  SourceRecords actualRecords=consumeRecordsByTopic(1);
  List<SourceRecord> records=actualRecords.recordsForTopic(topicName(s1.b));
  assertThat(records.size()).isEqualTo(1);
  SourceRecord record=records.get(0);
  VerifyRecord.isValidInsert(record,PK_FIELD,1);
  final String isbn=new String(((Struct)record.value()).getStruct(after).getBytes(aa));
  Assertions.assertThat(isbn).isEqualTo(0-393-04002-X);
  TestHelper.assertNoOpenTransactions();
  stopConnector();
  assertConnectorNotRunning();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",979
750,"'-tryline","@Test @FixFor(DBZ-878) public void shouldReplaceInvalidTopicNameCharacters() throws Exception {
  String setupStmt=SETUP_TABLES_STMT + CREATE TABLE s1.\dbz_878_some|test@data\ (pk SERIAL, aa integer, PRIMARY KEY(pk)); + INSERT INTO s1.\dbz_878_some|test@data\ (aa) VALUES (123);;
  TestHelper.execute(setupStmt);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST,s1).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,s1\\.dbz_878_some\\|test@data);
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  SourceRecords actualRecords=consumeRecordsByTopic(1);
  List<SourceRecord> records=actualRecords.recordsForTopic(topicName(s1.dbz_878_some_test_data));
  assertThat(records.size()).isEqualTo(1);
  SourceRecord record=records.get(0);
  VerifyRecord.isValidRead(record,PK_FIELD,1);
  String sourceTable=((Struct)record.value()).getStruct(source).getString(table);
  assertThat(sourceTable).isEqualTo(dbz_878_some|test@data);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",1012
751,"'-tryline","@Test @FixFor(DBZ-1035) public void shouldAllowForExportedSnapshot() throws Exception {
  TestHelper.dropDefaultReplicationSlot();
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.EXPORTED.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.FALSE).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  SourceRecords actualRecords=consumeRecordsByTopic(2);
  List<SourceRecord> s1recs=actualRecords.recordsForTopic(topicName(s1.a));
  List<SourceRecord> s2recs=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(s1recs.size()).isEqualTo(1);
  assertThat(s2recs.size()).isEqualTo(1);
  VerifyRecord.isValidRead(s1recs.get(0),PK_FIELD,1);
  VerifyRecord.isValidRead(s2recs.get(0),PK_FIELD,1);
  TestHelper.execute(INSERT_STMT);
  actualRecords=consumeRecordsByTopic(2);
  s1recs=actualRecords.recordsForTopic(topicName(s1.a));
  s2recs=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(s1recs.size()).isEqualTo(1);
  assertThat(s2recs.size()).isEqualTo(1);
  VerifyRecord.isValidInsert(s1recs.get(0),PK_FIELD,2);
  VerifyRecord.isValidInsert(s2recs.get(0),PK_FIELD,2);
  stopConnector();
  config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.EXPORTED.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.execute(INSERT_STMT);
  actualRecords=consumeRecordsByTopic(2);
  s1recs=actualRecords.recordsForTopic(topicName(s1.a));
  s2recs=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(s1recs.size()).isEqualTo(1);
  assertThat(s2recs.size()).isEqualTo(1);
  VerifyRecord.isValidInsert(s1recs.get(0),PK_FIELD,3);
  VerifyRecord.isValidInsert(s2recs.get(0),PK_FIELD,3);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",1314
752,"'-tryline","@Test @FixFor(DBZ-2288) @SkipWhenDecoderPluginNameIs(value=SkipWhenDecoderPluginNameIs.DecoderPluginName.PGOUTPUT,reason=PgOutput needs publication for manually created slot) public void exportedSnapshotShouldNotSkipRecordOfParallelTx() throws Exception {
  TestHelper.dropDefaultReplicationSlot();
  TestHelper.createDefaultReplicationSlot();
  TestHelper.execute(SETUP_TABLES_STMT);
  TestHelper.execute(INSERT_STMT);
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.EXPORTED.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.FALSE).with(PostgresConnectorConfig.MAX_QUEUE_SIZE,2).with(PostgresConnectorConfig.MAX_BATCH_SIZE,1).build();
  final PostgresConnection pgConnection=TestHelper.create();
  pgConnection.setAutoCommit(false);
  pgConnection.executeWithoutCommitting(INSERT_STMT);
  final AtomicBoolean inserted=new AtomicBoolean();
  start(PostgresConnector.class,config,loggingCompletion(),x -> false,x -> {
    if (!inserted.get()) {
      TestHelper.execute(INSERT_STMT);
      try {
        pgConnection.commit();
      }
 catch (      Exception e) {
        throw new IllegalStateException(e);
      }
      inserted.set(true);
    }
  }
);
  assertConnectorIsRunning();
  SourceRecords actualRecords=consumeRecordsByTopic(4);
  actualRecords=consumeRecordsByTopic(4);
  List<SourceRecord> s1recs=actualRecords.recordsForTopic(topicName(s1.a));
  List<SourceRecord> s2recs=actualRecords.recordsForTopic(topicName(s1.a));
  s2recs=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(s1recs.size()).isEqualTo(2);
  assertThat(s2recs.size()).isEqualTo(2);
  stopConnector();
  TestHelper.dropDefaultReplicationSlot();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",1376
753,"'-tryline","@Test @FixFor(DBZ-2288) @SkipWhenDecoderPluginNameIsNot(value=SkipWhenDecoderPluginNameIsNot.DecoderPluginName.PGOUTPUT,reason=Publication not supported) public void exportedSnapshotShouldNotSkipRecordOfParallelTxPgoutput() throws Exception {
  TestHelper.dropDefaultReplicationSlot();
  TestHelper.createDefaultReplicationSlot();
  TestHelper.execute(CREATE PUBLICATION dbz_publication FOR ALL TABLES;);
  TestHelper.execute(SETUP_TABLES_STMT);
  TestHelper.execute(INSERT_STMT);
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.EXPORTED.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.FALSE).with(PostgresConnectorConfig.MAX_QUEUE_SIZE,2).with(PostgresConnectorConfig.MAX_BATCH_SIZE,1).build();
  final PostgresConnection pgConnection=TestHelper.create();
  pgConnection.setAutoCommit(false);
  pgConnection.executeWithoutCommitting(INSERT_STMT);
  final AtomicBoolean inserted=new AtomicBoolean();
  start(PostgresConnector.class,config,loggingCompletion(),x -> false,x -> {
    if (!inserted.get()) {
      TestHelper.execute(INSERT_STMT);
      try {
        pgConnection.commit();
      }
 catch (      Exception e) {
        throw new IllegalStateException(e);
      }
      inserted.set(true);
    }
  }
);
  assertConnectorIsRunning();
  SourceRecords actualRecords=consumeRecordsByTopic(4);
  actualRecords=consumeRecordsByTopic(4);
  List<SourceRecord> s1recs=actualRecords.recordsForTopic(topicName(s1.a));
  List<SourceRecord> s2recs=actualRecords.recordsForTopic(topicName(s1.a));
  s2recs=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(s1recs.size()).isEqualTo(2);
  assertThat(s2recs.size()).isEqualTo(2);
  stopConnector();
  TestHelper.dropPublication();
  TestHelper.dropDefaultReplicationSlot();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",1427
754,"'-tryline","@Test @FixFor(DBZ-1437) public void shouldPeformSnapshotOnceForInitialOnlySnapshotMode() throws Exception {
  final LogInterceptor logInterceptor=new LogInterceptor();
  TestHelper.dropDefaultReplicationSlot();
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL_ONLY.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.FALSE).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(postgres,test_server);
  TestHelper.execute(INSERT_STMT);
  waitForAvailableRecords(TestHelper.waitTimeForRecords(),TimeUnit.SECONDS);
  SourceRecords actualRecords=consumeRecordsByTopic(2);
  List<SourceRecord> s1recs=actualRecords.recordsForTopic(topicName(s1.a));
  List<SourceRecord> s2recs=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(s1recs.size()).isEqualTo(1);
  assertThat(s2recs.size()).isEqualTo(1);
  VerifyRecord.isValidRead(s1recs.get(0),PK_FIELD,1);
  VerifyRecord.isValidRead(s2recs.get(0),PK_FIELD,1);
  stopConnector();
  assertConnectorNotRunning();
  config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL_ONLY.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  stopConnector(value -> assertThat(logInterceptor.containsMessage(Previous initial snapshot completed, no snapshot will be performed)).isTrue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",1480
755,"'-tryline","@Test @FixFor(DBZ-2094) @SkipWhenDecoderPluginNameIs(value=SkipWhenDecoderPluginNameIs.DecoderPluginName.WAL2JSON,reason=No need for db write to complete catch-up phase) public void shouldResumeStreamingFromSlotPositionForCustomSnapshot() throws Exception {
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.CUSTOM.getValue()).with(PostgresConnectorConfig.SNAPSHOT_MODE_CLASS,CustomStartFromStreamingTestSnapshot.class.getName()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.FALSE).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  waitForStreamingRunning();
  SourceRecords actualRecords=consumeRecordsByTopic(2);
  List<SourceRecord> s1recs=actualRecords.recordsForTopic(topicName(s1.a));
  List<SourceRecord> s2recs=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(s1recs.size()).isEqualTo(1);
  assertThat(s2recs.size()).isEqualTo(1);
  VerifyRecord.isValidRead(s1recs.get(0),PK_FIELD,1);
  VerifyRecord.isValidRead(s2recs.get(0),PK_FIELD,1);
  stopConnector();
  TestHelper.execute(INSERT_STMT);
  config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.CUSTOM.getValue()).with(PostgresConnectorConfig.SNAPSHOT_MODE_CLASS,CustomStartFromStreamingTestSnapshot.class.getName()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.FALSE).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted();
  actualRecords=consumeRecordsByTopic(6);
  s1recs=actualRecords.recordsForTopic(topicName(s1.a));
  s2recs=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(s1recs.size()).isEqualTo(3);
  assertThat(s2recs.size()).isEqualTo(3);
  VerifyRecord.isValidInsert(s1recs.get(0),PK_FIELD,2);
  VerifyRecord.isValidInsert(s2recs.get(0),PK_FIELD,2);
  VerifyRecord.isValidRead(s1recs.get(1),PK_FIELD,1);
  VerifyRecord.isValidRead(s1recs.get(2),PK_FIELD,2);
  VerifyRecord.isValidRead(s2recs.get(1),PK_FIELD,1);
  VerifyRecord.isValidRead(s2recs.get(2),PK_FIELD,2);
  TestHelper.assertNoOpenTransactions();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",1531
756,"'-tryline","@Test @FixFor(DBZ-2772) @SkipWhenDecoderPluginNameIsNot(value=SkipWhenDecoderPluginNameIsNot.DecoderPluginName.WAL2JSON,reason=Requires db write to complete catch-up phase) public void shouldResumeStreamingFromSlotPositionForCustomSnapshotWal2Json() throws Exception {
  Testing.Print.enable();
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.CUSTOM.getValue()).with(PostgresConnectorConfig.SNAPSHOT_MODE_CLASS,CustomStartFromStreamingTestSnapshot.class.getName()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.FALSE).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  waitForStreamingRunning();
  SourceRecords actualRecords=consumeRecordsByTopic(2);
  List<SourceRecord> s1recs=actualRecords.recordsForTopic(topicName(s1.a));
  List<SourceRecord> s2recs=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(s1recs.size()).isEqualTo(1);
  assertThat(s2recs.size()).isEqualTo(1);
  VerifyRecord.isValidRead(s1recs.get(0),PK_FIELD,1);
  VerifyRecord.isValidRead(s2recs.get(0),PK_FIELD,1);
  stopConnector();
  assertConnectorNotRunning();
  TestHelper.execute(INSERT_STMT);
  config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.CUSTOM.getValue()).with(PostgresConnectorConfig.SNAPSHOT_MODE_CLASS,CustomStartFromStreamingTestSnapshot.class.getName()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.FALSE).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  waitForStreamingRunning();
  TestHelper.execute(INSERT INTO s1.a (pk, aa) VALUES (1000, 1));
  waitForSnapshotToBeCompleted();
  actualRecords=consumeRecordsByTopic(7);
  s1recs=actualRecords.recordsForTopic(topicName(s1.a));
  s2recs=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(s1recs.size()).isEqualTo(4);
  assertThat(s2recs.size()).isEqualTo(3);
  VerifyRecord.isValidInsert(s1recs.get(0),PK_FIELD,2);
  VerifyRecord.isValidInsert(s2recs.get(0),PK_FIELD,2);
  VerifyRecord.isValidInsert(s1recs.get(1),PK_FIELD,1000);
  VerifyRecord.isValidRead(s1recs.get(2),PK_FIELD,1);
  VerifyRecord.isValidRead(s1recs.get(3),PK_FIELD,2);
  VerifyRecord.isValidRead(s2recs.get(1),PK_FIELD,1);
  VerifyRecord.isValidRead(s2recs.get(2),PK_FIELD,2);
  TestHelper.assertNoOpenTransactions();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",1591
757,"'-tryline","@Test @FixFor(DBZ-2094) @SkipWhenDecoderPluginNameIs(value=SkipWhenDecoderPluginNameIs.DecoderPluginName.WAL2JSON,reason=Fails due to DBZ-3158) public void customSnapshotterSkipsTablesOnRestart() throws Exception {
  final LogInterceptor logInterceptor=new LogInterceptor();
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.ALWAYS.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.FALSE).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  waitForStreamingRunning();
  SourceRecords actualRecords=consumeRecordsByTopic(2);
  List<SourceRecord> s1recs=actualRecords.recordsForTopic(topicName(s1.a));
  List<SourceRecord> s2recs=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(s1recs.size()).isEqualTo(1);
  assertThat(s2recs.size()).isEqualTo(1);
  VerifyRecord.isValidRead(s1recs.get(0),PK_FIELD,1);
  VerifyRecord.isValidRead(s2recs.get(0),PK_FIELD,1);
  stopConnector();
  TestHelper.execute(INSERT_STMT);
  config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.CUSTOM.getValue()).with(PostgresConnectorConfig.SNAPSHOT_MODE_CLASS,CustomPartialTableTestSnapshot.class.getName()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.FALSE).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted();
  waitForStreamingRunning();
  actualRecords=consumeRecordsByTopic(4);
  s1recs=actualRecords.recordsForTopic(topicName(s1.a));
  s2recs=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(s1recs.size()).isEqualTo(3);
  assertThat(s2recs.size()).isEqualTo(1);
  VerifyRecord.isValidInsert(s1recs.get(0),PK_FIELD,2);
  VerifyRecord.isValidInsert(s2recs.get(0),PK_FIELD,2);
  VerifyRecord.isValidRead(s1recs.get(1),PK_FIELD,1);
  VerifyRecord.isValidRead(s1recs.get(2),PK_FIELD,2);
  assertNoRecordsToConsume();
  TestHelper.assertNoOpenTransactions();
  stopConnector(value -> assertThat(logInterceptor.containsMessage(For table 's2.a' the select statement was not provided, skipping table)).isTrue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",1661
758,"'-tryline","@Test @FixFor(DBZ-2094) public void customSnapshotterSkipsTablesOnRestartWithConcurrentTx() throws Exception {
  final LogInterceptor logInterceptor=new LogInterceptor();
  Testing.Print.enable();
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.ALWAYS.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.FALSE).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  waitForStreamingRunning();
  SourceRecords actualRecords=consumeRecordsByTopic(2);
  List<SourceRecord> s1recs=actualRecords.recordsForTopic(topicName(s1.a));
  List<SourceRecord> s2recs=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(s1recs.size()).isEqualTo(1);
  assertThat(s2recs.size()).isEqualTo(1);
  VerifyRecord.isValidRead(s1recs.get(0),PK_FIELD,1);
  VerifyRecord.isValidRead(s2recs.get(0),PK_FIELD,1);
  stopConnector();
  TestHelper.execute(INSERT_STMT);
  config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.CUSTOM.getValue()).with(PostgresConnectorConfig.SNAPSHOT_MODE_CLASS,CustomPartialTableTestSnapshot.class.getName()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.FALSE).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  Awaitility.await().alias(Streaming was not started on time).pollInterval(1000,TimeUnit.MILLISECONDS).atMost(waitTimeForRecords() * 30,TimeUnit.SECONDS).ignoreException(InstanceNotFoundException.class).until(() -> {
    TestHelper.create().execute(vacuum full).close();
    return (boolean)ManagementFactory.getPlatformMBeanServer().getAttribute(getSnapshotMetricsObjectName(postgres,TestHelper.TEST_SERVER),SnapshotCompleted);
  }
);
  waitForStreamingRunning();
  actualRecords=consumeRecordsByTopic(4);
  s1recs=actualRecords.recordsForTopic(topicName(s1.a));
  s2recs=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(s1recs.size()).isEqualTo(3);
  assertThat(s2recs.size()).isEqualTo(1);
  VerifyRecord.isValidInsert(s1recs.get(0),PK_FIELD,2);
  VerifyRecord.isValidInsert(s2recs.get(0),PK_FIELD,2);
  VerifyRecord.isValidRead(s1recs.get(1),PK_FIELD,1);
  VerifyRecord.isValidRead(s1recs.get(2),PK_FIELD,2);
  assertNoRecordsToConsume();
  TestHelper.assertNoOpenTransactions();
  stopConnector(value -> assertThat(logInterceptor.containsMessage(For table 's2.a' the select statement was not provided, skipping table)).isTrue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",1726
759,"'-tryline","@Test @FixFor(DBZ-2608) public void testCustomSnapshotterSnapshotCompleteLifecycleHook() throws Exception {
  TestHelper.execute(DROP SCHEMA IF EXISTS s1 CASCADE; + CREATE SCHEMA s1;  + CREATE TABLE s1.lifecycle_state (hook text, state text, PRIMARY KEY(hook)););
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.CUSTOM.getValue()).with(PostgresConnectorConfig.SNAPSHOT_MODE_CLASS,CustomLifecycleHookTestSnapshot.class.getName()).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted();
  try (PostgresConnection connection=TestHelper.create()){
    List<String> snapshotCompleteState=connection.queryAndMap(SELECT state FROM s1.lifecycle_state WHERE hook like 'snapshotComplete',rs -> {
      final List<String> ret=new ArrayList<>();
      while (rs.next()) {
        ret.add(rs.getString(1));
      }
      return ret;
    }
);
    assertEquals(Collections.singletonList(complete),snapshotCompleteState);
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",1801
760,"'-tryline","@Test @Ignore public void testStreamingPerformance() throws Exception {
  TestHelper.dropAllSchemas();
  TestHelper.executeDDL(postgres_create_tables.ddl);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE);
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  final long recordsCount=1000000;
  final int batchSize=1000;
  batchInsertRecords(recordsCount,batchSize);
  CompletableFuture.runAsync(() -> consumeRecords(recordsCount)).exceptionally(throwable -> {
    throw new RuntimeException(throwable);
  }
).get();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",1861
761,"'-tryline","@Test @Ignore public void testSnapshotPerformance() throws Exception {
  TestHelper.dropAllSchemas();
  TestHelper.executeDDL(postgres_create_tables.ddl);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL_ONLY.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE);
  final long recordsCount=1000000;
  final int batchSize=1000;
  batchInsertRecords(recordsCount,batchSize).get();
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  CompletableFuture.runAsync(() -> consumeRecords(recordsCount)).exceptionally(throwable -> {
    throw new RuntimeException(throwable);
  }
).get();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",1896
762,"'-tryline","@Test @FixFor(DBZ-1242) public void testEmptySchemaWarningAfterApplyingFilters() throws Exception {
  final LogInterceptor logInterceptor=new LogInterceptor();
  TestHelper.dropAllSchemas();
  TestHelper.executeDDL(postgres_create_tables.ddl);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL_ONLY.getValue()).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,my_products);
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  waitForAvailableRecords(10 * (TestHelper.waitTimeForRecords() * 5),TimeUnit.MILLISECONDS);
  stopConnector(value -> assertThat(logInterceptor.containsWarnMessage(DatabaseSchema.NO_CAPTURED_DATA_COLLECTIONS_WARNING)).isTrue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",1919
763,"'-tryline","@Test @FixFor(DBZ-1242) public void testNoEmptySchemaWarningAfterApplyingFilters() throws Exception {
  final LogInterceptor logInterceptor=new LogInterceptor();
  TestHelper.dropAllSchemas();
  TestHelper.executeDDL(postgres_create_tables.ddl);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL_ONLY.getValue());
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  waitForAvailableRecords(100,TimeUnit.MILLISECONDS);
  stopConnector(value -> assertThat(logInterceptor.containsWarnMessage(DatabaseSchema.NO_CAPTURED_DATA_COLLECTIONS_WARNING)).isFalse());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",1939
764,"'-tryline","@Test @FixFor(DBZ-1436) @SkipWhenDecoderPluginNameIsNot(value=SkipWhenDecoderPluginNameIsNot.DecoderPluginName.PGOUTPUT,reason=Publication configuration only valid for PGOUTPUT decoder) public void testCustomPublicationNameUsed() throws Exception {
  final LogInterceptor logInterceptor=new LogInterceptor();
  TestHelper.dropAllSchemas();
  TestHelper.dropPublication(cdc);
  TestHelper.executeDDL(postgres_create_tables.ddl);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.PUBLICATION_NAME,cdc);
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  waitForAvailableRecords(100,TimeUnit.MILLISECONDS);
  stopConnector(value -> assertThat(logInterceptor.containsMessage(Creating new publication 'cdc' for plugin 'PGOUTPUT')).isTrue());
  assertTrue(TestHelper.publicationExists(cdc));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",1958
765,"'-tryline","@Test @FixFor(DBZ-1519) public void shouldNotIssueWarningForNoMonitoredTablesAfterApplyingFilters() throws Exception {
  final LogInterceptor logInterceptor=new LogInterceptor();
  TestHelper.execute(SETUP_TABLES_STMT);
  TestHelper.execute(INSERT_STMT);
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST,s2).build();
  start(PostgresConnector.class,config);
  waitForSnapshotToBeCompleted();
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(logInterceptor.containsMessage(DatabaseSchema.NO_CAPTURED_DATA_COLLECTIONS_WARNING)).isFalse();
  stopConnector();
  start(PostgresConnector.class,config);
  waitForStreamingRunning();
  assertThat(logInterceptor.containsMessage(DatabaseSchema.NO_CAPTURED_DATA_COLLECTIONS_WARNING)).isFalse();
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",2009
766,"'-tryline","@Test @FixFor(DBZ-2865) @SkipWhenDecoderPluginNameIsNot(value=SkipWhenDecoderPluginNameIsNot.DecoderPluginName.DECODERBUFS,reason=Expected warning message is emitted by protobuf decoder) public void shouldClearDatabaseWarnings() throws Exception {
  final LogInterceptor logInterceptor=new LogInterceptor();
  TestHelper.execute(SETUP_TABLES_STMT);
  TestHelper.execute(INSERT_STMT);
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.POLL_INTERVAL_MS,10).build();
  start(PostgresConnector.class,config);
  waitForSnapshotToBeCompleted();
  Awaitility.await().atMost(Duration.ofSeconds(TestHelper.waitTimeForRecords() * 6)).until(() -> logInterceptor.containsMessage(Server-side message: 'Exiting startup callback'));
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",2033
767,"'-tryline","@Test @FixFor(DBZ-1684) @SkipWhenDecoderPluginNameIsNot(value=SkipWhenDecoderPluginNameIsNot.DecoderPluginName.PGOUTPUT,reason=Publication test specifically for pgoutput) public void shouldCreatePublicationWhenReplicationSlotExists() throws Exception {
  TestHelper.dropAllSchemas();
  TestHelper.dropPublication();
  TestHelper.dropDefaultReplicationSlot();
  TestHelper.executeDDL(postgres_create_tables.ddl);
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,false).build();
  start(PostgresConnector.class,config);
  waitForStreamingRunning();
  assertTrue(TestHelper.publicationExists());
  stopConnector();
  TestHelper.dropPublication();
  final LogInterceptor interceptor=new LogInterceptor();
  start(PostgresConnector.class,config);
  waitForStreamingRunning();
  assertTrue(TestHelper.publicationExists());
  stopConnector(value -> {
    assertThat(interceptor.containsMessage(Creating new publication 'dbz_publication' for plugin 'PGOUTPUT')).isTrue();
  }
);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",2052
768,"'-tryline","@Test @FixFor(DBZ-1685) public void shouldConsumeEventsWithMaskedColumns() throws Exception {
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(column.mask.with.5.chars,s2.a.bb);
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  SourceRecords actualRecords=consumeRecordsByTopic(2);
  assertThat(actualRecords.allRecordsInOrder().size()).isEqualTo(2);
  List<SourceRecord> recordsForTopicS2=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(recordsForTopicS2.size()).isEqualTo(1);
  SourceRecord record=recordsForTopicS2.remove(0);
  VerifyRecord.isValidRead(record,PK_FIELD,1);
  Struct value=(Struct)record.value();
  if (value.getStruct(after) != null) {
    assertThat(value.getStruct(after).getString(bb)).isEqualTo(*****);
  }
  TestHelper.execute(INSERT INTO s2.a (aa,bb) VALUES (1, 'test'););
  actualRecords=consumeRecordsByTopic(1);
  assertThat(actualRecords.topics().size()).isEqualTo(1);
  recordsForTopicS2=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(recordsForTopicS2.size()).isEqualTo(1);
  record=recordsForTopicS2.remove(0);
  VerifyRecord.isValidInsert(record,PK_FIELD,2);
  value=(Struct)record.value();
  if (value.getStruct(after) != null) {
    assertThat(value.getStruct(after).getString(bb)).isEqualTo(*****);
  }
  TestHelper.execute(UPDATE s2.a SET aa=2, bb='hello' WHERE pk=2;);
  actualRecords=consumeRecordsByTopic(1);
  assertThat(actualRecords.topics().size()).isEqualTo(1);
  recordsForTopicS2=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(recordsForTopicS2.size()).isEqualTo(1);
  record=recordsForTopicS2.remove(0);
  VerifyRecord.isValidUpdate(record,PK_FIELD,2);
  value=(Struct)record.value();
  if (value.getStruct(before) != null) {
    assertThat(value.getStruct(before).getString(bb)).isEqualTo(*****);
  }
  if (value.getStruct(after) != null) {
    assertThat(value.getStruct(after).getString(bb)).isEqualTo(*****);
  }
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",2093
769,"'-tryline","@Test @FixFor(DBZ-1692) public void shouldConsumeEventsWithMaskedHashedColumns() throws Exception {
  TestHelper.execute(SETUP_TABLES_STMT + CREATE TABLE s2.b (pk SERIAL, bb varchar(255), PRIMARY KEY(pk)););
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(column.mask.hash.SHA-256.with.salt.CzQMA0cB5K,s2.a.bb, s2.b.bb);
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  SourceRecords actualRecords=consumeRecordsByTopic(2);
  assertThat(actualRecords.allRecordsInOrder().size()).isEqualTo(2);
  List<SourceRecord> recordsForTopicS2=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(recordsForTopicS2.size()).isEqualTo(1);
  SourceRecord record=recordsForTopicS2.remove(0);
  VerifyRecord.isValidRead(record,PK_FIELD,1);
  Struct value=(Struct)record.value();
  if (value.getStruct(after) != null) {
    assertThat(value.getStruct(after).getString(bb)).isNull();
  }
  TestHelper.execute(INSERT INTO s2.a (aa,bb) VALUES (1, 'test'););
  actualRecords=consumeRecordsByTopic(1);
  assertThat(actualRecords.topics().size()).isEqualTo(1);
  recordsForTopicS2=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(recordsForTopicS2.size()).isEqualTo(1);
  record=recordsForTopicS2.remove(0);
  VerifyRecord.isValidInsert(record,PK_FIELD,2);
  value=(Struct)record.value();
  if (value.getStruct(after) != null) {
    assertThat(value.getStruct(after).getString(bb)).isEqualTo(8e68c68edbbac316dfe2);
  }
  TestHelper.execute(UPDATE s2.a SET aa=2, bb='hello' WHERE pk=2;);
  actualRecords=consumeRecordsByTopic(1);
  assertThat(actualRecords.topics().size()).isEqualTo(1);
  recordsForTopicS2=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(recordsForTopicS2.size()).isEqualTo(1);
  record=recordsForTopicS2.remove(0);
  VerifyRecord.isValidUpdate(record,PK_FIELD,2);
  value=(Struct)record.value();
  if (value.getStruct(after) != null) {
    assertThat(value.getStruct(after).getString(bb)).isEqualTo(b4d39ab0d198fb4cac8b);
  }
  TestHelper.execute(INSERT INTO s2.b (bb) VALUES ('hello'););
  actualRecords=consumeRecordsByTopic(1);
  assertThat(actualRecords.topics().size()).isEqualTo(1);
  recordsForTopicS2=actualRecords.recordsForTopic(topicName(s2.b));
  assertThat(recordsForTopicS2.size()).isEqualTo(1);
  record=recordsForTopicS2.remove(0);
  VerifyRecord.isValidInsert(record,PK_FIELD,1);
  value=(Struct)record.value();
  if (value.getStruct(before) != null) {
    assertThat(value.getStruct(before).getString(bb)).isNull();
  }
  if (value.getStruct(after) != null) {
    assertThat(value.getStruct(after).getString(bb)).isEqualTo(b4d39ab0d198fb4cac8b2f023da74f670bcaf192dcc79b5d6361b7ae6b2fafdf);
  }
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",2156
770,"'-tryline","@Test @FixFor(DBZ-1972) public void shouldConsumeEventsWithTruncatedColumns() throws Exception {
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(column.truncate.to.3.chars,s2.a.bb);
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  SourceRecords actualRecords=consumeRecordsByTopic(2);
  assertThat(actualRecords.allRecordsInOrder().size()).isEqualTo(2);
  List<SourceRecord> recordsForTopicS2=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(recordsForTopicS2.size()).isEqualTo(1);
  SourceRecord record=recordsForTopicS2.remove(0);
  VerifyRecord.isValidRead(record,PK_FIELD,1);
  TestHelper.execute(INSERT INTO s2.a (aa,bb) VALUES (1, 'test'););
  actualRecords=consumeRecordsByTopic(1);
  assertThat(actualRecords.topics().size()).isEqualTo(1);
  recordsForTopicS2=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(recordsForTopicS2.size()).isEqualTo(1);
  record=recordsForTopicS2.remove(0);
  VerifyRecord.isValidInsert(record,PK_FIELD,2);
  Struct value=(Struct)record.value();
  if (value.getStruct(after) != null) {
    assertThat(value.getStruct(after).getString(bb)).isEqualTo(tes);
  }
  TestHelper.execute(UPDATE s2.a SET aa=2, bb='hello' WHERE pk=2;);
  actualRecords=consumeRecordsByTopic(1);
  assertThat(actualRecords.topics().size()).isEqualTo(1);
  recordsForTopicS2=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(recordsForTopicS2.size()).isEqualTo(1);
  record=recordsForTopicS2.remove(0);
  VerifyRecord.isValidUpdate(record,PK_FIELD,2);
  value=(Struct)record.value();
  if (value.getStruct(before) != null && value.getStruct(before).getString(bb) != null) {
    assertThat(value.getStruct(before).getString(bb)).isEqualTo(tes);
  }
  if (value.getStruct(after) != null) {
    assertThat(value.getStruct(after).getString(bb)).isEqualTo(hel);
  }
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",2237
771,"'-tryline","@Test @FixFor(DBZ-1292) @SkipWhenKafkaVersion(check=EqualityCheck.EQUAL,value=KafkaVersion.KAFKA_1XX,description=Not compatible with Kafka 1.x) public void shouldOutputRecordsInCloudEventsFormat() throws Exception {
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL.getValue()).with(CommonConnectorConfig.PROVIDE_TRANSACTION_METADATA,true).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE);
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted();
  SourceRecords snapshotRecords=consumeRecordsByTopic(2);
  List<SourceRecord> snapshot=snapshotRecords.allRecordsInOrder();
  for (  SourceRecord record : snapshot) {
    CloudEventsConverterTest.shouldConvertToCloudEventsInJson(record,false);
    CloudEventsConverterTest.shouldConvertToCloudEventsInJsonWithDataAsAvro(record,false);
    CloudEventsConverterTest.shouldConvertToCloudEventsInAvro(record,postgresql,test_server,false);
  }
  waitForStreamingRunning();
  TestHelper.execute(INSERT_STMT);
  Testing.Print.enable();
  final List<SourceRecord> streaming=new ArrayList<SourceRecord>();
  Awaitility.await().atMost(TestHelper.waitTimeForRecords(),TimeUnit.SECONDS).until(() -> {
    final SourceRecords streamingRecords=consumeRecordsByTopic(2);
    final SourceRecord second=streamingRecords.allRecordsInOrder().get(1);
    if (!second.topic().endsWith(.transaction)) {
      streaming.add(second);
      return true;
    }
    return false;
  }
);
  SourceRecords streamingRecords=consumeRecordsByTopic(2);
  streaming.add(streamingRecords.allRecordsInOrder().get(0));
  for (  SourceRecord record : streaming) {
    CloudEventsConverterTest.shouldConvertToCloudEventsInJson(record,true);
    CloudEventsConverterTest.shouldConvertToCloudEventsInJsonWithDataAsAvro(record,true);
    CloudEventsConverterTest.shouldConvertToCloudEventsInAvro(record,postgresql,test_server,true);
  }
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",2295
772,"'-tryline","@Test @FixFor(DBZ-1813) @SkipWhenDecoderPluginNameIsNot(value=SkipWhenDecoderPluginNameIsNot.DecoderPluginName.PGOUTPUT,reason=Publication configuration only valid for PGOUTPUT decoder) public void shouldConfigureSubscriptionsForAllTablesByDefault() throws Exception {
  final LogInterceptor logInterceptor=new LogInterceptor();
  TestHelper.dropAllSchemas();
  TestHelper.dropPublication(cdc);
  TestHelper.executeDDL(postgres_create_tables.ddl);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.PUBLICATION_NAME,cdc);
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  waitForAvailableRecords(100,TimeUnit.MILLISECONDS);
  stopConnector(value -> assertTrue(logInterceptor.containsMessage(Creating Publication with statement 'CREATE PUBLICATION cdc FOR ALL TABLES;') && logInterceptor.containsMessage(Creating new publication 'cdc' for plugin 'PGOUTPUT')));
  assertTrue(TestHelper.publicationExists(cdc));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",2349
773,"'-tryline","@Test @FixFor(DBZ-1813) @SkipWhenDecoderPluginNameIsNot(value=SkipWhenDecoderPluginNameIsNot.DecoderPluginName.PGOUTPUT,reason=Publication configuration only valid for PGOUTPUT decoder) public void shouldConfigureSubscriptionsFromTableFilters() throws Exception {
  final LogInterceptor logInterceptor=new LogInterceptor();
  TestHelper.dropAllSchemas();
  TestHelper.dropPublication(cdc);
  TestHelper.executeDDL(postgres_create_tables.ddl);
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.PUBLICATION_NAME,cdc).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,public.numeric_table,public.text_table,s1.a,s2.a).with(PostgresConnectorConfig.PUBLICATION_AUTOCREATE_MODE,PostgresConnectorConfig.AutoCreateMode.FILTERED.getValue());
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  waitForAvailableRecords(100,TimeUnit.MILLISECONDS);
  assertRecordsFromSnapshot(2,1,1);
  TestHelper.execute(INSERT_STMT);
  assertRecordsAfterInsert(2,2,2);
  stopConnector(value -> {
    assertTrue(logInterceptor.containsMessage(Creating Publication with statement 'CREATE PUBLICATION cdc FOR TABLE \public\.\numeric_table\, \public\.\text_table\, \s1\.\a\, \s2\.\a\;'));
    assertTrue(logInterceptor.containsMessage(Creating new publication 'cdc' for plugin 'PGOUTPUT'));
  }
);
  assertTrue(TestHelper.publicationExists(cdc));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",2373
774,"'-tryline","@Test @FixFor(DBZ-1813) @SkipWhenDecoderPluginNameIsNot(value=SkipWhenDecoderPluginNameIsNot.DecoderPluginName.PGOUTPUT,reason=Publication configuration only valid for PGOUTPUT decoder) public void shouldThrowWhenAutocreationIsDisabled() throws Exception {
  TestHelper.dropAllSchemas();
  TestHelper.dropPublication(cdc);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.SLOT_NAME,cdc).with(PostgresConnectorConfig.PUBLICATION_AUTOCREATE_MODE,PostgresConnectorConfig.AutoCreateMode.DISABLED.getValue());
  DebeziumEngine.CompletionCallback cb=(  boolean success,  String message,  Throwable error) -> {
    assertEquals(error.getClass(),ConnectException.class);
    assertEquals(error.getMessage(),Publication autocreation is disabled, please create one and restart the connector.);
  }
;
  start(PostgresConnector.class,configBuilder.build(),cb);
  waitForAvailableRecords(100,TimeUnit.MILLISECONDS);
  stopConnector();
  assertFalse(TestHelper.publicationExists(cdc));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",2410
775,"'-tryline","@Test @FixFor(DBZ-1813) @SkipWhenDecoderPluginNameIsNot(value=SkipWhenDecoderPluginNameIsNot.DecoderPluginName.PGOUTPUT,reason=Publication configuration only valid for PGOUTPUT decoder) public void shouldProduceMessagesOnlyForConfiguredTables() throws Exception {
  TestHelper.dropAllSchemas();
  TestHelper.dropPublication(cdc);
  TestHelper.executeDDL(postgres_create_tables.ddl);
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.PUBLICATION_NAME,cdc).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,s2.a).with(PostgresConnectorConfig.PUBLICATION_AUTOCREATE_MODE,PostgresConnectorConfig.AutoCreateMode.FILTERED.getValue());
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted();
  consumeRecordsByTopic(1);
  TestHelper.execute(INSERT_STMT);
  SourceRecords actualRecords=consumeRecordsByTopic(1);
  assertThat(actualRecords.topics()).hasSize(1);
  List<SourceRecord> s1recs=actualRecords.recordsForTopic(topicName(s1.a));
  List<SourceRecord> s2recs=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(s1recs).isNull();
  assertThat(s2recs).hasSize(1);
  VerifyRecord.isValidInsert(s2recs.get(0),PK_FIELD,2);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",2433
776,"'-tryline","@Test @FixFor(DBZ-2885) @SkipWhenDecoderPluginNameIsNot(value=SkipWhenDecoderPluginNameIsNot.DecoderPluginName.PGOUTPUT,reason=Publication configuration only valid for PGOUTPUT decoder) public void shouldThrowWhenTableFiltersIsEmpty() throws Exception {
  final LogInterceptor logInterceptor=new LogInterceptor();
  TestHelper.dropAllSchemas();
  TestHelper.dropPublication(cdc);
  TestHelper.executeDDL(postgres_create_tables.ddl);
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.PUBLICATION_NAME,cdc).with(PostgresConnectorConfig.PUBLICATION_AUTOCREATE_MODE,PostgresConnectorConfig.AutoCreateMode.FILTERED.getValue()).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,nonexistent.table);
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorNotRunning();
  assertTrue(logInterceptor.containsStacktraceElement(No table filters found for filtered publication cdc));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",2469
777,"'-tryline","@Test @FixFor(DBZ-519) public void shouldNotThrowNullPointerExceptionDuringCommit() throws Exception {
  PostgresConnectorTask postgresConnectorTask=new PostgresConnectorTask();
  postgresConnectorTask.commit();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorTaskIT.java",25
778,"'-tryline","@Test(expected=ConnectException.class) @FixFor(DBZ-1426) public void retryOnFailureToCreateConnection() throws Exception {
  PostgresConnectorTask postgresConnectorTask=new PostgresConnectorTask();
  PostgresConnectorConfig config=new PostgresConnectorConfig(TestHelper.defaultConfig().build());
  long startTime=System.currentTimeMillis();
  postgresConnectorTask.createReplicationConnection(new FakeContext(config,new PostgresSchema(config,null,Charset.forName(UTF-8),PostgresTopicSelector.create(config))),true,true,3,Duration.ofSeconds(2));
  long endTime=System.currentTimeMillis();
  long timeElapsed=endTime - startTime;
  Assert.assertTrue(timeElapsed > 5);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorTaskIT.java",43
779,"'-tryline","@Before public void before() throws Exception {
  TestHelper.dropDefaultReplicationSlot();
  TestHelper.dropAllSchemas();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresMetricsIT.java",43
780,"'-tryline","@After public void after() throws Exception {
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresMetricsIT.java",49
781,"'-tryline","@Test public void testLifecycle() throws Exception {
  start(PostgresConnector.class,TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.ALWAYS).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).build());
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted();
  waitForStreamingToStart();
  stopConnector();
  final MBeanServer mBeanServer=ManagementFactory.getPlatformMBeanServer();
  try {
    mBeanServer.getMBeanInfo(getSnapshotMetricsObjectName());
    Assert.fail(Expected Snapshot Metrics no longer to exist);
  }
 catch (  InstanceNotFoundException e) {
  }
  try {
    mBeanServer.getMBeanInfo(getStreamingMetricsObjectName());
    Assert.fail(Expected Streaming Metrics no longer to exist);
  }
 catch (  InstanceNotFoundException e) {
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresMetricsIT.java",54
782,"'-tryline","@Test public void testSnapshotOnlyMetrics() throws Exception {
  TestHelper.execute(INIT_STATEMENTS,INSERT_STATEMENTS);
  start(PostgresConnector.class,TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL_ONLY).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).build());
  assertSnapshotMetrics();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresMetricsIT.java",92
783,"'-tryline","@Test public void testSnapshotAndStreamingMetrics() throws Exception {
  TestHelper.execute(INIT_STATEMENTS,INSERT_STATEMENTS);
  start(PostgresConnector.class,TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.ALWAYS).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).build());
  assertSnapshotMetrics();
  assertStreamingMetrics();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresMetricsIT.java",107
784,"'-tryline","@Test public void testStreamingOnlyMetrics() throws Exception {
  final MBeanServer mBeanServer=ManagementFactory.getPlatformMBeanServer();
  TestHelper.execute(INIT_STATEMENTS);
  start(PostgresConnector.class,TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).build());
  assertSnapshotNotExecutedMetrics();
  assertStreamingMetrics();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresMetricsIT.java",123
785,"'-tryline","private void assertSnapshotMetrics() throws Exception {
  final MBeanServer mBeanServer=ManagementFactory.getPlatformMBeanServer();
  waitForSnapshotToBeCompleted();
  Assertions.assertThat(mBeanServer.getAttribute(getSnapshotMetricsObjectName(),TotalTableCount)).isEqualTo(1);
  Assertions.assertThat(mBeanServer.getAttribute(getSnapshotMetricsObjectName(),MonitoredTables)).isEqualTo(new String[]{public.simple});
  Assertions.assertThat(mBeanServer.getAttribute(getSnapshotMetricsObjectName(),TotalNumberOfEventsSeen)).isEqualTo(2L);
  Assertions.assertThat(mBeanServer.getAttribute(getSnapshotMetricsObjectName(),RemainingTableCount)).isEqualTo(0);
  Assertions.assertThat(mBeanServer.getAttribute(getSnapshotMetricsObjectName(),SnapshotRunning)).isEqualTo(false);
  Assertions.assertThat(mBeanServer.getAttribute(getSnapshotMetricsObjectName(),SnapshotAborted)).isEqualTo(false);
  Assertions.assertThat(mBeanServer.getAttribute(getSnapshotMetricsObjectName(),SnapshotCompleted)).isEqualTo(true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresMetricsIT.java",141
786,"'-tryline","private void assertSnapshotNotExecutedMetrics() throws Exception {
  final MBeanServer mBeanServer=ManagementFactory.getPlatformMBeanServer();
  Awaitility.await(Waiting for snapshot metrics to appear).atMost(TestHelper.waitTimeForRecords(),TimeUnit.SECONDS).until(() -> {
    try {
      mBeanServer.getObjectInstance(getSnapshotMetricsObjectName());
      return true;
    }
 catch (    InstanceNotFoundException e) {
      return false;
    }
  }
);
  Assertions.assertThat(mBeanServer.getAttribute(getSnapshotMetricsObjectName(),TotalTableCount)).isEqualTo(0);
  Assertions.assertThat(mBeanServer.getAttribute(getSnapshotMetricsObjectName(),MonitoredTables)).isEqualTo(new String[]{});
  Assertions.assertThat(mBeanServer.getAttribute(getSnapshotMetricsObjectName(),TotalNumberOfEventsSeen)).isEqualTo(0L);
  Assertions.assertThat(mBeanServer.getAttribute(getSnapshotMetricsObjectName(),RemainingTableCount)).isEqualTo(0);
  Assertions.assertThat(mBeanServer.getAttribute(getSnapshotMetricsObjectName(),SnapshotRunning)).isEqualTo(false);
  Assertions.assertThat(mBeanServer.getAttribute(getSnapshotMetricsObjectName(),SnapshotAborted)).isEqualTo(false);
  Assertions.assertThat(mBeanServer.getAttribute(getSnapshotMetricsObjectName(),SnapshotCompleted)).isEqualTo(false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresMetricsIT.java",157
787,"'-tryline","private void assertStreamingMetrics() throws Exception {
  final MBeanServer mBeanServer=ManagementFactory.getPlatformMBeanServer();
  TestConsumer consumer=testConsumer(2,public);
  waitForStreamingToStart();
  TestHelper.execute(INSERT_STATEMENTS);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  Thread.sleep(Duration.ofSeconds(2).toMillis());
  Testing.print(****ASSERTIONS****);
  Assertions.assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(),Connected)).isEqualTo(true);
  Assertions.assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(),TotalNumberOfEventsSeen)).isEqualTo(2L);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresMetricsIT.java",180
788,"'-tryline","@Test public void twoRecordsInQueue() throws Exception {
  final MBeanServer mBeanServer=ManagementFactory.getPlatformMBeanServer();
  TestHelper.execute(INIT_STATEMENTS,INSERT_STATEMENTS);
  final CountDownLatch step1=new CountDownLatch(1);
  final CountDownLatch step2=new CountDownLatch(1);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).with(PostgresConnectorConfig.MAX_QUEUE_SIZE,10).with(PostgresConnectorConfig.MAX_BATCH_SIZE,1).with(PostgresConnectorConfig.POLL_INTERVAL_MS,100L).with(PostgresConnectorConfig.MAX_QUEUE_SIZE_IN_BYTES,10000L);
  start(PostgresConnector.class,configBuilder.build(),loggingCompletion(),null,x -> {
    LOGGER.info(Record '{}' arrived,x);
    step1.countDown();
    try {
      step2.await(TestHelper.waitTimeForRecords() * 5,TimeUnit.SECONDS);
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
    LOGGER.info(Record processing completed);
  }
);
  waitForStreamingToStart();
  TestHelper.execute(INSERT_STATEMENTS);
  LOGGER.info(Waiting for the first record to arrive);
  step1.await(TestHelper.waitTimeForRecords() * 5,TimeUnit.SECONDS);
  LOGGER.info(First record arrived);
  Awaitility.await().alias(MBean attribute was not an expected value).pollInterval(100,TimeUnit.MILLISECONDS).atMost(TestHelper.waitTimeForRecords() * 5,TimeUnit.SECONDS).ignoreException(InstanceNotFoundException.class).until(() -> {
    long value=(long)mBeanServer.getAttribute(getStreamingMetricsObjectName(),CurrentQueueSizeInBytes);
    return value > 0;
  }
);
  Assertions.assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(),CurrentQueueSizeInBytes)).isNotEqualTo(0L);
  LOGGER.info(Wait for the queue to contain second record);
  Awaitility.await().alias(MBean attribute was not an expected value).pollInterval(100,TimeUnit.MILLISECONDS).atMost(TestHelper.waitTimeForRecords() * 5,TimeUnit.SECONDS).ignoreException(InstanceNotFoundException.class).until(() -> {
    int value=(int)mBeanServer.getAttribute(getStreamingMetricsObjectName(),QueueRemainingCapacity);
    return value == 9;
  }
);
  LOGGER.info(Wait for second record to be in queue);
  Assertions.assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(),QueueRemainingCapacity)).isEqualTo(9);
  LOGGER.info(Empty queue);
  step2.countDown();
  LOGGER.info(Wait for queue to be empty);
  Awaitility.await().alias(MBean attribute was not an expected value).pollInterval(100,TimeUnit.MILLISECONDS).atMost(TestHelper.waitTimeForRecords() * 5,TimeUnit.SECONDS).ignoreException(InstanceNotFoundException.class).until(() -> {
    long value=(long)mBeanServer.getAttribute(getStreamingMetricsObjectName(),CurrentQueueSizeInBytes);
    return value == 0;
  }
);
  Assertions.assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(),CurrentQueueSizeInBytes)).isEqualTo(0L);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresMetricsIT.java",200
789,"'-tryline","@Test public void oneRecordInQueue() throws Exception {
  final MBeanServer mBeanServer=ManagementFactory.getPlatformMBeanServer();
  TestHelper.execute(INIT_STATEMENTS,INSERT_STATEMENTS);
  final int recordCount=2;
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).with(PostgresConnectorConfig.MAX_QUEUE_SIZE,10).with(PostgresConnectorConfig.MAX_BATCH_SIZE,1).with(PostgresConnectorConfig.POLL_INTERVAL_MS,5000L).with(PostgresConnectorConfig.MAX_QUEUE_SIZE_IN_BYTES,10L);
  start(PostgresConnector.class,configBuilder.build());
  waitForStreamingToStart();
  for (int i=0; i < recordCount - 1; i++) {
    TestHelper.execute(INSERT_STATEMENTS);
  }
  Awaitility.await().alias(MBean attribute was not an expected value).pollInterval(100,TimeUnit.MILLISECONDS).atMost(TestHelper.waitTimeForRecords() * 5,TimeUnit.SECONDS).ignoreException(InstanceNotFoundException.class).until(() -> {
    long value=(long)mBeanServer.getAttribute(getStreamingMetricsObjectName(),CurrentQueueSizeInBytes);
    return value > 0;
  }
);
  Assertions.assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(),CurrentQueueSizeInBytes)).isNotEqualTo(0L);
  Awaitility.await().alias(MBean attribute was not an expected value).pollInterval(100,TimeUnit.MILLISECONDS).atMost(TestHelper.waitTimeForRecords() * 5,TimeUnit.SECONDS).ignoreException(InstanceNotFoundException.class).until(() -> {
    int value=(int)mBeanServer.getAttribute(getStreamingMetricsObjectName(),QueueRemainingCapacity);
    return value == 9;
  }
);
  Assertions.assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(),QueueRemainingCapacity)).isEqualTo(9);
  SourceRecords records=consumeRecordsByTopic(recordCount);
  Assertions.assertThat(mBeanServer.getAttribute(getStreamingMetricsObjectName(),CurrentQueueSizeInBytes)).isEqualTo(0L);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresMetricsIT.java",276
790,"'-tryline","@Test public void shouldLoadSchemaForBuiltinPostgresTypes() throws Exception {
  TestHelper.executeDDL(postgres_create_tables.ddl);
  PostgresConnectorConfig config=new PostgresConnectorConfig(TestHelper.defaultConfig().build());
  schema=TestHelper.getSchema(config);
  try (PostgresConnection connection=TestHelper.createWithTypeRegistry()){
    schema.refresh(connection,false);
    assertTablesIncluded(TEST_TABLES);
    Arrays.stream(TEST_TABLES).forEach(tableId -> assertKeySchema(tableId,pk,Schema.INT32_SCHEMA));
    assertTableSchema(public.numeric_table,si, i, bi, r, db, ss, bs, b,Schema.OPTIONAL_INT16_SCHEMA,Schema.OPTIONAL_INT32_SCHEMA,Schema.OPTIONAL_INT64_SCHEMA,Schema.OPTIONAL_FLOAT32_SCHEMA,Schema.OPTIONAL_FLOAT64_SCHEMA,Schema.INT16_SCHEMA,Schema.INT64_SCHEMA,Schema.OPTIONAL_BOOLEAN_SCHEMA);
    assertTableSchema(public.numeric_decimal_table,d, dzs, dvs, n, nzs, nvs,Decimal.builder(2).parameter(TestHelper.PRECISION_PARAMETER_KEY,3).optional().build(),Decimal.builder(0).parameter(TestHelper.PRECISION_PARAMETER_KEY,4).optional().build(),VariableScaleDecimal.builder().optional().build(),Decimal.builder(4).parameter(TestHelper.PRECISION_PARAMETER_KEY,6).optional().build(),Decimal.builder(0).parameter(TestHelper.PRECISION_PARAMETER_KEY,4).optional().build(),VariableScaleDecimal.builder().optional().build());
    assertTableSchema(public.string_table,vc, vcv, ch, c, t, ct,Schema.OPTIONAL_STRING_SCHEMA,Schema.OPTIONAL_STRING_SCHEMA,Schema.OPTIONAL_STRING_SCHEMA,Schema.OPTIONAL_STRING_SCHEMA,Schema.OPTIONAL_STRING_SCHEMA,Schema.OPTIONAL_STRING_SCHEMA);
    assertTableSchema(public.network_address_table,i,Schema.OPTIONAL_STRING_SCHEMA);
    assertTableSchema(public.cidr_network_address_table,i,Schema.OPTIONAL_STRING_SCHEMA);
    assertTableSchema(public.macaddr_table,m,Schema.OPTIONAL_STRING_SCHEMA);
    assertTableSchema(public.cash_table,csh,Decimal.builder(2).optional().build());
    assertTableSchema(public.bitbin_table,ba, bol, bol2, bs, bs7, bv, bvl, bvunlimited1, bvunlimited2,Schema.OPTIONAL_BYTES_SCHEMA,Schema.OPTIONAL_BOOLEAN_SCHEMA,Schema.OPTIONAL_BOOLEAN_SCHEMA,Bits.builder(2).optional().build(),Bits.builder(7).optional().build(),Bits.builder(2).optional().build(),Bits.builder(64).optional().build(),Bits.builder(Integer.MAX_VALUE).optional().build(),Bits.builder(Integer.MAX_VALUE).optional().build());
    assertTableSchema(public.time_table,ts, tz, date, ti, ttz, it,MicroTimestamp.builder().optional().build(),ZonedTimestamp.builder().optional().build(),Date.builder().optional().build(),MicroTime.builder().optional().build(),ZonedTime.builder().optional().build(),MicroDuration.builder().optional().build());
    assertTableSchema(public.text_table,j, jb, x, u,Json.builder().optional().build(),Json.builder().optional().build(),Xml.builder().optional().build(),Uuid.builder().optional().build());
    assertTableSchema(public.geom_table,p,Point.builder().optional().build());
    assertTableSchema(public.range_table,unbounded_exclusive_tsrange, bounded_inclusive_tsrange, + unbounded_exclusive_tstzrange, bounded_inclusive_tstzrange, + unbounded_exclusive_daterange, bounded_exclusive_daterange, int4_number_range, numerange, int8_number_range,Schema.OPTIONAL_STRING_SCHEMA,Schema.OPTIONAL_STRING_SCHEMA,Schema.OPTIONAL_STRING_SCHEMA,Schema.OPTIONAL_STRING_SCHEMA,Schema.OPTIONAL_STRING_SCHEMA,Schema.OPTIONAL_STRING_SCHEMA,Schema.OPTIONAL_STRING_SCHEMA,Schema.OPTIONAL_STRING_SCHEMA,Schema.OPTIONAL_STRING_SCHEMA);
    assertTableSchema(public.array_table,int_array, bigint_array, text_array,SchemaBuilder.array(Schema.OPTIONAL_INT32_SCHEMA).optional().build(),SchemaBuilder.array(Schema.OPTIONAL_INT64_SCHEMA).optional().build(),SchemaBuilder.array(Schema.OPTIONAL_STRING_SCHEMA).optional().build());
    assertTableSchema(\Quoted_\\ . Schema\.\Quoted_\\ . Table\,\Quoted_\\ . Text_Column\,Schema.OPTIONAL_STRING_SCHEMA);
    assertTableSchema(public.custom_table,lt,Ltree.builder().optional().build());
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresSchemaIT.java",80
791,"'-tryline","@Test @SkipWhenDatabaseVersion(check=LESS_THAN,major=10,reason=MACADDR8 type is only supported on Postgres 10+) @FixFor(DBZ-1193) public void shouldLoadSchemaForMacaddr8PostgresType() throws Exception {
  String tableId=public.macaddr8_table;
  String ddl=CREATE TABLE macaddr8_table (pk SERIAL, m MACADDR8, PRIMARY KEY(pk));;
  TestHelper.execute(ddl);
  PostgresConnectorConfig config=new PostgresConnectorConfig(TestHelper.defaultConfig().build());
  schema=TestHelper.getSchema(config);
  try (PostgresConnection connection=TestHelper.createWithTypeRegistry()){
    schema.refresh(connection,false);
    assertTablesIncluded(tableId);
    assertKeySchema(tableId,pk,Schema.INT32_SCHEMA);
    assertTableSchema(tableId,m,Schema.OPTIONAL_STRING_SCHEMA);
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresSchemaIT.java",137
792,"'-tryline","@Test public void shouldLoadSchemaForExtensionPostgresTypes() throws Exception {
  TestHelper.executeDDL(postgres_create_tables.ddl);
  PostgresConnectorConfig config=new PostgresConnectorConfig(TestHelper.defaultConfig().with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true).build());
  schema=TestHelper.getSchema(config);
  try (PostgresConnection connection=TestHelper.createWithTypeRegistry()){
    schema.refresh(connection,false);
    assertTablesIncluded(TEST_TABLES);
    assertTableSchema(public.custom_table,lt,Ltree.builder().optional().build());
    assertTableSchema(public.custom_table,i,Schema.BYTES_SCHEMA);
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresSchemaIT.java",156
793,"'-tryline","@Test public void shouldLoadSchemaForPostgisTypes() throws Exception {
  TestHelper.executeDDL(init_postgis.ddl);
  TestHelper.executeDDL(postgis_create_tables.ddl);
  PostgresConnectorConfig config=new PostgresConnectorConfig(TestHelper.defaultConfig().build());
  schema=TestHelper.getSchema(config);
  try (PostgresConnection connection=TestHelper.createWithTypeRegistry()){
    schema.refresh(connection,false);
    final String[] testTables=new String[]{public.postgis_table};
    assertTablesIncluded(testTables);
    Arrays.stream(testTables).forEach(tableId -> assertKeySchema(tableId,pk,Schema.INT32_SCHEMA));
    assertTableSchema(public.postgis_table,p, ml,Geometry.builder().optional().build(),Geography.builder().optional().build());
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresSchemaIT.java",172
794,"'-tryline","@Test public void shouldApplyFilters() throws Exception {
  String statements=CREATE SCHEMA s1;  + CREATE SCHEMA s2;  + DROP TABLE IF EXISTS s1.A;+ DROP TABLE IF EXISTS s1.B;+ DROP TABLE IF EXISTS s2.A;+ DROP TABLE IF EXISTS s2.B;+ CREATE TABLE s1.A (pk SERIAL, aa integer, PRIMARY KEY(pk));+ CREATE TABLE s1.B (pk SERIAL, ba integer, PRIMARY KEY(pk));+ CREATE TABLE s2.A (pk SERIAL, aa integer, PRIMARY KEY(pk));+ CREATE TABLE s2.B (pk SERIAL, ba integer, PRIMARY KEY(pk));;
  TestHelper.execute(statements);
  PostgresConnectorConfig config=new PostgresConnectorConfig(TestHelper.defaultConfig().with(SCHEMA_EXCLUDE_LIST,s1).build());
  final TypeRegistry typeRegistry=TestHelper.getTypeRegistry();
  schema=TestHelper.getSchema(config,typeRegistry);
  try (PostgresConnection connection=TestHelper.createWithTypeRegistry()){
    schema.refresh(connection,false);
    assertTablesIncluded(s2.a,s2.b);
    assertTablesExcluded(s1.a,s1.b);
  }
   config=new PostgresConnectorConfig(TestHelper.defaultConfig().with(SCHEMA_BLACKLIST,s1).build());
  schema=TestHelper.getSchema(config,typeRegistry);
  try (PostgresConnection connection=TestHelper.createWithTypeRegistry()){
    schema.refresh(connection,false);
    assertTablesIncluded(s2.a,s2.b);
    assertTablesExcluded(s1.a,s1.b);
  }
   config=new PostgresConnectorConfig(TestHelper.defaultConfig().with(SCHEMA_EXCLUDE_LIST,s.*).build());
  schema=TestHelper.getSchema(config,typeRegistry);
  try (PostgresConnection connection=TestHelper.create()){
    schema.refresh(connection,false);
    assertTablesExcluded(s1.a,s2.a,s1.b,s2.b);
  }
   config=new PostgresConnectorConfig(TestHelper.defaultConfig().with(SCHEMA_BLACKLIST,s.*).build());
  schema=TestHelper.getSchema(config,typeRegistry);
  try (PostgresConnection connection=TestHelper.create()){
    schema.refresh(connection,false);
    assertTablesExcluded(s1.a,s2.a,s1.b,s2.b);
  }
   config=new PostgresConnectorConfig(TestHelper.defaultConfig().with(PostgresConnectorConfig.TABLE_EXCLUDE_LIST,s1.A,s2.A).build());
  schema=TestHelper.getSchema(config,typeRegistry);
  try (PostgresConnection connection=TestHelper.createWithTypeRegistry()){
    schema.refresh(connection,false);
    assertTablesIncluded(s1.b,s2.b);
    assertTablesExcluded(s1.a,s2.a);
  }
   config=new PostgresConnectorConfig(TestHelper.defaultConfig().with(PostgresConnectorConfig.TABLE_BLACKLIST,s1.A,s2.A).build());
  schema=TestHelper.getSchema(config,typeRegistry);
  try (PostgresConnection connection=TestHelper.createWithTypeRegistry()){
    schema.refresh(connection,false);
    assertTablesIncluded(s1.b,s2.b);
    assertTablesExcluded(s1.a,s2.a);
  }
   config=new PostgresConnectorConfig(TestHelper.defaultConfig().with(SCHEMA_EXCLUDE_LIST,s2).with(PostgresConnectorConfig.TABLE_EXCLUDE_LIST,s1.A).build());
  schema=TestHelper.getSchema(config,typeRegistry);
  try (PostgresConnection connection=TestHelper.createWithTypeRegistry()){
    schema.refresh(connection,false);
    assertTablesIncluded(s1.b);
    assertTablesExcluded(s1.a,s2.a,s2.b);
  }
   config=new PostgresConnectorConfig(TestHelper.defaultConfig().with(SCHEMA_BLACKLIST,s2).with(PostgresConnectorConfig.TABLE_BLACKLIST,s1.A).build());
  schema=TestHelper.getSchema(config,typeRegistry);
  try (PostgresConnection connection=TestHelper.createWithTypeRegistry()){
    schema.refresh(connection,false);
    assertTablesIncluded(s1.b);
    assertTablesExcluded(s1.a,s2.a,s2.b);
  }
   config=new PostgresConnectorConfig(TestHelper.defaultConfig().with(PostgresConnectorConfig.COLUMN_EXCLUDE_LIST,.*aa).build());
  schema=TestHelper.getSchema(config,typeRegistry);
  try (PostgresConnection connection=TestHelper.createWithTypeRegistry()){
    schema.refresh(connection,false);
    assertColumnsExcluded(s1.a.aa,s2.a.aa);
  }
   config=new PostgresConnectorConfig(TestHelper.defaultConfig().with(PostgresConnectorConfig.COLUMN_BLACKLIST,.*aa).build());
  schema=TestHelper.getSchema(config,typeRegistry);
  try (PostgresConnection connection=TestHelper.createWithTypeRegistry()){
    schema.refresh(connection,false);
    assertColumnsExcluded(s1.a.aa,s2.a.aa);
  }
   config=new PostgresConnectorConfig(TestHelper.defaultConfig().with(PostgresConnectorConfig.COLUMN_INCLUDE_LIST,.*bb).build());
  schema=TestHelper.getSchema(config,typeRegistry);
  try (PostgresConnection connection=TestHelper.createWithTypeRegistry()){
    schema.refresh(connection,false);
    assertColumnsExcluded(s1.a.aa,s2.a.aa);
  }
   config=new PostgresConnectorConfig(TestHelper.defaultConfig().with(PostgresConnectorConfig.COLUMN_WHITELIST,.*bb).build());
  schema=TestHelper.getSchema(config,typeRegistry);
  try (PostgresConnection connection=TestHelper.createWithTypeRegistry()){
    schema.refresh(connection,false);
    assertColumnsExcluded(s1.a.aa,s2.a.aa);
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresSchemaIT.java",190
795,"'-tryline","@Test public void shouldDetectNewChangesAfterRefreshing() throws Exception {
  String statements=CREATE SCHEMA IF NOT EXISTS public; + DROP TABLE IF EXISTS table1; + CREATE TABLE table1 (pk SERIAL,  PRIMARY KEY(pk));;
  TestHelper.execute(statements);
  PostgresConnectorConfig config=new PostgresConnectorConfig(TestHelper.defaultConfig().build());
  schema=TestHelper.getSchema(config);
  try (PostgresConnection connection=TestHelper.createWithTypeRegistry()){
    schema.refresh(connection,false);
    assertTablesIncluded(public.table1);
  }
   statements=DROP TABLE IF EXISTS table1; + DROP TABLE IF EXISTS table2; + CREATE TABLE table2 (pk SERIAL, strcol VARCHAR, PRIMARY KEY(pk));;
  TestHelper.execute(statements);
  String tableId=public.table2;
  try (PostgresConnection connection=TestHelper.createWithTypeRegistry()){
    schema.refresh(connection,false);
    assertTablesIncluded(tableId);
    assertTablesExcluded(public.table1);
    assertTableSchema(tableId,strcol,Schema.OPTIONAL_STRING_SCHEMA);
  }
   statements=ALTER TABLE table2 ADD COLUMN vc VARCHAR(2); + ALTER TABLE table2 ADD COLUMN si SMALLINT; + ALTER TABLE table2 DROP COLUMN strcol;;
  TestHelper.execute(statements);
  try (PostgresConnection connection=TestHelper.createWithTypeRegistry()){
    schema.refresh(connection,TableId.parse(tableId,false),false);
    assertTablesIncluded(tableId);
    assertTablesExcluded(public.table1);
    assertTableSchema(tableId,vc, si,Schema.OPTIONAL_STRING_SCHEMA,Schema.OPTIONAL_INT16_SCHEMA);
    assertColumnsExcluded(tableId + .strcol);
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresSchemaIT.java",305
796,"'-tryline","@Test public void shouldPopulateToastableColumnsCache() throws Exception {
  String statements=CREATE SCHEMA IF NOT EXISTS public; + DROP TABLE IF EXISTS table1; + CREATE TABLE table1 (pk SERIAL,  toasted text, untoasted int, PRIMARY KEY(pk));;
  TestHelper.execute(statements);
  PostgresConnectorConfig config=new PostgresConnectorConfig(TestHelper.defaultConfig().build());
  schema=TestHelper.getSchema(config);
  TableId tableId=TableId.parse(public.table1,false);
  assertTrue(schema.getToastableColumnsForTableId(tableId).isEmpty());
  try (PostgresConnection connection=TestHelper.createWithTypeRegistry()){
    schema.refresh(connection,false);
    assertTrue(schema.getToastableColumnsForTableId(tableId).isEmpty());
    schema.refresh(connection,tableId,false);
    assertTrue(schema.getToastableColumnsForTableId(tableId).isEmpty());
    schema.refresh(connection,tableId,true);
    assertThat(schema.getToastableColumnsForTableId(tableId)).containsOnly(toasted);
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresSchemaIT.java",344
797,"'-tryline","@Test @FixFor(DBZ-2617) public void shouldStopOnPostgresFastShutdown() throws Exception {
  TestHelper.execute(SETUP_TABLES_STMT);
  final int recordCount=100;
  for (int i=0; i < recordCount - 1; i++) {
    TestHelper.execute(INSERT_STMT);
  }
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(CommonConnectorConfig.DATABASE_CONFIG_PREFIX + JdbcConfiguration.PORT,postgresContainer.getMappedPort(5432)).with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.ALWAYS.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,false).with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST,s1).with(Heartbeat.HEARTBEAT_INTERVAL,500).with(DatabaseHeartbeatImpl.HEARTBEAT_ACTION_QUERY,UPDATE s1.heartbeat SET ts=NOW(););
  Testing.Print.enable();
  PostgresConnection postgresConnection=TestHelper.create();
  String initialHeartbeat=postgresConnection.queryAndMap(SELECT ts FROM s1.heartbeat;,postgresConnection.singleResultMapper(rs -> rs.getString(ts),Could not fetch keepalive info));
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(postgres,TestHelper.TEST_SERVER);
  waitForStreamingRunning(postgres,TestHelper.TEST_SERVER);
  logger.info(Waiting for heartbeats...);
  Awaitility.await().pollInterval(250,TimeUnit.MILLISECONDS).atMost(5 * TestHelper.waitTimeForRecords(),TimeUnit.SECONDS).until(() -> !initialHeartbeat.equals(postgresConnection.queryAndMap(SELECT ts FROM s1.heartbeat;,postgresConnection.singleResultMapper(rs -> rs.getString(ts),Could not fetch keepalive info))));
  logger.info(INTIAL Heartbeat:  + initialHeartbeat +  ; CURRENT heartbeat: + postgresConnection.queryAndMap(SELECT ts FROM s1.heartbeat;,postgresConnection.singleResultMapper(rs -> rs.getString(ts),Could not fetch keepalive info)));
  logger.info(Execute Postgres shutdown...);
  Container.ExecResult result=postgresContainer.execInContainer(su,-,postgres,-c,/usr/lib/postgresql/11/bin/pg_ctl -m fast -D /var/lib/postgresql/data stop);
  logger.info(result.toString());
  logger.info(Waiting for Postgres to shut down...);
  waitForPostgresShutdown();
  logger.info(Waiting for connector to shut down...);
  waitForConnectorShutdown(postgres,TestHelper.TEST_SERVER);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresShutdownIT.java",96
798,"'-tryline","@Before public void before() throws Exception {
  try (PostgresConnection conn=TestHelper.create()){
    conn.dropReplicationSlot(ReplicationConnection.Builder.DEFAULT_SLOT_NAME);
  }
   TestHelper.dropAllSchemas();
  TestHelper.execute(DROP SCHEMA IF EXISTS postgis CASCADE;,CREATE EXTENSION IF NOT EXISTS postgis SCHEMA public;,CREATE TABLE public.postgis_table (pk SERIAL, p GEOMETRY(POINT,3187), ml GEOGRAPHY(MULTILINESTRING), PRIMARY KEY(pk));,CREATE TABLE public.postgis_array_table (pk SERIAL, ga GEOMETRY[], gann GEOMETRY[] NOT NULL, PRIMARY KEY(pk));,CREATE TABLE public.dummy_table (pk SERIAL, PRIMARY KEY(pk)););
  setupRecordsProducer(TestHelper.defaultConfig());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PublicGeometryIT.java",49
799,"'-tryline","@Test(timeout=30000) @FixFor(DBZ-1144) public void shouldReceiveChangesForInsertsWithPostgisTypes() throws Exception {
  consumer=testConsumer(1,public);
  waitForStreamingToStart();
  TestHelper.execute(INSERT INTO public.dummy_table DEFAULT VALUES;);
  consumer.await(TestHelper.waitTimeForRecords() * 10,TimeUnit.SECONDS);
  while (true) {
    if (!consumer.isEmpty()) {
      SourceRecord record=consumer.remove();
      if (record.topic().endsWith(.public.dummy_table)) {
        break;
      }
    }
  }
  consumer.expects(1);
  assertInsert(INSERT_POSTGIS_TYPES_IN_PUBLIC_STMT,1,schemaAndValuesForPostgisTypes());
  consumer.expects(1);
  assertInsert(INSERT_POSTGIS_ARRAY_TYPES_IN_PUBLIC_STMT,1,schemaAndValuesForPostgisArrayTypes());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PublicGeometryIT.java",65
800,"'-tryline","private void executeAndWait(String statements) throws Exception {
  TestHelper.execute(statements);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PublicGeometryIT.java",130
801,"'-tryline","@Before public void before() throws Exception {
  TestHelper.dropDefaultReplicationSlot();
  TestHelper.dropAllSchemas();
  TestHelper.executeDDL(init_postgis.ddl);
  TestHelper.executeDDL(postgres_create_tables.ddl);
  TestHelper.executeDDL(postgis_create_tables.ddl);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",66
802,"'-tryline","@Test public void shouldGenerateSnapshotsForDefaultDatatypes() throws Exception {
  String statementsBuilder=ALL_STMTS.stream().collect(Collectors.joining(; + System.lineSeparator())) + ;;
  TestHelper.execute(statementsBuilder);
  buildNoStreamProducer(TestHelper.defaultConfig());
  TestConsumer consumer=testConsumer(ALL_STMTS.size(),public,Quoted__);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  Map<String,List<SchemaAndValueField>> expectedValuesByTopicName=super.schemaAndValuesByTopicName();
  consumer.process(record -> assertReadRecord(record,expectedValuesByTopicName));
  Testing.Print.enable();
  while (!consumer.isEmpty()) {
    SourceRecord record=consumer.remove();
    assertRecordOffsetAndSnapshotSource(record,true,consumer.isEmpty());
    assertSourceInfo(record);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",75
803,"'-tryline","@Test @FixFor(DBZ-1134) public void shouldUseCustomConverter() throws Exception {
  TestHelper.execute(INSERT_CUSTOM_TYPES_STMT);
  buildNoStreamProducer(TestHelper.defaultConfig().with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true).with(converters,first).with(first.type,CustomDatatypeConverter.class.getName()).with(first.schema.name,io.debezium.postgresql.type.Isbn));
  final TestConsumer consumer=testConsumer(1,public);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  final Map<String,List<SchemaAndValueField>> expectedValuesByTopicName=Collect.hashMapOf(public.custom_table,schemasAndValuesForCustomConverterTypes());
  consumer.process(record -> assertReadRecord(record,expectedValuesByTopicName));
  waitForSnapshotToBeCompleted();
  TestHelper.execute(CREATE TABLE conv_table (pk serial, i isbn NOT NULL, PRIMARY KEY(pk)));
  TestHelper.execute(INSERT INTO conv_table VALUES (default, '978-0-393-04002-9'));
  final Map<String,List<SchemaAndValueField>> expectedValuesByTopicName2=Collect.hashMapOf(public.conv_table,Arrays.asList(new SchemaAndValueField(i,SchemaBuilder.string().name(io.debezium.postgresql.type.Isbn).build(),0-393-04002-X)));
  consumer.clear();
  consumer.expects(1);
  consumer.process(record -> assertReadRecord(record,expectedValuesByTopicName2));
  TestHelper.execute(ALTER TABLE conv_table ALTER COLUMN i TYPE varchar(32));
  TestHelper.execute(INSERT INTO conv_table VALUES (default, '978-0-393-04002-9'));
  final Map<String,List<SchemaAndValueField>> expectedValuesByTopicName3=Collect.hashMapOf(public.conv_table,Arrays.asList(new SchemaAndValueField(i,Schema.STRING_SCHEMA,0-393-04002-X)));
  consumer.clear();
  consumer.expects(1);
  consumer.process(record -> assertReadRecord(record,expectedValuesByTopicName3));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",121
804,"'-tryline","@Test public void shouldGenerateSnapshotsForCustomDatatypes() throws Exception {
  TestHelper.execute(INSERT_CUSTOM_TYPES_STMT);
  buildNoStreamProducer(TestHelper.defaultConfig().with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true));
  final TestConsumer consumer=testConsumer(1,public);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  final Map<String,List<SchemaAndValueField>> expectedValuesByTopicName=Collect.hashMapOf(public.custom_table,schemasAndValuesForCustomTypes());
  consumer.process(record -> assertReadRecord(record,expectedValuesByTopicName));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",160
805,"'-tryline","@Test public void shouldGenerateSnapshotAndContinueStreaming() throws Exception {
  TestHelper.dropAllSchemas();
  TestHelper.executeDDL(postgres_create_tables.ddl);
  String insertStmt=INSERT INTO s1.a (aa) VALUES (1); + INSERT INTO s2.a (aa) VALUES (1);;
  String statements=CREATE SCHEMA s1;  + CREATE SCHEMA s2;  + CREATE TABLE s1.a (pk SERIAL, aa integer, PRIMARY KEY(pk));+ CREATE TABLE s2.a (pk SERIAL, aa integer, PRIMARY KEY(pk));+ insertStmt;
  TestHelper.execute(statements);
  buildWithStreamProducer(TestHelper.defaultConfig());
  TestConsumer consumer=testConsumer(2,s1,s2);
  waitForSnapshotToBeCompleted();
  consumer.await(TestHelper.waitTimeForRecords(),TimeUnit.SECONDS);
  consumer.clear();
  waitForStreamingToStart();
  TestHelper.execute(insertStmt);
  consumer.expects(2);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  SourceRecord first=consumer.remove();
  VerifyRecord.isValidInsert(first,PK_FIELD,2);
  assertEquals(topicName(s1.a),first.topic());
  assertRecordOffsetAndSnapshotSource(first,false,false);
  assertSourceInfo(first,TestHelper.TEST_DATABASE,s1,a);
  SourceRecord second=consumer.remove();
  VerifyRecord.isValidInsert(second,PK_FIELD,2);
  assertEquals(topicName(s2.a),second.topic());
  assertRecordOffsetAndSnapshotSource(second,false,false);
  assertSourceInfo(second,TestHelper.TEST_DATABASE,s2,a);
  stopConnector();
  assertConnectorNotRunning();
  TestHelper.execute(insertStmt);
  int expectedRecordsCount=6;
  buildWithStreamProducer(TestHelper.defaultConfig());
  waitForSnapshotToBeCompleted();
  consumer=testConsumer(expectedRecordsCount,s1,s2);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  AtomicInteger counter=new AtomicInteger(0);
  consumer.process(record -> {
    int counterVal=counter.getAndIncrement();
    int expectedPk=(counterVal % 3) + 1;
    VerifyRecord.isValidRead(record,PK_FIELD,expectedPk);
    assertRecordOffsetAndSnapshotSource(record,true,counterVal == (expectedRecordsCount - 1));
    assertSourceInfo(record);
  }
);
  consumer.clear();
  waitForStreamingToStart();
  TestHelper.execute(insertStmt);
  consumer.expects(2);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  first=consumer.remove();
  VerifyRecord.isValidInsert(first,PK_FIELD,4);
  assertRecordOffsetAndSnapshotSource(first,false,false);
  assertSourceInfo(first,TestHelper.TEST_DATABASE,s1,a);
  second=consumer.remove();
  VerifyRecord.isValidInsert(second,PK_FIELD,4);
  assertRecordOffsetAndSnapshotSource(second,false,false);
  assertSourceInfo(second,TestHelper.TEST_DATABASE,s2,a);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",175
806,"'-tryline","@Test @FixFor(DBZ-1564) public void shouldCloseTransactionsAfterSnapshot() throws Exception {
  TestHelper.dropAllSchemas();
  TestHelper.executeDDL(postgres_create_tables.ddl);
  String insertStmt=INSERT INTO s1.a (aa) VALUES (1); + INSERT INTO s2.a (aa) VALUES (1);;
  String statements=CREATE SCHEMA s1;  + CREATE SCHEMA s2;  + CREATE TABLE s1.a (pk SERIAL, aa integer, PRIMARY KEY(pk));+ CREATE TABLE s2.a (pk SERIAL, aa integer, PRIMARY KEY(pk));+ insertStmt;
  TestHelper.execute(statements);
  buildWithStreamProducer(TestHelper.defaultConfig());
  TestConsumer consumer=testConsumer(2,s1,s2);
  waitForSnapshotToBeCompleted();
  consumer.await(TestHelper.waitTimeForRecords(),TimeUnit.SECONDS);
  consumer.clear();
  waitForStreamingToStart();
  TestHelper.assertNoOpenTransactions();
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",258
807,"'-tryline","@Test @FixFor(DBZ-859) public void shouldGenerateSnapshotAndSendHeartBeat() throws Exception {
  TestHelper.dropAllSchemas();
  TestHelper.execute(CREATE TABLE t1 (pk SERIAL, aa integer, PRIMARY KEY(pk)); INSERT INTO t1 VALUES (default, 11));
  buildWithStreamProducer(TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,PostgresConnectorConfig.SnapshotMode.INITIAL).with(PostgresConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(Heartbeat.HEARTBEAT_INTERVAL,300_000));
  TestConsumer consumer=testConsumer(2);
  consumer.await(TestHelper.waitTimeForRecords(),TimeUnit.SECONDS);
  final SourceRecord first=consumer.remove();
  VerifyRecord.isValidRead(first,PK_FIELD,1);
  assertRecordOffsetAndSnapshotSource(first,true,true);
  final SourceRecord second=consumer.remove();
  assertThat(second.topic()).startsWith(__debezium-heartbeat);
  assertRecordOffsetAndSnapshotSource(second,false,false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",291
808,"'-tryline","@Test @FixFor(DBZ-342) public void shouldGenerateSnapshotsForDefaultDatatypesAdaptiveMicroseconds() throws Exception {
  String statementsBuilder=ALL_STMTS.stream().collect(Collectors.joining(; + System.lineSeparator())) + ;;
  TestHelper.execute(statementsBuilder);
  buildNoStreamProducer(TestHelper.defaultConfig().with(PostgresConnectorConfig.TIME_PRECISION_MODE,TemporalPrecisionMode.ADAPTIVE_TIME_MICROSECONDS));
  TestConsumer consumer=testConsumer(ALL_STMTS.size(),public,Quoted__);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  Map<String,List<SchemaAndValueField>> expectedValuesByTopicName=super.schemaAndValuesByTopicNameAdaptiveTimeMicroseconds();
  consumer.process(record -> assertReadRecord(record,expectedValuesByTopicName));
  while (!consumer.isEmpty()) {
    SourceRecord record=consumer.remove();
    assertRecordOffsetAndSnapshotSource(record,true,consumer.isEmpty());
    assertSourceInfo(record);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",324
809,"'-tryline","@Test @FixFor(DBZ-606) public void shouldGenerateSnapshotsForDecimalDatatypesUsingStringEncoding() throws Exception {
  TestHelper.dropAllSchemas();
  TestHelper.executeDDL(postgres_create_tables.ddl);
  TestHelper.execute(INSERT_NUMERIC_DECIMAL_TYPES_STMT);
  buildNoStreamProducer(TestHelper.defaultConfig().with(PostgresConnectorConfig.DECIMAL_HANDLING_MODE,DecimalHandlingMode.STRING));
  TestConsumer consumer=testConsumer(1,public,Quoted__);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  Map<String,List<SchemaAndValueField>> expectedValuesByTopicName=super.schemaAndValuesByTopicNameStringEncodedDecimals();
  consumer.process(record -> assertReadRecord(record,expectedValuesByTopicName));
  while (!consumer.isEmpty()) {
    SourceRecord record=consumer.remove();
    assertRecordOffsetAndSnapshotSource(record,true,consumer.isEmpty());
    assertSourceInfo(record);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",349
810,"'-tryline","@Test @FixFor(DBZ-1118) @SkipWhenDatabaseVersion(check=LESS_THAN,major=10,reason=Database version is less than 10.0) public void shouldGenerateSnapshotsForPartitionedTables() throws Exception {
  TestHelper.dropAllSchemas();
  String ddl=CREATE TABLE first_table (pk integer, user_id integer, PRIMARY KEY(pk)); + CREATE TABLE partitioned (pk serial, user_id integer, aa integer) PARTITION BY RANGE (user_id); + CREATE TABLE partitioned_1_100 PARTITION OF partitioned + (CONSTRAINT p_1_100_pk PRIMARY KEY (pk)) + FOR VALUES FROM (1) TO (101);+ CREATE TABLE partitioned_101_200 PARTITION OF partitioned + (CONSTRAINT p_101_200_pk PRIMARY KEY (pk)) + FOR VALUES FROM (101) TO (201);;
  TestHelper.execute(ddl);
  TestHelper.execute(INSERT INTO first_table (pk, user_id) VALUES (1000, 1););
  TestHelper.execute(INSERT INTO partitioned (user_id, aa)  + SELECT RANDOM() * 99 + 1, RANDOM() * 100000  + FROM generate_series(1, 10););
  TestHelper.execute(INSERT INTO partitioned (user_id, aa)  + SELECT RANDOM() * 99 + 101, RANDOM() * 100000  + FROM generate_series(1, 20););
  buildNoStreamProducer(TestHelper.defaultConfig());
  TestConsumer consumer=testConsumer(1 + 30);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  Set<Integer> ids=new HashSet<>();
  Map<String,Integer> topicCounts=Collect.hashMapOf(test_server.public.first_table,0,test_server.public.partitioned,0,test_server.public.partitioned_1_100,0,test_server.public.partitioned_101_200,0);
  consumer.process(record -> {
    Struct key=(Struct)record.key();
    if (key != null) {
      final Integer id=key.getInt32(pk);
      Assertions.assertThat(ids).excludes(id);
      ids.add(id);
    }
    topicCounts.put(record.topic(),topicCounts.get(record.topic()) + 1);
  }
);
  assertEquals(31,ids.size());
  assertEquals(1,topicCounts.get(test_server.public.first_table).intValue());
  assertEquals(0,topicCounts.get(test_server.public.partitioned).intValue());
  assertEquals(10,topicCounts.get(test_server.public.partitioned_1_100).intValue());
  assertEquals(20,topicCounts.get(test_server.public.partitioned_101_200).intValue());
  while (!consumer.isEmpty()) {
    SourceRecord record=consumer.remove();
    assertRecordOffsetAndSnapshotSource(record,true,consumer.isEmpty());
    assertSourceInfo(record);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",377
811,"'-tryline","@Test @FixFor(DBZ-1162) public void shouldGenerateSnapshotsForHstores() throws Exception {
  TestHelper.dropAllSchemas();
  TestHelper.executeDDL(postgres_create_tables.ddl);
  TestHelper.execute(INSERT_HSTORE_TYPE_STMT);
  buildNoStreamProducer(TestHelper.defaultConfig());
  TestConsumer consumer=testConsumer(1,public,Quoted__);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  final Map<String,List<SchemaAndValueField>> expectedValuesByTopicName=Collect.hashMapOf(public.hstore_table,schemaAndValueFieldForJsonEncodedHStoreType());
  consumer.process(record -> assertReadRecord(record,expectedValuesByTopicName));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",450
812,"'-tryline","@Test @FixFor(DBZ-1163) public void shouldGenerateSnapshotForATableWithoutPrimaryKey() throws Exception {
  TestHelper.execute(insert into table_without_pk values(1, 1000));
  buildNoStreamProducer(TestHelper.defaultConfig());
  TestConsumer consumer=testConsumer(1,public,Quoted__);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  List<SchemaAndValueField> schemaAndValueFields=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,1),new SchemaAndValueField(val,Schema.OPTIONAL_INT32_SCHEMA,1000));
  consumer.process(record -> {
    assertThat(record.key()).isNull();
    String actualTopicName=record.topic().replace(TestHelper.TEST_SERVER + .,);
    assertEquals(public.table_without_pk,actualTopicName);
    assertRecordSchemaAndValues(schemaAndValueFields,record,Envelope.FieldName.AFTER);
  }
);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",471
813,"'-tryline","@Test @SkipWhenDatabaseVersion(check=LESS_THAN,major=10,reason=MACADDR8 data type is only supported since Postgres 10+) @FixFor(DBZ-1193) public void shouldGenerateSnapshotForMacaddr8Datatype() throws Exception {
  TestHelper.dropAllSchemas();
  TestHelper.execute(CREATE TABLE macaddr8_table(pk SERIAL, m MACADDR8, PRIMARY KEY(pk)););
  TestHelper.execute(INSERT_MACADDR8_TYPE_STMT);
  buildNoStreamProducer(TestHelper.defaultConfig());
  TestConsumer consumer=testConsumer(1,public);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  final Map<String,List<SchemaAndValueField>> expectedValueByTopicName=Collect.hashMapOf(public.macaddr8_table,schemaAndValueForMacaddr8Type());
  consumer.process(record -> assertReadRecord(record,expectedValueByTopicName));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",494
814,"'-tryline","@Test @FixFor(DBZ-1164) public void shouldGenerateSnapshotForTwentyFourHourTime() throws Exception {
  TestHelper.dropAllSchemas();
  TestHelper.executeDDL(postgres_create_tables.ddl);
  TestHelper.execute(INSERT_DATE_TIME_TYPES_STMT);
  buildNoStreamProducer(TestHelper.defaultConfig());
  TestConsumer consumer=testConsumer(1,public);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  final Map<String,List<SchemaAndValueField>> expectedValueByTopicName=Collect.hashMapOf(public.time_table,schemaAndValuesForDateTimeTypes());
  consumer.process(record -> assertReadRecord(record,expectedValueByTopicName));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",515
815,"'-tryline","@Test @FixFor(DBZ-1345) public void shouldNotSnapshotMaterializedViews() throws Exception {
  TestHelper.dropAllSchemas();
  TestHelper.execute(CREATE TABLE mv_real_table (pk SERIAL, i integer, s VARCHAR(50), PRIMARY KEY(pk)););
  TestHelper.execute(CREATE MATERIALIZED VIEW mv (pk, s) AS SELECT mrv.pk, mrv.s FROM mv_real_table mrv WITH DATA;);
  TestHelper.execute(INSERT INTO mv_real_table (i,s) VALUES (1,'1'););
  TestHelper.execute(REFRESH MATERIALIZED VIEW mv WITH DATA;);
  buildNoStreamProducer(TestHelper.defaultConfig());
  TestConsumer consumer=testConsumer(1,public);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  final Map<String,List<SchemaAndValueField>> expectedValueByTopicName=Collect.hashMapOf(public.mv_real_table,schemaAndValueForMaterializedViewBaseType());
  consumer.process(record -> assertReadRecord(record,expectedValueByTopicName));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",534
816,"'-tryline","@Test @FixFor(DBZ-1755) public void shouldGenerateSnapshotForPositiveMoney() throws Exception {
  TestHelper.dropAllSchemas();
  TestHelper.executeDDL(postgres_create_tables.ddl);
  TestHelper.execute(INSERT_CASH_TYPES_STMT);
  buildNoStreamProducer(TestHelper.defaultConfig());
  TestConsumer consumer=testConsumer(1,public);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  final Map<String,List<SchemaAndValueField>> expectedValueByTopicName=Collect.hashMapOf(public.cash_table,schemaAndValuesForMoneyTypes());
  consumer.process(record -> assertReadRecord(record,expectedValueByTopicName));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",554
817,"'-tryline","@Test @FixFor(DBZ-1755) public void shouldGenerateSnapshotForNegativeMoney() throws Exception {
  TestHelper.dropAllSchemas();
  TestHelper.executeDDL(postgres_create_tables.ddl);
  TestHelper.execute(INSERT_NEGATIVE_CASH_TYPES_STMT);
  buildNoStreamProducer(TestHelper.defaultConfig().with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,public.cash_table));
  TestConsumer consumer=testConsumer(1,public);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  final Map<String,List<SchemaAndValueField>> expectedValueByTopicName=Collect.hashMapOf(public.cash_table,schemaAndValuesForNegativeMoneyTypes());
  consumer.process(record -> assertReadRecord(record,expectedValueByTopicName));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",572
818,"'-tryline","@Test @FixFor(DBZ-1755) public void shouldGenerateSnapshotForNullMoney() throws Exception {
  TestHelper.dropAllSchemas();
  TestHelper.executeDDL(postgres_create_tables.ddl);
  TestHelper.execute(INSERT_NULL_CASH_TYPES_STMT);
  buildNoStreamProducer(TestHelper.defaultConfig().with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,public.cash_table));
  TestConsumer consumer=testConsumer(1,public);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  final Map<String,List<SchemaAndValueField>> expectedValueByTopicName=Collect.hashMapOf(public.cash_table,schemaAndValuesForNullMoneyTypes());
  consumer.process(record -> assertReadRecord(record,expectedValueByTopicName));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",590
819,"'-tryline","@Test @FixFor(DBZ-1413) public void shouldSnapshotDomainTypeWithPropagatedSourceTypeAttributes() throws Exception {
  TestHelper.dropAllSchemas();
  TestHelper.execute(CREATE DOMAIN float83 AS numeric(8,3) DEFAULT 0.0;);
  TestHelper.execute(CREATE DOMAIN money2 AS MONEY DEFAULT 0.0;);
  TestHelper.execute(CREATE TABLE alias_table (pk SERIAL, salary money, salary2 money2, a numeric(8,3), area float83, PRIMARY KEY(pk)););
  TestHelper.execute(INSERT INTO alias_table (salary, salary2, a, area) values (7.25, 8.25, 12345.123, 12345.123););
  buildNoStreamProducer(TestHelper.defaultConfig().with(PostgresConnectorConfig.DECIMAL_HANDLING_MODE,DecimalHandlingMode.DOUBLE).with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true).with(column.propagate.source.type,public.alias_table.*));
  final TestConsumer consumer=testConsumer(1,public);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  List<SchemaAndValueField> expected=Arrays.asList(new SchemaAndValueField(salary,Decimal.builder(2).optional().parameter(TestHelper.TYPE_NAME_PARAMETER_KEY,MONEY).parameter(TestHelper.TYPE_LENGTH_PARAMETER_KEY,String.valueOf(Integer.MAX_VALUE)).parameter(TestHelper.TYPE_SCALE_PARAMETER_KEY,0).build(),BigDecimal.valueOf(7.25)),new SchemaAndValueField(salary2,Decimal.builder(2).optional().parameter(TestHelper.TYPE_NAME_PARAMETER_KEY,MONEY2).parameter(TestHelper.TYPE_LENGTH_PARAMETER_KEY,String.valueOf(Integer.MAX_VALUE)).parameter(TestHelper.TYPE_SCALE_PARAMETER_KEY,0).build(),BigDecimal.valueOf(8.25)),new SchemaAndValueField(a,SchemaBuilder.float64().optional().parameter(TestHelper.TYPE_NAME_PARAMETER_KEY,NUMERIC).parameter(TestHelper.TYPE_LENGTH_PARAMETER_KEY,8).parameter(TestHelper.TYPE_SCALE_PARAMETER_KEY,3).build(),12345.123),new SchemaAndValueField(area,SchemaBuilder.float64().optional().parameter(TestHelper.TYPE_NAME_PARAMETER_KEY,FLOAT83).parameter(TestHelper.TYPE_LENGTH_PARAMETER_KEY,8).parameter(TestHelper.TYPE_SCALE_PARAMETER_KEY,3).build(),12345.123));
  consumer.process(record -> assertReadRecord(record,Collect.hashMapOf(public.alias_table,expected)));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",608
820,"'-tryline","@Test @FixFor(DBZ-1413) public void shouldSnapshotDomainAliasWithProperModifiers() throws Exception {
  TestHelper.dropAllSchemas();
  TestHelper.execute(CREATE DOMAIN varbit2 AS varbit(3););
  TestHelper.execute(CREATE TABLE alias_table (pk SERIAL, value varbit2 NOT NULL, PRIMARY KEY(pk)););
  TestHelper.execute(INSERT INTO alias_table (value) values (B'101'););
  buildNoStreamProducer(TestHelper.defaultConfig().with(PostgresConnectorConfig.DECIMAL_HANDLING_MODE,DecimalHandlingMode.DOUBLE).with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true).with(column.propagate.source.type,public.alias_table.value));
  final TestConsumer consumer=testConsumer(1,public);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  List<SchemaAndValueField> expected=Collections.singletonList(new SchemaAndValueField(value,Bits.builder(3).parameter(TestHelper.TYPE_NAME_PARAMETER_KEY,VARBIT2).parameter(TestHelper.TYPE_LENGTH_PARAMETER_KEY,3).parameter(TestHelper.TYPE_SCALE_PARAMETER_KEY,0).build(),new byte[]{5}));
  consumer.process(record -> assertReadRecord(record,Collect.hashMapOf(public.alias_table,expected)));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",650
821,"'-tryline","@Test @FixFor(DBZ-1413) public void shouldSnapshotDomainTypesLikeBaseTypes() throws Exception {
  TestHelper.dropAllSchemas();
  TestHelper.execute(CREATE DOMAIN bit2 AS BIT(3););
  TestHelper.execute(CREATE DOMAIN smallint2 AS smallint;);
  TestHelper.execute(CREATE DOMAIN integer2 as integer;);
  TestHelper.execute(CREATE DOMAIN bigint2 as bigint;);
  TestHelper.execute(CREATE DOMAIN real2 as real;);
  TestHelper.execute(CREATE DOMAIN bool2 AS BOOL DEFAULT false;);
  TestHelper.execute(CREATE DOMAIN float82 as float8;);
  TestHelper.execute(CREATE DOMAIN numeric2 as numeric(6,2););
  TestHelper.execute(CREATE DOMAIN string2 AS varchar(25) DEFAULT NULL;);
  TestHelper.execute(CREATE DOMAIN date2 AS date;);
  TestHelper.execute(CREATE DOMAIN time2 as time;);
  TestHelper.execute(CREATE DOMAIN timetz2 as timetz;);
  TestHelper.execute(CREATE DOMAIN timestamp2 as timestamp;);
  TestHelper.execute(CREATE DOMAIN timestamptz2 AS timestamptz;);
  TestHelper.execute(CREATE DOMAIN timewotz2 as time without time zone;);
  TestHelper.execute(CREATE DOMAIN box2 as box;);
  TestHelper.execute(CREATE DOMAIN circle2 as circle;);
  TestHelper.execute(CREATE DOMAIN interval2 as interval;);
  TestHelper.execute(CREATE DOMAIN line2 as line;);
  TestHelper.execute(CREATE DOMAIN lseg2 as lseg;);
  TestHelper.execute(CREATE DOMAIN path2 as path;);
  TestHelper.execute(CREATE DOMAIN point2 as point;);
  TestHelper.execute(CREATE DOMAIN polygon2 as polygon;);
  TestHelper.execute(CREATE DOMAIN char2 as char;);
  TestHelper.execute(CREATE DOMAIN text2 as text;);
  TestHelper.execute(CREATE DOMAIN json2 as json;);
  TestHelper.execute(CREATE DOMAIN xml2 as xml;);
  TestHelper.execute(CREATE DOMAIN uuid2 as uuid;);
  TestHelper.execute(CREATE DOMAIN varbit2 as varbit(3););
  TestHelper.execute(CREATE DOMAIN inet2 as inet;);
  TestHelper.execute(CREATE DOMAIN cidr2 as cidr;);
  TestHelper.execute(CREATE DOMAIN macaddr2 as macaddr;);
  TestHelper.execute(CREATE TABLE alias_table (pk SERIAL + , bit_base bit(3) NOT NULL, bit_alias bit2 NOT NULL + , smallint_base smallint NOT NULL, smallint_alias smallint2 NOT NULL+ , integer_base integer NOT NULL, integer_alias integer2 NOT NULL+ , bigint_base bigint NOT NULL, bigint_alias bigint2 NOT NULL+ , real_base real NOT NULL, real_alias real2 NOT NULL+ , float8_base float8 NOT NULL, float8_alias float82 NOT NULL+ , numeric_base numeric(6,2) NOT NULL, numeric_alias numeric2 NOT NULL+ , bool_base bool NOT NULL, bool_alias bool2 NOT NULL+ , string_base varchar(25) NOT NULL, string_alias string2 NOT NULL+ , date_base date NOT NULL, date_alias date2 NOT NULL+ , time_base time NOT NULL, time_alias time2 NOT NULL+ , timetz_base timetz NOT NULL, timetz_alias timetz2 NOT NULL+ , timestamp_base timestamp NOT NULL, timestamp_alias timestamp2 NOT NULL+ , timestamptz_base timestamptz NOT NULL, timestamptz_alias timestamptz2 NOT NULL+ , timewottz_base time without time zone NOT NULL, timewottz_alias timewotz2 NOT NULL+ , box_base box NOT NULL, box_alias box2 NOT NULL+ , circle_base circle NOT NULL, circle_alias circle2 NOT NULL+ , interval_base interval NOT NULL, interval_alias interval2 NOT NULL+ , line_base line NOT NULL, line_alias line2 NOT NULL+ , lseg_base lseg NOT NULL, lseg_alias lseg2 NOT NULL+ , path_base path NOT NULL, path_alias path2 NOT NULL+ , point_base point NOT NULL, point_alias point2 NOT NULL+ , polygon_base polygon NOT NULL, polygon_alias polygon2 NOT NULL+ , char_base char NOT NULL, char_alias char2 NOT NULL+ , text_base text NOT NULL, text_alias text2 NOT NULL+ , json_base json NOT NULL, json_alias json2 NOT NULL+ , xml_base xml NOT NULL, xml_alias xml2 NOT NULL+ , uuid_base UUID NOT NULL, uuid_alias uuid2 NOT NULL+ , varbit_base varbit(3) NOT NULL, varbit_alias varbit2 NOT NULL+ , inet_base inet NOT NULL, inet_alias inet2 NOT NULL+ , cidr_base cidr NOT NULL, cidr_alias cidr2 NOT NULL+ , macaddr_base macaddr NOT NULL, macaddr_alias macaddr2 NOT NULL+ , PRIMARY KEY(pk)););
  TestHelper.execute(INSERT INTO alias_table ( + bit_base, bit_alias,  + smallint_base, smallint_alias, + integer_base, integer_alias, + bigint_base, bigint_alias, + real_base, real_alias, + float8_base, float8_alias, + numeric_base, numeric_alias, + bool_base, bool_alias, + string_base, string_alias, + date_base, date_alias, + time_base, time_alias, + timetz_base, timetz_alias, + timestamp_base, timestamp_alias, + timestamptz_base, timestamptz_alias, + timewottz_base, timewottz_alias, + box_base, box_alias, + circle_base, circle_alias, + interval_base, interval_alias, + line_base, line_alias, + lseg_base, lseg_alias, + path_base, path_alias, + point_base, point_alias, + polygon_base, polygon_alias, + char_base, char_alias, + text_base, text_alias, + json_base, json_alias, + xml_base, xml_alias, + uuid_base, uuid_alias, + varbit_base, varbit_alias, + inet_base, inet_alias, + cidr_base, cidr_alias, + macaddr_base, macaddr_alias + ) VALUES (+ B'101', B'101', + 1, 1, + 1, 1, + 1000, 1000, + 3.14, 3.14, + 3.14, 3.14, + 1234.12, 1234.12, + true, true, + 'hello', 'hello', + '2019-10-02', '2019-10-02', + '01:02:03', '01:02:03', + '01:02:03.123789Z', '01:02:03.123789Z', + '2019-10-02T01:02:03.123456', '2019-10-02T01:02:03.123456', + '2019-10-02T13:51:30.123456+02:00'::TIMESTAMPTZ, '2019-10-02T13:51:30.123456+02:00'::TIMESTAMPTZ, + '01:02:03', '01:02:03', + '(0,0),(1,1)', '(0,0),(1,1)', + '10,4,10', '10,4,10', + '1 year 2 months 3 days 4 hours 5 minutes 6 seconds', '1 year 2 months 3 days 4 hours 5 minutes 6 seconds', + '(0,0),(0,1)', '(0,0),(0,1)', + '((0,0),(0,1))', '((0,0),(0,1))', + '((0,0),(0,1),(0,2))', '((0,0),(0,1),(0,2))', + '(1,1)', '(1,1)', + '((0,0),(0,1),(1,0),(0,0))', '((0,0),(0,1),(1,0),(0,0))', + 'a', 'a', + 'Hello World', 'Hello World', + '{\key\: \value\}', '{\key\: \value\}', + XML('<foo>Hello</foo>'), XML('<foo>Hello</foo>'), + '40e6215d-b5c6-4896-987c-f30f3678f608', '40e6215d-b5c6-4896-987c-f30f3678f608', + B'101', B'101', + '192.168.0.1', '192.168.0.1', + '192.168/24', '192.168/24', + '08:00:2b:01:02:03', '08:00:2b:01:02:03' + ););
  buildNoStreamProducer(TestHelper.defaultConfig().with(PostgresConnectorConfig.DECIMAL_HANDLING_MODE,DecimalHandlingMode.DOUBLE).with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,public.alias_table));
  final TestConsumer consumer=testConsumer(1,public);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  final List<SchemaAndValueField> expected=schemasAndValuesForDomainAliasTypes(false);
  consumer.process(record -> assertReadRecord(record,Collect.hashMapOf(public.alias_table,expected)));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",676
822,"'-tryline","@FixFor(DBZ-1413) public void shouldSnapshotNestedDomainAliasTypeModifiersNotPropagated() throws Exception {
  TestHelper.execute(CREATE DOMAIN varbit2 AS varbit(3););
  TestHelper.execute(CREATE DOMAIN varbit2b AS varbit2;);
  TestHelper.execute(CREATE TABLE alias_table (pk SERIAL, value varbit2b NOT NULL, PRIMARY KEY (pk)););
  TestHelper.execute(INSERT INTO alias_table (value) values (B'101'););
  buildNoStreamProducer(TestHelper.defaultConfig().with(PostgresConnectorConfig.DECIMAL_HANDLING_MODE,DecimalHandlingMode.DOUBLE).with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true));
  final TestConsumer consumer=testConsumer(1,public);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  List<SchemaAndValueField> expected=Collections.singletonList(new SchemaAndValueField(value,Bits.builder(3).build(),new byte[]{5,0}));
  consumer.process(record -> assertReadRecord(record,Collect.hashMapOf(public.alias_table,expected)));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",833
823,"'-tryline","@Test @FixFor(DBZ-920) public void shouldSnapshotEnumAsKnownType() throws Exception {
  TestHelper.execute(CREATE TYPE test_type AS ENUM ('V1', 'V2'););
  TestHelper.execute(CREATE TABLE enum_table (pk SERIAL, value test_type NOT NULL, primary key(pk)););
  TestHelper.execute(INSERT INTO enum_table (value) values ('V1'););
  buildNoStreamProducer(TestHelper.defaultConfig().with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,public.enum_table).with(column.propagate.source.type,public.enum_table.value));
  final TestConsumer consumer=testConsumer(1,public);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  List<SchemaAndValueField> expected=Collections.singletonList(new SchemaAndValueField(value,Enum.builder(V1,V2).parameter(TestHelper.TYPE_NAME_PARAMETER_KEY,TEST_TYPE).parameter(TestHelper.TYPE_LENGTH_PARAMETER_KEY,String.valueOf(Integer.MAX_VALUE)).parameter(TestHelper.TYPE_SCALE_PARAMETER_KEY,0).build(),V1));
  consumer.process(record -> assertReadRecord(record,Collect.hashMapOf(public.enum_table,expected)));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",853
824,"'-tryline","@Test @FixFor(DBZ-1969) public void shouldSnapshotEnumArrayAsKnownType() throws Exception {
  TestHelper.execute(CREATE TYPE test_type AS ENUM ('V1', 'V2'););
  TestHelper.execute(CREATE TABLE enum_array_table (pk SERIAL, value test_type[] NOT NULL, primary key(pk)););
  TestHelper.execute(INSERT INTO enum_array_table (value) values ('{V1, V2}'););
  buildNoStreamProducer(TestHelper.defaultConfig().with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,false).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,public.enum_array_table).with(column.propagate.source.type,public.enum_array_table.value));
  final TestConsumer consumer=testConsumer(1,public);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  List<SchemaAndValueField> expected=Collections.singletonList(new SchemaAndValueField(value,SchemaBuilder.array(Enum.builder(V1,V2)).parameter(TestHelper.TYPE_NAME_PARAMETER_KEY,_TEST_TYPE).parameter(TestHelper.TYPE_LENGTH_PARAMETER_KEY,String.valueOf(Integer.MAX_VALUE)).parameter(TestHelper.TYPE_SCALE_PARAMETER_KEY,0).build(),Arrays.asList(V1,V2)));
  consumer.process(record -> assertReadRecord(record,Collect.hashMapOf(public.enum_array_table,expected)));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",880
825,"'-tryline","@Test @FixFor(DBZ-1969) public void shouldSnapshotTimeArrayTypesAsKnownTypes() throws Exception {
  TestHelper.execute(CREATE TABLE time_array_table (pk SERIAL,  + timea time[] NOT NULL,  + timetza timetz[] NOT NULL, + timestampa timestamp[] NOT NULL, + timestamptza timestamptz[] NOT NULL, primary key(pk)););
  TestHelper.execute(INSERT INTO time_array_table (timea, timetza, timestampa, timestamptza)  + values ( + '{00:01:02,01:02:03}', + '{13:51:02+0200,14:51:03+0200}', + '{2020-04-01 00:01:02,2020-04-01 01:02:03}', + '{2020-04-01 13:51:02+0200,2020-04-01 14:51:03+0200}'));
  buildNoStreamProducer(TestHelper.defaultConfig().with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,false).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,public.time_array_table));
  final TestConsumer consumer=testConsumer(1,public);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  consumer.process(record -> assertReadRecord(record,Collect.hashMapOf(public.time_array_table,schemaAndValuesForTimeArrayTypes())));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",907
826,"'-tryline","@Test @FixFor(DBZ-1814) public void shouldGenerateSnapshotForByteaAsBytes() throws Exception {
  TestHelper.dropAllSchemas();
  TestHelper.executeDDL(postgres_create_tables.ddl);
  TestHelper.execute(INSERT_BYTEA_BINMODE_STMT);
  buildNoStreamProducer(TestHelper.defaultConfig());
  TestConsumer consumer=testConsumer(1,public);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  final Map<String,List<SchemaAndValueField>> expectedValueByTopicName=Collect.hashMapOf(public.bytea_binmode_table,schemaAndValueForByteaBytes());
  consumer.process(record -> assertReadRecord(record,expectedValueByTopicName));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",932
827,"'-tryline","@Test @FixFor(DBZ-1814) public void shouldGenerateSnapshotForByteaAsBase64String() throws Exception {
  TestHelper.dropAllSchemas();
  TestHelper.executeDDL(postgres_create_tables.ddl);
  TestHelper.execute(INSERT_BYTEA_BINMODE_STMT);
  buildNoStreamProducer(TestHelper.defaultConfig().with(PostgresConnectorConfig.BINARY_HANDLING_MODE,PostgresConnectorConfig.BinaryHandlingMode.BASE64));
  TestConsumer consumer=testConsumer(1,public);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  final Map<String,List<SchemaAndValueField>> expectedValueByTopicName=Collect.hashMapOf(public.bytea_binmode_table,schemaAndValueForByteaBase64());
  consumer.process(record -> assertReadRecord(record,expectedValueByTopicName));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",949
828,"'-tryline","@Test @FixFor(DBZ-1814) public void shouldGenerateSnapshotForByteaAsHexString() throws Exception {
  TestHelper.dropAllSchemas();
  TestHelper.executeDDL(postgres_create_tables.ddl);
  TestHelper.execute(INSERT_BYTEA_BINMODE_STMT);
  buildNoStreamProducer(TestHelper.defaultConfig().with(PostgresConnectorConfig.BINARY_HANDLING_MODE,PostgresConnectorConfig.BinaryHandlingMode.HEX));
  TestConsumer consumer=testConsumer(1,public);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  final Map<String,List<SchemaAndValueField>> expectedValueByTopicName=Collect.hashMapOf(public.bytea_binmode_table,schemaAndValueForByteaHex());
  consumer.process(record -> assertReadRecord(record,expectedValueByTopicName));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",967
829,"'-tryline","@Test @FixFor(DBZ-1814) public void shouldGenerateSnapshotForUnknownColumnAsBytes() throws Exception {
  TestHelper.dropAllSchemas();
  TestHelper.executeDDL(postgres_create_tables.ddl);
  TestHelper.execute(INSERT_CIRCLE_STMT);
  buildNoStreamProducer(TestHelper.defaultConfig().with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true));
  TestConsumer consumer=testConsumer(1,public);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  final Map<String,List<SchemaAndValueField>> expectedValueByTopicName=Collect.hashMapOf(public.circle_table,schemaAndValueForUnknownColumnBytes());
  consumer.process(record -> assertReadRecord(record,expectedValueByTopicName));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",985
830,"'-tryline","@Test @FixFor(DBZ-1814) public void shouldGenerateSnapshotForUnknownColumnAsBase64() throws Exception {
  TestHelper.dropAllSchemas();
  TestHelper.executeDDL(postgres_create_tables.ddl);
  TestHelper.execute(INSERT_CIRCLE_STMT);
  buildNoStreamProducer(TestHelper.defaultConfig().with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true).with(PostgresConnectorConfig.BINARY_HANDLING_MODE,BinaryHandlingMode.BASE64));
  TestConsumer consumer=testConsumer(1,public);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  final Map<String,List<SchemaAndValueField>> expectedValueByTopicName=Collect.hashMapOf(public.circle_table,schemaAndValueForUnknownColumnBase64());
  consumer.process(record -> assertReadRecord(record,expectedValueByTopicName));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",1003
831,"'-tryline","@Test @FixFor(DBZ-1814) public void shouldGenerateSnapshotForUnknownColumnAsHex() throws Exception {
  TestHelper.dropAllSchemas();
  TestHelper.executeDDL(postgres_create_tables.ddl);
  TestHelper.execute(INSERT_CIRCLE_STMT);
  buildNoStreamProducer(TestHelper.defaultConfig().with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true).with(PostgresConnectorConfig.BINARY_HANDLING_MODE,BinaryHandlingMode.HEX));
  TestConsumer consumer=testConsumer(1,public);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  final Map<String,List<SchemaAndValueField>> expectedValueByTopicName=Collect.hashMapOf(public.circle_table,schemaAndValueForUnknownColumnHex());
  consumer.process(record -> assertReadRecord(record,expectedValueByTopicName));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsSnapshotProducerIT.java",1022
832,"'-tryline","@Before public void before() throws Exception {
  TestHelper.dropAllSchemas();
  TestHelper.executeDDL(init_postgis.ddl);
  String statements=CREATE SCHEMA IF NOT EXISTS public; + DROP TABLE IF EXISTS test_table; + CREATE TABLE test_table (pk SERIAL, text TEXT, PRIMARY KEY(pk));+ CREATE TABLE table_with_interval (id SERIAL PRIMARY KEY, title VARCHAR(512) NOT NULL, time_limit INTERVAL DEFAULT '60 days'::INTERVAL NOT NULL);+ INSERT INTO test_table(text) VALUES ('insert');;
  TestHelper.execute(statements);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,false).with(PostgresConnectorConfig.SCHEMA_EXCLUDE_LIST,postgis);
  if (TestHelper.decoderPlugin() == PostgresConnectorConfig.LogicalDecoder.PGOUTPUT) {
    configBuilder=configBuilder.with(database.replication,database).with(database.preferQueryMode,simple).with(assumeMinServerVersion.set,9.4);
  }
  Testing.Print.enable();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",118
833,"'-tryline","@Test public void shouldReceiveChangesForInsertsWithDifferentDataTypes() throws Exception {
  TestHelper.executeDDL(postgres_create_tables.ddl);
  startConnector();
  consumer=testConsumer(1);
  consumer.expects(1);
  assertInsert(INSERT_NUMERIC_TYPES_STMT,1,schemasAndValuesForNumericType());
  consumer.expects(1);
  assertInsert(INSERT_NUMERIC_DECIMAL_TYPES_STMT_NO_NAN,1,schemasAndValuesForBigDecimalEncodedNumericTypes());
  consumer.expects(1);
  assertInsert(INSERT_STRING_TYPES_STMT,1,schemasAndValuesForStringTypes());
  consumer.expects(1);
  assertInsert(INSERT_CASH_TYPES_STMT,1,schemaAndValuesForMoneyTypes());
  consumer.expects(1);
  assertInsert(INSERT_NEGATIVE_CASH_TYPES_STMT,2,schemaAndValuesForNegativeMoneyTypes());
  consumer.expects(1);
  assertInsert(INSERT_BIN_TYPES_STMT,1,schemaAndValuesForBinTypes());
  consumer.expects(1);
  assertInsert(INSERT_DATE_TIME_TYPES_STMT,1,schemaAndValuesForDateTimeTypes());
  consumer.expects(1);
  assertInsert(INSERT_TEXT_TYPES_STMT,1,schemasAndValuesForTextTypes());
  consumer.expects(1);
  assertInsert(INSERT_GEOM_TYPES_STMT,1,schemaAndValuesForGeomTypes());
  consumer.expects(1);
  assertInsert(INSERT_RANGE_TYPES_STMT,1,schemaAndValuesForRangeTypes());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",174
834,"'-tryline","@Test @FixFor(DBZ-1498) public void shouldReceiveChangesForIntervalAsString() throws Exception {
  TestHelper.executeDDL(postgres_create_tables.ddl);
  startConnector(config -> config.with(PostgresConnectorConfig.INTERVAL_HANDLING_MODE,IntervalHandlingMode.STRING));
  consumer=testConsumer(1);
  consumer.expects(1);
  assertInsert(INSERT_DATE_TIME_TYPES_STMT,1,schemaAndValuesForIntervalAsString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",222
835,"'-tryline","@Test @FixFor(DBZ-766) public void shouldReceiveChangesAfterConnectionRestart() throws Exception {
  TestHelper.dropDefaultReplicationSlot();
  TestHelper.dropPublication();
  startConnector(config -> config.with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true).with(PostgresConnectorConfig.SCHEMA_EXCLUDE_LIST,postgis));
  TestHelper.execute(CREATE TABLE t0 (pk SERIAL, d INTEGER, PRIMARY KEY(pk)););
  consumer=testConsumer(1);
  waitForStreamingToStart();
  executeAndWait(INSERT INTO t0 (pk,d) VALUES(1,1););
  assertRecordInserted(public.t0,PK_FIELD,1);
  stopConnector();
  TestHelper.execute(ALTER TABLE t0 ADD COLUMN d2 INTEGER;);
  TestHelper.execute(ALTER TABLE t0 ALTER COLUMN d SET NOT NULL;);
  startConnector(config -> config.with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true).with(PostgresConnectorConfig.SCHEMA_EXCLUDE_LIST,postgis),false);
  consumer=testConsumer(1);
  waitForStreamingToStart();
  executeAndWait(INSERT INTO t0 (pk,d,d2) VALUES (2,1,3););
  assertRecordInserted(public.t0,PK_FIELD,2);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",236
836,"'-tryline","@Test @FixFor(DBZ-1698) public void shouldReceiveUpdateSchemaAfterConnectionRestart() throws Exception {
  TestHelper.dropDefaultReplicationSlot();
  TestHelper.dropPublication();
  startConnector(config -> config.with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true).with(PostgresConnectorConfig.SCHEMA_EXCLUDE_LIST,postgis).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,false).with(PostgresConnectorConfig.SCHEMA_REFRESH_MODE,SchemaRefreshMode.COLUMNS_DIFF_EXCLUDE_UNCHANGED_TOAST));
  TestHelper.execute(CREATE TABLE t0 (pk SERIAL, d INTEGER, PRIMARY KEY(pk)););
  consumer=testConsumer(1);
  waitForStreamingToStart();
  executeAndWait(INSERT INTO t0 (pk,d) VALUES(1,1););
  assertRecordInserted(public.t0,PK_FIELD,1);
  stopConnector();
  Thread.sleep(3000);
  TestHelper.execute(INSERT INTO t0 (pk,d) VALUES(2,2););
  TestHelper.execute(ALTER TABLE t0 ADD COLUMN d2 NUMERIC(10,6) DEFAULT 0 NOT NULL;);
  TestHelper.execute(ALTER TABLE t0 ALTER COLUMN d SET NOT NULL;);
  startConnector(config -> config.with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true).with(PostgresConnectorConfig.SCHEMA_EXCLUDE_LIST,postgis).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,false).with(PostgresConnectorConfig.SCHEMA_REFRESH_MODE,SchemaRefreshMode.COLUMNS_DIFF_EXCLUDE_UNCHANGED_TOAST),false);
  consumer=testConsumer(2);
  waitForStreamingToStart();
  executeAndWait(INSERT INTO t0 (pk,d,d2) VALUES (3,1,3););
  assertRecordInserted(public.t0,PK_FIELD,2);
  assertRecordInserted(public.t0,PK_FIELD,3);
  stopConnector();
  TestHelper.dropDefaultReplicationSlot();
  TestHelper.dropPublication();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",276
837,"'-tryline","@Test public void shouldReceiveChangesForInsertsCustomTypes() throws Exception {
  TestHelper.executeDDL(postgres_create_tables.ddl);
  startConnector(config -> config.with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true));
  assertInsert(INSERT_CUSTOM_TYPES_STMT,1,schemasAndValuesForCustomTypes());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",329
838,"'-tryline","@Test @FixFor(DBZ-1141) public void shouldProcessNotNullColumnsConnectDateTypes() throws Exception {
  final Struct before=testProcessNotNullColumns(TemporalPrecisionMode.CONNECT);
  if (before != null) {
    Assertions.assertThat(before.get(created_at)).isEqualTo(new java.util.Date(0));
    Assertions.assertThat(before.get(created_at_tz)).isEqualTo(1970-01-01T00:00:00Z);
    Assertions.assertThat(before.get(ctime)).isEqualTo(new java.util.Date(0));
    Assertions.assertThat(before.get(ctime_tz)).isEqualTo(00:00:00Z);
    Assertions.assertThat(before.get(cdate)).isEqualTo(new java.util.Date(0));
    Assertions.assertThat(before.get(cmoney)).isEqualTo(new BigDecimal(0.00));
    Assertions.assertThat(before.get(cbits)).isEqualTo(new byte[0]);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",338
839,"'-tryline","@Test @FixFor(DBZ-1141) public void shouldProcessNotNullColumnsAdaptiveDateTypes() throws Exception {
  final Struct before=testProcessNotNullColumns(TemporalPrecisionMode.ADAPTIVE);
  if (before != null) {
    Assertions.assertThat(before.get(created_at)).isEqualTo(0L);
    Assertions.assertThat(before.get(created_at_tz)).isEqualTo(1970-01-01T00:00:00Z);
    Assertions.assertThat(before.get(ctime)).isEqualTo(0L);
    Assertions.assertThat(before.get(ctime_tz)).isEqualTo(00:00:00Z);
    Assertions.assertThat(before.get(cdate)).isEqualTo(0);
    Assertions.assertThat(before.get(cmoney)).isEqualTo(new BigDecimal(0.00));
    Assertions.assertThat(before.get(cbits)).isEqualTo(new byte[0]);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",353
840,"'-tryline","@Test @FixFor(DBZ-1141) public void shouldProcessNotNullColumnsAdaptiveMsDateTypes() throws Exception {
  final Struct before=testProcessNotNullColumns(TemporalPrecisionMode.ADAPTIVE_TIME_MICROSECONDS);
  if (before != null) {
    Assertions.assertThat(before.get(created_at)).isEqualTo(0L);
    Assertions.assertThat(before.get(created_at_tz)).isEqualTo(1970-01-01T00:00:00Z);
    Assertions.assertThat(before.get(ctime)).isEqualTo(0L);
    Assertions.assertThat(before.get(ctime_tz)).isEqualTo(00:00:00Z);
    Assertions.assertThat(before.get(cdate)).isEqualTo(0);
    Assertions.assertThat(before.get(cmoney)).isEqualTo(new BigDecimal(0.00));
    Assertions.assertThat(before.get(cbits)).isEqualTo(new byte[0]);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",368
841,"'-tryline","@Test @FixFor(DBZ-1158) public void shouldProcessNotNullColumnsFallbacksReplicaIdentity() throws Exception {
  final Struct before=testProcessNotNullColumns(TemporalPrecisionMode.ADAPTIVE);
  if (before != null) {
    Assertions.assertThat(before.get(csmallint)).isEqualTo((short)0);
    Assertions.assertThat(before.get(cinteger)).isEqualTo(0);
    Assertions.assertThat(before.get(cbigint)).isEqualTo(0L);
    Assertions.assertThat(before.get(creal)).isEqualTo(0.f);
    Assertions.assertThat(before.get(cbool)).isEqualTo(false);
    Assertions.assertThat(before.get(cfloat8)).isEqualTo(0.0);
    Assertions.assertThat(before.get(cnumeric)).isEqualTo(new BigDecimal(0.00));
    Assertions.assertThat(before.get(cvarchar)).isEqualTo();
    Assertions.assertThat(before.get(cbox)).isEqualTo(new byte[0]);
    Assertions.assertThat(before.get(ccircle)).isEqualTo(new byte[0]);
    Assertions.assertThat(before.get(cinterval)).isEqualTo(0L);
    Assertions.assertThat(before.get(cline)).isEqualTo(new byte[0]);
    Assertions.assertThat(before.get(clseg)).isEqualTo(new byte[0]);
    Assertions.assertThat(before.get(cpath)).isEqualTo(new byte[0]);
    Assertions.assertThat(before.get(cpoint)).isEqualTo(Point.createValue(Point.builder().build(),0,0));
    Assertions.assertThat(before.get(cpolygon)).isEqualTo(new byte[0]);
    Assertions.assertThat(before.get(cchar)).isEqualTo();
    Assertions.assertThat(before.get(ctext)).isEqualTo();
    Assertions.assertThat(before.get(cjson)).isEqualTo();
    Assertions.assertThat(before.get(cxml)).isEqualTo();
    Assertions.assertThat(before.get(cuuid)).isEqualTo();
    Assertions.assertThat(before.get(cvarbit)).isEqualTo(new byte[0]);
    Assertions.assertThat(before.get(cinet)).isEqualTo();
    Assertions.assertThat(before.get(ccidr)).isEqualTo();
    Assertions.assertThat(before.get(cmacaddr)).isEqualTo();
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",383
842,"'-tryline","private Struct testProcessNotNullColumns(TemporalPrecisionMode temporalMode) throws Exception {
  TestHelper.executeDDL(postgres_create_tables.ddl);
  startConnector(config -> config.with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true).with(PostgresConnectorConfig.SCHEMA_EXCLUDE_LIST,postgis).with(PostgresConnectorConfig.TIME_PRECISION_MODE,temporalMode));
  consumer.expects(1);
  executeAndWait(INSERT INTO not_null_table VALUES (default, 30, '2019-02-10 11:34:58', '2019-02-10 11:35:00',  + '10:20:11', '10:20:12', '2019-02-01', '$20', B'101', 32766, 2147483646, 9223372036854775806, 3.14,  + true, 3.14768, 1234.56, 'Test', '(0,0),(1,1)', '<(0,0),1>', '01:02:03', '{0,1,2}', '((0,0),(1,1))', + '((0,0),(0,1),(0,2))', '(1,1)', '((0,0),(0,1),(1,1))', 'a', 'hello world', '{\key\: 123}', + '<doc><item>abc</item></doc>', 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', B'101', '192.168.1.100', + '192.168.1', '08:00:2b:01:02:03'););
  consumer.remove();
  consumer.expects(1);
  executeAndWait(UPDATE not_null_table SET val=40);
  final SourceRecord record=consumer.remove();
  VerifyRecord.isValidUpdate(record,pk,1);
  VerifyRecord.isValid(record);
  return ((Struct)record.value()).getStruct(before);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",417
843,"'-tryline","@Test(timeout=30000) public void shouldReceiveChangesForInsertsWithPostgisTypes() throws Exception {
  TestHelper.executeDDL(postgis_create_tables.ddl);
  startConnector();
  consumer=testConsumer(1,public);
  consumer.setIgnoreExtraRecords(true);
  TestHelper.execute(INSERT INTO public.dummy_table DEFAULT VALUES;);
  consumer.await(TestHelper.waitTimeForRecords() * 10,TimeUnit.SECONDS);
  while (true) {
    if (!consumer.isEmpty()) {
      SourceRecord record=consumer.remove();
      if (record.topic().endsWith(.public.dummy_table)) {
        break;
      }
    }
  }
  consumer.expects(1);
  assertInsert(INSERT_POSTGIS_TYPES_STMT,1,schemaAndValuesForPostgisTypes());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",443
844,"'-tryline","@Test(timeout=30000) public void shouldReceiveChangesForInsertsWithPostgisArrayTypes() throws Exception {
  TestHelper.executeDDL(postgis_create_tables.ddl);
  startConnector();
  consumer=testConsumer(1,public);
  consumer.setIgnoreExtraRecords(true);
  TestHelper.execute(INSERT INTO public.dummy_table DEFAULT VALUES;);
  consumer.await(TestHelper.waitTimeForRecords() * 10,TimeUnit.SECONDS);
  while (true) {
    if (!consumer.isEmpty()) {
      SourceRecord record=consumer.remove();
      if (record.topic().endsWith(.public.dummy_table)) {
        break;
      }
    }
  }
  consumer.expects(1);
  assertInsert(INSERT_POSTGIS_ARRAY_TYPES_STMT,1,schemaAndValuesForPostgisArrayTypes());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",470
845,"'-tryline","@Test @ShouldFailWhen(DecoderDifferences.AreQuotedIdentifiersUnsupported.class) public void shouldReceiveChangesForInsertsWithQuotedNames() throws Exception {
  TestHelper.executeDDL(postgres_create_tables.ddl);
  startConnector();
  assertInsert(INSERT_QUOTED_TYPES_STMT,1,schemasAndValuesForQuotedTypes());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",497
846,"'-tryline","@Test public void shouldReceiveChangesForInsertsWithArrayTypes() throws Exception {
  TestHelper.executeDDL(postgres_create_tables.ddl);
  startConnector();
  assertInsert(INSERT_ARRAY_TYPES_STMT,1,schemasAndValuesForArrayTypes());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",509
847,"'-tryline","@Test @FixFor(DBZ-1029) @SkipWhenDecoderPluginNameIs(value=PGOUTPUT,reason=Decoder synchronizes all schema columns when processing relation messages) public void shouldReceiveChangesForInsertsIndependentOfReplicaIdentity() throws Exception {
  startConnector();
  TestHelper.execute(ALTER TABLE test_table REPLICA IDENTITY DEFAULT;);
  String statement=INSERT INTO test_table (text) VALUES ('pk_and_default');;
  assertInsert(statement,2,Collections.singletonList(new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,pk_and_default)));
  consumer.expects(1);
  TestHelper.execute(ALTER TABLE test_table REPLICA IDENTITY FULL;);
  statement=INSERT INTO test_table (text) VALUES ('pk_and_full');;
  assertInsert(statement,3,Collections.singletonList(new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,pk_and_full)));
  consumer.expects(1);
  TestHelper.execute(ALTER TABLE test_table DROP CONSTRAINT test_table_pkey CASCADE;);
  statement=INSERT INTO test_table (pk, text) VALUES (4, 'no_pk_and_full');;
  assertInsert(statement,4,Collections.singletonList(new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,no_pk_and_full)));
  consumer.expects(1);
  TestHelper.execute(ALTER TABLE test_table REPLICA IDENTITY DEFAULT;);
  statement=INSERT INTO test_table (pk, text) VALUES (5, 'no_pk_and_default');;
  assertInsert(statement,5,Collections.singletonList(new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,no_pk_and_default)));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",518
848,"'-tryline","@Test @FixFor(DBZ-1029) @SkipWhenDecoderPluginNameIsNot(value=SkipWhenDecoderPluginNameIsNot.DecoderPluginName.PGOUTPUT,reason=Decoder synchronizes all schema columns when processing relation messages) public void shouldReceiveChangesForInsertsIndependentOfReplicaIdentityWhenSchemaChanged() throws Exception {
  startConnector();
  TestHelper.execute(ALTER TABLE test_table REPLICA IDENTITY DEFAULT;);
  String statement=INSERT INTO test_table (text) VALUES ('pk_and_default');;
  assertInsert(statement,2,Collections.singletonList(new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,pk_and_default)));
  consumer.expects(1);
  TestHelper.execute(ALTER TABLE test_table REPLICA IDENTITY FULL;);
  statement=INSERT INTO test_table (text) VALUES ('pk_and_full');;
  assertInsert(statement,3,Collections.singletonList(new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,pk_and_full)));
  consumer.expects(1);
  TestHelper.execute(ALTER TABLE test_table DROP CONSTRAINT test_table_pkey CASCADE;);
  statement=INSERT INTO test_table (pk, text) VALUES (4, 'no_pk_and_full');;
  assertInsert(statement,Arrays.asList(new SchemaAndValueField(pk,SchemaBuilder.INT32_SCHEMA,4),new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,no_pk_and_full)));
  consumer.expects(1);
  TestHelper.execute(ALTER TABLE test_table REPLICA IDENTITY DEFAULT;);
  statement=INSERT INTO test_table (pk, text) VALUES (5, 'no_pk_and_default');;
  assertInsert(statement,Arrays.asList(new SchemaAndValueField(pk,SchemaBuilder.INT32_SCHEMA,5),new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,no_pk_and_default)));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",546
849,"'-tryline","@Test @FixFor(DBZ-478) public void shouldReceiveChangesForNullInsertsWithArrayTypes() throws Exception {
  TestHelper.executeDDL(postgres_create_tables.ddl);
  startConnector();
  assertInsert(INSERT_ARRAY_TYPES_WITH_NULL_VALUES_STMT,1,schemasAndValuesForArrayTypesWithNullValues());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",576
850,"'-tryline","@Test public void shouldReceiveChangesForNewTable() throws Exception {
  String statement=CREATE SCHEMA s1; + CREATE TABLE s1.a (pk SERIAL, aa integer, PRIMARY KEY(pk)); + INSERT INTO s1.a (aa) VALUES (11);;
  startConnector();
  executeAndWait(statement);
  assertRecordInserted(s1.a,PK_FIELD,1);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",586
851,"'-tryline","@Test public void shouldReceiveChangesForRenamedTable() throws Exception {
  String statement=DROP TABLE IF EXISTS renamed_test_table; + ALTER TABLE test_table RENAME TO renamed_test_table; + INSERT INTO renamed_test_table (text) VALUES ('new');;
  startConnector();
  executeAndWait(statement);
  assertRecordInserted(public.renamed_test_table,PK_FIELD,2);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",598
852,"'-tryline","@Test @SkipWhenDecoderPluginNameIs(value=PGOUTPUT,reason=An update on a table with no primary key and default replica throws PSQLException as tables must have a PK) public void shouldReceiveChangesForUpdates() throws Exception {
  startConnector();
  executeAndWait(UPDATE test_table set text='update' WHERE pk=1);
  SourceRecord updatedRecord=consumer.remove();
  String topicName=topicName(public.test_table);
  assertEquals(topicName,updatedRecord.topic());
  VerifyRecord.isValidUpdate(updatedRecord,PK_FIELD,1);
  List<SchemaAndValueField> expectedAfter=Collections.singletonList(new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,update));
  assertRecordSchemaAndValues(expectedAfter,updatedRecord,Envelope.FieldName.AFTER);
  consumer.expects(1);
  TestHelper.execute(ALTER TABLE test_table REPLICA IDENTITY FULL);
  executeAndWait(UPDATE test_table set text='update2' WHERE pk=1);
  updatedRecord=consumer.remove();
  assertEquals(topicName,updatedRecord.topic());
  VerifyRecord.isValidUpdate(updatedRecord,PK_FIELD,1);
  List<SchemaAndValueField> expectedBefore=Collections.singletonList(new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,update));
  assertRecordSchemaAndValues(expectedBefore,updatedRecord,Envelope.FieldName.BEFORE);
  expectedAfter=Collections.singletonList(new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,update2));
  assertRecordSchemaAndValues(expectedAfter,updatedRecord,Envelope.FieldName.AFTER);
  TestHelper.execute(ALTER TABLE test_table DROP CONSTRAINT test_table_pkey CASCADE;);
  consumer.expects(1);
  executeAndWait(UPDATE test_table SET text = 'update3' WHERE pk = 1;);
  updatedRecord=consumer.remove();
  assertEquals(topicName,updatedRecord.topic());
  expectedBefore=Collections.singletonList(new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,update2));
  assertRecordSchemaAndValues(expectedBefore,updatedRecord,Envelope.FieldName.BEFORE);
  expectedAfter=Collections.singletonList(new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,update3));
  assertRecordSchemaAndValues(expectedAfter,updatedRecord,Envelope.FieldName.AFTER);
  TestHelper.execute(ALTER TABLE test_table REPLICA IDENTITY DEFAULT;);
  consumer.expects(0);
  executeAndWaitForNoRecords(UPDATE test_table SET text = 'no_pk_and_default' WHERE pk = 1;);
  assertThat(consumer.isEmpty()).isTrue();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",609
853,"'-tryline","@Test public void shouldReceiveChangesForUpdatesWithColumnChanges() throws Exception {
  String statements=ALTER TABLE test_table ADD COLUMN uvc VARCHAR(2); + ALTER TABLE test_table REPLICA IDENTITY FULL; + UPDATE test_table SET uvc ='aa' WHERE pk = 1;;
  startConnector();
  consumer=testConsumer(1);
  executeAndWait(statements);
  SourceRecord updatedRecord=consumer.remove();
  String topicName=topicName(public.test_table);
  assertEquals(topicName,updatedRecord.topic());
  VerifyRecord.isValidUpdate(updatedRecord,PK_FIELD,1);
  List<SchemaAndValueField> expectedBefore=Collections.singletonList(new SchemaAndValueField(uvc,null,null));
  assertRecordSchemaAndValues(expectedBefore,updatedRecord,Envelope.FieldName.BEFORE);
  List<SchemaAndValueField> expectedAfter=Collections.singletonList(new SchemaAndValueField(uvc,SchemaBuilder.OPTIONAL_STRING_SCHEMA,aa));
  assertRecordSchemaAndValues(expectedAfter,updatedRecord,Envelope.FieldName.AFTER);
  statements=ALTER TABLE test_table RENAME COLUMN uvc to xvc; + UPDATE test_table SET xvc ='bb' WHERE pk = 1;;
  consumer.expects(1);
  executeAndWait(statements);
  updatedRecord=consumer.remove();
  VerifyRecord.isValidUpdate(updatedRecord,PK_FIELD,1);
  expectedBefore=Collections.singletonList(new SchemaAndValueField(xvc,SchemaBuilder.OPTIONAL_STRING_SCHEMA,aa));
  assertRecordSchemaAndValues(expectedBefore,updatedRecord,Envelope.FieldName.BEFORE);
  expectedAfter=Collections.singletonList(new SchemaAndValueField(xvc,SchemaBuilder.OPTIONAL_STRING_SCHEMA,bb));
  assertRecordSchemaAndValues(expectedAfter,updatedRecord,Envelope.FieldName.AFTER);
  statements=ALTER TABLE test_table DROP COLUMN xvc; + UPDATE test_table SET text ='update' WHERE pk = 1;;
  consumer.expects(1);
  executeAndWait(statements);
  updatedRecord=consumer.remove();
  VerifyRecord.isValidUpdate(updatedRecord,PK_FIELD,1);
  statements=ALTER TABLE test_table ADD COLUMN modtype INTEGER; + INSERT INTO test_table (pk,modtype) VALUES (2,1);;
  consumer.expects(1);
  executeAndWait(statements);
  updatedRecord=consumer.remove();
  VerifyRecord.isValidInsert(updatedRecord,PK_FIELD,2);
  assertRecordSchemaAndValues(Collections.singletonList(new SchemaAndValueField(modtype,SchemaBuilder.OPTIONAL_INT32_SCHEMA,1)),updatedRecord,Envelope.FieldName.AFTER);
  statements=ALTER TABLE test_table ALTER COLUMN modtype TYPE SMALLINT; + UPDATE test_table SET modtype = 2 WHERE pk = 2;;
  consumer.expects(1);
  executeAndWait(statements);
  updatedRecord=consumer.remove();
  VerifyRecord.isValidUpdate(updatedRecord,PK_FIELD,2);
  assertRecordSchemaAndValues(Collections.singletonList(new SchemaAndValueField(modtype,SchemaBuilder.OPTIONAL_INT16_SCHEMA,(short)1)),updatedRecord,Envelope.FieldName.BEFORE);
  assertRecordSchemaAndValues(Collections.singletonList(new SchemaAndValueField(modtype,SchemaBuilder.OPTIONAL_INT16_SCHEMA,(short)2)),updatedRecord,Envelope.FieldName.AFTER);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",662
854,"'-tryline","@Test public void shouldReceiveChangesForUpdatesWithPKChanges() throws Exception {
  startConnector();
  consumer=testConsumer(3);
  executeAndWait(UPDATE test_table SET text = 'update', pk = 2);
  String topicName=topicName(public.test_table);
  SourceRecord deleteRecord=consumer.remove();
  assertEquals(topicName,deleteRecord.topic());
  VerifyRecord.isValidDelete(deleteRecord,PK_FIELD,1);
  Header keyPKUpdateHeader=getPKUpdateNewKeyHeader(deleteRecord);
  assertEquals(Integer.valueOf(2),((Struct)keyPKUpdateHeader.value()).getInt32(pk));
  SourceRecord tombstoneRecord=consumer.remove();
  assertEquals(topicName,tombstoneRecord.topic());
  VerifyRecord.isValidTombstone(tombstoneRecord,PK_FIELD,1);
  SourceRecord insertRecord=consumer.remove();
  assertEquals(topicName,insertRecord.topic());
  VerifyRecord.isValidInsert(insertRecord,PK_FIELD,2);
  keyPKUpdateHeader=getPKUpdateOldKeyHeader(insertRecord);
  assertEquals(Integer.valueOf(1),((Struct)keyPKUpdateHeader.value()).getInt32(pk));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",752
855,"'-tryline","@Test @FixFor(DBZ-582) public void shouldReceiveChangesForUpdatesWithPKChangesWithoutTombstone() throws Exception {
  startConnector(config -> config.with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true).with(CommonConnectorConfig.TOMBSTONES_ON_DELETE,false));
  consumer=testConsumer(2);
  executeAndWait(UPDATE test_table SET text = 'update', pk = 2);
  String topicName=topicName(public.test_table);
  SourceRecord deleteRecord=consumer.remove();
  assertEquals(topicName,deleteRecord.topic());
  VerifyRecord.isValidDelete(deleteRecord,PK_FIELD,1);
  Header keyPKUpdateHeader=getPKUpdateNewKeyHeader(deleteRecord);
  assertEquals(Integer.valueOf(2),((Struct)keyPKUpdateHeader.value()).getInt32(pk));
  SourceRecord insertRecord=consumer.remove();
  assertEquals(topicName,insertRecord.topic());
  VerifyRecord.isValidInsert(insertRecord,PK_FIELD,2);
  keyPKUpdateHeader=getPKUpdateOldKeyHeader(insertRecord);
  assertEquals(Integer.valueOf(1),((Struct)keyPKUpdateHeader.value()).getInt32(pk));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",782
856,"'-tryline","@Test public void shouldReceiveChangesForDefaultValues() throws Exception {
  String statements=ALTER TABLE test_table REPLICA IDENTITY FULL; + ALTER TABLE test_table ADD COLUMN default_column TEXT DEFAULT 'default'; + INSERT INTO test_table (text) VALUES ('update');;
  startConnector();
  consumer=testConsumer(1);
  executeAndWait(statements);
  SourceRecord insertRecord=consumer.remove();
  assertEquals(topicName(public.test_table),insertRecord.topic());
  VerifyRecord.isValidInsert(insertRecord,PK_FIELD,2);
  List<SchemaAndValueField> expectedSchemaAndValues=Arrays.asList(new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,update),new SchemaAndValueField(default_column,SchemaBuilder.OPTIONAL_STRING_SCHEMA,default));
  assertRecordSchemaAndValues(expectedSchemaAndValues,insertRecord,Envelope.FieldName.AFTER);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",811
857,"'-tryline","@Test public void shouldReceiveChangesForTypeConstraints() throws Exception {
  String statements=ALTER TABLE test_table ADD COLUMN num_val NUMERIC(5,2); + ALTER TABLE test_table REPLICA IDENTITY FULL; + UPDATE test_table SET num_val = 123.45 WHERE pk = 1;;
  startConnector();
  consumer=testConsumer(1);
  executeAndWait(statements);
  SourceRecord updatedRecord=consumer.remove();
  String topicName=topicName(public.test_table);
  assertEquals(topicName,updatedRecord.topic());
  VerifyRecord.isValidUpdate(updatedRecord,PK_FIELD,1);
  List<SchemaAndValueField> expectedBefore=Collections.singletonList(new SchemaAndValueField(num_val,null,null));
  assertRecordSchemaAndValues(expectedBefore,updatedRecord,Envelope.FieldName.BEFORE);
  List<SchemaAndValueField> expectedAfter=Collections.singletonList(new SchemaAndValueField(num_val,Decimal.builder(2).parameter(TestHelper.PRECISION_PARAMETER_KEY,5).optional().build(),new BigDecimal(123.45)));
  assertRecordSchemaAndValues(expectedAfter,updatedRecord,Envelope.FieldName.AFTER);
  statements=ALTER TABLE test_table ALTER COLUMN num_val TYPE NUMERIC(6,1); + INSERT INTO test_table (pk,num_val) VALUES (2,123.41);;
  consumer.expects(1);
  executeAndWait(statements);
  updatedRecord=consumer.remove();
  VerifyRecord.isValidInsert(updatedRecord,PK_FIELD,2);
  assertRecordSchemaAndValues(Collections.singletonList(new SchemaAndValueField(num_val,Decimal.builder(1).parameter(TestHelper.PRECISION_PARAMETER_KEY,6).optional().build(),new BigDecimal(123.4))),updatedRecord,Envelope.FieldName.AFTER);
  statements=ALTER TABLE test_table ALTER COLUMN num_val TYPE NUMERIC; + INSERT INTO test_table (pk,num_val) VALUES (3,123.4567);;
  consumer.expects(1);
  executeAndWait(statements);
  updatedRecord=consumer.remove();
  final Struct dvs=new Struct(VariableScaleDecimal.schema());
  dvs.put(scale,4).put(value,new BigDecimal(123.4567).unscaledValue().toByteArray());
  VerifyRecord.isValidInsert(updatedRecord,PK_FIELD,3);
  assertRecordSchemaAndValues(Collections.singletonList(new SchemaAndValueField(num_val,VariableScaleDecimal.builder().optional().build(),dvs)),updatedRecord,Envelope.FieldName.AFTER);
  statements=ALTER TABLE test_table ALTER COLUMN num_val TYPE DECIMAL(12,4); + INSERT INTO test_table (pk,num_val) VALUES (4,2.48);;
  consumer.expects(1);
  executeAndWait(statements);
  updatedRecord=consumer.remove();
  VerifyRecord.isValidInsert(updatedRecord,PK_FIELD,4);
  assertRecordSchemaAndValues(Collections.singletonList(new SchemaAndValueField(num_val,Decimal.builder(4).parameter(TestHelper.PRECISION_PARAMETER_KEY,12).optional().build(),new BigDecimal(2.4800))),updatedRecord,Envelope.FieldName.AFTER);
  statements=ALTER TABLE test_table ALTER COLUMN num_val TYPE DECIMAL(12); + INSERT INTO test_table (pk,num_val) VALUES (5,1238);;
  consumer.expects(1);
  executeAndWait(statements);
  updatedRecord=consumer.remove();
  VerifyRecord.isValidInsert(updatedRecord,PK_FIELD,5);
  assertRecordSchemaAndValues(Collections.singletonList(new SchemaAndValueField(num_val,Decimal.builder(0).parameter(TestHelper.PRECISION_PARAMETER_KEY,12).optional().build(),new BigDecimal(1238))),updatedRecord,Envelope.FieldName.AFTER);
  statements=ALTER TABLE test_table ALTER COLUMN num_val TYPE DECIMAL; + INSERT INTO test_table (pk,num_val) VALUES (6,1225.1);;
  consumer.expects(1);
  executeAndWait(statements);
  updatedRecord=consumer.remove();
  final Struct dvs2=new Struct(VariableScaleDecimal.schema());
  dvs2.put(scale,1).put(value,new BigDecimal(1225.1).unscaledValue().toByteArray());
  VerifyRecord.isValidInsert(updatedRecord,PK_FIELD,6);
  assertRecordSchemaAndValues(Collections.singletonList(new SchemaAndValueField(num_val,VariableScaleDecimal.builder().optional().build(),dvs2)),updatedRecord,Envelope.FieldName.AFTER);
  statements=ALTER TABLE test_table ALTER COLUMN num_val SET NOT NULL; + INSERT INTO test_table (pk,num_val) VALUES (7,1976);;
  consumer.expects(1);
  executeAndWait(statements);
  updatedRecord=consumer.remove();
  dvs2.put(scale,0).put(value,new BigDecimal(1976).unscaledValue().toByteArray());
  VerifyRecord.isValidInsert(updatedRecord,PK_FIELD,7);
  assertRecordSchemaAndValues(Collections.singletonList(new SchemaAndValueField(num_val,VariableScaleDecimal.builder().build(),dvs2)),updatedRecord,Envelope.FieldName.AFTER);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",829
858,"'-tryline","@Test public void shouldReceiveChangesForDeletes() throws Exception {
  String statements=INSERT INTO test_table (text) VALUES ('insert2'); + DELETE FROM test_table WHERE pk > 0;;
  startConnector();
  consumer=testConsumer(5);
  executeAndWait(statements);
  String topicPrefix=public.test_table;
  String topicName=topicName(topicPrefix);
  assertRecordInserted(topicPrefix,PK_FIELD,2);
  SourceRecord record=consumer.remove();
  assertEquals(topicName,record.topic());
  VerifyRecord.isValidDelete(record,PK_FIELD,1);
  record=consumer.remove();
  assertEquals(topicName,record.topic());
  VerifyRecord.isValidTombstone(record,PK_FIELD,1);
  record=consumer.remove();
  assertEquals(topicName,record.topic());
  VerifyRecord.isValidDelete(record,PK_FIELD,2);
  record=consumer.remove();
  assertEquals(topicName,record.topic());
  VerifyRecord.isValidTombstone(record,PK_FIELD,2);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",935
859,"'-tryline","@Test @FixFor(DBZ-582) public void shouldReceiveChangesForDeletesWithoutTombstone() throws Exception {
  String statements=INSERT INTO test_table (text) VALUES ('insert2'); + DELETE FROM test_table WHERE pk > 0;;
  startConnector(config -> config.with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true).with(CommonConnectorConfig.TOMBSTONES_ON_DELETE,false));
  consumer=testConsumer(3);
  executeAndWait(statements);
  String topicPrefix=public.test_table;
  String topicName=topicName(topicPrefix);
  assertRecordInserted(topicPrefix,PK_FIELD,2);
  SourceRecord record=consumer.remove();
  assertEquals(topicName,record.topic());
  VerifyRecord.isValidDelete(record,PK_FIELD,1);
  record=consumer.remove();
  assertEquals(topicName,record.topic());
  VerifyRecord.isValidDelete(record,PK_FIELD,2);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",970
860,"'-tryline","@Test @SkipWhenDecoderPluginNameIs(value=PGOUTPUT,reason=A delete on a table with no primary key and default replica throws PSQLException as tables must have a PK) public void shouldReceiveChangesForDeletesDependingOnReplicaIdentity() throws Exception {
  String topicName=topicName(public.test_table);
  String statement=ALTER TABLE test_table REPLICA IDENTITY DEFAULT; + DELETE FROM test_table WHERE pk = 1;;
  startConnector(config -> config.with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true).with(CommonConnectorConfig.TOMBSTONES_ON_DELETE,false));
  consumer=testConsumer(1);
  executeAndWait(statement);
  SourceRecord record=consumer.remove();
  assertEquals(topicName,record.topic());
  VerifyRecord.isValidDelete(record,PK_FIELD,1);
  statement=ALTER TABLE test_table REPLICA IDENTITY FULL; + ALTER TABLE test_table DROP CONSTRAINT test_table_pkey CASCADE; + INSERT INTO test_table (pk, text) VALUES (2, 'insert2');+ DELETE FROM test_table WHERE pk = 2;;
  consumer.expects(2);
  executeAndWait(statement);
  assertRecordInserted(public.test_table,PK_FIELD,2);
  record=consumer.remove();
  assertEquals(topicName,record.topic());
  VerifyRecord.isValidDelete(record,PK_FIELD,2);
  statement=ALTER TABLE test_table REPLICA IDENTITY DEFAULT; + INSERT INTO test_table (pk, text) VALUES (3, 'insert3'); + DELETE FROM test_table WHERE pk = 3;;
  consumer.expects(1);
  executeAndWait(statement);
  assertRecordInserted(public.test_table,PK_FIELD,3);
  assertThat(consumer.isEmpty()).isTrue();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",997
861,"'-tryline","@Test public void shouldReceiveNumericTypeAsDouble() throws Exception {
  TestHelper.executeDDL(postgres_create_tables.ddl);
  startConnector(config -> config.with(PostgresConnectorConfig.DECIMAL_HANDLING_MODE,DecimalHandlingMode.DOUBLE));
  assertInsert(INSERT_NUMERIC_DECIMAL_TYPES_STMT,1,schemasAndValuesForDoubleEncodedNumericTypes());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1036
862,"'-tryline","@Test @FixFor(DBZ-611) public void shouldReceiveNumericTypeAsString() throws Exception {
  TestHelper.executeDDL(postgres_create_tables.ddl);
  startConnector(config -> config.with(PostgresConnectorConfig.DECIMAL_HANDLING_MODE,DecimalHandlingMode.STRING));
  assertInsert(INSERT_NUMERIC_DECIMAL_TYPES_STMT,1,schemasAndValuesForStringEncodedNumericTypes());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1045
863,"'-tryline","@Test @FixFor(DBZ-898) public void shouldReceiveHStoreTypeWithSingleValueAsMap() throws Exception {
  TestHelper.executeDDL(postgres_create_tables.ddl);
  startConnector(config -> config.with(PostgresConnectorConfig.HSTORE_HANDLING_MODE,PostgresConnectorConfig.HStoreHandlingMode.MAP));
  assertInsert(INSERT_HSTORE_TYPE_STMT,1,schemaAndValueFieldForMapEncodedHStoreType());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1055
864,"'-tryline","@Test @FixFor(DBZ-898) public void shouldReceiveHStoreTypeWithMultipleValuesAsMap() throws Exception {
  TestHelper.executeDDL(postgres_create_tables.ddl);
  startConnector(config -> config.with(PostgresConnectorConfig.HSTORE_HANDLING_MODE,PostgresConnectorConfig.HStoreHandlingMode.MAP));
  assertInsert(INSERT_HSTORE_TYPE_WITH_MULTIPLE_VALUES_STMT,1,schemaAndValueFieldForMapEncodedHStoreTypeWithMultipleValues());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1065
865,"'-tryline","@Test @FixFor(DBZ-898) public void shouldReceiveHStoreTypeWithNullValuesAsMap() throws Exception {
  TestHelper.executeDDL(postgres_create_tables.ddl);
  startConnector(config -> config.with(PostgresConnectorConfig.HSTORE_HANDLING_MODE,PostgresConnectorConfig.HStoreHandlingMode.MAP));
  assertInsert(INSERT_HSTORE_TYPE_WITH_NULL_VALUES_STMT,1,schemaAndValueFieldForMapEncodedHStoreTypeWithNullValues());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1075
866,"'-tryline","@Test @FixFor(DBZ-898) public void shouldReceiveHStoreTypeWithSpecialCharactersInValuesAsMap() throws Exception {
  TestHelper.executeDDL(postgres_create_tables.ddl);
  startConnector(config -> config.with(PostgresConnectorConfig.HSTORE_HANDLING_MODE,PostgresConnectorConfig.HStoreHandlingMode.MAP));
  assertInsert(INSERT_HSTORE_TYPE_WITH_SPECIAL_CHAR_STMT,1,schemaAndValueFieldForMapEncodedHStoreTypeWithSpecialCharacters());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1085
867,"'-tryline","@Test @FixFor(DBZ-898) public void shouldReceiveHStoreTypeAsJsonString() throws Exception {
  TestHelper.executeDDL(postgres_create_tables.ddl);
  consumer=testConsumer(1);
  startConnector(config -> config.with(PostgresConnectorConfig.HSTORE_HANDLING_MODE,PostgresConnectorConfig.HStoreHandlingMode.JSON));
  assertInsert(INSERT_HSTORE_TYPE_STMT,1,schemaAndValueFieldForJsonEncodedHStoreType());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1095
868,"'-tryline","@Test @FixFor(DBZ-898) public void shouldReceiveHStoreTypeWithMultipleValuesAsJsonString() throws Exception {
  TestHelper.executeDDL(postgres_create_tables.ddl);
  startConnector(config -> config.with(PostgresConnectorConfig.HSTORE_HANDLING_MODE,PostgresConnectorConfig.HStoreHandlingMode.JSON));
  assertInsert(INSERT_HSTORE_TYPE_WITH_MULTIPLE_VALUES_STMT,1,schemaAndValueFieldForJsonEncodedHStoreTypeWithMultipleValues());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1106
869,"'-tryline","@Test @FixFor(DBZ-898) public void shouldReceiveHStoreTypeWithSpecialValuesInJsonString() throws Exception {
  TestHelper.executeDDL(postgres_create_tables.ddl);
  startConnector(config -> config.with(PostgresConnectorConfig.HSTORE_HANDLING_MODE,PostgresConnectorConfig.HStoreHandlingMode.JSON));
  assertInsert(INSERT_HSTORE_TYPE_WITH_SPECIAL_CHAR_STMT,1,schemaAndValueFieldForJsonEncodedHStoreTypeWithSpcialCharacters());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1116
870,"'-tryline","@Test @FixFor(DBZ-898) public void shouldReceiveHStoreTypeWithNullValuesAsJsonString() throws Exception {
  TestHelper.executeDDL(postgres_create_tables.ddl);
  startConnector(config -> config.with(PostgresConnectorConfig.HSTORE_HANDLING_MODE,PostgresConnectorConfig.HStoreHandlingMode.JSON));
  assertInsert(INSERT_HSTORE_TYPE_WITH_NULL_VALUES_STMT,1,schemaAndValueFieldForJsonEncodedHStoreTypeWithNullValues());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1126
871,"'-tryline","@Test @FixFor(DBZ-1814) public void shouldReceiveByteaBytes() throws Exception {
  TestHelper.executeDDL(postgres_create_tables.ddl);
  startConnector(config -> config.with(PostgresConnectorConfig.BINARY_HANDLING_MODE,PostgresConnectorConfig.BinaryHandlingMode.BYTES));
  assertInsert(INSERT_BYTEA_BINMODE_STMT,1,schemaAndValueForByteaBytes());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1136
872,"'-tryline","@Test @FixFor(DBZ-1814) public void shouldReceiveByteaBase64String() throws Exception {
  TestHelper.executeDDL(postgres_create_tables.ddl);
  startConnector(config -> config.with(PostgresConnectorConfig.BINARY_HANDLING_MODE,PostgresConnectorConfig.BinaryHandlingMode.BASE64));
  assertInsert(INSERT_BYTEA_BINMODE_STMT,1,schemaAndValueForByteaBase64());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1146
873,"'-tryline","@Test @FixFor(DBZ-1814) public void shouldReceiveByteaHexString() throws Exception {
  TestHelper.executeDDL(postgres_create_tables.ddl);
  startConnector(config -> config.with(PostgresConnectorConfig.BINARY_HANDLING_MODE,PostgresConnectorConfig.BinaryHandlingMode.HEX));
  assertInsert(INSERT_BYTEA_BINMODE_STMT,1,schemaAndValueForByteaHex());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1156
874,"'-tryline","@Test @FixFor(DBZ-1814) public void shouldReceiveUnknownTypeAsBytes() throws Exception {
  TestHelper.executeDDL(postgres_create_tables.ddl);
  startConnector(config -> config.with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true));
  assertInsert(INSERT_CIRCLE_STMT,1,schemaAndValueForUnknownColumnBytes());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1166
875,"'-tryline","@Test @FixFor(DBZ-1814) public void shouldReceiveUnknownTypeAsBase64() throws Exception {
  TestHelper.executeDDL(postgres_create_tables.ddl);
  startConnector(config -> config.with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true).with(PostgresConnectorConfig.BINARY_HANDLING_MODE,BinaryHandlingMode.BASE64));
  assertInsert(INSERT_CIRCLE_STMT,1,schemaAndValueForUnknownColumnBase64());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1176
876,"'-tryline","@Test @FixFor(DBZ-1814) public void shouldReceiveUnknownTypeAsHex() throws Exception {
  TestHelper.executeDDL(postgres_create_tables.ddl);
  startConnector(config -> config.with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true).with(PostgresConnectorConfig.BINARY_HANDLING_MODE,BinaryHandlingMode.HEX));
  assertInsert(INSERT_CIRCLE_STMT,1,schemaAndValueForUnknownColumnHex());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1187
877,"'-tryline","@Test @FixFor(DBZ-259) public void shouldProcessIntervalDelete() throws Exception {
  final String statements=INSERT INTO table_with_interval VALUES (default, 'Foo', default); + INSERT INTO table_with_interval VALUES (default, 'Bar', default); + DELETE FROM table_with_interval WHERE id = 1;;
  startConnector();
  consumer.expects(4);
  executeAndWait(statements);
  final String topicPrefix=public.table_with_interval;
  final String topicName=topicName(topicPrefix);
  final String pk=id;
  assertRecordInserted(topicPrefix,pk,1);
  assertRecordInserted(topicPrefix,pk,2);
  SourceRecord record=consumer.remove();
  assertEquals(topicName,record.topic());
  VerifyRecord.isValidDelete(record,pk,1);
  record=consumer.remove();
  assertEquals(topicName,record.topic());
  VerifyRecord.isValidTombstone(record,pk,1);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1198
878,"'-tryline","@Test @FixFor(DBZ-644) public void shouldPropagateSourceColumnTypeToSchemaParameter() throws Exception {
  TestHelper.executeDDL(postgres_create_tables.ddl);
  startConnector(config -> config.with(column.propagate.source.type,.*vc.*));
  assertInsert(INSERT_STRING_TYPES_STMT,1,schemasAndValuesForStringTypesWithSourceColumnTypeInfo());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1226
879,"'-tryline","@Test @FixFor(DBZ-1073) public void shouldPropagateSourceColumnTypeScaleToSchemaParameter() throws Exception {
  TestHelper.executeDDL(postgres_create_tables.ddl);
  startConnector(config -> config.with(column.propagate.source.type,.*(d|dzs)).with(PostgresConnectorConfig.DECIMAL_HANDLING_MODE,PostgresConnectorConfig.DecimalHandlingMode.DOUBLE));
  assertInsert(INSERT_NUMERIC_DECIMAL_TYPES_STMT,1,schemasAndValuesForNumericTypesWithSourceColumnTypeInfo());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1236
880,"'-tryline","@Test @FixFor(DBZ-800) public void shouldReceiveHeartbeatAlsoWhenChangingNonWhitelistedTable() throws Exception {
  startConnector(config -> config.with(Heartbeat.HEARTBEAT_INTERVAL,100).with(PostgresConnectorConfig.POLL_INTERVAL_MS,50).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,s1\\.b).with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER),false);
  waitForStreamingToStart();
  String statement=CREATE SCHEMA s1; + CREATE TABLE s1.a (pk SERIAL, aa integer, PRIMARY KEY(pk)); + CREATE TABLE s1.b (pk SERIAL, bb integer, PRIMARY KEY(pk));+ INSERT INTO s1.b (bb) VALUES (22);;
  TestHelper.execute(statement);
  try {
    final AtomicInteger heartbeatCount=new AtomicInteger();
    final AtomicBoolean receivedInsert=new AtomicBoolean();
    Awaitility.await().atMost(TestHelper.waitTimeForRecords() * 5,TimeUnit.SECONDS).until(() -> {
      final SourceRecord record=consumeRecord();
      if (record != null) {
        if (record.topic().endsWith(s1.b)) {
          assertRecordInserted(record,s1.b,PK_FIELD,1);
          receivedInsert.set(true);
        }
 else {
          assertHeartBeatRecord(record);
          heartbeatCount.incrementAndGet();
        }
      }
      return receivedInsert.get() && heartbeatCount.get() > 0;
    }
);
  }
 catch (  ConditionTimeoutException e) {
    fail(Failed to receive insert and at least 1 heartbeat message,e);
  }
  final Set<Long> lsn=new HashSet<>();
  TestHelper.execute(INSERT INTO s1.a (aa) VALUES (11););
  try {
    Awaitility.await().atMost(TestHelper.waitTimeForRecords() * 5,TimeUnit.SECONDS).until(() -> {
      final SourceRecord record=consumeRecord();
      if (record != null) {
        lsn.add((Long)record.sourceOffset().get(lsn));
        return lsn.size() >= 2;
      }
      return false;
    }
);
  }
 catch (  ConditionTimeoutException e) {
    fail(Failed to detect at least 2 LSN changes,e);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1248
881,"'-tryline","@Test @FixFor(DBZ-1565) public void shouldWarnOnMissingHeartbeatForFilteredEvents() throws Exception {
  final LogInterceptor logInterceptor=new LogInterceptor();
  startConnector(config -> config.with(PostgresConnectorConfig.POLL_INTERVAL_MS,50).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,s1\\.b).with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER),false);
  waitForStreamingToStart();
  String statement=CREATE SCHEMA s1; + CREATE TABLE s1.a (pk SERIAL, aa integer, PRIMARY KEY(pk)); + CREATE TABLE s1.b (pk SERIAL, bb integer, PRIMARY KEY(pk));+ INSERT INTO s1.a (aa) VALUES (11);+ INSERT INTO s1.b (bb) VALUES (22);;
  consumer=testConsumer(1);
  executeAndWait(statement);
  final int filteredCount=10_100;
  TestHelper.execute(IntStream.range(0,filteredCount).mapToObj(x -> INSERT INTO s1.a (pk) VALUES (default);).collect(Collectors.joining()));
  Awaitility.await().alias(WAL growing log message).pollInterval(1,TimeUnit.SECONDS).atMost(5 * TestHelper.waitTimeForRecords(),TimeUnit.SECONDS).until(() -> logInterceptor.containsWarnMessage(Received 10001 events which were all filtered out, so no offset could be committed. This prevents the replication slot from acknowledging the processed WAL offsets, causing a growing backlog of non-removeable WAL segments on the database server. Consider to either adjust your filter configuration or enable heartbeat events (via the heartbeat.interval.ms option) to avoid this situation.));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1305
882,"'-tryline","@Test @FixFor(DBZ-911) @SkipWhenDecoderPluginNameIs(value=PGOUTPUT,reason=Decoder synchronizes all schema columns when processing relation messages) public void shouldNotRefreshSchemaOnUnchangedToastedData() throws Exception {
  startConnector(config -> config.with(PostgresConnectorConfig.SCHEMA_REFRESH_MODE,PostgresConnectorConfig.SchemaRefreshMode.COLUMNS_DIFF_EXCLUDE_UNCHANGED_TOAST));
  String toastedValue=RandomStringUtils.randomAlphanumeric(10000);
  String statement=ALTER TABLE test_table ADD COLUMN not_toast integer; INSERT INTO test_table (not_toast, text) values (10, ' + toastedValue + ');
  consumer=testConsumer(1);
  executeAndWait(statement);
  SourceRecord record=consumer.remove();
  List<SchemaAndValueField> expectedAfter=Arrays.asList(new SchemaAndValueField(not_toast,SchemaBuilder.OPTIONAL_INT32_SCHEMA,10),new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,toastedValue));
  assertRecordSchemaAndValues(expectedAfter,record,Envelope.FieldName.AFTER);
  statement=ALTER TABLE test_table DROP COLUMN text; update test_table set not_toast = 5 where not_toast = 10;
  consumer.expects(1);
  executeAndWait(statement);
  assertWithTask(task -> {
    Table tbl=((PostgresConnectorTask)task).getTaskContext().schema().tableFor(TableId.parse(public.test_table));
    assertEquals(Arrays.asList(pk,text,not_toast),tbl.retrieveColumnNames());
  }
);
  TestHelper.assertNoOpenTransactions();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1335
883,"'-tryline","@Test @FixFor(DBZ-911) @SkipWhenDecoderPluginNameIsNot(value=SkipWhenDecoderPluginNameIsNot.DecoderPluginName.PGOUTPUT,reason=Decoder synchronizes all schema columns when processing relation messages) public void shouldRefreshSchemaOnUnchangedToastedDataWhenSchemaChanged() throws Exception {
  startConnector(config -> config.with(PostgresConnectorConfig.SCHEMA_REFRESH_MODE,PostgresConnectorConfig.SchemaRefreshMode.COLUMNS_DIFF_EXCLUDE_UNCHANGED_TOAST));
  String toastedValue=RandomStringUtils.randomAlphanumeric(10000);
  String statement=ALTER TABLE test_table ADD COLUMN not_toast integer; INSERT INTO test_table (not_toast, text) values (10, ' + toastedValue + ');
  consumer=testConsumer(1);
  executeAndWait(statement);
  SourceRecord record=consumer.remove();
  List<SchemaAndValueField> expectedAfter=Arrays.asList(new SchemaAndValueField(not_toast,SchemaBuilder.OPTIONAL_INT32_SCHEMA,10),new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,toastedValue));
  assertRecordSchemaAndValues(expectedAfter,record,Envelope.FieldName.AFTER);
  statement=ALTER TABLE test_table DROP COLUMN text; update test_table set not_toast = 5 where not_toast = 10;
  consumer.expects(1);
  executeAndWait(statement);
  assertWithTask(task -> {
    Table tbl=((PostgresConnectorTask)task).getTaskContext().schema().tableFor(TableId.parse(public.test_table));
    assertEquals(Arrays.asList(pk,not_toast),tbl.retrieveColumnNames());
  }
);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1371
884,"'-tryline","@Test @FixFor(DBZ-842) public void shouldNotPropagateUnchangedToastedData() throws Exception {
  startConnector(config -> config.with(PostgresConnectorConfig.SCHEMA_REFRESH_MODE,PostgresConnectorConfig.SchemaRefreshMode.COLUMNS_DIFF_EXCLUDE_UNCHANGED_TOAST));
  final String toastedValue1=RandomStringUtils.randomAlphanumeric(10000);
  final String toastedValue2=RandomStringUtils.randomAlphanumeric(10000);
  final String toastedValue3=RandomStringUtils.randomAlphanumeric(10000);
  String statement=ALTER TABLE test_table ADD COLUMN not_toast integer; + ALTER TABLE test_table ADD COLUMN mandatory_text TEXT NOT NULL DEFAULT ''; + ALTER TABLE test_table ALTER COLUMN mandatory_text SET STORAGE EXTENDED;+ ALTER TABLE test_table ALTER COLUMN mandatory_text SET DEFAULT ' + toastedValue3 + ';+ INSERT INTO test_table (not_toast, text, mandatory_text) values (10, '+ toastedValue1+ ', '+ toastedValue1+ ');+ INSERT INTO test_table (not_toast, text, mandatory_text) values (10, '+ toastedValue2+ ', '+ toastedValue2+ ');;
  consumer=testConsumer(2);
  executeAndWait(statement);
  assertRecordSchemaAndValues(Arrays.asList(new SchemaAndValueField(not_toast,SchemaBuilder.OPTIONAL_INT32_SCHEMA,10),new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,toastedValue1),new SchemaAndValueField(mandatory_text,SchemaBuilder.STRING_SCHEMA,toastedValue1)),consumer.remove(),Envelope.FieldName.AFTER);
  assertRecordSchemaAndValues(Arrays.asList(new SchemaAndValueField(not_toast,SchemaBuilder.OPTIONAL_INT32_SCHEMA,10),new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,toastedValue2),new SchemaAndValueField(mandatory_text,SchemaBuilder.STRING_SCHEMA,toastedValue2)),consumer.remove(),Envelope.FieldName.AFTER);
  statement=UPDATE test_table SET not_toast = 2; + UPDATE test_table SET not_toast = 3;;
  consumer.expects(6);
  executeAndWait(statement);
  consumer.process(record -> {
    assertWithTask(task -> {
      Table tbl=((PostgresConnectorTask)task).getTaskContext().schema().tableFor(TableId.parse(public.test_table));
      assertEquals(Arrays.asList(pk,text,not_toast,mandatory_text),tbl.retrieveColumnNames());
    }
);
  }
);
  assertRecordSchemaAndValues(Arrays.asList(new SchemaAndValueField(not_toast,SchemaBuilder.OPTIONAL_INT32_SCHEMA,2),new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,insert),new SchemaAndValueField(mandatory_text,SchemaBuilder.STRING_SCHEMA,)),consumer.remove(),Envelope.FieldName.AFTER);
  assertRecordSchemaAndValues(Arrays.asList(new SchemaAndValueField(not_toast,SchemaBuilder.OPTIONAL_INT32_SCHEMA,2),new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,DecoderDifferences.optionalToastedValuePlaceholder()),new SchemaAndValueField(mandatory_text,SchemaBuilder.STRING_SCHEMA,DecoderDifferences.mandatoryToastedValuePlaceholder())),consumer.remove(),Envelope.FieldName.AFTER);
  assertRecordSchemaAndValues(Arrays.asList(new SchemaAndValueField(not_toast,SchemaBuilder.OPTIONAL_INT32_SCHEMA,2),new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,DecoderDifferences.optionalToastedValuePlaceholder()),new SchemaAndValueField(mandatory_text,SchemaBuilder.STRING_SCHEMA,DecoderDifferences.mandatoryToastedValuePlaceholder())),consumer.remove(),Envelope.FieldName.AFTER);
  assertRecordSchemaAndValues(Arrays.asList(new SchemaAndValueField(not_toast,SchemaBuilder.OPTIONAL_INT32_SCHEMA,3),new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,insert),new SchemaAndValueField(mandatory_text,SchemaBuilder.STRING_SCHEMA,)),consumer.remove(),Envelope.FieldName.AFTER);
  assertRecordSchemaAndValues(Arrays.asList(new SchemaAndValueField(not_toast,SchemaBuilder.OPTIONAL_INT32_SCHEMA,3),new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,DecoderDifferences.optionalToastedValuePlaceholder()),new SchemaAndValueField(mandatory_text,SchemaBuilder.STRING_SCHEMA,DecoderDifferences.mandatoryToastedValuePlaceholder())),consumer.remove(),Envelope.FieldName.AFTER);
  assertRecordSchemaAndValues(Arrays.asList(new SchemaAndValueField(not_toast,SchemaBuilder.OPTIONAL_INT32_SCHEMA,3),new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,DecoderDifferences.optionalToastedValuePlaceholder()),new SchemaAndValueField(mandatory_text,SchemaBuilder.STRING_SCHEMA,DecoderDifferences.mandatoryToastedValuePlaceholder())),consumer.remove(),Envelope.FieldName.AFTER);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1405
885,"'-tryline","@Test @FixFor(DBZ-1029) public void shouldReceiveChangesForTableWithoutPrimaryKey() throws Exception {
  TestHelper.execute(DROP TABLE IF EXISTS test_table;,CREATE TABLE test_table (id SERIAL, text TEXT);,ALTER TABLE test_table REPLICA IDENTITY FULL);
  startConnector(Function.identity(),false);
  consumer=testConsumer(1);
  String statement=INSERT INTO test_table (text) VALUES ('a');;
  assertInsert(statement,Arrays.asList(new SchemaAndValueField(id,SchemaBuilder.INT32_SCHEMA,1),new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,a)));
  consumer.expects(1);
  executeAndWait(UPDATE test_table set text='b' WHERE id=1);
  SourceRecord updatedRecord=consumer.remove();
  VerifyRecord.isValidUpdate(updatedRecord);
  List<SchemaAndValueField> expectedBefore=Arrays.asList(new SchemaAndValueField(id,SchemaBuilder.INT32_SCHEMA,1),new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,a));
  assertRecordSchemaAndValues(expectedBefore,updatedRecord,Envelope.FieldName.BEFORE);
  List<SchemaAndValueField> expectedAfter=Arrays.asList(new SchemaAndValueField(id,SchemaBuilder.INT32_SCHEMA,1),new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,b));
  assertRecordSchemaAndValues(expectedAfter,updatedRecord,Envelope.FieldName.AFTER);
  consumer.expects(2);
  executeAndWait(DELETE FROM test_table WHERE id=1);
  SourceRecord deletedRecord=consumer.remove();
  VerifyRecord.isValidDelete(deletedRecord);
  expectedBefore=Arrays.asList(new SchemaAndValueField(id,SchemaBuilder.INT32_SCHEMA,1),new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,b));
  assertRecordSchemaAndValues(expectedBefore,deletedRecord,Envelope.FieldName.BEFORE);
  expectedAfter=null;
  assertRecordSchemaAndValues(expectedAfter,deletedRecord,Envelope.FieldName.AFTER);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1476
886,"'-tryline","@Test() @FixFor(DBZ-1130) @SkipWhenDecoderPluginNameIsNot(value=WAL2JSON,reason=WAL2JSON specific: Pass 'add-tables' stream parameter and verify it acts as an include list) public void testPassingStreamParams() throws Exception {
  startConnector(config -> config.with(PostgresConnectorConfig.STREAM_PARAMS,add-tables=s1.should_stream));
  String statement=CREATE SCHEMA s1; + CREATE TABLE s1.should_stream (pk SERIAL, aa integer, PRIMARY KEY(pk)); + CREATE TABLE s1.should_not_stream (pk SERIAL, aa integer, PRIMARY KEY(pk));+ INSERT INTO s1.should_not_stream (aa) VALUES (456);+ INSERT INTO s1.should_stream (aa) VALUES (123);;
  consumer=testConsumer(1);
  executeAndWait(statement);
  assertRecordInserted(s1.should_stream,PK_FIELD,1);
  assertThat(consumer.isEmpty()).isTrue();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1526
887,"'-tryline","@Test() @FixFor(DBZ-1130) @SkipWhenDecoderPluginNameIsNot(value=WAL2JSON,reason=WAL2JSON specific: Pass multiple stream parameters and values verifying they work) public void testPassingStreamMultipleParams() throws Exception {
  startConnector(config -> config.with(PostgresConnectorConfig.STREAM_PARAMS,add-tables=s1.should_stream,s2.*;filter-tables=s2.should_not_stream));
  String statement=CREATE SCHEMA s1; + CREATE SCHEMA s2; + CREATE TABLE s1.should_stream (pk SERIAL, aa integer, PRIMARY KEY(pk));+ CREATE TABLE s2.should_stream (pk SERIAL, aa integer, PRIMARY KEY(pk));+ CREATE TABLE s1.should_not_stream (pk SERIAL, aa integer, PRIMARY KEY(pk));+ CREATE TABLE s2.should_not_stream (pk SERIAL, aa integer, PRIMARY KEY(pk));+ INSERT INTO s1.should_not_stream (aa) VALUES (456);+ INSERT INTO s2.should_not_stream (aa) VALUES (111);+ INSERT INTO s1.should_stream (aa) VALUES (123);+ INSERT INTO s2.should_stream (aa) VALUES (999);;
  consumer=testConsumer(2);
  executeAndWait(statement);
  assertRecordInserted(s1.should_stream,PK_FIELD,1);
  assertRecordInserted(s2.should_stream,PK_FIELD,1);
  assertThat(consumer.isEmpty()).isTrue();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1549
888,"'-tryline","@Test @FixFor(DBZ-1146) public void shouldReceiveChangesForReplicaIdentityFullTableWithToastedValueTableFromSnapshot() throws Exception {
  testReceiveChangesForReplicaIdentityFullTableWithToastedValue(SchemaRefreshMode.COLUMNS_DIFF_EXCLUDE_UNCHANGED_TOAST,true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1576
889,"'-tryline","@Test @FixFor(DBZ-1146) public void shouldReceiveChangesForReplicaIdentityFullTableWithToastedValueTableFromStreaming() throws Exception {
  testReceiveChangesForReplicaIdentityFullTableWithToastedValue(SchemaRefreshMode.COLUMNS_DIFF_EXCLUDE_UNCHANGED_TOAST,false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1582
890,"'-tryline","@Test @FixFor(DBZ-1146) public void shouldReceiveChangesForReplicaIdentityFullTableWithToastedValueTableFromSnapshotFullDiff() throws Exception {
  testReceiveChangesForReplicaIdentityFullTableWithToastedValue(SchemaRefreshMode.COLUMNS_DIFF,true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1588
891,"'-tryline","@Test @FixFor(DBZ-1146) public void shouldReceiveChangesForReplicaIdentityFullTableWithToastedValueTableFromStreamingFullDiff() throws Exception {
  testReceiveChangesForReplicaIdentityFullTableWithToastedValue(SchemaRefreshMode.COLUMNS_DIFF,false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1594
892,"'-tryline","@Test() @FixFor(DBZ-1181) public void testEmptyChangesProducesHeartbeat() throws Exception {
  startConnector(config -> config.with(Heartbeat.HEARTBEAT_INTERVAL,100));
  waitForStreamingToStart();
  TestHelper.execute(DROP TABLE IF EXISTS test_table; + CREATE TABLE test_table (id SERIAL, text TEXT); + INSERT INTO test_table (text) VALUES ('mydata'););
  Awaitility.await().atMost(TestHelper.waitTimeForRecords() * 10,TimeUnit.SECONDS).until(() -> {
    final SourceRecord record=consumeRecord();
    return record != null && Envelope.isEnvelopeSchema(record.valueSchema());
  }
);
  final Set<Long> lsns=new HashSet<>();
  Awaitility.await().atMost(TestHelper.waitTimeForRecords() * 10,TimeUnit.SECONDS).until(() -> {
    final SourceRecord record=consumeRecord();
    if (record == null) {
      return false;
    }
    Assertions.assertThat(record.valueSchema().name()).endsWith(.Heartbeat);
    lsns.add((Long)record.sourceOffset().get(lsn));
    return true;
  }
);
  String statement=CREATE SCHEMA s1;;
  TestHelper.execute(statement);
  Awaitility.await().atMost(TestHelper.waitTimeForRecords() * 10,TimeUnit.SECONDS).until(() -> {
    final SourceRecord record=consumeRecord();
    Assertions.assertThat(record.valueSchema().name()).endsWith(.Heartbeat);
    lsns.add((Long)record.sourceOffset().get(lsn));
    return lsns.size() == 2;
  }
);
  assertThat(consumer.isEmpty()).isTrue();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1600
893,"'-tryline","@Test @FixFor(DBZ-1082) public void shouldHaveNoXminWhenNotEnabled() throws Exception {
  startConnector(config -> config.with(PostgresConnectorConfig.XMIN_FETCH_INTERVAL,0));
  TestHelper.execute(ALTER TABLE test_table REPLICA IDENTITY DEFAULT;);
  String statement=INSERT INTO test_table (text) VALUES ('no_xmin');;
  executeAndWait(statement);
  SourceRecord rec=assertRecordInserted(public.test_table,PK_FIELD,2);
  assertSourceInfo(rec,postgres,public,test_table);
  Struct source=((Struct)rec.value()).getStruct(source);
  assertThat(source.getInt64(xmin)).isNull();
  assertThat(consumer.isEmpty()).isTrue();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1648
894,"'-tryline","@Test @FixFor(DBZ-1082) public void shouldHaveXminWhenEnabled() throws Exception {
  startConnector(config -> config.with(PostgresConnectorConfig.XMIN_FETCH_INTERVAL,10));
  TestHelper.execute(ALTER TABLE test_table REPLICA IDENTITY DEFAULT;);
  String statement=INSERT INTO test_table (text) VALUES ('with_xmin');;
  executeAndWait(statement);
  SourceRecord rec=assertRecordInserted(public.test_table,PK_FIELD,2);
  assertSourceInfo(rec,postgres,public,test_table);
  Struct source=((Struct)rec.value()).getStruct(source);
  assertThat(source.getInt64(xmin)).isGreaterThan(0L);
  assertThat(consumer.isEmpty()).isTrue();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1667
895,"'-tryline","@Test public void shouldProcessLargerTx() throws Exception {
  Testing.Print.disable();
  final int numberOfEvents=1000;
  startConnector();
  waitForStreamingToStart();
  final String topicPrefix=public.test_table;
  final String topicName=topicName(topicPrefix);
  final Stopwatch stopwatch=Stopwatch.reusable();
  consumer=testConsumer(numberOfEvents);
  stopwatch.start();
  executeAndWait(IntStream.rangeClosed(2,numberOfEvents + 1).boxed().map(x -> INSERT INTO test_table (text) VALUES ('insert + x + ')).collect(Collectors.joining(;)));
  stopwatch.stop();
  final long firstRun=stopwatch.durations().statistics().getTotal().toMillis();
  logger.info(Single tx duration = {} ms,firstRun);
  for (int i=0; i < numberOfEvents; i++) {
    SourceRecord record=consumer.remove();
    assertEquals(topicName,record.topic());
    VerifyRecord.isValidInsert(record,PK_FIELD,i + 2);
  }
  consumer.expects(numberOfEvents);
  IntStream.rangeClosed(2,numberOfEvents + 1).forEach(x -> TestHelper.execute(INSERT INTO test_table (text) VALUES ('insert + x + ')));
  stopwatch.start();
  consumer.await(3 * firstRun,TimeUnit.MILLISECONDS);
  stopwatch.stop();
  for (int i=0; i < numberOfEvents; i++) {
    SourceRecord record=consumer.remove();
    assertEquals(topicName,record.topic());
    VerifyRecord.isValidInsert(record,PK_FIELD,i + 1002);
  }
  logger.info(Many tx duration = {} ms,stopwatch.durations().statistics().getTotal().toMillis());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1686
896,"'-tryline","@Test @FixFor(DBZ-1824) @SkipWhenDecoderPluginNameIs(value=SkipWhenDecoderPluginNameIs.DecoderPluginName.WAL2JSON,reason=wal2json cannot resume transaction in the middle of processing) public void stopInTheMiddleOfTxAndResume() throws Exception {
  Testing.Print.enable();
  final int numberOfEvents=50;
  final int STOP_ID=20;
  startConnector(config -> config.with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,false),true,record -> {
    if (!test_server.public.test_table.Envelope.equals(record.valueSchema().name())) {
      return false;
    }
    final Struct envelope=(Struct)record.value();
    final Struct after=envelope.getStruct(after);
    final Integer pk=after.getInt32(pk);
    return pk == STOP_ID;
  }
);
  waitForStreamingToStart();
  final String topicPrefix=public.test_table;
  final String topicName=topicName(topicPrefix);
  final int expectFirstRun=STOP_ID - 2;
  final int expectSecondRun=numberOfEvents - STOP_ID;
  consumer=testConsumer(expectFirstRun);
  executeAndWait(IntStream.rangeClosed(2,numberOfEvents + 1).boxed().map(x -> INSERT INTO test_table (text) VALUES ('insert + x + ')).collect(Collectors.joining(;)));
  for (int i=0; i < expectFirstRun; i++) {
    SourceRecord record=consumer.remove();
    assertEquals(topicName,record.topic());
    VerifyRecord.isValidInsert(record,PK_FIELD,i + 2);
  }
  stopConnector();
  startConnector(Function.identity(),false);
  consumer.expects(expectSecondRun);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  for (int i=0; i < expectSecondRun; i++) {
    SourceRecord record=consumer.remove();
    assertEquals(topicName,record.topic());
    VerifyRecord.isValidInsert(record,PK_FIELD,STOP_ID + i);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1732
897,"'-tryline","@Test @FixFor(DBZ-2397) @SkipWhenDecoderPluginNameIs(value=SkipWhenDecoderPluginNameIs.DecoderPluginName.WAL2JSON,reason=wal2json cannot resume transaction in the middle of processing) public void restartConnectorInTheMiddleOfUncommittedTx() throws Exception {
  Testing.Print.enable();
  final PostgresConnection tx1Connection=TestHelper.create();
  tx1Connection.setAutoCommit(false);
  final PostgresConnection tx2Connection=TestHelper.create();
  tx2Connection.setAutoCommit(true);
  startConnector(config -> config.with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,false),true);
  waitForStreamingToStart();
  tx1Connection.executeWithoutCommitting(INSERT INTO test_table (text) VALUES ('tx-1-1'));
  tx2Connection.execute(INSERT INTO test_table (text) VALUES ('tx-2-1'));
  consumer=testConsumer(1);
  consumer.await(TestHelper.waitTimeForRecords(),TimeUnit.SECONDS);
  assertThat(((Struct)consumer.remove().value()).getStruct(after).getString(text)).isEqualTo(tx-2-1);
  stopConnector();
  startConnector(Function.identity(),false);
  waitForStreamingToStart();
  tx1Connection.executeWithoutCommitting(INSERT INTO test_table (text) VALUES ('tx-1-2'));
  tx2Connection.execute(INSERT INTO test_table (text) VALUES ('tx-2-2'));
  tx1Connection.executeWithoutCommitting(INSERT INTO test_table (text) VALUES ('tx-1-3'));
  tx2Connection.execute(INSERT INTO test_table (text) VALUES ('tx-2-3'));
  tx1Connection.commit();
  consumer=testConsumer(5);
  consumer.await(TestHelper.waitTimeForRecords(),TimeUnit.SECONDS);
  assertThat(((Struct)consumer.remove().value()).getStruct(after).getString(text)).isEqualTo(tx-2-2);
  assertThat(((Struct)consumer.remove().value()).getStruct(after).getString(text)).isEqualTo(tx-2-3);
  assertThat(((Struct)consumer.remove().value()).getStruct(after).getString(text)).isEqualTo(tx-1-1);
  assertThat(((Struct)consumer.remove().value()).getStruct(after).getString(text)).isEqualTo(tx-1-2);
  assertThat(((Struct)consumer.remove().value()).getStruct(after).getString(text)).isEqualTo(tx-1-3);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1783
898,"'-tryline","@Test @FixFor(DBZ-1730) public void shouldStartConsumingFromSlotLocation() throws Exception {
  Testing.Print.enable();
  startConnector(config -> config.with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,false).with(EmbeddedEngine.OFFSET_STORAGE,MemoryOffsetBackingStore.class),true);
  waitForStreamingToStart();
  consumer=testConsumer(1);
  executeAndWait(INSERT INTO test_table (text) VALUES ('insert2'));
  consumer.remove();
  stopConnector();
  TestHelper.execute(INSERT INTO test_table (text) VALUES ('insert3');,INSERT INTO test_table (text) VALUES ('insert4'));
  startConnector(config -> config.with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,true).with(PostgresConnectorConfig.SNAPSHOT_MODE,PostgresConnectorConfig.SnapshotMode.NEVER).with(EmbeddedEngine.OFFSET_STORAGE,MemoryOffsetBackingStore.class),false);
  final boolean streaming=TestHelper.decoderPlugin().name().toLowerCase().endsWith(streaming);
  consumer.expects(streaming ? 2 : 3);
  consumer.await(TestHelper.waitTimeForRecords() * 5,TimeUnit.SECONDS);
  if (!streaming) {
    Assertions.assertThat(((Struct)consumer.remove().value()).getStruct(after).getString(text)).isEqualTo(insert2);
  }
  Assertions.assertThat(((Struct)consumer.remove().value()).getStruct(after).getString(text)).isEqualTo(insert3);
  Assertions.assertThat(((Struct)consumer.remove().value()).getStruct(after).getString(text)).isEqualTo(insert4);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1827
899,"'-tryline","@Test @FixFor(DBZ-1824) @SkipWhenDecoderPluginNameIsNot(value=SkipWhenDecoderPluginNameIsNot.DecoderPluginName.WAL2JSON,reason=wal2json cannot resume transaction in the middle of processing) public void stopInTheMiddleOfTxAndRestart() throws Exception {
  Testing.Print.enable();
  final int numberOfEvents=50;
  final int STOP_ID=20;
  startConnector(config -> config.with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,false),true,record -> {
    if (!test_server.public.test_table.Envelope.equals(record.valueSchema().name())) {
      return false;
    }
    final Struct envelope=(Struct)record.value();
    final Struct after=envelope.getStruct(after);
    final Integer pk=after.getInt32(pk);
    return pk == STOP_ID;
  }
);
  waitForStreamingToStart();
  final String topicPrefix=public.test_table;
  final String topicName=topicName(topicPrefix);
  final int expectFirstRun=STOP_ID - 2;
  final int expectSecondRun=numberOfEvents;
  consumer=testConsumer(expectFirstRun);
  executeAndWait(IntStream.rangeClosed(2,numberOfEvents + 1).boxed().map(x -> INSERT INTO test_table (text) VALUES ('insert + x + ')).collect(Collectors.joining(;)));
  for (int i=0; i < expectFirstRun; i++) {
    SourceRecord record=consumer.remove();
    assertEquals(topicName,record.topic());
    VerifyRecord.isValidInsert(record,PK_FIELD,i + 2);
  }
  stopConnector();
  startConnector(Function.identity(),false);
  consumer.expects(expectSecondRun);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
  for (int i=0; i < expectSecondRun; i++) {
    SourceRecord record=consumer.remove();
    assertEquals(topicName,record.topic());
    VerifyRecord.isValidInsert(record,PK_FIELD,i + 2);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1866
900,"'-tryline","@Test @SkipWhenDatabaseVersion(check=EqualityCheck.LESS_THAN,major=11,reason=TRUNCATE events only supported in PG11+ PGOUTPUT Plugin) @SkipWhenDecoderPluginNameIsNot(value=SkipWhenDecoderPluginNameIsNot.DecoderPluginName.PGOUTPUT,reason=Tests specifically that pgoutput handles TRUNCATE messages) public void shouldProcessTruncateMessages() throws Exception {
  startConnector(builder -> builder.with(PostgresConnectorConfig.TRUNCATE_HANDLING_MODE,PostgresConnectorConfig.TruncateHandlingMode.INCLUDE));
  waitForStreamingToStart();
  consumer=testConsumer(1);
  executeAndWait(INSERT INTO test_table (text) values ('TRUNCATE TEST'););
  SourceRecord record=consumer.remove();
  assertEquals(TestHelper.topicName(public.test_table),record.topic());
  VerifyRecord.isValidInsert(record,PK_FIELD,2);
  consumer.expects(1);
  TestHelper.execute(TRUNCATE TABLE public.test_table RESTART IDENTITY CASCADE;);
  consumer.await(TestHelper.waitTimeForRecords(),TimeUnit.SECONDS);
  assertFalse(consumer.isEmpty());
  SourceRecord truncateRecord=consumer.remove();
  assertNotNull(truncateRecord);
  VerifyRecord.isValidTruncate(truncateRecord);
  assertTrue(consumer.isEmpty());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1917
901,"'-tryline","@Test @SkipWhenDatabaseVersion(check=EqualityCheck.LESS_THAN,major=11,reason=TRUNCATE events only supported in PG11+ PGOUTPUT Plugin) @SkipWhenDecoderPluginNameIsNot(value=SkipWhenDecoderPluginNameIsNot.DecoderPluginName.PGOUTPUT,reason=Tests specifically that pgoutput handled TRUNCATE these messages) public void shouldProcessTruncateMessagesForMultipleTableTruncateStatement() throws Exception {
  TestHelper.execute(CREATE TABLE test_table_2 (pk SERIAL, text TEXT, PRIMARY KEY(pk)););
  startConnector(builder -> builder.with(PostgresConnectorConfig.TRUNCATE_HANDLING_MODE,PostgresConnectorConfig.TruncateHandlingMode.INCLUDE));
  waitForStreamingToStart();
  consumer=testConsumer(1);
  executeAndWait(INSERT INTO test_table (text) values ('TRUNCATE TEST'););
  SourceRecord record=consumer.remove();
  assertEquals(TestHelper.topicName(public.test_table),record.topic());
  VerifyRecord.isValidInsert(record,PK_FIELD,2);
  executeAndWait(INSERT INTO test_table_2 (text) values ('TRUNCATE TEST 2'););
  SourceRecord record_2=consumer.remove();
  assertEquals(TestHelper.topicName(public.test_table_2),record_2.topic());
  VerifyRecord.isValidInsert(record_2,PK_FIELD,1);
  consumer.expects(2);
  TestHelper.execute(TRUNCATE TABLE public.test_table, public.test_table_2;);
  consumer.await(TestHelper.waitTimeForRecords(),TimeUnit.SECONDS);
  assertFalse(consumer.isEmpty());
  SourceRecord truncateRecord=consumer.remove();
  assertNotNull(truncateRecord);
  VerifyRecord.isValidTruncate(truncateRecord);
  SourceRecord truncateRecord_2=consumer.remove();
  assertNotNull(truncateRecord_2);
  VerifyRecord.isValidTruncate(truncateRecord_2);
  assertTrue(consumer.isEmpty());
  assertEquals(truncateRecord.sourceOffset().get(lsn_commit),truncateRecord_2.sourceOffset().get(lsn_commit));
  assertEquals(truncateRecord.sourceOffset().get(lsn),truncateRecord_2.sourceOffset().get(lsn));
  assertEquals(truncateRecord.sourceOffset().get(txId),truncateRecord_2.sourceOffset().get(txId));
  consumer=testConsumer(1);
  executeAndWait(INSERT INTO test_table (text) values ('TRUNCATE TEST'););
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1943
902,"'-tryline","@Test @FixFor(DBZ-1413) public void shouldStreamChangesForDataTypeAlias() throws Exception {
  TestHelper.execute(CREATE DOMAIN money2 AS money DEFAULT 0.0;);
  TestHelper.execute(CREATE TABLE alias_table (pk SERIAL, data VARCHAR(50), salary money, salary2 money2, PRIMARY KEY(pk)););
  startConnector(config -> config.with(PostgresConnectorConfig.DECIMAL_HANDLING_MODE,DecimalHandlingMode.DOUBLE).with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true).with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,public.alias_table),false);
  waitForStreamingToStart();
  consumer=testConsumer(1);
  executeAndWait(INSERT INTO alias_table (data, salary, salary2) values ('hello', 7.25, 8.25););
  SourceRecord rec=assertRecordInserted(public.alias_table,PK_FIELD,1);
  assertSourceInfo(rec,postgres,public,alias_table);
  List<SchemaAndValueField> expected=Arrays.asList(new SchemaAndValueField(pk,SchemaBuilder.INT32_SCHEMA,1),new SchemaAndValueField(data,SchemaBuilder.OPTIONAL_STRING_SCHEMA,hello),new SchemaAndValueField(salary,Decimal.builder(2).optional().build(),new BigDecimal(7.25)),new SchemaAndValueField(salary2,Decimal.builder(2).optional().build(),new BigDecimal(8.25)));
  assertRecordSchemaAndValues(expected,rec,Envelope.FieldName.AFTER);
  assertThat(consumer.isEmpty()).isTrue();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",1988
903,"'-tryline","@Test @FixFor(DBZ-1413) public void shouldStreamChangesForDomainAliasAlterTable() throws Exception {
  TestHelper.execute(CREATE TABLE alias_table (pk SERIAL, data VARCHAR(50), salary money, PRIMARY KEY(pk)););
  startConnector(config -> config.with(PostgresConnectorConfig.DECIMAL_HANDLING_MODE,DecimalHandlingMode.DOUBLE).with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true).with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,public.alias_table).with(column.propagate.source.type,public.alias_table.salary3),false);
  waitForStreamingToStart();
  TestHelper.execute(CREATE DOMAIN money2 AS money DEFAULT 0.0;);
  TestHelper.execute(CREATE DOMAIN money3 AS numeric(8,3) DEFAULT 0.0;);
  TestHelper.execute(ALTER TABLE alias_table ADD COLUMN salary2 money2 NOT NULL;);
  TestHelper.execute(ALTER TABLE alias_table ADD COLUMN salary3 money3 NOT NULL;);
  consumer=testConsumer(1);
  executeAndWait(INSERT INTO alias_table (data, salary, salary2, salary3) values ('hello', 7.25, 8.25, 123.456););
  SourceRecord rec=assertRecordInserted(public.alias_table,PK_FIELD,1);
  assertSourceInfo(rec,postgres,public,alias_table);
  List<SchemaAndValueField> expected=Arrays.asList(new SchemaAndValueField(pk,SchemaBuilder.INT32_SCHEMA,1),new SchemaAndValueField(data,SchemaBuilder.OPTIONAL_STRING_SCHEMA,hello),new SchemaAndValueField(salary,Decimal.builder(2).optional().build(),new BigDecimal(7.25)),new SchemaAndValueField(salary2,Decimal.builder(2).build(),new BigDecimal(8.25)),new SchemaAndValueField(salary3,SchemaBuilder.float64().parameter(TestHelper.TYPE_NAME_PARAMETER_KEY,MONEY3).parameter(TestHelper.TYPE_LENGTH_PARAMETER_KEY,8).parameter(TestHelper.TYPE_SCALE_PARAMETER_KEY,3).build(),123.456));
  assertRecordSchemaAndValues(expected,rec,Envelope.FieldName.AFTER);
  assertThat(consumer.isEmpty()).isTrue();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",2019
904,"'-tryline","@Test @FixFor(DBZ-1413) public void shouldStreamDomainAliasWithProperModifiers() throws Exception {
  TestHelper.execute(CREATE TABLE alias_table (pk SERIAL, PRIMARY KEY(pk)););
  startConnector(config -> config.with(PostgresConnectorConfig.DECIMAL_HANDLING_MODE,DecimalHandlingMode.DOUBLE).with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true).with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,public.alias_table),false);
  waitForStreamingToStart();
  TestHelper.execute(CREATE DOMAIN varbit2 AS varbit(3););
  TestHelper.execute(ALTER TABLE public.alias_table ADD COLUMN value varbit2 NOT NULL;);
  consumer=testConsumer(1);
  executeAndWait(INSERT INTO public.alias_table (value) VALUES (B'101'););
  SourceRecord rec=assertRecordInserted(public.alias_table,PK_FIELD,1);
  assertSourceInfo(rec,postgres,public,alias_table);
  List<SchemaAndValueField> expected=Arrays.asList(new SchemaAndValueField(PK_FIELD,SchemaBuilder.INT32_SCHEMA,1),new SchemaAndValueField(value,Bits.builder(3).build(),new byte[]{5}));
  assertRecordSchemaAndValues(expected,rec,Envelope.FieldName.AFTER);
  assertThat(consumer.isEmpty()).isTrue();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",2060
905,"'-tryline","@Test @FixFor(DBZ-1413) public void shouldStreamValuesForDomainTypeOfDomainType() throws Exception {
  TestHelper.execute(CREATE DOMAIN numeric82 as numeric(8,2););
  TestHelper.execute(CREATE DOMAIN numericex as numeric82;);
  TestHelper.execute(CREATE TABLE alias_table (pk SERIAL, value numericex, PRIMARY KEY (pk)););
  startConnector(config -> config.with(PostgresConnectorConfig.DECIMAL_HANDLING_MODE,DecimalHandlingMode.DOUBLE).with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true).with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,public.alias_table).with(column.propagate.source.type,public.alias_table.value),false);
  waitForStreamingToStart();
  consumer=testConsumer(1);
  executeAndWait(INSERT INTO alias_table (value) values (123.45););
  SourceRecord rec=assertRecordInserted(public.alias_table,PK_FIELD,1);
  assertSourceInfo(rec,postgres,public,alias_table);
  List<SchemaAndValueField> expected=Arrays.asList(new SchemaAndValueField(PK_FIELD,SchemaBuilder.INT32_SCHEMA,1),new SchemaAndValueField(value,SpecialValueDecimal.builder(DecimalMode.DOUBLE,8,2).optional().parameter(TestHelper.TYPE_NAME_PARAMETER_KEY,NUMERICEX).parameter(TestHelper.TYPE_LENGTH_PARAMETER_KEY,8).parameter(TestHelper.TYPE_SCALE_PARAMETER_KEY,2).build(),123.45));
  assertRecordSchemaAndValues(expected,rec,Envelope.FieldName.AFTER);
  assertThat(consumer.isEmpty()).isTrue();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",2090
906,"'-tryline","@Test @FixFor(DBZ-1413) public void shouldStreamValuesForAliasLikeBaseTypes() throws Exception {
  TestHelper.execute(CREATE TABLE alias_table (pk SERIAL, PRIMARY KEY (pk)););
  startConnector(config -> config.with(PostgresConnectorConfig.DECIMAL_HANDLING_MODE,DecimalHandlingMode.DOUBLE).with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true).with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,public.alias_table),false);
  waitForStreamingToStart();
  TestHelper.execute(CREATE DOMAIN bit2 AS BIT(3););
  TestHelper.execute(CREATE DOMAIN smallint2 AS smallint;);
  TestHelper.execute(CREATE DOMAIN integer2 as integer;);
  TestHelper.execute(CREATE DOMAIN bigint2 as bigint;);
  TestHelper.execute(CREATE DOMAIN real2 as real;);
  TestHelper.execute(CREATE DOMAIN bool2 AS BOOL DEFAULT false;);
  TestHelper.execute(CREATE DOMAIN float82 as float8;);
  TestHelper.execute(CREATE DOMAIN numeric2 as numeric(6,2););
  TestHelper.execute(CREATE DOMAIN string2 AS varchar(25) DEFAULT NULL;);
  TestHelper.execute(CREATE DOMAIN date2 AS date;);
  TestHelper.execute(CREATE DOMAIN time2 as time;);
  TestHelper.execute(CREATE DOMAIN timetz2 as timetz;);
  TestHelper.execute(CREATE DOMAIN timestamp2 as timestamp;);
  TestHelper.execute(CREATE DOMAIN timestamptz2 AS timestamptz;);
  TestHelper.execute(CREATE DOMAIN timewotz2 as time without time zone;);
  TestHelper.execute(CREATE DOMAIN box2 as box;);
  TestHelper.execute(CREATE DOMAIN circle2 as circle;);
  TestHelper.execute(CREATE DOMAIN interval2 as interval;);
  TestHelper.execute(CREATE DOMAIN line2 as line;);
  TestHelper.execute(CREATE DOMAIN lseg2 as lseg;);
  TestHelper.execute(CREATE DOMAIN path2 as path;);
  TestHelper.execute(CREATE DOMAIN point2 as point;);
  TestHelper.execute(CREATE DOMAIN polygon2 as polygon;);
  TestHelper.execute(CREATE DOMAIN char2 as char;);
  TestHelper.execute(CREATE DOMAIN text2 as text;);
  TestHelper.execute(CREATE DOMAIN json2 as json;);
  TestHelper.execute(CREATE DOMAIN xml2 as xml;);
  TestHelper.execute(CREATE DOMAIN uuid2 as uuid;);
  TestHelper.execute(CREATE DOMAIN varbit2 as varbit(3););
  TestHelper.execute(CREATE DOMAIN inet2 as inet;);
  TestHelper.execute(CREATE DOMAIN cidr2 as cidr;);
  TestHelper.execute(CREATE DOMAIN macaddr2 as macaddr;);
  TestHelper.execute(ALTER TABLE alias_table  + ADD COLUMN bit_base bit(3) NOT NULL, ADD COLUMN bit_alias bit2 NOT NULL,  + ADD COLUMN smallint_base smallint NOT NULL, ADD COLUMN smallint_alias smallint2 NOT NULL, + ADD COLUMN integer_base integer NOT NULL, ADD COLUMN integer_alias integer2 NOT NULL, + ADD COLUMN bigint_base bigint NOT NULL, ADD COLUMN bigint_alias bigint2 NOT NULL, + ADD COLUMN real_base real NOT NULL, ADD COLUMN real_alias real2 NOT NULL, + ADD COLUMN float8_base float8 NOT NULL, ADD COLUMN float8_alias float82 NOT NULL, + ADD COLUMN numeric_base numeric(6,2) NOT NULL, ADD COLUMN numeric_alias numeric2 NOT NULL, + ADD COLUMN bool_base bool NOT NULL, ADD COLUMN bool_alias bool2 NOT NULL, + ADD COLUMN string_base varchar(25) NOT NULL, ADD COLUMN string_alias string2 NOT NULL, + ADD COLUMN date_base date NOT NULL, ADD COLUMN date_alias date2 NOT NULL, + ADD COLUMN time_base time NOT NULL, ADD COLUMN time_alias time2 NOT NULL, + ADD COLUMN timetz_base timetz NOT NULL, ADD COLUMN timetz_alias timetz2 NOT NULL, + ADD COLUMN timestamp_base timestamp NOT NULL, ADD COLUMN timestamp_alias timestamp2 NOT NULL, + ADD COLUMN timestamptz_base timestamptz NOT NULL, ADD COLUMN timestamptz_alias timestamptz2 NOT NULL, + ADD COLUMN timewottz_base time without time zone NOT NULL, ADD COLUMN timewottz_alias timewotz2 NOT NULL, + ADD COLUMN box_base box NOT NULL, ADD COLUMN box_alias box2 NOT NULL, + ADD COLUMN circle_base circle NOT NULL, ADD COLUMN circle_alias circle2 NOT NULL, + ADD COLUMN interval_base interval NOT NULL, ADD COLUMN interval_alias interval2 NOT NULL, + ADD COLUMN line_base line NOT NULL, ADD COLUMN line_alias line2 NOT NULL, + ADD COLUMN lseg_base lseg NOT NULL, ADD COLUMN lseg_alias lseg2 NOT NULL, + ADD COLUMN path_base path NOT NULL, ADD COLUMN path_alias path2 NOT NULL, + ADD COLUMN point_base point NOT NULL, ADD COLUMN point_alias point2 NOT NULL, + ADD COLUMN polygon_base polygon NOT NULL, ADD COLUMN polygon_alias polygon2 NOT NULL, + ADD COLUMN char_base char NOT NULL, ADD COLUMN char_alias char2 NOT NULL, + ADD COLUMN text_base text NOT NULL, ADD COLUMN text_alias text2 NOT NULL, + ADD COLUMN json_base json NOT NULL, ADD COLUMN json_alias json2 NOT NULL, + ADD COLUMN xml_base xml NOT NULL, ADD COLUMN xml_alias xml2 NOT NULL, + ADD COLUMN uuid_base UUID NOT NULL, ADD COLUMN uuid_alias uuid2 NOT NULL, + ADD COLUMN varbit_base varbit(3) NOT NULL, ADD COLUMN varbit_alias varbit2 NOT NULL,+ ADD COLUMN inet_base inet NOT NULL, ADD COLUMN inet_alias inet2 NOT NULL, + ADD COLUMN cidr_base cidr NOT NULL, ADD COLUMN cidr_alias cidr2 NOT NULL, + ADD COLUMN macaddr_base macaddr NOT NULL, ADD COLUMN macaddr_alias macaddr2 NOT NULL);
  consumer=testConsumer(1);
  executeAndWait(INSERT INTO alias_table ( + bit_base, bit_alias,  + smallint_base, smallint_alias, + integer_base, integer_alias, + bigint_base, bigint_alias, + real_base, real_alias, + float8_base, float8_alias, + numeric_base, numeric_alias, + bool_base, bool_alias, + string_base, string_alias, + date_base, date_alias, + time_base, time_alias, + timetz_base, timetz_alias, + timestamp_base, timestamp_alias, + timestamptz_base, timestamptz_alias, + timewottz_base, timewottz_alias, + box_base, box_alias, + circle_base, circle_alias, + interval_base, interval_alias, + line_base, line_alias, + lseg_base, lseg_alias, + path_base, path_alias, + point_base, point_alias, + polygon_base, polygon_alias, + char_base, char_alias, + text_base, text_alias, + json_base, json_alias, + xml_base, xml_alias, + uuid_base, uuid_alias, + varbit_base, varbit_alias, + inet_base, inet_alias, + cidr_base, cidr_alias, + macaddr_base, macaddr_alias + ) VALUES (+ B'101', B'101', + 1, 1, + 1, 1, + 1000, 1000, + 3.14, 3.14, + 3.14, 3.14, + 1234.12, 1234.12, + true, true, + 'hello', 'hello', + '2019-10-02', '2019-10-02', + '01:02:03', '01:02:03', + '01:02:03.123789Z', '01:02:03.123789Z', + '2019-10-02T01:02:03.123456', '2019-10-02T01:02:03.123456', + '2019-10-02T13:51:30.123456+02:00'::TIMESTAMPTZ, '2019-10-02T13:51:30.123456+02:00'::TIMESTAMPTZ, + '01:02:03', '01:02:03', + '(0,0),(1,1)', '(0,0),(1,1)', + '10,4,10', '10,4,10', + '1 year 2 months 3 days 4 hours 5 minutes 6 seconds', '1 year 2 months 3 days 4 hours 5 minutes 6 seconds', + '(0,0),(0,1)', '(0,0),(0,1)', + '((0,0),(0,1))', '((0,0),(0,1))', + '((0,0),(0,1),(0,2))', '((0,0),(0,1),(0,2))', + '(1,1)', '(1,1)', + '((0,0),(0,1),(1,0),(0,0))', '((0,0),(0,1),(1,0),(0,0))', + 'a', 'a', + 'Hello World', 'Hello World', + '{\key\: \value\}', '{\key\: \value\}', + XML('<foo>Hello</foo>'), XML('<foo>Hello</foo>'), + '40e6215d-b5c6-4896-987c-f30f3678f608', '40e6215d-b5c6-4896-987c-f30f3678f608', + B'101', B'101', + '192.168.0.1', '192.168.0.1', + '192.168/24', '192.168/24', + '08:00:2b:01:02:03', '08:00:2b:01:02:03' + ););
  SourceRecord rec=assertRecordInserted(public.alias_table,PK_FIELD,1);
  assertSourceInfo(rec,postgres,public,alias_table);
  assertRecordSchemaAndValues(schemasAndValuesForDomainAliasTypes(true),rec,Envelope.FieldName.AFTER);
  assertThat(consumer.isEmpty()).isTrue();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",2124
907,"'-tryline","@Test @FixFor(DBZ-920) public void shouldStreamEnumAsKnownType() throws Exception {
  TestHelper.execute(CREATE TABLE enum_table (pk SERIAL, PRIMARY KEY (pk)););
  startConnector(config -> config.with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,true).with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER).with(column.propagate.source.type,public.enum_table.value).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,public.enum_table),false);
  waitForStreamingToStart();
  TestHelper.execute(CREATE TYPE test_type AS ENUM ('V1','V2'););
  TestHelper.execute(ALTER TABLE enum_table ADD COLUMN value test_type NOT NULL);
  consumer=testConsumer(1);
  executeAndWait(INSERT INTO enum_table (value) VALUES ('V1'););
  SourceRecord rec=assertRecordInserted(public.enum_table,PK_FIELD,1);
  assertSourceInfo(rec,postgres,public,enum_table);
  List<SchemaAndValueField> expected=Arrays.asList(new SchemaAndValueField(PK_FIELD,Schema.INT32_SCHEMA,1),new SchemaAndValueField(value,Enum.builder(V1,V2).parameter(TestHelper.TYPE_NAME_PARAMETER_KEY,TEST_TYPE).parameter(TestHelper.TYPE_LENGTH_PARAMETER_KEY,String.valueOf(Integer.MAX_VALUE)).parameter(TestHelper.TYPE_SCALE_PARAMETER_KEY,0).build(),V1));
  assertRecordSchemaAndValues(expected,rec,Envelope.FieldName.AFTER);
  assertThat(consumer.isEmpty()).isTrue();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",2281
908,"'-tryline","@Test public void shouldStreamEnumArrayAsKnownType() throws Exception {
  TestHelper.execute(CREATE TABLE enum_array_table (pk SERIAL, PRIMARY KEY (pk)););
  startConnector(config -> config.with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,false).with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER).with(column.propagate.source.type,public.enum_array_table.value).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,public.enum_array_table),false);
  waitForStreamingToStart();
  TestHelper.execute(CREATE TYPE test_type AS ENUM ('V1','V2'););
  TestHelper.execute(ALTER TABLE enum_array_table ADD COLUMN value test_type[] NOT NULL;);
  consumer=testConsumer(1);
  executeAndWait(INSERT INTO enum_array_table (value) VALUES ('{V1, V2}'););
  SourceRecord insertRec=assertRecordInserted(public.enum_array_table,PK_FIELD,1);
  assertSourceInfo(insertRec,postgres,public,enum_array_table);
  List<SchemaAndValueField> expectedInsert=Arrays.asList(new SchemaAndValueField(PK_FIELD,Schema.INT32_SCHEMA,1),new SchemaAndValueField(value,SchemaBuilder.array(Enum.builder(V1,V2)).parameter(TestHelper.TYPE_NAME_PARAMETER_KEY,_TEST_TYPE).parameter(TestHelper.TYPE_LENGTH_PARAMETER_KEY,String.valueOf(Integer.MAX_VALUE)).parameter(TestHelper.TYPE_SCALE_PARAMETER_KEY,0).build(),Arrays.asList(V1,V2)));
  assertRecordSchemaAndValues(expectedInsert,insertRec,Envelope.FieldName.AFTER);
  assertThat(consumer.isEmpty()).isTrue();
  executeAndWait(UPDATE enum_array_table set value = '{V1}';);
  SourceRecord updateRec=consumer.remove();
  assertSourceInfo(updateRec,postgres,public,enum_array_table);
  List<SchemaAndValueField> expectedUpdate=Arrays.asList(new SchemaAndValueField(PK_FIELD,Schema.INT32_SCHEMA,1),new SchemaAndValueField(value,SchemaBuilder.array(Enum.builder(V1,V2)).parameter(TestHelper.TYPE_NAME_PARAMETER_KEY,_TEST_TYPE).parameter(TestHelper.TYPE_LENGTH_PARAMETER_KEY,String.valueOf(Integer.MAX_VALUE)).parameter(TestHelper.TYPE_SCALE_PARAMETER_KEY,0).build(),Arrays.asList(V1)));
  assertRecordSchemaAndValues(expectedUpdate,updateRec,Envelope.FieldName.AFTER);
  assertThat(consumer.isEmpty()).isTrue();
  executeAndWait(DELETE FROM enum_array_table;);
  SourceRecord deleteRec=consumer.remove();
  VerifyRecord.isValidDelete(deleteRec,PK_FIELD,1);
  assertSourceInfo(updateRec,postgres,public,enum_array_table);
  assertThat(consumer.isEmpty()).isTrue();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",2317
909,"'-tryline","@Test @FixFor(DBZ-1969) public void shouldStreamTimeArrayTypesAsKnownTypes() throws Exception {
  TestHelper.execute(CREATE TABLE time_array_table (pk SERIAL,  + timea time[] NOT NULL,  + timetza timetz[] NOT NULL, + timestampa timestamp[] NOT NULL, + timestamptza timestamptz[] NOT NULL, primary key(pk)););
  startConnector(config -> config.with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,false).with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,public.time_array_table),false);
  waitForStreamingToStart();
  consumer=testConsumer(1);
  executeAndWait(INSERT INTO time_array_table (timea, timetza, timestampa, timestamptza)  + values ( + '{00:01:02,01:02:03}', + '{13:51:02+0200,14:51:03+0200}', + '{2020-04-01 00:01:02,2020-04-01 01:02:03}', + '{2020-04-01 13:51:02+02,2020-04-01 14:51:03+02}'));
  SourceRecord insert=assertRecordInserted(public.time_array_table,PK_FIELD,1);
  assertSourceInfo(insert,postgres,public,time_array_table);
  assertRecordSchemaAndValues(schemaAndValuesForTimeArrayTypes(),insert,Envelope.FieldName.AFTER);
  assertThat(consumer.isEmpty()).isTrue();
  executeAndWait(UPDATE time_array_table SET  + timea = '{00:01:02,02:03:04}',  + timetza = '{00:01:02-0400,01:03:04-0400}', + timestampa = '{2020-04-01 00:01:02,2020-04-25 03:04:05}', + timestamptza = '{2020-04-01 00:01:02-04,2020-04-25 03:04:05-04}');
  SourceRecord update=consumer.remove();
  assertSourceInfo(update,postgres,public,time_array_table);
  List<SchemaAndValueField> expectedUpdate=Arrays.asList(new SchemaAndValueField(timea,SchemaBuilder.array(MicroTime.builder().optional().build()).build(),Arrays.asList(LocalTime.parse(00:01:02).toNanoOfDay() / 1_000,LocalTime.parse(02:03:04).toNanoOfDay() / 1_000)),new SchemaAndValueField(timetza,SchemaBuilder.array(ZonedTime.builder().optional().build()).build(),Arrays.asList(04:01:02Z,05:03:04Z)),new SchemaAndValueField(timestampa,SchemaBuilder.array(MicroTimestamp.builder().optional().build()).build(),Arrays.asList(OffsetDateTime.of(2020,4,1,0,1,2,0,ZoneOffset.UTC).toInstant().toEpochMilli() * 1_000,OffsetDateTime.of(2020,4,25,3,4,5,0,ZoneOffset.UTC).toInstant().toEpochMilli() * 1_000)),new SchemaAndValueField(timestamptza,SchemaBuilder.array(ZonedTimestamp.builder().optional().build()).build(),Arrays.asList(2020-04-01T04:01:02Z,2020-04-25T07:04:05Z)));
  assertRecordSchemaAndValues(expectedUpdate,update,Envelope.FieldName.AFTER);
  assertThat(consumer.isEmpty()).isTrue();
  executeAndWait(DELETE FROM time_array_table;);
  SourceRecord deleteRec=consumer.remove();
  VerifyRecord.isValidDelete(deleteRec,PK_FIELD,1);
  assertSourceInfo(deleteRec,postgres,public,time_array_table);
  assertThat(consumer.isEmpty()).isTrue();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",2375
910,"'-tryline","@Test @FixFor(DBZ-1680) public void shouldStreamEnumsWhenIncludeUnknownDataTypesDisabled() throws Exception {
  TestHelper.execute(CREATE TYPE test_type AS ENUM ('V1','V2'););
  TestHelper.execute(CREATE TABLE enum_table (pk SERIAL, data varchar(25) NOT NULL, value test_type NOT NULL DEFAULT 'V1', PRIMARY KEY (pk)););
  startConnector(config -> config.with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,false).with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER).with(column.propagate.source.type,public.enum_table.value).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,public.enum_table),false);
  waitForStreamingToStart();
  consumer=testConsumer(1);
  executeAndWait(INSERT INTO enum_table (data) VALUES ('hello'););
  SourceRecord rec=assertRecordInserted(public.enum_table,PK_FIELD,1);
  assertSourceInfo(rec,postgres,public,enum_table);
  List<SchemaAndValueField> expected=Arrays.asList(new SchemaAndValueField(PK_FIELD,Schema.INT32_SCHEMA,1),new SchemaAndValueField(data,Schema.STRING_SCHEMA,hello),new SchemaAndValueField(value,Enum.builder(V1,V2).parameter(TestHelper.TYPE_NAME_PARAMETER_KEY,TEST_TYPE).parameter(TestHelper.TYPE_LENGTH_PARAMETER_KEY,String.valueOf(Integer.MAX_VALUE)).parameter(TestHelper.TYPE_SCALE_PARAMETER_KEY,0).build(),V1));
  assertRecordSchemaAndValues(expected,rec,Envelope.FieldName.AFTER);
  assertThat(consumer.isEmpty()).isTrue();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",2441
911,"'-tryline","private void testReceiveChangesForReplicaIdentityFullTableWithToastedValue(PostgresConnectorConfig.SchemaRefreshMode mode,boolean tablesBeforeStart) throws Exception {
  if (tablesBeforeStart) {
    TestHelper.execute(DROP TABLE IF EXISTS test_table;,CREATE TABLE test_table (id SERIAL, not_toast int, text TEXT);,ALTER TABLE test_table REPLICA IDENTITY FULL);
  }
  startConnector(config -> config.with(PostgresConnectorConfig.SCHEMA_REFRESH_MODE,mode),false);
  consumer=testConsumer(1);
  final String toastedValue=RandomStringUtils.randomAlphanumeric(10000);
  if (!tablesBeforeStart) {
    TestHelper.execute(DROP TABLE IF EXISTS test_table;,CREATE TABLE test_table (id SERIAL, not_toast int, text TEXT);,ALTER TABLE test_table REPLICA IDENTITY FULL);
  }
  String statement=INSERT INTO test_table (not_toast, text) VALUES (10,' + toastedValue + ');;
  assertInsert(statement,Arrays.asList(new SchemaAndValueField(id,SchemaBuilder.INT32_SCHEMA,1),new SchemaAndValueField(not_toast,SchemaBuilder.OPTIONAL_INT32_SCHEMA,10),new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,toastedValue)));
  consumer.expects(1);
  executeAndWait(UPDATE test_table set not_toast = 20);
  SourceRecord updatedRecord=consumer.remove();
  if (DecoderDifferences.areToastedValuesPresentInSchema() || mode == SchemaRefreshMode.COLUMNS_DIFF_EXCLUDE_UNCHANGED_TOAST) {
    assertRecordSchemaAndValues(Arrays.asList(new SchemaAndValueField(id,SchemaBuilder.INT32_SCHEMA,1),new SchemaAndValueField(not_toast,SchemaBuilder.OPTIONAL_INT32_SCHEMA,10),new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,toastedValue)),updatedRecord,Envelope.FieldName.BEFORE);
    assertRecordSchemaAndValues(Arrays.asList(new SchemaAndValueField(id,SchemaBuilder.INT32_SCHEMA,1),new SchemaAndValueField(not_toast,SchemaBuilder.OPTIONAL_INT32_SCHEMA,20),new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,toastedValue)),updatedRecord,Envelope.FieldName.AFTER);
  }
 else {
    assertRecordSchemaAndValues(Arrays.asList(new SchemaAndValueField(id,SchemaBuilder.INT32_SCHEMA,1),new SchemaAndValueField(not_toast,SchemaBuilder.OPTIONAL_INT32_SCHEMA,10)),updatedRecord,Envelope.FieldName.BEFORE);
    assertRecordSchemaAndValues(Arrays.asList(new SchemaAndValueField(id,SchemaBuilder.INT32_SCHEMA,1),new SchemaAndValueField(not_toast,SchemaBuilder.OPTIONAL_INT32_SCHEMA,20)),updatedRecord,Envelope.FieldName.AFTER);
  }
  consumer.expects(2);
  executeAndWait(DELETE FROM test_table);
  SourceRecord deletedRecord=consumer.remove();
  SourceRecord tombstoneRecord=consumer.remove();
  assertThat(tombstoneRecord.value()).isNull();
  assertThat(tombstoneRecord.valueSchema()).isNull();
  if (DecoderDifferences.areToastedValuesPresentInSchema() || mode == SchemaRefreshMode.COLUMNS_DIFF_EXCLUDE_UNCHANGED_TOAST) {
    assertRecordSchemaAndValues(Arrays.asList(new SchemaAndValueField(id,SchemaBuilder.INT32_SCHEMA,1),new SchemaAndValueField(not_toast,SchemaBuilder.OPTIONAL_INT32_SCHEMA,20),new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,toastedValue)),deletedRecord,Envelope.FieldName.BEFORE);
  }
 else {
    assertRecordSchemaAndValues(Arrays.asList(new SchemaAndValueField(id,SchemaBuilder.INT32_SCHEMA,1),new SchemaAndValueField(not_toast,SchemaBuilder.OPTIONAL_INT32_SCHEMA,20)),deletedRecord,Envelope.FieldName.BEFORE);
  }
  consumer.expects(1);
  statement=INSERT INTO test_table (not_toast, text) VALUES (100, null);;
  assertInsert(statement,Arrays.asList(new SchemaAndValueField(id,SchemaBuilder.INT32_SCHEMA,2),new SchemaAndValueField(not_toast,SchemaBuilder.OPTIONAL_INT32_SCHEMA,100),new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,null)));
  consumer.expects(1);
  executeAndWait(UPDATE test_table set not_toast = 200 WHERE id=2);
  updatedRecord=consumer.remove();
  if (DecoderDifferences.areToastedValuesPresentInSchema() || mode == SchemaRefreshMode.COLUMNS_DIFF_EXCLUDE_UNCHANGED_TOAST) {
    assertRecordSchemaAndValues(Arrays.asList(new SchemaAndValueField(id,SchemaBuilder.INT32_SCHEMA,2),new SchemaAndValueField(not_toast,SchemaBuilder.OPTIONAL_INT32_SCHEMA,100),new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,null)),updatedRecord,Envelope.FieldName.BEFORE);
    assertRecordSchemaAndValues(Arrays.asList(new SchemaAndValueField(id,SchemaBuilder.INT32_SCHEMA,2),new SchemaAndValueField(not_toast,SchemaBuilder.OPTIONAL_INT32_SCHEMA,200),new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,null)),updatedRecord,Envelope.FieldName.AFTER);
  }
 else {
    assertRecordSchemaAndValues(Arrays.asList(new SchemaAndValueField(id,SchemaBuilder.INT32_SCHEMA,2),new SchemaAndValueField(not_toast,SchemaBuilder.OPTIONAL_INT32_SCHEMA,100)),updatedRecord,Envelope.FieldName.BEFORE);
    assertRecordSchemaAndValues(Arrays.asList(new SchemaAndValueField(id,SchemaBuilder.INT32_SCHEMA,2),new SchemaAndValueField(not_toast,SchemaBuilder.OPTIONAL_INT32_SCHEMA,200)),updatedRecord,Envelope.FieldName.AFTER);
  }
  consumer.expects(2);
  executeAndWait(DELETE FROM test_table WHERE id=2);
  deletedRecord=consumer.remove();
  tombstoneRecord=consumer.remove();
  assertThat(tombstoneRecord.value()).isNull();
  assertThat(tombstoneRecord.valueSchema()).isNull();
  if (DecoderDifferences.areToastedValuesPresentInSchema() || mode == SchemaRefreshMode.COLUMNS_DIFF_EXCLUDE_UNCHANGED_TOAST) {
    assertRecordSchemaAndValues(Arrays.asList(new SchemaAndValueField(id,SchemaBuilder.INT32_SCHEMA,2),new SchemaAndValueField(not_toast,SchemaBuilder.OPTIONAL_INT32_SCHEMA,200),new SchemaAndValueField(text,SchemaBuilder.OPTIONAL_STRING_SCHEMA,null)),deletedRecord,Envelope.FieldName.BEFORE);
  }
 else {
    assertRecordSchemaAndValues(Arrays.asList(new SchemaAndValueField(id,SchemaBuilder.INT32_SCHEMA,2),new SchemaAndValueField(not_toast,SchemaBuilder.OPTIONAL_INT32_SCHEMA,200)),deletedRecord,Envelope.FieldName.BEFORE);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",2480
912,"'-tryline","@Test() @FixFor(DBZ-1815) public void testHeartbeatActionQueryExecuted() throws Exception {
  TestHelper.execute(DROP TABLE IF EXISTS test_table; + CREATE TABLE test_table (id SERIAL, text TEXT); + INSERT INTO test_table (text) VALUES ('mydata'););
  TestHelper.execute(DROP TABLE IF EXISTS test_heartbeat_table; + CREATE TABLE test_heartbeat_table (text TEXT););
  startConnector(config -> config.with(Heartbeat.HEARTBEAT_INTERVAL,100).with(DatabaseHeartbeatImpl.HEARTBEAT_ACTION_QUERY,INSERT INTO test_heartbeat_table (text) VALUES ('test_heartbeat');));
  Awaitility.await().atMost(TestHelper.waitTimeForRecords() * 10,TimeUnit.SECONDS).until(() -> {
    final SourceRecord record=consumeRecord();
    return record != null && Envelope.isEnvelopeSchema(record.valueSchema());
  }
);
  int numOfHeartbeatActions;
  final String slotQuery=SELECT COUNT(*) FROM test_heartbeat_table;;
  final JdbcConnection.ResultSetMapper<Integer> slotQueryMapper=rs -> {
    rs.next();
    return rs.getInt(1);
  }
;
  try (PostgresConnection connection=TestHelper.create()){
    numOfHeartbeatActions=connection.queryAndMap(slotQuery,slotQueryMapper);
  }
   assertTrue(numOfHeartbeatActions > 0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",2606
913,"'-tryline","@Test @FixFor({DBZ-1916,DBZ-1830}) public void shouldPropagateSourceTypeByDatatype() throws Exception {
  TestHelper.execute(DROP TABLE IF EXISTS test_table;);
  TestHelper.execute(CREATE TABLE test_table (id SERIAL, c1 INT, c2 INT, c3a NUMERIC(5,2), c3b VARCHAR(128), f1 float(10), f2 decimal(8,4), primary key (id)););
  startConnector(config -> config.with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER).with(datatype.propagate.source.type,.+\\.NUMERIC,.+\\.VARCHAR,.+\\.FLOAT4),false);
  waitForStreamingToStart();
  consumer=testConsumer(1);
  executeAndWait(INSERT INTO test_table (id,c1,c2,c3a,c3b,f1,f2) values (1, 123, 456, 789.01, 'test', 1.228, 234.56););
  final SourceRecord record=assertRecordInserted(public.test_table,id,1);
  final Field before=record.valueSchema().field(before);
  assertThat(before.schema().field(id).schema().parameters()).isNull();
  assertThat(before.schema().field(c1).schema().parameters()).isNull();
  assertThat(before.schema().field(c2).schema().parameters()).isNull();
  assertThat(before.schema().field(c3a).schema().parameters()).includes(entry(TYPE_NAME_PARAMETER_KEY,NUMERIC),entry(TYPE_LENGTH_PARAMETER_KEY,5),entry(TYPE_SCALE_PARAMETER_KEY,2));
  assertThat(before.schema().field(c3b).schema().parameters()).includes(entry(TYPE_NAME_PARAMETER_KEY,VARCHAR),entry(TYPE_LENGTH_PARAMETER_KEY,128));
  assertThat(before.schema().field(f2).schema().parameters()).includes(entry(TYPE_NAME_PARAMETER_KEY,NUMERIC),entry(TYPE_LENGTH_PARAMETER_KEY,8),entry(TYPE_SCALE_PARAMETER_KEY,4));
  assertThat(before.schema().field(f1).schema().parameters()).includes(entry(TYPE_NAME_PARAMETER_KEY,FLOAT4),entry(TYPE_LENGTH_PARAMETER_KEY,8),entry(TYPE_SCALE_PARAMETER_KEY,8));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",2645
914,"'-tryline","@Test @FixFor({DBZ-3074}) public void shouldMaintainPrimaryKeyOrderOnSchemaChange() throws Exception {
  startConnector();
  consumer=testConsumer(1);
  executeAndWait(CREATE TABLE test_should_maintain_primary_key_order(b INTEGER, d INTEGER, c INTEGER, a INTEGER, val INTEGER, PRIMARY KEY (b, d, c, a)); + INSERT INTO test_should_maintain_primary_key_order VALUES (1, 2, 3, 4, 5););
  SourceRecord record=consumer.remove();
  assertEquals(1,((Struct)record.value()).getStruct(after).getInt32(b).intValue());
  List<Field> fields=record.keySchema().fields();
  String[] expectedFieldOrder=new String[]{b,d,c,a};
  for (int i=0; i < fields.size(); i++) {
    assertEquals(Key field names should in order,expectedFieldOrder[i],fields.get(i).name());
  }
  consumer.expects(1);
  executeAndWait(ALTER TABLE test_should_maintain_primary_key_order ADD COLUMN val2 INTEGER; + INSERT INTO test_should_maintain_primary_key_order VALUES (10, 11, 12, 13, 14, 15););
  record=consumer.remove();
  assertEquals(10,((Struct)record.value()).getStruct(after).getInt32(b).intValue());
  fields=record.keySchema().fields();
  for (int i=0; i < fields.size(); i++) {
    assertEquals(Key field names should in order,expectedFieldOrder[i],fields.get(i).name());
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",2689
915,"'-tryline","private void executeAndWait(String statements) throws Exception {
  TestHelper.execute(statements);
  consumer.await(TestHelper.waitTimeForRecords() * 30,TimeUnit.SECONDS);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",2797
916,"'-tryline","private void executeAndWaitForNoRecords(String statements) throws Exception {
  TestHelper.execute(statements);
  consumer.await(5,TimeUnit.SECONDS);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",2802
917,"'-tryline","@Test public void shouldUseOverriddenSelectStatementDuringSnapshotting() throws Exception {
  TestHelper.execute(STATEMENTS);
  buildProducer(TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_SELECT_STATEMENT_OVERRIDES_BY_TABLE,over.t1).with(PostgresConnectorConfig.SNAPSHOT_SELECT_STATEMENT_OVERRIDES_BY_TABLE.name() + .over.t1,SELECT * FROM over.t1 WHERE pk > 100));
  final int expectedRecordsCount=3 + 6;
  TestConsumer consumer=testConsumer(expectedRecordsCount,over);
  consumer.await(TestHelper.waitTimeForRecords(),TimeUnit.SECONDS);
  final Map<String,List<SourceRecord>> recordsByTopic=recordsByTopic(expectedRecordsCount,consumer);
  Assertions.assertThat(recordsByTopic.get(test_server.over.t1)).hasSize(3);
  Assertions.assertThat(recordsByTopic.get(test_server.over.t2)).hasSize(6);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\SnapshotWithOverridesProducerIT.java",50
918,"'-tryline","@Test public void shouldUseMultipleOverriddenSelectStatementsDuringSnapshotting() throws Exception {
  TestHelper.execute(STATEMENTS);
  buildProducer(TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_SELECT_STATEMENT_OVERRIDES_BY_TABLE,over.t1,over.t2).with(PostgresConnectorConfig.SNAPSHOT_SELECT_STATEMENT_OVERRIDES_BY_TABLE.name() + .over.t1,SELECT * FROM over.t1 WHERE pk > 101).with(PostgresConnectorConfig.SNAPSHOT_SELECT_STATEMENT_OVERRIDES_BY_TABLE.name() + .over.t2,SELECT * FROM over.t2 WHERE pk > 100));
  final int expectedRecordsCount=2 + 3;
  TestConsumer consumer=testConsumer(expectedRecordsCount,over);
  consumer.await(TestHelper.waitTimeForRecords(),TimeUnit.SECONDS);
  final Map<String,List<SourceRecord>> recordsByTopic=recordsByTopic(expectedRecordsCount,consumer);
  Assertions.assertThat(recordsByTopic.get(test_server.over.t1)).hasSize(2);
  Assertions.assertThat(recordsByTopic.get(test_server.over.t2)).hasSize(3);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\SnapshotWithOverridesProducerIT.java",68
919,"'-tryline","@Test public void shouldProcessFromSnapshot() throws Exception {
  TestHelper.execute(STATEMENTS);
  start(PostgresConnector.class,TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL_ONLY).with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST,nopk).build());
  assertConnectorIsRunning();
  final int expectedRecordsCount=1 + 1 + 1;
  TestConsumer consumer=testConsumer(expectedRecordsCount,nopk);
  consumer.await(TestHelper.waitTimeForRecords(),TimeUnit.SECONDS);
  final Map<String,List<SourceRecord>> recordsByTopic=recordsByTopic(expectedRecordsCount,consumer);
  Assertions.assertThat(recordsByTopic.get(test_server.nopk.t1).get(0).keySchema().field(pk)).isNotNull();
  Assertions.assertThat(recordsByTopic.get(test_server.nopk.t1).get(0).keySchema().fields()).hasSize(1);
  Assertions.assertThat(recordsByTopic.get(test_server.nopk.t2).get(0).keySchema().field(pk)).isNotNull();
  Assertions.assertThat(recordsByTopic.get(test_server.nopk.t2).get(0).keySchema().fields()).hasSize(1);
  Assertions.assertThat(recordsByTopic.get(test_server.nopk.t3).get(0).keySchema()).isNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\TablesWithoutPrimaryKeyIT.java",41
920,"'-tryline","@Test public void shouldProcessFromSnapshotOld() throws Exception {
  TestHelper.execute(STATEMENTS);
  start(PostgresConnector.class,TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL_ONLY).with(PostgresConnectorConfig.SCHEMA_WHITELIST,nopk).build());
  assertConnectorIsRunning();
  final int expectedRecordsCount=1 + 1 + 1;
  TestConsumer consumer=testConsumer(expectedRecordsCount,nopk);
  consumer.await(TestHelper.waitTimeForRecords(),TimeUnit.SECONDS);
  final Map<String,List<SourceRecord>> recordsByTopic=recordsByTopic(expectedRecordsCount,consumer);
  Assertions.assertThat(recordsByTopic.get(test_server.nopk.t1).get(0).keySchema().field(pk)).isNotNull();
  Assertions.assertThat(recordsByTopic.get(test_server.nopk.t1).get(0).keySchema().fields()).hasSize(1);
  Assertions.assertThat(recordsByTopic.get(test_server.nopk.t2).get(0).keySchema().field(pk)).isNotNull();
  Assertions.assertThat(recordsByTopic.get(test_server.nopk.t2).get(0).keySchema().fields()).hasSize(1);
  Assertions.assertThat(recordsByTopic.get(test_server.nopk.t3).get(0).keySchema()).isNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\TablesWithoutPrimaryKeyIT.java",63
921,"'-tryline","@Test public void shouldProcessFromStreaming() throws Exception {
  start(PostgresConnector.class,TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER).with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST,nopk).build());
  assertConnectorIsRunning();
  waitForStreamingToStart();
  TestHelper.execute(STATEMENTS);
  final int expectedRecordsCount=1 + 1 + 1;
  TestConsumer consumer=testConsumer(expectedRecordsCount,nopk);
  consumer.await(TestHelper.waitTimeForRecords(),TimeUnit.SECONDS);
  final Map<String,List<SourceRecord>> recordsByTopic=recordsByTopic(expectedRecordsCount,consumer);
  Assertions.assertThat(recordsByTopic.get(test_server.nopk.t1).get(0).keySchema().field(pk)).isNotNull();
  Assertions.assertThat(recordsByTopic.get(test_server.nopk.t1).get(0).keySchema().fields()).hasSize(1);
  Assertions.assertThat(recordsByTopic.get(test_server.nopk.t2).get(0).keySchema().field(pk)).isNotNull();
  Assertions.assertThat(recordsByTopic.get(test_server.nopk.t2).get(0).keySchema().fields()).hasSize(1);
  Assertions.assertThat(recordsByTopic.get(test_server.nopk.t3).get(0).keySchema()).isNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\TablesWithoutPrimaryKeyIT.java",85
922,"'-tryline","@Test public void shouldProcessFromStreamingOld() throws Exception {
  start(PostgresConnector.class,TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER).with(PostgresConnectorConfig.SCHEMA_WHITELIST,nopk).build());
  assertConnectorIsRunning();
  waitForStreamingToStart();
  TestHelper.execute(STATEMENTS);
  final int expectedRecordsCount=1 + 1 + 1;
  TestConsumer consumer=testConsumer(expectedRecordsCount,nopk);
  consumer.await(TestHelper.waitTimeForRecords(),TimeUnit.SECONDS);
  final Map<String,List<SourceRecord>> recordsByTopic=recordsByTopic(expectedRecordsCount,consumer);
  Assertions.assertThat(recordsByTopic.get(test_server.nopk.t1).get(0).keySchema().field(pk)).isNotNull();
  Assertions.assertThat(recordsByTopic.get(test_server.nopk.t1).get(0).keySchema().fields()).hasSize(1);
  Assertions.assertThat(recordsByTopic.get(test_server.nopk.t2).get(0).keySchema().field(pk)).isNotNull();
  Assertions.assertThat(recordsByTopic.get(test_server.nopk.t2).get(0).keySchema().fields()).hasSize(1);
  Assertions.assertThat(recordsByTopic.get(test_server.nopk.t3).get(0).keySchema()).isNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\TablesWithoutPrimaryKeyIT.java",108
923,"'-tryline","protected static void executeDDL(String ddlFile) throws Exception {
  URL ddlTestFile=TestHelper.class.getClassLoader().getResource(ddlFile);
  assertNotNull(Cannot locate  + ddlFile,ddlTestFile);
  String statements=Files.readAllLines(Paths.get(ddlTestFile.toURI())).stream().collect(Collectors.joining(System.lineSeparator()));
  try (PostgresConnection connection=create()){
    connection.executeWithoutCommitting(statements);
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\TestHelper.java",237
924,"'-tryline","/** 
 * Parses string to an object.
 * @param value string representation
 * @return value
 * @throws Exception if there is an parsing error
 */
Object parse(String value) throws Exception ;
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerDefaultValueConverter.java",54
925,"'-tryline","public static Object nullableDefaultValueMapper(String v,DefaultValueMapper mapper) throws Exception {
  int start=v.lastIndexOf('(') == -1 ? 0 : v.lastIndexOf('(') + 1;
  int end=!v.contains()) ? v.length() : v.indexOf(')');
  final String value=v.substring(start,end);
  if (NULL.equalsIgnoreCase(value)) {
    return null;
  }
 else {
    return mapper.parse(value);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerDefaultValueConverter.java",183
926,"'-tryline","@Override protected SnapshotContext prepare(ChangeEventSourceContext context) throws Exception {
  return new SqlServerSnapshotContext(jdbcConnection.getRealDatabaseName());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerSnapshotChangeEventSource.java",84
927,"'-tryline","@Override protected void connectionCreated(RelationalSnapshotContext snapshotContext) throws Exception {
  ((SqlServerSnapshotContext)snapshotContext).isolationLevelBeforeStart=jdbcConnection.connection().getTransactionIsolation();
  if (connectorConfig.getSnapshotIsolationMode() == SnapshotIsolationMode.SNAPSHOT) {
    jdbcConnection.connection().rollback();
    jdbcConnection.connection().setTransactionIsolation(TRANSACTION_SNAPSHOT);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerSnapshotChangeEventSource.java",89
928,"'-tryline","@Override protected Set<TableId> getAllTableIds(RelationalSnapshotContext ctx) throws Exception {
  return jdbcConnection.readTableNames(ctx.catalogName,null,null,new String[]{TABLE});
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerSnapshotChangeEventSource.java",103
929,"'-tryline","@Override protected void determineSnapshotOffset(RelationalSnapshotContext ctx) throws Exception {
  ctx.offset=new SqlServerOffsetContext(connectorConfig,TxLogPosition.valueOf(jdbcConnection.getMaxLsn()),false,false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerSnapshotChangeEventSource.java",159
930,"'-tryline","private SqlServerChangeTable[] processErrorFromChangeTableQuery(SQLException exception,SqlServerChangeTable[] currentChangeTables) throws Exception {
  final Matcher m=MISSING_CDC_FUNCTION_CHANGES_ERROR.matcher(exception.getMessage());
  if (m.matches()) {
    final String captureName=m.group(1);
    LOGGER.info(Table is no longer captured with capture instance {},captureName);
    return Arrays.asList(currentChangeTables).stream().filter(x -> !x.getCaptureInstance().equals(captureName)).collect(Collectors.toList()).toArray(new SqlServerChangeTable[0]);
  }
  throw exception;
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerStreamingChangeEventSource.java",297
931,"'-tryline","@Test public void intTypes() throws Exception {
  Testing.debug(Inserted);
  final SourceRecords records=consumeRecordsByTopic(EXPECTED_RECORD_COUNT);
  List<SourceRecord> testTableRecords=records.recordsForTopic(server1.dbo.type_int);
  assertThat(testTableRecords).hasSize(1);
  VerifyRecord.isValidRead(testTableRecords.get(0));
  Struct after=(Struct)((Struct)testTableRecords.get(0).value()).get(after);
  assertRecord(after,EXPECTED_INT);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\AbstractSqlServerDatatypesTest.java",210
932,"'-tryline","@Test public void fpTypes() throws Exception {
  Testing.debug(Inserted);
  final SourceRecords records=consumeRecordsByTopic(EXPECTED_RECORD_COUNT);
  List<SourceRecord> testTableRecords=records.recordsForTopic(server1.dbo.type_fp);
  assertThat(testTableRecords).hasSize(1);
  VerifyRecord.isValidRead(testTableRecords.get(0));
  Struct after=(Struct)((Struct)testTableRecords.get(0).value()).get(after);
  assertRecord(after,EXPECTED_FP);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\AbstractSqlServerDatatypesTest.java",225
933,"'-tryline","@Test public void stringTypes() throws Exception {
  Testing.debug(Inserted);
  final SourceRecords records=consumeRecordsByTopic(EXPECTED_RECORD_COUNT);
  List<SourceRecord> testTableRecords=records.recordsForTopic(server1.dbo.type_string);
  assertThat(testTableRecords).hasSize(1);
  VerifyRecord.isValidRead(testTableRecords.get(0));
  Struct after=(Struct)((Struct)testTableRecords.get(0).value()).get(after);
  assertRecord(after,EXPECTED_STRING);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\AbstractSqlServerDatatypesTest.java",240
934,"'-tryline","@Test public void dateTimeTypes() throws Exception {
  Testing.debug(Inserted);
  final SourceRecords records=consumeRecordsByTopic(EXPECTED_RECORD_COUNT);
  List<SourceRecord> testTableRecords=records.recordsForTopic(server1.dbo.type_time);
  assertThat(testTableRecords).hasSize(1);
  VerifyRecord.isValidRead(testTableRecords.get(0));
  Struct after=(Struct)((Struct)testTableRecords.get(0).value()).get(after);
  assertRecord(after,EXPECTED_DATE_TIME);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\AbstractSqlServerDatatypesTest.java",255
935,"'-tryline","@Test public void dateTimeTypesAsConnect() throws Exception {
  stopConnector();
  init(TemporalPrecisionMode.CONNECT);
  Testing.debug(Inserted);
  final SourceRecords records=consumeRecordsByTopic(EXPECTED_RECORD_COUNT);
  List<SourceRecord> testTableRecords=records.recordsForTopic(server1.dbo.type_time);
  assertThat(testTableRecords).hasSize(1);
  VerifyRecord.isValidRead(testTableRecords.get(0));
  Struct after=(Struct)((Struct)testTableRecords.get(0).value()).get(after);
  assertRecord(after,EXPECTED_DATE_TIME_AS_CONNECT);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\AbstractSqlServerDatatypesTest.java",270
936,"'-tryline","@Test public void otherTypes() throws Exception {
  Testing.debug(Inserted);
  final SourceRecords records=consumeRecordsByTopic(EXPECTED_RECORD_COUNT);
  List<SourceRecord> testTableRecords=records.recordsForTopic(server1.dbo.type_xml);
  assertThat(testTableRecords).hasSize(1);
  VerifyRecord.isValidRead(testTableRecords.get(0));
  Struct after=(Struct)((Struct)testTableRecords.get(0).value()).get(after);
  assertRecord(after,EXPECTED_XML);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\AbstractSqlServerDatatypesTest.java",288
937,"'-tryline","public void init(TemporalPrecisionMode temporalPrecisionMode) throws Exception {
  initializeConnectorTestFramework();
  Testing.Debug.enable();
  Testing.Files.delete(TestHelper.DB_HISTORY_PATH);
  Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(RelationalDatabaseConnectorConfig.TIME_PRECISION_MODE,temporalPrecisionMode).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForSnapshotToBeCompleted();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\AbstractSqlServerDatatypesTest.java",307
938,"'-tryline","@Test @FixFor(DBZ-1051) public void caseInsensitiveDatabase() throws Exception {
  connection.execute(CREATE TABLE MyTableOne (Id int primary key, ColA varchar(30)),INSERT INTO MyTableOne VALUES(1, 'a'));
  TestHelper.enableTableCdc(connection,MyTableOne);
  testDatabase();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\CaseSensitivenessIT.java",51
939,"'-tryline","@Test @FixFor(DBZ-1051) public void caseSensitiveDatabase() throws Exception {
  connection.execute(ALTER DATABASE testDB COLLATE Latin1_General_BIN,CREATE TABLE MyTableOne (Id int primary key, ColA varchar(30)),INSERT INTO MyTableOne VALUES(1, 'a'));
  TestHelper.enableTableCdc(connection,MyTableOne);
  testDatabase();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\CaseSensitivenessIT.java",61
940,"'-tryline","private void testDatabase() throws Exception {
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  SourceRecords records=consumeRecordsByTopic(1);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.MyTableOne)).hasSize(1);
  SourceRecord record=records.recordsForTopic(server1.dbo.MyTableOne).get(0);
  assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.MyTableOne.Value).field(Id,Schema.INT32_SCHEMA).field(ColA,Schema.OPTIONAL_STRING_SCHEMA).build());
  assertSchemaMatchesStruct((Struct)record.key(),SchemaBuilder.struct().name(server1.dbo.MyTableOne.Key).field(Id,Schema.INT32_SCHEMA).build());
  Assertions.assertThat(((Struct)((Struct)record.value()).get(after)).getInt32(Id)).isEqualTo(1);
  connection.execute(INSERT INTO MyTableOne VALUES(2, 'b'));
  records=consumeRecordsByTopic(1);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.MyTableOne)).hasSize(1);
  record=records.recordsForTopic(server1.dbo.MyTableOne).get(0);
  assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.MyTableOne.Value).field(Id,Schema.INT32_SCHEMA).field(ColA,Schema.OPTIONAL_STRING_SCHEMA).build());
  assertSchemaMatchesStruct((Struct)record.key(),SchemaBuilder.struct().name(server1.dbo.MyTableOne.Key).field(Id,Schema.INT32_SCHEMA).build());
  Assertions.assertThat(((Struct)((Struct)record.value()).get(after)).getInt32(Id)).isEqualTo(2);
  connection.execute(CREATE TABLE MyTableTwo (Id int primary key, ColB varchar(30)));
  TestHelper.enableTableCdc(connection,MyTableTwo);
  connection.execute(INSERT INTO MyTableTwo VALUES(3, 'b'));
  records=consumeRecordsByTopic(1);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.MyTableTwo)).hasSize(1);
  record=records.recordsForTopic(server1.dbo.MyTableTwo).get(0);
  assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.MyTableTwo.Value).field(Id,Schema.INT32_SCHEMA).field(ColB,Schema.OPTIONAL_STRING_SCHEMA).build());
  assertSchemaMatchesStruct((Struct)record.key(),SchemaBuilder.struct().name(server1.dbo.MyTableTwo.Key).field(Id,Schema.INT32_SCHEMA).build());
  Assertions.assertThat(((Struct)((Struct)record.value()).get(after)).getInt32(Id)).isEqualTo(3);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\CaseSensitivenessIT.java",72
941,"'-tryline","@Before public void before() throws Exception {
  init(TemporalPrecisionMode.ADAPTIVE);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\DatatypesFromSnapshotIT.java",28
942,"'-tryline","@Test public void warn() throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int ID_START_1=10;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(SqlServerConnectorConfig.EVENT_PROCESSING_FAILURE_HANDLING_MODE,EventProcessingFailureHandlingMode.WARN).build();
  final LogInterceptor logInterceptor=new LogInterceptor();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForSnapshotToBeCompleted();
  connection.execute(ALTER TABLE dbo.tableb ALTER COLUMN colb varchar(30));
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START_1 + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  SourceRecords records=consumeRecordsByTopic(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablea)).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tableb)).isNull();
  Awaitility.await().alias(Found warning message in logs).atMost(TestHelper.waitTimeForRecords(),TimeUnit.SECONDS).until(() -> {
    return logInterceptor.containsWarnMessage(Error while processing event at offset {);
  }
);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\EventProcessingFailureHandlingIT.java",58
943,"'-tryline","@Test public void ignore() throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int ID_START_1=10;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(SqlServerConnectorConfig.EVENT_PROCESSING_FAILURE_HANDLING_MODE,EventProcessingFailureHandlingMode.SKIP).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForSnapshotToBeCompleted();
  connection.execute(ALTER TABLE dbo.tableb ALTER COLUMN colb varchar(30));
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START_1 + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  SourceRecords records=consumeRecordsByTopic(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablea)).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tableb)).isNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\EventProcessingFailureHandlingIT.java",95
944,"'-tryline","@Test public void fail() throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int ID_START_1=10;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).build();
  final LogInterceptor logInterceptor=new LogInterceptor();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForSnapshotToBeCompleted();
  connection.execute(ALTER TABLE dbo.tableb ALTER COLUMN colb varchar(30));
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START_1 + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  SourceRecords records=consumeRecordsByTopic(1);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablea)).hasSize(1);
  Awaitility.await().alias(Found warning message in logs).atMost(TestHelper.waitTimeForRecords(),TimeUnit.SECONDS).until(() -> {
    boolean foundErrorMessageInLogs=logInterceptor.containsStacktraceElement(Error while processing event at offset {);
    return foundErrorMessageInLogs && !engine.isRunning();
  }
);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\EventProcessingFailureHandlingIT.java",125
945,"'-tryline","@Test @FixFor(DBZ-1904) public void streamingSchemaChanges() throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int TABLES=2;
  final int ID_START_1=10;
  final int ID_START_2=100;
  final int ID_START_3=1000;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(RelationalDatabaseConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForSnapshotToBeCompleted();
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START_1 + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  Testing.Print.enable();
  SourceRecords records=consumeRecordsByTopic(3);
  final List<SourceRecord> schemaRecords=records.allRecordsInOrder();
  Assertions.assertThat(schemaRecords).hasSize(3);
  schemaRecords.forEach(record -> {
    Assertions.assertThat(record.topic()).isEqualTo(server1);
    Assertions.assertThat(((Struct)record.key()).getString(databaseName)).isEqualTo(testDB);
    Assertions.assertThat(record.sourceOffset().get(snapshot)).isEqualTo(true);
  }
);
  Assertions.assertThat(((Struct)schemaRecords.get(0).value()).getStruct(source).getString(snapshot)).isEqualTo(true);
  Assertions.assertThat(((Struct)schemaRecords.get(1).value()).getStruct(source).getString(snapshot)).isEqualTo(true);
  Assertions.assertThat(((Struct)schemaRecords.get(2).value()).getStruct(source).getString(snapshot)).isEqualTo(last);
  List<Struct> tableChanges=((Struct)schemaRecords.get(0).value()).getArray(tableChanges);
  Assertions.assertThat(tableChanges).hasSize(1);
  Assertions.assertThat(tableChanges.get(0).get(type)).isEqualTo(CREATE);
  waitForAvailableRecords(TestHelper.waitTimeForRecords(),TimeUnit.SECONDS);
  records=consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES,24);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablea)).hasSize(RECORDS_PER_TABLE);
  final List<SourceRecord> tablebRecords=records.recordsForTopic(server1.dbo.tableb);
  if (tablebRecords.size() == RECORDS_PER_TABLE - 1) {
    tablebRecords.add(consumeRecord());
  }
  Assertions.assertThat(tablebRecords).hasSize(RECORDS_PER_TABLE);
  tablebRecords.forEach(record -> {
    assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.tableb.Value).field(id,Schema.INT32_SCHEMA).field(colb,Schema.OPTIONAL_STRING_SCHEMA).build());
  }
);
  final List<SourceRecord> updateBatch=records.allRecordsInOrder();
  final SourceRecord lastUpdate=updateBatch.get(updateBatch.size() - 1);
  TestHelper.disableTableCdc(connection,tableb);
  connection.execute(exec sp_rename 'tableb.colb', 'newcolb';);
  TestHelper.enableTableCdc(connection,tableb,after_change);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START_2 + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a2'));
    connection.execute(INSERT INTO tableb(id,newcolb) VALUES( + id + , 'b2'));
  }
  records=consumeRecordsByTopic(1);
  Assertions.assertThat(records.allRecordsInOrder()).hasSize(1);
  final SourceRecord schemaRecord=records.allRecordsInOrder().get(0);
  Assertions.assertThat(schemaRecord.topic()).isEqualTo(server1);
  Assertions.assertThat(((Struct)schemaRecord.key()).getString(databaseName)).isEqualTo(testDB);
  Assertions.assertThat(schemaRecord.sourceOffset().get(snapshot)).isNull();
  Assertions.assertThat(((Struct)schemaRecord.value()).getStruct(source).getString(snapshot)).isNull();
  tableChanges=((Struct)schemaRecord.value()).getArray(tableChanges);
  Assertions.assertThat(tableChanges).hasSize(1);
  Assertions.assertThat(tableChanges.get(0).get(type)).isEqualTo(ALTER);
  Assertions.assertThat(lastUpdate.sourceOffset()).isEqualTo(schemaRecord.sourceOffset());
  records=consumeRecordsByTopic(RECORDS_PER_TABLE * 2);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablea)).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tableb)).hasSize(RECORDS_PER_TABLE);
  records.recordsForTopic(server1.dbo.tableb).forEach(record -> {
    assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.tableb.Value).field(id,Schema.INT32_SCHEMA).field(newcolb,Schema.OPTIONAL_STRING_SCHEMA).build());
  }
);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START_3 + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a3'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b3'));
  }
  records=consumeRecordsByTopic(RECORDS_PER_TABLE * 2);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablea)).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tableb)).hasSize(RECORDS_PER_TABLE);
  records.recordsForTopic(server1.dbo.tableb).forEach(record -> {
    assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.tableb.Value).field(id,Schema.INT32_SCHEMA).field(newcolb,Schema.OPTIONAL_STRING_SCHEMA).build());
  }
);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SchemaHistoryTopicIT.java",63
946,"'-tryline","@Test @FixFor(DBZ-1904) public void snapshotSchemaChanges() throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int TABLES=2;
  final int ID_START_1=10;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(RelationalDatabaseConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).build();
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START_1 + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForSnapshotToBeCompleted();
  SourceRecords records=consumeRecordsByTopic(3);
  final List<SourceRecord> schemaRecords=records.allRecordsInOrder();
  Assertions.assertThat(schemaRecords).hasSize(3);
  schemaRecords.forEach(record -> {
    Assertions.assertThat(record.topic()).isEqualTo(server1);
    Assertions.assertThat(((Struct)record.key()).getString(databaseName)).isEqualTo(testDB);
    Assertions.assertThat(record.sourceOffset().get(snapshot)).isEqualTo(true);
  }
);
  Assertions.assertThat(((Struct)schemaRecords.get(0).value()).getStruct(source).getString(snapshot)).isEqualTo(true);
  Assertions.assertThat(((Struct)schemaRecords.get(1).value()).getStruct(source).getString(snapshot)).isEqualTo(true);
  Assertions.assertThat(((Struct)schemaRecords.get(2).value()).getStruct(source).getString(snapshot)).isEqualTo(true);
  final List<Struct> tableChanges=((Struct)schemaRecords.get(0).value()).getArray(tableChanges);
  Assertions.assertThat(tableChanges).hasSize(1);
  Assertions.assertThat(tableChanges.get(0).get(type)).isEqualTo(CREATE);
  records=consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablea)).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tableb)).hasSize(RECORDS_PER_TABLE);
  records.recordsForTopic(server1.dbo.tableb).forEach(record -> {
    assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.tableb.Value).field(id,Schema.INT32_SCHEMA).field(colb,Schema.OPTIONAL_STRING_SCHEMA).build());
  }
);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SchemaHistoryTopicIT.java",197
947,"'-tryline","@Test @FixFor(DBZ-2303) public void schemaChangeAfterSnapshot() throws Exception {
  final int RECORDS_PER_TABLE=1;
  final int ID_START=10;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(SqlServerConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(SqlServerConnectorConfig.TABLE_INCLUDE_LIST,dbo.tablec).build();
  connection.execute(CREATE TABLE tabled (id int primary key, cold varchar(30)));
  connection.execute(INSERT INTO tablec VALUES(1, 'c'));
  TestHelper.enableTableCdc(connection,tablec);
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForSnapshotToBeCompleted();
  Testing.Print.enable();
  SourceRecords records=consumeRecordsByTopic(1 + 1);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablec)).hasSize(1);
  stopConnector();
  assertConnectorNotRunning();
  final Configuration config2=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(SqlServerConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(SqlServerConnectorConfig.TABLE_INCLUDE_LIST,dbo.tablec,dbo.tabled).build();
  start(SqlServerConnector.class,config2);
  TestHelper.enableTableCdc(connection,tabled);
  connection.execute(INSERT INTO tabled VALUES(1, 'd'));
  records=consumeRecordsByTopic(2 + 1);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tabled)).hasSize(1);
  final List<SourceRecord> schemaEvents=records.recordsForTopic(server1);
  final SourceRecord schemaEventD=schemaEvents.get(schemaEvents.size() - 1);
  Assertions.assertThat(((Struct)schemaEventD.value()).getStruct(source).getString(schema)).isEqualTo(dbo);
  Assertions.assertThat(((Struct)schemaEventD.value()).getStruct(source).getString(table)).isEqualTo(tabled);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SchemaHistoryTopicIT.java",254
948,"'-tryline","@Test public void takeSnapshotInExclusiveMode() throws Exception {
  takeSnapshot(SnapshotIsolationMode.EXCLUSIVE);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SnapshotIT.java",87
949,"'-tryline","@Test public void takeSnapshotInSnapshotMode() throws Exception {
  Testing.Print.enable();
  takeSnapshot(SnapshotIsolationMode.SNAPSHOT);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SnapshotIT.java",92
950,"'-tryline","@Test public void takeSnapshotInRepeatableReadMode() throws Exception {
  takeSnapshot(SnapshotIsolationMode.REPEATABLE_READ);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SnapshotIT.java",98
951,"'-tryline","@Test public void takeSnapshotInReadCommittedMode() throws Exception {
  takeSnapshot(SnapshotIsolationMode.READ_COMMITTED);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SnapshotIT.java",103
952,"'-tryline","@Test public void takeSnapshotInReadUncommittedMode() throws Exception {
  takeSnapshot(SnapshotIsolationMode.READ_UNCOMMITTED);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SnapshotIT.java",108
953,"'-tryline","private void takeSnapshot(SnapshotIsolationMode lockingMode) throws Exception {
  final Configuration config=TestHelper.defaultConfig().with(SNAPSHOT_ISOLATION_MODE.name(),lockingMode.getValue()).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  final SourceRecords records=consumeRecordsByTopic(INITIAL_RECORDS_PER_TABLE);
  final List<SourceRecord> table1=records.recordsForTopic(server1.dbo.table1);
  assertThat(table1).hasSize(INITIAL_RECORDS_PER_TABLE);
  for (int i=0; i < INITIAL_RECORDS_PER_TABLE; i++) {
    final SourceRecord record1=table1.get(i);
    final List<SchemaAndValueField> expectedKey1=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,i));
    final List<SchemaAndValueField> expectedRow1=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,i),new SchemaAndValueField(name,Schema.OPTIONAL_STRING_SCHEMA,name + i),new SchemaAndValueField(price,Decimal.builder(2).parameter(connect.decimal.precision,8).optional().build(),new BigDecimal(i + .23)),new SchemaAndValueField(ts,Timestamp.builder().optional().schema(),1_531_920_536_000l));
    final Struct key1=(Struct)record1.key();
    final Struct value1=(Struct)record1.value();
    assertRecord(key1,expectedKey1);
    assertRecord((Struct)value1.get(after),expectedRow1);
    assertThat(record1.sourceOffset()).includes(MapAssert.entry(snapshot,true),MapAssert.entry(snapshot_completed,i == INITIAL_RECORDS_PER_TABLE - 1));
    assertNull(value1.get(before));
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SnapshotIT.java",113
954,"'-tryline","@Test public void takeSnapshotAndStartStreaming() throws Exception {
  final Configuration config=TestHelper.defaultConfig().build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  final SourceRecords records=consumeRecordsByTopic(INITIAL_RECORDS_PER_TABLE);
  final List<SourceRecord> table1=records.recordsForTopic(server1.dbo.table1);
  table1.subList(0,INITIAL_RECORDS_PER_TABLE - 1).forEach(record -> {
    assertThat(((Struct)record.value()).getStruct(source).getString(snapshot)).isEqualTo(true);
  }
);
  assertThat(((Struct)table1.get(INITIAL_RECORDS_PER_TABLE - 1).value()).getStruct(source).getString(snapshot)).isEqualTo(last);
  testStreaming();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SnapshotIT.java",147
955,"'-tryline","@Test @FixFor(DBZ-1280) public void testDeadlockDetection() throws Exception {
  final LogInterceptor logInterceptor=new LogInterceptor();
  final Configuration config=TestHelper.defaultConfig().with(RelationalDatabaseConnectorConfig.SNAPSHOT_LOCK_TIMEOUT_MS,1_000).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  connection.setAutoCommit(false).executeWithoutCommitting(SELECT TOP(0) * FROM dbo.table1 WITH (TABLOCKX));
  consumeRecordsByTopic(INITIAL_RECORDS_PER_TABLE);
  assertConnectorNotRunning();
  assertThat(logInterceptor.containsStacktraceElement(Lock request time out period exceeded.)).as(Log contains error related to lock timeout).isTrue();
  connection.rollback();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SnapshotIT.java",164
956,"'-tryline","@Test public void takeSnapshotWithOldStructAndStartStreaming() throws Exception {
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SOURCE_STRUCT_MAKER_VERSION,Version.V1).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  final SourceRecords records=consumeRecordsByTopic(INITIAL_RECORDS_PER_TABLE);
  final List<SourceRecord> table1=records.recordsForTopic(server1.dbo.table1);
  table1.forEach(record -> {
    assertThat(((Struct)record.value()).getStruct(source).getBoolean(snapshot)).isTrue();
  }
);
  testStreaming();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SnapshotIT.java",183
957,"'-tryline","@Test public void takeSchemaOnlySnapshotAndStartStreaming() throws Exception {
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForSnapshotToBeCompleted();
  testStreaming();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SnapshotIT.java",241
958,"'-tryline","@Test @FixFor(DBZ-1031) public void takeSnapshotFromTableWithReservedName() throws Exception {
  connection.execute(CREATE TABLE [User] (id int, name varchar(30), primary key(id)));
  for (int i=0; i < INITIAL_RECORDS_PER_TABLE; i++) {
    connection.execute(String.format(INSERT INTO [User] VALUES(%s, '%s'),i,name + i));
  }
  TestHelper.enableTableCdc(connection,User);
  initializeConnectorTestFramework();
  Testing.Files.delete(TestHelper.DB_HISTORY_PATH);
  final Configuration config=TestHelper.defaultConfig().with(TABLE_INCLUDE_LIST,dbo.User).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  final SourceRecords records=consumeRecordsByTopic(INITIAL_RECORDS_PER_TABLE);
  final List<SourceRecord> user=records.recordsForTopic(server1.dbo.User);
  assertThat(user).hasSize(INITIAL_RECORDS_PER_TABLE);
  for (int i=0; i < INITIAL_RECORDS_PER_TABLE; i++) {
    final SourceRecord record1=user.get(i);
    final List<SchemaAndValueField> expectedKey1=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,i));
    final List<SchemaAndValueField> expectedRow1=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,i),new SchemaAndValueField(name,Schema.OPTIONAL_STRING_SCHEMA,name + i));
    final Struct key1=(Struct)record1.key();
    final Struct value1=(Struct)record1.value();
    assertRecord(key1,expectedKey1);
    assertRecord((Struct)value1.get(after),expectedRow1);
    assertThat(record1.sourceOffset()).includes(MapAssert.entry(snapshot,true),MapAssert.entry(snapshot_completed,i == INITIAL_RECORDS_PER_TABLE - 1));
    assertNull(value1.get(before));
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SnapshotIT.java",254
959,"'-tryline","@Test public void takeSchemaOnlySnapshotAndSendHeartbeat() throws Exception {
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(Heartbeat.HEARTBEAT_INTERVAL,300_000).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForSnapshotToBeCompleted();
  final SourceRecord record=consumeRecord();
  Assertions.assertThat(record).isNotNull();
  Assertions.assertThat(record.topic()).startsWith(__debezium-heartbeat);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SnapshotIT.java",299
960,"'-tryline","@Test @FixFor(DBZ-1067) public void testBlacklistColumn() throws Exception {
  connection.execute(CREATE TABLE blacklist_column_table_a (id int, name varchar(30), amount integer primary key(id)),CREATE TABLE blacklist_column_table_b (id int, name varchar(30), amount integer primary key(id)));
  connection.execute(INSERT INTO blacklist_column_table_a VALUES(10, 'some_name', 120));
  connection.execute(INSERT INTO blacklist_column_table_b VALUES(11, 'some_name', 447));
  TestHelper.enableTableCdc(connection,blacklist_column_table_a);
  TestHelper.enableTableCdc(connection,blacklist_column_table_b);
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(SqlServerConnectorConfig.COLUMN_BLACKLIST,dbo.blacklist_column_table_a.amount).with(SqlServerConnectorConfig.TABLE_WHITELIST,dbo.blacklist_column_table_a,dbo.blacklist_column_table_b).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  final SourceRecords records=consumeRecordsByTopic(2);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.blacklist_column_table_a);
  final List<SourceRecord> tableB=records.recordsForTopic(server1.dbo.blacklist_column_table_b);
  Schema expectedSchemaA=SchemaBuilder.struct().optional().name(server1.dbo.blacklist_column_table_a.Value).field(id,Schema.INT32_SCHEMA).field(name,Schema.OPTIONAL_STRING_SCHEMA).build();
  Struct expectedValueA=new Struct(expectedSchemaA).put(id,10).put(name,some_name);
  Schema expectedSchemaB=SchemaBuilder.struct().optional().name(server1.dbo.blacklist_column_table_b.Value).field(id,Schema.INT32_SCHEMA).field(name,Schema.OPTIONAL_STRING_SCHEMA).field(amount,Schema.OPTIONAL_INT32_SCHEMA).build();
  Struct expectedValueB=new Struct(expectedSchemaB).put(id,11).put(name,some_name).put(amount,447);
  Assertions.assertThat(tableA).hasSize(1);
  SourceRecordAssert.assertThat(tableA.get(0)).valueAfterFieldIsEqualTo(expectedValueA).valueAfterFieldSchemaIsEqualTo(expectedSchemaA);
  Assertions.assertThat(tableB).hasSize(1);
  SourceRecordAssert.assertThat(tableB.get(0)).valueAfterFieldIsEqualTo(expectedValueB).valueAfterFieldSchemaIsEqualTo(expectedSchemaB);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SnapshotIT.java",315
961,"'-tryline","@Test @FixFor(DBZ-1067) public void testColumnExcludeList() throws Exception {
  connection.execute(CREATE TABLE blacklist_column_table_a (id int, name varchar(30), amount integer primary key(id)),CREATE TABLE blacklist_column_table_b (id int, name varchar(30), amount integer primary key(id)));
  connection.execute(INSERT INTO blacklist_column_table_a VALUES(10, 'some_name', 120));
  connection.execute(INSERT INTO blacklist_column_table_b VALUES(11, 'some_name', 447));
  TestHelper.enableTableCdc(connection,blacklist_column_table_a);
  TestHelper.enableTableCdc(connection,blacklist_column_table_b);
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(SqlServerConnectorConfig.COLUMN_EXCLUDE_LIST,dbo.blacklist_column_table_a.amount).with(SqlServerConnectorConfig.TABLE_INCLUDE_LIST,dbo.blacklist_column_table_a,dbo.blacklist_column_table_b).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  final SourceRecords records=consumeRecordsByTopic(2);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.blacklist_column_table_a);
  final List<SourceRecord> tableB=records.recordsForTopic(server1.dbo.blacklist_column_table_b);
  Schema expectedSchemaA=SchemaBuilder.struct().optional().name(server1.dbo.blacklist_column_table_a.Value).field(id,Schema.INT32_SCHEMA).field(name,Schema.OPTIONAL_STRING_SCHEMA).build();
  Struct expectedValueA=new Struct(expectedSchemaA).put(id,10).put(name,some_name);
  Schema expectedSchemaB=SchemaBuilder.struct().optional().name(server1.dbo.blacklist_column_table_b.Value).field(id,Schema.INT32_SCHEMA).field(name,Schema.OPTIONAL_STRING_SCHEMA).field(amount,Schema.OPTIONAL_INT32_SCHEMA).build();
  Struct expectedValueB=new Struct(expectedSchemaB).put(id,11).put(name,some_name).put(amount,447);
  Assertions.assertThat(tableA).hasSize(1);
  SourceRecordAssert.assertThat(tableA.get(0)).valueAfterFieldIsEqualTo(expectedValueA).valueAfterFieldSchemaIsEqualTo(expectedSchemaA);
  Assertions.assertThat(tableB).hasSize(1);
  SourceRecordAssert.assertThat(tableB.get(0)).valueAfterFieldIsEqualTo(expectedValueB).valueAfterFieldSchemaIsEqualTo(expectedSchemaB);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SnapshotIT.java",415
962,"'-tryline","@Test public void reoderCapturedTables() throws Exception {
  connection.execute(CREATE TABLE table_a (id int, name varchar(30), amount integer primary key(id)),CREATE TABLE table_b (id int, name varchar(30), amount integer primary key(id)));
  connection.execute(INSERT INTO table_a VALUES(10, 'some_name', 120));
  connection.execute(INSERT INTO table_b VALUES(11, 'some_name', 447));
  TestHelper.enableTableCdc(connection,table_a);
  TestHelper.enableTableCdc(connection,table_b);
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(SqlServerConnectorConfig.TABLE_INCLUDE_LIST,dbo.table_b,dbo.table_a).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  SourceRecords records=consumeRecordsByTopic(1);
  List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.table_a);
  List<SourceRecord> tableB=records.recordsForTopic(server1.dbo.table_b);
  Assertions.assertThat(tableB).hasSize(1);
  Assertions.assertThat(tableA).isNull();
  records=consumeRecordsByTopic(1);
  tableA=records.recordsForTopic(server1.dbo.table_a);
  Assertions.assertThat(tableA).hasSize(1);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SnapshotIT.java",474
963,"'-tryline","@Test public void reoderCapturedTablesWithOverlappingTableWhitelist() throws Exception {
  connection.execute(CREATE TABLE table_a (id int, name varchar(30), amount integer primary key(id)),CREATE TABLE table_ac (id int, name varchar(30), amount integer primary key(id)),CREATE TABLE table_ab (id int, name varchar(30), amount integer primary key(id)));
  connection.execute(INSERT INTO table_a VALUES(10, 'some_name', 120));
  connection.execute(INSERT INTO table_ab VALUES(11, 'some_name', 447));
  connection.execute(INSERT INTO table_ac VALUES(12, 'some_name', 885));
  TestHelper.enableTableCdc(connection,table_a);
  TestHelper.enableTableCdc(connection,table_ab);
  TestHelper.enableTableCdc(connection,table_ac);
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(SqlServerConnectorConfig.TABLE_INCLUDE_LIST,dbo.table_ab,dbo.table_(.*)).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  SourceRecords records=consumeRecordsByTopic(1);
  List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.table_a);
  List<SourceRecord> tableB=records.recordsForTopic(server1.dbo.table_ab);
  List<SourceRecord> tableC=records.recordsForTopic(server1.dbo.table_ac);
  Assertions.assertThat(tableB).hasSize(1);
  Assertions.assertThat(tableA).isNull();
  Assertions.assertThat(tableC).isNull();
  records=consumeRecordsByTopic(1);
  tableA=records.recordsForTopic(server1.dbo.table_a);
  Assertions.assertThat(tableA).hasSize(1);
  Assertions.assertThat(tableC).isNull();
  records=consumeRecordsByTopic(1);
  tableC=records.recordsForTopic(server1.dbo.table_ac);
  Assertions.assertThat(tableC).hasSize(1);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SnapshotIT.java",506
964,"'-tryline","@Test public void reoderCapturedTablesWithoutTableWhitelist() throws Exception {
  connection.execute(CREATE TABLE table_ac (id int, name varchar(30), amount integer primary key(id)),CREATE TABLE table_a (id int, name varchar(30), amount integer primary key(id)),CREATE TABLE table_ab (id int, name varchar(30), amount integer primary key(id)));
  connection.execute(INSERT INTO table_ac VALUES(12, 'some_name', 885));
  connection.execute(INSERT INTO table_a VALUES(10, 'some_name', 120));
  connection.execute(INSERT INTO table_ab VALUES(11, 'some_name', 447));
  TestHelper.enableTableCdc(connection,table_a);
  TestHelper.enableTableCdc(connection,table_ab);
  TestHelper.enableTableCdc(connection,table_ac);
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(SqlServerConnectorConfig.TABLE_EXCLUDE_LIST,dbo.table1).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  SourceRecords records=consumeRecordsByTopic(1);
  List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.table_a);
  List<SourceRecord> tableB=records.recordsForTopic(server1.dbo.table_ab);
  List<SourceRecord> tableC=records.recordsForTopic(server1.dbo.table_ac);
  Assertions.assertThat(tableA).hasSize(1);
  Assertions.assertThat(tableB).isNull();
  Assertions.assertThat(tableC).isNull();
  records=consumeRecordsByTopic(1);
  tableB=records.recordsForTopic(server1.dbo.table_ab);
  Assertions.assertThat(tableB).hasSize(1);
  Assertions.assertThat(tableC).isNull();
  records=consumeRecordsByTopic(1);
  tableC=records.recordsForTopic(server1.dbo.table_ac);
  Assertions.assertThat(tableC).hasSize(1);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SnapshotIT.java",548
965,"'-tryline","@Test @FixFor({DBZ-1292,DBZ-3157}) public void shouldOutputRecordsInCloudEventsFormat() throws Exception {
  final Configuration config=TestHelper.defaultConfig().build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  final SourceRecords snapshotRecords=consumeRecordsByTopic(INITIAL_RECORDS_PER_TABLE);
  final List<SourceRecord> snapshotTable1=snapshotRecords.recordsForTopic(server1.dbo.table1);
  assertThat(snapshotTable1).hasSize(INITIAL_RECORDS_PER_TABLE);
  for (  SourceRecord sourceRecord : snapshotTable1) {
    CloudEventsConverterTest.shouldConvertToCloudEventsInJson(sourceRecord,false);
    CloudEventsConverterTest.shouldConvertToCloudEventsInJsonWithDataAsAvro(sourceRecord,false);
    CloudEventsConverterTest.shouldConvertToCloudEventsInAvro(sourceRecord,sqlserver,server1,false);
  }
  for (int i=0; i < STREAMING_RECORDS_PER_TABLE; i++) {
    final int id=i + INITIAL_RECORDS_PER_TABLE;
    connection.execute(String.format(INSERT INTO table1 VALUES(%s, '%s', %s, '%s'),id,name + id,new BigDecimal(id + .23),2018-07-18 13:28:56));
  }
  final SourceRecords streamingRecords=consumeRecordsByTopic(STREAMING_RECORDS_PER_TABLE);
  final List<SourceRecord> streamingTable1=streamingRecords.recordsForTopic(server1.dbo.table1);
  assertThat(streamingTable1).hasSize(INITIAL_RECORDS_PER_TABLE);
  for (  SourceRecord sourceRecord : streamingTable1) {
    CloudEventsConverterTest.shouldConvertToCloudEventsInJson(sourceRecord,false,jsonNode -> {
      assertThat(jsonNode.get(CloudEventsMaker.FieldName.ID).asText()).contains(event_serial_no:1);
    }
);
    CloudEventsConverterTest.shouldConvertToCloudEventsInJsonWithDataAsAvro(sourceRecord,false);
    CloudEventsConverterTest.shouldConvertToCloudEventsInAvro(sourceRecord,sqlserver,server1,false);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SnapshotIT.java",591
966,"'-tryline","@Test @FixFor(DBZ-1224) public void takeSnapshotWithOverrides() throws Exception {
  final Configuration config=TestHelper.defaultConfig().with(RelationalDatabaseConnectorConfig.SNAPSHOT_SELECT_STATEMENT_OVERRIDES_BY_TABLE,dbo.table1,dbo.table3).with(RelationalDatabaseConnectorConfig.SNAPSHOT_SELECT_STATEMENT_OVERRIDES_BY_TABLE + .dbo.table1,SELECT * FROM [dbo].[table1] where soft_deleted = 0 order by id desc).with(RelationalDatabaseConnectorConfig.SNAPSHOT_SELECT_STATEMENT_OVERRIDES_BY_TABLE + .dbo.table3,SELECT * FROM [dbo].[table3] where soft_deleted = 0).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  SourceRecords records=consumeRecordsByTopic(INITIAL_RECORDS_PER_TABLE + (INITIAL_RECORDS_PER_TABLE + INITIAL_RECORDS_PER_TABLE) / 2);
  List<SourceRecord> table1=records.recordsForTopic(server1.dbo.table1);
  List<SourceRecord> table2=records.recordsForTopic(server1.dbo.table2);
  List<SourceRecord> table3=records.recordsForTopic(server1.dbo.table3);
  assertThat(table1).hasSize(INITIAL_RECORDS_PER_TABLE / 2);
  assertThat(table2).hasSize(INITIAL_RECORDS_PER_TABLE);
  assertThat(table3).hasSize(INITIAL_RECORDS_PER_TABLE / 2);
  String expectedIdsForTable1=86420;
  StringBuilder actualIdsForTable1=new StringBuilder();
  for (int i=0; i < INITIAL_RECORDS_PER_TABLE / 2; i++) {
    SourceRecord record=table1.get(i);
    Struct key=(Struct)record.key();
    actualIdsForTable1.append(key.get(id));
    Struct value=(Struct)record.value();
    assertThat(((Struct)value.get(after)).get(soft_deleted)).isEqualTo(false);
  }
  assertThat(actualIdsForTable1.toString()).isEqualTo(expectedIdsForTable1);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SnapshotWithSelectOverridesIT.java",93
967,"'-tryline","@Test @FixFor(DBZ-1546) public void shouldParseWhitespaceChars() throws Exception {
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(SqlServerConnectorConfig.TABLE_INCLUDE_LIST,dbo\\.UAT WAG CZ\\$Fixed Asset.*, dbo\\.UAT WAG CZ\\$Fixed Prop.*).build();
  connection.execute(CREATE TABLE [UAT WAG CZ$Fixed Asset] (id int primary key, [my col$a] varchar(30)),CREATE TABLE [UAT WAG CZ$Fixed Prop] (id int primary key, [my col$a] varchar(30)),INSERT INTO [UAT WAG CZ$Fixed Asset] VALUES(1, 'asset'),INSERT INTO [UAT WAG CZ$Fixed Prop] VALUES(1, 'prop'));
  TestHelper.enableTableCdc(connection,UAT WAG CZ$Fixed Asset);
  TestHelper.enableTableCdc(connection,person);
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  SourceRecords actualRecords=consumeRecordsByTopic(2,false);
  Assertions.assertThat(actualRecords.recordsForTopic(server1.dbo.UAT_WAG_CZ_Fixed_Asset)).hasSize(1);
  Assertions.assertThat(actualRecords.recordsForTopic(server1.dbo.UAT_WAG_CZ_Fixed_Prop)).hasSize(1);
  List<SourceRecord> carRecords=actualRecords.recordsForTopic(server1.dbo.UAT_WAG_CZ_Fixed_Asset);
  Assertions.assertThat(carRecords.size()).isEqualTo(1);
  SourceRecord carRecord=carRecords.get(0);
  assertSchemaMatchesStruct((Struct)((Struct)carRecord.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.UAT_WAG_CZ_Fixed_Asset.Value).field(id,Schema.INT32_SCHEMA).field(my col$a,Schema.OPTIONAL_STRING_SCHEMA).build());
  assertSchemaMatchesStruct((Struct)carRecord.key(),SchemaBuilder.struct().name(server1.dbo.UAT_WAG_CZ_Fixed_Asset.Key).field(id,Schema.INT32_SCHEMA).build());
  Assertions.assertThat(((Struct)carRecord.value()).getStruct(after).getString(my col$a)).isEqualTo(asset);
  List<SourceRecord> personRecords=actualRecords.recordsForTopic(server1.dbo.UAT_WAG_CZ_Fixed_Prop);
  Assertions.assertThat(personRecords.size()).isEqualTo(1);
  SourceRecord personRecord=personRecords.get(0);
  assertSchemaMatchesStruct((Struct)((Struct)personRecord.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.UAT_WAG_CZ_Fixed_Prop.Value).field(id,Schema.INT32_SCHEMA).field(my col$a,Schema.OPTIONAL_STRING_SCHEMA).build());
  assertSchemaMatchesStruct((Struct)personRecord.key(),SchemaBuilder.struct().name(server1.dbo.UAT_WAG_CZ_Fixed_Prop.Key).field(id,Schema.INT32_SCHEMA).build());
  Assertions.assertThat(((Struct)personRecord.value()).getStruct(after).getString(my col$a)).isEqualTo(prop);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SpecialCharsInNamesIT.java",52
968,"'-tryline","@Test @FixFor(DBZ-1153) public void shouldParseSpecialChars() throws Exception {
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(SqlServerConnectorConfig.TABLE_INCLUDE_LIST,dbo\\.UAT WAG CZ\\$Fixed Asset.*).with(SqlServerConnectorConfig.SANITIZE_FIELD_NAMES,true).build();
  connection.execute(CREATE TABLE [UAT WAG CZ$Fixed Asset] (id int primary key, [my col$a] varchar(30)),INSERT INTO [UAT WAG CZ$Fixed Asset] VALUES(1, 'a'));
  TestHelper.enableTableCdc(connection,UAT WAG CZ$Fixed Asset);
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  SourceRecords records=consumeRecordsByTopic(1);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.UAT_WAG_CZ_Fixed_Asset)).hasSize(1);
  SourceRecord record=records.recordsForTopic(server1.dbo.UAT_WAG_CZ_Fixed_Asset).get(0);
  assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.UAT_WAG_CZ_Fixed_Asset.Value).field(id,Schema.INT32_SCHEMA).field(my_col_a,Schema.OPTIONAL_STRING_SCHEMA).build());
  assertSchemaMatchesStruct((Struct)record.key(),SchemaBuilder.struct().name(server1.dbo.UAT_WAG_CZ_Fixed_Asset.Key).field(id,Schema.INT32_SCHEMA).build());
  Assertions.assertThat(((Struct)record.value()).getStruct(after).getInt32(id)).isEqualTo(1);
  connection.execute(INSERT INTO [UAT WAG CZ$Fixed Asset] VALUES(2, 'b'));
  records=consumeRecordsByTopic(1);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.UAT_WAG_CZ_Fixed_Asset)).hasSize(1);
  record=records.recordsForTopic(server1.dbo.UAT_WAG_CZ_Fixed_Asset).get(0);
  assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.UAT_WAG_CZ_Fixed_Asset.Value).field(id,Schema.INT32_SCHEMA).field(my_col_a,Schema.OPTIONAL_STRING_SCHEMA).build());
  assertSchemaMatchesStruct((Struct)record.key(),SchemaBuilder.struct().name(server1.dbo.UAT_WAG_CZ_Fixed_Asset.Key).field(id,Schema.INT32_SCHEMA).build());
  Assertions.assertThat(((Struct)record.value()).getStruct(after).getInt32(id)).isEqualTo(2);
  connection.execute(CREATE TABLE [UAT WAG CZ$Fixed Asset Two] (id int primary key, [my col$] varchar(30), Description varchar(30) NOT NULL));
  TestHelper.enableTableCdc(connection,UAT WAG CZ$Fixed Asset Two);
  connection.execute(INSERT INTO [UAT WAG CZ$Fixed Asset Two] VALUES(3, 'b', 'empty'));
  records=consumeRecordsByTopic(1);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.UAT_WAG_CZ_Fixed_Asset_Two)).hasSize(1);
  record=records.recordsForTopic(server1.dbo.UAT_WAG_CZ_Fixed_Asset_Two).get(0);
  assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.UAT_WAG_CZ_Fixed_Asset_Two.Value).field(id,Schema.INT32_SCHEMA).field(my_col_,Schema.OPTIONAL_STRING_SCHEMA).field(Description,Schema.STRING_SCHEMA).build());
  assertSchemaMatchesStruct((Struct)record.key(),SchemaBuilder.struct().name(server1.dbo.UAT_WAG_CZ_Fixed_Asset_Two.Key).field(id,Schema.INT32_SCHEMA).build());
  Assertions.assertThat(((Struct)record.value()).getStruct(after).getInt32(id)).isEqualTo(3);
  connection.execute(UPDATE [UAT WAG CZ$Fixed Asset Two] SET Description='c1' WHERE id=3);
  records=consumeRecordsByTopic(1);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.UAT_WAG_CZ_Fixed_Asset_Two)).hasSize(1);
  record=records.recordsForTopic(server1.dbo.UAT_WAG_CZ_Fixed_Asset_Two).get(0);
  assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.UAT_WAG_CZ_Fixed_Asset_Two.Value).field(id,Schema.INT32_SCHEMA).field(my_col_,Schema.OPTIONAL_STRING_SCHEMA).field(Description,Schema.STRING_SCHEMA).build());
  assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(before),SchemaBuilder.struct().optional().name(server1.dbo.UAT_WAG_CZ_Fixed_Asset_Two.Value).field(id,Schema.INT32_SCHEMA).field(my_col_,Schema.OPTIONAL_STRING_SCHEMA).field(Description,Schema.STRING_SCHEMA).build());
  Assertions.assertThat(((Struct)record.value()).getStruct(after).getString(Description)).isEqualTo(c1);
  Assertions.assertThat(((Struct)record.value()).getStruct(before).getString(Description)).isEqualTo(empty);
  stopConnector();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  connection.execute(INSERT INTO [UAT WAG CZ$Fixed Asset] VALUES(4, 'b'));
  records=consumeRecordsByTopic(1);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.UAT_WAG_CZ_Fixed_Asset)).hasSize(1);
  record=records.recordsForTopic(server1.dbo.UAT_WAG_CZ_Fixed_Asset).get(0);
  assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.UAT_WAG_CZ_Fixed_Asset.Value).field(id,Schema.INT32_SCHEMA).field(my_col_a,Schema.OPTIONAL_STRING_SCHEMA).build());
  assertSchemaMatchesStruct((Struct)record.key(),SchemaBuilder.struct().name(server1.dbo.UAT_WAG_CZ_Fixed_Asset.Key).field(id,Schema.INT32_SCHEMA).build());
  Assertions.assertThat(((Struct)record.value()).getStruct(after).getInt32(id)).isEqualTo(4);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SpecialCharsInNamesIT.java",116
969,"'-tryline","@Test public void addTable() throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int TABLES=2;
  final int ID_START=10;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForSnapshotToBeCompleted();
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  SourceRecords records=consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablea)).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tableb)).hasSize(RECORDS_PER_TABLE);
  TestHelper.enableTableCdc(connection,tablec);
  connection.execute(CREATE TABLE tabled (id int primary key, cold varchar(30)));
  TestHelper.enableTableCdc(connection,tabled);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START + i;
    connection.execute(INSERT INTO tablec VALUES( + id + , 'c'));
    connection.execute(INSERT INTO tabled VALUES( + id + , 'd'));
  }
  records=consumeRecordsByTopic(RECORDS_PER_TABLE * 2);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablec)).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tabled)).hasSize(RECORDS_PER_TABLE);
  records.recordsForTopic(server1.dbo.tablec).forEach(record -> {
    assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.tablec.Value).field(id,Schema.INT32_SCHEMA).field(colc,Schema.OPTIONAL_STRING_SCHEMA).build());
  }
);
  records.recordsForTopic(server1.dbo.tabled).forEach(record -> {
    assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.tabled.Value).field(id,Schema.INT32_SCHEMA).field(cold,Schema.OPTIONAL_STRING_SCHEMA).build());
  }
);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerChangeTableSetIT.java",68
970,"'-tryline","@Test public void removeTable() throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int TABLES=2;
  final int ID_START_1=10;
  final int ID_START_2=100;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForSnapshotToBeCompleted();
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START_1 + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  SourceRecords records=consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablea)).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tableb)).hasSize(RECORDS_PER_TABLE);
  TestHelper.disableTableCdc(connection,tableb);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START_2 + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a2'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b2'));
  }
  records=consumeRecordsByTopic(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablea)).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tableb)).isNullOrEmpty();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerChangeTableSetIT.java",133
971,"'-tryline","@Test public void addColumnToTableEndOfBatch() throws Exception {
  addColumnToTable(true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerChangeTableSetIT.java",174
972,"'-tryline","@Test public void addColumnToTableMiddleOfBatch() throws Exception {
  addColumnToTable(false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerChangeTableSetIT.java",179
973,"'-tryline","private void addColumnToTable(boolean pauseAfterCaptureChange) throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int TABLES=2;
  final int ID_START_1=10;
  final int ID_START_2=100;
  final int ID_START_3=1000;
  final int ID_START_4=10000;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForSnapshotToBeCompleted();
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START_1 + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  SourceRecords records=consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablea)).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tableb)).hasSize(RECORDS_PER_TABLE);
  records.recordsForTopic(server1.dbo.tableb).forEach(record -> {
    assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.tableb.Value).field(id,Schema.INT32_SCHEMA).field(colb,Schema.OPTIONAL_STRING_SCHEMA).build());
  }
);
  connection.execute(ALTER TABLE dbo.tableb ADD newcol INT NOT NULL DEFAULT 0);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START_2 + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a2'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b2', 2));
  }
  records=consumeRecordsByTopic(RECORDS_PER_TABLE * 2);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablea)).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tableb)).hasSize(RECORDS_PER_TABLE);
  records.recordsForTopic(server1.dbo.tableb).forEach(record -> {
    assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.tableb.Value).field(id,Schema.INT32_SCHEMA).field(colb,Schema.OPTIONAL_STRING_SCHEMA).build());
  }
);
  TestHelper.enableTableCdc(connection,tableb,after_change);
  if (pauseAfterCaptureChange) {
    Thread.sleep(5_000);
  }
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START_3 + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a3'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b3', 3));
  }
  records=consumeRecordsByTopic(RECORDS_PER_TABLE * 2);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablea)).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tableb)).hasSize(RECORDS_PER_TABLE);
  records.recordsForTopic(server1.dbo.tableb).forEach(record -> {
    assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.tableb.Value).field(id,Schema.INT32_SCHEMA).field(colb,Schema.OPTIONAL_STRING_SCHEMA).field(newcol,SchemaBuilder.int32().defaultValue(0).build()).build());
  }
);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START_4 + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a4'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b4', 4));
  }
  records=consumeRecordsByTopic(RECORDS_PER_TABLE * 2);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablea)).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tableb)).hasSize(RECORDS_PER_TABLE);
  records.recordsForTopic(server1.dbo.tableb).forEach(record -> {
    assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.tableb.Value).field(id,Schema.INT32_SCHEMA).field(colb,Schema.OPTIONAL_STRING_SCHEMA).field(newcol,SchemaBuilder.int32().defaultValue(0).build()).build());
  }
);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerChangeTableSetIT.java",184
974,"'-tryline","@Test public void removeColumnFromTable() throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int TABLES=2;
  final int ID_START_1=10;
  final int ID_START_2=100;
  final int ID_START_3=1000;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForSnapshotToBeCompleted();
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START_1 + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  SourceRecords records=consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablea)).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tableb)).hasSize(RECORDS_PER_TABLE);
  records.recordsForTopic(server1.dbo.tableb).forEach(record -> {
    assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.tableb.Value).field(id,Schema.INT32_SCHEMA).field(colb,Schema.OPTIONAL_STRING_SCHEMA).build());
  }
);
  connection.execute(ALTER TABLE dbo.tableb DROP COLUMN colb);
  TestHelper.enableTableCdc(connection,tableb,after_change);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START_2 + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a2'));
    connection.execute(INSERT INTO tableb VALUES( + id + ));
  }
  records=consumeRecordsByTopic(RECORDS_PER_TABLE * 2);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablea)).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tableb)).hasSize(RECORDS_PER_TABLE);
  records.recordsForTopic(server1.dbo.tableb).forEach(record -> {
    assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.tableb.Value).field(id,Schema.INT32_SCHEMA).build());
  }
);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START_3 + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a3'));
    connection.execute(INSERT INTO tableb VALUES( + id + ));
  }
  records=consumeRecordsByTopic(RECORDS_PER_TABLE * 2);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablea)).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tableb)).hasSize(RECORDS_PER_TABLE);
  records.recordsForTopic(server1.dbo.tableb).forEach(record -> {
    assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.tableb.Value).field(id,Schema.INT32_SCHEMA).build());
  }
);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerChangeTableSetIT.java",297
975,"'-tryline","@Test @FixFor(DBZ-2716) public void removeColumnFromTableWithoutChangingCapture() throws Exception {
  connection.execute(CREATE TABLE tableb2 (colb1 varchar(30), id int primary key, colb2 varchar(30)));
  TestHelper.enableTableCdc(connection,tableb2);
  connection.execute(ALTER TABLE dbo.tableb2 DROP COLUMN colb1);
  final int RECORDS_PER_TABLE=5;
  final int TABLES=1;
  final int ID_START_1=10;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.TABLE_INCLUDE_LIST,dbo.tableb2).with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(SqlServerConnectorConfig.COLUMN_INCLUDE_LIST,.*id).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForSnapshotToBeCompleted();
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START_1 + i;
    connection.execute(INSERT INTO tableb2 VALUES( + id + , 'b2'));
  }
  SourceRecords records=consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tableb2)).hasSize(RECORDS_PER_TABLE);
  records.recordsForTopic(server1.dbo.tableb2).forEach(record -> {
    assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.tableb2.Value).field(id,Schema.INT32_SCHEMA).build());
  }
);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerChangeTableSetIT.java",380
976,"'-tryline","@Test public void addColumnToTableWithParallelWrites() throws Exception {
  final int RECORDS_PER_TABLE=20;
  final int TABLES=2;
  final int ID_START_1=10;
  final int ID_START_2=100;
  final int ID_START_3=1000;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForSnapshotToBeCompleted();
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START_1 + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  SourceRecords records=consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablea)).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tableb)).hasSize(RECORDS_PER_TABLE);
  records.recordsForTopic(server1.dbo.tableb).forEach(record -> {
    assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.tableb.Value).field(id,Schema.INT32_SCHEMA).field(colb,Schema.OPTIONAL_STRING_SCHEMA).build());
  }
);
  Executors.newSingleThreadExecutor().submit(() -> {
    try (JdbcConnection connection=TestHelper.testConnection()){
      for (int i=0; i < RECORDS_PER_TABLE; i++) {
        final int id=ID_START_2 + i;
        connection.execute(INSERT INTO tablea VALUES( + id + , 'a2'));
        connection.execute(INSERT INTO tableb(id,colb) VALUES( + id + ,'b'));
        Thread.sleep(1000);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      throw new IllegalArgumentException(e);
    }
  }
);
  connection.execute(ALTER TABLE dbo.tableb ADD colb2 VARCHAR(32));
  TestHelper.enableTableCdc(connection,tableb,after_change);
  records=consumeRecordsByTopic(RECORDS_PER_TABLE * 2);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablea)).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tableb)).hasSize(RECORDS_PER_TABLE);
  final AtomicInteger beforeChangeCount=new AtomicInteger();
  final AtomicInteger afterChangeCount=new AtomicInteger();
  records.recordsForTopic(server1.dbo.tableb).forEach(record -> {
    if (((Struct)record.value()).getStruct(after).schema().field(colb2) != null) {
      afterChangeCount.incrementAndGet();
    }
 else {
      beforeChangeCount.incrementAndGet();
      Assertions.assertThat(afterChangeCount.intValue()).isZero();
    }
  }
);
  Assertions.assertThat(beforeChangeCount.intValue()).isPositive();
  Assertions.assertThat(afterChangeCount.intValue()).isPositive();
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START_3 + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a3'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b1', 'b2'));
  }
  records=consumeRecordsByTopic(RECORDS_PER_TABLE * 2);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablea)).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tableb)).hasSize(RECORDS_PER_TABLE);
  records.recordsForTopic(server1.dbo.tableb).forEach(record -> {
    assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.tableb.Value).field(id,Schema.INT32_SCHEMA).field(colb,Schema.OPTIONAL_STRING_SCHEMA).field(colb2,Schema.OPTIONAL_STRING_SCHEMA).build());
  }
);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerChangeTableSetIT.java",419
977,"'-tryline","@Test public void readHistoryAfterRestart() throws Exception {
  final int RECORDS_PER_TABLE=1;
  final int TABLES=2;
  final int ID_START_1=10;
  final int ID_START_2=100;
  final int ID_START_3=1000;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForStreamingStarted();
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START_1 + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  SourceRecords records=consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablea)).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tableb)).hasSize(RECORDS_PER_TABLE);
  connection.execute(ALTER TABLE dbo.tableb DROP COLUMN colb);
  TestHelper.enableTableCdc(connection,tableb,after_change);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START_2 + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a2'));
    connection.execute(INSERT INTO tableb VALUES( + id + ));
  }
  records=consumeRecordsByTopic(RECORDS_PER_TABLE * 2);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablea)).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tableb)).hasSize(RECORDS_PER_TABLE);
  stopConnector();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START_3 + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a3'));
    connection.execute(INSERT INTO tableb VALUES( + id + ));
  }
  records=consumeRecordsByTopic(RECORDS_PER_TABLE * 2);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablea)).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tableb)).hasSize(RECORDS_PER_TABLE);
  records.recordsForTopic(server1.dbo.tableb).forEach(record -> {
    assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.tableb.Value).field(id,Schema.INT32_SCHEMA).build());
  }
);
  final DocumentReader reader=DocumentReader.defaultReader();
  final List<Document> changes=new ArrayList<>();
  IoUtil.readLines(TestHelper.DB_HISTORY_PATH,line -> {
    try {
      changes.add(reader.read(line));
    }
 catch (    IOException e) {
      throw new IllegalStateException(e);
    }
  }
);
  Assertions.assertThat(changes).hasSize(3 + 1);
  changes.subList(0,3).forEach(change -> {
    final Array changeArray=change.getArray(tableChanges);
    Assertions.assertThat(changeArray.size()).isEqualTo(1);
    final String type=changeArray.get(0).asDocument().getString(type);
    Assertions.assertThat(type).isEqualTo(CREATE);
  }
);
  final Array changeArray=changes.get(3).getArray(tableChanges);
  Assertions.assertThat(changeArray.size()).isEqualTo(1);
  final String type=changeArray.get(0).asDocument().getString(type);
  final String tableIid=changeArray.get(0).asDocument().getString(id);
  Assertions.assertThat(type).isEqualTo(ALTER);
  Assertions.assertThat(tableIid).isEqualTo(\testDB\.\dbo\.\tableb\);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerChangeTableSetIT.java",518
978,"'-tryline","@Test public void renameColumn() throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int TABLES=2;
  final int ID_START_1=10;
  final int ID_START_2=100;
  final int ID_START_3=1000;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForSnapshotToBeCompleted();
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START_1 + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  SourceRecords records=consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablea)).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tableb)).hasSize(RECORDS_PER_TABLE);
  records.recordsForTopic(server1.dbo.tableb).forEach(record -> {
    assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.tableb.Value).field(id,Schema.INT32_SCHEMA).field(colb,Schema.OPTIONAL_STRING_SCHEMA).build());
  }
);
  TestHelper.disableTableCdc(connection,tableb);
  connection.execute(exec sp_rename 'tableb.colb', 'newcolb';);
  TestHelper.enableTableCdc(connection,tableb,after_change);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START_2 + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a2'));
    connection.execute(INSERT INTO tableb(id,newcolb) VALUES( + id + , 'b2'));
  }
  records=consumeRecordsByTopic(RECORDS_PER_TABLE * 2);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablea)).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tableb)).hasSize(RECORDS_PER_TABLE);
  records.recordsForTopic(server1.dbo.tableb).forEach(record -> {
    assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.tableb.Value).field(id,Schema.INT32_SCHEMA).field(newcolb,Schema.OPTIONAL_STRING_SCHEMA).build());
  }
);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START_3 + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a3'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b3'));
  }
  records=consumeRecordsByTopic(RECORDS_PER_TABLE * 2);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablea)).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tableb)).hasSize(RECORDS_PER_TABLE);
  records.recordsForTopic(server1.dbo.tableb).forEach(record -> {
    assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.tableb.Value).field(id,Schema.INT32_SCHEMA).field(newcolb,Schema.OPTIONAL_STRING_SCHEMA).build());
  }
);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerChangeTableSetIT.java",611
979,"'-tryline","@Test public void changeColumn() throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int TABLES=2;
  final int ID_START_1=10;
  final int ID_START_2=100;
  final int ID_START_3=1000;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForSnapshotToBeCompleted();
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START_1 + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , '+ id+ '));
  }
  SourceRecords records=consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablea)).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tableb)).hasSize(RECORDS_PER_TABLE);
  records.recordsForTopic(server1.dbo.tableb).forEach(record -> {
    assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.tableb.Value).field(id,Schema.INT32_SCHEMA).field(colb,Schema.OPTIONAL_STRING_SCHEMA).build());
    final Struct value=((Struct)record.value()).getStruct(after);
    final int id=value.getInt32(id);
    final String colb=value.getString(colb);
    Assertions.assertThat(Integer.toString(id)).isEqualTo(colb);
  }
);
  connection.execute(ALTER TABLE dbo.tableb ALTER COLUMN colb INT);
  TestHelper.enableTableCdc(connection,tableb,after_change);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START_2 + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a2'));
    connection.execute(INSERT INTO tableb VALUES( + id + , '+ id+  '));
  }
  records=consumeRecordsByTopic(RECORDS_PER_TABLE * 2);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablea)).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tableb)).hasSize(RECORDS_PER_TABLE);
  records.recordsForTopic(server1.dbo.tableb).forEach(record -> {
    assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.tableb.Value).field(id,Schema.INT32_SCHEMA).field(colb,Schema.OPTIONAL_INT32_SCHEMA).build());
    final Struct value=((Struct)record.value()).getStruct(after);
    final int id=value.getInt32(id);
    final int colb=value.getInt32(colb);
    Assertions.assertThat(id).isEqualTo(colb);
  }
);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START_3 + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a3'));
    connection.execute(INSERT INTO tableb VALUES( + id + , '+ id+  '));
  }
  records=consumeRecordsByTopic(RECORDS_PER_TABLE * 2);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tablea)).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.tableb)).hasSize(RECORDS_PER_TABLE);
  records.recordsForTopic(server1.dbo.tableb).forEach(record -> {
    assertSchemaMatchesStruct((Struct)((Struct)record.value()).get(after),SchemaBuilder.struct().optional().name(server1.dbo.tableb.Value).field(id,Schema.INT32_SCHEMA).field(colb,Schema.OPTIONAL_INT32_SCHEMA).build());
    final Struct value=((Struct)record.value()).getStruct(after);
    final int id=value.getInt32(id);
    final int colb=value.getInt32(colb);
    Assertions.assertThat(id).isEqualTo(colb);
  }
);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerChangeTableSetIT.java",698
980,"'-tryline","@Test @FixFor(DBZ-1491) public void addDefaultValue() throws Exception {
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForSnapshotToBeCompleted();
  TestHelper.waitForStreamingStarted();
  TestHelper.waitForMaxLsnAvailable(connection);
  connection.execute(ALTER TABLE dbo.tableb ADD DEFAULT ('default_value') FOR colb);
  TestHelper.enableTableCdc(connection,tableb,after_change);
  connection.execute(INSERT INTO tableb VALUES('1', 'some_value'));
  TestHelper.waitForCdcRecord(connection,tableb,after_change,rs -> rs.getInt(id) == 1);
  List<SourceRecord> records=consumeRecordsByTopic(1).recordsForTopic(server1.dbo.tableb);
  Assertions.assertThat(records).hasSize(1);
  Testing.debug(Records:  + records);
  Testing.debug(Value Schema:  + records.get(0).valueSchema());
  Testing.debug(Fields:  + records.get(0).valueSchema().fields());
  Testing.debug(After Schema:  + records.get(0).valueSchema().field(after).schema());
  Testing.debug(After Columns:  + records.get(0).valueSchema().field(after).schema().fields());
  Schema colbSchema=records.get(0).valueSchema().field(after).schema().field(colb).schema();
  Testing.debug(ColumnB Schema:  + colbSchema);
  Testing.debug(ColumnB Schema Default Value:  + colbSchema.defaultValue());
  Assertions.assertThat(colbSchema.defaultValue()).isNotNull();
  Assertions.assertThat(colbSchema.defaultValue()).isEqualTo(default_value);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerChangeTableSetIT.java",795
981,"'-tryline","@Test @FixFor(DBZ-1491) public void alterDefaultValue() throws Exception {
  connection.execute(CREATE TABLE table_dv (id int primary key, colb varchar(30)));
  connection.execute(ALTER TABLE dbo.table_dv ADD CONSTRAINT DV_colb DEFAULT ('default_value') FOR colb);
  TestHelper.enableTableCdc(connection,table_dv);
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForSnapshotToBeCompleted();
  connection.execute(INSERT INTO table_dv VALUES('1', 'some_value'));
  consumeRecordsByTopic(1);
  connection.execute(ALTER TABLE dbo.table_dv DROP CONSTRAINT DV_colb);
  connection.execute(ALTER TABLE dbo.table_dv ADD DEFAULT ('new_default_value') FOR colb);
  TestHelper.enableTableCdc(connection,table_dv,after_change);
  connection.execute(INSERT INTO table_dv VALUES('2', 'some_value2'));
  List<SourceRecord> records=consumeRecordsByTopic(1).recordsForTopic(server1.dbo.table_dv);
  Assertions.assertThat(records).hasSize(1);
  Schema colbSchema=records.get(0).valueSchema().field(after).schema().field(colb).schema();
  Assertions.assertThat(colbSchema.defaultValue()).isNotNull();
  Assertions.assertThat(colbSchema.defaultValue()).isEqualTo(new_default_value);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerChangeTableSetIT.java",830
982,"'-tryline","@Test public void shouldEnableCdcForDatabase() throws Exception {
  try (SqlServerConnection connection=TestHelper.adminConnection()){
    connection.connect();
    connection.execute(CREATE DATABASE testDB);
    connection.execute(USE testDB);
    TestHelper.enableDbCdc(connection,testDB);
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectionIT.java",58
983,"'-tryline","@Test public void shouldEnableCdcWithWrapperFunctionsForTable() throws Exception {
  try (SqlServerConnection connection=TestHelper.adminConnection()){
    connection.connect();
    connection.execute(CREATE DATABASE testDB);
    connection.execute(USE testDB);
    TestHelper.enableDbCdc(connection,testDB);
    String sql=IF EXISTS (select 1 from sys.objects where name = 'testTable' and type = 'u')\n + DROP TABLE testTable\n + CREATE TABLE testTable (ID int not null identity(1, 1) primary key, NUMBER int, TEXT text);
    connection.execute(sql);
    TestHelper.enableTableCdc(connection,testTable);
    connection.execute(INSERT INTO testTable (NUMBER, TEXT) values (1, 'aaa')\n + INSERT INTO testTable (NUMBER, TEXT) values (2, 'bbb'));
    Thread.sleep(5_000);
    Testing.Print.enable();
    connection.query(select * from cdc.fn_cdc_get_all_changes_dbo_testTable(sys.fn_cdc_get_min_lsn('dbo_testTable'), sys.fn_cdc_get_max_lsn(), N'all'),rs -> {
      while (rs.next()) {
        final BigInteger lsn=new BigInteger(rs.getBytes(1));
        final StringBuilder sb=new StringBuilder(lsn.toString());
        for (int col=1; col <= rs.getMetaData().getColumnCount(); col++) {
          sb.append(rs.getObject(col)).append(' ');
        }
        Testing.print(sb.toString());
      }
    }
);
    Testing.Print.disable();
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectionIT.java",69
984,"'-tryline","@Test @FixFor(DBZ-1491) public void shouldProperlyGetDefaultColumnValues() throws Exception {
  try (SqlServerConnection connection=TestHelper.adminConnection()){
    connection.connect();
    connection.execute(CREATE DATABASE testDB);
    connection.execute(USE testDB);
  }
   try (SqlServerConnection connection=TestHelper.testConnection()){
    connection.connect();
    TestHelper.enableDbCdc(connection,testDB);
    String sql=IF EXISTS (select 1 from sys.objects where name = 'table_with_defaults' and type = 'u')\n + DROP TABLE testTable\n + CREATE TABLE testDB.dbo.table_with_defaults (+     int_no_default_not_null int not null,+     int_no_default int,+     bigint_column bigint default (3147483648),+     int_column int default (2147483647),+     smallint_column smallint default (32767),+     tinyint_column tinyint default (255),+     bit_column bit default(1),+     decimal_column decimal(20,5) default (100.12345),+     decimal_mismatch_default numeric(10,5) default 200.1,+     numeric_column numeric(10,3) default (200.123),+     numeric_mismatch_default numeric(10,3) default 200.1,+     money_column money default (922337203685477.58),+     money_mismatch_default money default 922337203685477,+     smallmoney_column smallmoney default (214748.3647),+     smallmoney_mismatch_default smallmoney default 922337203685477,+     float_column float default (1.2345e2),+     real_column real default (1.2345e3),+     date_column date default ('2019-02-03'),+     datetime_column datetime default ('2019-01-01 12:34:56.789'),+     datetime2_column datetime2 default ('2019-01-01 12:34:56.1234567'),+     datetime2_0_column datetime2(0) default ('2019-01-01 12:34:56'),+     datetime2_1_column datetime2(1) default ('2019-01-01 12:34:56.1'),+     datetime2_2_column datetime2(2) default ('2019-01-01 12:34:56.12'),+     datetime2_3_column datetime2(3) default ('2019-01-01 12:34:56.123'),+     datetime2_4_column datetime2(4) default ('2019-01-01 12:34:56.1234'),+     datetime2_5_column datetime2(5) default ('2019-01-01 12:34:56.12345'),+     datetime2_6_column datetime2(6) default ('2019-01-01 12:34:56.123456'),+     datetime2_7_column datetime2(7) default ('2019-01-01 12:34:56.1234567'),+     datetimeoffset_column datetimeoffset default ('2019-01-01 00:00:00.1234567+02:00'),+     smalldatetime_column smalldatetime default ('2019-01-01 12:34:00'),+     time_column time default ('12:34:56.1234567'),+     time_0_column time(0) default ('12:34:56'),+     time_1_column time(1) default ('12:34:56.1'),+     time_2_column time(2) default ('12:34:56.12'),+     time_3_column time(3) default ('12:34:56.123'),+     time_4_column time(4) default ('12:34:56.1234'),+     time_5_column time(5) default ('12:34:56.12345'),+     time_6_column time(6) default ('12:34:56.123456'),+     time_7_column time(7) default ('12:34:56.1234567'),+     char_column char(3) default ('aaa'),+     varchar_column varchar(20) default ('bbb'),+     text_column text default ('ccc'),+     nchar_column nchar(3) default ('ddd'),+     nvarchar_column nvarchar(20) default ('eee'),+     ntext_column ntext default ('fff'),+     binary_column binary(5) default (0x0102030405),+     varbinary_column varbinary(10) default (0x010203040506),+     image_column image default (0x01020304050607)+ );;
    connection.execute(sql);
    TestHelper.enableTableCdc(connection,table_with_defaults);
    Thread.sleep(5_000);
    List<String> capturedColumns=Arrays.asList(int_no_default_not_null,int_no_default,bigint_column,int_column,smallint_column,tinyint_column,bit_column,decimal_column,decimal_mismatch_default,numeric_column,numeric_mismatch_default,money_column,money_mismatch_default,smallmoney_column,smallmoney_mismatch_default,float_column,real_column,date_column,datetime_column,datetime2_column,datetime2_0_column,datetime2_1_column,datetime2_2_column,datetime2_3_column,datetime2_4_column,datetime2_5_column,datetime2_6_column,datetime2_7_column,datetimeoffset_column,smalldatetime_column,time_column,time_0_column,time_1_column,time_2_column,time_3_column,time_4_column,time_5_column,time_6_column,time_7_column,char_column,varchar_column,text_column,nchar_column,nvarchar_column,ntext_column,binary_column,varbinary_column,image_column);
    SqlServerChangeTable changeTable=new SqlServerChangeTable(new TableId(testDB,dbo,table_with_defaults),null,0,null,null,capturedColumns);
    Table table=connection.getTableSchemaFromTable(changeTable);
    assertColumnHasNotDefaultValue(table,int_no_default_not_null);
    assertColumnHasDefaultValue(table,int_no_default,null);
    assertColumnHasDefaultValue(table,bigint_column,3147483648L);
    assertColumnHasDefaultValue(table,int_column,2147483647);
    assertColumnHasDefaultValue(table,smallint_column,(short)32767);
    assertColumnHasDefaultValue(table,tinyint_column,(short)255);
    assertColumnHasDefaultValue(table,bit_column,true);
    assertColumnHasDefaultValue(table,decimal_column,new BigDecimal(100.12345));
    assertColumnHasDefaultValue(table,decimal_mismatch_default,new BigDecimal(200.10000));
    assertColumnHasDefaultValue(table,numeric_column,new BigDecimal(200.123));
    assertColumnHasDefaultValue(table,numeric_mismatch_default,new BigDecimal(200.100));
    assertColumnHasDefaultValue(table,money_column,new BigDecimal(922337203685477.5800));
    assertColumnHasDefaultValue(table,money_mismatch_default,new BigDecimal(922337203685477.0000));
    assertColumnHasDefaultValue(table,smallmoney_column,new BigDecimal(214748.3647));
    assertColumnHasDefaultValue(table,smallmoney_mismatch_default,new BigDecimal(922337203685477.0000));
    assertColumnHasDefaultValue(table,float_column,123.45);
    assertColumnHasDefaultValue(table,real_column,1234.5f);
    assertColumnHasDefaultValue(table,date_column,17930);
    assertColumnHasDefaultValue(table,datetime_column,toMillis(OffsetDateTime.of(2019,1,1,12,34,56,790_000_000,databaseZoneOffset)));
    assertColumnHasDefaultValue(table,datetime2_column,toNanos(OffsetDateTime.of(2019,1,1,12,34,56,123_456_700,databaseZoneOffset)));
    assertColumnHasDefaultValue(table,datetime2_0_column,toMillis(OffsetDateTime.of(2019,1,1,12,34,56,0,databaseZoneOffset)));
    assertColumnHasDefaultValue(table,datetime2_1_column,toMillis(OffsetDateTime.of(2019,1,1,12,34,56,100_000_000,databaseZoneOffset)));
    assertColumnHasDefaultValue(table,datetime2_2_column,toMillis(OffsetDateTime.of(2019,1,1,12,34,56,120_000_000,databaseZoneOffset)));
    assertColumnHasDefaultValue(table,datetime2_3_column,toMillis(OffsetDateTime.of(2019,1,1,12,34,56,123_000_000,databaseZoneOffset)));
    assertColumnHasDefaultValue(table,datetime2_4_column,toMicros(OffsetDateTime.of(2019,1,1,12,34,56,123_400_000,databaseZoneOffset)));
    assertColumnHasDefaultValue(table,datetime2_5_column,toMicros(OffsetDateTime.of(2019,1,1,12,34,56,123_450_000,databaseZoneOffset)));
    assertColumnHasDefaultValue(table,datetime2_6_column,toMicros(OffsetDateTime.of(2019,1,1,12,34,56,123_456_000,databaseZoneOffset)));
    assertColumnHasDefaultValue(table,datetime2_7_column,toNanos(OffsetDateTime.of(2019,1,1,12,34,56,123_456_700,databaseZoneOffset)));
    assertColumnHasDefaultValue(table,datetimeoffset_column,2019-01-01T00:00:00.1234567+02:00);
    assertColumnHasDefaultValue(table,smalldatetime_column,toMillis(OffsetDateTime.of(2019,1,1,12,34,0,0,databaseZoneOffset)));
    assertColumnHasDefaultValue(table,time_column,toNanos(OffsetDateTime.of(1970,1,1,12,34,56,123_000_000,databaseZoneOffset)));
    assertColumnHasDefaultValue(table,time_0_column,(int)toMillis(OffsetDateTime.of(1970,1,1,12,34,56,0,databaseZoneOffset)));
    assertColumnHasDefaultValue(table,time_1_column,(int)toMillis(OffsetDateTime.of(1970,1,1,12,34,56,100_000_000,databaseZoneOffset)));
    assertColumnHasDefaultValue(table,time_2_column,(int)toMillis(OffsetDateTime.of(1970,1,1,12,34,56,120_000_000,databaseZoneOffset)));
    assertColumnHasDefaultValue(table,time_3_column,(int)toMillis(OffsetDateTime.of(1970,1,1,12,34,56,123_000_000,databaseZoneOffset)));
    assertColumnHasDefaultValue(table,time_4_column,toMicros(OffsetDateTime.of(1970,1,1,12,34,56,123_000_000,databaseZoneOffset)));
    assertColumnHasDefaultValue(table,time_5_column,toMicros(OffsetDateTime.of(1970,1,1,12,34,56,123_000_000,databaseZoneOffset)));
    assertColumnHasDefaultValue(table,time_6_column,toMicros(OffsetDateTime.of(1970,1,1,12,34,56,123_000_000,databaseZoneOffset)));
    assertColumnHasDefaultValue(table,time_7_column,toNanos(OffsetDateTime.of(1970,1,1,12,34,56,123_000_000,databaseZoneOffset)));
    assertColumnHasDefaultValue(table,char_column,aaa);
    assertColumnHasDefaultValue(table,varchar_column,bbb);
    assertColumnHasDefaultValue(table,text_column,ccc);
    assertColumnHasDefaultValue(table,nchar_column,ddd);
    assertColumnHasDefaultValue(table,nvarchar_column,eee);
    assertColumnHasDefaultValue(table,ntext_column,fff);
    assertColumnHasDefaultValue(table,binary_column,ByteBuffer.wrap(new byte[]{1,2,3,4,5}));
    assertColumnHasDefaultValue(table,varbinary_column,ByteBuffer.wrap(new byte[]{1,2,3,4,5,6}));
    assertColumnHasDefaultValue(table,image_column,ByteBuffer.wrap(new byte[]{1,2,3,4,5,6,7}));
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectionIT.java",112
985,"'-tryline","@Test @FixFor(DBZ-2698) public void shouldProperlyGetDefaultColumnNullValues() throws Exception {
  try (SqlServerConnection connection=TestHelper.adminConnection()){
    connection.connect();
    connection.execute(CREATE DATABASE testDB);
    connection.execute(USE testDB);
  }
   try (SqlServerConnection connection=TestHelper.testConnection()){
    connection.connect();
    TestHelper.enableDbCdc(connection,testDB);
    String sql=IF EXISTS (select 1 from sys.objects where name = 'table_with_defaults' and type = 'u')\n + DROP TABLE testTable\n + CREATE TABLE testDB.dbo.table_with_defaults (+     int_no_default_not_null int not null,+     int_no_default int,+     int_default_null int default null,+     int_column int default (2147483647),+     bigint_no_default_not_null bigint not null,+     bigint_no_default bigint,+     bigint_default_null bigint default null,+     bigint_column bigint default (3147483648.),+     smallint_no_default_not_null smallint not null,+     smallint_no_default smallint,+     smallint_default_null smallint default null,+     smallint_column smallint default (32767),+     tinyint_no_default_not_null tinyint not null,+     tinyint_no_default tinyint,+     tinyint_default_null tinyint default null,+     tinyint_column tinyint default (255),+     float_no_default_not_null float not null,+     float_no_default float,+     float_default_null float default null,+     float_column float default (1.2345e2),+     real_no_default_not_null real not null,+     real_no_default real,+     real_default_null real default null,+     real_column real default (1.2345e3),+ );;
    connection.execute(sql);
    TestHelper.enableTableCdc(connection,table_with_defaults);
    Awaitility.await().atMost(5,TimeUnit.SECONDS).until(() -> connection.getMinLsn(table_with_defaults).isAvailable());
    List<String> capturedColumns=Arrays.asList(int_no_default_not_null,int_no_default,int_default_null,int_column,bigint_no_default_not_null,bigint_no_default,bigint_default_null,bigint_column,smallint_no_default_not_null,smallint_no_default,smallint_default_null,smallint_column,tinyint_no_default_not_null,tinyint_no_default,tinyint_default_null,tinyint_column,float_no_default_not_null,float_no_default,float_default_null,float_column,real_no_default_not_null,real_no_default,real_default_null,real_column);
    SqlServerChangeTable changeTable=new SqlServerChangeTable(new TableId(testDB,dbo,table_with_defaults),null,0,null,null,capturedColumns);
    Table table=connection.getTableSchemaFromTable(changeTable);
    assertColumnHasNotDefaultValue(table,int_no_default_not_null);
    assertColumnHasDefaultValue(table,int_no_default,null);
    assertColumnHasDefaultValue(table,int_default_null,null);
    assertColumnHasDefaultValue(table,int_column,2147483647);
    assertColumnHasNotDefaultValue(table,bigint_no_default_not_null);
    assertColumnHasDefaultValue(table,bigint_no_default,null);
    assertColumnHasDefaultValue(table,bigint_default_null,null);
    assertColumnHasDefaultValue(table,bigint_column,3147483648L);
    assertColumnHasNotDefaultValue(table,smallint_no_default_not_null);
    assertColumnHasDefaultValue(table,smallint_no_default,null);
    assertColumnHasDefaultValue(table,smallint_default_null,null);
    assertColumnHasDefaultValue(table,smallint_column,(short)32767);
    assertColumnHasNotDefaultValue(table,tinyint_no_default_not_null);
    assertColumnHasDefaultValue(table,tinyint_no_default,null);
    assertColumnHasDefaultValue(table,tinyint_default_null,null);
    assertColumnHasDefaultValue(table,tinyint_column,(short)255);
    assertColumnHasNotDefaultValue(table,float_no_default_not_null);
    assertColumnHasDefaultValue(table,float_no_default,null);
    assertColumnHasDefaultValue(table,float_default_null,null);
    assertColumnHasDefaultValue(table,float_column,123.45);
    assertColumnHasNotDefaultValue(table,real_no_default_not_null);
    assertColumnHasDefaultValue(table,real_no_default,null);
    assertColumnHasDefaultValue(table,real_default_null,null);
    assertColumnHasDefaultValue(table,real_column,1234.5f);
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectionIT.java",255
986,"'-tryline","@Test public void createAndDelete() throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int TABLES=2;
  final int ID_START=10;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  consumeRecordsByTopic(1);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  final SourceRecords records=consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.tablea);
  final List<SourceRecord> tableB=records.recordsForTopic(server1.dbo.tableb);
  Assertions.assertThat(tableA).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(tableB).hasSize(RECORDS_PER_TABLE);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final SourceRecord recordA=tableA.get(i);
    final SourceRecord recordB=tableB.get(i);
    final List<SchemaAndValueField> expectedRowA=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,i + ID_START),new SchemaAndValueField(cola,Schema.OPTIONAL_STRING_SCHEMA,a));
    final List<SchemaAndValueField> expectedRowB=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,i + ID_START),new SchemaAndValueField(colb,Schema.OPTIONAL_STRING_SCHEMA,b));
    final Struct keyA=(Struct)recordA.key();
    final Struct valueA=(Struct)recordA.value();
    assertRecord((Struct)valueA.get(after),expectedRowA);
    assertNull(valueA.get(before));
    final Struct keyB=(Struct)recordB.key();
    final Struct valueB=(Struct)recordB.value();
    assertRecord((Struct)valueB.get(after),expectedRowB);
    assertNull(valueB.get(before));
  }
  connection.execute(DELETE FROM tableB);
  final SourceRecords deleteRecords=consumeRecordsByTopic(2 * RECORDS_PER_TABLE);
  final List<SourceRecord> deleteTableA=deleteRecords.recordsForTopic(server1.dbo.tablea);
  final List<SourceRecord> deleteTableB=deleteRecords.recordsForTopic(server1.dbo.tableb);
  Assertions.assertThat(deleteTableA).isNullOrEmpty();
  Assertions.assertThat(deleteTableB).hasSize(2 * RECORDS_PER_TABLE);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final SourceRecord deleteRecord=deleteTableB.get(i * 2);
    final SourceRecord tombstoneRecord=deleteTableB.get(i * 2 + 1);
    final List<SchemaAndValueField> expectedDeleteRow=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,i + ID_START),new SchemaAndValueField(colb,Schema.OPTIONAL_STRING_SCHEMA,b));
    final Struct deleteKey=(Struct)deleteRecord.key();
    final Struct deleteValue=(Struct)deleteRecord.value();
    assertRecord((Struct)deleteValue.get(before),expectedDeleteRow);
    assertNull(deleteValue.get(after));
    final Struct tombstoneKey=(Struct)tombstoneRecord.key();
    final Struct tombstoneValue=(Struct)tombstoneRecord.value();
    assertNull(tombstoneValue);
  }
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",98
987,"'-tryline","@Test @FixFor(DBZ-1642) public void readOnlyApplicationIntent() throws Exception {
  final LogInterceptor logInterceptor=new LogInterceptor();
  final String appId=readOnlyApplicationIntent- + UUID.randomUUID();
  final int RECORDS_PER_TABLE=5;
  final int TABLES=2;
  final int ID_START=10;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(database.applicationIntent,ReadOnly).with(database.applicationName,appId).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForSnapshotToBeCompleted();
  consumeRecordsByTopic(1);
  TestHelper.waitForStreamingStarted();
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  final SourceRecords records=consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES,24);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.tablea);
  final List<SourceRecord> tableB=records.recordsForTopic(server1.dbo.tableb);
  Assertions.assertThat(tableA).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(tableB).hasSize(RECORDS_PER_TABLE);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final SourceRecord recordA=tableA.get(i);
    final SourceRecord recordB=tableB.get(i);
    final List<SchemaAndValueField> expectedRowA=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,i + ID_START),new SchemaAndValueField(cola,Schema.OPTIONAL_STRING_SCHEMA,a));
    final List<SchemaAndValueField> expectedRowB=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,i + ID_START),new SchemaAndValueField(colb,Schema.OPTIONAL_STRING_SCHEMA,b));
    final Struct keyA=(Struct)recordA.key();
    final Struct valueA=(Struct)recordA.value();
    assertRecord((Struct)valueA.get(after),expectedRowA);
    assertNull(valueA.get(before));
    final Struct keyB=(Struct)recordB.key();
    final Struct valueB=(Struct)recordB.value();
    assertRecord((Struct)valueB.get(after),expectedRowB);
    assertNull(valueB.get(before));
  }
  assertThat(logInterceptor.containsMessage(Schema locking was disabled in connector configuration)).isTrue();
  try (final SqlServerConnection admin=TestHelper.adminConnection()){
    final Set<Long> txIds=new HashSet<>();
    Awaitility.await().atMost(TestHelper.waitTimeForRecords() * 5,TimeUnit.SECONDS).pollInterval(100,TimeUnit.MILLISECONDS).until(() -> {
      admin.query(SELECT (SELECT transaction_id FROM sys.dm_tran_session_transactions AS t WHERE s.session_id=t.session_id) FROM sys.dm_exec_sessions AS s WHERE program_name=' + appId + ',rs -> {
        rs.next();
        txIds.add(rs.getLong(1));
      }
);
      return txIds.size() > 2;
    }
);
  }
   stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",174
988,"'-tryline","@Test @FixFor(DBZ-1643) public void timestampAndTimezone() throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int TABLES=2;
  final int ID_START=10;
  final TimeZone currentTimeZone=TimeZone.getDefault();
  try {
    TimeZone.setDefault(TimeZone.getTimeZone(Australia/Canberra));
    final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).build();
    start(SqlServerConnector.class,config);
    assertConnectorIsRunning();
    consumeRecordsByTopic(1);
    final Instant now=Instant.now();
    final Instant lowerBound=now.minusSeconds(5 * 60);
    final Instant upperBound=now.plusSeconds(5 * 60);
    for (int i=0; i < RECORDS_PER_TABLE; i++) {
      final int id=ID_START + i;
      connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
      connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
    }
    final SourceRecords records=consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES);
    final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.tablea);
    final List<SourceRecord> tableB=records.recordsForTopic(server1.dbo.tableb);
    Assertions.assertThat(tableA).hasSize(RECORDS_PER_TABLE);
    Assertions.assertThat(tableB).hasSize(RECORDS_PER_TABLE);
    for (int i=0; i < RECORDS_PER_TABLE; i++) {
      final SourceRecord recordA=tableA.get(i);
      final long timestamp=((Struct)recordA.value()).getStruct(source).getInt64(ts_ms);
      final Instant instant=Instant.ofEpochMilli(timestamp);
      Assertions.assertThat(instant.isAfter(lowerBound) && instant.isBefore(upperBound)).isTrue();
    }
    stopConnector();
  }
  finally {
    TimeZone.setDefault(currentTimeZone);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",250
989,"'-tryline","@Test public void deleteWithoutTombstone() throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int TABLES=2;
  final int ID_START=10;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(SqlServerConnectorConfig.TOMBSTONES_ON_DELETE,false).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  consumeRecordsByTopic(1);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  final SourceRecords records=consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES);
  connection.execute(DELETE FROM tableB);
  final SourceRecords deleteRecords=consumeRecordsByTopic(RECORDS_PER_TABLE);
  final List<SourceRecord> deleteTableA=deleteRecords.recordsForTopic(server1.dbo.tablea);
  final List<SourceRecord> deleteTableB=deleteRecords.recordsForTopic(server1.dbo.tableb);
  Assertions.assertThat(deleteTableA).isNullOrEmpty();
  Assertions.assertThat(deleteTableB).hasSize(RECORDS_PER_TABLE);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final SourceRecord deleteRecord=deleteTableB.get(i);
    final List<SchemaAndValueField> expectedDeleteRow=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,i + ID_START),new SchemaAndValueField(colb,Schema.OPTIONAL_STRING_SCHEMA,b));
    final Struct deleteKey=(Struct)deleteRecord.key();
    final Struct deleteValue=(Struct)deleteRecord.value();
    assertRecord((Struct)deleteValue.get(before),expectedDeleteRow);
    assertNull(deleteValue.get(after));
  }
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",299
990,"'-tryline","@Test public void update() throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int ID_START=10;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  consumeRecordsByTopic(1);
  connection.setAutoCommit(false);
  final String[] tableBInserts=new String[RECORDS_PER_TABLE];
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START + i;
    tableBInserts[i]=INSERT INTO tableb VALUES( + id + , 'b');
  }
  connection.execute(tableBInserts);
  connection.setAutoCommit(true);
  connection.execute(UPDATE tableb SET colb='z');
  final SourceRecords records=consumeRecordsByTopic(RECORDS_PER_TABLE * 2);
  final List<SourceRecord> tableB=records.recordsForTopic(server1.dbo.tableb);
  Assertions.assertThat(tableB).hasSize(RECORDS_PER_TABLE * 2);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final SourceRecord recordB=tableB.get(i);
    final List<SchemaAndValueField> expectedRowB=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,i + ID_START),new SchemaAndValueField(colb,Schema.OPTIONAL_STRING_SCHEMA,b));
    final Struct keyB=(Struct)recordB.key();
    final Struct valueB=(Struct)recordB.value();
    assertRecord((Struct)valueB.get(after),expectedRowB);
    assertNull(valueB.get(before));
  }
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final SourceRecord recordB=tableB.get(i + RECORDS_PER_TABLE);
    final List<SchemaAndValueField> expectedBefore=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,i + ID_START),new SchemaAndValueField(colb,Schema.OPTIONAL_STRING_SCHEMA,b));
    final List<SchemaAndValueField> expectedAfter=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,i + ID_START),new SchemaAndValueField(colb,Schema.OPTIONAL_STRING_SCHEMA,z));
    final Struct keyB=(Struct)recordB.key();
    final Struct valueB=(Struct)recordB.value();
    assertRecord((Struct)valueB.get(before),expectedBefore);
    assertRecord((Struct)valueB.get(after),expectedAfter);
  }
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",347
991,"'-tryline","@Test public void updatePrimaryKey() throws Exception {
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  consumeRecordsByTopic(1);
  connection.execute(INSERT INTO tableb VALUES(1, 'b'));
  consumeRecordsByTopic(1);
  connection.setAutoCommit(false);
  connection.execute(UPDATE tablea SET id=100 WHERE id=1,UPDATE tableb SET id=100 WHERE id=1);
  final SourceRecords records=consumeRecordsByTopic(6);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.tablea);
  final List<SourceRecord> tableB=records.recordsForTopic(server1.dbo.tableb);
  Assertions.assertThat(tableA).hasSize(3);
  Assertions.assertThat(tableB).hasSize(3);
  final List<SchemaAndValueField> expectedDeleteRowA=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,1),new SchemaAndValueField(cola,Schema.OPTIONAL_STRING_SCHEMA,a));
  final List<SchemaAndValueField> expectedDeleteKeyA=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,1));
  final List<SchemaAndValueField> expectedInsertRowA=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,100),new SchemaAndValueField(cola,Schema.OPTIONAL_STRING_SCHEMA,a));
  final List<SchemaAndValueField> expectedInsertKeyA=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,100));
  final SourceRecord deleteRecordA=tableA.get(0);
  final SourceRecord tombstoneRecordA=tableA.get(1);
  final SourceRecord insertRecordA=tableA.get(2);
  final Struct deleteKeyA=(Struct)deleteRecordA.key();
  final Struct deleteValueA=(Struct)deleteRecordA.value();
  assertRecord(deleteValueA.getStruct(before),expectedDeleteRowA);
  assertRecord(deleteKeyA,expectedDeleteKeyA);
  assertNull(deleteValueA.get(after));
  final Struct tombstoneKeyA=(Struct)tombstoneRecordA.key();
  final Struct tombstoneValueA=(Struct)tombstoneRecordA.value();
  assertRecord(tombstoneKeyA,expectedDeleteKeyA);
  assertNull(tombstoneValueA);
  final Struct insertKeyA=(Struct)insertRecordA.key();
  final Struct insertValueA=(Struct)insertRecordA.value();
  assertRecord(insertValueA.getStruct(after),expectedInsertRowA);
  assertRecord(insertKeyA,expectedInsertKeyA);
  assertNull(insertValueA.get(before));
  final List<SchemaAndValueField> expectedDeleteRowB=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,1),new SchemaAndValueField(colb,Schema.OPTIONAL_STRING_SCHEMA,b));
  final List<SchemaAndValueField> expectedDeleteKeyB=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,1));
  final List<SchemaAndValueField> expectedInsertRowB=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,100),new SchemaAndValueField(colb,Schema.OPTIONAL_STRING_SCHEMA,b));
  final List<SchemaAndValueField> expectedInsertKeyB=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,100));
  final SourceRecord deleteRecordB=tableB.get(0);
  final SourceRecord tombstoneRecordB=tableB.get(1);
  final SourceRecord insertRecordB=tableB.get(2);
  final Struct deletekeyB=(Struct)deleteRecordB.key();
  final Struct deleteValueB=(Struct)deleteRecordB.value();
  assertRecord(deleteValueB.getStruct(before),expectedDeleteRowB);
  assertRecord(deletekeyB,expectedDeleteKeyB);
  assertNull(deleteValueB.get(after));
  assertThat(deleteValueB.getStruct(source).getInt64(event_serial_no)).isEqualTo(1L);
  final Struct tombstonekeyB=(Struct)tombstoneRecordB.key();
  final Struct tombstoneValueB=(Struct)tombstoneRecordB.value();
  assertRecord(tombstonekeyB,expectedDeleteKeyB);
  assertNull(tombstoneValueB);
  final Struct insertkeyB=(Struct)insertRecordB.key();
  final Struct insertValueB=(Struct)insertRecordB.value();
  assertRecord(insertValueB.getStruct(after),expectedInsertRowB);
  assertRecord(insertkeyB,expectedInsertKeyB);
  assertNull(insertValueB.get(before));
  assertThat(insertValueB.getStruct(source).getInt64(event_serial_no)).isEqualTo(2L);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",406
992,"'-tryline","@Test @FixFor(DBZ-1152) public void updatePrimaryKeyWithRestartInMiddle() throws Exception {
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).build();
  start(SqlServerConnector.class,config,record -> {
    final Struct envelope=(Struct)record.value();
    return envelope != null && c.equals(envelope.get(op)) && (envelope.getStruct(after).getInt32(id) == 100);
  }
);
  assertConnectorIsRunning();
  consumeRecordsByTopic(1);
  connection.execute(INSERT INTO tableb VALUES(1, 'b'));
  consumeRecordsByTopic(1);
  connection.setAutoCommit(false);
  connection.execute(UPDATE tablea SET id=100 WHERE id=1,UPDATE tableb SET id=100 WHERE id=1);
  final SourceRecords records1=consumeRecordsByTopic(2);
  stopConnector();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  final SourceRecords records2=consumeRecordsByTopic(4);
  final List<SourceRecord> tableA=records1.recordsForTopic(server1.dbo.tablea);
  tableA.addAll(records2.recordsForTopic(server1.dbo.tablea));
  final List<SourceRecord> tableB=records2.recordsForTopic(server1.dbo.tableb);
  Assertions.assertThat(tableA).hasSize(3);
  Assertions.assertThat(tableB).hasSize(3);
  final List<SchemaAndValueField> expectedDeleteRowA=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,1),new SchemaAndValueField(cola,Schema.OPTIONAL_STRING_SCHEMA,a));
  final List<SchemaAndValueField> expectedDeleteKeyA=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,1));
  final List<SchemaAndValueField> expectedInsertRowA=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,100),new SchemaAndValueField(cola,Schema.OPTIONAL_STRING_SCHEMA,a));
  final List<SchemaAndValueField> expectedInsertKeyA=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,100));
  final SourceRecord deleteRecordA=tableA.get(0);
  final SourceRecord tombstoneRecordA=tableA.get(1);
  final SourceRecord insertRecordA=tableA.get(2);
  final Struct deleteKeyA=(Struct)deleteRecordA.key();
  final Struct deleteValueA=(Struct)deleteRecordA.value();
  assertRecord(deleteValueA.getStruct(before),expectedDeleteRowA);
  assertRecord(deleteKeyA,expectedDeleteKeyA);
  assertNull(deleteValueA.get(after));
  final Struct tombstoneKeyA=(Struct)tombstoneRecordA.key();
  final Struct tombstoneValueA=(Struct)tombstoneRecordA.value();
  assertRecord(tombstoneKeyA,expectedDeleteKeyA);
  assertNull(tombstoneValueA);
  final Struct insertKeyA=(Struct)insertRecordA.key();
  final Struct insertValueA=(Struct)insertRecordA.value();
  assertRecord(insertValueA.getStruct(after),expectedInsertRowA);
  assertRecord(insertKeyA,expectedInsertKeyA);
  assertNull(insertValueA.get(before));
  final List<SchemaAndValueField> expectedDeleteRowB=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,1),new SchemaAndValueField(colb,Schema.OPTIONAL_STRING_SCHEMA,b));
  final List<SchemaAndValueField> expectedDeleteKeyB=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,1));
  final List<SchemaAndValueField> expectedInsertRowB=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,100),new SchemaAndValueField(colb,Schema.OPTIONAL_STRING_SCHEMA,b));
  final List<SchemaAndValueField> expectedInsertKeyB=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,100));
  final SourceRecord deleteRecordB=tableB.get(0);
  final SourceRecord tombstoneRecordB=tableB.get(1);
  final SourceRecord insertRecordB=tableB.get(2);
  final Struct deletekeyB=(Struct)deleteRecordB.key();
  final Struct deleteValueB=(Struct)deleteRecordB.value();
  assertRecord(deleteValueB.getStruct(before),expectedDeleteRowB);
  assertRecord(deletekeyB,expectedDeleteKeyB);
  assertNull(deleteValueB.get(after));
  final Struct tombstonekeyB=(Struct)tombstoneRecordB.key();
  final Struct tombstoneValueB=(Struct)tombstoneRecordB.value();
  assertRecord(tombstonekeyB,expectedDeleteKeyB);
  assertNull(tombstoneValueB);
  final Struct insertkeyB=(Struct)insertRecordB.key();
  final Struct insertValueB=(Struct)insertRecordB.value();
  assertRecord(insertValueB.getStruct(after),expectedInsertRowB);
  assertRecord(insertkeyB,expectedInsertKeyB);
  assertNull(insertValueB.get(before));
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",504
993,"'-tryline","@Test @FixFor(DBZ-2329) public void updatePrimaryKeyTwiceWithRestartInMiddleOfTx() throws Exception {
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(SqlServerConnectorConfig.MAX_QUEUE_SIZE,2).with(SqlServerConnectorConfig.MAX_BATCH_SIZE,1).with(SqlServerConnectorConfig.TOMBSTONES_ON_DELETE,false).build();
  start(SqlServerConnector.class,config,record -> {
    final Struct envelope=(Struct)record.value();
    boolean stop=envelope != null && d.equals(envelope.get(op)) && (envelope.getStruct(before).getInt32(id) == 305);
    return stop;
  }
);
  assertConnectorIsRunning();
  consumeRecordsByTopic(1);
  connection.setAutoCommit(false);
  connection.execute(INSERT INTO tableb (id, colb) values (1,'1'));
  connection.execute(INSERT INTO tableb (id, colb) values (2,'2'));
  connection.execute(INSERT INTO tableb (id, colb) values (3,'3'));
  connection.execute(INSERT INTO tableb (id, colb) values (4,'4'));
  connection.execute(INSERT INTO tableb (id, colb) values (5,'5'));
  consumeRecordsByTopic(5);
  connection.execute(UPDATE tableb set id = colb + 300);
  connection.execute(UPDATE tableb set id = colb + 300);
  final SourceRecords records1=consumeRecordsByTopic(14);
  stopConnector();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  final SourceRecords records2=consumeRecordsByTopic(6);
  final List<SourceRecord> tableB=records1.recordsForTopic(server1.dbo.tableb);
  tableB.addAll(records2.recordsForTopic(server1.dbo.tableb));
  Assertions.assertThat(tableB).hasSize(20);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",611
994,"'-tryline","@Test public void streamChangesWhileStopped() throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int TABLES=2;
  final int ID_START=10;
  final int ID_RESTART=100;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  consumeRecordsByTopic(1);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES);
  stopConnector();
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_RESTART + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  final SourceRecords records=consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.tablea);
  List<SourceRecord> tableB=records.recordsForTopic(server1.dbo.tableb);
  Assertions.assertThat(tableA).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(tableB).hasSize(RECORDS_PER_TABLE);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=i + ID_RESTART;
    final SourceRecord recordA=tableA.get(i);
    final SourceRecord recordB=tableB.get(i);
    final List<SchemaAndValueField> expectedRowA=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,id),new SchemaAndValueField(cola,Schema.OPTIONAL_STRING_SCHEMA,a));
    final List<SchemaAndValueField> expectedRowB=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,id),new SchemaAndValueField(colb,Schema.OPTIONAL_STRING_SCHEMA,b));
    final Struct valueA=(Struct)recordA.value();
    assertRecord((Struct)valueA.get(after),expectedRowA);
    assertNull(valueA.get(before));
    final Struct valueB=(Struct)recordB.value();
    assertRecord((Struct)valueB.get(after),expectedRowB);
    assertNull(valueB.get(before));
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",661
995,"'-tryline","@Test @FixFor(DBZ-1069) public void verifyOffsets() throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int TABLES=2;
  final int ID_START=10;
  final int ID_RESTART=100;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).build();
  final List<Integer> expectedIds=new ArrayList<>();
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
    expectedIds.add(id);
  }
  final String tableaCT=connection.getNameOfChangeTable(tablea);
  final String tablebCT=connection.getNameOfChangeTable(tableb);
  TestHelper.waitForCdcRecord(connection,tableb,rs -> rs.getInt(id) == expectedIds.get(expectedIds.size() - 1));
  Awaitility.await().atMost(30,TimeUnit.SECONDS).until(() -> {
    if (!connection.getMaxLsn().isAvailable()) {
      return false;
    }
    Map<String,Boolean> resultMap=new HashMap<>();
    connection.listOfChangeTables().forEach(ct -> {
      final String tableName=ct.getChangeTableId().table();
      if (tableName.endsWith(dbo_ + tableaCT) || tableName.endsWith(dbo_ + tablebCT)) {
        try {
          final Lsn minLsn=connection.getMinLsn(tableName);
          final Lsn maxLsn=connection.getMaxLsn();
          SqlServerChangeTable[] tables=Collections.singletonList(ct).toArray(new SqlServerChangeTable[]{});
          final List<Integer> ids=new ArrayList<>();
          connection.getChangesForTables(tables,minLsn,maxLsn,resultsets -> {
            final ResultSet rs=resultsets[0];
            while (rs.next()) {
              ids.add(rs.getInt(id));
            }
          }
);
          if (ids.equals(expectedIds)) {
            resultMap.put(tableName,true);
          }
 else {
            resultMap.put(tableName,false);
          }
        }
 catch (        Exception e) {
          org.junit.Assert.fail(Failed to fetch changes for table  + tableName + : + e.getMessage());
        }
      }
    }
);
    return resultMap.values().stream().filter(v -> !v).count() == 0;
  }
);
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  List<SourceRecord> records=consumeRecordsByTopic(1 + RECORDS_PER_TABLE * TABLES).allRecordsInOrder();
  records=records.subList(1,records.size());
  for (Iterator<SourceRecord> it=records.iterator(); it.hasNext(); ) {
    SourceRecord record=it.next();
    assertThat(record.sourceOffset().get(snapshot)).as(Snapshot phase).isEqualTo(true);
    if (it.hasNext()) {
      assertThat(record.sourceOffset().get(snapshot_completed)).as(Snapshot in progress).isEqualTo(false);
    }
 else {
      assertThat(record.sourceOffset().get(snapshot_completed)).as(Snapshot completed).isEqualTo(true);
    }
  }
  stopConnector();
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_RESTART + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  final SourceRecords sourceRecords=consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES);
  final List<SourceRecord> tableA=sourceRecords.recordsForTopic(server1.dbo.tablea);
  final List<SourceRecord> tableB=sourceRecords.recordsForTopic(server1.dbo.tableb);
  Assertions.assertThat(tableA).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(tableB).hasSize(RECORDS_PER_TABLE);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=i + ID_RESTART;
    final SourceRecord recordA=tableA.get(i);
    final SourceRecord recordB=tableB.get(i);
    final List<SchemaAndValueField> expectedRowA=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,id),new SchemaAndValueField(cola,Schema.OPTIONAL_STRING_SCHEMA,a));
    final List<SchemaAndValueField> expectedRowB=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,id),new SchemaAndValueField(colb,Schema.OPTIONAL_STRING_SCHEMA,b));
    final Struct valueA=(Struct)recordA.value();
    assertRecord((Struct)valueA.get(after),expectedRowA);
    assertNull(valueA.get(before));
    final Struct valueB=(Struct)recordB.value();
    assertRecord((Struct)valueB.get(after),expectedRowB);
    assertNull(valueB.get(before));
    assertThat(recordA.sourceOffset().get(snapshot)).as(Streaming phase).isNull();
    assertThat(recordA.sourceOffset().get(snapshot_completed)).as(Streaming phase).isNull();
    assertThat(recordA.sourceOffset().get(change_lsn)).as(LSN present).isNotNull();
    assertThat(recordB.sourceOffset().get(snapshot)).as(Streaming phase).isNull();
    assertThat(recordB.sourceOffset().get(snapshot_completed)).as(Streaming phase).isNull();
    assertThat(recordB.sourceOffset().get(change_lsn)).as(LSN present).isNotNull();
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",726
996,"'-tryline","@Test public void testWhitelistTable() throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int TABLES=1;
  final int ID_START=10;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(SqlServerConnectorConfig.TABLE_WHITELIST,dbo.tableb).build();
  connection.execute(INSERT INTO tableb VALUES(1, 'b'));
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  consumeRecordsByTopic(1);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  final SourceRecords records=consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.tablea);
  final List<SourceRecord> tableB=records.recordsForTopic(server1.dbo.tableb);
  Assertions.assertThat(tableA == null || tableA.isEmpty()).isTrue();
  Assertions.assertThat(tableB).hasSize(RECORDS_PER_TABLE);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",853
997,"'-tryline","@Test public void testTableIncludeList() throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int TABLES=1;
  final int ID_START=10;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(SqlServerConnectorConfig.TABLE_INCLUDE_LIST,dbo.tableb).build();
  connection.execute(INSERT INTO tableb VALUES(1, 'b'));
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  consumeRecordsByTopic(1);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  final SourceRecords records=consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.tablea);
  final List<SourceRecord> tableB=records.recordsForTopic(server1.dbo.tableb);
  Assertions.assertThat(tableA == null || tableA.isEmpty()).isTrue();
  Assertions.assertThat(tableB).hasSize(RECORDS_PER_TABLE);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",888
998,"'-tryline","@Test public void testBlacklistTable() throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int TABLES=1;
  final int ID_START=10;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(SqlServerConnectorConfig.TABLE_BLACKLIST,dbo.tablea).build();
  connection.execute(INSERT INTO tableb VALUES(1, 'b'));
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  consumeRecordsByTopic(1);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  final SourceRecords records=consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.tablea);
  final List<SourceRecord> tableB=records.recordsForTopic(server1.dbo.tableb);
  Assertions.assertThat(tableA == null || tableA.isEmpty()).isTrue();
  Assertions.assertThat(tableB).hasSize(RECORDS_PER_TABLE);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",923
999,"'-tryline","@Test public void testTableExcludeList() throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int TABLES=1;
  final int ID_START=10;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(SqlServerConnectorConfig.TABLE_EXCLUDE_LIST,dbo.tablea).build();
  connection.execute(INSERT INTO tableb VALUES(1, 'b'));
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  consumeRecordsByTopic(1);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  final SourceRecords records=consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.tablea);
  final List<SourceRecord> tableB=records.recordsForTopic(server1.dbo.tableb);
  Assertions.assertThat(tableA == null || tableA.isEmpty()).isTrue();
  Assertions.assertThat(tableB).hasSize(RECORDS_PER_TABLE);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",958
1000,"'-tryline","@Test @FixFor(DBZ-1617) public void blacklistColumnWhenCdcColumnsDoNotMatchWithOriginalSnapshot() throws Exception {
  connection.execute(CREATE TABLE table_a (id int, name varchar(30), amount integer primary key(id)));
  TestHelper.enableTableCdc(connection,table_a);
  connection.execute(ALTER TABLE table_a ADD blacklisted_column varchar(30));
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(SqlServerConnectorConfig.COLUMN_EXCLUDE_LIST,dbo.table_a.blacklisted_column).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  consumeRecordsByTopic(1);
  connection.execute(INSERT INTO table_a VALUES(10, 'some_name', 120, 'some_string'));
  final SourceRecords records=consumeRecordsByTopic(1);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.table_a);
  Schema expectedSchemaA=SchemaBuilder.struct().optional().name(server1.dbo.table_a.Value).field(id,Schema.INT32_SCHEMA).field(name,Schema.OPTIONAL_STRING_SCHEMA).field(amount,Schema.OPTIONAL_INT32_SCHEMA).build();
  Struct expectedValueA=new Struct(expectedSchemaA).put(id,10).put(name,some_name).put(amount,120);
  Assertions.assertThat(tableA).hasSize(1);
  SourceRecordAssert.assertThat(tableA.get(0)).valueAfterFieldIsEqualTo(expectedValueA).valueAfterFieldSchemaIsEqualTo(expectedSchemaA);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",993
1001,"'-tryline","@Test @FixFor(DBZ-1067) public void testBlacklistColumn() throws Exception {
  connection.execute(CREATE TABLE blacklist_column_table_a (id int, name varchar(30), amount integer primary key(id)),CREATE TABLE blacklist_column_table_b (id int, name varchar(30), amount integer primary key(id)));
  TestHelper.enableTableCdc(connection,blacklist_column_table_a);
  TestHelper.enableTableCdc(connection,blacklist_column_table_b);
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(SqlServerConnectorConfig.COLUMN_BLACKLIST,dbo.blacklist_column_table_a.amount).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  consumeRecordsByTopic(1);
  connection.execute(INSERT INTO blacklist_column_table_a VALUES(10, 'some_name', 120));
  connection.execute(INSERT INTO blacklist_column_table_b VALUES(11, 'some_name', 447));
  final SourceRecords records=consumeRecordsByTopic(2);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.blacklist_column_table_a);
  final List<SourceRecord> tableB=records.recordsForTopic(server1.dbo.blacklist_column_table_b);
  Schema expectedSchemaA=SchemaBuilder.struct().optional().name(server1.dbo.blacklist_column_table_a.Value).field(id,Schema.INT32_SCHEMA).field(name,Schema.OPTIONAL_STRING_SCHEMA).build();
  Struct expectedValueA=new Struct(expectedSchemaA).put(id,10).put(name,some_name);
  Schema expectedSchemaB=SchemaBuilder.struct().optional().name(server1.dbo.blacklist_column_table_b.Value).field(id,Schema.INT32_SCHEMA).field(name,Schema.OPTIONAL_STRING_SCHEMA).field(amount,Schema.OPTIONAL_INT32_SCHEMA).build();
  Struct expectedValueB=new Struct(expectedSchemaB).put(id,11).put(name,some_name).put(amount,447);
  Assertions.assertThat(tableA).hasSize(1);
  SourceRecordAssert.assertThat(tableA.get(0)).valueAfterFieldIsEqualTo(expectedValueA).valueAfterFieldSchemaIsEqualTo(expectedSchemaA);
  Assertions.assertThat(tableB).hasSize(1);
  SourceRecordAssert.assertThat(tableB.get(0)).valueAfterFieldIsEqualTo(expectedValueB).valueAfterFieldSchemaIsEqualTo(expectedSchemaB);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",1037
1002,"'-tryline","@Test @FixFor(DBZ-1067) public void testColumnExcludeList() throws Exception {
  connection.execute(CREATE TABLE blacklist_column_table_a (id int, name varchar(30), amount integer primary key(id)),CREATE TABLE blacklist_column_table_b (id int, name varchar(30), amount integer primary key(id)));
  TestHelper.enableTableCdc(connection,blacklist_column_table_a);
  TestHelper.enableTableCdc(connection,blacklist_column_table_b);
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(SqlServerConnectorConfig.COLUMN_EXCLUDE_LIST,dbo.blacklist_column_table_a.amount).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  consumeRecordsByTopic(1);
  connection.execute(INSERT INTO blacklist_column_table_a VALUES(10, 'some_name', 120));
  connection.execute(INSERT INTO blacklist_column_table_b VALUES(11, 'some_name', 447));
  final SourceRecords records=consumeRecordsByTopic(2);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.blacklist_column_table_a);
  final List<SourceRecord> tableB=records.recordsForTopic(server1.dbo.blacklist_column_table_b);
  Schema expectedSchemaA=SchemaBuilder.struct().optional().name(server1.dbo.blacklist_column_table_a.Value).field(id,Schema.INT32_SCHEMA).field(name,Schema.OPTIONAL_STRING_SCHEMA).build();
  Struct expectedValueA=new Struct(expectedSchemaA).put(id,10).put(name,some_name);
  Schema expectedSchemaB=SchemaBuilder.struct().optional().name(server1.dbo.blacklist_column_table_b.Value).field(id,Schema.INT32_SCHEMA).field(name,Schema.OPTIONAL_STRING_SCHEMA).field(amount,Schema.OPTIONAL_INT32_SCHEMA).build();
  Struct expectedValueB=new Struct(expectedSchemaB).put(id,11).put(name,some_name).put(amount,447);
  Assertions.assertThat(tableA).hasSize(1);
  SourceRecordAssert.assertThat(tableA.get(0)).valueAfterFieldIsEqualTo(expectedValueA).valueAfterFieldSchemaIsEqualTo(expectedSchemaA);
  Assertions.assertThat(tableB).hasSize(1);
  SourceRecordAssert.assertThat(tableB.get(0)).valueAfterFieldIsEqualTo(expectedValueB).valueAfterFieldSchemaIsEqualTo(expectedSchemaB);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",1099
1003,"'-tryline","@Test @FixFor(DBZ-2522) public void testColumnIncludeList() throws Exception {
  connection.execute(CREATE TABLE include_list_column_table_a (id int, name varchar(30), amount integer primary key(id)),CREATE TABLE include_list_column_table_b (id int, name varchar(30), amount integer primary key(id)));
  TestHelper.enableTableCdc(connection,include_list_column_table_a);
  TestHelper.enableTableCdc(connection,include_list_column_table_b);
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(SqlServerConnectorConfig.COLUMN_INCLUDE_LIST,.*id,.*name,dbo.include_list_column_table_b.amount).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(sql_server,server1);
  consumeRecordsByTopic(1);
  connection.execute(INSERT INTO include_list_column_table_a VALUES(10, 'some_name', 120));
  connection.execute(INSERT INTO include_list_column_table_b VALUES(11, 'some_name', 447));
  final SourceRecords records=consumeRecordsByTopic(2);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.include_list_column_table_a);
  final List<SourceRecord> tableB=records.recordsForTopic(server1.dbo.include_list_column_table_b);
  Schema expectedSchemaA=SchemaBuilder.struct().optional().name(server1.dbo.include_list_column_table_a.Value).field(id,Schema.INT32_SCHEMA).field(name,Schema.OPTIONAL_STRING_SCHEMA).build();
  Struct expectedValueA=new Struct(expectedSchemaA).put(id,10).put(name,some_name);
  Schema expectedSchemaB=SchemaBuilder.struct().optional().name(server1.dbo.include_list_column_table_b.Value).field(id,Schema.INT32_SCHEMA).field(name,Schema.OPTIONAL_STRING_SCHEMA).field(amount,Schema.OPTIONAL_INT32_SCHEMA).build();
  Struct expectedValueB=new Struct(expectedSchemaB).put(id,11).put(name,some_name).put(amount,447);
  Assertions.assertThat(tableA).hasSize(1);
  SourceRecordAssert.assertThat(tableA.get(0)).valueAfterFieldIsEqualTo(expectedValueA).valueAfterFieldSchemaIsEqualTo(expectedSchemaA);
  Assertions.assertThat(tableB).hasSize(1);
  SourceRecordAssert.assertThat(tableB.get(0)).valueAfterFieldIsEqualTo(expectedValueB).valueAfterFieldSchemaIsEqualTo(expectedSchemaB);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",1161
1004,"'-tryline","@Test @FixFor(DBZ-1692) public void shouldConsumeEventsWithMaskedHashedColumns() throws Exception {
  connection.execute(CREATE TABLE masked_hashed_column_table_a (id int, name varchar(255) primary key(id)),CREATE TABLE masked_hashed_column_table_b (id int, name varchar(20), primary key(id)));
  TestHelper.enableTableCdc(connection,masked_hashed_column_table_a);
  TestHelper.enableTableCdc(connection,masked_hashed_column_table_b);
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(column.mask.hash.SHA-256.with.salt.CzQMA0cB5K,testDB.dbo.masked_hashed_column_table_a.name, testDB.dbo.masked_hashed_column_table_b.name).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  consumeRecordsByTopic(1);
  connection.execute(INSERT INTO masked_hashed_column_table_a VALUES(10, 'some_name'));
  connection.execute(INSERT INTO masked_hashed_column_table_b VALUES(11, 'some_name'));
  final SourceRecords records=consumeRecordsByTopic(2);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.masked_hashed_column_table_a);
  final List<SourceRecord> tableB=records.recordsForTopic(server1.dbo.masked_hashed_column_table_b);
  assertThat(tableA).hasSize(1);
  SourceRecord record=tableA.get(0);
  VerifyRecord.isValidInsert(record,id,10);
  Struct value=(Struct)record.value();
  if (value.getStruct(after) != null) {
    assertThat(value.getStruct(after).getString(name)).isEqualTo(3b225d0696535d66f2c0fb2e36b012c520d396af3dd8f18330b9c9cd23ca714e);
  }
  assertThat(tableB).hasSize(1);
  record=tableB.get(0);
  VerifyRecord.isValidInsert(record,id,11);
  value=(Struct)record.value();
  if (value.getStruct(after) != null) {
    assertThat(value.getStruct(after).getString(name)).isEqualTo(3b225d0696535d66f2c0);
  }
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",1224
1005,"'-tryline","@Test @FixFor(DBZ-1972) public void shouldConsumeEventsWithMaskedAndTruncatedColumns() throws Exception {
  connection.execute(CREATE TABLE masked_hashed_column_table (id int, name varchar(255) primary key(id)),CREATE TABLE truncated_column_table (id int, name varchar(20), primary key(id)));
  TestHelper.enableTableCdc(connection,masked_hashed_column_table);
  TestHelper.enableTableCdc(connection,truncated_column_table);
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(column.mask.with.12.chars,testDB.dbo.masked_hashed_column_table.name).with(column.truncate.to.4.chars,testDB.dbo.truncated_column_table.name).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  consumeRecordsByTopic(1);
  connection.execute(INSERT INTO masked_hashed_column_table VALUES(10, 'some_name'));
  connection.execute(INSERT INTO truncated_column_table VALUES(11, 'some_name'));
  final SourceRecords records=consumeRecordsByTopic(2);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.masked_hashed_column_table);
  final List<SourceRecord> tableB=records.recordsForTopic(server1.dbo.truncated_column_table);
  assertThat(tableA).hasSize(1);
  SourceRecord record=tableA.get(0);
  VerifyRecord.isValidInsert(record,id,10);
  Struct value=(Struct)record.value();
  if (value.getStruct(after) != null) {
    assertThat(value.getStruct(after).getString(name)).isEqualTo(************);
  }
  assertThat(tableB).hasSize(1);
  record=tableB.get(0);
  VerifyRecord.isValidInsert(record,id,11);
  value=(Struct)record.value();
  if (value.getStruct(after) != null) {
    assertThat(value.getStruct(after).getString(name)).isEqualTo(some);
  }
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",1272
1006,"'-tryline","@Test @FixFor(DBZ-2522) public void whenCaptureInstanceExcludesColumnsExpectSnapshotAndStreamingToExcludeColumns() throws Exception {
  connection.execute(CREATE TABLE excluded_column_table_a (id int, name varchar(30), amount integer primary key(id)));
  connection.execute(INSERT INTO excluded_column_table_a VALUES(10, 'a name', 100));
  TestHelper.enableTableCdc(connection,excluded_column_table_a,dbo_excluded_column_table_a,Arrays.asList(id,name));
  final Configuration config=TestHelper.defaultConfig().build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(sql_server,server1);
  connection.execute(INSERT INTO excluded_column_table_a VALUES(11, 'some_name', 120));
  final SourceRecords records=consumeRecordsByTopic(3);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.excluded_column_table_a);
  Schema expectedSchemaA=SchemaBuilder.struct().optional().name(server1.dbo.excluded_column_table_a.Value).field(id,Schema.INT32_SCHEMA).field(name,Schema.OPTIONAL_STRING_SCHEMA).build();
  Struct expectedValueSnapshot=new Struct(expectedSchemaA).put(id,10).put(name,a name);
  Struct expectedValueStreaming=new Struct(expectedSchemaA).put(id,11).put(name,some_name);
  Assertions.assertThat(tableA).hasSize(2);
  SourceRecordAssert.assertThat(tableA.get(0)).valueAfterFieldSchemaIsEqualTo(expectedSchemaA).valueAfterFieldIsEqualTo(expectedValueSnapshot);
  SourceRecordAssert.assertThat(tableA.get(1)).valueAfterFieldSchemaIsEqualTo(expectedSchemaA).valueAfterFieldIsEqualTo(expectedValueStreaming);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",1321
1007,"'-tryline","@Test @FixFor(DBZ-2522) public void whenMultipleCaptureInstancesExcludesColumnsExpectLatestCDCTableUtilized() throws Exception {
  connection.execute(CREATE TABLE excluded_column_table_a (id int, name varchar(30), amount integer primary key(id)));
  connection.execute(INSERT INTO excluded_column_table_a VALUES(10, 'a name', 100));
  TestHelper.enableTableCdc(connection,excluded_column_table_a,dbo_excluded_column_table_a,Arrays.asList(id,name));
  connection.execute(ALTER TABLE excluded_column_table_a ADD note varchar(30));
  TestHelper.enableTableCdc(connection,excluded_column_table_a,dbo_excluded_column_table_a_2,Arrays.asList(id,name,note));
  final Configuration config=TestHelper.defaultConfig().build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(sql_server,server1);
  connection.execute(INSERT INTO excluded_column_table_a VALUES(11, 'some_name', 120, 'a note'));
  final SourceRecords records=consumeRecordsByTopic(3);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.excluded_column_table_a);
  Schema expectedSchema=SchemaBuilder.struct().optional().name(server1.dbo.excluded_column_table_a.Value).field(id,Schema.INT32_SCHEMA).field(name,Schema.OPTIONAL_STRING_SCHEMA).field(note,Schema.OPTIONAL_STRING_SCHEMA).build();
  Struct expectedValueSnapshot=new Struct(expectedSchema).put(id,10).put(name,a name).put(note,null);
  Struct expectedValueStreaming=new Struct(expectedSchema).put(id,11).put(name,some_name).put(note,a note);
  Assertions.assertThat(tableA).hasSize(2);
  SourceRecordAssert.assertThat(tableA.get(0)).valueAfterFieldSchemaIsEqualTo(expectedSchema).valueAfterFieldIsEqualTo(expectedValueSnapshot);
  SourceRecordAssert.assertThat(tableA.get(1)).valueAfterFieldSchemaIsEqualTo(expectedSchema).valueAfterFieldIsEqualTo(expectedValueStreaming);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",1367
1008,"'-tryline","@Test @FixFor(DBZ-2522) @Ignore public void whenCaptureInstanceExcludesColumnsAndColumnsRenamedExpectNoErrors() throws Exception {
  connection.execute(CREATE TABLE excluded_column_table_a (id int, name varchar(30), amount integer primary key(id)));
  connection.execute(INSERT INTO excluded_column_table_a VALUES(10, 'a name', 100));
  TestHelper.enableTableCdc(connection,excluded_column_table_a,dbo_excluded_column_table_a,Arrays.asList(id,name));
  final Configuration config=TestHelper.defaultConfig().with(RelationalDatabaseConnectorConfig.TABLE_INCLUDE_LIST,.*excluded_column_table_a).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  waitForStreamingRunning(sql_server,server1);
  TestHelper.disableTableCdc(connection,excluded_column_table_a);
  connection.execute(EXEC sp_RENAME 'excluded_column_table_a.name', 'first_name', 'COLUMN');
  TestHelper.enableTableCdc(connection,excluded_column_table_a,dbo_excluded_column_table_a,Arrays.asList(id,first_name));
  connection.execute(INSERT INTO excluded_column_table_a VALUES(11, 'some_name', 120));
  TestHelper.waitForCdcRecord(connection,excluded_column_table_a,dbo_excluded_column_table_a,rs -> rs.getInt(id) == 11);
  final SourceRecords records=consumeRecordsByTopic(2);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.excluded_column_table_a);
  Schema expectedSchema1=SchemaBuilder.struct().optional().name(server1.dbo.excluded_column_table_a.Value).field(id,Schema.INT32_SCHEMA).field(name,Schema.OPTIONAL_STRING_SCHEMA).build();
  Struct expectedValueSnapshot=new Struct(expectedSchema1).put(id,10).put(name,a name);
  Schema expectedSchema2=SchemaBuilder.struct().optional().name(server1.dbo.excluded_column_table_a.Value).field(id,Schema.INT32_SCHEMA).field(first_name,Schema.OPTIONAL_STRING_SCHEMA).build();
  Struct expectedValueStreaming=new Struct(expectedSchema2).put(id,11).put(first_name,some_name);
  Assertions.assertThat(tableA).hasSize(2);
  SourceRecordAssert.assertThat(tableA.get(0)).valueAfterFieldSchemaIsEqualTo(expectedSchema1).valueAfterFieldIsEqualTo(expectedValueSnapshot);
  SourceRecordAssert.assertThat(tableA.get(1)).valueAfterFieldSchemaIsEqualTo(expectedSchema2).valueAfterFieldIsEqualTo(expectedValueStreaming);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",1421
1009,"'-tryline","@Test @FixFor(DBZ-1068) public void excludeColumnWhenCaptureInstanceExcludesColumns() throws Exception {
  connection.execute(CREATE TABLE excluded_column_table_a (id int, name varchar(30), amount integer primary key(id)));
  TestHelper.enableTableCdc(connection,excluded_column_table_a,dbo_excluded_column_table_a,Arrays.asList(id,name));
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  connection.execute(INSERT INTO excluded_column_table_a VALUES(10, 'some_name', 120));
  final SourceRecords records=consumeRecordsByTopic(1);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.excluded_column_table_a);
  Schema expectedSchemaA=SchemaBuilder.struct().optional().name(server1.dbo.excluded_column_table_a.Value).field(id,Schema.INT32_SCHEMA).field(name,Schema.OPTIONAL_STRING_SCHEMA).build();
  Struct expectedValueA=new Struct(expectedSchemaA).put(id,10).put(name,some_name);
  Assertions.assertThat(tableA).hasSize(1);
  SourceRecordAssert.assertThat(tableA.get(0)).valueAfterFieldSchemaIsEqualTo(expectedSchemaA).valueAfterFieldIsEqualTo(expectedValueA);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",1481
1010,"'-tryline","@Test @FixFor(DBZ-2522) public void excludeColumnWhenCaptureInstanceExcludesColumnInMiddleOfTable() throws Exception {
  connection.execute(CREATE TABLE exclude_list_column_table_a (id int, amount integer, name varchar(30), primary key(id)));
  connection.execute(INSERT INTO exclude_list_column_table_a VALUES(10, 100, 'a name'));
  TestHelper.enableTableCdc(connection,exclude_list_column_table_a,dbo_exclude_list_column_table_a,Arrays.asList(id,name));
  final Configuration config=TestHelper.defaultConfig().with(RelationalDatabaseConnectorConfig.TABLE_INCLUDE_LIST,.*exclude_list_column_table_a).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(sql_server,server1);
  connection.execute(INSERT INTO exclude_list_column_table_a VALUES(11, 120, 'some_name'));
  TestHelper.waitForCdcRecord(connection,exclude_list_column_table_a,rs -> rs.getInt(id) == 11);
  final SourceRecords records=consumeRecordsByTopic(2);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.exclude_list_column_table_a);
  Schema expectedSchemaA=SchemaBuilder.struct().optional().name(server1.dbo.exclude_list_column_table_a.Value).field(id,Schema.INT32_SCHEMA).field(name,Schema.OPTIONAL_STRING_SCHEMA).build();
  Struct expectedValue1=new Struct(expectedSchemaA).put(id,10).put(name,a name);
  Struct expectedValue2=new Struct(expectedSchemaA).put(id,11).put(name,some_name);
  Assertions.assertThat(tableA).hasSize(2);
  SourceRecordAssert.assertThat(tableA.get(0)).valueAfterFieldSchemaIsEqualTo(expectedSchemaA).valueAfterFieldIsEqualTo(expectedValue1);
  SourceRecordAssert.assertThat(tableA.get(1)).valueAfterFieldSchemaIsEqualTo(expectedSchemaA).valueAfterFieldIsEqualTo(expectedValue2);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",1519
1011,"'-tryline","@Test @FixFor(DBZ-2522) public void includeColumnsWhenCaptureInstanceExcludesColumnInMiddleOfTable() throws Exception {
  connection.execute(CREATE TABLE include_list_column_table_a (id int, amount integer, name varchar(30), primary key(id)));
  TestHelper.enableTableCdc(connection,include_list_column_table_a,dbo_include_list_column_table_a,Arrays.asList(id,name));
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(SqlServerConnectorConfig.COLUMN_INCLUDE_LIST,dbo.include_list_column_table_a.id,dbo.include_list_column_table_a.name).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(sql_server,server1);
  connection.execute(INSERT INTO include_list_column_table_a VALUES(10, 120, 'some_name'));
  TestHelper.waitForCdcRecord(connection,include_list_column_table_a,rs -> rs.getInt(id) == 10);
  final SourceRecords records=consumeRecordsByTopic(1);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.include_list_column_table_a);
  Schema expectedSchemaA=SchemaBuilder.struct().optional().name(server1.dbo.include_list_column_table_a.Value).field(id,Schema.INT32_SCHEMA).field(name,Schema.OPTIONAL_STRING_SCHEMA).build();
  Struct expectedValueA=new Struct(expectedSchemaA).put(id,10).put(name,some_name);
  Assertions.assertThat(tableA).hasSize(1);
  SourceRecordAssert.assertThat(tableA.get(0)).valueAfterFieldSchemaIsEqualTo(expectedSchemaA).valueAfterFieldIsEqualTo(expectedValueA);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",1567
1012,"'-tryline","@Test @FixFor(DBZ-2522) public void excludeMultipleColumnsWhenCaptureInstanceExcludesSingleColumn() throws Exception {
  connection.execute(CREATE TABLE exclude_list_column_table_a (id int, amount integer, note varchar(30), name varchar(30), primary key(id)));
  TestHelper.enableTableCdc(connection,exclude_list_column_table_a,dbo_exclude_list_column_table_a,Arrays.asList(id,note,name));
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(SqlServerConnectorConfig.COLUMN_EXCLUDE_LIST,dbo.exclude_list_column_table_a.amount,dbo.exclude_list_column_table_a.note).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(sql_server,server1);
  connection.execute(INSERT INTO exclude_list_column_table_a VALUES(10, 120, 'a note', 'some_name'));
  TestHelper.waitForCdcRecord(connection,exclude_list_column_table_a,rs -> rs.getInt(id) == 10);
  final SourceRecords records=consumeRecordsByTopic(1);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.exclude_list_column_table_a);
  Schema expectedSchemaA=SchemaBuilder.struct().optional().name(server1.dbo.exclude_list_column_table_a.Value).field(id,Schema.INT32_SCHEMA).field(name,Schema.OPTIONAL_STRING_SCHEMA).build();
  Struct expectedValueA=new Struct(expectedSchemaA).put(id,10).put(name,some_name);
  Assertions.assertThat(tableA).hasSize(1);
  SourceRecordAssert.assertThat(tableA.get(0)).valueAfterFieldSchemaIsEqualTo(expectedSchemaA).valueAfterFieldIsEqualTo(expectedValueA);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",1608
1013,"'-tryline","@Test @FixFor(DBZ-2522) public void includeMultipleColumnsWhenCaptureInstanceExcludesSingleColumn() throws Exception {
  connection.execute(CREATE TABLE include_list_column_table_a (id int, amount integer, note varchar(30), name varchar(30), primary key(id)));
  TestHelper.enableTableCdc(connection,include_list_column_table_a,dbo_include_list_column_table_a,Arrays.asList(id,note,name));
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(SqlServerConnectorConfig.COLUMN_INCLUDE_LIST,dbo.include_list_column_table_a.id,dbo.include_list_column_table_a.name).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(sql_server,server1);
  connection.execute(INSERT INTO include_list_column_table_a VALUES(10, 120, 'a note', 'some_name'));
  TestHelper.waitForCdcRecord(connection,include_list_column_table_a,rs -> rs.getInt(id) == 10);
  final SourceRecords records=consumeRecordsByTopic(1);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.include_list_column_table_a);
  Schema expectedSchemaA=SchemaBuilder.struct().optional().name(server1.dbo.include_list_column_table_a.Value).field(id,Schema.INT32_SCHEMA).field(name,Schema.OPTIONAL_STRING_SCHEMA).build();
  Struct expectedValueA=new Struct(expectedSchemaA).put(id,10).put(name,some_name);
  Assertions.assertThat(tableA).hasSize(1);
  SourceRecordAssert.assertThat(tableA.get(0)).valueAfterFieldSchemaIsEqualTo(expectedSchemaA).valueAfterFieldIsEqualTo(expectedValueA);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",1650
1014,"'-tryline","/** 
 * Passing the applicationName property which can be asserted from the connected sessions.
 */
@Test @FixFor(DBZ-964) public void shouldPropagateDatabaseDriverProperties() throws Exception {
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(database.applicationName,Debezium App DBZ-964).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  connection.execute(INSERT INTO tablea VALUES(964, 'a'));
  consumeRecordsByTopic(1);
  connection.query(select count(1) from sys.dm_exec_sessions where program_name = 'Debezium App DBZ-964',rs -> {
    rs.next();
    assertThat(rs.getInt(1)).isGreaterThanOrEqualTo(1);
  }
);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",1692
1015,"'-tryline","private void restartInTheMiddleOfTx(boolean restartJustAfterSnapshot,boolean afterStreaming) throws Exception {
  final int RECORDS_PER_TABLE=30;
  final int TABLES=2;
  final int ID_START=10;
  final int ID_RESTART=1000;
  final int HALF_ID=ID_START + RECORDS_PER_TABLE / 2;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).build();
  if (restartJustAfterSnapshot) {
    start(SqlServerConnector.class,config);
    assertConnectorIsRunning();
    consumeRecordsByTopic(1);
    stopConnector();
    connection.execute(INSERT INTO tablea VALUES(-1, '-a'));
  }
  start(SqlServerConnector.class,config,record -> {
    if (!server1.dbo.tablea.Envelope.equals(record.valueSchema().name())) {
      return false;
    }
    final Struct envelope=(Struct)record.value();
    final Struct after=envelope.getStruct(after);
    final Integer id=after.getInt32(id);
    final String value=after.getString(cola);
    return id != null && id == HALF_ID && a.equals(value);
  }
);
  assertConnectorIsRunning();
  consumeRecordsByTopic(1);
  if (afterStreaming) {
    connection.execute(INSERT INTO tablea VALUES(-2, '-a'));
    final SourceRecords records=consumeRecordsByTopic(1);
    final List<SchemaAndValueField> expectedRow=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,-2),new SchemaAndValueField(cola,Schema.OPTIONAL_STRING_SCHEMA,-a));
    assertRecord(((Struct)records.allRecordsInOrder().get(0).value()).getStruct(Envelope.FieldName.AFTER),expectedRow);
  }
  connection.setAutoCommit(false);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START + i;
    connection.executeWithoutCommitting(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.executeWithoutCommitting(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  connection.connection().commit();
  TestHelper.waitForCdcRecord(connection,tablea,rs -> rs.getInt(id) == (ID_START + RECORDS_PER_TABLE - 1));
  TestHelper.waitForCdcRecord(connection,tableb,rs -> rs.getInt(id) == (ID_START + RECORDS_PER_TABLE - 1));
  List<SourceRecord> records=consumeRecordsByTopic(RECORDS_PER_TABLE).allRecordsInOrder();
  assertThat(records).hasSize(RECORDS_PER_TABLE);
  SourceRecord lastRecordForOffset=records.get(RECORDS_PER_TABLE - 1);
  Struct value=(Struct)lastRecordForOffset.value();
  final List<SchemaAndValueField> expectedLastRow=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,HALF_ID - 1),new SchemaAndValueField(colb,Schema.OPTIONAL_STRING_SCHEMA,b));
  assertRecord((Struct)value.get(after),expectedLastRow);
  stopConnector();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  SourceRecords sourceRecords=consumeRecordsByTopic(RECORDS_PER_TABLE);
  records=sourceRecords.allRecordsInOrder();
  assertThat(records).hasSize(RECORDS_PER_TABLE);
  List<SourceRecord> tableA=sourceRecords.recordsForTopic(server1.dbo.tablea);
  List<SourceRecord> tableB=sourceRecords.recordsForTopic(server1.dbo.tableb);
  for (int i=0; i < RECORDS_PER_TABLE / 2; i++) {
    final int id=HALF_ID + i;
    final SourceRecord recordA=tableA.get(i);
    final SourceRecord recordB=tableB.get(i);
    final List<SchemaAndValueField> expectedRowA=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,id),new SchemaAndValueField(cola,Schema.OPTIONAL_STRING_SCHEMA,a));
    final List<SchemaAndValueField> expectedRowB=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,id),new SchemaAndValueField(colb,Schema.OPTIONAL_STRING_SCHEMA,b));
    final Struct valueA=(Struct)recordA.value();
    assertRecord((Struct)valueA.get(after),expectedRowA);
    assertNull(valueA.get(before));
    final Struct valueB=(Struct)recordB.value();
    assertRecord((Struct)valueB.get(after),expectedRowB);
    assertNull(valueB.get(before));
  }
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_RESTART + i;
    connection.executeWithoutCommitting(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.executeWithoutCommitting(INSERT INTO tableb VALUES( + id + , 'b'));
    connection.connection().commit();
  }
  TestHelper.waitForCdcRecord(connection,tablea,rs -> rs.getInt(id) == (ID_RESTART + RECORDS_PER_TABLE - 1));
  TestHelper.waitForCdcRecord(connection,tableb,rs -> rs.getInt(id) == (ID_RESTART + RECORDS_PER_TABLE - 1));
  sourceRecords=consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES);
  tableA=sourceRecords.recordsForTopic(server1.dbo.tablea);
  tableB=sourceRecords.recordsForTopic(server1.dbo.tableb);
  Assertions.assertThat(tableA).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(tableB).hasSize(RECORDS_PER_TABLE);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=i + ID_RESTART;
    final SourceRecord recordA=tableA.get(i);
    final SourceRecord recordB=tableB.get(i);
    final List<SchemaAndValueField> expectedRowA=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,id),new SchemaAndValueField(cola,Schema.OPTIONAL_STRING_SCHEMA,a));
    final List<SchemaAndValueField> expectedRowB=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,id),new SchemaAndValueField(colb,Schema.OPTIONAL_STRING_SCHEMA,b));
    final Struct valueA=(Struct)recordA.value();
    assertRecord((Struct)valueA.get(after),expectedRowA);
    assertNull(valueA.get(before));
    final Struct valueB=(Struct)recordB.value();
    assertRecord((Struct)valueB.get(after),expectedRowB);
    assertNull(valueB.get(before));
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",1717
1016,"'-tryline","@Test @FixFor(DBZ-1128) public void restartInTheMiddleOfTxAfterSnapshot() throws Exception {
  restartInTheMiddleOfTx(true,false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",1854
1017,"'-tryline","@Test @FixFor(DBZ-1128) public void restartInTheMiddleOfTxAfterCompletedTx() throws Exception {
  restartInTheMiddleOfTx(false,true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",1860
1018,"'-tryline","@Test @FixFor(DBZ-1128) public void restartInTheMiddleOfTx() throws Exception {
  restartInTheMiddleOfTx(false,false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",1866
1019,"'-tryline","@Test @FixFor(DBZ-1242) public void testEmptySchemaWarningAfterApplyingFilters() throws Exception {
  final LogInterceptor logInterceptor=new LogInterceptor();
  Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(SqlServerConnectorConfig.TABLE_INCLUDE_LIST,my_products).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  waitForAvailableRecords(100,TimeUnit.MILLISECONDS);
  stopConnector(value -> assertThat(logInterceptor.containsWarnMessage(DatabaseSchema.NO_CAPTURED_DATA_COLLECTIONS_WARNING)).isTrue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",1872
1020,"'-tryline","@Test @FixFor(DBZ-1242) public void testNoEmptySchemaWarningAfterApplyingFilters() throws Exception {
  final LogInterceptor logInterceptor=new LogInterceptor();
  Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  waitForAvailableRecords(100,TimeUnit.MILLISECONDS);
  stopConnector(value -> assertThat(logInterceptor.containsWarnMessage(DatabaseSchema.NO_CAPTURED_DATA_COLLECTIONS_WARNING)).isFalse());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",1890
1021,"'-tryline","@Test @FixFor(DBZ-916) public void keylessTable() throws Exception {
  connection.execute(CREATE TABLE keyless (id int, name varchar(30)),INSERT INTO keyless VALUES(1, 'k'));
  TestHelper.enableTableCdc(connection,keyless);
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(SqlServerConnectorConfig.TABLE_INCLUDE_LIST,dbo.keyless).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  final List<SchemaAndValueField> key=Arrays.asList(new SchemaAndValueField(id,Schema.OPTIONAL_INT32_SCHEMA,1),new SchemaAndValueField(name,Schema.OPTIONAL_STRING_SCHEMA,k));
  final List<SchemaAndValueField> key2=Arrays.asList(new SchemaAndValueField(id,Schema.OPTIONAL_INT32_SCHEMA,2),new SchemaAndValueField(name,Schema.OPTIONAL_STRING_SCHEMA,k));
  final List<SchemaAndValueField> key3=Arrays.asList(new SchemaAndValueField(id,Schema.OPTIONAL_INT32_SCHEMA,3),new SchemaAndValueField(name,Schema.OPTIONAL_STRING_SCHEMA,k));
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(server1.dbo.keyless).get(0).key()).isNull();
  assertThat(records.recordsForTopic(server1.dbo.keyless).get(0).keySchema()).isNull();
  connection.execute(INSERT INTO keyless VALUES(2, 'k'));
  records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(server1.dbo.keyless).get(0).key()).isNull();
  assertThat(records.recordsForTopic(server1.dbo.keyless).get(0).key()).isNull();
  connection.execute(UPDATE keyless SET id=3 WHERE ID=2);
  records=consumeRecordsByTopic(3);
  final SourceRecord update1=records.recordsForTopic(server1.dbo.keyless).get(0);
  assertThat(update1.key()).isNull();
  assertThat(update1.keySchema()).isNull();
  assertRecord(((Struct)update1.value()).getStruct(Envelope.FieldName.BEFORE),key2);
  assertRecord(((Struct)update1.value()).getStruct(Envelope.FieldName.AFTER),key3);
  connection.execute(DELETE FROM keyless WHERE id=3);
  records=consumeRecordsByTopic(2,false);
  assertThat(records.recordsForTopic(server1.dbo.keyless).get(0).key()).isNull();
  assertThat(records.recordsForTopic(server1.dbo.keyless).get(0).keySchema()).isNull();
  assertNull(records.recordsForTopic(server1.dbo.keyless).get(1).value());
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",1907
1022,"'-tryline","@Test @FixFor(DBZ-1923) public void shouldDetectPurgedHistory() throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int TABLES=2;
  final int ID_START=10;
  final int ID_RESTART=100;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(SqlServerConnectorConfig.DATABASE_HISTORY,PurgableFileDatabaseHistory.class).build();
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  Awaitility.await().atMost(30,TimeUnit.SECONDS).pollInterval(100,TimeUnit.MILLISECONDS).until(() -> {
    Testing.debug(Waiting for initial changes to be propagated to CDC structures);
    return connection.getMaxLsn().isAvailable();
  }
);
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  List<SourceRecord> records=consumeRecordsByTopic(1 + RECORDS_PER_TABLE * TABLES).allRecordsInOrder();
  records=records.subList(1,records.size());
  for (Iterator<SourceRecord> it=records.iterator(); it.hasNext(); ) {
    SourceRecord record=it.next();
    assertThat(record.sourceOffset().get(snapshot)).as(Snapshot phase).isEqualTo(true);
    if (it.hasNext()) {
      assertThat(record.sourceOffset().get(snapshot_completed)).as(Snapshot in progress).isEqualTo(false);
    }
 else {
      assertThat(record.sourceOffset().get(snapshot_completed)).as(Snapshot completed).isEqualTo(true);
    }
  }
  stopConnector();
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_RESTART + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  Testing.Files.delete(TestHelper.DB_HISTORY_PATH);
  final LogInterceptor logInterceptor=new LogInterceptor();
  start(SqlServerConnector.class,config);
  assertConnectorNotRunning();
  assertThat(logInterceptor.containsStacktraceElement(The db history topic or its content is fully or partially missing. Please check database history topic configuration and re-execute the snapshot.)).isTrue();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",2039
1023,"'-tryline","@Test @FixFor(DBZ-1312) public void useShortTableNamesForColumnMapper() throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int TABLES=2;
  final int ID_START=10;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(column.mask.with.4.chars,dbo.tablea.cola).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  consumeRecordsByTopic(1);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  final SourceRecords records=consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.tablea);
  final List<SourceRecord> tableB=records.recordsForTopic(server1.dbo.tableb);
  Assertions.assertThat(tableA).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(tableB).hasSize(RECORDS_PER_TABLE);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final SourceRecord recordA=tableA.get(i);
    final SourceRecord recordB=tableB.get(i);
    final List<SchemaAndValueField> expectedRowB=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,i + ID_START),new SchemaAndValueField(colb,Schema.OPTIONAL_STRING_SCHEMA,b));
    final Struct valueA=(Struct)recordA.value();
    Assertions.assertThat(valueA.getStruct(after).getString(cola)).isEqualTo(****);
    final Struct valueB=(Struct)recordB.value();
    assertRecord((Struct)valueB.get(after),expectedRowB);
    assertNull(valueB.get(before));
  }
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",2125
1024,"'-tryline","@Test @FixFor(DBZ-1312) public void useLongTableNamesForColumnMapper() throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int TABLES=2;
  final int ID_START=10;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(column.mask.with.4.chars,testDB.dbo.tablea.cola).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  consumeRecordsByTopic(1);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  final SourceRecords records=consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.tablea);
  final List<SourceRecord> tableB=records.recordsForTopic(server1.dbo.tableb);
  Assertions.assertThat(tableA).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(tableB).hasSize(RECORDS_PER_TABLE);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final SourceRecord recordA=tableA.get(i);
    final SourceRecord recordB=tableB.get(i);
    final List<SchemaAndValueField> expectedRowB=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,i + ID_START),new SchemaAndValueField(colb,Schema.OPTIONAL_STRING_SCHEMA,b));
    final Struct valueA=(Struct)recordA.value();
    Assertions.assertThat(valueA.getStruct(after).getString(cola)).isEqualTo(****);
    final Struct valueB=(Struct)recordB.value();
    assertRecord((Struct)valueB.get(after),expectedRowB);
    assertNull(valueB.get(before));
  }
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",2173
1025,"'-tryline","@Test @FixFor(DBZ-1312) public void useLongTableNamesForKeyMapper() throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int TABLES=2;
  final int ID_START=10;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(SqlServerConnectorConfig.MSG_KEY_COLUMNS,testDB.dbo.tablea:cola).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  consumeRecordsByTopic(1);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  final SourceRecords records=consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.tablea);
  final List<SourceRecord> tableB=records.recordsForTopic(server1.dbo.tableb);
  Assertions.assertThat(tableA).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(tableB).hasSize(RECORDS_PER_TABLE);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final SourceRecord recordA=tableA.get(i);
    final SourceRecord recordB=tableB.get(i);
    final List<SchemaAndValueField> expectedRowB=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,i + ID_START),new SchemaAndValueField(colb,Schema.OPTIONAL_STRING_SCHEMA,b));
    final Struct keyA=(Struct)recordA.key();
    Assertions.assertThat(keyA.getString(cola)).isEqualTo(a);
    final Struct valueB=(Struct)recordB.value();
    assertRecord((Struct)valueB.get(after),expectedRowB);
    assertNull(valueB.get(before));
  }
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",2221
1026,"'-tryline","@Test @FixFor(DBZ-1312) public void useShortTableNamesForKeyMapper() throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int TABLES=2;
  final int ID_START=10;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(SqlServerConnectorConfig.MSG_KEY_COLUMNS,dbo.tablea:cola).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  consumeRecordsByTopic(1);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  final SourceRecords records=consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.tablea);
  final List<SourceRecord> tableB=records.recordsForTopic(server1.dbo.tableb);
  Assertions.assertThat(tableA).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(tableB).hasSize(RECORDS_PER_TABLE);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final SourceRecord recordA=tableA.get(i);
    final SourceRecord recordB=tableB.get(i);
    final List<SchemaAndValueField> expectedRowB=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,i + ID_START),new SchemaAndValueField(colb,Schema.OPTIONAL_STRING_SCHEMA,b));
    final Struct keyA=(Struct)recordA.key();
    Assertions.assertThat(keyA.getString(cola)).isEqualTo(a);
    final Struct valueB=(Struct)recordB.value();
    assertRecord((Struct)valueB.get(after),expectedRowB);
    assertNull(valueB.get(before));
  }
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",2269
1027,"'-tryline","@Test @FixFor({DBZ-1916,DBZ-1830}) public void shouldPropagateSourceTypeByDatatype() throws Exception {
  connection.execute(CREATE TABLE dt_table (id int, c1 int, c2 int, c3a numeric(5,2), c3b varchar(128), f1 float(10), f2 decimal(8,4) primary key(id)));
  TestHelper.enableTableCdc(connection,dt_table);
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(SqlServerConnectorConfig.TABLE_INCLUDE_LIST,dbo.dt_table).with(datatype.propagate.source.type,.+\\.NUMERIC,.+\\.VARCHAR,.+\\.REAL,.+\\.DECIMAL).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(sql_server,server1);
  connection.execute(INSERT INTO dt_table (id,c1,c2,c3a,c3b,f1,f2) values (1, 123, 456, 789.01, 'test', 1.228, 234.56));
  SourceRecords records=consumeRecordsByTopic(1);
  List<SourceRecord> recordsForTopic=records.recordsForTopic(server1.dbo.dt_table);
  final SourceRecord record=recordsForTopic.get(0);
  final Field before=record.valueSchema().field(before);
  assertThat(before.schema().field(id).schema().parameters()).isNull();
  assertThat(before.schema().field(c1).schema().parameters()).isNull();
  assertThat(before.schema().field(c2).schema().parameters()).isNull();
  assertThat(before.schema().field(c3a).schema().parameters()).includes(entry(TYPE_NAME_PARAMETER_KEY,NUMERIC),entry(TYPE_LENGTH_PARAMETER_KEY,5),entry(TYPE_SCALE_PARAMETER_KEY,2));
  assertThat(before.schema().field(c3b).schema().parameters()).includes(entry(TYPE_NAME_PARAMETER_KEY,VARCHAR),entry(TYPE_LENGTH_PARAMETER_KEY,128));
  assertThat(before.schema().field(f2).schema().parameters()).includes(entry(TYPE_NAME_PARAMETER_KEY,DECIMAL),entry(TYPE_LENGTH_PARAMETER_KEY,8),entry(TYPE_SCALE_PARAMETER_KEY,4));
  assertThat(before.schema().field(f1).schema().parameters()).includes(entry(TYPE_NAME_PARAMETER_KEY,REAL),entry(TYPE_LENGTH_PARAMETER_KEY,24));
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",2317
1028,"'-tryline","@Test @FixFor(DBZ-2379) public void shouldNotStreamWhenUsingSnapshotModeInitialOnly() throws Exception {
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL_ONLY).build();
  final LogInterceptor logInterceptor=new LogInterceptor();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  consumeRecordsByTopic(1);
  assertNoRecordsToConsume();
  final String message=Streaming is not enabled in current configuration;
  stopConnector(value -> assertThat(logInterceptor.containsMessage(message)).isTrue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",2365
1029,"'-tryline","@Test @FixFor(DBZ-2582) public void testMaxLsnSelectStatementWithDefault() throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int TABLES=2;
  final int ID_START=10;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  consumeRecordsByTopic(1);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  final SourceRecords records=consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.tablea);
  final List<SourceRecord> tableB=records.recordsForTopic(server1.dbo.tableb);
  Assertions.assertThat(tableA).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(tableB).hasSize(RECORDS_PER_TABLE);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",2386
1030,"'-tryline","@Test @FixFor(DBZ-2582) public void testMaxLsnSelectStatementWithFalse() throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int TABLES=2;
  final int ID_START=10;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(SqlServerConnectorConfig.MAX_LSN_OPTIMIZATION,false).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  consumeRecordsByTopic(1);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START + i;
    connection.execute(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.execute(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  final SourceRecords records=consumeRecordsByTopic(RECORDS_PER_TABLE * TABLES);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.tablea);
  final List<SourceRecord> tableB=records.recordsForTopic(server1.dbo.tableb);
  Assertions.assertThat(tableA).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(tableB).hasSize(RECORDS_PER_TABLE);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",2420
1031,"'-tryline","/** 
 * Insert 1 Record into tablenuma with  {@code DecimalHandlingMode.STRING}mode Assertions: - Connector is running - 1 Record are streamed out of cdc - Assert cola, colb, colc, cold are exactly equal to the input values.
 * @throws Exception
 */
@Test public void decimalModeConfigString() throws Exception {
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(SqlServerConnectorConfig.TABLE_INCLUDE_LIST,dbo.tablenuma).with(SqlServerConnectorConfig.DECIMAL_HANDLING_MODE,DecimalHandlingMode.STRING).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForSnapshotToBeCompleted();
  connection.execute(INSERT INTO tablenuma VALUES (111.1111, 1111111, 1111111.1, 1111111 ););
  final SourceRecords records=consumeRecordsByTopic(1);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.tablenuma);
  Assertions.assertThat(tableA).hasSize(1);
  final Struct valueA=(Struct)tableA.get(0).value();
  assertSchema(valueA,Schema.OPTIONAL_STRING_SCHEMA);
  Assertions.assertThat(((Struct)valueA.get(after)).get(cola)).isEqualTo(111.1111);
  Assertions.assertThat(((Struct)valueA.get(after)).get(colb)).isEqualTo(1111111);
  Assertions.assertThat(((Struct)valueA.get(after)).get(colc)).isEqualTo(1111111.1);
  Assertions.assertThat(((Struct)valueA.get(after)).get(cold)).isEqualTo(1111111);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SQLServerNumericColumnIT.java",70
1032,"'-tryline","/** 
 * Insert 1 Record into tablenumb with  {@code DecimalHandlingMode.DOUBLE}mode Assertions: - Connector is running - 1 Record are streamed out of cdc - Assert cola, colb, colc, cold are exactly equal to the input values in double format
 * @throws Exception
 */
@Test public void decimalModeConfigDouble() throws Exception {
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(SqlServerConnectorConfig.TABLE_INCLUDE_LIST,dbo.tablenumb).with(SqlServerConnectorConfig.DECIMAL_HANDLING_MODE,DecimalHandlingMode.DOUBLE).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForSnapshotToBeCompleted();
  connection.execute(INSERT INTO tablenumb VALUES (222.2222, 22222, 22222.2, 2222222 ););
  final SourceRecords records=consumeRecordsByTopic(1);
  final List<SourceRecord> results=records.recordsForTopic(server1.dbo.tablenumb);
  Assertions.assertThat(results).hasSize(1);
  final Struct valueA=(Struct)results.get(0).value();
  assertSchema(valueA,Schema.OPTIONAL_FLOAT64_SCHEMA);
  Assertions.assertThat(((Struct)valueA.get(after)).get(cola)).isEqualTo(222.2222d);
  Assertions.assertThat(((Struct)valueA.get(after)).get(colb)).isEqualTo(22222d);
  Assertions.assertThat(((Struct)valueA.get(after)).get(colc)).isEqualTo(22222.2d);
  Assertions.assertThat(((Struct)valueA.get(after)).get(cold)).isEqualTo(2222222d);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SQLServerNumericColumnIT.java",102
1033,"'-tryline","/** 
 * Insert 1 Record into tablenumc with  {@code DecimalHandlingMode.PRECISE}mode Assertions: - Connector is running - 1 Record are streamed out of cdc - Assert cola, colb, colc, cold are bytes
 * @throws Exception
 */
@Test public void decimalModeConfigPrecise() throws Exception {
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(SqlServerConnectorConfig.TABLE_INCLUDE_LIST,dbo.tablenumc).with(SqlServerConnectorConfig.DECIMAL_HANDLING_MODE,DecimalHandlingMode.PRECISE).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForSnapshotToBeCompleted();
  connection.execute(INSERT INTO tablenumc VALUES (333.3333, 3333, 3333.3, 33333333 ););
  final SourceRecords records=consumeRecordsByTopic(1);
  final List<SourceRecord> results=records.recordsForTopic(server1.dbo.tablenumc);
  Assertions.assertThat(results).hasSize(1);
  final Struct valueA=(Struct)results.get(0).value();
  Assertions.assertThat(valueA.schema().field(after).schema().field(cola).schema()).isEqualTo(Decimal.builder(4).parameter(connect.decimal.precision,8).optional().schema());
  Assertions.assertThat(valueA.schema().field(after).schema().field(colb).schema()).isEqualTo(Decimal.builder(0).parameter(connect.decimal.precision,18).optional().schema());
  Assertions.assertThat(valueA.schema().field(after).schema().field(colc).schema()).isEqualTo(Decimal.builder(1).parameter(connect.decimal.precision,8).optional().schema());
  Assertions.assertThat(valueA.schema().field(after).schema().field(cold).schema()).isEqualTo(Decimal.builder(0).parameter(connect.decimal.precision,18).optional().schema());
  Assertions.assertThat(((Struct)valueA.get(after)).get(cola)).isEqualTo(BigDecimal.valueOf(333.3333));
  Assertions.assertThat(((Struct)valueA.get(after)).get(colb)).isEqualTo(BigDecimal.valueOf(3333));
  Assertions.assertThat(((Struct)valueA.get(after)).get(colc)).isEqualTo(BigDecimal.valueOf(3333.3));
  Assertions.assertThat(((Struct)valueA.get(after)).get(cold)).isEqualTo(BigDecimal.valueOf(33333333));
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SQLServerNumericColumnIT.java",134
1034,"'-tryline","@Test public void shouldProcessFromSnapshot() throws Exception {
  connection=TestHelper.testConnection();
  connection.execute(DDL_STATEMENTS + DML_STATEMENTS);
  TestHelper.enableTableCdc(connection,t1);
  TestHelper.enableTableCdc(connection,t2);
  TestHelper.enableTableCdc(connection,t3);
  start(SqlServerConnector.class,TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(SqlServerConnectorConfig.TABLE_INCLUDE_LIST,dbo.t[123]).build());
  assertConnectorIsRunning();
  final int expectedRecordsCount=1 + 1 + 1;
  final SourceRecords records=consumeRecordsByTopic(expectedRecordsCount);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.t1).get(0).keySchema().field(pk)).isNotNull();
  Assertions.assertThat(records.recordsForTopic(server1.dbo.t1).get(0).keySchema().fields()).hasSize(1);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.t2).get(0).keySchema().field(pk)).isNotNull();
  Assertions.assertThat(records.recordsForTopic(server1.dbo.t2).get(0).keySchema().fields()).hasSize(1);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.t3).get(0).keySchema()).isNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\TablesWithoutPrimaryKeyIT.java",55
1035,"'-tryline","@Test public void shouldProcessFromStreaming() throws Exception {
  connection=TestHelper.testConnection();
  connection.execute(CREATE TABLE init (pk INT PRIMARY KEY);,INSERT INTO init VALUES (1););
  TestHelper.enableTableCdc(connection,init);
  waitForDisabledCdc(connection,t1);
  waitForDisabledCdc(connection,t2);
  waitForDisabledCdc(connection,t3);
  start(SqlServerConnector.class,TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).build());
  assertConnectorIsRunning();
  TestHelper.waitForSnapshotToBeCompleted();
  consumeRecordsByTopic(1);
  TestHelper.waitForStreamingStarted();
  TestHelper.waitForMaxLsnAvailable(connection);
  connection.execute(DDL_STATEMENTS);
  Testing.Print.enable();
  TestHelper.enableTableCdc(connection,t1);
  TestHelper.enableTableCdc(connection,t2);
  TestHelper.enableTableCdc(connection,t3);
  waitForEnabledCdc(connection,t1);
  waitForEnabledCdc(connection,t2);
  waitForEnabledCdc(connection,t3);
  connection.execute(INSERT INTO t1 VALUES (1,10););
  connection.execute(INSERT INTO t2 VALUES (2,20););
  connection.execute(INSERT INTO t3 VALUES (3,30););
  TestHelper.waitForCdcRecord(connection,t1,rs -> rs.getInt(pk) == 1);
  TestHelper.waitForCdcRecord(connection,t2,rs -> rs.getInt(pk) == 2);
  TestHelper.waitForCdcRecord(connection,t3,rs -> rs.getInt(pk) == 3);
  final int expectedRecordsCount=1 + 1 + 1;
  final SourceRecords records=consumeRecordsByTopic(expectedRecordsCount,24);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.t1).get(0).keySchema().field(pk)).isNotNull();
  Assertions.assertThat(records.recordsForTopic(server1.dbo.t1).get(0).keySchema().fields()).hasSize(1);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.t2).get(0).keySchema().field(pk)).isNotNull();
  Assertions.assertThat(records.recordsForTopic(server1.dbo.t2).get(0).keySchema().fields()).hasSize(1);
  Assertions.assertThat(records.recordsForTopic(server1.dbo.t3).get(0).keySchema()).isNull();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\TablesWithoutPrimaryKeyIT.java",80
1036,"'-tryline","@Test public void transactionMetadata() throws Exception {
  final int RECORDS_PER_TABLE=5;
  final int ID_START=10;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(SqlServerConnectorConfig.PROVIDE_TRANSACTION_METADATA,true).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  consumeRecordsByTopic(1);
  connection.setAutoCommit(false);
  final String[] inserts=new String[RECORDS_PER_TABLE * 2];
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START + i;
    inserts[2 * i]=INSERT INTO tablea VALUES( + id + , 'a');
    inserts[2 * i + 1]=INSERT INTO tableb VALUES( + id + , 'b');
  }
  connection.execute(inserts);
  connection.setAutoCommit(true);
  connection.execute(INSERT INTO tableb VALUES(1000, 'b'));
  final SourceRecords records=consumeRecordsByTopic(1 + RECORDS_PER_TABLE * 2 + 1 + 1 + 1);
  final List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.tablea);
  final List<SourceRecord> tableB=records.recordsForTopic(server1.dbo.tableb);
  final List<SourceRecord> tx=records.recordsForTopic(server1.transaction);
  Assertions.assertThat(tableA).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(tableB).hasSize(RECORDS_PER_TABLE + 1);
  Assertions.assertThat(tx).hasSize(3);
  final List<SourceRecord> all=records.allRecordsInOrder();
  final String txId=assertBeginTransaction(all.get(0));
  long counter=1;
  for (int i=1; i <= 2 * RECORDS_PER_TABLE; i++) {
    assertRecordTransactionMetadata(all.get(i),txId,counter,(counter + 1) / 2);
    counter++;
  }
  assertEndTransaction(all.get(2 * RECORDS_PER_TABLE + 1),txId,2 * RECORDS_PER_TABLE,Collect.hashMapOf(testDB.dbo.tablea,RECORDS_PER_TABLE,testDB.dbo.tableb,RECORDS_PER_TABLE));
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\TransactionMetadataIT.java",78
1037,"'-tryline","private void restartInTheMiddleOfTx(boolean restartJustAfterSnapshot,boolean afterStreaming) throws Exception {
  final int RECORDS_PER_TABLE=30;
  final int TABLES=2;
  final int ID_START=10;
  final int ID_RESTART=1000;
  final int HALF_ID=ID_START + RECORDS_PER_TABLE / 2;
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(SqlServerConnectorConfig.PROVIDE_TRANSACTION_METADATA,true).build();
  if (restartJustAfterSnapshot) {
    start(SqlServerConnector.class,config);
    assertConnectorIsRunning();
    consumeRecordsByTopic(1);
    stopConnector();
    connection.execute(INSERT INTO tablea VALUES(-1, '-a'));
    Awaitility.await().atMost(30,TimeUnit.SECONDS).until(() -> {
      if (!connection.getMaxLsn().isAvailable()) {
        return false;
      }
      for (      SqlServerChangeTable ct : connection.listOfChangeTables()) {
        final String tableName=ct.getChangeTableId().table();
        if (tableName.endsWith(dbo_ + connection.getNameOfChangeTable(tablea))) {
          try {
            final Lsn minLsn=connection.getMinLsn(tableName);
            final Lsn maxLsn=connection.getMaxLsn();
            final AtomicReference<Boolean> found=new AtomicReference<>(false);
            SqlServerChangeTable[] tables=Collections.singletonList(ct).toArray(new SqlServerChangeTable[]{});
            connection.getChangesForTables(tables,minLsn,maxLsn,resultsets -> {
              final ResultSet rs=resultsets[0];
              while (rs.next()) {
                if (rs.getInt(id) == -1) {
                  found.set(true);
                  break;
                }
              }
            }
);
            return found.get();
          }
 catch (          Exception e) {
            org.junit.Assert.fail(Failed to fetch changes for tablea:  + e.getMessage());
          }
        }
      }
      return false;
    }
);
  }
  start(SqlServerConnector.class,config,record -> {
    if (!server1.dbo.tablea.Envelope.equals(record.valueSchema().name())) {
      return false;
    }
    final Struct envelope=(Struct)record.value();
    final Struct after=envelope.getStruct(after);
    final Integer id=after.getInt32(id);
    final String value=after.getString(cola);
    return id != null && id == HALF_ID && a.equals(value);
  }
);
  assertConnectorIsRunning();
  String firstTxId=null;
  if (restartJustAfterSnapshot) {
    SourceRecord begin=consumeRecordsByTopic(1).allRecordsInOrder().get(0);
    firstTxId=assertBeginTransaction(begin);
  }
  consumeRecordsByTopic(1);
  if (afterStreaming) {
    connection.execute(INSERT INTO tablea VALUES(-2, '-a'));
    final SourceRecords records=consumeRecordsByTopic(2);
    final List<SchemaAndValueField> expectedRow=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,-2),new SchemaAndValueField(cola,Schema.OPTIONAL_STRING_SCHEMA,-a));
    assertRecord(((Struct)records.allRecordsInOrder().get(1).value()).getStruct(Envelope.FieldName.AFTER),expectedRow);
    SourceRecord begin=records.allRecordsInOrder().get(0);
    firstTxId=assertBeginTransaction(begin);
  }
  connection.setAutoCommit(false);
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_START + i;
    connection.executeWithoutCommitting(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.executeWithoutCommitting(INSERT INTO tableb VALUES( + id + , 'b'));
  }
  connection.connection().commit();
  final int txBeginIndex=firstTxId != null ? 1 : 0;
  int expectedRecords=txBeginIndex + 1 + RECORDS_PER_TABLE;
  List<SourceRecord> records=consumeRecordsByTopic(expectedRecords).allRecordsInOrder();
  assertThat(records).hasSize(expectedRecords);
  if (firstTxId != null) {
    assertEndTransaction(records.get(0),firstTxId,1,Collect.hashMapOf(testDB.dbo.tablea,1));
  }
  final String batchTxId=assertBeginTransaction(records.get(txBeginIndex));
  SourceRecord lastRecordForOffset=records.get(RECORDS_PER_TABLE + txBeginIndex);
  Struct value=(Struct)lastRecordForOffset.value();
  final List<SchemaAndValueField> expectedLastRow=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,HALF_ID - 1),new SchemaAndValueField(colb,Schema.OPTIONAL_STRING_SCHEMA,b));
  assertRecord((Struct)value.get(after),expectedLastRow);
  assertRecordTransactionMetadata(lastRecordForOffset,batchTxId,RECORDS_PER_TABLE,RECORDS_PER_TABLE / 2);
  stopConnector();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  SourceRecords sourceRecords=consumeRecordsByTopic(RECORDS_PER_TABLE);
  records=sourceRecords.allRecordsInOrder();
  assertThat(records).hasSize(RECORDS_PER_TABLE);
  List<SourceRecord> tableA=sourceRecords.recordsForTopic(server1.dbo.tablea);
  List<SourceRecord> tableB=sourceRecords.recordsForTopic(server1.dbo.tableb);
  for (int i=0; i < RECORDS_PER_TABLE / 2; i++) {
    final int id=HALF_ID + i;
    final SourceRecord recordA=tableA.get(i);
    final SourceRecord recordB=tableB.get(i);
    final List<SchemaAndValueField> expectedRowA=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,id),new SchemaAndValueField(cola,Schema.OPTIONAL_STRING_SCHEMA,a));
    final List<SchemaAndValueField> expectedRowB=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,id),new SchemaAndValueField(colb,Schema.OPTIONAL_STRING_SCHEMA,b));
    final Struct valueA=(Struct)recordA.value();
    assertRecord((Struct)valueA.get(after),expectedRowA);
    assertNull(valueA.get(before));
    final Struct valueB=(Struct)recordB.value();
    assertRecord((Struct)valueB.get(after),expectedRowB);
    assertNull(valueB.get(before));
    assertRecordTransactionMetadata(recordA,batchTxId,RECORDS_PER_TABLE + 2 * i + 1,RECORDS_PER_TABLE / 2 + i + 1);
    assertRecordTransactionMetadata(recordB,batchTxId,RECORDS_PER_TABLE + 2 * i + 2,RECORDS_PER_TABLE / 2 + i + 1);
  }
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=ID_RESTART + i;
    connection.executeWithoutCommitting(INSERT INTO tablea VALUES( + id + , 'a'));
    connection.executeWithoutCommitting(INSERT INTO tableb VALUES( + id + , 'b'));
    connection.connection().commit();
  }
  sourceRecords=consumeRecordsByTopic(1 + RECORDS_PER_TABLE * TABLES + (2 * RECORDS_PER_TABLE - 1));
  tableA=sourceRecords.recordsForTopic(server1.dbo.tablea);
  tableB=sourceRecords.recordsForTopic(server1.dbo.tableb);
  List<SourceRecord> txMetadata=sourceRecords.recordsForTopic(server1.transaction);
  Assertions.assertThat(tableA).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(tableB).hasSize(RECORDS_PER_TABLE);
  Assertions.assertThat(txMetadata).hasSize(1 + 2 * RECORDS_PER_TABLE - 1);
  assertEndTransaction(txMetadata.get(0),batchTxId,2 * RECORDS_PER_TABLE,Collect.hashMapOf(testDB.dbo.tablea,RECORDS_PER_TABLE,testDB.dbo.tableb,RECORDS_PER_TABLE));
  for (int i=0; i < RECORDS_PER_TABLE; i++) {
    final int id=i + ID_RESTART;
    final SourceRecord recordA=tableA.get(i);
    final SourceRecord recordB=tableB.get(i);
    final List<SchemaAndValueField> expectedRowA=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,id),new SchemaAndValueField(cola,Schema.OPTIONAL_STRING_SCHEMA,a));
    final List<SchemaAndValueField> expectedRowB=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,id),new SchemaAndValueField(colb,Schema.OPTIONAL_STRING_SCHEMA,b));
    final Struct valueA=(Struct)recordA.value();
    assertRecord((Struct)valueA.get(after),expectedRowA);
    assertNull(valueA.get(before));
    final Struct valueB=(Struct)recordB.value();
    assertRecord((Struct)valueB.get(after),expectedRowB);
    assertNull(valueB.get(before));
    final String txId=assertBeginTransaction(txMetadata.get(2 * i + 1));
    assertRecordTransactionMetadata(recordA,txId,1,1);
    assertRecordTransactionMetadata(recordB,txId,2,1);
    if (i < RECORDS_PER_TABLE - 1) {
      assertEndTransaction(txMetadata.get(2 * i + 2),txId,2,Collect.hashMapOf(testDB.dbo.tablea,1,testDB.dbo.tableb,1));
    }
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\TransactionMetadataIT.java",129
1038,"'-tryline","@Test public void restartInTheMiddleOfTxAfterSnapshot() throws Exception {
  restartInTheMiddleOfTx(true,false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\TransactionMetadataIT.java",329
1039,"'-tryline","@Test public void restartInTheMiddleOfTxAfterCompletedTx() throws Exception {
  restartInTheMiddleOfTx(false,true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\TransactionMetadataIT.java",334
1040,"'-tryline","@Test public void restartInTheMiddleOfTx() throws Exception {
  restartInTheMiddleOfTx(false,false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\TransactionMetadataIT.java",339
1041,"'-tryline","public static void waitForMaxLsnAvailable(SqlServerConnection connection) throws Exception {
  try {
    Awaitility.await(Max LSN not available).atMost(60,TimeUnit.SECONDS).pollDelay(Duration.ofSeconds(0)).pollInterval(Duration.ofMillis(100)).until(() -> connection.getMaxLsn().isAvailable());
  }
 catch (  ConditionTimeoutException e) {
    throw new IllegalArgumentException(A max LSN was not available,e);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\util\TestHelper.java",383
1042,"'-tryline","/** 
 * Executes this source.  Implementations should regularly check via the given context if they should stop.  If that's the case, they should abort their processing and perform any clean-up needed, such as rolling back pending transactions, releasing locks, etc.
 * @param context contextual information for this source's execution
 * @param snapshotContext mutable context information populated throughout the snapshot process
 * @param snapshottingTask immutable information about what tasks should be performed during snapshot
 * @return an indicator to the position at which the snapshot was taken
 */
protected abstract SnapshotResult doExecute(ChangeEventSourceContext context,SnapshotContext snapshotContext,SnapshottingTask snapshottingTask) throws Exception ;
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\source\AbstractSnapshotChangeEventSource.java",131
1043,"'-tryline","/** 
 * Prepares the taking of a snapshot and returns an initial  {@link SnapshotContext}.
 */
protected abstract SnapshotContext prepare(ChangeEventSourceContext changeEventSourceContext) throws Exception ;
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\source\AbstractSnapshotChangeEventSource.java",148
1044,"'-tryline","@Override public void close() throws Exception {
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\source\AbstractSnapshotChangeEventSource.java",168
1045,"'-tryline","private short getDefaultTopicReplicationFactor(AdminClient admin) throws Exception {
  try {
    Config brokerConfig=getKafkaBrokerConfig(admin);
    String defaultReplicationFactorValue=brokerConfig.get(DEFAULT_TOPIC_REPLICATION_FACTOR_PROP_NAME).value();
    if (defaultReplicationFactorValue != null) {
      return Short.parseShort(defaultReplicationFactorValue);
    }
  }
 catch (  ExecutionException ex) {
    if (!(ex.getCause() instanceof UnsupportedVersionException)) {
      throw ex;
    }
  }
  LOGGER.warn(Unable to obtain the default replication factor from the brokers at {}. Setting value to {} instead.,producerConfig.getString(BOOTSTRAP_SERVERS),DEFAULT_TOPIC_REPLICATION_FACTOR);
  return DEFAULT_TOPIC_REPLICATION_FACTOR;
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\history\KafkaDatabaseHistory.java",509
1046,"'-tryline","private Config getKafkaBrokerConfig(AdminClient admin) throws Exception {
  final Collection<Node> nodes=admin.describeCluster().nodes().get(KAFKA_QUERY_TIMEOUT.toMillis(),TimeUnit.MILLISECONDS);
  if (nodes.isEmpty()) {
    throw new ConnectException(No brokers available to obtain default settings);
  }
  String nodeId=nodes.iterator().next().idString();
  Set<ConfigResource> resources=Collections.singleton(new ConfigResource(ConfigResource.Type.BROKER,nodeId));
  final Map<ConfigResource,Config> configs=admin.describeConfigs(resources).all().get(KAFKA_QUERY_TIMEOUT.toMillis(),TimeUnit.MILLISECONDS);
  if (configs.isEmpty()) {
    throw new ConnectException(No configs have been received);
  }
  return configs.values().iterator().next();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\history\KafkaDatabaseHistory.java",535
1047,"'-tryline","@Override public SnapshotResult doExecute(ChangeEventSourceContext context,SnapshotContext snapshotContext,SnapshottingTask snapshottingTask) throws Exception {
  final RelationalSnapshotContext ctx=(RelationalSnapshotContext)snapshotContext;
  Connection connection=null;
  try {
    LOGGER.info(Snapshot step 1 - Preparing);
    if (previousOffset != null && previousOffset.isSnapshotRunning()) {
      LOGGER.info(Previous snapshot was cancelled before completion; a new snapshot will be taken.);
    }
    connection=createSnapshotConnection();
    connectionCreated(ctx);
    LOGGER.info(Snapshot step 2 - Determining captured tables);
    determineCapturedTables(ctx);
    snapshotProgressListener.monitoredDataCollectionsDetermined(ctx.capturedTables);
    LOGGER.info(Snapshot step 3 - Locking captured tables {},ctx.capturedTables);
    if (snapshottingTask.snapshotSchema()) {
      lockTablesForSchemaSnapshot(context,ctx);
    }
    LOGGER.info(Snapshot step 4 - Determining snapshot offset);
    determineSnapshotOffset(ctx);
    LOGGER.info(Snapshot step 5 - Reading structure of captured tables);
    readTableStructure(context,ctx);
    if (snapshottingTask.snapshotSchema()) {
      LOGGER.info(Snapshot step 6 - Persisting schema history);
      createSchemaChangeEventsForTables(context,ctx,snapshottingTask);
      releaseSchemaSnapshotLocks(ctx);
    }
 else {
      LOGGER.info(Snapshot step 6 - Skipping persisting of schema history);
    }
    if (snapshottingTask.snapshotData()) {
      LOGGER.info(Snapshot step 7 - Snapshotting data);
      createDataEvents(context,ctx);
    }
 else {
      LOGGER.info(Snapshot step 7 - Skipping snapshotting of data);
      releaseDataSnapshotLocks(ctx);
      ctx.offset.preSnapshotCompletion();
      ctx.offset.postSnapshotCompletion();
    }
    postSnapshot();
    dispatcher.alwaysDispatchHeartbeatEvent(ctx.offset);
    return SnapshotResult.completed(ctx.offset);
  }
  finally {
    rollbackTransaction(connection);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\RelationalSnapshotChangeEventSource.java",89
1048,"'-tryline","/** 
 * Executes steps which have to be taken just after the database connection is created.
 */
protected void connectionCreated(RelationalSnapshotContext snapshotContext) throws Exception {
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\RelationalSnapshotChangeEventSource.java",162
1049,"'-tryline","private Set<TableId> sort(Set<TableId> capturedTables) throws Exception {
  String tableIncludeList=connectorConfig.tableIncludeList();
  if (tableIncludeList != null) {
    return Strings.listOfRegex(tableIncludeList,Pattern.CASE_INSENSITIVE).stream().flatMap(pattern -> toTableIds(capturedTables,pattern)).collect(Collectors.toCollection(LinkedHashSet::new));
  }
  return capturedTables.stream().sorted().collect(Collectors.toCollection(LinkedHashSet::new));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\RelationalSnapshotChangeEventSource.java",175
1050,"'-tryline","private void determineCapturedTables(RelationalSnapshotContext ctx) throws Exception {
  Set<TableId> allTableIds=determineDataCollectionsToBeSnapshotted(getAllTableIds(ctx)).collect(Collectors.toSet());
  Set<TableId> capturedTables=new HashSet<>();
  Set<TableId> capturedSchemaTables=new HashSet<>();
  for (  TableId tableId : allTableIds) {
    if (connectorConfig.getTableFilters().eligibleDataCollectionFilter().isIncluded(tableId)) {
      LOGGER.trace(Adding table {} to the list of capture schema tables,tableId);
      capturedSchemaTables.add(tableId);
    }
    if (connectorConfig.getTableFilters().dataCollectionFilter().isIncluded(tableId)) {
      LOGGER.trace(Adding table {} to the list of captured tables,tableId);
      capturedTables.add(tableId);
    }
 else {
      LOGGER.trace(Ignoring table {} as it's not included in the filter configuration,tableId);
    }
  }
  ctx.capturedTables=sort(capturedTables);
  ctx.capturedSchemaTables=capturedSchemaTables.stream().sorted().collect(Collectors.toCollection(LinkedHashSet::new));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\RelationalSnapshotChangeEventSource.java",189
1051,"'-tryline","/** 
 * Returns all candidate tables; the current filter configuration will be applied to the result set, resulting in the effective set of captured tables.
 */
protected abstract Set<TableId> getAllTableIds(RelationalSnapshotContext snapshotContext) throws Exception ;
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\RelationalSnapshotChangeEventSource.java",216
1052,"'-tryline","/** 
 * Locks all tables to be captured, so that no concurrent schema changes can be applied to them.
 */
protected abstract void lockTablesForSchemaSnapshot(ChangeEventSourceContext sourceContext,RelationalSnapshotContext snapshotContext) throws Exception ;
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\RelationalSnapshotChangeEventSource.java",222
1053,"'-tryline","/** 
 * Determines the current offset (MySQL binlog position, Oracle SCN etc.), storing it into the passed context object. Subsequently, the DB's schema (and data) will be be read at this position. Once the snapshot is completed, a  {@link StreamingChangeEventSource} will be set up with this initial position to continue with streamreading from there.
 */
protected abstract void determineSnapshotOffset(RelationalSnapshotContext snapshotContext) throws Exception ;
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\RelationalSnapshotChangeEventSource.java",227
1054,"'-tryline","/** 
 * Reads the structure of all the captured tables, writing it to  {@link RelationalSnapshotContext#tables}.
 */
protected abstract void readTableStructure(ChangeEventSourceContext sourceContext,RelationalSnapshotContext snapshotContext) throws Exception ;
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\RelationalSnapshotChangeEventSource.java",235
1055,"'-tryline","/** 
 * Releases all locks established in order to create a consistent schema snapshot.
 */
protected abstract void releaseSchemaSnapshotLocks(RelationalSnapshotContext snapshotContext) throws Exception ;
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\RelationalSnapshotChangeEventSource.java",240
1056,"'-tryline","/** 
 * Releases all locks established in order to create a consistent data snapshot.
 */
protected void releaseDataSnapshotLocks(RelationalSnapshotContext snapshotContext) throws Exception {
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\RelationalSnapshotChangeEventSource.java",245
1057,"'-tryline","protected void createSchemaChangeEventsForTables(ChangeEventSourceContext sourceContext,RelationalSnapshotContext snapshotContext,SnapshottingTask snapshottingTask) throws Exception {
  tryStartingSnapshot(snapshotContext);
  for (Iterator<TableId> iterator=snapshotContext.capturedTables.iterator(); iterator.hasNext(); ) {
    final TableId tableId=iterator.next();
    if (!sourceContext.isRunning()) {
      throw new InterruptedException(Interrupted while capturing schema of table  + tableId);
    }
    LOGGER.debug(Capturing structure of table {},tableId);
    Table table=snapshotContext.tables.forTable(tableId);
    if (schema != null) {
      snapshotContext.offset.event(tableId,getClock().currentTime());
      if (!snapshottingTask.snapshotData() && !iterator.hasNext()) {
        lastSnapshotRecord(snapshotContext);
      }
      dispatcher.dispatchSchemaChangeEvent(table.id(),(receiver) -> {
        try {
          receiver.schemaChangeEvent(getCreateTableEvent(snapshotContext,table));
        }
 catch (        Exception e) {
          throw new DebeziumException(e);
        }
      }
);
    }
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\RelationalSnapshotChangeEventSource.java",251
1058,"'-tryline","/** 
 * Creates a  {@link SchemaChangeEvent} representing the creation of the given table.
 */
protected abstract SchemaChangeEvent getCreateTableEvent(RelationalSnapshotContext snapshotContext,Table table) throws Exception ;
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\RelationalSnapshotChangeEventSource.java",283
1059,"'-tryline","private void createDataEvents(ChangeEventSourceContext sourceContext,RelationalSnapshotContext snapshotContext) throws Exception {
  SnapshotReceiver snapshotReceiver=dispatcher.getSnapshotChangeEventReceiver();
  tryStartingSnapshot(snapshotContext);
  final int tableCount=snapshotContext.capturedTables.size();
  int tableOrder=1;
  LOGGER.info(Snapshotting contents of {} tables while still in transaction,tableCount);
  for (Iterator<TableId> tableIdIterator=snapshotContext.capturedTables.iterator(); tableIdIterator.hasNext(); ) {
    final TableId tableId=tableIdIterator.next();
    snapshotContext.lastTable=!tableIdIterator.hasNext();
    if (!sourceContext.isRunning()) {
      throw new InterruptedException(Interrupted while snapshotting table  + tableId);
    }
    LOGGER.debug(Snapshotting table {},tableId);
    createDataEventsForTable(sourceContext,snapshotContext,snapshotReceiver,snapshotContext.tables.forTable(tableId),tableOrder++,tableCount);
  }
  releaseDataSnapshotLocks(snapshotContext);
  snapshotContext.offset.preSnapshotCompletion();
  snapshotReceiver.completeSnapshot();
  snapshotContext.offset.postSnapshotCompletion();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\RelationalSnapshotChangeEventSource.java",288
1060,"'-tryline","/** 
 * Time the given function multiple times.
 * @param repeat the number of times to repeat the function call; must be positive
 * @param runnable the function that is to be executed a number of times; may not be null
 * @param cleanup the function that is to be called after each time call to the runnable function, and not includedin the time measurements; may be null
 * @throws Exception the exception thrown by the runnable function
 */
default public <T>void time(int repeat,Callable<T> runnable,Consumer<T> cleanup) throws Exception {
  for (int i=0; i != repeat; ++i) {
    T result=null;
    Stopwatch sw=create().start();
    try {
      result=runnable.call();
    }
  finally {
      sw.stop();
      if (cleanup != null) {
        cleanup.accept(result);
      }
    }
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\Stopwatch.java",324
1061,"'-tryline","@Test public void shouldWriteDocumentWithSingleField() throws Exception {
  array.add(value1);
  after=reader.readArray(writer.write(array));
  assertThat(after.get(0)).isEqualTo(value1);
  assertThat(after.size()).isEqualTo(1);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\document\JacksonArrayReadingAndWritingTest.java",31
1062,"'-tryline","@Test public void shouldWriteDocumentWithTwoFields() throws Exception {
  array.add(value1);
  array.add(value2);
  after=reader.readArray(writer.write(array));
  assertThat(after.get(0)).isEqualTo(value1);
  assertThat(after.get(1)).isEqualTo(value2);
  assertThat(after.size()).isEqualTo(2);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\document\JacksonArrayReadingAndWritingTest.java",39
1063,"'-tryline","@Test public void shouldWriteDocumentWithNestedDocument() throws Exception {
  array.add(value1);
  array.add(value2);
  array.add(Document.create(a,A,b,B));
  after=reader.readArray(writer.write(array));
  assertThat(after.get(0)).isEqualTo(value1);
  assertThat(after.get(1)).isEqualTo(value2);
  assertThat(after.size()).isEqualTo(3);
  Document nested=after.get(2).asDocument();
  assertThat(nested.getString(a)).isEqualTo(A);
  assertThat(nested.getString(b)).isEqualTo(B);
  assertThat(nested.size()).isEqualTo(2);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\document\JacksonArrayReadingAndWritingTest.java",49
1064,"'-tryline","@Test public void shouldWriteDocumentWithDeeplyNestedDocument() throws Exception {
  array.add(value1);
  array.add(value2);
  array.add(Document.create(a,A,b,B,c,Document.create(x,X)));
  after=reader.readArray(writer.write(array));
  assertThat(after.get(0)).isEqualTo(value1);
  assertThat(after.get(1)).isEqualTo(value2);
  assertThat(after.size()).isEqualTo(3);
  Document nested=after.get(2).asDocument();
  assertThat(nested.getString(a)).isEqualTo(A);
  assertThat(nested.getString(b)).isEqualTo(B);
  assertThat(nested.size()).isEqualTo(3);
  Document deepNested=nested.getDocument(c);
  assertThat(deepNested.getString(x)).isEqualTo(X);
  assertThat(deepNested.size()).isEqualTo(1);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\document\JacksonArrayReadingAndWritingTest.java",64
1065,"'-tryline","@Test @FixFor(DBZ-657) public void canParseDocumentWithUnescapedControlCharacter() throws Exception {
  Document document=JacksonReader.DEFAULT_INSTANCE.read(new String(new byte[]{123,34,97,13,98,34,58,49,50,51,125}));
  assertThat((Object)document).isEqualTo(Document.create(a\rb,123));
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\document\JacksonReaderTest.java",21
1066,"'-tryline","@Test public void shouldWriteDocumentWithSingleField() throws Exception {
  doc.set(field,value);
  after=reader.read(writer.write(doc));
  assertThat(after.getString(field)).isEqualTo(value);
  assertThat(after.size()).isEqualTo(1);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\document\JacksonWriterTest.java",31
1067,"'-tryline","@Test public void shouldWriteDocumentWithTwoFields() throws Exception {
  doc.set(field1,value);
  doc.set(field2,22);
  after=reader.read(writer.write(doc));
  assertThat(after.getString(field1)).isEqualTo(value);
  assertThat(after.getInteger(field2)).isEqualTo(22);
  assertThat(after.size()).isEqualTo(2);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\document\JacksonWriterTest.java",39
1068,"'-tryline","@Test public void shouldWriteDocumentWithNestedDocument() throws Exception {
  doc.set(field1,value);
  doc.set(field2,22);
  doc.set(field3,Document.create(a,A,b,B));
  after=reader.read(writer.write(doc));
  Testing.print(after);
  assertThat(after.getString(field1)).isEqualTo(value);
  assertThat(after.getInteger(field2)).isEqualTo(22);
  assertThat(after.size()).isEqualTo(3);
  Document nested=after.getDocument(field3);
  assertThat(nested.getString(a)).isEqualTo(A);
  assertThat(nested.getString(b)).isEqualTo(B);
  assertThat(nested.size()).isEqualTo(2);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\document\JacksonWriterTest.java",49
1069,"'-tryline","@Test public void shouldWriteDocumentWithDeeplyNestedDocument() throws Exception {
  doc.set(field1,value);
  doc.set(field2,22);
  doc.set(field3,Document.create(a,A,b,B,c,Document.create(x,X)));
  after=reader.read(writer.write(doc));
  Testing.print(after);
  assertThat(after.getString(field1)).isEqualTo(value);
  assertThat(after.getInteger(field2)).isEqualTo(22);
  assertThat(after.size()).isEqualTo(3);
  Document nested=after.getDocument(field3);
  assertThat(nested.getString(a)).isEqualTo(A);
  assertThat(nested.getString(b)).isEqualTo(B);
  assertThat(nested.size()).isEqualTo(3);
  Document deepNested=nested.getDocument(c);
  assertThat(deepNested.getString(x)).isEqualTo(X);
  assertThat(deepNested.size()).isEqualTo(1);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\document\JacksonWriterTest.java",65
1070,"'-tryline","@Test @SkipLongRunning public void shouldStartClusterWithOneBrokerAndRemoveData() throws Exception {
  cluster.addBrokers(1).startup();
  cluster.onEachDirectory(this::assertValidDataDirectory);
  cluster.shutdown();
  cluster.onEachDirectory(this::assertDoesNotExist);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\kafka\KafkaClusterTest.java",60
1071,"'-tryline","@Test @SkipLongRunning public void shouldStartClusterWithMultipleBrokerAndRemoveData() throws Exception {
  cluster.addBrokers(3).startup();
  cluster.onEachDirectory(this::assertValidDataDirectory);
  cluster.shutdown();
  cluster.onEachDirectory(this::assertDoesNotExist);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\kafka\KafkaClusterTest.java",69
1072,"'-tryline","@Test @SkipLongRunning public void shouldStartClusterWithOneBrokerAndLeaveData() throws Exception {
  cluster.deleteDataUponShutdown(false).addBrokers(1).startup();
  cluster.onEachDirectory(this::assertValidDataDirectory);
  cluster.shutdown();
  cluster.onEachDirectory(this::assertValidDataDirectory);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\kafka\KafkaClusterTest.java",78
1073,"'-tryline","@Test @SkipLongRunning public void shouldStartClusterWithMultipleBrokerAndLeaveData() throws Exception {
  cluster.deleteDataUponShutdown(false).addBrokers(3).startup();
  cluster.onEachDirectory(this::assertValidDataDirectory);
  cluster.shutdown();
  cluster.onEachDirectory(this::assertValidDataDirectory);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\kafka\KafkaClusterTest.java",87
1074,"'-tryline","@Test @SkipLongRunning public void shouldStartClusterAndAllowProducersAndConsumersToUseIt() throws Exception {
  Testing.Debug.enable();
  final String topicName=topicA;
  final CountDownLatch completion=new CountDownLatch(2);
  final int numMessages=100;
  final AtomicLong messagesRead=new AtomicLong(0);
  cluster.addBrokers(1).startup();
  cluster.createTopics(topicName);
  Stopwatch sw=Stopwatch.reusable().start();
  cluster.useTo().consumeIntegers(topicName,numMessages,10,TimeUnit.SECONDS,completion::countDown,(key,value) -> {
    messagesRead.incrementAndGet();
    return true;
  }
);
  cluster.useTo().produceIntegers(topicName,numMessages,1,completion::countDown);
  if (completion.await(10,TimeUnit.SECONDS)) {
    sw.stop();
    Testing.debug(Both consumer and producer completed normally in  + sw.durations());
  }
 else {
    Testing.debug(Consumer and/or producer did not completed normally);
  }
  assertThat(messagesRead.get()).isEqualTo(numMessages);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\kafka\KafkaClusterTest.java",96
1075,"'-tryline","@Test public void shouldStartClusterAndAllowInteractiveProductionAndAutomaticConsumersToUseIt() throws Exception {
  Testing.Debug.enable();
  final String topicName=topicA;
  final CountDownLatch completion=new CountDownLatch(1);
  final int numMessages=3;
  final AtomicLong messagesRead=new AtomicLong(0);
  cluster.addBrokers(1).startup();
  cluster.createTopics(topicName);
  Stopwatch sw=Stopwatch.reusable().start();
  cluster.useTo().consumeIntegers(topicName,numMessages,10,TimeUnit.SECONDS,completion::countDown,(key,value) -> {
    messagesRead.incrementAndGet();
    return true;
  }
);
  cluster.useTo().createProducer(manual,new StringSerializer(),new IntegerSerializer()).write(topicName,key1,1).write(topicName,key2,2).write(topicName,key3,3).close();
  if (completion.await(10,TimeUnit.SECONDS)) {
    sw.stop();
    Testing.debug(The consumer completed normally in  + sw.durations());
  }
 else {
    Testing.debug(Consumer did not completed normally);
  }
  assertThat(messagesRead.get()).isEqualTo(numMessages);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\kafka\KafkaClusterTest.java",131
1076,"'-tryline","@Test @SkipLongRunning public void shouldStartClusterAndAllowAsynchronousProductionAndAutomaticConsumersToUseIt() throws Exception {
  Testing.Debug.enable();
  final String topicName=topicA;
  final CountDownLatch completion=new CountDownLatch(2);
  final int numMessages=3;
  final AtomicLong messagesRead=new AtomicLong(0);
  cluster.addBrokers(1).startup();
  cluster.createTopics(topicName);
  Stopwatch sw=Stopwatch.reusable().start();
  cluster.useTo().consumeIntegers(topicName,numMessages,10,TimeUnit.SECONDS,completion::countDown,(key,value) -> {
    messagesRead.incrementAndGet();
    return true;
  }
);
  cluster.useTo().produce(manual,new StringSerializer(),new IntegerSerializer(),produer -> {
    produer.write(topicName,key1,1);
    produer.write(topicName,key2,2);
    produer.write(topicName,key3,3);
    completion.countDown();
  }
);
  if (completion.await(10,TimeUnit.SECONDS)) {
    sw.stop();
    Testing.debug(The consumer completed normally in  + sw.durations());
  }
 else {
    Testing.debug(Consumer did not completed normally);
  }
  assertThat(messagesRead.get()).isEqualTo(numMessages);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\kafka\KafkaClusterTest.java",170
1077,"'-tryline","@Test public void shouldSetClusterConfigProperty() throws Exception {
  Properties config=new Properties();
  config.put(foo,bar);
  KafkaCluster kafkaCluster=new KafkaCluster().withKafkaConfiguration(config);
  Field kafkaConfigField=KafkaCluster.class.getDeclaredField(kafkaConfig);
  kafkaConfigField.setAccessible(true);
  Properties kafkaConfig=(Properties)kafkaConfigField.get(kafkaCluster);
  assertThat(kafkaConfig).hasSize(1);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\kafka\KafkaClusterTest.java",209
1078,"'-tryline","@Test public void shouldSetServerConfigProperty() throws Exception {
  Properties config=new Properties();
  config.put(foo,bar);
  KafkaCluster kafkaCluster=new KafkaCluster().withKafkaConfiguration(config).addBrokers(1);
  Field kafkaServersField=KafkaCluster.class.getDeclaredField(kafkaServers);
  kafkaServersField.setAccessible(true);
  ConcurrentMap<Integer,KafkaServer> kafkaServers=(ConcurrentMap<Integer,KafkaServer>)kafkaServersField.get(kafkaCluster);
  Properties serverConfig=kafkaServers.values().iterator().next().config();
  assertThat(serverConfig.get(foo)).isEqualTo(bar);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\kafka\KafkaClusterTest.java",221
1079,"'-tryline","@Test public void shouldStartServerAndRemoveData() throws Exception {
  Testing.debug(Running 1);
  server.startup();
  server.onEachDirectory(this::assertValidDataDirectory);
  server.shutdown(true);
  server.onEachDirectory(this::assertDoesNotExist);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\kafka\ZookeeperServerTest.java",40
1080,"'-tryline","@Test public void shouldStartServerAndLeaveData() throws Exception {
  Testing.debug(Running 2);
  server.startup();
  server.onEachDirectory(this::assertValidDataDirectory);
  server.shutdown(false);
  server.onEachDirectory(this::assertValidDataDirectory);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\kafka\ZookeeperServerTest.java",49
1081,"'-tryline","@Test public void shouldExecuteLog() throws Exception {
  final Signal signal=new Signal(config());
  final LogInterceptor log=new LogInterceptor(io.debezium.pipeline.signal.Log.class);
  assertThat(signal.process(log1,log,{\message\: \signallog {}\})).isTrue();
  assertThat(log.containsMessage(signallog <none>)).isTrue();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\pipeline\signal\SignalTest.java",38
1082,"'-tryline","@Test public void shouldIgnoreInvalidSignalType() throws Exception {
  final Signal signal=new Signal(config());
  assertThat(signal.process(log1,log1,{\message\: \signallog\})).isFalse();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\pipeline\signal\SignalTest.java",46
1083,"'-tryline","@Test public void shouldIgnoreUnparseableData() throws Exception {
  final Signal signal=new Signal(config());
  assertThat(signal.process(log1,log,{\message: \signallog\})).isFalse();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\pipeline\signal\SignalTest.java",52
1084,"'-tryline","@Test public void shouldRegisterAdditionalAction() throws Exception {
  final Signal signal=new Signal(config());
  final AtomicInteger called=new AtomicInteger();
  final Signal.Action testAction=new Signal.Action(){
    @Override public boolean arrived(    Payload signalPayload){
      called.set(signalPayload.data.getInteger(v));
      return true;
    }
  }
;
  signal.registerSignalAction(custom,testAction);
  assertThat(signal.process(log1,custom,{\v\: 5})).isTrue();
  assertThat(called.intValue()).isEqualTo(5);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\pipeline\signal\SignalTest.java",58
1085,"'-tryline","@Test public void shouldExecuteFromEnvelope() throws Exception {
  final Signal signal=new Signal(config());
  final Schema afterSchema=SchemaBuilder.struct().name(signal).field(col1,Schema.OPTIONAL_STRING_SCHEMA).field(col2,Schema.OPTIONAL_STRING_SCHEMA).field(col3,Schema.OPTIONAL_STRING_SCHEMA).build();
  final Envelope env=Envelope.defineSchema().withName(someName).withRecord(afterSchema).withSource(SchemaBuilder.struct().name(source).build()).build();
  final Struct record=new Struct(afterSchema);
  record.put(col1,log1);
  record.put(col2,custom);
  record.put(col3,{\v\: 5});
  final AtomicInteger called=new AtomicInteger();
  final Signal.Action testAction=new Signal.Action(){
    @Override public boolean arrived(    Payload signalPayload){
      called.set(signalPayload.data.getInteger(v));
      return true;
    }
  }
;
  signal.registerSignalAction(custom,testAction);
  assertThat(signal.process(env.create(record,null,null),null)).isTrue();
  assertThat(called.intValue()).isEqualTo(5);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\pipeline\signal\SignalTest.java",76
1086,"'-tryline","@Test public void shouldIgnoreInvalidEnvelope() throws Exception {
  final Signal signal=new Signal(config());
  final Schema afterSchema=SchemaBuilder.struct().name(signal).field(col1,Schema.OPTIONAL_STRING_SCHEMA).field(col2,Schema.OPTIONAL_STRING_SCHEMA).build();
  final Envelope env=Envelope.defineSchema().withName(someName).withRecord(afterSchema).withSource(SchemaBuilder.struct().name(source).build()).build();
  final Struct record=new Struct(afterSchema);
  record.put(col1,log1);
  record.put(col2,custom);
  final AtomicInteger called=new AtomicInteger();
  final Signal.Action testAction=new Signal.Action(){
    @Override public boolean arrived(    Payload signalPayload){
      called.set(signalPayload.data.getInteger(v));
      return true;
    }
  }
;
  signal.registerSignalAction(custom,testAction);
  assertThat(signal.process(env.create(record,null,null),null)).isFalse();
  assertThat(called.intValue()).isEqualTo(0);
  assertThat(signal.process(record,null)).isFalse();
  assertThat(called.intValue()).isEqualTo(0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\pipeline\signal\SignalTest.java",107
1087,"'-tryline","@Test public void canSerializeAndDeserializeHistoryRecord() throws Exception {
  Map<String,Object> source=Collect.linkMapOf(server,abc);
  Map<String,Object> position=Collect.linkMapOf(file,x.log,positionInt,100,positionLong,Long.MAX_VALUE,entry,1);
  String databaseName=db;
  String schemaName=myschema;
  String ddl=CREATE TABLE foo ( first VARCHAR(22) NOT NULL );;
  Table table=Table.editor().tableId(new TableId(databaseName,schemaName,foo)).addColumn(Column.editor().name(first).jdbcType(Types.VARCHAR).type(VARCHAR).length(22).optional(false).create()).setPrimaryKeyNames(first).create();
  TableChanges tableChanges=new TableChanges().create(table);
  HistoryRecord record=new HistoryRecord(source,position,databaseName,schemaName,ddl,tableChanges);
  String serialized=record.toString();
  DocumentReader reader=DocumentReader.defaultReader();
  HistoryRecord deserialized=new HistoryRecord(reader.read(serialized));
  assertThat(deserialized.source()).isNotNull();
  assertThat(deserialized.source().get(server)).isEqualTo(abc);
  assertThat(deserialized.position()).isNotNull();
  assertThat(deserialized.position().get(file)).isEqualTo(x.log);
  assertThat(deserialized.position().get(positionInt)).isEqualTo(100);
  assertThat(deserialized.position().get(positionLong)).isEqualTo(Long.MAX_VALUE);
  assertThat(deserialized.position().get(entry)).isEqualTo(1);
  assertThat(deserialized.databaseName()).isEqualTo(databaseName);
  assertThat(deserialized.schemaName()).isEqualTo(schemaName);
  assertThat(deserialized.ddl()).isEqualTo(ddl);
  System.out.println(record);
  final TableChangesSerializer<Array> tableChangesSerializer=new JsonTableChangeSerializer();
  assertThat((Object)tableChangesSerializer.deserialize(deserialized.tableChanges(),true)).isEqualTo(tableChanges);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\relational\history\HistoryRecordTest.java",29
1088,"'-tryline","@Test @FixFor(DBZ-2412) public void shouldHandleSchemaChangeEvent() throws Exception {
  final ByLogicalTableRouter<SourceRecord> router=new ByLogicalTableRouter<>();
  final Map<String,String> props=new HashMap<>();
  props.put(topic.regex,(.*));
  props.put(topic.replacement,$1_rerouted);
  router.configure(props);
  Schema schemaChangeKeySchema=SchemaBuilder.struct().name(io.debezium.connector.mysql.SchemaChangeKey).field(Fields.DATABASE_NAME,Schema.STRING_SCHEMA).build();
  Schema schemaChangeValueSchema=SchemaBuilder.struct().name(io.debezium.connector.mysql.SchemaChangeValue).field(Fields.DATABASE_NAME,Schema.OPTIONAL_STRING_SCHEMA);
  final SourceRecord record=new SourceRecord(null,Collections.singletonMap(offset,1),schema_changes,0,schemaChangeKeySchema,new Struct(schemaChangeKeySchema).put(Fields.DATABASE_NAME,my-db),schemaChangeValueSchema,new Struct(schemaChangeValueSchema).put(Fields.DATABASE_NAME,my-db));
  SourceRecord transformed=router.apply(record);
  assertThat(transformed.topic()).isEqualTo(schema_changes_rerouted);
  assertThat(transformed.value()).isSameAs(record.value());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\transforms\ByLogicalTableRouterTest.java",273
1089,"'-tryline","@Test public void shouldRemoveDirectory() throws Exception {
  Path path=Paths.get(Testing.Files.dataDir(),test-dir);
  assertThat(path.toFile().mkdirs()).isTrue();
  Path file=path.resolve(file.txt);
  assertThat(file.toFile().createNewFile()).isTrue();
  Testing.Files.delete(path);
  assertThat(java.nio.file.Files.exists(path)).isFalse();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\util\TestingTest.java",24
1090,"'-tryline","/** 
 * Run the connector with no known expected results so that it generates the results.
 * @throws Exception if there is an error
 */
@Test public void shouldGenerateExpected() throws Exception {
  System.setProperty(debezium.embedded.shutdown.pause.before.interrupt.ms,5000);
  int numBatches=1;
  int numRecordsPerBatch=10;
  Path dir=Testing.Files.createTestingPath(simple/gen-expected).toAbsolutePath();
  Testing.Files.delete(dir);
  Properties config=new Properties();
  config.put(ConnectorConfig.NAME_CONFIG,simple-connector-1);
  config.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG,SimpleSourceConnector.class.getName());
  config.put(ConnectorConfig.TASKS_MAX_CONFIG,1);
  config.put(SimpleSourceConnector.BATCH_COUNT,Integer.toString(numBatches));
  config.put(SimpleSourceConnector.RECORD_COUNT_PER_BATCH,Integer.toString(numRecordsPerBatch));
  config.put(SimpleSourceConnector.TOPIC_NAME,TOPIC_NAME);
  writeConfigurationFileWithDefaultName(dir,config);
  Properties env=new Properties();
  env.put(ConnectorOutputTest.ENV_CONNECTOR_TIMEOUT_IN_SECONDS,1);
  writeEnvironmentFileWithDefaultName(dir,env);
  Path expectedResults=dir.resolve(DEFAULT_EXPECTED_RECORDS_FILENAME);
  assertThat(Files.exists(expectedResults)).isFalse();
  runConnector(gen-expected,dir);
  assertExpectedRecords(expectedResults,numBatches,numRecordsPerBatch);
  appendStop(expectedResults);
  cleanOffsetStorage();
  runConnector(gen-expected,dir);
  System.clearProperty(debezium.embedded.shutdown.pause.before.interrupt.ms);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\connector\simple\SimpleSourceConnectorOutputTest.java",43
1091,"'-tryline","Map<String,String> get(Configuration config) throws Exception ;
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\ConnectorOutputTest.java",578
1092,"'-tryline","@Before public void beforeEach() throws Exception {
  nextConsumedLineNumber=1;
  linesAdded=0;
  Testing.Files.delete(TEST_FILE_PATH);
  inputFile=Testing.Files.createTestingFile(TEST_FILE_PATH);
  connectorConfig=Configuration.create().with(FileStreamSourceConnector.FILE_CONFIG,TEST_FILE_PATH).with(FileStreamSourceConnector.TOPIC_CONFIG,topicX).build();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\EmbeddedEngineTest.java",97
1093,"'-tryline","@Test public void interruptedTaskShutsDown() throws Exception {
  Configuration config=Configuration.create().with(EmbeddedEngine.ENGINE_NAME,testing-connector).with(EmbeddedEngine.CONNECTOR_CLASS,InterruptedConnector.class).with(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG,OFFSET_STORE_PATH).with(EmbeddedEngine.OFFSET_FLUSH_INTERVAL_MS,0).with(EmbeddedEngine.OFFSET_STORAGE,InterruptingOffsetStore.class).build();
  CountDownLatch firstLatch=new CountDownLatch(1);
  engine=EmbeddedEngine.create().using(config).notifying((records,committer) -> {
  }
).using(this.getClass().getClassLoader()).using((success,message,error) -> {
    if (error != null) {
      logger.error(Error while shutting down,error);
    }
    firstLatch.countDown();
  }
).build();
  ExecutorService exec=Executors.newFixedThreadPool(1);
  exec.execute(() -> {
    LoggingContext.forConnector(getClass().getSimpleName(),,engine);
    engine.run();
  }
);
  firstLatch.await(5000,TimeUnit.MILLISECONDS);
  assertThat(firstLatch.getCount()).isEqualTo(0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\EmbeddedEngineTest.java",110
1094,"'-tryline","@Test public void interruptedOffsetCommitShutsDown() throws Exception {
  Configuration config=Configuration.create().with(SimpleSourceConnector.BATCH_COUNT,1).with(EmbeddedEngine.ENGINE_NAME,testing-connector).with(EmbeddedEngine.CONNECTOR_CLASS,SimpleSourceConnector.class).with(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG,OFFSET_STORE_PATH).with(EmbeddedEngine.OFFSET_STORAGE,InterruptingOffsetStore.class).build();
  CountDownLatch firstLatch=new CountDownLatch(1);
  engine=EmbeddedEngine.create().using(config).using(OffsetCommitPolicy.always()).notifying((records,committer) -> {
    for (    SourceRecord record : records) {
      committer.markProcessed(record);
    }
    committer.markBatchFinished();
  }
).using(this.getClass().getClassLoader()).using((success,message,error) -> {
    if (error != null) {
      logger.error(Error while shutting down,error);
    }
    firstLatch.countDown();
  }
).build();
  ExecutorService exec=Executors.newFixedThreadPool(1);
  exec.execute(() -> {
    LoggingContext.forConnector(getClass().getSimpleName(),,engine);
    engine.run();
  }
);
  firstLatch.await(5000,TimeUnit.MILLISECONDS);
  assertThat(firstLatch.getCount()).isEqualTo(0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\EmbeddedEngineTest.java",146
1095,"'-tryline","@Test public void shouldStartAndUseFileConnectorUsingMemoryOffsetStorage() throws Exception {
  appendLinesToSource(NUMBER_OF_LINES);
  start(FileStreamSourceConnector.class,connectorConfig);
  consumeLines(NUMBER_OF_LINES);
  assertNoRecordsToConsume();
  for (int i=1; i != 5; ++i) {
    appendLinesToSource(NUMBER_OF_LINES);
    consumeLines(NUMBER_OF_LINES);
    assertNoRecordsToConsume();
  }
  stopConnector();
  appendLinesToSource(NUMBER_OF_LINES);
  assertNoRecordsToConsume();
  start(FileStreamSourceConnector.class,connectorConfig);
  consumeLines(NUMBER_OF_LINES);
  assertNoRecordsToConsume();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\EmbeddedEngineTest.java",188
1096,"'-tryline","@Test @FixFor(DBZ-1080) public void shouldWorkToUseCustomChangeConsumer() throws Exception {
  appendLinesToSource(NUMBER_OF_LINES);
  Configuration config=Configuration.copy(connectorConfig).with(EmbeddedEngine.ENGINE_NAME,testing-connector).with(EmbeddedEngine.CONNECTOR_CLASS,FileStreamSourceConnector.class).with(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG,OFFSET_STORE_PATH).with(EmbeddedEngine.OFFSET_FLUSH_INTERVAL_MS,0).build();
  CountDownLatch firstLatch=new CountDownLatch(1);
  CountDownLatch allLatch=new CountDownLatch(6);
  engine=EmbeddedEngine.create().using(config).notifying((records,committer) -> {
    assertThat(records.size()).isGreaterThanOrEqualTo(NUMBER_OF_LINES);
    Integer groupCount=records.size() / NUMBER_OF_LINES;
    for (    SourceRecord r : records) {
      committer.markProcessed(r);
    }
    committer.markBatchFinished();
    firstLatch.countDown();
    for (int i=0; i < groupCount; i++) {
      allLatch.countDown();
    }
  }
).using(this.getClass().getClassLoader()).build();
  ExecutorService exec=Executors.newFixedThreadPool(1);
  exec.execute(() -> {
    LoggingContext.forConnector(getClass().getSimpleName(),,engine);
    engine.run();
  }
);
  firstLatch.await(5000,TimeUnit.MILLISECONDS);
  assertThat(firstLatch.getCount()).isEqualTo(0);
  for (int i=0; i < 5; i++) {
    appendLinesToSource(NUMBER_OF_LINES);
    Thread.sleep(10);
  }
  allLatch.await(5000,TimeUnit.MILLISECONDS);
  assertThat(allLatch.getCount()).isEqualTo(0);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\EmbeddedEngineTest.java",222
1097,"'-tryline","@Test public void shouldRunDebeziumEngine() throws Exception {
  appendLinesToSource(NUMBER_OF_LINES);
  final Properties props=new Properties();
  props.setProperty(name,debezium-engine);
  props.setProperty(connector.class,org.apache.kafka.connect.file.FileStreamSourceConnector);
  props.setProperty(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG,OFFSET_STORE_PATH.toAbsolutePath().toString());
  props.setProperty(offset.flush.interval.ms,0);
  props.setProperty(file,TEST_FILE_PATH.toAbsolutePath().toString());
  props.setProperty(topic,topicX);
  CountDownLatch firstLatch=new CountDownLatch(1);
  CountDownLatch allLatch=new CountDownLatch(6);
  final DebeziumEngine<RecordChangeEvent<SourceRecord>> engine=DebeziumEngine.create(ChangeEventFormat.of(Connect.class)).using(props).notifying((records,committer) -> {
    assertThat(records.size()).isGreaterThanOrEqualTo(NUMBER_OF_LINES);
    Integer groupCount=records.size() / NUMBER_OF_LINES;
    for (    RecordChangeEvent<SourceRecord> r : records) {
      committer.markProcessed(r);
    }
    committer.markBatchFinished();
    firstLatch.countDown();
    for (int i=0; i < groupCount; i++) {
      allLatch.countDown();
    }
  }
).using(this.getClass().getClassLoader()).build();
  ExecutorService exec=Executors.newFixedThreadPool(1);
  exec.execute(() -> {
    LoggingContext.forConnector(getClass().getSimpleName(),,engine);
    engine.run();
  }
);
  firstLatch.await(5000,TimeUnit.MILLISECONDS);
  assertThat(firstLatch.getCount()).isEqualTo(0);
  for (int i=0; i < 5; i++) {
    appendLinesToSource(NUMBER_OF_LINES);
    Thread.sleep(10);
  }
  allLatch.await(5000,TimeUnit.MILLISECONDS);
  assertThat(allLatch.getCount()).isEqualTo(0);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\EmbeddedEngineTest.java",279
1098,"'-tryline","@Test @FixFor(DBZ-2897) public void shouldRunEngineWithConsumerSettingOffsets() throws Exception {
  appendLinesToSource(NUMBER_OF_LINES);
  String TEST_TOPIC=topicX;
  String CUSTOM_SOURCE_OFFSET_PARTITION=test_topic_partition1;
  Long EXPECTED_CUSTOM_OFFSET=1L;
  final Properties props=new Properties();
  props.setProperty(name,debezium-engine);
  props.setProperty(connector.class,org.apache.kafka.connect.file.FileStreamSourceConnector);
  props.setProperty(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG,OFFSET_STORE_PATH.toAbsolutePath().toString());
  props.setProperty(offset.flush.interval.ms,0);
  props.setProperty(file,TEST_FILE_PATH.toAbsolutePath().toString());
  props.setProperty(topic,TEST_TOPIC);
  CountDownLatch firstLatch=new CountDownLatch(1);
  CountDownLatch allLatch=new CountDownLatch(6);
  final DebeziumEngine<RecordChangeEvent<SourceRecord>> engine=DebeziumEngine.create(ChangeEventFormat.of(Connect.class)).using(props).notifying((records,committer) -> {
    assertThat(records.size()).isGreaterThanOrEqualTo(NUMBER_OF_LINES);
    Integer groupCount=records.size() / NUMBER_OF_LINES;
    for (    RecordChangeEvent<SourceRecord> r : records) {
      DebeziumEngine.Offsets offsets=committer.buildOffsets();
      offsets.set(CUSTOM_SOURCE_OFFSET_PARTITION,EXPECTED_CUSTOM_OFFSET);
      logger.info(r.record().sourceOffset().toString());
      committer.markProcessed(r,offsets);
    }
    committer.markBatchFinished();
    firstLatch.countDown();
    for (int i=0; i < groupCount; i++) {
      allLatch.countDown();
    }
  }
).using(this.getClass().getClassLoader()).build();
  ExecutorService exec=Executors.newFixedThreadPool(1);
  exec.execute(() -> {
    LoggingContext.forConnector(getClass().getSimpleName(),,engine);
    engine.run();
  }
);
  firstLatch.await(5000,TimeUnit.MILLISECONDS);
  assertThat(firstLatch.getCount()).isEqualTo(0);
  for (int i=0; i < 5; i++) {
    appendLinesToSource(NUMBER_OF_LINES);
    Thread.sleep(10);
  }
  allLatch.await(5000,TimeUnit.MILLISECONDS);
  assertThat(allLatch.getCount()).isEqualTo(0);
  SafeObjectInputStream inputStream=new SafeObjectInputStream(java.nio.file.Files.newInputStream(OFFSET_STORE_PATH.toAbsolutePath()));
  Object obj=inputStream.readObject();
  Map<byte[],byte[]> raw=(Map)obj;
  Set<Map.Entry<byte[],byte[]>> fileOffsetStoreEntrySingleton=raw.entrySet();
  assertThat(fileOffsetStoreEntrySingleton.size()).isEqualTo(1);
  Map.Entry<byte[],byte[]> fileOffsetEntry=fileOffsetStoreEntrySingleton.iterator().next();
  ByteBuffer offsetJsonString=fileOffsetEntry.getValue() != null ? ByteBuffer.wrap(fileOffsetEntry.getValue()) : null;
  JsonDeserializer jsonDeserializer=new JsonDeserializer();
  JsonNode partitionToOffsetMap=jsonDeserializer.deserialize(TEST_TOPIC,offsetJsonString.array());
  Long actualOffset=partitionToOffsetMap.get(CUSTOM_SOURCE_OFFSET_PARTITION).asLong();
  assertThat(actualOffset).isEqualTo(EXPECTED_CUSTOM_OFFSET);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\EmbeddedEngineTest.java",336
1099,"'-tryline","@Test public void shouldExecuteSmt() throws Exception {
  appendLinesToSource(NUMBER_OF_LINES);
  final Properties props=new Properties();
  props.setProperty(name,debezium-engine);
  props.setProperty(connector.class,org.apache.kafka.connect.file.FileStreamSourceConnector);
  props.setProperty(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG,OFFSET_STORE_PATH.toAbsolutePath().toString());
  props.setProperty(offset.flush.interval.ms,0);
  props.setProperty(file,TEST_FILE_PATH.toAbsolutePath().toString());
  props.setProperty(topic,topicX);
  props.setProperty(transforms,filter, router);
  props.setProperty(transforms.router.type,org.apache.kafka.connect.transforms.RegexRouter);
  props.setProperty(transforms.router.regex,(.*));
  props.setProperty(transforms.router.replacement,trf$1);
  props.setProperty(transforms.filter.type,io.debezium.embedded.EmbeddedEngineTest$FilterTransform);
  CountDownLatch firstLatch=new CountDownLatch(1);
  CountDownLatch allLatch=new CountDownLatch(5);
  final DebeziumEngine<RecordChangeEvent<SourceRecord>> engine=DebeziumEngine.create(ChangeEventFormat.of(Connect.class)).using(props).notifying((records,committer) -> {
    assertThat(records.size()).isGreaterThanOrEqualTo(NUMBER_OF_LINES - 1);
    records.forEach(r -> assertThat(r.record().topic()).isEqualTo(trftopicX));
    Integer groupCount=records.size() / NUMBER_OF_LINES;
    for (    RecordChangeEvent<SourceRecord> r : records) {
      assertThat((String)r.record().value()).isNotEqualTo(Generated line number 1);
      committer.markProcessed(r);
    }
    committer.markBatchFinished();
    firstLatch.countDown();
    for (int i=0; i < groupCount; i++) {
      allLatch.countDown();
    }
  }
).using(this.getClass().getClassLoader()).build();
  ExecutorService exec=Executors.newFixedThreadPool(1);
  exec.execute(() -> {
    LoggingContext.forConnector(getClass().getSimpleName(),,engine);
    engine.run();
  }
);
  firstLatch.await(5000,TimeUnit.MILLISECONDS);
  assertThat(firstLatch.getCount()).isEqualTo(0);
  for (int i=0; i < 5; i++) {
    appendLinesToSource(NUMBER_OF_LINES);
    Thread.sleep(10);
  }
  allLatch.await(5000,TimeUnit.MILLISECONDS);
  assertThat(allLatch.getCount()).isEqualTo(0);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\EmbeddedEngineTest.java",413
1100,"'-tryline","@Test(expected=DebeziumException.class) public void invalidSmt() throws Exception {
  appendLinesToSource(NUMBER_OF_LINES);
  final Properties props=new Properties();
  props.setProperty(name,debezium-engine);
  props.setProperty(connector.class,org.apache.kafka.connect.file.FileStreamSourceConnector);
  props.setProperty(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG,OFFSET_STORE_PATH.toAbsolutePath().toString());
  props.setProperty(offset.flush.interval.ms,0);
  props.setProperty(file,TEST_FILE_PATH.toAbsolutePath().toString());
  props.setProperty(topic,topicX);
  props.setProperty(transforms,router);
  props.setProperty(transforms.router.type,org.apache.kafka.connect.transforms.Regex);
  props.setProperty(transforms.router.regex,(.*));
  props.setProperty(transforms.router.replacement,trf$1);
  DebeziumEngine.create(ChangeEventFormat.of(Connect.class)).using(props).notifying((records,committer) -> {
  }
).using(this.getClass().getClassLoader()).build();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\EmbeddedEngineTest.java",477
1101,"'-tryline","@Test @FixFor(DBZ-1807) public void shouldRunDebeziumEngineWithJson() throws Exception {
  appendLinesToSource(NUMBER_OF_LINES);
  final Properties props=new Properties();
  props.setProperty(name,debezium-engine);
  props.setProperty(connector.class,org.apache.kafka.connect.file.FileStreamSourceConnector);
  props.setProperty(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG,OFFSET_STORE_PATH.toAbsolutePath().toString());
  props.setProperty(offset.flush.interval.ms,0);
  props.setProperty(file,TEST_FILE_PATH.toAbsolutePath().toString());
  props.setProperty(topic,topicX);
  props.setProperty(converter.schemas.enable,false);
  CountDownLatch firstLatch=new CountDownLatch(1);
  CountDownLatch allLatch=new CountDownLatch(6);
  final DebeziumEngine<ChangeEvent<String,String>> engine=DebeziumEngine.create(Json.class).using(props).notifying((records,committer) -> {
    assertThat(records.size()).isGreaterThanOrEqualTo(NUMBER_OF_LINES);
    Integer groupCount=records.size() / NUMBER_OF_LINES;
    for (    ChangeEvent<String,String> r : records) {
      Assertions.assertThat(r.key()).isNull();
      Assertions.assertThat(r.value()).startsWith(\Generated line number );
      committer.markProcessed(r);
    }
    committer.markBatchFinished();
    firstLatch.countDown();
    for (int i=0; i < groupCount; i++) {
      allLatch.countDown();
    }
  }
).using(this.getClass().getClassLoader()).build();
  ExecutorService exec=Executors.newFixedThreadPool(1);
  exec.execute(() -> {
    LoggingContext.forConnector(getClass().getSimpleName(),,engine);
    engine.run();
  }
);
  firstLatch.await(5000,TimeUnit.MILLISECONDS);
  assertThat(firstLatch.getCount()).isEqualTo(0);
  for (int i=0; i < 5; i++) {
    appendLinesToSource(NUMBER_OF_LINES);
    Thread.sleep(10);
  }
  allLatch.await(5000,TimeUnit.MILLISECONDS);
  assertThat(allLatch.getCount()).isEqualTo(0);
  stopConnector();
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\EmbeddedEngineTest.java",503
1102,"'-tryline","@Test public void testOutboxEntityMetamodelExists() throws Exception {
  final MetamodelImplementor metadata=entityManager.unwrap(SessionImplementor.class).getFactory().getMetamodel();
  final EntityPersister persister=metadata.entityPersister(OutboxConstants.OUTBOX_ENTITY_FULLNAME);
  assertNotNull(persister);
  assertEquals(UUID.class,persister.getIdentifierType().getReturnedClass());
  assertEquals(String.class,persister.getPropertyType(aggregateType).getReturnedClass());
  assertEquals(Long.class,persister.getPropertyType(aggregateId).getReturnedClass());
  assertEquals(String.class,persister.getPropertyType(type).getReturnedClass());
  assertEquals(Instant.class,persister.getPropertyType(timestamp).getReturnedClass());
  assertEquals(String.class,persister.getPropertyType(payload).getReturnedClass());
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-quarkus-outbox\integration-tests\src\test\java\io\debezium\outbox\quarkus\it\OutboxTest.java",46
1103,"'-tryline","void connectorCompleted(@Observes ConnectorCompletedEvent event) throws Exception {
  if (!event.isSuccess()) {
    throw (Exception)event.getError().get();
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-server\debezium-server-core\src\test\java\io\debezium\server\DebeziumServerIT.java",48
1104,"'-tryline","@Test public void testPostgres() throws Exception {
  Testing.Print.enable();
  final TestConsumer testConsumer=(TestConsumer)server.getConsumer();
  Awaitility.await().atMost(Duration.ofSeconds(TestConfigSource.waitForSeconds())).until(() -> (testConsumer.getValues().size() >= MESSAGE_COUNT));
  Assertions.assertThat(testConsumer.getValues().size()).isEqualTo(MESSAGE_COUNT);
  Assertions.assertThat(((String)testConsumer.getValues().get(MESSAGE_COUNT - 1))).contains(\after\:{\id\:1004,\first_name\:\Anne\,\last_name\:\Kretchmar\,\email\:\annek@noanswer.org\});
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-server\debezium-server-core\src\test\java\io\debezium\server\DebeziumServerIT.java",54
1105,"'-tryline","@Test public void testJson() throws Exception {
  final TestConsumer testConsumer=(TestConsumer)server.getConsumer();
  Awaitility.await().atMost(Duration.ofSeconds(TestConfigSource.waitForSeconds())).until(() -> (testConsumer.getValues().size() >= MESSAGE_COUNT));
  Assertions.assertThat(testConsumer.getValues().size()).isEqualTo(MESSAGE_COUNT);
  Assertions.assertThat(testConsumer.getValues().get(MESSAGE_COUNT - 1)).isEqualTo({\line\:\ + MESSAGE_COUNT + \});
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-server\debezium-server-core\src\test\java\io\debezium\server\DebeziumServerTest.java",50
1106,"'-tryline","void connectorCompleted(@Observes ConnectorCompletedEvent event) throws Exception {
  if (!event.isSuccess()) {
    throw (Exception)event.getError().get();
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-server\debezium-server-eventhubs\src\test\java\io\debezium\server\eventhubs\EventHubsIT.java",81
1107,"'-tryline","@Test public void testEventHubs() throws Exception {
  Testing.Print.enable();
  String finalConnectionString=String.format(%s;EntityPath=%s,EventHubsTestConfigSource.getEventHubsConnectionString(),EventHubsTestConfigSource.getEventHubsName());
  consumer=new EventHubClientBuilder().connectionString(finalConnectionString).consumerGroup(CONSUMER_GROUP).buildConsumerClient();
  final List<PartitionEvent> expected=new ArrayList<>();
  Awaitility.await().atMost(Duration.ofSeconds(EventHubsTestConfigSource.waitForSeconds())).until(() -> {
    IterableStream<PartitionEvent> events=consumer.receiveFromPartition(0,MESSAGE_COUNT,EventPosition.latest());
    events.forEach(event -> expected.add(event));
    return expected.size() >= MESSAGE_COUNT;
  }
);
  String eventBody=null;
  String expectedID=null;
  final String idPart=\id\:100;
  for (int i=0; i < MESSAGE_COUNT; i++) {
    eventBody=expected.get(i).getData().getBodyAsString();
    expectedID=idPart + String.valueOf(i + 1);
    assertTrue(eventBody.contains(expectedID),expectedID +  not found in payload);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-server\debezium-server-eventhubs\src\test\java\io\debezium\server\eventhubs\EventHubsIT.java",87
1108,"'-tryline","void connectorCompleted(@Observes ConnectorCompletedEvent event) throws Exception {
  if (!event.isSuccess()) {
    throw (Exception)event.getError().get();
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-server\debezium-server-kinesis\src\test\java\io\debezium\server\kinesis\KinesisIT.java",66
1109,"'-tryline","@Test public void testKinesis() throws Exception {
  Testing.Print.enable();
  final GetShardIteratorResponse iteratorResponse=kinesis.getShardIterator(GetShardIteratorRequest.builder().streamName(STREAM_NAME).shardIteratorType(ShardIteratorType.TRIM_HORIZON).shardId(0).build());
  final List<Record> records=new ArrayList<>();
  Awaitility.await().atMost(Duration.ofSeconds(KinesisTestConfigSource.waitForSeconds())).until(() -> {
    final GetRecordsResponse recordsResponse=kinesis.getRecords(GetRecordsRequest.builder().shardIterator(iteratorResponse.shardIterator()).limit(MESSAGE_COUNT).build());
    records.addAll(recordsResponse.records());
    return records.size() >= MESSAGE_COUNT;
  }
);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-server\debezium-server-kinesis\src\test\java\io\debezium\server\kinesis\KinesisIT.java",72
1110,"'-tryline","void connectorCompleted(@Observes ConnectorCompletedEvent event) throws Exception {
  if (!event.isSuccess()) {
    throw (Exception)event.getError().get();
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-server\debezium-server-pubsub\src\test\java\io\debezium\server\pubsub\PubSubIT.java",105
1111,"'-tryline","@Test public void testPubSub() throws Exception {
  Awaitility.await().atMost(Duration.ofSeconds(TestConfigSource.waitForSeconds())).until(() -> messages.size() >= MESSAGE_COUNT);
  Assertions.assertThat(messages.size() >= MESSAGE_COUNT);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-server\debezium-server-pubsub\src\test\java\io\debezium\server\pubsub\PubSubIT.java",111
1112,"'-tryline","void connectorCompleted(@Observes ConnectorCompletedEvent event) throws Exception {
  if (!event.isSuccess()) {
    throw new RuntimeException(event.getError().get());
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-server\debezium-server-pulsar\src\test\java\io\debezium\server\pulsar\PulsarIT.java",60
1113,"'-tryline","@Test public void testPulsar() throws Exception {
  final Consumer<String> consumer=pulsarClient.newConsumer(Schema.STRING).topic(TOPIC_NAME).subscriptionName(test- + UUID.randomUUID()).subscribe();
  final List<Message<String>> records=new ArrayList<>();
  Awaitility.await().atMost(Duration.ofSeconds(PulsarTestConfigSource.waitForSeconds())).until(() -> {
    records.add(consumer.receive());
    return records.size() >= MESSAGE_COUNT;
  }
);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-server\debezium-server-pulsar\src\test\java\io\debezium\server\pulsar\PulsarIT.java",66
1114,"'-tryline","@Test public void shouldConvertToJson() throws Exception {
  try (Connection connection=getConnection(postgresContainer);Statement statement=connection.createStatement();KafkaConsumer<String,String> consumer=getConsumerString(kafkaContainer)){
    statement.execute(drop schema if exists todo cascade);
    statement.execute(create schema todo);
    statement.execute(create table todo.Todo (id int8 not null, title varchar(255), primary key (id)));
    statement.execute(alter table todo.Todo replica identity full);
    statement.execute(insert into todo.Todo values (1, 'Be Awesome'));
    statement.execute(insert into todo.Todo values (2, 'Learn Quarkus'));
    debeziumContainer.registerConnector(my-connector-json,getConfiguration(1,io.apicurio.registry.utils.converter.ExtJsonConverter));
    consumer.subscribe(Arrays.asList(dbserver1.todo.todo));
    List<ConsumerRecord<String,String>> changeEvents=drain(consumer,2);
    assertThat(JsonPath.<Integer>read(changeEvents.get(0).key(),$.payload.id)).isEqualTo(1);
    assertThat(JsonPath.<Integer>read(changeEvents.get(0).key(),$.schemaId)).isNotNull();
    assertThat(JsonPath.<String>read(changeEvents.get(0).value(),$.payload.op)).isEqualTo(r);
    assertThat(JsonPath.<String>read(changeEvents.get(0).value(),$.payload.after.title)).isEqualTo(Be Awesome);
    assertThat(JsonPath.<Integer>read(changeEvents.get(1).key(),$.payload.id)).isEqualTo(2);
    assertThat(JsonPath.<String>read(changeEvents.get(1).value(),$.payload.op)).isEqualTo(r);
    assertThat(JsonPath.<String>read(changeEvents.get(1).value(),$.payload.after.title)).isEqualTo(Learn Quarkus);
    statement.execute(update todo.Todo set title = 'Learn Java' where id = 2);
    changeEvents=drain(consumer,1);
    assertThat(JsonPath.<Integer>read(changeEvents.get(0).key(),$.payload.id)).isEqualTo(2);
    assertThat(JsonPath.<String>read(changeEvents.get(0).value(),$.payload.op)).isEqualTo(u);
    assertThat(JsonPath.<String>read(changeEvents.get(0).value(),$.payload.before.title)).isEqualTo(Learn Quarkus);
    assertThat(JsonPath.<String>read(changeEvents.get(0).value(),$.payload.after.title)).isEqualTo(Learn Java);
    consumer.unsubscribe();
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-testcontainers\src\test\java\io\debezium\testing\testcontainers\ApicurioRegistryTest.java",76
1115,"'-tryline","@Test public void shouldConvertToAvro() throws Exception {
  try (Connection connection=getConnection(postgresContainer);Statement statement=connection.createStatement();KafkaConsumer<byte[],byte[]> consumer=getConsumerBytes(kafkaContainer)){
    statement.execute(drop schema if exists todo cascade);
    statement.execute(create schema todo);
    statement.execute(create table todo.Todo (id int8 not null, title varchar(255), primary key (id)));
    statement.execute(alter table todo.Todo replica identity full);
    statement.execute(insert into todo.Todo values (1, 'Be Awesome'));
    debeziumContainer.registerConnector(my-connector-avro,getConfiguration(2,io.apicurio.registry.utils.converter.AvroConverter));
    consumer.subscribe(Arrays.asList(dbserver2.todo.todo));
    List<ConsumerRecord<byte[],byte[]>> changeEvents=drain(consumer,1);
    assertThat(changeEvents.get(0).key()[0]).isZero();
    assertThat(changeEvents.get(0).value()[0]).isZero();
    consumer.unsubscribe();
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-testcontainers\src\test\java\io\debezium\testing\testcontainers\ApicurioRegistryTest.java",117
1116,"'-tryline","@Test public void shouldConvertToCloudEventWithDataAsAvro() throws Exception {
  try (Connection connection=getConnection(postgresContainer);Statement statement=connection.createStatement();KafkaConsumer<String,String> consumer=getConsumerString(kafkaContainer)){
    statement.execute(drop schema if exists todo cascade);
    statement.execute(create schema todo);
    statement.execute(create table todo.Todo (id int8 not null, title varchar(255), primary key (id)));
    statement.execute(alter table todo.Todo replica identity full);
    statement.execute(insert into todo.Todo values (3, 'Be Awesome'));
    final String host=apicurioContainer.getContainerInfo().getConfig().getHostName();
    final int port=apicurioContainer.getExposedPorts().get(0);
    final String apicurioUrl=http:// + host + :+ port+ /api;
    String id=3;
    final ConnectorConfiguration config=ConnectorConfiguration.forJdbcContainer(postgresContainer).with(database.server.name,dbserver + id).with(slot.name,debezium_ + id).with(key.converter,org.apache.kafka.connect.json.JsonConverter).with(value.converter,io.debezium.converters.CloudEventsConverter).with(value.converter.data.serializer.type,avro).with(value.converter.avro.apicurio.registry.url,apicurioUrl).with(value.converter.avro.apicurio.registry.global-id,io.apicurio.registry.utils.serde.strategy.AutoRegisterIdStrategy);
    debeziumContainer.registerConnector(my-connector-cloudevents-avro,config);
    consumer.subscribe(Arrays.asList(dbserver3.todo.todo));
    List<ConsumerRecord<String,String>> changeEvents=drain(consumer,1);
    assertThat(JsonPath.<Integer>read(changeEvents.get(0).key(),$.payload.id)).isEqualTo(3);
    assertThat(JsonPath.<String>read(changeEvents.get(0).value(),$.iodebeziumop)).isEqualTo(r);
    assertThat(JsonPath.<String>read(changeEvents.get(0).value(),$.iodebeziumname)).isEqualTo(dbserver3);
    assertThat(JsonPath.<String>read(changeEvents.get(0).value(),$.datacontenttype)).isEqualTo(application/avro);
    assertThat(JsonPath.<String>read(changeEvents.get(0).value(),$.iodebeziumtable)).isEqualTo(todo);
    byte[] decodedBytes=Base64.getDecoder().decode(JsonPath.<String>read(changeEvents.get(0).value(),$.data));
    assertThat(decodedBytes[0]).isZero();
    consumer.unsubscribe();
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-testcontainers\src\test\java\io\debezium\testing\testcontainers\ApicurioRegistryTest.java",144
1117,"'-tryline","@Test public void canRegisterConnector() throws Exception {
  debeziumContainer.registerConnector(my-connector-1,getConfiguration(1));
  Awaitility.await().pollInterval(Duration.ofMillis(250)).atMost(Duration.ofSeconds(30)).untilAsserted(() -> {
    String status=executeHttpRequest(debeziumContainer.getConnectorStatusUri(my-connector-1));
    assertThat(JsonPath.<String>read(status,$.name)).isEqualTo(my-connector-1);
    assertThat(JsonPath.<String>read(status,$.connector.state)).isEqualTo(RUNNING);
    assertThat(JsonPath.<String>read(status,$.tasks[0].state)).isEqualTo(RUNNING);
  }
);
}
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-testcontainers\src\test\java\io\debezium\testing\testcontainers\DebeziumContainerTest.java",72
1118,"'-tryline","@Test public void shouldRegisterPostgreSQLConnector() throws Exception {
  try (Connection connection=getConnection(postgresContainer);Statement statement=connection.createStatement();KafkaConsumer<String,String> consumer=getConsumer(kafkaContainer)){
    statement.execute(create schema todo);
    statement.execute(create table todo.Todo (id int8 not null, title varchar(255), primary key (id)));
    statement.execute(alter table todo.Todo replica identity full);
    statement.execute(insert into todo.Todo values (1, 'Be Awesome'));
    statement.execute(insert into todo.Todo values (2, 'Learn Quarkus'));
    debeziumContainer.registerConnector(my-connector,getConfiguration(2));
    consumer.subscribe(Arrays.asList(dbserver2.todo.todo));
    List<ConsumerRecord<String,String>> changeEvents=drain(consumer,2);
    assertThat(JsonPath.<Integer>read(changeEvents.get(0).key(),$.id)).isEqualTo(1);
    assertThat(JsonPath.<String>read(changeEvents.get(0).value(),$.op)).isEqualTo(r);
    assertThat(JsonPath.<String>read(changeEvents.get(0).value(),$.after.title)).isEqualTo(Be Awesome);
    assertThat(JsonPath.<Integer>read(changeEvents.get(1).key(),$.id)).isEqualTo(2);
    assertThat(JsonPath.<String>read(changeEvents.get(1).value(),$.op)).isEqualTo(r);
    assertThat(JsonPath.<String>read(changeEvents.get(1).value(),$.after.title)).isEqualTo(Learn Quarkus);
    statement.execute(update todo.Todo set title = 'Learn Java' where id = 2);
    changeEvents=drain(consumer,1);
    assertThat(JsonPath.<Integer>read(changeEvents.get(0).key(),$.id)).isEqualTo(2);
    assertThat(JsonPath.<String>read(changeEvents.get(0).value(),$.op)).isEqualTo(u);
    assertThat(JsonPath.<String>read(changeEvents.get(0).value(),$.before.title)).isEqualTo(Learn Quarkus);
    assertThat(JsonPath.<String>read(changeEvents.get(0).value(),$.after.title)).isEqualTo(Learn Java);
    consumer.unsubscribe();
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-testcontainers\src\test\java\io\debezium\testing\testcontainers\DebeziumContainerTest.java",90
1119,"'-tryline","private void parseUpdate(Tables tables,TableId tableId,Update st) throws JSQLParserException {
  int tableCount=st.getTables().size();
  if (tableCount > 1 || tableCount == 0) {
    throw new JSQLParserException(DML includes  + tableCount +  tables);
  }
  net.sf.jsqlparser.schema.Table parseTable=st.getTables().get(0);
  initColumns(tables,tableId,ParserUtils.stripeQuotes(parseTable.getName()));
  List<net.sf.jsqlparser.schema.Column> columns=st.getColumns();
  Alias alias=parseTable.getAlias();
  aliasName=alias == null ?  : alias.getName().trim();
  List<Expression> expressions=st.getExpressions();
  setNewValues(expressions,columns);
  Expression where=st.getWhere();
  if (where != null) {
    parseWhereClause(where);
    ParserUtils.cloneOldToNewColumnValues(newColumnValues,oldColumnValues,table);
  }
 else {
    oldColumnValues.clear();
  }
}
","net.sf.jsqlparser.JSQLParserException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\logminer\parser\SimpleDmlParser.java",155
1120,"'-tryline","private ObjectName getSnapshotMetricsObjectName() throws MalformedObjectNameException {
  return getSnapshotMetricsObjectName(mysql,SERVER_NAME);
}
","javax.management.MalformedObjectNameException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlMetricsIT.java",283
1121,"'-tryline","private ObjectName getStreamingMetricsObjectName() throws MalformedObjectNameException {
  return getStreamingMetricsObjectName(mysql,SERVER_NAME,getStreamingNamespace());
}
","javax.management.MalformedObjectNameException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlMetricsIT.java",287
1122,"'-tryline","private ObjectName getSnapshotMetricsObjectName() throws MalformedObjectNameException {
  return getSnapshotMetricsObjectName(postgres,TestHelper.TEST_SERVER);
}
","javax.management.MalformedObjectNameException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresMetricsIT.java",321
1123,"'-tryline","private ObjectName getStreamingMetricsObjectName() throws MalformedObjectNameException {
  return getStreamingMetricsObjectName(postgres,TestHelper.TEST_SERVER);
}
","javax.management.MalformedObjectNameException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresMetricsIT.java",325
1124,"'-tryline","private static ObjectName getObjectName(String context,String serverName) throws MalformedObjectNameException {
  return new ObjectName(debezium.sql_server:type=connector-metrics,context= + context + ,server=+ serverName);
}
","javax.management.MalformedObjectNameException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\util\TestHelper.java",396
1125,"'-tryline","public static ObjectName getSnapshotMetricsObjectName(String connector,String server) throws MalformedObjectNameException {
  return new ObjectName(debezium. + connector + :type=connector-metrics,context=snapshot,server=+ server);
}
","javax.management.MalformedObjectNameException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\AbstractConnectorTest.java",1089
1126,"'-tryline","public static ObjectName getStreamingMetricsObjectName(String connector,String server) throws MalformedObjectNameException {
  return getStreamingMetricsObjectName(connector,server,getStreamingNamespace());
}
","javax.management.MalformedObjectNameException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\AbstractConnectorTest.java",1093
1127,"'-tryline","public static ObjectName getStreamingMetricsObjectName(String connector,String server,String context) throws MalformedObjectNameException {
  return new ObjectName(debezium. + connector + :type=connector-metrics,context=+ context+ ,server=+ server);
}
","javax.management.MalformedObjectNameException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\AbstractConnectorTest.java",1097
1128,"'-tryline","private ObjectName getName() throws MalformedObjectNameException {
  return new ObjectName(debezium.oracle:type=connector-metrics,context=streaming,server= + SERVER_NAME);
}
","javax.management.MalformedObjectNameException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-microbenchmark-oracle\src\main\java\io\debezium\performance\connector\oracle\EndToEndPerf.java",294
1129,"'-tryline","@Override public void processLCR(LCR lcr) throws StreamsException {
  LOGGER.trace(Received LCR {},lcr);
  setWatermark();
  final LcrPosition lcrPosition=new LcrPosition(lcr.getPosition());
  if (lcrPosition.compareTo(offsetContext.getLcrPosition()) <= 0) {
    if (LOGGER.isDebugEnabled()) {
      final LcrPosition recPosition=offsetContext.getLcrPosition();
      LOGGER.debug(Ignoring change event with already processed SCN/LCR Position {}/{}, last recorded {}/{},lcrPosition,lcrPosition.getScn(),recPosition != null ? recPosition : none,recPosition != null ? recPosition.getScn() : none);
    }
    return;
  }
  offsetContext.setScn(lcrPosition.getScn());
  offsetContext.setLcrPosition(lcrPosition);
  offsetContext.setTransactionId(lcr.getTransactionId());
  offsetContext.setSourceTime(lcr.getSourceTime().timestampValue().toInstant());
  offsetContext.setTableId(new TableId(lcr.getSourceDatabaseName(),lcr.getObjectOwner(),lcr.getObjectName()));
  try {
    if (lcr instanceof RowLCR) {
      dispatchDataChangeEvent((RowLCR)lcr);
    }
 else     if (lcr instanceof DDLLCR) {
      dispatchSchemaChangeEvent((DDLLCR)lcr);
    }
  }
 catch (  InterruptedException e) {
    Thread.interrupted();
    LOGGER.info(Received signal to stop, event loop will halt);
  }
catch (  Exception e) {
    errorHandler.setProducerThrowable(e);
  }
}
","io.debezium.connector.oracle.xstream.StreamsException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\xstream\LcrEventHandler.java",56
1130,"'-tryline","@Override public void processChunk(ChunkColumnValue arg0) throws StreamsException {
  throw new UnsupportedOperationException(Not yet implemented);
}
","io.debezium.connector.oracle.xstream.StreamsException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\xstream\LcrEventHandler.java",176
1131,"'-tryline","@Override public LCR createLCR() throws StreamsException {
  throw new UnsupportedOperationException(Should never be called);
}
","io.debezium.connector.oracle.xstream.StreamsException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\xstream\LcrEventHandler.java",181
1132,"'-tryline","@Override public ChunkColumnValue createChunk() throws StreamsException {
  throw new UnsupportedOperationException(Should never be called);
}
","io.debezium.connector.oracle.xstream.StreamsException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\xstream\LcrEventHandler.java",186
1133,"'-tryline","protected Object readField(ResultSet rs,int fieldNo,Column actualColumn,Table actualTable) throws SQLException {
  if (actualColumn.jdbcType() == Types.TIME) {
    return readTimeField(rs,fieldNo);
  }
 else   if (actualColumn.jdbcType() == Types.DATE) {
    return readDateField(rs,fieldNo,actualColumn,actualTable);
  }
 else   if (actualColumn.jdbcType() == Types.TIMESTAMP) {
    return readTimestampField(rs,fieldNo,actualColumn,actualTable);
  }
 else   if (actualColumn.jdbcType() == Types.TINYINT || actualColumn.jdbcType() == Types.SMALLINT) {
    return rs.getObject(fieldNo) == null ? null : rs.getInt(fieldNo);
  }
 else   if (CHAR.equals(actualColumn.typeName()) || VARCHAR.equals(actualColumn.typeName()) || TEXT.equals(actualColumn.typeName())) {
    return rs.getBytes(fieldNo);
  }
 else {
    return rs.getObject(fieldNo);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\SnapshotReader.java",146
1134,"'-tryline","/** 
 * As MySQL connector/J implementation is broken for MySQL type TIME we have to use a binary-ish workaround
 * @see https://issues.jboss.org/browse/DBZ-342
 */
private Object readTimeField(ResultSet rs,int fieldNo) throws SQLException {
  Blob b=rs.getBlob(fieldNo);
  if (b == null) {
    return null;
  }
  try {
    return MySqlValueConverters.stringToDuration(new String(b.getBytes(1,(int)(b.length())),UTF-8));
  }
 catch (  UnsupportedEncodingException e) {
    logger.error(Could not read MySQL TIME value as UTF-8);
    throw new RuntimeException(e);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\SnapshotReader.java",180
1135,"'-tryline","/** 
 * In non-string mode the date field can contain zero in any of the date part which we need to handle as all-zero
 */
private Object readDateField(ResultSet rs,int fieldNo,Column column,Table table) throws SQLException {
  Blob b=rs.getBlob(fieldNo);
  if (b == null) {
    return null;
  }
  try {
    return MySqlValueConverters.stringToLocalDate(new String(b.getBytes(1,(int)(b.length())),UTF-8),column,table);
  }
 catch (  UnsupportedEncodingException e) {
    logger.error(Could not read MySQL TIME value as UTF-8);
    throw new RuntimeException(e);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\SnapshotReader.java",200
1136,"'-tryline","/** 
 * In non-string mode the time field can contain zero in any of the date part which we need to handle as all-zero
 */
private Object readTimestampField(ResultSet rs,int fieldNo,Column column,Table table) throws SQLException {
  Blob b=rs.getBlob(fieldNo);
  if (b == null) {
    return null;
  }
  try {
    return MySqlValueConverters.containsZeroValuesInDatePart((new String(b.getBytes(1,(int)(b.length())),UTF-8)),column,table) ? null : rs.getTimestamp(fieldNo,Calendar.getInstance());
  }
 catch (  UnsupportedEncodingException e) {
    logger.error(Could not read MySQL TIME value as UTF-8);
    throw new RuntimeException(e);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\SnapshotReader.java",219
1137,"'-tryline","private void readTableSchema(final AtomicReference<String> sql,final JdbcConnection mysql,final MySqlSchema schema,final SourceInfo source,String dbName,TableId tableId) throws SQLException {
  sql.set(SHOW CREATE TABLE  + quote(tableId));
  mysql.query(sql.get(),rs -> {
    if (rs.next()) {
      schema.applyDdl(source,dbName,rs.getString(2),this::enqueueSchemaChanges);
    }
  }
);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\SnapshotReader.java",876
1138,"'-tryline","protected void readBinlogPosition(int step,SourceInfo source,JdbcConnection mysql,AtomicReference<String> sql) throws SQLException {
  if (context.isSchemaOnlyRecoverySnapshot()) {
    if (Strings.isNullOrEmpty(source.binlogFilename())) {
      throw new IllegalStateException(Could not find existing binlog information while attempting schema only recovery snapshot);
    }
    source.startSnapshot();
  }
 else {
    logger.info(Step {}: read binlog position of MySQL primary server,step);
    String showMasterStmt=SHOW MASTER STATUS;
    sql.set(showMasterStmt);
    mysql.query(sql.get(),rs -> {
      if (rs.next()) {
        String binlogFilename=rs.getString(1);
        long binlogPosition=rs.getLong(2);
        source.setBinlogStartPoint(binlogFilename,binlogPosition);
        if (rs.getMetaData().getColumnCount() > 4) {
          String gtidSet=rs.getString(5);
          source.setCompletedGtidSet(gtidSet);
          logger.info(\t using binlog '{}' at position '{}' and gtid '{}',binlogFilename,binlogPosition,gtidSet);
        }
 else {
          logger.info(\t using binlog '{}' at position '{}',binlogFilename,binlogPosition);
        }
        source.startSnapshot();
      }
 else {
        throw new IllegalStateException(Cannot read the binlog filename and position via ' + showMasterStmt + '. Make sure your server is correctly configured);
      }
    }
);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\SnapshotReader.java",899
1139,"'-tryline","/** 
 * Create a JDBC statement that can be used for large result sets. <p> By default, the MySQL Connector/J driver retrieves all rows for ResultSets and stores them in memory. In most cases this is the most efficient way to operate and, due to the design of the MySQL network protocol, is easier to implement. However, when ResultSets that have a large number of rows or large values, the driver may not be able to allocate heap space in the JVM and may result in an  {@link OutOfMemoryError}. See <a href=https://issues.jboss.org/browse/DBZ-94>DBZ-94</a> for details. <p> This method handles such cases using the <a href=https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-reference-implementation-notes.html>recommended technique</a> for MySQL by creating the JDBC  {@link Statement} with {@link ResultSet#TYPE_FORWARD_ONLY forward-only} cursorand  {@link ResultSet#CONCUR_READ_ONLY read-only concurrency} flags, and with a {@link Integer#MIN_VALUE minimum value}{@link Statement#setFetchSize(int) fetch size hint}.
 * @param connection the JDBC connection; may not be null
 * @return the statement; never null
 * @throws SQLException if there is a problem creating the statement
 */
private Statement createStatementWithLargeResultSet(Connection connection) throws SQLException {
  int fetchSize=context.getConnectorConfig().getSnapshotFetchSize();
  Statement stmt=connection.createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
  stmt.setFetchSize(fetchSize);
  return stmt;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\SnapshotReader.java",963
1140,"'-tryline","private Statement createStatement(Connection connection) throws SQLException {
  return connection.createStatement();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\SnapshotReader.java",989
1141,"'-tryline","@Override public synchronized Connection connection(boolean executeOnConnect) throws SQLException {
  if (!isConnected() && connectionConfig.sslModeEnabled()) {
    originalSystemProperties.clear();
    setSystemProperty(javax.net.ssl.keyStore,MySqlConnectorConfig.SSL_KEYSTORE,true);
    setSystemProperty(javax.net.ssl.keyStorePassword,MySqlConnectorConfig.SSL_KEYSTORE_PASSWORD,false);
    setSystemProperty(javax.net.ssl.trustStore,MySqlConnectorConfig.SSL_TRUSTSTORE,true);
    setSystemProperty(javax.net.ssl.trustStorePassword,MySqlConnectorConfig.SSL_TRUSTSTORE_PASSWORD,false);
  }
  return super.connection(executeOnConnect);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlConnection.java",69
1142,"'-tryline","@Override public void close() throws SQLException {
  try {
    super.close();
  }
  finally {
    originalSystemProperties.forEach((name,value) -> {
      if (value != null) {
        System.setProperty(name,value);
      }
 else {
        System.clearProperty(name);
      }
    }
);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlConnection.java",82
1143,"'-tryline","@Override protected void lockTablesForSchemaSnapshot(ChangeEventSourceContext sourceContext,RelationalSnapshotContext snapshotContext) throws SQLException, InterruptedException {
  connection.connection().setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);
  connection.executeWithoutCommitting(SET SESSION lock_wait_timeout= + connectorConfig.snapshotLockTimeout().getSeconds());
  try {
    connection.executeWithoutCommitting(SET SESSION innodb_lock_wait_timeout= + connectorConfig.snapshotLockTimeout().getSeconds());
  }
 catch (  SQLException e) {
    LOGGER.warn(Unable to set innodb_lock_wait_timeout,e);
  }
  if (connectorConfig.getSnapshotLockingMode().usesLocking() && connectorConfig.useGlobalLock()) {
    try {
      globalLock();
      metrics.globalLockAcquired();
    }
 catch (    SQLException e) {
      LOGGER.info(Unable to flush and acquire global read lock, will use table read locks after reading table names);
      assert !isGloballyLocked();
    }
    connection.executeWithoutCommitting(SET TRANSACTION ISOLATION LEVEL REPEATABLE READ);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlSnapshotChangeEventSource.java",164
1144,"'-tryline","@Override protected void releaseSchemaSnapshotLocks(RelationalSnapshotContext snapshotContext) throws SQLException {
  if (connectorConfig.getSnapshotLockingMode().usesMinimalLocking()) {
    if (isGloballyLocked()) {
      globalUnlock();
    }
    if (isTablesLocked()) {
      LOGGER.warn(Tables were locked explicitly, but to get a consistent snapshot we cannot release the locks until we've read all tables.);
    }
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlSnapshotChangeEventSource.java",207
1145,"'-tryline","void createSchemaEventsForTables(RelationalSnapshotContext snapshotContext,final Collection<TableId> tablesToRead,final boolean firstPhase) throws SQLException {
  for (  TableId tableId : tablesToRead) {
    if (firstPhase && delayedSchemaSnapshotTables.contains(tableId)) {
      continue;
    }
    connection.query(SHOW CREATE TABLE  + quote(tableId),rs -> {
      if (rs.next()) {
        addSchemaEvent(snapshotContext,tableId.catalog(),rs.getString(2));
      }
    }
);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlSnapshotChangeEventSource.java",359
1146,"'-tryline","@Override protected SchemaChangeEvent getCreateTableEvent(RelationalSnapshotContext snapshotContext,Table table) throws SQLException {
  return new SchemaChangeEvent(snapshotContext.offset.getPartition(),snapshotContext.offset.getOffset(),snapshotContext.offset.getSourceInfo(),snapshotContext.catalogName,table.id().schema(),null,table,SchemaChangeEventType.CREATE,true);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlSnapshotChangeEventSource.java",376
1147,"'-tryline","@Override protected Object getColumnValue(ResultSet rs,int columnIndex,Column column,Table table) throws SQLException {
  if (column.jdbcType() == Types.TIME) {
    return readTimeField(rs,columnIndex);
  }
 else   if (column.jdbcType() == Types.DATE) {
    return readDateField(rs,columnIndex,column,table);
  }
 else   if (column.jdbcType() == Types.TIMESTAMP) {
    return readTimestampField(rs,columnIndex,column,table);
  }
 else   if (column.jdbcType() == Types.TINYINT || column.jdbcType() == Types.SMALLINT) {
    return rs.getObject(columnIndex) == null ? null : rs.getInt(columnIndex);
  }
 else   if (CHAR.equals(column.typeName()) || VARCHAR.equals(column.typeName()) || TEXT.equals(column.typeName())) {
    return rs.getBytes(columnIndex);
  }
 else {
    return rs.getObject(columnIndex);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlSnapshotChangeEventSource.java",405
1148,"'-tryline","/** 
 * As MySQL connector/J implementation is broken for MySQL type TIME we have to use a binary-ish workaround
 * @see https://issues.jboss.org/browse/DBZ-342
 */
private Object readTimeField(ResultSet rs,int fieldNo) throws SQLException {
  Blob b=rs.getBlob(fieldNo);
  if (b == null) {
    return null;
  }
  try {
    return MySqlValueConverters.stringToDuration(new String(b.getBytes(1,(int)(b.length())),UTF-8));
  }
 catch (  UnsupportedEncodingException e) {
    LOGGER.error(Could not read MySQL TIME value as UTF-8);
    throw new RuntimeException(e);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlSnapshotChangeEventSource.java",440
1149,"'-tryline","/** 
 * In non-string mode the date field can contain zero in any of the date part which we need to handle as all-zero
 */
private Object readDateField(ResultSet rs,int fieldNo,Column column,Table table) throws SQLException {
  Blob b=rs.getBlob(fieldNo);
  if (b == null) {
    return null;
  }
  try {
    return MySqlValueConverters.stringToLocalDate(new String(b.getBytes(1,(int)(b.length())),UTF-8),column,table);
  }
 catch (  UnsupportedEncodingException e) {
    LOGGER.error(Could not read MySQL TIME value as UTF-8);
    throw new RuntimeException(e);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlSnapshotChangeEventSource.java",460
1150,"'-tryline","/** 
 * In non-string mode the time field can contain zero in any of the date part which we need to handle as all-zero
 */
private Object readTimestampField(ResultSet rs,int fieldNo,Column column,Table table) throws SQLException {
  Blob b=rs.getBlob(fieldNo);
  if (b == null) {
    return null;
  }
  try {
    return MySqlValueConverters.containsZeroValuesInDatePart((new String(b.getBytes(1,(int)(b.length())),UTF-8)),column,table) ? null : rs.getTimestamp(fieldNo,Calendar.getInstance());
  }
 catch (  UnsupportedEncodingException e) {
    LOGGER.error(Could not read MySQL TIME value as UTF-8);
    throw new RuntimeException(e);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlSnapshotChangeEventSource.java",479
1151,"'-tryline","private void globalLock() throws SQLException {
  LOGGER.info(Flush and obtain global read lock to prevent writes to database);
  connection.executeWithoutCommitting(connectorConfig.getSnapshotLockingMode().getLockStatement());
  globalLockAcquiredAt=clock.currentTimeInMillis();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlSnapshotChangeEventSource.java",507
1152,"'-tryline","private void globalUnlock() throws SQLException {
  LOGGER.info(Releasing global read lock to enable MySQL writes);
  connection.executeWithoutCommitting(UNLOCK TABLES);
  long lockReleased=clock.currentTimeInMillis();
  metrics.globalLockReleased();
  LOGGER.info(Writes to MySQL tables prevented for a total of {},Strings.duration(lockReleased - globalLockAcquiredAt));
  globalLockAcquiredAt=-1;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlSnapshotChangeEventSource.java",513
1153,"'-tryline","private void tableLock(RelationalSnapshotContext snapshotContext) throws SQLException {
  if (!connection.userHasPrivileges(LOCK TABLES)) {
    throw new DebeziumException(User does not have the 'LOCK TABLES' privilege required to obtain a  + consistent snapshot by preventing concurrent writes to tables.);
  }
  LOGGER.info(Flush and obtain read lock for {} tables (preventing writes),snapshotContext.capturedTables);
  if (!snapshotContext.capturedTables.isEmpty()) {
    final String tableList=snapshotContext.capturedTables.stream().map(tid -> quote(tid)).collect(Collectors.joining(,));
    connection.executeWithoutCommitting(FLUSH TABLES  + tableList +  WITH READ LOCK);
  }
  tableLockAcquiredAt=clock.currentTimeInMillis();
  metrics.globalLockAcquired();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlSnapshotChangeEventSource.java",522
1154,"'-tryline","private void tableUnlock() throws SQLException {
  LOGGER.info(Releasing table read lock to enable MySQL writes);
  connection.executeWithoutCommitting(UNLOCK TABLES);
  long lockReleased=clock.currentTimeInMillis();
  metrics.globalLockReleased();
  LOGGER.info(Writes to MySQL tables prevented for a total of {},Strings.duration(lockReleased - tableLockAcquiredAt));
  tableLockAcquiredAt=-1;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlSnapshotChangeEventSource.java",546
1155,"'-tryline","@Override protected Statement readTableStatement(OptionalLong rowCount) throws SQLException {
  final long largeTableRowCount=connectorConfig.rowCountForLargeTable();
  if (!rowCount.isPresent() || largeTableRowCount == 0 || rowCount.getAsLong() <= largeTableRowCount) {
    return super.readTableStatement(rowCount);
  }
  return createStatementWithLargeResultSet();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlSnapshotChangeEventSource.java",568
1156,"'-tryline","/** 
 * Create a JDBC statement that can be used for large result sets. <p> By default, the MySQL Connector/J driver retrieves all rows for ResultSets and stores them in memory. In most cases this is the most efficient way to operate and, due to the design of the MySQL network protocol, is easier to implement. However, when ResultSets that have a large number of rows or large values, the driver may not be able to allocate heap space in the JVM and may result in an  {@link OutOfMemoryError}. See <a href=https://issues.jboss.org/browse/DBZ-94>DBZ-94</a> for details. <p> This method handles such cases using the <a href=https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-reference-implementation-notes.html>recommended technique</a> for MySQL by creating the JDBC  {@link Statement} with {@link ResultSet#TYPE_FORWARD_ONLY forward-only} cursorand  {@link ResultSet#CONCUR_READ_ONLY read-only concurrency} flags, and with a {@link Integer#MIN_VALUE minimum value}{@link Statement#setFetchSize(int) fetch size hint}.
 * @return the statement; never null
 * @throws SQLException if there is a problem creating the statement
 */
private Statement createStatementWithLargeResultSet() throws SQLException {
  int fetchSize=connectorConfig.getSnapshotFetchSize();
  Statement stmt=connection.connection().createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
  stmt.setFetchSize(fetchSize);
  return stmt;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlSnapshotChangeEventSource.java",577
1157,"'-tryline","public MySqlSnapshotContext() throws SQLException {
  super();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlSnapshotChangeEventSource.java",607
1158,"'-tryline","@Test public void shouldCorrectlyManageRollback() throws SQLException, InterruptedException {
  String masterPort=System.getProperty(database.port,3306);
  String replicaPort=System.getProperty(database.replica.port,3306);
  boolean replicaIsMaster=masterPort.equals(replicaPort);
  if (!replicaIsMaster) {
    Thread.sleep(5000L);
  }
  config=Configuration.create().with(MySqlConnectorConfig.HOSTNAME,System.getProperty(database.replica.hostname,localhost)).with(MySqlConnectorConfig.PORT,System.getProperty(database.replica.port,3306)).with(MySqlConnectorConfig.USER,snapper).with(MySqlConnectorConfig.PASSWORD,snapperpass).with(MySqlConnectorConfig.SERVER_ID,18765).with(MySqlConnectorConfig.SERVER_NAME,DATABASE.getServerName()).with(MySqlConnectorConfig.SSL_MODE,SecureConnectionMode.DISABLED).with(MySqlConnectorConfig.POLL_INTERVAL_MS,10).with(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,DATABASE.getDatabaseName()).with(MySqlConnectorConfig.DATABASE_HISTORY,FileDatabaseHistory.class).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(MySqlConnectorConfig.BUFFER_SIZE_FOR_BINLOG_READER,10_000).with(FileDatabaseHistory.FILE_PATH,DB_HISTORY_PATH).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(5 + 9 + 9+ 4+ 11+ 1);
  if (replicaIsMaster) {
    try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
      try (JdbcConnection connection=db.connect()){
        final Connection jdbc=connection.connection();
        connection.setAutoCommit(false);
        final Statement statement=jdbc.createStatement();
        statement.executeUpdate(CREATE TEMPORARY TABLE tmp_ids (a int));
        statement.executeUpdate(INSERT INTO tmp_ids VALUES(5));
        jdbc.commit();
        statement.executeUpdate(DROP TEMPORARY TABLE tmp_ids);
        statement.executeUpdate(UPDATE products SET weight=100.12 WHERE id=109);
        jdbc.rollback();
        connection.query(SELECT * FROM products,rs -> {
          if (Testing.Print.isEnabled()) {
            connection.print(rs);
          }
        }
);
        connection.setAutoCommit(true);
      }
     }
     Thread.sleep(5000);
    assertNoRecordsToConsume();
    assertEngineIsRunning();
    Testing.print(*** Done with rollback TX);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\BinlogReaderBufferIT.java",65
1159,"'-tryline","@Test public void shouldProcessSavepoint() throws SQLException, InterruptedException {
  String masterPort=System.getProperty(database.port,3306);
  String replicaPort=System.getProperty(database.replica.port,3306);
  boolean replicaIsMaster=masterPort.equals(replicaPort);
  if (!replicaIsMaster) {
    Thread.sleep(5000L);
  }
  config=Configuration.create().with(MySqlConnectorConfig.HOSTNAME,System.getProperty(database.replica.hostname,localhost)).with(MySqlConnectorConfig.PORT,System.getProperty(database.replica.port,3306)).with(MySqlConnectorConfig.USER,snapper).with(MySqlConnectorConfig.PASSWORD,snapperpass).with(MySqlConnectorConfig.SERVER_ID,18765).with(MySqlConnectorConfig.SERVER_NAME,DATABASE.getServerName()).with(MySqlConnectorConfig.SSL_MODE,SecureConnectionMode.DISABLED).with(MySqlConnectorConfig.POLL_INTERVAL_MS,10).with(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,DATABASE.getDatabaseName()).with(MySqlConnectorConfig.DATABASE_HISTORY,FileDatabaseHistory.class).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(FileDatabaseHistory.FILE_PATH,DB_HISTORY_PATH).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(5 + 9 + 9+ 4+ 11+ 1);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      final Connection jdbc=connection.connection();
      connection.setAutoCommit(false);
      final Statement statement=jdbc.createStatement();
      statement.executeUpdate(INSERT INTO customers VALUES(default, 'first', 'first', 'first'));
      jdbc.setSavepoint();
      statement.executeUpdate(INSERT INTO customers VALUES(default, 'second', 'second', 'second'));
      jdbc.commit();
      connection.query(SELECT * FROM customers,rs -> {
        if (Testing.Print.isEnabled()) {
          connection.print(rs);
        }
      }
);
      connection.setAutoCommit(true);
    }
   }
   records=consumeRecordsByTopic(2);
  assertThat(records.topics().size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(customers))).hasSize(2);
  assertThat(records.allRecordsInOrder()).hasSize(2);
  Testing.print(*** Done with savepoint TX);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\BinlogReaderBufferIT.java",134
1160,"'-tryline","@Test public void shouldProcessLargeTransaction() throws SQLException, InterruptedException {
  String masterPort=System.getProperty(database.port,3306);
  String replicaPort=System.getProperty(database.replica.port,3306);
  boolean replicaIsMaster=masterPort.equals(replicaPort);
  if (!replicaIsMaster) {
    Thread.sleep(5000L);
  }
  config=Configuration.create().with(MySqlConnectorConfig.HOSTNAME,System.getProperty(database.replica.hostname,localhost)).with(MySqlConnectorConfig.PORT,System.getProperty(database.replica.port,3306)).with(MySqlConnectorConfig.USER,snapper).with(MySqlConnectorConfig.PASSWORD,snapperpass).with(MySqlConnectorConfig.SERVER_ID,18765).with(MySqlConnectorConfig.SERVER_NAME,DATABASE.getServerName()).with(MySqlConnectorConfig.SSL_MODE,SecureConnectionMode.DISABLED).with(MySqlConnectorConfig.POLL_INTERVAL_MS,10).with(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,DATABASE.getDatabaseName()).with(MySqlConnectorConfig.DATABASE_HISTORY,FileDatabaseHistory.class).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(MySqlConnectorConfig.BUFFER_SIZE_FOR_BINLOG_READER,9).with(FileDatabaseHistory.FILE_PATH,DB_HISTORY_PATH).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(5 + 9 + 9+ 4+ 11+ 1);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    final int numRecords=40;
    try (JdbcConnection connection=db.connect()){
      final Connection jdbc=connection.connection();
      connection.setAutoCommit(false);
      final Statement statement=jdbc.createStatement();
      for (int i=0; i < numRecords; i++) {
        statement.executeUpdate(String.format(INSERT INTO customers\n + VALUES (default,\%s\,\%s\,\%s\),i,i,i));
      }
      jdbc.commit();
      connection.query(SELECT * FROM customers,rs -> {
        if (Testing.Print.isEnabled()) {
          connection.print(rs);
        }
      }
);
      connection.setAutoCommit(true);
    }
     records=consumeRecordsByTopic(numRecords);
    int recordIndex=0;
    for (    SourceRecord r : records.allRecordsInOrder()) {
      Struct envelope=(Struct)r.value();
      assertThat(envelope.getString(op)).isEqualTo((c));
      assertThat(envelope.getStruct(after).getString(email)).isEqualTo(Integer.toString(recordIndex++));
    }
    assertThat(records.topics().size()).isEqualTo(1);
    Testing.print(*** Done with large TX);
  }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\BinlogReaderBufferIT.java",196
1161,"'-tryline","@FixFor(DBZ-411) @Test public void shouldProcessRolledBackSavepoint() throws SQLException, InterruptedException {
  String masterPort=System.getProperty(database.port,3306);
  String replicaPort=System.getProperty(database.replica.port,3306);
  boolean replicaIsMaster=masterPort.equals(replicaPort);
  if (!replicaIsMaster) {
    Thread.sleep(5000L);
  }
  config=Configuration.create().with(MySqlConnectorConfig.HOSTNAME,System.getProperty(database.replica.hostname,localhost)).with(MySqlConnectorConfig.PORT,System.getProperty(database.replica.port,3306)).with(MySqlConnectorConfig.USER,snapper).with(MySqlConnectorConfig.PASSWORD,snapperpass).with(MySqlConnectorConfig.SERVER_ID,18765).with(MySqlConnectorConfig.SERVER_NAME,DATABASE.getServerName()).with(MySqlConnectorConfig.SSL_MODE,SecureConnectionMode.DISABLED).with(MySqlConnectorConfig.POLL_INTERVAL_MS,10).with(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,DATABASE.getDatabaseName()).with(MySqlConnectorConfig.DATABASE_HISTORY,FileDatabaseHistory.class).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(FileDatabaseHistory.FILE_PATH,DB_HISTORY_PATH).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(5 + 9 + 9+ 4+ 11+ 1);
  if (replicaIsMaster) {
    try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
      try (JdbcConnection connection=db.connect()){
        final Connection jdbc=connection.connection();
        connection.setAutoCommit(false);
        final Statement statement=jdbc.createStatement();
        statement.executeUpdate(CREATE TEMPORARY TABLE tmp_ids (a int));
        statement.executeUpdate(INSERT INTO tmp_ids VALUES(5));
        jdbc.commit();
        statement.executeUpdate(DROP TEMPORARY TABLE tmp_ids);
        statement.executeUpdate(INSERT INTO customers VALUES(default, 'first', 'first', 'first'));
        final Savepoint savepoint=jdbc.setSavepoint();
        statement.executeUpdate(INSERT INTO customers VALUES(default, 'second', 'second', 'second'));
        jdbc.rollback(savepoint);
        jdbc.commit();
        connection.query(SELECT * FROM customers,rs -> {
          if (Testing.Print.isEnabled()) {
            connection.print(rs);
          }
        }
);
        connection.setAutoCommit(true);
      }
     }
     int recordCount;
    int customerEventsCount;
    int topicCount;
    if (MySqlTestConnection.isMySQL5() && !MySqlTestConnection.isPerconaServer()) {
      recordCount=3;
      customerEventsCount=2;
      topicCount=2;
    }
 else {
      recordCount=1;
      customerEventsCount=1;
      topicCount=1;
    }
    records=consumeRecordsByTopic(recordCount);
    assertThat(records.topics().size()).isEqualTo(topicCount);
    assertThat(records.recordsForTopic(DATABASE.topicForTable(customers))).hasSize(customerEventsCount);
    assertThat(records.allRecordsInOrder()).hasSize(recordCount);
    Testing.print(*** Done with savepoint TX);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\BinlogReaderBufferIT.java",267
1162,"'-tryline","@Ignore @Test public void shouldConnectToDefaultDatabase() throws SQLException {
  try (MySqlTestConnection conn=MySqlTestConnection.forTestDatabase(mysql)){
    conn.connect();
  }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\ConnectionIT.java",27
1163,"'-tryline","@Test public void shouldDoStuffWithDatabase() throws SQLException {
  final UniqueDatabase DATABASE=new UniqueDatabase(readbinlog,readbinlog_test);
  DATABASE.createAndInitialize();
  try (MySqlTestConnection conn=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    conn.connect();
    conn.execute(DROP TABLE IF EXISTS person,CREATE TABLE person ( +   name VARCHAR(255) primary key, +   birthdate DATE NULL,+   age INTEGER NULL DEFAULT 10,+   salary DECIMAL(5,2),+   bitStr BIT(18)+ ));
    conn.execute(SELECT * FROM person);
    try (ResultSet rs=conn.connection().getMetaData().getColumns(readbinlog_test,null,null,null)){
    }
   }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\ConnectionIT.java",35
1164,"'-tryline","@Ignore @Test public void shouldConnectToEmptyDatabase() throws SQLException {
  try (MySqlTestConnection conn=MySqlTestConnection.forTestDatabase(emptydb)){
    conn.connect();
  }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\ConnectionIT.java",57
1165,"'-tryline","private void inconsistentSchema(EventProcessingFailureHandlingMode mode) throws InterruptedException, SQLException {
  if (mode == null) {
    config=simpleConfig().build();
  }
 else {
    config=simpleConfig().with(MySqlConnectorConfig.INCONSISTENT_SCHEMA_HANDLING_MODE,mode).build();
  }
  Filters filters=new Filters.Builder(config).build();
  context=new MySqlTaskContext(config,filters);
  context.start();
  context.source().setBinlogStartPoint(,0L);
  context.initializeHistory();
  reader=new BinlogReader(binlog,context,null);
  reader.start();
  int expected=9 + 9 + 4+ 5+ 1;
  int consumed=consumeAtLeast(expected);
  assertThat(consumed).isGreaterThanOrEqualTo(expected);
  reader.stop();
  reader.start();
  reader.context.dbSchema().applyDdl(context.source(),DATABASE.getDatabaseName(),DROP TABLE customers,null);
  try (final MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName());final JdbcConnection connection=db.connect();final Connection jdbc=connection.connection();final Statement statement=jdbc.createStatement()){
    statement.executeUpdate(INSERT INTO customers VALUES (default,'John','Lazy','john.lazy@acme.com'));
  }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\BinlogReaderIT.java",563
1166,"'-tryline","protected void assertCanConnectToJdbc() throws SQLException {
  AtomicInteger count=new AtomicInteger();
  context.getConnectionContext().jdbc().query(SHOW DATABASES,rs -> {
    while (rs.next()) {
      count.incrementAndGet();
    }
  }
);
  assertThat(count.get()).isGreaterThan(0);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\MySqlTaskContextIT.java",73
1167,"'-tryline","protected void assertConnectedToJdbc() throws SQLException {
  assertThat(context.getConnectionContext().jdbc().isConnected()).isTrue();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\MySqlTaskContextIT.java",83
1168,"'-tryline","protected void assertNotConnectedToJdbc() throws SQLException {
  assertThat(context.getConnectionContext().jdbc().isConnected()).isFalse();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\MySqlTaskContextIT.java",87
1169,"'-tryline","/** 
 * Loads the  {@link Tables} definition by reading JDBC metadata. Note that some characteristics, such as whether columnsare generated, are not exposed through JDBC (unlike when reading DDL).
 * @throws SQLException if there's an error
 */
@Test public void shouldLoadMetadataViaJdbc() throws SQLException {
  final UniqueDatabase DATABASE=new UniqueDatabase(readbinlog_it,readbinlog_test);
  DATABASE.createAndInitialize();
  try (MySqlTestConnection conn=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    conn.connect();
    conn.execute(DROP TABLE IF EXISTS person,DROP TABLE IF EXISTS product,DROP TABLE IF EXISTS purchased);
    conn.execute(CREATE TABLE person ( +   name VARCHAR(255) primary key, +   birthdate DATE NULL,+   age INTEGER NULL DEFAULT 10,+   salary DECIMAL(5,2),+   bitStr BIT(18)+ ));
    conn.execute(SELECT * FROM person);
    Tables tables=new Tables();
    conn.readSchema(tables,DATABASE.getDatabaseName(),null,null,null,true);
    assertThat(tables.size()).isEqualTo(1);
    Table person=tables.forTable(DATABASE.getDatabaseName(),null,person);
    assertThat(person).isNotNull();
    assertThat(person.filterColumns(col -> col.isAutoIncremented())).isEmpty();
    assertThat(person.primaryKeyColumnNames()).containsOnly(name);
    assertThat(person.retrieveColumnNames()).containsExactly(name,birthdate,age,salary,bitStr);
    assertThat(person.columnWithName(name).name()).isEqualTo(name);
    assertThat(person.columnWithName(name).typeName()).isEqualTo(VARCHAR);
    assertThat(person.columnWithName(name).jdbcType()).isEqualTo(Types.VARCHAR);
    assertThat(person.columnWithName(name).length()).isEqualTo(255);
    assertFalse(person.columnWithName(name).scale().isPresent());
    assertThat(person.columnWithName(name).position()).isEqualTo(1);
    assertThat(person.columnWithName(name).isAutoIncremented()).isFalse();
    assertThat(person.columnWithName(name).isGenerated()).isFalse();
    assertThat(person.columnWithName(name).isOptional()).isFalse();
    assertThat(person.columnWithName(birthdate).name()).isEqualTo(birthdate);
    assertThat(person.columnWithName(birthdate).typeName()).isEqualTo(DATE);
    assertThat(person.columnWithName(birthdate).jdbcType()).isEqualTo(Types.DATE);
    assertThat(person.columnWithName(birthdate).length()).isEqualTo(10);
    assertFalse(person.columnWithName(birthdate).scale().isPresent());
    assertThat(person.columnWithName(birthdate).position()).isEqualTo(2);
    assertThat(person.columnWithName(birthdate).isAutoIncremented()).isFalse();
    assertThat(person.columnWithName(birthdate).isGenerated()).isFalse();
    assertThat(person.columnWithName(birthdate).isOptional()).isTrue();
    assertThat(person.columnWithName(age).name()).isEqualTo(age);
    assertThat(person.columnWithName(age).typeName()).isEqualTo(INT);
    assertThat(person.columnWithName(age).jdbcType()).isEqualTo(Types.INTEGER);
    assertThat(person.columnWithName(age).length()).isEqualTo(10);
    assertThat(!person.columnWithName(age).scale().isPresent());
    assertThat(person.columnWithName(age).position()).isEqualTo(3);
    assertThat(person.columnWithName(age).isAutoIncremented()).isFalse();
    assertThat(person.columnWithName(age).isGenerated()).isFalse();
    assertThat(person.columnWithName(age).isOptional()).isTrue();
    assertThat(person.columnWithName(salary).name()).isEqualTo(salary);
    assertThat(person.columnWithName(salary).typeName()).isEqualTo(DECIMAL);
    assertThat(person.columnWithName(salary).jdbcType()).isEqualTo(Types.DECIMAL);
    assertThat(person.columnWithName(salary).length()).isEqualTo(5);
    assertThat(person.columnWithName(salary).scale().get()).isEqualTo(2);
    assertThat(person.columnWithName(salary).position()).isEqualTo(4);
    assertThat(person.columnWithName(salary).isAutoIncremented()).isFalse();
    assertThat(person.columnWithName(salary).isGenerated()).isFalse();
    assertThat(person.columnWithName(salary).isOptional()).isTrue();
    assertThat(person.columnWithName(bitStr).name()).isEqualTo(bitStr);
    assertThat(person.columnWithName(bitStr).typeName()).isEqualTo(BIT);
    assertThat(person.columnWithName(bitStr).jdbcType()).isEqualTo(Types.BIT);
    assertThat(person.columnWithName(bitStr).length()).isEqualTo(18);
    assertFalse(person.columnWithName(bitStr).scale().isPresent());
    assertThat(person.columnWithName(bitStr).position()).isEqualTo(5);
    assertThat(person.columnWithName(bitStr).isAutoIncremented()).isFalse();
    assertThat(person.columnWithName(bitStr).isGenerated()).isFalse();
    assertThat(person.columnWithName(bitStr).isOptional()).isTrue();
    conn.execute(CREATE TABLE product ( +   id INT NOT NULL AUTO_INCREMENT, +   createdByDate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,+   modifiedDate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,+   PRIMARY KEY(id)+ ));
    conn.execute(SELECT * FROM product);
    tables=new Tables();
    conn.readSchema(tables,DATABASE.getDatabaseName(),null,null,null,true);
    assertThat(tables.size()).isEqualTo(2);
    Table product=tables.forTable(DATABASE.getDatabaseName(),null,product);
    assertThat(product).isNotNull();
    List<Column> autoIncColumns=product.filterColumns(Column::isAutoIncremented);
    assertThat(autoIncColumns).hasSize(1);
    assertThat(autoIncColumns.get(0).name()).isEqualTo(id);
    assertThat(product.primaryKeyColumnNames()).containsOnly(id);
    assertThat(product.retrieveColumnNames()).containsExactly(id,createdByDate,modifiedDate);
    assertThat(product.columnWithName(id).name()).isEqualTo(id);
    assertThat(product.columnWithName(id).typeName()).isEqualTo(INT);
    assertThat(product.columnWithName(id).jdbcType()).isEqualTo(Types.INTEGER);
    assertThat(product.columnWithName(id).length()).isEqualTo(10);
    assertThat(!product.columnWithName(id).scale().isPresent() || product.columnWithName(id).scale().get() == 0);
    assertThat(product.columnWithName(id).position()).isEqualTo(1);
    assertThat(product.columnWithName(id).isAutoIncremented()).isTrue();
    assertThat(product.columnWithName(id).isGenerated()).isFalse();
    assertThat(product.columnWithName(id).isOptional()).isFalse();
    assertThat(product.columnWithName(createdByDate).name()).isEqualTo(createdByDate);
    assertThat(product.columnWithName(createdByDate).typeName()).isEqualTo(DATETIME);
    assertThat(product.columnWithName(createdByDate).jdbcType()).isEqualTo(Types.TIMESTAMP);
    assertThat(product.columnWithName(createdByDate).length()).isEqualTo(19);
    assertFalse(product.columnWithName(createdByDate).scale().isPresent());
    assertThat(product.columnWithName(createdByDate).position()).isEqualTo(2);
    assertThat(product.columnWithName(createdByDate).isAutoIncremented()).isFalse();
    assertThat(product.columnWithName(createdByDate).isGenerated()).isEqualTo(conn.databaseAsserts().isCurrentDateTimeDefaultGenerated());
    assertThat(product.columnWithName(createdByDate).isOptional()).isFalse();
    assertThat(product.columnWithName(modifiedDate).name()).isEqualTo(modifiedDate);
    assertThat(product.columnWithName(modifiedDate).typeName()).isEqualTo(DATETIME);
    assertThat(product.columnWithName(modifiedDate).jdbcType()).isEqualTo(Types.TIMESTAMP);
    assertThat(product.columnWithName(modifiedDate).length()).isEqualTo(19);
    assertFalse(product.columnWithName(modifiedDate).scale().isPresent());
    assertThat(product.columnWithName(modifiedDate).position()).isEqualTo(3);
    assertThat(product.columnWithName(modifiedDate).isAutoIncremented()).isFalse();
    assertThat(product.columnWithName(modifiedDate).isGenerated()).isEqualTo(conn.databaseAsserts().isCurrentDateTimeDefaultGenerated());
    assertThat(product.columnWithName(modifiedDate).isOptional()).isFalse();
    conn.execute(CREATE TABLE purchased ( +   purchaser VARCHAR(255) NOT NULL, +   productId INT NOT NULL,+   purchaseDate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,+   PRIMARY KEY(productId,purchaser)+ ));
    conn.execute(SELECT * FROM purchased);
    tables=new Tables();
    conn.readSchema(tables,DATABASE.getDatabaseName(),null,null,null,true);
    assertThat(tables.size()).isEqualTo(3);
    Table purchased=tables.forTable(DATABASE.getDatabaseName(),null,purchased);
    assertThat(purchased).isNotNull();
    assertThat(person.filterColumns(col -> col.isAutoIncremented())).isEmpty();
    assertThat(purchased.primaryKeyColumnNames()).containsOnly(productId,purchaser);
    assertThat(purchased.retrieveColumnNames()).containsExactly(purchaser,productId,purchaseDate);
    assertThat(purchased.columnWithName(purchaser).name()).isEqualTo(purchaser);
    assertThat(purchased.columnWithName(purchaser).typeName()).isEqualTo(VARCHAR);
    assertThat(purchased.columnWithName(purchaser).jdbcType()).isEqualTo(Types.VARCHAR);
    assertThat(purchased.columnWithName(purchaser).length()).isEqualTo(255);
    assertFalse(purchased.columnWithName(purchaser).scale().isPresent());
    assertThat(purchased.columnWithName(purchaser).position()).isEqualTo(1);
    assertThat(purchased.columnWithName(purchaser).isAutoIncremented()).isFalse();
    assertThat(purchased.columnWithName(purchaser).isGenerated()).isFalse();
    assertThat(purchased.columnWithName(purchaser).isOptional()).isFalse();
    assertThat(purchased.columnWithName(productId).name()).isEqualTo(productId);
    assertThat(purchased.columnWithName(productId).typeName()).isEqualTo(INT);
    assertThat(purchased.columnWithName(productId).jdbcType()).isEqualTo(Types.INTEGER);
    assertThat(purchased.columnWithName(productId).length()).isEqualTo(10);
    assertThat(!purchased.columnWithName(productId).scale().isPresent());
    assertThat(purchased.columnWithName(productId).position()).isEqualTo(2);
    assertThat(purchased.columnWithName(productId).isAutoIncremented()).isFalse();
    assertThat(purchased.columnWithName(productId).isGenerated()).isFalse();
    assertThat(purchased.columnWithName(productId).isOptional()).isFalse();
    assertThat(purchased.columnWithName(purchaseDate).name()).isEqualTo(purchaseDate);
    assertThat(purchased.columnWithName(purchaseDate).typeName()).isEqualTo(DATETIME);
    assertThat(purchased.columnWithName(purchaseDate).jdbcType()).isEqualTo(Types.TIMESTAMP);
    assertThat(purchased.columnWithName(purchaseDate).length()).isEqualTo(19);
    assertFalse(purchased.columnWithName(purchaseDate).scale().isPresent());
    assertThat(purchased.columnWithName(purchaseDate).position()).isEqualTo(3);
    assertThat(purchased.columnWithName(purchaseDate).isAutoIncremented()).isFalse();
    assertThat(purchased.columnWithName(purchaseDate).isGenerated()).isEqualTo(conn.databaseAsserts().isCurrentDateTimeDefaultGenerated());
    assertThat(purchased.columnWithName(purchaseDate).isOptional()).isFalse();
  }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MetadataIT.java",32
1170,"'-tryline","@Test public void shouldConsumeAllEventsFromDatabaseUsingBinlogAndNoSnapshot() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(1 + 4 + 1);
  final List<String> tableNames=new ArrayList<>();
  records.forEach(record -> {
    final Struct source=((Struct)record.value()).getStruct(source);
    assertThat(source.getString(db)).isEqualTo(DATABASE.getDatabaseName());
    tableNames.add(source.getString(table));
  }
);
  assertThat(tableNames.subList(0,5)).containsExactly(null,t1,t2,t3,t4);
  String[] dropTableNames=tableNames.get(5).split(,);
  assertThat(dropTableNames).containsOnly(t1,t2,t3,t4);
  stopConnector();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MultiTableStatementIT.java",56
1171,"'-tryline","@Test @FixFor(DBZ-1814) public void shouldReceiveRawBinary() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).with(MySqlConnectorConfig.BINARY_HANDLING_MODE,BinaryHandlingMode.BYTES).build();
  start(MySqlConnector.class,config);
  Testing.Debug.enable();
  int createDatabaseCount=1;
  int createTableCount=1;
  int insertCount=1;
  SourceRecords sourceRecords=consumeRecordsByTopic(createDatabaseCount + createTableCount + insertCount);
  stopConnector();
  assertThat(sourceRecords).isNotNull();
  List<SourceRecord> topicSourceRecords=sourceRecords.recordsForTopic(DATABASE.topicForTable(dbz_1814_binary_mode_test));
  assertThat(topicSourceRecords).hasSize(1);
  SourceRecord topicSourceRecord=topicSourceRecords.get(0);
  Struct kafkaDataStructure=(Struct)((Struct)topicSourceRecord.value()).get(after);
  ByteBuffer expectedValue=ByteBuffer.wrap(new byte[]{1,2,3});
  assertEquals(expectedValue,kafkaDataStructure.get(blob_col));
  assertEquals(expectedValue,kafkaDataStructure.get(tinyblob_col));
  assertEquals(expectedValue,kafkaDataStructure.get(mediumblob_col));
  assertEquals(expectedValue,kafkaDataStructure.get(longblob_col));
  assertEquals(expectedValue,kafkaDataStructure.get(binary_col));
  assertEquals(expectedValue,kafkaDataStructure.get(varbinary_col));
  sourceRecords.forEach(this::validate);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlBinaryModeIT.java",58
1172,"'-tryline","@Test @FixFor(DBZ-1814) public void shouldReceiveHexBinary() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).with(MySqlConnectorConfig.BINARY_HANDLING_MODE,BinaryHandlingMode.HEX).build();
  start(MySqlConnector.class,config);
  Testing.Debug.enable();
  int createDatabaseCount=1;
  int createTableCount=1;
  int insertCount=1;
  SourceRecords sourceRecords=consumeRecordsByTopic(createDatabaseCount + createTableCount + insertCount);
  stopConnector();
  assertThat(sourceRecords).isNotNull();
  List<SourceRecord> topicSourceRecords=sourceRecords.recordsForTopic(DATABASE.topicForTable(dbz_1814_binary_mode_test));
  assertThat(topicSourceRecords).hasSize(1);
  SourceRecord topicSourceRecord=topicSourceRecords.get(0);
  Struct kafkaDataStructure=(Struct)((Struct)topicSourceRecord.value()).get(after);
  String expectedValue=010203;
  assertEquals(expectedValue,kafkaDataStructure.get(blob_col));
  assertEquals(expectedValue,kafkaDataStructure.get(tinyblob_col));
  assertEquals(expectedValue,kafkaDataStructure.get(mediumblob_col));
  assertEquals(expectedValue,kafkaDataStructure.get(longblob_col));
  assertEquals(expectedValue,kafkaDataStructure.get(binary_col));
  assertEquals(expectedValue,kafkaDataStructure.get(varbinary_col));
  sourceRecords.forEach(this::validate);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlBinaryModeIT.java",99
1173,"'-tryline","@Test @FixFor(DBZ-1814) public void shouldReceiveBase64Binary() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).with(MySqlConnectorConfig.BINARY_HANDLING_MODE,BinaryHandlingMode.BASE64).build();
  start(MySqlConnector.class,config);
  Testing.Debug.enable();
  int createDatabaseCount=1;
  int createTableCount=1;
  int insertCount=1;
  SourceRecords sourceRecords=consumeRecordsByTopic(createDatabaseCount + createTableCount + insertCount);
  stopConnector();
  assertThat(sourceRecords).isNotNull();
  List<SourceRecord> topicSourceRecords=sourceRecords.recordsForTopic(DATABASE.topicForTable(dbz_1814_binary_mode_test));
  assertThat(topicSourceRecords).hasSize(1);
  SourceRecord topicSourceRecord=topicSourceRecords.get(0);
  Struct kafkaDataStructure=(Struct)((Struct)topicSourceRecord.value()).get(after);
  String expectedValue=AQID;
  assertEquals(expectedValue,kafkaDataStructure.get(blob_col));
  assertEquals(expectedValue,kafkaDataStructure.get(tinyblob_col));
  assertEquals(expectedValue,kafkaDataStructure.get(mediumblob_col));
  assertEquals(expectedValue,kafkaDataStructure.get(longblob_col));
  assertEquals(expectedValue,kafkaDataStructure.get(binary_col));
  assertEquals(expectedValue,kafkaDataStructure.get(varbinary_col));
  sourceRecords.forEach(this::validate);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlBinaryModeIT.java",139
1174,"'-tryline","@Test public void shouldConsumeAllEventsFromDatabaseUsingSnapshot() throws SQLException, InterruptedException {
  shouldConsumeAllEventsFromDatabaseUsingSnapshotByField(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,18765);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",331
1175,"'-tryline","@Test public void shouldConsumeAllEventsFromDatabaseUsingSnapshotOld() throws SQLException, InterruptedException {
  shouldConsumeAllEventsFromDatabaseUsingSnapshotByField(MySqlConnectorConfig.DATABASE_WHITELIST,18775);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",336
1176,"'-tryline","private void shouldConsumeAllEventsFromDatabaseUsingSnapshotByField(Field dbIncludeListField,int serverId) throws SQLException, InterruptedException {
  String masterPort=System.getProperty(database.port,3306);
  String replicaPort=System.getProperty(database.replica.port,3306);
  boolean replicaIsMaster=masterPort.equals(replicaPort);
  if (!replicaIsMaster) {
    Thread.sleep(5000L);
  }
  config=Configuration.create().with(MySqlConnectorConfig.HOSTNAME,System.getProperty(database.replica.hostname,localhost)).with(MySqlConnectorConfig.PORT,System.getProperty(database.replica.port,3306)).with(MySqlConnectorConfig.USER,snapper).with(MySqlConnectorConfig.PASSWORD,snapperpass).with(MySqlConnectorConfig.SERVER_ID,serverId).with(MySqlConnectorConfig.SERVER_NAME,DATABASE.getServerName()).with(MySqlConnectorConfig.SSL_MODE,SecureConnectionMode.DISABLED).with(MySqlConnectorConfig.POLL_INTERVAL_MS,10).with(dbIncludeListField,DATABASE.getDatabaseName()).with(MySqlConnectorConfig.DATABASE_HISTORY,FileDatabaseHistory.class).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(FileDatabaseHistory.FILE_PATH,DB_HISTORY_PATH).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(5 + 9 + 9+ 4+ 11+ 1);
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(12);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(products)).size()).isEqualTo(9);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(products_on_hand)).size()).isEqualTo(9);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(customers)).size()).isEqualTo(4);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(orders)).size()).isEqualTo(5);
  assertThat(records.topics().size()).isEqualTo(5);
  assertThat(records.databaseNames().size()).isEqualTo(2);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(11);
  assertThat(records.ddlRecordsForDatabase(readbinlog_test)).isNull();
  assertThat(records.ddlRecordsForDatabase().size()).isEqualTo(1);
  records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).forEach(this::print);
  records.forEach(this::validate);
  List<SourceRecord> allRecords=records.allRecordsInOrder();
  SourceRecord last=allRecords.get(allRecords.size() - 1);
  SourceRecord secondToLast=allRecords.get(allRecords.size() - 2);
  assertThat(secondToLast.sourceOffset().containsKey(SourceInfo.SNAPSHOT_KEY)).isTrue();
  assertThat(last.sourceOffset().containsKey(SourceInfo.SNAPSHOT_KEY)).isFalse();
  assertThat(((Struct)secondToLast.value()).getStruct(Envelope.FieldName.SOURCE).getString(SourceInfo.SNAPSHOT_KEY)).isEqualTo(true);
  assertThat(((Struct)last.value()).getStruct(Envelope.FieldName.SOURCE).getString(SourceInfo.SNAPSHOT_KEY)).isEqualTo(last);
  waitForAvailableRecords(3,TimeUnit.SECONDS);
  int totalConsumed=consumeAvailableRecords(this::print);
  System.out.println(TOTAL CONSUMED =  + totalConsumed);
  stopConnector();
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.query(SELECT * FROM products,rs -> {
        if (Testing.Print.isEnabled()) {
          connection.print(rs);
        }
      }
);
      connection.execute(INSERT INTO products VALUES (default,'robot','Toy robot',1.304););
      connection.query(SELECT * FROM products,rs -> {
        if (Testing.Print.isEnabled()) {
          connection.print(rs);
        }
      }
);
    }
   }
   Testing.print(*** Restarting connector after inserts were made);
  start(MySqlConnector.class,config);
  records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(products)).size()).isEqualTo(1);
  assertThat(records.topics().size()).isEqualTo(1);
  List<SourceRecord> inserts=records.recordsForTopic(DATABASE.topicForTable(products));
  assertInsert(inserts.get(0),id,110);
  Testing.print(*** Done with inserts and restart);
  Testing.print(*** Stopping connector);
  stopConnector();
  Testing.print(*** Restarting connector);
  start(MySqlConnector.class,config);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(INSERT INTO products VALUES (1001,'roy','old robot',1234.56););
      connection.query(SELECT * FROM products,rs -> {
        if (Testing.Print.isEnabled()) {
          connection.print(rs);
        }
      }
);
    }
   }
   records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(products)).size()).isEqualTo(1);
  assertThat(records.topics().size()).isEqualTo(1);
  inserts=records.recordsForTopic(DATABASE.topicForTable(products));
  assertInsert(inserts.get(0),id,1001);
  Testing.print(*** Done with simple insert);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(UPDATE products SET id=2001, description='really old robot' WHERE id=1001);
      connection.query(SELECT * FROM products,rs -> {
        if (Testing.Print.isEnabled()) {
          connection.print(rs);
        }
      }
);
    }
   }
   records=consumeRecordsByTopic(3);
  List<SourceRecord> updates=records.recordsForTopic(DATABASE.topicForTable(products));
  assertThat(updates.size()).isEqualTo(3);
  SourceRecord deleteRecord=updates.get(0);
  assertDelete(deleteRecord,id,1001);
  Header keyPKUpdateHeader=getPKUpdateNewKeyHeader(deleteRecord).get();
  assertEquals(Integer.valueOf(2001),((Struct)keyPKUpdateHeader.value()).getInt32(id));
  assertTombstone(updates.get(1),id,1001);
  SourceRecord insertRecord=updates.get(2);
  assertInsert(insertRecord,id,2001);
  keyPKUpdateHeader=getPKUpdateOldKeyHeader(insertRecord).get();
  assertEquals(Integer.valueOf(1001),((Struct)keyPKUpdateHeader.value()).getInt32(id));
  Testing.print(*** Done with PK change);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(UPDATE products SET weight=1345.67 WHERE id=2001);
      connection.query(SELECT * FROM products,rs -> {
        if (Testing.Print.isEnabled()) {
          connection.print(rs);
        }
      }
);
    }
   }
   records=consumeRecordsByTopic(1);
  assertThat(records.topics().size()).isEqualTo(1);
  updates=records.recordsForTopic(DATABASE.topicForTable(products));
  assertThat(updates.size()).isEqualTo(1);
  assertUpdate(updates.get(0),id,2001);
  updates.forEach(this::validate);
  Testing.print(*** Done with simple update);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(String.format(ALTER TABLE %s.products ADD COLUMN volume FLOAT, ADD COLUMN alias VARCHAR(30) NULL AFTER description,DATABASE.getDatabaseName()));
      connection.execute(UPDATE products SET volume=13.5 WHERE id=2001);
      connection.query(SELECT * FROM products,rs -> {
        if (Testing.Print.isEnabled()) {
          connection.print(rs);
        }
      }
);
    }
   }
   records=consumeRecordsByTopic(2);
  assertThat(records.topics().size()).isEqualTo(2);
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(1);
  updates=records.recordsForTopic(DATABASE.topicForTable(products));
  assertThat(updates.size()).isEqualTo(1);
  assertUpdate(updates.get(0),id,2001);
  updates.forEach(this::validate);
  Testing.print(*** Done with schema change (same db and fully-qualified name));
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(emptydb)){
    try (JdbcConnection connection=db.connect()){
      connection.execute(String.format(CREATE TABLE %s.stores ( +  id INT(11) PRIMARY KEY NOT NULL AUTO_INCREMENT, +  first_name VARCHAR(255) NOT NULL,+  last_name VARCHAR(255) NOT NULL,+  email VARCHAR(255) NOT NULL );,DATABASE.getDatabaseName()));
    }
   }
   records=consumeRecordsByTopic(1);
  assertThat(records.topics().size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(1);
  records.recordsForTopic(DATABASE.getServerName()).forEach(this::validate);
  Testing.print(*** Done with PK change (different db and fully-qualified name));
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(UPDATE products_on_hand SET quantity=20 WHERE product_id=109);
      connection.query(SELECT * FROM products_on_hand,rs -> {
        if (Testing.Print.isEnabled()) {
          connection.print(rs);
        }
      }
);
    }
   }
   records=consumeRecordsByTopic(1);
  assertThat(records.topics().size()).isEqualTo(1);
  updates=records.recordsForTopic(DATABASE.topicForTable(products_on_hand));
  assertThat(updates.size()).isEqualTo(1);
  assertUpdate(updates.get(0),product_id,109);
  updates.forEach(this::validate);
  Testing.print(*** Done with verifying no additional events);
  stopConnector();
  Testing.print(*** Restarting connector);
  CompletionResult completion=new CompletionResult();
  start(MySqlConnector.class,config,completion,(record) -> {
    Struct key=(Struct)record.key();
    Number id=(Number)key.get(id);
    if (id.intValue() == 3003) {
      return true;
    }
    return false;
  }
);
  BinlogPosition positionBeforeInserts=new BinlogPosition();
  BinlogPosition positionAfterInserts=new BinlogPosition();
  BinlogPosition positionAfterUpdate=new BinlogPosition();
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.query(SHOW MASTER STATUS,positionBeforeInserts::readFromDatabase);
      connection.execute(INSERT INTO products(id,name,description,weight,volume,alias) VALUES  + (3001,'ashley','super robot',34.56,0.00,'ashbot'),  + (3002,'arthur','motorcycle',87.65,0.00,'arcycle'), + (3003,'oak','tree',987.65,0.00,'oak'););
      connection.query(SELECT * FROM products,rs -> {
        if (Testing.Print.isEnabled()) {
          connection.print(rs);
        }
      }
);
      connection.query(SHOW MASTER STATUS,positionAfterInserts::readFromDatabase);
      connection.execute(UPDATE products_on_hand SET quantity=40 WHERE product_id=109);
      connection.query(SELECT * FROM products_on_hand,rs -> {
        if (Testing.Print.isEnabled()) {
          connection.print(rs);
        }
      }
);
      connection.query(SHOW MASTER STATUS,positionAfterUpdate::readFromDatabase);
    }
   }
   records=consumeRecordsByTopic(2);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(products)).size()).isEqualTo(2);
  assertThat(records.topics().size()).isEqualTo(1);
  inserts=records.recordsForTopic(DATABASE.topicForTable(products));
  assertInsert(inserts.get(0),id,3001);
  assertInsert(inserts.get(1),id,3002);
  completion.await(10,TimeUnit.SECONDS);
  assertThat(completion.hasCompleted()).isTrue();
  assertThat(completion.hasError()).isTrue();
  assertThat(completion.success()).isFalse();
  assertNoRecordsToConsume();
  assertConnectorNotRunning();
  stopConnector();
  final MySqlOffsetContext.Loader loader=new MySqlOffsetContext.Loader(new MySqlConnectorConfig(Configuration.create().with(MySqlConnectorConfig.SERVER_NAME,config.getString(MySqlConnectorConfig.SERVER_NAME)).build()));
  Map<String,?> lastCommittedOffset=readLastCommittedOffset(config,loader.getPartition());
  final MySqlOffsetContext offsetContext=(MySqlOffsetContext)loader.load(lastCommittedOffset);
  final SourceInfo persistedOffsetSource=offsetContext.getSource();
  Testing.print(Position before inserts:  + positionBeforeInserts);
  Testing.print(Position after inserts:   + positionAfterInserts);
  Testing.print(Offset:  + lastCommittedOffset);
  Testing.print(Position after update:   + positionAfterUpdate);
  if (replicaIsMaster) {
    assertThat(persistedOffsetSource.binlogFilename()).isEqualTo(positionBeforeInserts.binlogFilename());
    assertThat(persistedOffsetSource.binlogFilename()).isEqualTo(positionAfterInserts.binlogFilename());
    final MySqlVersion mysqlVersion=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName()).getMySqlVersion();
    if (mysqlVersion == MySqlVersion.MYSQL_5_5 || mysqlVersion == MySqlVersion.MYSQL_5_6) {
      assertThat(persistedOffsetSource.binlogPosition()).isGreaterThanOrEqualTo(positionBeforeInserts.binlogPosition());
    }
 else {
      assertThat(persistedOffsetSource.binlogPosition()).isGreaterThan(positionBeforeInserts.binlogPosition());
    }
    assertThat(persistedOffsetSource.binlogPosition()).isLessThan(positionAfterInserts.binlogPosition());
  }
 else {
  }
  assertThat(offsetContext.eventsToSkipUponRestart()).isEqualTo(2);
  Testing.print(*** Restarting connector, and should begin with inserting 3003 (not 109!));
  start(MySqlConnector.class,config);
  records=consumeRecordsByTopic(1);
  assertThat(records.topics().size()).isEqualTo(1);
  inserts=records.recordsForTopic(DATABASE.topicForTable(products));
  if (inserts == null) {
    updates=records.recordsForTopic(DATABASE.topicForTable(products_on_hand));
    if (updates != null) {
      fail(Restarted connector and missed the insert of product id=3003!);
    }
  }
  SourceRecord prod3003=inserts.get(0);
  assertInsert(prod3003,id,3003);
  assertOffset(prod3003,file,lastCommittedOffset.get(file));
  assertOffset(prod3003,pos,lastCommittedOffset.get(pos));
  assertOffset(prod3003,row,3);
  assertOffset(prod3003,event,lastCommittedOffset.get(event));
  assertValueField(prod3003,after/id,3003);
  assertValueField(prod3003,after/name,oak);
  assertValueField(prod3003,after/description,tree);
  assertValueField(prod3003,after/weight,987.65d);
  assertValueField(prod3003,after/volume,0.0d);
  assertValueField(prod3003,after/alias,oak);
  records=consumeRecordsByTopic(1);
  assertThat(records.topics().size()).isEqualTo(1);
  updates=records.recordsForTopic(DATABASE.topicForTable(products_on_hand));
  assertThat(updates.size()).isEqualTo(1);
  assertUpdate(updates.get(0),product_id,109);
  updates.forEach(this::validate);
  Testing.print(*** Done with simple insert);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",341
1177,"'-tryline","@Test public void shouldUseOverriddenSelectStatementDuringSnapshotting() throws SQLException, InterruptedException {
  String masterPort=System.getProperty(database.port,3306);
  String replicaPort=System.getProperty(database.replica.port,3306);
  boolean replicaIsMaster=masterPort.equals(replicaPort);
  if (!replicaIsMaster) {
    Thread.sleep(5000L);
  }
  config=Configuration.create().with(MySqlConnectorConfig.HOSTNAME,System.getProperty(database.replica.hostname,localhost)).with(MySqlConnectorConfig.PORT,System.getProperty(database.replica.port,3306)).with(MySqlConnectorConfig.USER,snapper).with(MySqlConnectorConfig.PASSWORD,snapperpass).with(MySqlConnectorConfig.SERVER_ID,28765).with(MySqlConnectorConfig.SERVER_NAME,DATABASE.getServerName()).with(MySqlConnectorConfig.SSL_MODE,SecureConnectionMode.DISABLED).with(MySqlConnectorConfig.POLL_INTERVAL_MS,10).with(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,DATABASE.getDatabaseName()).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.getDatabaseName() + .products).with(MySqlConnectorConfig.SNAPSHOT_SELECT_STATEMENT_OVERRIDES_BY_TABLE,DATABASE.getDatabaseName() + .products).with(MySqlConnectorConfig.SNAPSHOT_SELECT_STATEMENT_OVERRIDES_BY_TABLE + . + DATABASE.getDatabaseName()+ .products,String.format(SELECT * from %s.products where id>=108 order by id,DATABASE.getDatabaseName())).with(DatabaseHistory.STORE_ONLY_MONITORED_TABLES_DDL,true).with(MySqlConnectorConfig.DATABASE_HISTORY,FileDatabaseHistory.class).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(FileDatabaseHistory.FILE_PATH,DB_HISTORY_PATH).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(6 + 2);
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(6);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(products)).size()).isEqualTo(2);
  assertThat(((Struct)records.recordsForTopic(DATABASE.topicForTable(products)).get(0).key()).getInt32(id)).isEqualTo(108);
  assertThat(((Struct)records.recordsForTopic(DATABASE.topicForTable(products)).get(1).key()).getInt32(id)).isEqualTo(109);
  records.forEach(this::validate);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",754
1178,"'-tryline","@Test public void shouldUseMultipleOverriddenSelectStatementsDuringSnapshotting() throws SQLException, InterruptedException {
  String masterPort=System.getProperty(database.port,3306);
  String replicaPort=System.getProperty(database.replica.port,3306);
  boolean replicaIsMaster=masterPort.equals(replicaPort);
  if (!replicaIsMaster) {
    Thread.sleep(5000L);
  }
  String tables=String.format(%s.products,%s.products_on_hand,DATABASE.getDatabaseName(),DATABASE.getDatabaseName());
  config=Configuration.create().with(MySqlConnectorConfig.HOSTNAME,System.getProperty(database.replica.hostname,localhost)).with(MySqlConnectorConfig.PORT,System.getProperty(database.replica.port,3306)).with(MySqlConnectorConfig.USER,snapper).with(MySqlConnectorConfig.PASSWORD,snapperpass).with(MySqlConnectorConfig.SERVER_ID,28765).with(MySqlConnectorConfig.SERVER_NAME,DATABASE.getServerName()).with(MySqlConnectorConfig.SSL_MODE,SecureConnectionMode.DISABLED).with(MySqlConnectorConfig.POLL_INTERVAL_MS,10).with(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,DATABASE.getDatabaseName()).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,tables).with(DatabaseHistory.STORE_ONLY_MONITORED_TABLES_DDL,true).with(MySqlConnectorConfig.SNAPSHOT_SELECT_STATEMENT_OVERRIDES_BY_TABLE,tables).with(MySqlConnectorConfig.SNAPSHOT_SELECT_STATEMENT_OVERRIDES_BY_TABLE + . + DATABASE.getDatabaseName()+ .products,String.format(SELECT * from %s.products where id>=108 order by id,DATABASE.getDatabaseName())).with(MySqlConnectorConfig.SNAPSHOT_SELECT_STATEMENT_OVERRIDES_BY_TABLE + . + DATABASE.getDatabaseName()+ .products_on_hand,String.format(SELECT * from %s.products_on_hand where product_id>=108 order by product_id,DATABASE.getDatabaseName())).with(MySqlConnectorConfig.DATABASE_HISTORY,FileDatabaseHistory.class).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(FileDatabaseHistory.FILE_PATH,DB_HISTORY_PATH).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(8 + 4);
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(8);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(products)).size()).isEqualTo(2);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(products_on_hand)).size()).isEqualTo(2);
  assertThat(((Struct)records.recordsForTopic(DATABASE.topicForTable(products)).get(0).key()).getInt32(id)).isEqualTo(108);
  assertThat(((Struct)records.recordsForTopic(DATABASE.topicForTable(products)).get(1).key()).getInt32(id)).isEqualTo(109);
  assertThat(((Struct)records.recordsForTopic(DATABASE.topicForTable(products_on_hand)).get(0).key()).getInt32(product_id)).isEqualTo(108);
  assertThat(((Struct)records.recordsForTopic(DATABASE.topicForTable(products_on_hand)).get(1).key()).getInt32(product_id)).isEqualTo(109);
  records.forEach(this::validate);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",804
1179,"'-tryline","@Test @FixFor(DBZ-977) public void shouldIgnoreAlterTableForNonCapturedTablesNotStoredInHistory() throws SQLException, InterruptedException {
  Testing.Files.delete(DB_HISTORY_PATH);
  final String tables=String.format(%s.customers,DATABASE.getDatabaseName(),DATABASE.getDatabaseName());
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,tables).with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(DatabaseHistory.STORE_ONLY_MONITORED_TABLES_DDL,true).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(1 + 5);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(5);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(ALTER TABLE orders ADD COLUMN (newcol INT));
      connection.execute(ALTER TABLE customers ADD COLUMN (newcol INT));
      connection.execute(INSERT INTO customers VALUES  + (default,'name','surname','email',1););
    }
   }
   records=consumeRecordsByTopic(2);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(customers)).size()).isEqualTo(1);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(1);
  stopConnector();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",860
1180,"'-tryline","@Test @FixFor(DBZ-1201) public void shouldSaveSetCharacterSetWhenStoringOnlyMonitoredTables() throws SQLException, InterruptedException {
  Testing.Files.delete(DB_HISTORY_PATH);
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,no_ + DATABASE.getDatabaseName()).with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(DatabaseHistory.STORE_ONLY_MONITORED_TABLES_DDL,true).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.ddlRecordsForDatabase().size()).isEqualTo(1);
  stopConnector();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",897
1181,"'-tryline","@Test @FixFor(DBZ-1246) public void shouldProcessCreateUniqueIndex() throws SQLException, InterruptedException {
  Testing.Files.delete(DB_HISTORY_PATH);
  final String tables=String.format(%s.migration_test,DATABASE.getDatabaseName(),DATABASE.getDatabaseName());
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,tables).with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).build();
  start(MySqlConnector.class,config);
  waitForStreamingRunning(DATABASE.getServerName());
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(create table migration_test (id varchar(20) null,mgb_no varchar(20) null),create unique index migration_test_mgb_no_uindex on migration_test (mgb_no),insert into migration_test values(1,'2'));
    }
   }
   SourceRecords records=consumeRecordsByTopic(15);
  final List<SourceRecord> migrationTestRecords=records.recordsForTopic(DATABASE.topicForTable(migration_test));
  assertThat(migrationTestRecords.size()).isEqualTo(1);
  final SourceRecord record=migrationTestRecords.get(0);
  assertThat(((Struct)record.key()).getString(mgb_no)).isEqualTo(2);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(13);
  stopConnector();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",920
1182,"'-tryline","@Test @FixFor(DBZ-977) public void shouldIgnoreAlterTableForNonCapturedTablesStoredInHistory() throws SQLException, InterruptedException {
  Testing.Files.delete(DB_HISTORY_PATH);
  final String tables=String.format(%s.customers,DATABASE.getDatabaseName(),DATABASE.getDatabaseName());
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,tables).with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).build();
  dropDatabases();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(1 + 1 + 2+ 2 * 4);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(1 + 2 + 2 * 4);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(ALTER TABLE orders ADD COLUMN (newcol INT));
      connection.execute(ALTER TABLE customers ADD COLUMN (newcol INT));
      connection.execute(INSERT INTO customers VALUES  + (default,'name','surname','email',1););
    }
   }
   records=consumeRecordsByTopic(3);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(customers)).size()).isEqualTo(1);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(2);
  stopConnector();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",971
1183,"'-tryline","@Test @FixFor(DBZ-1264) public void shouldIgnoreCreateIndexForNonCapturedTablesNotStoredInHistory() throws SQLException, InterruptedException {
  Testing.Files.delete(DB_HISTORY_PATH);
  final String tables=String.format(%s.customers,DATABASE.getDatabaseName(),DATABASE.getDatabaseName());
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,tables).with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(DatabaseHistory.STORE_ONLY_MONITORED_TABLES_DDL,true).build();
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(CREATE TABLE nonmon (id INT));
    }
   }
   start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(6);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(5);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(CREATE UNIQUE INDEX pk ON nonmon(id),INSERT INTO customers VALUES (default,'name','surname','email'););
    }
   }
   final SourceRecord record=consumeRecord();
  Assertions.assertThat(record.topic()).isEqualTo(DATABASE.topicForTable(customers));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",1009
1184,"'-tryline","@Test @FixFor(DBZ-683) public void shouldReceiveSchemaForNonWhitelistedTablesAndDatabases() throws SQLException, InterruptedException {
  Testing.Files.delete(DB_HISTORY_PATH);
  final String tables=String.format(%s.customers,%s.orders,DATABASE.getDatabaseName(),DATABASE.getDatabaseName());
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,tables).with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,.*).build();
  dropDatabases();
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(mysql)){
    try (JdbcConnection connection=db.connect()){
      connection.execute(CREATE DATABASE non_wh,USE non_wh,CREATE TABLE t1 (ID INT PRIMARY KEY));
    }
   }
   start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(1 + 1 + 2+ 2 * 4 + 1 + 2 + 2);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(1 + 2 + 2 * 4);
  stopConnector();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",1048
1185,"'-tryline","@Test @FixFor(DBZ-1546) public void shouldHandleIncludeListTables() throws SQLException, InterruptedException {
  Testing.Files.delete(DB_HISTORY_PATH);
  final String tables=String.format(%s.customers, %s.orders,DATABASE.getDatabaseName(),DATABASE.getDatabaseName());
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,tables).with(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,.*).build();
  dropDatabases();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(1 + 1 + 2+ 2 * 4 + 1 + 2 + 2);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(1 + 2 + 2 * 4);
  stopConnector();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",1086
1186,"'-tryline","@Test public void shouldHandleWhitelistedTables() throws SQLException, InterruptedException {
  Testing.Files.delete(DB_HISTORY_PATH);
  final String tables=String.format(%s.customers, %s.orders,DATABASE.getDatabaseName(),DATABASE.getDatabaseName());
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.TABLE_WHITELIST,tables).with(MySqlConnectorConfig.DATABASE_WHITELIST,.*).build();
  dropDatabases();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(1 + 1 + 2+ 2 * 4 + 1 + 2 + 2);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(1 + 2 + 2 * 4);
  stopConnector();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",1113
1187,"'-tryline","private void dropDatabases() throws SQLException {
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(mysql)){
    try (JdbcConnection connection=db.connect()){
      connection.query(SHOW DATABASES,rs -> {
        while (rs.next()) {
          final String dbName=rs.getString(1);
          if (!Filters.isBuiltInDatabase(dbName) && !dbName.equals(DATABASE.getDatabaseName())) {
            connection.execute(DROP DATABASE IF EXISTS  + dbName);
          }
        }
      }
);
    }
   }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",1139
1188,"'-tryline","public void readFromDatabase(ResultSet rs) throws SQLException {
  if (rs.next()) {
    binlogFilename=rs.getString(1);
    binlogPosition=rs.getLong(2);
    if (rs.getMetaData().getColumnCount() > 4) {
      gtidSet=rs.getString(5);
    }
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",1159
1189,"'-tryline","@Test public void shouldConsumeEventsWithNoSnapshot() throws SQLException, InterruptedException {
  Testing.Files.delete(DB_HISTORY_PATH);
  config=RO_DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(INITIAL_EVENT_COUNT);
  assertThat(recordsForTopicForRoProductsTable(records).size()).isEqualTo(9);
  assertThat(records.recordsForTopic(RO_DATABASE.topicForTable(products_on_hand)).size()).isEqualTo(9);
  assertThat(records.recordsForTopic(RO_DATABASE.topicForTable(customers)).size()).isEqualTo(4);
  assertThat(records.recordsForTopic(RO_DATABASE.topicForTable(orders)).size()).isEqualTo(5);
  assertThat(records.recordsForTopic(RO_DATABASE.topicForTable(Products)).size()).isEqualTo(9);
  assertThat(records.topics().size()).isEqualTo(4 + 1);
  assertThat(records.ddlRecordsForDatabase(RO_DATABASE.getDatabaseName()).size()).isEqualTo(6);
  Optional<SourceRecord> recordWithScientfic=records.recordsForTopic(RO_DATABASE.topicForTable(Products)).stream().filter(x -> hammer2.equals(getAfter(x).get(name))).findFirst();
  assertThat(recordWithScientfic.isPresent());
  assertThat(getAfter(recordWithScientfic.get()).get(weight)).isEqualTo(0.875);
  records.forEach(this::validate);
  stopConnector();
  records.recordsForTopic(RO_DATABASE.topicForTable(orders)).forEach(record -> {
    print(record);
  }
);
  records.recordsForTopic(RO_DATABASE.topicForTable(customers)).forEach(record -> {
    print(record);
  }
);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",1196
1190,"'-tryline","@Test @FixFor(DBZ-1962) public void shouldConsumeEventsWithIncludedColumns() throws SQLException, InterruptedException {
  Testing.Files.delete(DB_HISTORY_PATH);
  config=RO_DATABASE.defaultConfig().with(MySqlConnectorConfig.COLUMN_INCLUDE_LIST,RO_DATABASE.qualifiedTableName(orders) + .order_number).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(9 + 9 + 4+ 5+ 1);
  assertThat(records.recordsForTopic(RO_DATABASE.topicForTable(orders)).size()).isEqualTo(5);
  assertThat(records.topics().size()).isEqualTo(5);
  records.forEach(this::validate);
  stopConnector();
  records.recordsForTopic(RO_DATABASE.topicForTable(orders)).forEach(record -> {
    print(record);
    Struct value=((Struct)record.value()).getStruct(after);
    try {
      value.get(order_number);
    }
 catch (    DataException e) {
      fail(The 'order_number' field was not found but should exist);
    }
    try {
      value.get(order_date);
      fail(The 'order_date' field was found but should be filtered);
    }
 catch (    DataException e) {
    }
  }
);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",1241
1191,"'-tryline","@Test public void shouldConsumeEventsWithMaskedAndBlacklistedColumns() throws SQLException, InterruptedException {
  Testing.Files.delete(DB_HISTORY_PATH);
  config=RO_DATABASE.defaultConfig().with(MySqlConnectorConfig.COLUMN_EXCLUDE_LIST,RO_DATABASE.qualifiedTableName(orders) + .order_number).with(column.mask.with.12.chars,RO_DATABASE.qualifiedTableName(customers) + .email).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(9 + 9 + 4+ 5+ 1);
  assertThat(recordsForTopicForRoProductsTable(records).size()).isEqualTo(9);
  assertThat(records.recordsForTopic(RO_DATABASE.topicForTable(products_on_hand)).size()).isEqualTo(9);
  assertThat(records.recordsForTopic(RO_DATABASE.topicForTable(customers)).size()).isEqualTo(4);
  assertThat(records.recordsForTopic(RO_DATABASE.topicForTable(orders)).size()).isEqualTo(5);
  assertThat(records.topics().size()).isEqualTo(5);
  records.forEach(this::validate);
  stopConnector();
  records.recordsForTopic(RO_DATABASE.topicForTable(orders)).forEach(record -> {
    print(record);
    Struct value=(Struct)record.value();
    try {
      value.getStruct(after).get(order_number);
      fail(The 'order_number' field was found but should not exist);
    }
 catch (    DataException e) {
    }
  }
);
  records.recordsForTopic(RO_DATABASE.topicForTable(customers)).forEach(record -> {
    Struct value=(Struct)record.value();
    if (value.getStruct(after) != null) {
      assertThat(value.getStruct(after).getString(email)).isEqualTo(************);
    }
    if (value.getStruct(before) != null) {
      assertThat(value.getStruct(before).getString(email)).isEqualTo(************);
    }
    print(record);
  }
);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",1288
1192,"'-tryline","@Test @FixFor(DBZ-1015) public void shouldRewriteIdentityKey() throws InterruptedException, SQLException {
  final String tableName=products;
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(CommonConnectorConfig.TOMBSTONES_ON_DELETE,false).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(tableName)).with(MySqlConnectorConfig.INCLUDE_SQL_QUERY,true).with(MySqlConnectorConfig.MSG_KEY_COLUMNS,(.*).products:id,name).build();
  start(MySqlConnector.class,config);
  final SourceRecords records=consumeRecordsByTopic(9);
  final List<SourceRecord> recordsForTopic=records.recordsForTopic(DATABASE.topicForTable(tableName));
  recordsForTopic.forEach(record -> {
    Struct key=(Struct)record.key();
    Assertions.assertThat(key.get(id)).isNotNull();
    Assertions.assertThat(key.get(name)).isNotNull();
  }
);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",2172
1193,"'-tryline","@Test @FixFor(DBZ-2957) public void shouldRewriteIdentityKeyWithWhitespace() throws InterruptedException, SQLException {
  final String tableName=products;
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(CommonConnectorConfig.TOMBSTONES_ON_DELETE,false).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(tableName)).with(MySqlConnectorConfig.INCLUDE_SQL_QUERY,true).with(MySqlConnectorConfig.MSG_KEY_COLUMNS,   (.*).products:id,name   ).build();
  start(MySqlConnector.class,config);
  final SourceRecords records=consumeRecordsByTopic(9);
  final List<SourceRecord> recordsForTopic=records.recordsForTopic(DATABASE.topicForTable(tableName));
  recordsForTopic.forEach(record -> {
    Struct key=(Struct)record.key();
    Assertions.assertThat(key.get(id)).isNotNull();
    Assertions.assertThat(key.get(name)).isNotNull();
  }
);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",2202
1194,"'-tryline","@Test @FixFor(DBZ-2957) public void shouldRewriteIdentityKeyWithMsgKeyColumnsFieldRegexValidation() throws InterruptedException, SQLException {
  final String tableName=products;
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(CommonConnectorConfig.TOMBSTONES_ON_DELETE,false).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(tableName)).with(MySqlConnectorConfig.INCLUDE_SQL_QUERY,true).with(MySqlConnectorConfig.MSG_KEY_COLUMNS,(.*).products:id,name;).build();
  start(MySqlConnector.class,config);
  final SourceRecords records=consumeRecordsByTopic(9);
  final List<SourceRecord> recordsForTopic=records.recordsForTopic(DATABASE.topicForTable(tableName));
  recordsForTopic.forEach(record -> {
    Struct key=(Struct)record.key();
    Assertions.assertThat(key.get(id)).isNotNull();
    Assertions.assertThat(key.get(name)).isNotNull();
  }
);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",2232
1195,"'-tryline","@Test @FixFor(DBZ-126) public void shouldConsumeAllEventsFromDatabaseUsingBinlogAndNoSnapshot() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).build();
  start(MySqlConnector.class,config);
  int numCreateDatabase=1;
  int numCreateTables=1;
  int numDataRecords=1;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numDataRecords);
  stopConnector();
  assertThat(records).isNotNull();
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(numCreateDatabase + numCreateTables);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_126_jsontable)).size()).isEqualTo(1);
  assertThat(records.topics().size()).isEqualTo(1 + numCreateTables);
  assertThat(records.databaseNames().size()).isEqualTo(1);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(numCreateDatabase + numCreateTables);
  assertThat(records.ddlRecordsForDatabase(regression_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(connector_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(readbinlog_test)).isNull();
  records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).forEach(this::print);
  records.forEach(this::validate);
  List<String> errors=new ArrayList<>();
  records.forEach(record -> {
    Struct value=(Struct)record.value();
    if (record.topic().endsWith(dbz_126_jsontable)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      Integer i=after.getInt32(id);
      assertThat(i).isNotNull();
      String json=after.getString(json);
      String expectedBinlog=after.getString(expectedBinlogStr);
      check(json,expectedBinlog,errors::add);
    }
  }
);
  if (!errors.isEmpty()) {
    fail( + errors.size() +  errors with JSON records...+ System.lineSeparator()+ String.join(System.lineSeparator(),errors));
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorJsonIT.java",60
1196,"'-tryline","@Test public void shouldConsumeAllEventsFromDatabaseUsingSnapshot() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().build();
  start(MySqlConnector.class,config);
  int numTables=1;
  int numDataRecords=1;
  int numDdlRecords=numTables * 2 + 3;
  int numSetVariables=1;
  SourceRecords records=consumeRecordsByTopic(numDdlRecords + numSetVariables + numDataRecords);
  stopConnector();
  assertThat(records).isNotNull();
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(numDdlRecords + numSetVariables);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_126_jsontable)).size()).isEqualTo(1);
  assertThat(records.topics().size()).isEqualTo(numTables + 1);
  assertThat(records.databaseNames().size()).isEqualTo(2);
  assertThat(records.databaseNames()).containsOnly(DATABASE.getDatabaseName(),);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(numDdlRecords);
  assertThat(records.ddlRecordsForDatabase(regression_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(connector_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(readbinlog_test)).isNull();
  assertThat(records.ddlRecordsForDatabase().size()).isEqualTo(1);
  records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).forEach(this::print);
  records.forEach(this::validate);
  List<String> errors=new ArrayList<>();
  records.forEach(record -> {
    Struct value=(Struct)record.value();
    if (record.topic().endsWith(dbz_126_jsontable)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      Integer i=after.getInt32(id);
      assertThat(i).isNotNull();
      String json=after.getString(json);
      String expectedJdbc=after.getString(expectedJdbcStr);
      check(json,expectedJdbc,errors::add);
    }
  }
);
  if (!errors.isEmpty()) {
    fail( + errors.size() +  errors with JSON records...+ System.lineSeparator()+ String.join(System.lineSeparator(),errors));
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorJsonIT.java",110
1197,"'-tryline","@Test @FixFor(DBZ-61) public void shouldConsumeAllEventsFromDatabaseUsingBinlogAndNoSnapshot() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).with(database.serverTimezone,DATABASE.timezone()).build();
  start(MySqlConnector.class,config);
  waitForStreamingRunning(mysql,DATABASE.getServerName(),getStreamingNamespace());
  int numCreateDatabase=1;
  int numCreateTables=12;
  int numDataRecords=22;
  int numCreateDefiner=1;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numDataRecords+ numCreateDefiner);
  stopConnector();
  assertThat(records).isNotNull();
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(numCreateDatabase + numCreateTables + numCreateDefiner);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(t1464075356413_testtable6)).size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz84_integer_types_table)).size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_85_fractest)).size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_100_enumsettest)).size()).isEqualTo(3);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_102_charsettest)).size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_114_zerovaluetest)).size()).isEqualTo(2);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_1318_zerovaluetest)).size()).isEqualTo(2);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_123_bitvaluetest)).size()).isEqualTo(2);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_104_customers)).size()).isEqualTo(4);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_147_decimalvalues)).size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_342_timetest)).size()).isEqualTo(1);
  assertThat(records.topics().size()).isEqualTo(numCreateTables + 1);
  assertThat(records.databaseNames().size()).isEqualTo(1);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(numCreateDatabase + numCreateTables + numCreateDefiner);
  assertThat(records.ddlRecordsForDatabase(connector_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(readbinlog_test)).isNull();
  records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).forEach(this::print);
  records.forEach(this::validate);
  records.forEach(record -> {
    Struct value=(Struct)record.value();
    if (record.topic().endsWith(dbz_100_enumsettest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      String c1=after.getString(c1);
      String c2=after.getString(c2);
      if (c1.equals(a)) {
        assertThat(c2).isEqualTo(a,b,c);
      }
 else       if (c1.equals(b)) {
        assertThat(c2).isEqualTo(a,b);
      }
 else       if (c1.equals(c)) {
        assertThat(c2).isEqualTo(a);
      }
 else {
        fail(c1 didn't match expected value);
      }
    }
 else     if (record.topic().endsWith(dbz_102_charsettest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      String text=after.getString(text);
      assertThat(text).isEqualTo(äº§å“�);
    }
 else     if (record.topic().endsWith(dbz_85_fractest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      Integer c1=after.getInt32(c1);
      LocalDate c1Date=LocalDate.ofEpochDay(c1);
      assertThat(c1Date.getYear()).isEqualTo(2014);
      assertThat(c1Date.getMonth()).isEqualTo(Month.SEPTEMBER);
      assertThat(c1Date.getDayOfMonth()).isEqualTo(8);
      assertThat(io.debezium.time.Date.toEpochDay(c1Date,ADJUSTER)).isEqualTo(c1);
      Long c2=after.getInt64(c2);
      Duration c2Time=Duration.ofNanos(c2 * 1_000);
      assertThat(c2Time.toHours()).isEqualTo(17);
      assertThat(c2Time.toMinutes()).isEqualTo(1071);
      assertThat(c2Time.getSeconds()).isEqualTo(64264);
      assertThat(c2Time.getNano()).isEqualTo(780000000);
      assertThat(c2Time.toNanos()).isEqualTo(64264780000000L);
      assertThat(c2Time).isEqualTo(Duration.ofHours(17).plusMinutes(51).plusSeconds(4).plusMillis(780));
      Long c3=after.getInt64(c3);
      long c3Seconds=c3 / 1000;
      long c3Millis=c3 % 1000;
      LocalDateTime c3DateTime=LocalDateTime.ofEpochSecond(c3Seconds,(int)TimeUnit.MILLISECONDS.toNanos(c3Millis),ZoneOffset.UTC);
      assertThat(c3DateTime.getYear()).isEqualTo(2014);
      assertThat(c3DateTime.getMonth()).isEqualTo(Month.SEPTEMBER);
      assertThat(c3DateTime.getDayOfMonth()).isEqualTo(8);
      assertThat(c3DateTime.getHour()).isEqualTo(17);
      assertThat(c3DateTime.getMinute()).isEqualTo(51);
      assertThat(c3DateTime.getSecond()).isEqualTo(4);
      assertThat(c3DateTime.getNano()).isEqualTo((int)TimeUnit.MILLISECONDS.toNanos(780));
      assertThat(io.debezium.time.Timestamp.toEpochMillis(c3DateTime,ADJUSTER)).isEqualTo(c3);
      String c4=after.getString(c4);
      assertTimestamp(c4);
    }
 else     if (record.topic().endsWith(dbz_114_zerovaluetest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      assertThat(after.getInt32(c1)).isNull();
      Long c2=after.getInt64(c2);
      Duration c2Time=Duration.ofNanos(c2 * 1_000);
      assertThat(c2Time.toHours()).isEqualTo(0);
      assertThat(c2Time.toMinutes() == 1 || c2Time.toMinutes() == 0).isTrue();
      assertThat(c2Time.getSeconds() == 0 || c2Time.getSeconds() == 60).isTrue();
      assertThat(c2Time.getNano()).isEqualTo(0);
      assertThat(c2Time.toNanos() == 0 || c2Time.toNanos() == 60000000000L).isTrue();
      assertThat(c2Time.equals(Duration.ofSeconds(0)) || c2Time.equals(Duration.ofMinutes(1))).isTrue();
      assertThat(after.getInt64(c3)).isNull();
      String c4=after.getString(c4);
      OffsetDateTime c4DateTime=OffsetDateTime.parse(c4,ZonedTimestamp.FORMATTER);
      assertThat(c4DateTime.getOffset()).isEqualTo(ZoneOffset.UTC);
      c4DateTime=c4DateTime.withOffsetSameInstant(ZoneOffset.of(Z));
      assertThat(c4DateTime.getYear()).isEqualTo(1970);
      assertThat(c4DateTime.getMonth()).isEqualTo(Month.JANUARY);
      assertThat(c4DateTime.getDayOfMonth()).isEqualTo(1);
      assertThat(c4DateTime.getHour()).isIn(0,1);
      assertThat(c4DateTime.getMinute()).isEqualTo(0);
      assertThat(c4DateTime.getSecond()).isEqualTo(0);
      assertThat(c4DateTime.getNano()).isEqualTo(0);
    }
 else     if (record.topic().endsWith(dbz_123_bitvaluetest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      Boolean c1=after.getBoolean(c1);
      assertThat(c1).isEqualTo(Boolean.TRUE);
      byte[] c2=after.getBytes(c2);
      assertThat(c2.length).isEqualTo(1);
      assertThat(c2[0]).isEqualTo((byte)2);
      byte[] c3=after.getBytes(c3);
      assertThat(c3.length).isEqualTo(1);
      assertThat(c3[0]).isEqualTo((byte)64);
      byte[] c4=after.getBytes(c4);
      assertThat(c4.length).isEqualTo(8);
      assertThat(c4[0]).isEqualTo((byte)219);
      assertThat(c4[1]).isEqualTo((byte)14);
      assertThat(c4[2]).isEqualTo((byte)110);
      assertThat(c4[3]).isEqualTo((byte)1);
      assertThat(c4[4]).isEqualTo((byte)0);
      assertThat(c4[5]).isEqualTo((byte)0);
      assertThat(c4[6]).isEqualTo((byte)0);
      assertThat(c4[7]).isEqualTo((byte)0);
    }
 else     if (record.topic().endsWith(dbz_147_decimalvalues)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      Object decimalValue=after.get(decimal_value);
      assertThat(decimalValue).isInstanceOf(BigDecimal.class);
      BigDecimal bigValue=(BigDecimal)decimalValue;
      assertThat(bigValue.doubleValue()).isEqualTo(12345.67,Delta.delta(0.01));
    }
 else     if (record.topic().endsWith(dbz_342_timetest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      long c1=after.getInt64(c1);
      Duration c1Time=Duration.ofNanos(c1 * 1_000);
      Duration c1ExpectedTime=toDuration(PT517H51M4.78S);
      assertEquals(c1ExpectedTime,c1Time);
      assertEquals(c1ExpectedTime.toNanos(),c1Time.toNanos());
      assertThat(c1Time.toNanos()).isEqualTo(1864264780000000L);
      assertThat(c1Time).isEqualTo(Duration.ofHours(517).plusMinutes(51).plusSeconds(4).plusMillis(780));
      long c2=after.getInt64(c2);
      Duration c2Time=Duration.ofNanos(c2 * 1_000);
      Duration c2ExpectedTime=toDuration(-PT13H14M50S);
      assertEquals(c2ExpectedTime,c2Time);
      assertEquals(c2ExpectedTime.toNanos(),c2Time.toNanos());
      assertThat(c2Time.toNanos()).isEqualTo(-47690000000000L);
      assertTrue(c2Time.isNegative());
      assertThat(c2Time).isEqualTo(Duration.ofHours(-13).minusMinutes(14).minusSeconds(50));
      long c3=after.getInt64(c3);
      Duration c3Time=Duration.ofNanos(c3 * 1_000);
      Duration c3ExpectedTime=toDuration(-PT733H0M0.001S);
      assertEquals(c3ExpectedTime,c3Time);
      assertEquals(c3ExpectedTime.toNanos(),c3Time.toNanos());
      assertThat(c3Time.toNanos()).isEqualTo(-2638800001000000L);
      assertTrue(c3Time.isNegative());
      assertThat(c3Time).isEqualTo(Duration.ofHours(-733).minusMillis(1));
      long c4=after.getInt64(c4);
      Duration c4Time=Duration.ofNanos(c4 * 1_000);
      Duration c4ExpectedTime=toDuration(-PT1H59M59.001S);
      assertEquals(c4ExpectedTime,c4Time);
      assertEquals(c4ExpectedTime.toNanos(),c4Time.toNanos());
      assertThat(c4Time.toNanos()).isEqualTo(-7199001000000L);
      assertTrue(c4Time.isNegative());
      assertThat(c4Time).isEqualTo(Duration.ofHours(-1).minusMinutes(59).minusSeconds(59).minusMillis(1));
      long c5=after.getInt64(c5);
      Duration c5Time=Duration.ofNanos(c5 * 1_000);
      Duration c5ExpectedTime=toDuration(-PT838H59M58.999999S);
      assertEquals(c5ExpectedTime,c5Time);
      assertEquals(c5ExpectedTime.toNanos(),c5Time.toNanos());
      assertThat(c5Time.toNanos()).isEqualTo(-3020398999999000L);
      assertTrue(c5Time.isNegative());
      assertThat(c5Time).isEqualTo(Duration.ofHours(-838).minusMinutes(59).minusSeconds(58).minusNanos(999999000));
    }
  }
);
  final Struct rec1=((Struct)records.recordsForTopic(DATABASE.topicForTable(dbz_1318_zerovaluetest)).get(0).value()).getStruct(after);
  final Struct rec2=((Struct)records.recordsForTopic(DATABASE.topicForTable(dbz_1318_zerovaluetest)).get(1).value()).getStruct(after);
  assertThat(rec1.get(c1)).isNull();
  assertThat(rec1.get(c2)).isEqualTo(0L);
  assertThat(rec1.get(c3)).isNull();
  assertThat(rec1.get(c4)).isEqualTo(1970-01-01T00:00:00Z);
  assertThat(rec1.get(nnc1)).isEqualTo(0);
  assertThat(rec1.get(nnc2)).isEqualTo(0L);
  assertThat(rec1.get(nnc3)).isEqualTo(0L);
  assertThat(rec2.get(c1)).isNull();
  assertThat(rec2.get(c2)).isEqualTo(60_000_000L);
  assertThat(rec2.get(c3)).isNull();
  assertThat(rec2.get(c4)).isEqualTo(1970-01-01T00:00:00Z);
  assertThat(rec2.get(nnc1)).isEqualTo(0);
  assertThat(rec2.get(nnc2)).isEqualTo(60_000_000L);
  assertThat(rec2.get(nnc3)).isEqualTo(0L);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorRegressionIT.java",80
1198,"'-tryline","@Test @FixFor(DBZ-61) public void shouldConsumeAllEventsFromDatabaseUsingBinlogAndNoSnapshotAndConnectTimesTypes() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER).with(MySqlConnectorConfig.TIME_PRECISION_MODE,TemporalPrecisionMode.CONNECT).with(database.serverTimezone,DATABASE.timezone()).build();
  start(MySqlConnector.class,config);
  int numCreateDatabase=1;
  int numCreateTables=12;
  int numDataRecords=22;
  int numCreateDefiner=1;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numDataRecords+ numCreateDefiner);
  stopConnector();
  assertThat(records).isNotNull();
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(numCreateDatabase + numCreateTables + numCreateDefiner);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(t1464075356413_testtable6)).size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz84_integer_types_table)).size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_85_fractest)).size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_100_enumsettest)).size()).isEqualTo(3);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_102_charsettest)).size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_114_zerovaluetest)).size()).isEqualTo(2);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_123_bitvaluetest)).size()).isEqualTo(2);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_104_customers)).size()).isEqualTo(4);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_147_decimalvalues)).size()).isEqualTo(1);
  assertThat(records.topics().size()).isEqualTo(1 + numCreateTables);
  assertThat(records.databaseNames().size()).isEqualTo(1);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(numCreateDatabase + numCreateTables + numCreateDefiner);
  assertThat(records.ddlRecordsForDatabase(connector_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(readbinlog_test)).isNull();
  records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).forEach(this::print);
  records.forEach(record -> {
    Struct value=(Struct)record.value();
    if (record.topic().endsWith(dbz_100_enumsettest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      String c1=after.getString(c1);
      String c2=after.getString(c2);
      if (c1.equals(a)) {
        assertThat(c2).isEqualTo(a,b,c);
      }
 else       if (c1.equals(b)) {
        assertThat(c2).isEqualTo(a,b);
      }
 else       if (c1.equals(c)) {
        assertThat(c2).isEqualTo(a);
      }
 else {
        fail(c1 didn't match expected value);
      }
    }
 else     if (record.topic().endsWith(dbz_102_charsettest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      String text=after.getString(text);
      assertThat(text).isEqualTo(äº§å“�);
    }
 else     if (record.topic().endsWith(dbz_85_fractest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      java.util.Date c1=(java.util.Date)after.get(c1);
      LocalDate c1Date=LocalDate.ofEpochDay(c1.getTime() / TimeUnit.DAYS.toMillis(1));
      assertThat(c1Date.getYear()).isEqualTo(2014);
      assertThat(c1Date.getMonth()).isEqualTo(Month.SEPTEMBER);
      assertThat(c1Date.getDayOfMonth()).isEqualTo(8);
      java.util.Date c2=(java.util.Date)after.get(c2);
      assertThat(c2.toInstant()).isEqualTo(LocalDateTime.of(1970,1,1,17,51,4,780_000_000).atOffset(ZoneOffset.UTC).toInstant());
      java.util.Date c3=(java.util.Date)after.get(c3);
      long c3Seconds=c3.getTime() / 1000;
      long c3Millis=c3.getTime() % 1000;
      LocalDateTime c3DateTime=LocalDateTime.ofEpochSecond(c3Seconds,(int)TimeUnit.MILLISECONDS.toNanos(c3Millis),ZoneOffset.UTC);
      assertThat(c3DateTime.getYear()).isEqualTo(2014);
      assertThat(c3DateTime.getMonth()).isEqualTo(Month.SEPTEMBER);
      assertThat(c3DateTime.getDayOfMonth()).isEqualTo(8);
      assertThat(c3DateTime.getHour()).isEqualTo(17);
      assertThat(c3DateTime.getMinute()).isEqualTo(51);
      assertThat(c3DateTime.getSecond()).isEqualTo(4);
      assertThat(c3DateTime.getNano()).isEqualTo((int)TimeUnit.MILLISECONDS.toNanos(780));
      assertThat(io.debezium.time.Timestamp.toEpochMillis(c3DateTime,ADJUSTER)).isEqualTo(c3.getTime());
      String c4=after.getString(c4);
      assertTimestamp(c4);
    }
 else     if (record.topic().endsWith(dbz_114_zerovaluetest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      java.util.Date c1=(java.util.Date)after.get(c1);
      assertThat(c1).isNull();
      java.util.Date c2=(java.util.Date)after.get(c2);
      LocalTime c2Time=LocalTime.ofNanoOfDay(TimeUnit.MILLISECONDS.toNanos(c2.getTime()));
      assertThat(c2Time.getHour()).isEqualTo(0);
      assertThat(c2Time.getMinute() == 0 || c2Time.getMinute() == 1).isTrue();
      assertThat(c2Time.getSecond()).isEqualTo(0);
      assertThat(c2Time.getNano()).isEqualTo(0);
      java.util.Date c3=(java.util.Date)after.get(c3);
      assertThat(c3).isNull();
      String c4=after.getString(c4);
      OffsetDateTime c4DateTime=OffsetDateTime.parse(c4,ZonedTimestamp.FORMATTER);
      assertThat(c4DateTime.getOffset()).isEqualTo(ZoneOffset.UTC);
      c4DateTime=c4DateTime.withOffsetSameInstant(ZoneOffset.of(Z));
      assertThat(c4DateTime.getYear()).isEqualTo(1970);
      assertThat(c4DateTime.getMonth()).isEqualTo(Month.JANUARY);
      assertThat(c4DateTime.getDayOfMonth()).isEqualTo(1);
      assertThat(c4DateTime.getHour()).isIn(0,1);
      assertThat(c4DateTime.getMinute()).isEqualTo(0);
      assertThat(c4DateTime.getSecond()).isEqualTo(0);
      assertThat(c4DateTime.getNano()).isEqualTo(0);
    }
 else     if (record.topic().endsWith(dbz_123_bitvaluetest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      Boolean c1=after.getBoolean(c1);
      assertThat(c1).isEqualTo(Boolean.TRUE);
      byte[] c2=after.getBytes(c2);
      assertThat(c2.length).isEqualTo(1);
      assertThat(c2[0]).isEqualTo((byte)2);
      byte[] c3=after.getBytes(c3);
      assertThat(c3.length).isEqualTo(1);
      assertThat(c3[0]).isEqualTo((byte)64);
      byte[] c4=after.getBytes(c4);
      assertThat(c4.length).isEqualTo(8);
      assertThat(c4[0]).isEqualTo((byte)219);
      assertThat(c4[1]).isEqualTo((byte)14);
      assertThat(c4[2]).isEqualTo((byte)110);
      assertThat(c4[3]).isEqualTo((byte)1);
      assertThat(c4[4]).isEqualTo((byte)0);
      assertThat(c4[5]).isEqualTo((byte)0);
      assertThat(c4[6]).isEqualTo((byte)0);
      assertThat(c4[7]).isEqualTo((byte)0);
    }
 else     if (record.topic().endsWith(dbz_147_decimalvalues)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      Object decimalValue=after.get(decimal_value);
      assertThat(decimalValue).isInstanceOf(BigDecimal.class);
      BigDecimal bigValue=(BigDecimal)decimalValue;
      assertThat(bigValue.doubleValue()).isEqualTo(12345.67,Delta.delta(0.01));
    }
  }
);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorRegressionIT.java",365
1199,"'-tryline","@Test public void shouldConsumeAllEventsFromDatabaseUsingSnapshot() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().build();
  start(MySqlConnector.class,config);
  int numTables=12;
  int numDataRecords=22;
  int numDdlRecords=numTables * 2 + 3;
  int numCreateDefiner=1;
  int numSetVariables=1;
  SourceRecords records=consumeRecordsByTopic(numDdlRecords + numSetVariables + numDataRecords);
  stopConnector();
  assertThat(records).isNotNull();
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(numDdlRecords + numSetVariables);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(t1464075356413_testtable6)).size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz84_integer_types_table)).size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_85_fractest)).size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_100_enumsettest)).size()).isEqualTo(3);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_102_charsettest)).size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_114_zerovaluetest)).size()).isEqualTo(2);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_1318_zerovaluetest)).size()).isEqualTo(2);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_123_bitvaluetest)).size()).isEqualTo(2);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_104_customers)).size()).isEqualTo(4);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_147_decimalvalues)).size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_195_numvalues)).size()).isEqualTo(3);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_342_timetest)).size()).isEqualTo(1);
  assertThat(records.topics().size()).isEqualTo(numTables + 1);
  assertThat(records.databaseNames().size()).isEqualTo(2);
  assertThat(records.databaseNames()).containsOnly(DATABASE.getDatabaseName(),);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(numDdlRecords);
  assertThat(records.ddlRecordsForDatabase(connector_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(readbinlog_test)).isNull();
  assertThat(records.ddlRecordsForDatabase().size()).isEqualTo(1);
  records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).forEach(this::print);
  records.forEach(this::validate);
  records.forEach(record -> {
    Struct value=(Struct)record.value();
    if (record.topic().endsWith(dbz_100_enumsettest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      String c1=after.getString(c1);
      String c2=after.getString(c2);
      if (c1.equals(a)) {
        assertThat(c2).isEqualTo(a,b,c);
      }
 else       if (c1.equals(b)) {
        assertThat(c2).isEqualTo(a,b);
      }
 else       if (c1.equals(c)) {
        assertThat(c2).isEqualTo(a);
      }
 else {
        fail(c1 didn't match expected value);
      }
    }
 else     if (record.topic().endsWith(dbz_102_charsettest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      String text=after.getString(text);
      assertThat(text).isEqualTo(äº§å“�);
    }
 else     if (record.topic().endsWith(dbz_85_fractest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      Integer c1=after.getInt32(c1);
      LocalDate c1Date=LocalDate.ofEpochDay(c1);
      assertThat(c1Date.getYear()).isEqualTo(2014);
      assertThat(c1Date.getMonth()).isEqualTo(Month.SEPTEMBER);
      assertThat(c1Date.getDayOfMonth()).isEqualTo(8);
      assertThat(io.debezium.time.Date.toEpochDay(c1Date,ADJUSTER)).isEqualTo(c1);
      Long c2=after.getInt64(c2);
      Duration c2Time=Duration.ofNanos(c2 * 1_000);
      assertThat(c2Time.toHours()).isEqualTo(17);
      assertThat(c2Time.toMinutes()).isEqualTo(1071);
      assertThat(c2Time.getSeconds()).isEqualTo(64264);
      assertThat(c2Time.getNano()).isEqualTo(780000000);
      assertThat(c2Time.toNanos()).isEqualTo(64264780000000L);
      assertThat(c2Time).isEqualTo(Duration.ofHours(17).plusMinutes(51).plusSeconds(4).plusMillis(780));
      Long c3=after.getInt64(c3);
      long c3Seconds=c3 / 1000;
      long c3Millis=c3 % 1000;
      LocalDateTime c3DateTime=LocalDateTime.ofEpochSecond(c3Seconds,(int)TimeUnit.MILLISECONDS.toNanos(c3Millis),ZoneOffset.UTC);
      assertThat(c3DateTime.getYear()).isEqualTo(2014);
      assertThat(c3DateTime.getMonth()).isEqualTo(Month.SEPTEMBER);
      assertThat(c3DateTime.getDayOfMonth()).isEqualTo(8);
      assertThat(c3DateTime.getHour()).isEqualTo(17);
      assertThat(c3DateTime.getMinute()).isEqualTo(51);
      assertThat(c3DateTime.getSecond()).isEqualTo(4);
      assertThat(c3DateTime.getNano()).isEqualTo((int)TimeUnit.MILLISECONDS.toNanos(780));
      assertThat(io.debezium.time.Timestamp.toEpochMillis(c3DateTime,ADJUSTER)).isEqualTo(c3);
      String c4=after.getString(c4);
      OffsetDateTime c4DateTime=OffsetDateTime.parse(c4,ZonedTimestamp.FORMATTER);
      assertThat(c4DateTime.getYear()).isEqualTo(2014);
      assertThat(c4DateTime.getMonth()).isEqualTo(Month.SEPTEMBER);
      assertThat(c4DateTime.getDayOfMonth()).isEqualTo(9);
      assertThat(c4DateTime.getHour()).isEqualTo(4);
      assertThat(c4DateTime.getMinute()).isEqualTo(51);
      assertThat(c4DateTime.getSecond()).isEqualTo(4);
      assertThat(c4DateTime.getNano()).isEqualTo((int)TimeUnit.MILLISECONDS.toNanos(780));
      OffsetDateTime expected=ZonedDateTime.of(LocalDateTime.of(2014,9,8,17,51,4,(int)TimeUnit.MILLISECONDS.toNanos(780)),UniqueDatabase.TIMEZONE).withZoneSameInstant(ZoneOffset.UTC).toOffsetDateTime();
      assertThat(c4DateTime).isEqualTo(expected);
    }
 else     if (record.topic().endsWith(dbz_123_bitvaluetest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      Boolean c1=after.getBoolean(c1);
      assertThat(c1).isEqualTo(Boolean.TRUE);
      byte[] c2=after.getBytes(c2);
      assertThat(c2.length).isEqualTo(1);
      assertThat(c2[0]).isEqualTo((byte)2);
      byte[] c3=after.getBytes(c3);
      assertThat(c3.length).isEqualTo(1);
      assertThat(c3[0]).isEqualTo((byte)64);
      byte[] c4=after.getBytes(c4);
      assertThat(c4.length).isEqualTo(8);
      assertThat(c4[0]).isEqualTo((byte)219);
      assertThat(c4[1]).isEqualTo((byte)14);
      assertThat(c4[2]).isEqualTo((byte)110);
      assertThat(c4[3]).isEqualTo((byte)1);
      assertThat(c4[4]).isEqualTo((byte)0);
      assertThat(c4[5]).isEqualTo((byte)0);
      assertThat(c4[6]).isEqualTo((byte)0);
      assertThat(c4[7]).isEqualTo((byte)0);
    }
 else     if (record.topic().endsWith(dbz_147_decimalvalues)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      Object decimalValue=after.get(decimal_value);
      assertThat(decimalValue).isInstanceOf(BigDecimal.class);
      BigDecimal bigValue=(BigDecimal)decimalValue;
      assertThat(bigValue.doubleValue()).isEqualTo(12345.67,Delta.delta(0.01));
    }
 else     if (record.topic().endsWith(dbz_195_numvalues)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      Object searchVersion=after.get(search_version_read);
      assertThat(searchVersion).isInstanceOf(Integer.class);
      Integer intValue=(Integer)searchVersion;
      if (intValue.intValue() < 0) {
        assertThat(intValue.intValue()).isEqualTo(-2147483648);
      }
 else       if (intValue.intValue() > 0) {
        assertThat(intValue.intValue()).isEqualTo(2147483647);
      }
 else {
        assertThat(intValue.intValue()).isEqualTo(0);
      }
    }
 else     if (record.topic().endsWith(dbz_342_timetest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      long c1=after.getInt64(c1);
      Duration c1Time=Duration.ofNanos(c1 * 1_000);
      Duration c1ExpectedTime=toDuration(PT517H51M4.78S);
      assertEquals(c1ExpectedTime,c1Time);
      assertEquals(c1ExpectedTime.toNanos(),c1Time.toNanos());
      assertThat(c1Time.toNanos()).isEqualTo(1864264780000000L);
      assertThat(c1Time).isEqualTo(Duration.ofHours(517).plusMinutes(51).plusSeconds(4).plusMillis(780));
      long c2=after.getInt64(c2);
      Duration c2Time=Duration.ofNanos(c2 * 1_000);
      Duration c2ExpectedTime=toDuration(-PT13H14M50S);
      assertEquals(c2ExpectedTime,c2Time);
      assertEquals(c2ExpectedTime.toNanos(),c2Time.toNanos());
      assertThat(c2Time.toNanos()).isEqualTo(-47690000000000L);
      assertTrue(c2Time.isNegative());
      assertThat(c2Time).isEqualTo(Duration.ofHours(-13).minusMinutes(14).minusSeconds(50));
      long c3=after.getInt64(c3);
      Duration c3Time=Duration.ofNanos(c3 * 1_000);
      Duration c3ExpectedTime=toDuration(-PT733H0M0.001S);
      assertEquals(c3ExpectedTime,c3Time);
      assertEquals(c3ExpectedTime.toNanos(),c3Time.toNanos());
      assertThat(c3Time.toNanos()).isEqualTo(-2638800001000000L);
      assertTrue(c3Time.isNegative());
      assertThat(c3Time).isEqualTo(Duration.ofHours(-733).minusMillis(1));
      long c4=after.getInt64(c4);
      Duration c4Time=Duration.ofNanos(c4 * 1_000);
      Duration c4ExpectedTime=toDuration(-PT1H59M59.001S);
      assertEquals(c4ExpectedTime,c4Time);
      assertEquals(c4ExpectedTime.toNanos(),c4Time.toNanos());
      assertThat(c4Time.toNanos()).isEqualTo(-7199001000000L);
      assertTrue(c4Time.isNegative());
      assertThat(c4Time).isEqualTo(Duration.ofHours(-1).minusMinutes(59).minusSeconds(59).minusMillis(1));
      long c5=after.getInt64(c5);
      Duration c5Time=Duration.ofNanos(c5 * 1_000);
      Duration c5ExpectedTime=toDuration(-PT838H59M58.999999S);
      assertEquals(c5ExpectedTime,c5Time);
      assertEquals(c5ExpectedTime.toNanos(),c5Time.toNanos());
      assertThat(c5Time.toNanos()).isEqualTo(-3020398999999000L);
      assertTrue(c5Time.isNegative());
      assertThat(c5Time).isEqualTo(Duration.ofHours(-838).minusMinutes(59).minusSeconds(58).minusNanos(999999000));
    }
  }
);
  try (MySqlTestConnection conn=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    final Struct rec1=((Struct)records.recordsForTopic(DATABASE.topicForTable(dbz_1318_zerovaluetest)).get(0).value()).getStruct(after);
    final Struct rec2=((Struct)records.recordsForTopic(DATABASE.topicForTable(dbz_1318_zerovaluetest)).get(1).value()).getStruct(after);
    assertThat(rec1.get(c1)).isNull();
    assertThat(rec1.get(c2)).isEqualTo(0L);
    assertThat(rec1.get(c3)).isNull();
    assertThat(rec1.get(c4)).isEqualTo(conn.databaseAsserts().currentDateTimeDefaultOptional(1970-01-01T00:00:00Z));
    assertThat(rec1.get(nnc1)).isEqualTo(0);
    assertThat(rec1.get(nnc2)).isEqualTo(0L);
    assertThat(rec1.get(nnc3)).isEqualTo(0L);
    assertThat(rec2.get(c1)).isNull();
    assertThat(rec2.get(c2)).isEqualTo(60_000_000L);
    assertThat(rec2.get(c3)).isNull();
    assertThat(rec2.get(c4)).isEqualTo(conn.databaseAsserts().currentDateTimeDefaultOptional(1970-01-01T00:00:00Z));
    assertThat(rec2.get(nnc1)).isEqualTo(0);
    assertThat(rec2.get(nnc2)).isEqualTo(60_000_000L);
    assertThat(rec2.get(nnc3)).isEqualTo(0L);
  }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorRegressionIT.java",573
1200,"'-tryline","@Test public void shouldConsumeDatesCorrectlyWhenClientTimezonePrecedesServerTimezoneUsingSnapshot() throws SQLException, InterruptedException {
  TimeZone originalTimeZone=TimeZone.getDefault();
  try {
    TimeZone.setDefault(TimeZone.getTimeZone(GMT-12));
    config=DATABASE.defaultConfig().with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(dbz_85_fractest)).with(DatabaseHistory.STORE_ONLY_MONITORED_TABLES_DDL,true).build();
    start(MySqlConnector.class,config);
    int numDdlRecords=6;
    int numDataRecords=1;
    SourceRecords records=consumeRecordsByTopic(numDdlRecords + numDataRecords);
    stopConnector();
    assertThat(records).isNotNull();
    assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(numDdlRecords);
    assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_85_fractest)).size()).isEqualTo(1);
    assertThat(records.topics().size()).isEqualTo(2);
    records.forEach(this::validate);
    records.forEach(record -> {
      Struct value=(Struct)record.value();
      if (record.topic().endsWith(dbz_85_fractest)) {
        Struct after=value.getStruct(Envelope.FieldName.AFTER);
        Integer c1=after.getInt32(c1);
        LocalDate c1Date=LocalDate.ofEpochDay(c1);
        assertThat(c1Date.getYear()).isEqualTo(2014);
        assertThat(c1Date.getMonth()).isEqualTo(Month.SEPTEMBER);
        assertThat(c1Date.getDayOfMonth()).isEqualTo(8);
        assertThat(io.debezium.time.Date.toEpochDay(c1Date,ADJUSTER)).isEqualTo(c1);
        Long c2=after.getInt64(c2);
        Duration c2Time=Duration.ofNanos(c2 * 1_000);
        assertThat(c2Time.toHours()).isEqualTo(17);
        assertThat(c2Time.toMinutes()).isEqualTo(1071);
        assertThat(c2Time.getSeconds()).isEqualTo(64264);
        assertThat(c2Time.getNano()).isEqualTo(780000000);
        assertThat(c2Time.toNanos()).isEqualTo(64264780000000L);
        assertThat(c2Time).isEqualTo(Duration.ofHours(17).plusMinutes(51).plusSeconds(4).plusMillis(780));
        Long c3=after.getInt64(c3);
        long c3Seconds=c3 / 1000;
        long c3Millis=c3 % 1000;
        LocalDateTime c3DateTime=LocalDateTime.ofEpochSecond(c3Seconds,(int)TimeUnit.MILLISECONDS.toNanos(c3Millis),ZoneOffset.UTC);
        assertThat(c3DateTime.getYear()).isEqualTo(2014);
        assertThat(c3DateTime.getMonth()).isEqualTo(Month.SEPTEMBER);
        assertThat(c3DateTime.getDayOfMonth()).isEqualTo(8);
        assertThat(c3DateTime.getHour()).isEqualTo(17);
        assertThat(c3DateTime.getMinute()).isEqualTo(51);
        assertThat(c3DateTime.getSecond()).isEqualTo(4);
        assertThat(c3DateTime.getNano()).isEqualTo((int)TimeUnit.MILLISECONDS.toNanos(780));
        assertThat(io.debezium.time.Timestamp.toEpochMillis(c3DateTime,ADJUSTER)).isEqualTo(c3);
        String c4=after.getString(c4);
        assertTimestamp(c4);
      }
    }
);
  }
  finally {
    TimeZone.setDefault(originalTimeZone);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorRegressionIT.java",837
1201,"'-tryline","@Test @FixFor(DBZ-147) public void shouldConsumeAllEventsFromDecimalTableInDatabaseUsingBinlogAndNoSnapshot() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(dbz_147_decimalvalues)).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER.toString()).with(MySqlConnectorConfig.DECIMAL_HANDLING_MODE,DecimalHandlingMode.DOUBLE).build();
  start(MySqlConnector.class,config);
  waitForStreamingRunning(mysql,DATABASE.getServerName(),getStreamingNamespace());
  int numCreateDatabase=1;
  int numCreateTables=10;
  int numDataRecords=1;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numDataRecords);
  stopConnector();
  assertThat(records).isNotNull();
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(numCreateDatabase + numCreateTables);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_147_decimalvalues)).size()).isEqualTo(1);
  assertThat(records.topics().size()).isEqualTo(2);
  records.forEach(this::validate);
  records.forEach(record -> {
    Struct value=(Struct)record.value();
    if (record.topic().endsWith(dbz_147_decimalvalues)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      Object decimalValue=after.get(decimal_value);
      assertThat(decimalValue).isInstanceOf(Double.class);
      Double doubleValue=(Double)decimalValue;
      assertThat(doubleValue).isEqualTo(12345.67,Delta.delta(0.01));
    }
  }
);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorRegressionIT.java",925
1202,"'-tryline","@Test @FixFor(DBZ-611) public void shouldConsumeDecimalAsStringFromBinlog() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(dbz_147_decimalvalues)).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER.toString()).with(MySqlConnectorConfig.DECIMAL_HANDLING_MODE,DecimalHandlingMode.STRING).build();
  start(MySqlConnector.class,config);
  int numCreateDatabase=1;
  int numCreateTables=10;
  int numDataRecords=1;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numDataRecords);
  stopConnector();
  assertThat(records).isNotNull();
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(numCreateDatabase + numCreateTables);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_147_decimalvalues)).size()).isEqualTo(1);
  assertThat(records.topics().size()).isEqualTo(2);
  records.forEach(this::validate);
  records.forEach(record -> {
    Struct value=(Struct)record.value();
    if (record.topic().endsWith(dbz_147_decimalvalues)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      Object decimalValue=after.get(decimal_value);
      assertThat(decimalValue).isInstanceOf(String.class);
      assertThat(decimalValue).isEqualTo(12345.67);
    }
  }
);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorRegressionIT.java",967
1203,"'-tryline","@Test @FixFor(DBZ-611) public void shouldConsumeDecimalAsStringFromSnapshot() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(dbz_147_decimalvalues)).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(DatabaseHistory.STORE_ONLY_MONITORED_TABLES_DDL,true).with(MySqlConnectorConfig.DECIMAL_HANDLING_MODE,DecimalHandlingMode.STRING).build();
  start(MySqlConnector.class,config);
  int ddlRecords=6;
  int numDataRecords=1;
  SourceRecords records=consumeRecordsByTopic(ddlRecords + numDataRecords);
  stopConnector();
  assertThat(records).isNotNull();
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(ddlRecords);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_147_decimalvalues)).size()).isEqualTo(1);
  assertThat(records.topics().size()).isEqualTo(2);
  records.forEach(this::validate);
  records.forEach(record -> {
    Struct value=(Struct)record.value();
    if (record.topic().endsWith(dbz_147_decimalvalues)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      Object decimalValue=after.get(decimal_value);
      assertThat(decimalValue).isInstanceOf(String.class);
      assertThat(decimalValue).isEqualTo(12345.67);
    }
  }
);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorRegressionIT.java",1007
1204,"'-tryline","@Test @FixFor(DBZ-1194) public void shouldAcceptAllZeroDatetimeInPrimaryKey() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).build();
  start(MySqlConnector.class,config);
  final int numDatabase=3;
  final int numTables=2;
  final int numInserts=1;
  final int numOthers=1;
  SourceRecords records=consumeRecordsByTopic(numDatabase + numTables + numInserts+ numOthers);
  assertThat(records).isNotNull();
  records.forEach(this::validate);
  List<SourceRecord> changes=records.recordsForTopic(DATABASE.topicForTable(dbz_1194_datetime_key_test));
  assertThat(changes).hasSize(1);
  assertKey(changes);
  try (final Connection conn=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName()).connection()){
    conn.createStatement().execute(SET sql_mode='';);
    conn.createStatement().execute(INSERT INTO dbz_1194_datetime_key_test VALUES (default, '0000-00-00 00:00:00', '0000-00-00', '00:00:00'));
  }
   records=consumeRecordsByTopic(1);
  assertThat(records).isNotNull();
  records.forEach(this::validate);
  changes=records.recordsForTopic(DATABASE.topicForTable(dbz_1194_datetime_key_test));
  assertThat(changes).hasSize(1);
  assertKey(changes);
  stopConnector();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlDateTimeInKeyIT.java",53
1205,"'-tryline","@Test @FixFor(DBZ-751) public void shouldSetPrecisionSchemaParameter() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).build();
  start(MySqlConnector.class,config);
  int numCreateDatabase=1;
  int numCreateTables=1;
  int numInserts=1;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numInserts);
  stopConnector();
  assertThat(records).isNotNull();
  records.forEach(this::validate);
  List<SourceRecord> dmls=records.recordsForTopic(DATABASE.topicForTable(dbz_751_decimal_column_test));
  assertThat(dmls).hasSize(1);
  SourceRecord insert=dmls.get(0);
  Map<String,String> rating1SchemaParameters=insert.valueSchema().field(before).schema().field(rating1).schema().parameters();
  assertThat(rating1SchemaParameters).includes(entry(scale,0),entry(PRECISION_PARAMETER_KEY,10));
  Map<String,String> rating2SchemaParameters=insert.valueSchema().field(before).schema().field(rating2).schema().parameters();
  assertThat(rating2SchemaParameters).includes(entry(scale,4),entry(PRECISION_PARAMETER_KEY,8));
  Map<String,String> rating3SchemaParameters=insert.valueSchema().field(before).schema().field(rating3).schema().parameters();
  assertThat(rating3SchemaParameters).includes(entry(scale,0),entry(PRECISION_PARAMETER_KEY,7));
  Map<String,String> rating4SchemaParameters=insert.valueSchema().field(before).schema().field(rating4).schema().parameters();
  assertThat(rating4SchemaParameters).includes(entry(scale,0),entry(PRECISION_PARAMETER_KEY,6));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlDecimalColumnIT.java",60
1206,"'-tryline","@Test @FixFor(DBZ-730) @SkipWhenKafkaVersion(value=SkipWhenKafkaVersion.KafkaVersion.KAFKA_1XX,check=EqualityCheck.EQUAL,description=No compatible with Kafka 1.x) public void testPreciseDecimalHandlingMode() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(TABLE_NAME)).with(MySqlConnectorConfig.DECIMAL_HANDLING_MODE,RelationalDatabaseConnectorConfig.DecimalHandlingMode.PRECISE).build();
  start(MySqlConnector.class,config);
  assertBigDecimalChangeRecord(consumeInsert());
  stopConnector();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlDecimalIT.java",65
1207,"'-tryline","@Test @FixFor(DBZ-730) public void testDoubleDecimalHandlingMode() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(TABLE_NAME)).with(MySqlConnectorConfig.DECIMAL_HANDLING_MODE,RelationalDatabaseConnectorConfig.DecimalHandlingMode.DOUBLE).build();
  start(MySqlConnector.class,config);
  assertDoubleChangeRecord(consumeInsert());
  stopConnector();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlDecimalIT.java",82
1208,"'-tryline","@Test @FixFor(DBZ-730) public void testStringDecimalHandlingMode() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(TABLE_NAME)).with(MySqlConnectorConfig.DECIMAL_HANDLING_MODE,RelationalDatabaseConnectorConfig.DecimalHandlingMode.STRING).build();
  start(MySqlConnector.class,config);
  assertStringChangeRecord(consumeInsert());
  stopConnector();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlDecimalIT.java",98
1209,"'-tryline","@Test public void databaseWithDefaultCharsetTest() throws InterruptedException, SQLException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(DATA) + , + DATABASE.qualifiedTableName(DATASTREAM)).build();
  start(MySqlConnector.class,config);
  Testing.Print.enable();
  AbstractConnectorTest.SourceRecords records=consumeRecordsByTopic(7);
  final SourceRecord record=records.recordsForTopic(DATABASE.topicForTable(DATA)).get(0);
  assertThat(((Struct)record.value()).getStruct(after).getString(MESSAGE)).isEqualTo(Å½luÅ¥ouÄ�kÃ½);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(CREATE TABLE DATASTREAM (MESSAGE TEXT););
      connection.execute(INSERT INTO DATASTREAM VALUES ('Å½luÅ¥ouÄ�kÃ½'););
    }
   }
   records=consumeRecordsByTopic(2);
  final SourceRecord recordStream=records.recordsForTopic(DATABASE.topicForTable(DATASTREAM)).get(0);
  assertThat(((Struct)recordStream.value()).getStruct(after).getString(MESSAGE)).isEqualTo(Å½luÅ¥ouÄ�kÃ½);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MysqlDefaultDatabaseCharsetIT.java",50
1210,"'-tryline","@Test @FixFor(DBZ-254) public void shouldConsumeAllEventsFromDatabaseUsingBinlogAndNoSnapshot() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).build();
  start(MySqlConnector.class,config);
  int numCreateDatabase=1;
  int numCreateTables=1;
  int numInserts=4;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numInserts);
  stopConnector();
  assertThat(records).isNotNull();
  List<SourceRecord> dmls=records.recordsForTopic(DATABASE.topicForTable(dbz_254_binary_column_test));
  assertThat(dmls).hasSize(4);
  SourceRecord insert=dmls.get(0);
  Struct after=(Struct)((Struct)insert.value()).get(after);
  assertThat(encodeToBase64String((ByteBuffer)after.get(file_uuid))).isEqualTo(ZRrtCDkPSJOy8TaSPnt0AA==);
  insert=dmls.get(1);
  after=(Struct)((Struct)insert.value()).get(after);
  assertThat(encodeToBase64String((ByteBuffer)after.get(file_uuid))).isEqualTo(ZRrtCDkPSJOy8TaSPnt0qw==);
  insert=dmls.get(2);
  after=(Struct)((Struct)insert.value()).get(after);
  assertThat(encodeToBase64String((ByteBuffer)after.get(file_uuid))).isEqualTo(ZRrtCDkPSJOy8TaSPnt0AA==);
  insert=dmls.get(3);
  after=(Struct)((Struct)insert.value()).get(after);
  assertThat(encodeToBase64String((ByteBuffer)after.get(file_uuid))).isEqualTo(AAAAAAAAAAAAAAAAAAAAAA==);
  records.forEach(this::validate);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlFixedLengthBinaryColumnIT.java",57
1211,"'-tryline","@Test public void shouldConsumeAllEventsFromDatabaseUsingBinlogAndNoSnapshot() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).build();
  start(MySqlConnector.class,config);
  int numCreateDatabase=1;
  int numCreateTables=2;
  int numDataRecords=databaseDifferences.geometryPointTableRecords() + 2;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numDataRecords);
  stopConnector();
  assertThat(records).isNotNull();
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(numCreateDatabase + numCreateTables);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_222_point)).size()).isEqualTo(databaseDifferences.geometryPointTableRecords());
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_507_geometry)).size()).isEqualTo(2);
  assertThat(records.topics().size()).isEqualTo(1 + numCreateTables);
  assertThat(records.databaseNames().size()).isEqualTo(1);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(numCreateDatabase + numCreateTables);
  assertThat(records.ddlRecordsForDatabase(regression_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(connector_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(readbinlog_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(json_test)).isNull();
  records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).forEach(this::print);
  records.forEach(this::validate);
  records.forEach(record -> {
    Struct value=(Struct)record.value();
    if (record.topic().endsWith(dbz_222_point)) {
      assertPoint(value);
    }
 else     if (record.topic().endsWith(dbz_507_geometry)) {
      assertGeomRecord(value);
    }
  }
);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlGeometryIT.java",69
1212,"'-tryline","@Test public void shouldConsumeAllEventsFromDatabaseUsingSnapshot() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().build();
  start(MySqlConnector.class,config);
  int numTables=2;
  int numDataRecords=databaseDifferences.geometryPointTableRecords() + 2;
  int numDdlRecords=numTables * 2 + 3;
  int numSetVariables=1;
  SourceRecords records=consumeRecordsByTopic(numDdlRecords + numSetVariables + numDataRecords);
  stopConnector();
  assertThat(records).isNotNull();
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(numDdlRecords + numSetVariables);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_222_point)).size()).isEqualTo(databaseDifferences.geometryPointTableRecords());
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_507_geometry)).size()).isEqualTo(2);
  assertThat(records.topics().size()).isEqualTo(numTables + 1);
  assertThat(records.databaseNames()).containsOnly(DATABASE.getDatabaseName(),);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(numDdlRecords);
  assertThat(records.ddlRecordsForDatabase(regression_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(connector_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(readbinlog_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(json_test)).isNull();
  assertThat(records.ddlRecordsForDatabase().size()).isEqualTo(1);
  records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).forEach(this::print);
  records.forEach(this::validate);
  records.forEach(record -> {
    Struct value=(Struct)record.value();
    if (record.topic().endsWith(dbz_222_point)) {
      assertPoint(value);
    }
 else     if (record.topic().endsWith(dbz_507_geometry)) {
      assertGeomRecord(value);
    }
  }
);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlGeometryIT.java",115
1213,"'-tryline","@Test @FixFor(DBZ-751) public void shouldSetPrecisionSchemaParameter() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).build();
  start(MySqlConnector.class,config);
  int numCreateDatabase=1;
  int numCreateTables=1;
  int numInserts=1;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numInserts);
  stopConnector();
  assertThat(records).isNotNull();
  records.forEach(this::validate);
  List<SourceRecord> dmls=records.recordsForTopic(DATABASE.topicForTable(dbz_751_numeric_column_test));
  assertThat(dmls).hasSize(1);
  SourceRecord insert=dmls.get(0);
  Map<String,String> rating1SchemaParameters=insert.valueSchema().field(before).schema().field(rating1).schema().parameters();
  assertThat(rating1SchemaParameters).includes(entry(scale,0),entry(PRECISION_PARAMETER_KEY,10));
  Map<String,String> rating2SchemaParameters=insert.valueSchema().field(before).schema().field(rating2).schema().parameters();
  assertThat(rating2SchemaParameters).includes(entry(scale,4),entry(PRECISION_PARAMETER_KEY,8));
  Map<String,String> rating3SchemaParameters=insert.valueSchema().field(before).schema().field(rating3).schema().parameters();
  assertThat(rating3SchemaParameters).includes(entry(scale,0),entry(PRECISION_PARAMETER_KEY,7));
  Map<String,String> rating4SchemaParameters=insert.valueSchema().field(before).schema().field(rating4).schema().parameters();
  assertThat(rating4SchemaParameters).includes(entry(scale,0),entry(PRECISION_PARAMETER_KEY,6));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlNumericColumnIT.java",60
1214,"'-tryline","@Test public void shouldCorrectlyMigrateTable() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(monitored) + , + DATABASE.qualifiedTableName(_monitored_new)).build();
  final MySqlTestConnection connection=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName());
  connection.execute(create table monitored (id int auto_increment primary key, value1 varchar(100), value2 int));
  connection.execute(insert into monitored values(default, 'a1', 1));
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(1);
  connection.execute(insert into monitored values(default, 'a2', 2));
  connection.execute(CREATE TABLE `_monitored_new` ( `id` int(11) NOT NULL AUTO_INCREMENT, `value1` varchar(100) DEFAULT NULL, `value2` int(11) DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1);
  connection.execute(ALTER TABLE `_monitored_new` drop value1);
  connection.execute(insert into _monitored_new values(default, 1));
  connection.execute(insert into _monitored_new values(default, 2));
  connection.execute(RENAME TABLE `monitored` TO `_monitored_old`, `_monitored_new` TO `monitored`);
  connection.execute(insert into monitored values(default, 3));
  records=consumeRecordsByTopic(4);
  stopConnector();
  assertThat(records).isNotNull();
  records.forEach(this::validate);
  assertInsert(records.allRecordsInOrder().get(3),id,5);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlSchemaMigrationIT.java",54
1215,"'-tryline","@Test public void shouldProcessAndWarnOnNonWhitelistedMigrateTable() throws SQLException, InterruptedException {
  final LogInterceptor logInterceptor=new LogInterceptor();
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(monitored)).build();
  final MySqlTestConnection connection=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName());
  connection.execute(create table monitored (id int auto_increment primary key, value1 varchar(100), value2 int));
  connection.execute(insert into monitored values(default, 'a1', 1));
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(1);
  connection.execute(insert into monitored values(default, 'a2', 2));
  connection.execute(CREATE TABLE `_monitored_new` ( `id` int(11) NOT NULL AUTO_INCREMENT, `value1` varchar(100) DEFAULT NULL, `value2` int(11) DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1);
  connection.execute(ALTER TABLE `_monitored_new` drop value1);
  connection.execute(insert into _monitored_new values(default, 1));
  connection.execute(insert into _monitored_new values(default, 2));
  connection.execute(RENAME TABLE `monitored` TO `_monitored_old`, `_monitored_new` TO `monitored`);
  connection.execute(insert into monitored values(default, 3));
  final String msg1=Renaming whitelisted table  + DATABASE.qualifiedTableName(monitored) +  to non-whitelisted table + DATABASE.qualifiedTableName(_monitored_old)+ , this can lead to schema inconsistency;
  final String msg2=Renaming non-whitelisted table  + DATABASE.qualifiedTableName(_monitored_new) +  to whitelisted table + DATABASE.qualifiedTableName(monitored)+ , this can lead to schema inconsistency;
  records=consumeRecordsByTopic(2);
  stopConnector(value -> {
    assertThat(logInterceptor.containsWarnMessage(msg1)).isTrue();
    assertThat(logInterceptor.containsWarnMessage(msg2)).isTrue();
  }
);
  assertThat(records).isNotNull();
  records.forEach(this::validate);
  assertInsert(records.allRecordsInOrder().get(1),id,5);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlSchemaMigrationIT.java",94
1216,"'-tryline","@Test public void shouldWarnOnInvalidMigrateTable() throws SQLException, InterruptedException {
  final LogInterceptor logInterceptor=new LogInterceptor();
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(DatabaseHistory.STORE_ONLY_MONITORED_TABLES_DDL,true).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(monitored)).build();
  final MySqlTestConnection connection=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName());
  connection.execute(create table monitored (id int auto_increment primary key, value1 varchar(100), value2 int));
  connection.execute(insert into monitored values(default, 'a1', 1));
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(1);
  connection.execute(insert into monitored values(default, 'a2', 2));
  connection.execute(CREATE TABLE `_monitored_new` ( `id` int(11) NOT NULL AUTO_INCREMENT, `value1` varchar(100) DEFAULT NULL, `value2` int(11) DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1);
  connection.execute(ALTER TABLE `_monitored_new` drop value1);
  connection.execute(insert into _monitored_new values(default, 1));
  connection.execute(insert into _monitored_new values(default, 2));
  connection.execute(RENAME TABLE `monitored` TO `_monitored_old`, `_monitored_new` TO `monitored`);
  connection.execute(insert into monitored values(default, 3));
  final String msg1=Renaming whitelisted table  + DATABASE.qualifiedTableName(monitored) +  to non-whitelisted table + DATABASE.qualifiedTableName(_monitored_old)+ , this can lead to schema inconsistency;
  final String msg2=Renaming non-whitelisted table  + DATABASE.qualifiedTableName(_monitored_new) +  to whitelisted table + DATABASE.qualifiedTableName(monitored)+ , this can lead to schema inconsistency;
  records=consumeRecordsByTopic(2);
  stopConnector(value -> {
    assertThat(logInterceptor.containsWarnMessage(msg1)).isTrue();
    assertThat(logInterceptor.containsWarnMessage(msg2)).isTrue();
  }
);
  assertThat(records).isNotNull();
  records.forEach(this::validate);
  assertInsert(records.allRecordsInOrder().get(1),id,5);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlSchemaMigrationIT.java",144
1217,"'-tryline","@Test @FixFor({DBZ-644,DBZ-1222}) public void shouldPropagateSourceTypeAsSchemaParameter() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).with(column.propagate.source.type,.*\\.c1,.*\\.c2,.*\\.c3.*,.*\\.f.).build();
  start(MySqlConnector.class,config);
  int numCreateDatabase=1;
  int numCreateTables=1;
  int numInserts=1;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numInserts);
  stopConnector();
  assertThat(records).isNotNull();
  records.forEach(this::validate);
  List<SourceRecord> dmls=records.recordsForTopic(DATABASE.topicForTable(dbz_644_source_type_mapped_as_schema_parameter_test));
  assertThat(dmls).hasSize(1);
  SourceRecord insert=dmls.get(0);
  Field before=insert.valueSchema().field(before);
  Map<String,String> idSchemaParameters=before.schema().field(id).schema().parameters();
  assertThat(idSchemaParameters).isNull();
  Map<String,String> c1SchemaParameters=before.schema().field(c1).schema().parameters();
  assertThat(c1SchemaParameters).includes(entry(TYPE_NAME_PARAMETER_KEY,INT));
  Map<String,String> c2SchemaParameters=before.schema().field(c2).schema().parameters();
  assertThat(c2SchemaParameters).includes(entry(TYPE_NAME_PARAMETER_KEY,MEDIUMINT));
  Map<String,String> c3aSchemaParameters=before.schema().field(c3a).schema().parameters();
  assertThat(c3aSchemaParameters).includes(entry(TYPE_NAME_PARAMETER_KEY,NUMERIC),entry(TYPE_LENGTH_PARAMETER_KEY,5),entry(TYPE_SCALE_PARAMETER_KEY,2));
  Map<String,String> c3bSchemaParameters=before.schema().field(c3b).schema().parameters();
  assertThat(c3bSchemaParameters).includes(entry(TYPE_NAME_PARAMETER_KEY,VARCHAR),entry(TYPE_LENGTH_PARAMETER_KEY,128));
  Map<String,String> f1SchemaParameters=before.schema().field(f1).schema().parameters();
  assertThat(f1SchemaParameters).includes(entry(TYPE_NAME_PARAMETER_KEY,FLOAT),entry(TYPE_LENGTH_PARAMETER_KEY,10));
  Map<String,String> f2SchemaParameters=before.schema().field(f2).schema().parameters();
  assertThat(f2SchemaParameters).includes(entry(TYPE_NAME_PARAMETER_KEY,FLOAT),entry(TYPE_LENGTH_PARAMETER_KEY,8),entry(TYPE_SCALE_PARAMETER_KEY,4));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlSourceTypeInSchemaIT.java",63
1218,"'-tryline","@Test @FixFor(DBZ-1830) public void shouldPropagateSourceTypeByDatatype() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).with(datatype.propagate.source.type,.+\\.FLOAT,.+\\.VARCHAR).build();
  start(MySqlConnector.class,config);
  waitForStreamingRunning(mysql,DATABASE.getServerName(),getStreamingNamespace());
  int numCreateDatabase=1;
  int numCreateTables=1;
  int numInserts=1;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numInserts);
  stopConnector();
  assertThat(records).isNotNull();
  records.forEach(this::validate);
  List<SourceRecord> dmls=records.recordsForTopic(DATABASE.topicForTable(dbz_644_source_type_mapped_as_schema_parameter_test));
  assertThat(dmls).hasSize(1);
  SourceRecord insert=dmls.get(0);
  Field before=insert.valueSchema().field(before);
  Map<String,String> idSchemaParameters=before.schema().field(id).schema().parameters();
  assertThat(idSchemaParameters).isNull();
  Map<String,String> c1SchemaParameters=before.schema().field(c1).schema().parameters();
  assertThat(c1SchemaParameters).isNull();
  Map<String,String> c2SchemaParameters=before.schema().field(c2).schema().parameters();
  assertThat(c2SchemaParameters).isNull();
  Map<String,String> c3aSchemaParameters=before.schema().field(c3a).schema().parameters();
  assertThat(c3aSchemaParameters).excludes(entry(TYPE_NAME_PARAMETER_KEY,NUMERIC));
  Map<String,String> c3bSchemaParameters=before.schema().field(c3b).schema().parameters();
  assertThat(c3bSchemaParameters).includes(entry(TYPE_NAME_PARAMETER_KEY,VARCHAR),entry(TYPE_LENGTH_PARAMETER_KEY,128));
  Map<String,String> f1SchemaParameters=before.schema().field(f1).schema().parameters();
  assertThat(f1SchemaParameters).includes(entry(TYPE_NAME_PARAMETER_KEY,FLOAT),entry(TYPE_LENGTH_PARAMETER_KEY,10));
  Map<String,String> f2SchemaParameters=before.schema().field(f2).schema().parameters();
  assertThat(f2SchemaParameters).includes(entry(TYPE_NAME_PARAMETER_KEY,FLOAT),entry(TYPE_LENGTH_PARAMETER_KEY,8),entry(TYPE_SCALE_PARAMETER_KEY,4));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlSourceTypeInSchemaIT.java",160
1219,"'-tryline","@Test @FixFor(DBZ-253) public void shouldConsumeAllEventsFromDatabaseUsingBinlogAndNoSnapshot() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).build();
  start(MySqlConnector.class,config);
  int numCreateDatabase=1;
  int numCreateTables=1;
  int numTableMaintenanceStatements=3;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numTableMaintenanceStatements);
  System.out.println(records.allRecordsInOrder());
  stopConnector();
  assertThat(records).isNotNull();
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(numCreateDatabase + numCreateTables + numTableMaintenanceStatements);
  assertThat(records.databaseNames()).containsOnly(DATABASE.getDatabaseName());
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(numCreateDatabase + numCreateTables + numTableMaintenanceStatements);
  records.forEach(this::validate);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlTableMaintenanceStatementsIT.java",52
1220,"'-tryline","@Test @FixFor(DBZ-1773) public void shouldHandleTinyIntAsNumber() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(DBZ1773)).build();
  start(MySqlConnector.class,config);
  consumeInitial();
  assertIntChangeRecord();
  try (final Connection conn=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName()).connection()){
    conn.createStatement().execute(INSERT INTO DBZ1773 VALUES (DEFAULT, 100, 5, 50, true));
  }
   assertIntChangeRecord();
  stopConnector();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlTinyIntIT.java",57
1221,"'-tryline","@Test @FixFor(DBZ-1800) public void shouldHandleTinyIntOneAsBoolean() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(DBZ1773)).with(MySqlConnectorConfig.CUSTOM_CONVERTERS,boolean).with(boolean.type,TinyIntOneToBooleanConverter.class.getName()).with(boolean.selector,.*DBZ1773.b).build();
  start(MySqlConnector.class,config);
  consumeInitial();
  assertBooleanChangeRecord();
  try (final Connection conn=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName()).connection()){
    conn.createStatement().execute(INSERT INTO DBZ1773 VALUES (DEFAULT, 100, 5, 50, true));
  }
   assertBooleanChangeRecord();
  stopConnector();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlTinyIntIT.java",81
1222,"'-tryline","@Test @FixFor(DBZ-2085) public void shouldDefaultValueForTinyIntOneAsBoolean() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(DBZ2085)).with(MySqlConnectorConfig.CUSTOM_CONVERTERS,boolean).with(boolean.type,TinyIntOneToBooleanConverter.class.getName()).with(boolean.selector,.*DBZ2085.b).build();
  start(MySqlConnector.class,config);
  consumeInitial();
  assertDefaultValueBooleanChangeRecord();
  try (final Connection conn=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName()).connection()){
    conn.createStatement().execute(INSERT INTO DBZ2085 VALUES (DEFAULT, true));
  }
   assertDefaultValueBooleanChangeRecord();
  stopConnector();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlTinyIntIT.java",108
1223,"'-tryline","@Test public void shouldConsumeAllEventsFromDatabaseUsingBinlogAndNoSnapshot() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).with(MySqlConnectorConfig.BIGINT_UNSIGNED_HANDLING_MODE,MySqlConnectorConfig.BigIntUnsignedHandlingMode.PRECISE).build();
  start(MySqlConnector.class,config);
  Testing.Debug.enable();
  int numCreateDatabase=1;
  int numCreateTables=7;
  int numDataRecords=numCreateTables * 3;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numDataRecords);
  stopConnector();
  assertThat(records).isNotNull();
  assertThat(records.recordsForTopic(unsignednumericit).size()).isEqualTo(numCreateDatabase + numCreateTables);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_228_tinyint_unsigned)).size()).isEqualTo(3);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_228_smallint_unsigned)).size()).isEqualTo(3);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_228_mediumint_unsigned)).size()).isEqualTo(3);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_228_int_unsigned)).size()).isEqualTo(3);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_228_bigint_unsigned)).size()).isEqualTo(3);
  assertThat(records.topics().size()).isEqualTo(1 + numCreateTables);
  assertThat(records.databaseNames().size()).isEqualTo(1);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(numCreateDatabase + numCreateTables);
  assertThat(records.ddlRecordsForDatabase(regression_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(connector_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(readbinlog_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(json_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(geometry_test)).isNull();
  records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).forEach(this::print);
  records.forEach(this::validate);
  records.forEach(record -> {
    Struct value=(Struct)record.value();
    if (record.topic().endsWith(dbz_228_int_unsigned)) {
      assertIntUnsigned(value);
    }
 else     if (record.topic().endsWith(dbz_228_tinyint_unsigned)) {
      assertTinyintUnsigned(value);
    }
 else     if (record.topic().endsWith(dbz_228_smallint_unsigned)) {
      assertSmallUnsigned(value);
    }
 else     if (record.topic().endsWith(dbz_228_mediumint_unsigned)) {
      assertMediumUnsigned(value);
    }
 else     if (record.topic().endsWith(dbz_228_bigint_unsigned)) {
      assertBigintUnsignedPrecise(value);
    }
  }
);
  assertSerialPrecise(records.recordsForTopic(DATABASE.topicForTable(dbz_1185_serial)));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlUnsignedIntegerIT.java",60
1224,"'-tryline","@Test @FixFor(DBZ-363) public void shouldConsumeAllEventsFromBigIntTableInDatabaseUsingBinlogAndNoSnapshotUsingLong() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER.toString()).with(MySqlConnectorConfig.BIGINT_UNSIGNED_HANDLING_MODE,MySqlConnectorConfig.BigIntUnsignedHandlingMode.LONG).build();
  start(MySqlConnector.class,config);
  Testing.Debug.enable();
  int numCreateDatabase=1;
  int numCreateTables=7;
  int numDataRecords=numCreateTables * 3;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numDataRecords);
  stopConnector();
  assertThat(records).isNotNull();
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(numCreateDatabase + numCreateTables);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_228_bigint_unsigned)).size()).isEqualTo(3);
  assertThat(records.topics().size()).isEqualTo(1 + numCreateTables);
  records.forEach(this::validate);
  records.forEach(record -> {
    Struct value=(Struct)record.value();
    if (record.topic().endsWith(dbz_228_bigint_unsigned)) {
      assertBigintUnsignedLong(value);
    }
  }
);
  assertSerial(records.recordsForTopic(DATABASE.topicForTable(dbz_1185_serial)));
  assertSerialDefaultValue(records.recordsForTopic(DATABASE.topicForTable(dbz_1185_serial_default_value)));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlUnsignedIntegerIT.java",126
1225,"'-tryline","@Test public void shouldConsumeAllEventsFromDatabaseUsingSnapshot() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().build();
  start(MySqlConnector.class,config);
  int numTables=7;
  int numDataRecords=numTables * 3;
  int numDdlRecords=numTables * 2 + 3;
  int numSetVariables=1;
  SourceRecords records=consumeRecordsByTopic(numDdlRecords + numSetVariables + numDataRecords);
  stopConnector();
  assertThat(records).isNotNull();
  assertThat(records.recordsForTopic(unsignednumericit).size()).isEqualTo(numDdlRecords + numSetVariables);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_228_tinyint_unsigned)).size()).isEqualTo(3);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_228_smallint_unsigned)).size()).isEqualTo(3);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_228_mediumint_unsigned)).size()).isEqualTo(3);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_228_int_unsigned)).size()).isEqualTo(3);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_228_bigint_unsigned)).size()).isEqualTo(3);
  assertThat(records.topics().size()).isEqualTo(numTables + 1);
  assertThat(records.databaseNames()).containsOnly(DATABASE.getDatabaseName(),);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(numDdlRecords);
  assertThat(records.ddlRecordsForDatabase(regression_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(connector_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(readbinlog_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(json_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(geometry_test)).isNull();
  assertThat(records.ddlRecordsForDatabase().size()).isEqualTo(1);
  records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).forEach(this::print);
  records.forEach(this::validate);
  records.forEach(record -> {
    Struct value=(Struct)record.value();
    if (record.topic().endsWith(dbz_228_int_unsigned)) {
      assertIntUnsigned(value);
    }
 else     if (record.topic().endsWith(dbz_228_tinyint_unsigned)) {
      assertTinyintUnsigned(value);
    }
 else     if (record.topic().endsWith(dbz_228_smallint_unsigned)) {
      assertSmallUnsigned(value);
    }
 else     if (record.topic().endsWith(dbz_228_mediumint_unsigned)) {
      assertMediumUnsigned(value);
    }
 else     if (record.topic().endsWith(dbz_228_bigint_unsigned)) {
      assertBigintUnsignedLong(value);
    }
  }
);
  assertSerial(records.recordsForTopic(DATABASE.topicForTable(dbz_1185_serial)));
  assertSerialDefaultValue(records.recordsForTopic(DATABASE.topicForTable(dbz_1185_serial_default_value)));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlUnsignedIntegerIT.java",163
1226,"'-tryline","@Test @FixFor(DBZ-1143) public void shouldProcessTwoAndForDigitYearsInDatabase() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.ENABLE_TIME_ADJUSTER,false).build();
  start(MySqlConnector.class,config);
  Testing.Debug.enable();
  final int numDatabase=2;
  final int numTables=2;
  final int numOthers=2;
  consumeRecords(numDatabase + numTables + numOthers);
  assertChangeRecordByDatabase();
  try (final Connection conn=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName()).connection()){
    conn.createStatement().execute(INSERT INTO dbz_1143_year_test VALUES (\n +     default,\n +     '18',\n+     '0018',\n+     '2018',\n+     '18-04-01',\n+     '0018-04-01',\n+     '2018-04-01',\n+     '18-04-01 12:34:56',\n+     '0018-04-01 12:34:56',\n+     '2018-04-01 12:34:56',\n+     '78',\n+     '0078',\n+     '1978',\n+     '78-04-01',\n+     '0078-04-01',\n+     '1978-04-01',\n+     '78-04-01 12:34:56',\n+     '0078-04-01 12:34:56',\n+     '1978-04-01 12:34:56'+ ););
  }
   assertChangeRecordByDatabase();
  stopConnector();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlYearIT.java",56
1227,"'-tryline","@Test @FixFor(DBZ-1143) public void shouldProcessTwoAndForDigitYearsInConnector() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).build();
  start(MySqlConnector.class,config);
  Testing.Debug.enable();
  final int numDatabase=2;
  final int numTables=2;
  final int numOthers=2;
  consumeRecords(numDatabase + numTables + numOthers);
  assertChangeRecordByConnector();
  try (final Connection conn=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName()).connection()){
    conn.createStatement().execute(INSERT INTO dbz_1143_year_test VALUES (\n +     default,\n +     '18',\n+     '0018',\n+     '2018',\n+     '18-04-01',\n+     '0018-04-01',\n+     '2018-04-01',\n+     '18-04-01 12:34:56',\n+     '0018-04-01 12:34:56',\n+     '2018-04-01 12:34:56',\n+     '78',\n+     '0078',\n+     '1978',\n+     '78-04-01',\n+     '0078-04-01',\n+     '1978-04-01',\n+     '78-04-01 12:34:56',\n+     '0078-04-01 12:34:56',\n+     '1978-04-01 12:34:56'+ ););
  }
   assertChangeRecordByConnector();
  stopConnector();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlYearIT.java",107
1228,"'-tryline","@Before public void beforeEach() throws TimeoutException, IOException, SQLException, InterruptedException {
  events.clear();
  DATABASE.createAndInitialize();
  conn=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName());
  conn.connect();
  config=conn.config();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\ReadBinLogIT.java",81
1229,"'-tryline","@After public void afterEach() throws IOException, SQLException {
  events.clear();
  try {
    if (client != null) {
      client.disconnect();
    }
  }
  finally {
    client=null;
    try {
      if (conn != null) {
        conn.close();
      }
    }
  finally {
      conn=null;
    }
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\ReadBinLogIT.java",94
1230,"'-tryline","protected void startClient() throws IOException, TimeoutException, SQLException {
  startClient(null);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\ReadBinLogIT.java",115
1231,"'-tryline","protected void startClient(Consumer<BinaryLogClient> preConnect) throws IOException, TimeoutException, SQLException {
  counters=new EventQueue(DEFAULT_TIMEOUT,this::logConsumedEvent,this::logIgnoredEvent);
  client=new BinaryLogClient(config.getHostname(),config.getPort(),replicator,replpass);
  client.setServerId(client.getServerId() - 1);
  client.setKeepAlive(false);
  client.setSSLMode(SSLMode.DISABLED);
  client.registerEventListener(counters);
  client.registerEventListener(this::recordEvent);
  client.registerLifecycleListener(new TraceLifecycleListener());
  EventDeserializer eventDeserializer=new EventDeserializer();
  eventDeserializer.setEventDataDeserializer(EventType.STOP,new StopEventDataDeserializer());
  client.setEventDeserializer(eventDeserializer);
  if (preConnect != null) {
    preConnect.accept(client);
  }
  client.connect(DEFAULT_TIMEOUT);
  conn.execute(DROP TABLE IF EXISTS person,CREATE TABLE person ( +   name VARCHAR(255) primary key, +   age INTEGER NULL DEFAULT 10,+   createdAt DATETIME NULL DEFAULT CURRENT_TIMESTAMP,+   updatedAt DATETIME NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP+ ));
  counters.consume(2,EventType.QUERY);
  counters.reset();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\ReadBinLogIT.java",119
1232,"'-tryline","private String productsTableName() throws SQLException {
  try (final MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    return db.isTableIdCaseSensitive() ? products : Products;
  }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\SnapshotSourceIT.java",395
1233,"'-tryline","private void inconsistentSchema(EventProcessingFailureHandlingMode mode) throws InterruptedException, SQLException {
  Configuration.Builder builder=simpleConfig().with(DatabaseHistory.STORE_ONLY_MONITORED_TABLES_DDL,true).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(orders));
  if (mode == null) {
    config=builder.build();
  }
 else {
    config=builder.with(MySqlConnectorConfig.INCONSISTENT_SCHEMA_HANDLING_MODE,mode).build();
  }
  start(MySqlConnector.class,config);
  int expected=5;
  int consumed=consumeAtLeast(expected);
  assertThat(consumed).isGreaterThanOrEqualTo(expected);
  stopConnector();
  config=builder.with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(orders) + , + DATABASE.qualifiedTableName(customers)).build();
  AtomicReference<Throwable> exception=new AtomicReference<>();
  start(MySqlConnector.class,config,(success,message,error) -> exception.set(error));
  try (final MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName());final JdbcConnection connection=db.connect();final Connection jdbc=connection.connection();final Statement statement=jdbc.createStatement()){
    statement.executeUpdate(INSERT INTO customers VALUES (default,'John','Lazy','john.lazy@acme.com'));
  }
   waitForStreamingRunning(mysql,DATABASE.getServerName(),streaming);
  stopConnector();
  final Throwable e=exception.get();
  if (e != null) {
    throw (RuntimeException)e;
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\StreamingSourceIT.java",526
1234,"'-tryline","private String productsTableName() throws SQLException {
  try (final MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    return db.isTableIdCaseSensitive() ? products : Products;
  }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\StreamingSourceIT.java",576
1235,"'-tryline","@Test @FixFor(DBZ-878) public void shouldReplaceInvalidTopicNameCharacters() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).build();
  start(MySqlConnector.class,config);
  int numCreateDatabase=1;
  int numCreateTables=2;
  int numInserts=2;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numInserts);
  stopConnector();
  assertThat(records).isNotNull();
  records.forEach(this::validate);
  List<SourceRecord> dmls=records.recordsForTopic(DATABASE.topicForTable(dbz_878_some_test_data));
  assertThat(dmls).hasSize(1);
  SourceRecord insert=dmls.get(0);
  assertThat(insert.valueSchema().name()).endsWith(dbz_878_some_test_data.Envelope);
  VerifyRecord.isValidInsert(insert,id,1);
  String sourceTable=((Struct)insert.value()).getStruct(source).getString(table);
  assertThat(sourceTable).isEqualTo(dbz_878_some|test@data);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\TopicNameSanitizationIT.java",58
1236,"'-tryline","@Test @FixFor(DBZ-1834) public void shouldAcceptDotInTableName() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).build();
  start(MySqlConnector.class,config);
  int numCreateDatabase=1;
  int numCreateTables=2;
  int numInserts=2;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numInserts);
  stopConnector();
  assertThat(records).isNotNull();
  records.forEach(this::validate);
  List<SourceRecord> dmls=records.recordsForTopic(DATABASE.topicForTable(DBZ.1834));
  assertThat(dmls).hasSize(1);
  SourceRecord insert=dmls.get(0);
  assertThat(insert.valueSchema().name()).endsWith(DBZ.1834.Envelope);
  VerifyRecord.isValidInsert(insert,id,1);
  String sourceTable=((Struct)insert.value()).getStruct(source).getString(table);
  assertThat(sourceTable).isEqualTo(DBZ.1834);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\TopicNameSanitizationIT.java",92
1237,"'-tryline","@Test public void transactionMetadataEnabled() throws InterruptedException, SQLException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.SCHEMA_ONLY).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(MySqlConnectorConfig.PROVIDE_TRANSACTION_METADATA,true).with(MySqlConnector.IMPLEMENTATION_PROP,new).build();
  start(MySqlConnector.class,config);
  Testing.Debug.enable();
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(mysql,DATABASE.getServerName());
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.setAutoCommit(false);
      connection.execute(CUSTOMER_INSERT_STMT_1,PRODUCT_INSERT_STMT,ORDER_INSERT_STMT,CUSTOMER_INSERT_STMT_2);
      connection.commit();
    }
   }
   List<SourceRecord> records=consumeRecordsByTopic(1 + 4 + 1).allRecordsInOrder();
  String databaseName=DATABASE.getDatabaseName();
  final String txId=assertBeginTransaction(records.get(0));
  assertEndTransaction(records.get(5),txId,4,Collect.hashMapOf(databaseName + .products,1,databaseName + .customers,2,databaseName + .orders,1));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\TransactionMetadataIT.java",56
1238,"'-tryline","private boolean isGtidModeEnabled() throws SQLException {
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    return db.queryAndMap(SHOW GLOBAL VARIABLES LIKE 'GTID_MODE',rs -> {
      if (rs.next()) {
        return !OFF.equalsIgnoreCase(rs.getString(2));
      }
      throw new IllegalStateException(Cannot obtain GTID status);
    }
);
  }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\zzz\ZZZGtidSetIT.java",70
1239,"'-tryline","@Test @FixFor(DBZ-1184) public void shouldProcessPurgedGtidSet() throws SQLException, InterruptedException {
  Testing.Files.delete(DB_HISTORY_PATH);
  if (!isGtidModeEnabled()) {
    logger.warn(GTID is not enabled, skipping shouldProcessPurgedGtidSet);
    return;
  }
  purgeDatabaseLogs();
  final UniqueDatabase database=new UniqueDatabase(myServer1,connector_test).withDbHistoryPath(DB_HISTORY_PATH);
  final UniqueDatabase ro_database=new UniqueDatabase(myServer2,connector_test_ro,database).withDbHistoryPath(DB_HISTORY_PATH);
  ro_database.createAndInitialize();
  config=ro_database.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,ro_database.qualifiedTableName(customers)).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(6 + 4);
  assertThat(records.recordsForTopic(ro_database.topicForTable(customers)).size()).isEqualTo(4);
  assertThat(records.topics().size()).isEqualTo(1 + 1);
  assertThat(records.ddlRecordsForDatabase(ro_database.getDatabaseName()).size()).isEqualTo(6);
  records.forEach(this::validate);
  records.recordsForTopic(ro_database.topicForTable(customers)).forEach(record -> {
    final String gtids=(String)record.sourceOffset().get(gtids);
    final Pattern p=Pattern.compile(.*(.*):(.*)-(.*).*);
    final Matcher m=p.matcher(gtids);
    m.matches();
    Assertions.assertThat(m.group(2)).isNotEqualTo(1);
  }
);
  stopConnector();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\zzz\ZZZGtidSetIT.java",83
1240,"'-tryline","private void purgeDatabaseLogs() throws SQLException {
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(FLUSH LOGS);
      final String lastBinlogName=connection.queryAndMap(SHOW BINARY LOGS,rs -> {
        String binlog=null;
        while (rs.next()) {
          binlog=rs.getString(1);
        }
        return binlog;
      }
);
      connection.execute(PURGE BINARY LOGS TO ' + lastBinlogName + ');
    }
   }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\zzz\ZZZGtidSetIT.java",132
1241,"'-tryline","@Test @FixFor(DBZ-1244) public void shouldProcessPurgedLogsWhenDownAndSnapshotNeeded() throws SQLException, InterruptedException {
  Testing.Files.delete(DB_HISTORY_PATH);
  if (!isGtidModeEnabled()) {
    logger.warn(GTID is not enabled, skipping shouldProcessPurgedLogsWhenDownAndSnapshotNeeded);
    return;
  }
  purgeDatabaseLogs();
  final UniqueDatabase database=new UniqueDatabase(myServer1,connector_test).withDbHistoryPath(DB_HISTORY_PATH);
  database.createAndInitialize();
  config=database.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.WHEN_NEEDED).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,database.qualifiedTableName(customers)).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(1 + 3 + 2 * 4 + 4);
  assertThat(records.recordsForTopic(database.topicForTable(customers)).size()).isEqualTo(4);
  assertThat(records.topics().size()).isEqualTo(1 + 1);
  assertThat(records.ddlRecordsForDatabase(database.getDatabaseName()).size()).isEqualTo(11);
  records.forEach(this::validate);
  stopConnector();
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(database.getDatabaseName())){
    db.execute(INSERT INTO customers VALUES(default,1,1,1),INSERT INTO customers VALUES(default,2,2,2));
  }
   start(MySqlConnector.class,config);
  records=consumeRecordsByTopic(2);
  stopConnector();
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(database.getDatabaseName())){
    db.execute(INSERT INTO customers VALUES(default,3,3,3),INSERT INTO customers VALUES(default,4,4,4));
  }
   purgeDatabaseLogs();
  start(MySqlConnector.class,config);
  records=consumeRecordsByTopic(1 + 3 + 2 * 4 + 8);
  assertThat(records.recordsForTopic(database.topicForTable(customers)).size()).isEqualTo(8);
  assertThat(records.topics().size()).isEqualTo(1 + 1);
  assertThat(records.ddlRecordsForDatabase(database.getDatabaseName()).size()).isEqualTo(11);
  stopConnector();
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(database.getDatabaseName())){
    db.execute(INSERT INTO customers VALUES(default,5,5,5),INSERT INTO customers VALUES(default,6,6,6));
  }
   purgeDatabaseLogs();
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(database.getDatabaseName())){
    db.execute(INSERT INTO customers VALUES(default,7,7,7),INSERT INTO customers VALUES(default,8,8,8));
  }
   start(MySqlConnector.class,config);
  records=consumeRecordsByTopic(1 + 3 + 2 * 4 + 12);
  assertThat(records.recordsForTopic(database.topicForTable(customers)).size()).isEqualTo(12);
  assertThat(records.topics().size()).isEqualTo(1 + 1);
  assertThat(records.ddlRecordsForDatabase(database.getDatabaseName()).size()).isEqualTo(11);
  stopConnector();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\zzz\ZZZGtidSetIT.java",150
1242,"'-tryline","/** 
 * This builds data dictionary objects in redo log files. During this build, Oracle does an additional REDO LOG switch. This call may take time, which leads to delay in delivering incremental changes. With this option the lag between source database and dispatching event fluctuates.
 * @param connection connection to the database as LogMiner user (connection to the container)
 * @throws SQLException any exception
 */
static void buildDataDictionary(OracleConnection connection) throws SQLException {
  LOGGER.trace(Building data dictionary);
  executeCallableStatement(connection,SqlUtils.BUILD_DICTIONARY);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\logminer\LogMinerHelper.java",85
1243,"'-tryline","/** 
 * This method returns current SCN from the database
 * @param connection container level database connection
 * @return current SCN
 * @throws SQLException if anything unexpected happens
 */
public static Scn getCurrentScn(OracleConnection connection) throws SQLException {
  try (Statement statement=connection.connection(false).createStatement();ResultSet rs=statement.executeQuery(SqlUtils.currentScnQuery())){
    if (!rs.next()) {
      throw new IllegalStateException(Couldn't get SCN);
    }
    return Scn.valueOf(rs.getString(1));
  }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\logminer\LogMinerHelper.java",99
1244,"'-tryline","static void createFlushTable(OracleConnection connection) throws SQLException {
  String tableExists=(String)getSingleResult(connection,SqlUtils.tableExistsQuery(SqlUtils.LOGMNR_FLUSH_TABLE),DATATYPE.STRING);
  if (tableExists == null) {
    executeCallableStatement(connection,SqlUtils.CREATE_FLUSH_TABLE);
  }
  String recordExists=(String)getSingleResult(connection,SqlUtils.FLUSH_TABLE_NOT_EMPTY,DATATYPE.STRING);
  if (recordExists == null) {
    executeCallableStatement(connection,SqlUtils.INSERT_FLUSH_TABLE);
    connection.commit();
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\logminer\LogMinerHelper.java",118
1245,"'-tryline","/** 
 * This method returns next SCN for mining  and also updates MBean metrics We use a configurable limit, because the larger mining range, the slower query from LogMiner content view. In addition capturing unlimited number of changes can blow up Java heap. Gradual querying helps to catch up faster after long delays in mining.
 * @param connection container level database connection
 * @param startScn start SCN
 * @param metrics MBean accessible metrics
 * @return next SCN to mine up to
 * @throws SQLException if anything unexpected happens
 */
static Scn getEndScn(OracleConnection connection,Scn startScn,LogMinerMetrics metrics,int defaultBatchSize) throws SQLException {
  Scn currentScn=getCurrentScn(connection);
  metrics.setCurrentScn(currentScn);
  Scn topScnToMine=startScn.add(Scn.valueOf(metrics.getBatchSize()));
  boolean topMiningScnInFarFuture=false;
  if (topScnToMine.subtract(currentScn).compareTo(Scn.valueOf(defaultBatchSize)) > 0) {
    metrics.changeBatchSize(false);
    topMiningScnInFarFuture=true;
  }
  if (currentScn.subtract(topScnToMine).compareTo(Scn.valueOf(defaultBatchSize)) > 0) {
    metrics.changeBatchSize(true);
  }
  if (currentScn.compareTo(topScnToMine) < 0) {
    if (!topMiningScnInFarFuture) {
      metrics.changeSleepingTime(true);
    }
    return currentScn;
  }
 else {
    metrics.changeSleepingTime(false);
    return topScnToMine;
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\logminer\LogMinerHelper.java",131
1246,"'-tryline","/** 
 * It is critical to flush LogWriter(s) buffer
 * @param connection container level database connection
 * @param config configuration
 * @param isRac true if this is the RAC system
 * @param racHosts set of RAC host
 * @throws SQLException exception
 */
static void flushLogWriter(OracleConnection connection,JdbcConfiguration config,boolean isRac,Set<String> racHosts) throws SQLException {
  Scn currentScn=getCurrentScn(connection);
  if (isRac) {
    flushRacLogWriters(currentScn,config,racHosts);
  }
 else {
    LOGGER.trace(Updating {} with SCN {},SqlUtils.LOGMNR_FLUSH_TABLE,currentScn);
    executeCallableStatement(connection,SqlUtils.UPDATE_FLUSH_TABLE + currentScn);
    connection.commit();
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\logminer\LogMinerHelper.java",172
1247,"'-tryline","/** 
 * Calculate time difference between database and connector timers. It could be negative if DB time is ahead.
 * @param connection connection
 * @return the time difference as a {@link Duration}
 */
static Duration getTimeDifference(OracleConnection connection) throws SQLException {
  Timestamp dbCurrentMillis=(Timestamp)getSingleResult(connection,SqlUtils.CURRENT_TIMESTAMP,DATATYPE.TIMESTAMP);
  if (dbCurrentMillis == null) {
    return Duration.ZERO;
  }
  Instant fromDb=dbCurrentMillis.toInstant();
  Instant now=Instant.now();
  return Duration.between(fromDb,now);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\logminer\LogMinerHelper.java",195
1248,"'-tryline","/** 
 * This method builds mining view to query changes from. This view is built for online redo log files. It starts log mining session. It uses data dictionary objects, incorporated in previous steps. It tracks DDL changes and mines committed data only.
 * @param connection container level database connection
 * @param startScn   the SCN to mine from
 * @param endScn     the SCN to mine to
 * @param strategy this is about dictionary location
 * @param isContinuousMining works < 19 version only
 * @param metrics log miner metrics
 * @throws SQLException if anything unexpected happens
 */
static void startLogMining(OracleConnection connection,Scn startScn,Scn endScn,OracleConnectorConfig.LogMiningStrategy strategy,boolean isContinuousMining,LogMinerMetrics metrics) throws SQLException {
  LOGGER.trace(Starting log mining startScn={}, endScn={}, strategy={}, continuous={},startScn,endScn,strategy,isContinuousMining);
  String statement=SqlUtils.startLogMinerStatement(startScn,endScn,strategy,isContinuousMining);
  try {
    Instant start=Instant.now();
    executeCallableStatement(connection,statement);
    metrics.addCurrentMiningSessionStart(Duration.between(start,Instant.now()));
  }
 catch (  SQLException e) {
    logDatabaseState(connection);
    throw e;
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\logminer\LogMinerHelper.java",210
1249,"'-tryline","/** 
 * This method query the database to get CURRENT online redo log file(s). Multiple is applicable for RAC systems.
 * @param connection connection to reuse
 * @param metrics MBean accessible metrics
 * @return full redo log file name(s), including path
 * @throws SQLException if anything unexpected happens
 */
static Set<String> getCurrentRedoLogFiles(OracleConnection connection,LogMinerMetrics metrics) throws SQLException {
  Set<String> fileNames=new HashSet<>();
  try (PreparedStatement st=connection.connection(false).prepareStatement(SqlUtils.currentRedoNameQuery());ResultSet result=st.executeQuery()){
    while (result.next()) {
      fileNames.add(result.getString(1));
    }
    LOGGER.trace( Current Redo log fileNames: {} ,fileNames);
  }
   updateRedoLogMetrics(connection,metrics,fileNames);
  return fileNames;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\logminer\LogMinerHelper.java",244
1250,"'-tryline","/** 
 * This method fetches the oldest SCN from online redo log files
 * @param connection container level database connection
 * @param archiveLogRetention duration that archive logs are mined
 * @return oldest SCN from online redo log
 * @throws SQLException if anything unexpected happens
 */
static Scn getFirstOnlineLogScn(OracleConnection connection,Duration archiveLogRetention) throws SQLException {
  LOGGER.trace(Getting first scn of all online logs);
  try (Statement s=connection.connection(false).createStatement()){
    try (ResultSet rs=s.executeQuery(SqlUtils.oldestFirstChangeQuery(archiveLogRetention))){
      rs.next();
      Scn firstScnOfOnlineLog=Scn.valueOf(rs.getString(1));
      LOGGER.trace(First SCN in online logs is {},firstScnOfOnlineLog);
      return firstScnOfOnlineLog;
    }
   }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\logminer\LogMinerHelper.java",264
1251,"'-tryline","/** 
 * Sets NLS parameters for mining session.
 * @param connection session level database connection
 * @throws SQLException if anything unexpected happens
 */
static void setNlsSessionParameters(JdbcConnection connection) throws SQLException {
  connection.executeWithoutCommitting(SqlUtils.NLS_SESSION_PARAMETERS);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\logminer\LogMinerHelper.java",284
1252,"'-tryline","/** 
 * This fetches online redo log statuses
 * @param connection privileged connection
 * @return REDO LOG statuses Map, where key is the REDO name and value is the status
 * @throws SQLException if anything unexpected happens
 */
private static Map<String,String> getRedoLogStatus(OracleConnection connection) throws SQLException {
  return getMap(connection,SqlUtils.redoLogStatusQuery(),UNKNOWN);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\logminer\LogMinerHelper.java",315
1253,"'-tryline","private static OracleConnection createFlushConnection(JdbcConfiguration config,String host) throws SQLException {
  JdbcConfiguration hostConfig=JdbcConfiguration.adapt(config.edit().with(JdbcConfiguration.DATABASE,host).build());
  OracleConnection connection=new OracleConnection(hostConfig,() -> LogMinerHelper.class.getClassLoader());
  connection.setAutoCommit(false);
  return connection;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\logminer\LogMinerHelper.java",391
1254,"'-tryline","/** 
 * This method validates the supplemental logging configuration for the source database.
 * @param connection oracle connection on LogMiner level
 * @param pdbName pdb name
 * @param schema oracle schema
 * @throws SQLException if anything unexpected happens
 */
static void checkSupplementalLogging(OracleConnection connection,String pdbName,OracleDatabaseSchema schema) throws SQLException {
  try {
    if (pdbName != null) {
      connection.setSessionToPdb(pdbName);
    }
    Map<String,String> globalAll=getMap(connection,SqlUtils.databaseSupplementalLoggingAllCheckQuery(),UNKNOWN);
    if (NO.equalsIgnoreCase(globalAll.get(KEY))) {
      Map<String,String> globalMin=getMap(connection,SqlUtils.databaseSupplementalLoggingMinCheckQuery(),UNKNOWN);
      if (NO.equalsIgnoreCase(globalMin.get(KEY))) {
        throw new DebeziumException(Supplemental logging not properly configured.  Use: ALTER DATABASE ADD SUPPLEMENTAL LOG DATA);
      }
      for (      TableId tableId : schema.getTables().tableIds()) {
        if (!isTableSupplementalLogDataAll(connection,tableId)) {
          throw new DebeziumException(Supplemental logging not configured for table  + tableId + .  + Use command: ALTER TABLE + tableId.schema()+ .+ tableId.table()+  ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
        }
      }
    }
  }
  finally {
    if (pdbName != null) {
      connection.resetSessionToCdb();
    }
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\logminer\LogMinerHelper.java",398
1255,"'-tryline","static boolean isTableSupplementalLogDataAll(OracleConnection connection,TableId tableId) throws SQLException {
  return connection.queryAndMap(SqlUtils.tableSupplementalLoggingCheckQuery(tableId),(rs) -> {
    while (rs.next()) {
      if (ALL_COLUMN_LOGGING.equals(rs.getString(2))) {
        return true;
      }
    }
    return false;
  }
);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\logminer\LogMinerHelper.java",437
1256,"'-tryline","/** 
 * This method substitutes CONTINUOUS_MINE functionality
 * @param connection connection
 * @param lastProcessedScn current offset
 * @param archiveLogRetention the duration that archive logs will be mined
 * @throws SQLException if anything unexpected happens
 */
public static void setRedoLogFilesForMining(OracleConnection connection,Scn lastProcessedScn,Duration archiveLogRetention) throws SQLException {
  removeLogFilesFromMining(connection);
  List<LogFile> onlineLogFilesForMining=getOnlineLogFilesForOffsetScn(connection,lastProcessedScn);
  List<LogFile> archivedLogFilesForMining=getArchivedLogFilesForOffsetScn(connection,lastProcessedScn,archiveLogRetention);
  if (onlineLogFilesForMining.size() + archivedLogFilesForMining.size() == 0) {
    throw new IllegalStateException(None of log files contains offset SCN:  + lastProcessedScn + , re-snapshot is required.);
  }
  List<String> logFilesNames=archivedLogFilesForMining.stream().map(LogFile::getFileName).collect(Collectors.toList());
  for (  LogFile redoLog : onlineLogFilesForMining) {
    boolean found=false;
    for (    LogFile archiveLog : archivedLogFilesForMining) {
      if (archiveLog.isSameRange(redoLog)) {
        found=true;
        break;
      }
    }
    if (!found) {
      logFilesNames.add(redoLog.getFileName());
    }
  }
  for (  String file : logFilesNames) {
    LOGGER.trace(Adding log file {} to mining session,file);
    String addLogFileStatement=SqlUtils.addLogFileStatement(DBMS_LOGMNR.ADDFILE,file);
    executeCallableStatement(connection,addLogFileStatement);
  }
  LOGGER.debug(Last mined SCN: {}, Log file list to mine: {}\n,lastProcessedScn,logFilesNames);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\logminer\LogMinerHelper.java",469
1257,"'-tryline","/** 
 * This method returns all online log files, starting from one which contains offset SCN and ending with one containing largest SCN 18446744073709551615 on Ora 19c is the max value of the nextScn in the current redo
 */
public static List<LogFile> getOnlineLogFilesForOffsetScn(OracleConnection connection,Scn offsetScn) throws SQLException {
  LOGGER.trace(Getting online redo logs for offset scn {},offsetScn);
  List<LogFile> redoLogFiles=new ArrayList<>();
  try (PreparedStatement s=connection.connection(false).prepareStatement(SqlUtils.allOnlineLogsQuery())){
    try (ResultSet rs=s.executeQuery()){
      while (rs.next()) {
        String fileName=rs.getString(1);
        Scn nextChangeNumber=getScnFromString(rs.getString(2));
        Scn firstChangeNumber=getScnFromString(rs.getString(4));
        String status=rs.getString(5);
        LogFile logFile=new LogFile(fileName,firstChangeNumber,nextChangeNumber,CURRENT.equalsIgnoreCase(status));
        if (logFile.isCurrent() || logFile.getNextScn().compareTo(offsetScn) >= 0) {
          LOGGER.trace(Online redo log {} with SCN range {} to {} ({}) to be added.,fileName,firstChangeNumber,nextChangeNumber,status);
          redoLogFiles.add(logFile);
        }
 else {
          LOGGER.trace(Online redo log {} with SCN range {} to {} ({}) to be excluded.,fileName,firstChangeNumber,nextChangeNumber,status);
        }
      }
    }
   }
   return redoLogFiles;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\logminer\LogMinerHelper.java",547
1258,"'-tryline","/** 
 * Helper method that dumps the result set of an arbitrary SQL query to the connector's logs.
 * @param connection the database connection
 * @param query the query to execute
 * @throws SQLException thrown if an exception occurs performing a SQL operation
 */
private static void logQueryResults(OracleConnection connection,String query) throws SQLException {
  connection.query(query,rs -> {
    int columns=rs.getMetaData().getColumnCount();
    List<String> columnNames=new ArrayList<>();
    for (int index=1; index <= columns; ++index) {
      columnNames.add(rs.getMetaData().getColumnName(index));
    }
    LOGGER.debug({},columnNames);
    while (rs.next()) {
      List<Object> columnValues=new ArrayList<>();
      for (int index=1; index <= columns; ++index) {
        columnValues.add(rs.getObject(index));
      }
      LOGGER.debug({},columnValues);
    }
  }
);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\logminer\LogMinerHelper.java",636
1259,"'-tryline","/** 
 * This method returns all archived log files for one day, containing given offset scn
 * @param connection      connection
 * @param offsetScn       offset scn
 * @param archiveLogRetention duration that archive logs will be mined
 * @return                list of archive logs
 * @throws SQLException   if something happens
 */
public static List<LogFile> getArchivedLogFilesForOffsetScn(OracleConnection connection,Scn offsetScn,Duration archiveLogRetention) throws SQLException {
  final List<LogFile> archiveLogFiles=new ArrayList<>();
  try (PreparedStatement s=connection.connection(false).prepareStatement(SqlUtils.archiveLogsQuery(offsetScn,archiveLogRetention))){
    try (ResultSet rs=s.executeQuery()){
      while (rs.next()) {
        String fileName=rs.getString(1);
        Scn firstChangeNumber=Scn.valueOf(rs.getString(3));
        Scn nextChangeNumber=rs.getString(2) == null ? Scn.MAX : Scn.valueOf(rs.getString(2));
        if (LOGGER.isTraceEnabled()) {
          LOGGER.trace(Archive log {} with SCN range {} to {} to be added.,fileName,firstChangeNumber,nextChangeNumber);
        }
        archiveLogFiles.add(new LogFile(fileName,firstChangeNumber,nextChangeNumber));
      }
    }
   }
   return archiveLogFiles;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\logminer\LogMinerHelper.java",661
1260,"'-tryline","/** 
 * This method removes all added log files from mining
 * @param conn connection
 * @throws SQLException something happened
 */
public static void removeLogFilesFromMining(OracleConnection conn) throws SQLException {
  try (PreparedStatement ps=conn.connection(false).prepareStatement(SqlUtils.FILES_FOR_MINING);ResultSet result=ps.executeQuery()){
    Set<String> files=new LinkedHashSet<>();
    while (result.next()) {
      files.add(result.getString(1));
    }
    for (    String fileName : files) {
      executeCallableStatement(conn,SqlUtils.deleteLogFileStatement(fileName));
      LOGGER.debug(File {} was removed from mining,fileName);
    }
  }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\logminer\LogMinerHelper.java",687
1261,"'-tryline","private static void executeCallableStatement(OracleConnection connection,String statement) throws SQLException {
  Objects.requireNonNull(statement);
  try (CallableStatement s=connection.connection(false).prepareCall(statement)){
    s.execute();
  }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\logminer\LogMinerHelper.java",706
1262,"'-tryline","public static Map<String,String> getMap(OracleConnection connection,String query,String nullReplacement) throws SQLException {
  Map<String,String> result=new LinkedHashMap<>();
  try (PreparedStatement statement=connection.connection(false).prepareStatement(query);ResultSet rs=statement.executeQuery()){
    while (rs.next()) {
      String value=rs.getString(2);
      value=value == null ? nullReplacement : value;
      result.put(rs.getString(1),value);
    }
    return result;
  }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\logminer\LogMinerHelper.java",713
1263,"'-tryline","public static Object getSingleResult(OracleConnection connection,String query,DATATYPE type) throws SQLException {
  try (PreparedStatement statement=connection.connection(false).prepareStatement(query);ResultSet rs=statement.executeQuery()){
    if (rs.next()) {
switch (type) {
case LONG:
        return rs.getLong(1);
case TIMESTAMP:
      return rs.getTimestamp(1);
case STRING:
    return rs.getString(1);
case FLOAT:
  return rs.getFloat(1);
}
}
return null;
}
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\logminer\LogMinerHelper.java",727
1264,"'-tryline","private void initializeRedoLogsForMining(OracleConnection connection,boolean postEndMiningSession,Duration archiveLogRetention) throws SQLException {
  if (!postEndMiningSession) {
    if (OracleConnectorConfig.LogMiningStrategy.CATALOG_IN_REDO.equals(strategy)) {
      buildDataDictionary(connection);
    }
    if (!isContinuousMining) {
      setRedoLogFilesForMining(connection,startScn,archiveLogRetention);
    }
  }
 else {
    if (!isContinuousMining) {
      if (OracleConnectorConfig.LogMiningStrategy.CATALOG_IN_REDO.equals(strategy)) {
        buildDataDictionary(connection);
      }
      setRedoLogFilesForMining(connection,startScn,archiveLogRetention);
    }
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\logminer\LogMinerStreamingChangeEventSource.java",242
1265,"'-tryline","@Override public Set<TableId> readTableNames(String databaseCatalog,String schemaNamePattern,String tableNamePattern,String[] tableTypes) throws SQLException {
  Set<TableId> tableIds=super.readTableNames(null,schemaNamePattern,tableNamePattern,tableTypes);
  return tableIds.stream().map(t -> new TableId(databaseCatalog,t.schema(),t.table())).collect(Collectors.toSet());
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\OracleConnection.java",168
1266,"'-tryline","/** 
 * Retrieves all  {@code TableId} in a given database catalog, filtering certain ids thatshould be omitted from the returned set such as special spatial tables and index-organized tables.
 * @param catalogName the catalog/database name
 * @return set of all table ids for existing table objects
 * @throws SQLException if a database exception occurred
 */
protected Set<TableId> getAllTableIds(String catalogName) throws SQLException {
  final String query=select owner, table_name from all_tables  + where table_name NOT LIKE 'MDRT_%'  + and table_name NOT LIKE 'MDRS_%' + and table_name NOT LIKE 'MDXT_%' + and (table_name NOT LIKE 'SYS_IOT_OVER_%' and IOT_NAME IS NULL) ;
  Set<TableId> tableIds=new HashSet<>();
  query(query,(rs) -> {
    while (rs.next()) {
      tableIds.add(new TableId(catalogName,rs.getString(1),rs.getString(2)));
    }
    LOGGER.trace(TableIds are: {},tableIds);
  }
);
  return tableIds;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\OracleConnection.java",180
1267,"'-tryline","private ResultSet getTableColumnsInfo(String schemaNamePattern,String tableName) throws SQLException {
  String columnQuery=select column_name, data_type, data_length, data_precision, data_scale, default_length, density, char_length from  + all_tab_columns where owner like ' + schemaNamePattern + ' and table_name='+ tableName+ ';
  PreparedStatement statement=connection().prepareStatement(columnQuery);
  return statement.executeQuery();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\OracleConnection.java",210
1268,"'-tryline","public void readSchemaForCapturedTables(Tables tables,String databaseCatalog,String schemaNamePattern,ColumnNameFilter columnFilter,boolean removeTablesNotFoundInJdbc,Set<TableId> capturedTables) throws SQLException {
  Set<TableId> tableIdsBefore=new HashSet<>(tables.tableIds());
  DatabaseMetaData metadata=connection().getMetaData();
  Map<TableId,List<Column>> columnsByTable=new HashMap<>();
  for (  TableId tableId : capturedTables) {
    try (ResultSet columnMetadata=metadata.getColumns(databaseCatalog,schemaNamePattern,tableId.table(),null)){
      while (columnMetadata.next()) {
        readTableColumn(columnMetadata,tableId,columnFilter).ifPresent(column -> {
          columnsByTable.computeIfAbsent(tableId,t -> new ArrayList<>()).add(column.create());
        }
);
      }
    }
   }
  for (  Map.Entry<TableId,List<Column>> tableEntry : columnsByTable.entrySet()) {
    List<String> pkColumnNames=readPrimaryKeyNames(metadata,tableEntry.getKey());
    List<Column> columns=tableEntry.getValue();
    Collections.sort(columns);
    tables.overwriteTable(tableEntry.getKey(),columns,pkColumnNames,null);
  }
  if (removeTablesNotFoundInJdbc) {
    tableIdsBefore.removeAll(columnsByTable.keySet());
    tableIdsBefore.forEach(tables::removeTable);
  }
  for (  TableId tableId : capturedTables) {
    overrideOracleSpecificColumnTypes(tables,tableId,tableId);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\OracleConnection.java",219
1269,"'-tryline","@Override public void readSchema(Tables tables,String databaseCatalog,String schemaNamePattern,TableFilter tableFilter,ColumnNameFilter columnFilter,boolean removeTablesNotFoundInJdbc) throws SQLException {
  super.readSchema(tables,null,schemaNamePattern,tableFilter,columnFilter,removeTablesNotFoundInJdbc);
  Set<TableId> tableIds=tables.tableIds().stream().filter(x -> schemaNamePattern.equals(x.schema())).collect(Collectors.toSet());
  for (  TableId tableId : tableIds) {
    TableId tableIdWithCatalog=new TableId(databaseCatalog,tableId.schema(),tableId.table());
    if (tableFilter.isIncluded(tableIdWithCatalog)) {
      overrideOracleSpecificColumnTypes(tables,tableId,tableIdWithCatalog);
    }
    tables.removeTable(tableId);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\OracleConnection.java",263
1270,"'-tryline","@Override public List<String> readTableUniqueIndices(DatabaseMetaData metadata,TableId id) throws SQLException {
  return super.readTableUniqueIndices(metadata,id.toDoubleQuoted());
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\OracleConnection.java",285
1271,"'-tryline","public OracleConnection executeLegacy(String... sqlStatements) throws SQLException {
  return executeLegacy(statement -> {
    for (    String sqlStatement : sqlStatements) {
      if (sqlStatement != null) {
        statement.execute(sqlStatement);
      }
    }
  }
);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\OracleConnection.java",344
1272,"'-tryline","public OracleConnection executeLegacy(Operations operations) throws SQLException {
  Connection conn=connection();
  try (Statement statement=conn.createStatement()){
    operations.apply(statement);
    commit();
  }
   return this;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\OracleConnection.java",354
1273,"'-tryline","@Override protected void lockTablesForSchemaSnapshot(ChangeEventSourceContext sourceContext,RelationalSnapshotContext snapshotContext) throws SQLException, InterruptedException {
  ((OracleSnapshotContext)snapshotContext).preSchemaSnapshotSavepoint=jdbcConnection.connection().setSavepoint(dbz_schema_snapshot);
  try (Statement statement=jdbcConnection.connection().createStatement()){
    for (    TableId tableId : snapshotContext.capturedTables) {
      if (!sourceContext.isRunning()) {
        throw new InterruptedException(Interrupted while locking table  + tableId);
      }
      LOGGER.debug(Locking table {},tableId);
      statement.execute(LOCK TABLE  + quote(tableId) +  IN EXCLUSIVE MODE);
    }
  }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\OracleSnapshotChangeEventSource.java",87
1274,"'-tryline","@Override protected void releaseSchemaSnapshotLocks(RelationalSnapshotContext snapshotContext) throws SQLException {
  jdbcConnection.connection().rollback(((OracleSnapshotContext)snapshotContext).preSchemaSnapshotSavepoint);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\OracleSnapshotChangeEventSource.java",105
1275,"'-tryline","private Scn getCurrentScn(SnapshotContext ctx) throws SQLException {
  if (connectorConfig.getAdapter().equals(OracleConnectorConfig.ConnectorAdapter.LOG_MINER)) {
    return LogMinerHelper.getCurrentScn(jdbcConnection);
  }
  try (Statement statement=jdbcConnection.connection().createStatement();ResultSet rs=statement.executeQuery(select CURRENT_SCN from V$DATABASE)){
    if (!rs.next()) {
      throw new IllegalStateException(Couldn't get SCN);
    }
    return Scn.valueOf(rs.getString(1));
  }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\OracleSnapshotChangeEventSource.java",130
1276,"'-tryline","/** 
 * Whether the two SCNs represent the same timestamp or not (resolution is only 3 seconds).
 */
private boolean areSameTimestamp(Scn scn1,Scn scn2) throws SQLException {
  if (scn1 == null) {
    return false;
  }
  try (Statement statement=jdbcConnection.connection().createStatement();ResultSet rs=statement.executeQuery(SELECT 1 FROM DUAL WHERE SCN_TO_TIMESTAMP( + scn1 + ) = SCN_TO_TIMESTAMP(+ scn2+ ))){
    return rs.next();
  }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\OracleSnapshotChangeEventSource.java",146
1277,"'-tryline","/** 
 * Returns the SCN of the latest DDL change to the captured tables. The result will be empty if there's no table to capture as per the configuration.
 */
private Optional<Scn> getLatestTableDdlScn(RelationalSnapshotContext ctx) throws SQLException {
  if (ctx.capturedTables.isEmpty()) {
    return Optional.empty();
  }
  StringBuilder lastDdlScnQuery=new StringBuilder(SELECT TIMESTAMP_TO_SCN(MAX(last_ddl_time))).append( FROM all_objects).append( WHERE);
  for (  TableId table : ctx.capturedTables) {
    lastDdlScnQuery.append( (owner = ' + table.schema() + ' AND object_name = '+ table.table()+ ') OR);
  }
  String query=lastDdlScnQuery.substring(0,lastDdlScnQuery.length() - 3).toString();
  try (Statement statement=jdbcConnection.connection().createStatement();ResultSet rs=statement.executeQuery(query)){
    if (!rs.next()) {
      throw new IllegalStateException(Couldn't get latest table DDL SCN);
    }
    String latestDdlTime=rs.getString(1);
    if (0.equals(latestDdlTime)) {
      return Optional.empty();
    }
    return Optional.of(Scn.valueOf(latestDdlTime));
  }
 catch (  SQLException e) {
    if (e.getErrorCode() == 8180) {
      LOGGER.info(No latest table SCN could be resolved, defaulting to current SCN);
      return Optional.empty();
    }
    throw e;
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\OracleSnapshotChangeEventSource.java",161
1278,"'-tryline","@Override protected void readTableStructure(ChangeEventSourceContext sourceContext,RelationalSnapshotContext snapshotContext) throws SQLException, InterruptedException {
  Set<String> schemas=snapshotContext.capturedTables.stream().map(TableId::schema).collect(Collectors.toSet());
  for (  String schema : schemas) {
    if (!sourceContext.isRunning()) {
      throw new InterruptedException(Interrupted while reading structure of schema  + schema);
    }
    jdbcConnection.readSchema(snapshotContext.tables,snapshotContext.catalogName,schema,connectorConfig.getTableFilters().dataCollectionFilter(),null,false);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\OracleSnapshotChangeEventSource.java",207
1279,"'-tryline","@Override protected SchemaChangeEvent getCreateTableEvent(RelationalSnapshotContext snapshotContext,Table table) throws SQLException {
  try (Statement statement=jdbcConnection.connection().createStatement();ResultSet rs=statement.executeQuery(select dbms_metadata.get_ddl( 'TABLE', ' + table.id().table() + ', '+ table.id().schema()+ ' ) from dual)){
    if (!rs.next()) {
      throw new IllegalStateException(Couldn't get metadata);
    }
    Object res=rs.getObject(1);
    String ddl=((Clob)res).getSubString(1,(int)((Clob)res).length());
    return new SchemaChangeEvent(snapshotContext.offset.getPartition(),snapshotContext.offset.getOffset(),snapshotContext.offset.getSourceInfo(),snapshotContext.catalogName,table.id().schema(),ddl,table,SchemaChangeEventType.CREATE,true);
  }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\OracleSnapshotChangeEventSource.java",255
1280,"'-tryline","public OracleSnapshotContext(String catalogName) throws SQLException {
  super(catalogName);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\OracleSnapshotChangeEventSource.java",306
1281,"'-tryline","@BeforeClass public static void beforeClass() throws SQLException {
  connection=TestHelper.testConnection();
  dropTables();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\AbstractOracleDatatypesTest.java",209
1282,"'-tryline","@AfterClass public static void dropTables() throws SQLException {
  if (connection != null) {
    for (    String table : ALL_TABLES) {
      TestHelper.dropTable(connection,table);
    }
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\AbstractOracleDatatypesTest.java",215
1283,"'-tryline","protected static void createTables() throws SQLException {
  connection.execute(ALL_DDLS);
  for (  String table : ALL_TABLES) {
    streamTable(table);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\AbstractOracleDatatypesTest.java",224
1284,"'-tryline","private static void streamTable(String table) throws SQLException {
  connection.execute(GRANT SELECT ON  + table +  to + TestHelper.getConnectorUserName());
  connection.execute(ALTER TABLE  + table +  ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\AbstractOracleDatatypesTest.java",239
1285,"'-tryline","@AfterClass public static void closeConnection() throws SQLException {
  if (connection != null) {
    connection.close();
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\AbstractOracleDatatypesTest.java",244
1286,"'-tryline","protected static void insertStringTypes() throws SQLException {
  connection.execute(INSERT INTO debezium.type_string VALUES (1, 'v\u010d2', 'v\u010d2', 'nv\u010d2', 'c', 'n\u010d'));
  connection.execute(COMMIT);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\AbstractOracleDatatypesTest.java",461
1287,"'-tryline","protected static void insertFpTypes() throws SQLException {
  connection.execute(INSERT INTO debezium.type_fp VALUES (1, 1.1, 2.22, 3.33, 8.888, 4.4444, 5.555, 6.66, 1234.567891, 1234.567891, 77.323));
  connection.execute(COMMIT);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\AbstractOracleDatatypesTest.java",466
1288,"'-tryline","protected static void insertIntTypes() throws SQLException {
  connection.execute(INSERT INTO debezium.type_int VALUES (1, 1, 22, 333, 4444, 5555, 99, 9999, 999999999, 999999999999999999, 94, 9949, 999999994, 999999999999999949, 9999999999, 9999999999, 1));
  connection.execute(COMMIT);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\AbstractOracleDatatypesTest.java",471
1289,"'-tryline","protected static void insertTimeTypes() throws SQLException {
  connection.execute(INSERT INTO debezium.type_time VALUES ( + 1 + , TO_DATE('27-MAR-2018', 'dd-MON-yyyy')+ , TO_TIMESTAMP('27-MAR-2018 12:34:56.00789', 'dd-MON-yyyy HH24:MI:SS.FF5')+ , TO_TIMESTAMP('27-MAR-2018 12:34:56.12545', 'dd-MON-yyyy HH24:MI:SS.FF5')+ , TO_TIMESTAMP('27-MAR-2018 12:34:56.12545', 'dd-MON-yyyy HH24:MI:SS.FF5')+ , TO_TIMESTAMP_TZ('27-MAR-2018 01:34:56.00789 -11:00', 'dd-MON-yyyy HH24:MI:SS.FF5 TZH:TZM')+ , TO_TIMESTAMP_TZ('27-MAR-2018 01:34:56.00789', 'dd-MON-yyyy HH24:MI:SS.FF5')+ , INTERVAL '-3-6' YEAR TO MONTH+ , INTERVAL '-1 2:3:4.56' DAY TO SECOND+ ));
  connection.execute(COMMIT);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\AbstractOracleDatatypesTest.java",477
1290,"'-tryline","@Test public void testChangeTime() throws SQLException {
  Mockito.when(rs.getTimestamp(4)).thenReturn(new Timestamp(1000L));
  Timestamp time=RowMapper.getChangeTime(metrics,rs);
  assertThat(time.getTime()).isEqualTo(1000L);
  Mockito.when(rs.getTimestamp(4)).thenThrow(SQLException.class);
  time=RowMapper.getChangeTime(metrics,rs);
  assertThat(time.getTime() == new Timestamp(Instant.now().getEpochSecond()).getTime()).isTrue();
  verify(rs,times(2)).getTimestamp(4);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\RowMapperTest.java",52
1291,"'-tryline","@Test public void testOperationCode() throws SQLException {
  Mockito.when(rs.getInt(3)).thenReturn(100);
  int operation=RowMapper.getOperationCode(metrics,rs);
  assertThat(operation).isEqualTo(100);
  verify(rs).getInt(3);
  Mockito.when(rs.getInt(3)).thenThrow(SQLException.class);
  operation=RowMapper.getOperationCode(metrics,rs);
  assertThat(operation).isEqualTo(0);
  verify(rs,times(2)).getInt(3);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\RowMapperTest.java",63
1292,"'-tryline","@Test public void testTableName() throws SQLException {
  Mockito.when(rs.getString(7)).thenReturn(table_name);
  String tableName=RowMapper.getTableName(metrics,rs);
  assertThat(tableName.equals(table_name)).isTrue();
  verify(rs).getString(7);
  Mockito.when(rs.getString(7)).thenThrow(SQLException.class);
  tableName=RowMapper.getTableName(metrics,rs);
  assertThat(tableName.equals()).isTrue();
  verify(rs,times(2)).getString(7);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\RowMapperTest.java",75
1293,"'-tryline","@Test public void testSeqOwner() throws SQLException {
  Mockito.when(rs.getString(8)).thenReturn(owner);
  String owner=RowMapper.getSegOwner(metrics,rs);
  assertThat(owner.equals(owner)).isTrue();
  verify(rs).getString(8);
  Mockito.when(rs.getString(8)).thenThrow(SQLException.class);
  owner=RowMapper.getSegOwner(metrics,rs);
  assertThat(owner.equals()).isTrue();
  verify(rs,times(2)).getString(8);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\RowMapperTest.java",87
1294,"'-tryline","@Test public void testGetScn() throws SQLException {
  Mockito.when(rs.getString(1)).thenReturn(1);
  Scn scn=RowMapper.getScn(metrics,rs);
  assertThat(scn).isEqualTo(Scn.valueOf(1L));
  verify(rs).getString(1);
  Mockito.when(rs.getString(1)).thenThrow(SQLException.class);
  scn=RowMapper.getScn(metrics,rs);
  assertThat(scn).isEqualTo(Scn.NULL);
  verify(rs,times(2)).getString(1);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\RowMapperTest.java",99
1295,"'-tryline","@Test public void testGetTransactionId() throws SQLException {
  Mockito.when(rs.getBytes(5)).thenReturn(tr_id.getBytes());
  String transactionId=RowMapper.getTransactionId(metrics,rs);
  assertThat(transactionId).isEqualToIgnoringCase(74725F6964);
  verify(rs).getBytes(5);
  Mockito.when(rs.getBytes(5)).thenThrow(SQLException.class);
  transactionId=RowMapper.getTransactionId(metrics,rs);
  assertThat(transactionId.equals()).isTrue();
  verify(rs,times(2)).getBytes(5);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\RowMapperTest.java",111
1296,"'-tryline","@Test public void testSqlRedo() throws SQLException {
  Mockito.when(rs.getInt(6)).thenReturn(0);
  Mockito.when(rs.getString(2)).thenReturn(short_sql);
  String sql=RowMapper.getSqlRedo(metrics,rs,false,null,SCN_ONE,,,1,null,);
  assertThat(sql.equals(short_sql)).isTrue();
  verify(rs).getInt(6);
  verify(rs).getString(2);
  Mockito.when(rs.getInt(6)).thenReturn(1).thenReturn(0);
  Mockito.when(rs.getString(2)).thenReturn(long).thenReturn(_sql);
  sql=RowMapper.getSqlRedo(metrics,rs,false,null,SCN_ONE,,,1,null,);
  assertThat(sql.equals(long_sql)).isTrue();
  verify(rs,times(3)).getInt(6);
  verify(rs,times(3)).getString(2);
  char[] chars=new char[4000];
  Arrays.fill(chars,'a');
  Mockito.when(rs.getString(2)).thenReturn(new String(chars));
  Mockito.when(rs.getInt(6)).thenReturn(1);
  sql=RowMapper.getSqlRedo(metrics,rs,false,null,SCN_ONE,,,1,null,);
  assertThat(sql.length()).isEqualTo(40_000);
  verify(rs,times(13)).getInt(6);
  verify(rs,times(13)).getString(2);
  Mockito.when(rs.getInt(6)).thenReturn(0);
  Mockito.when(rs.getString(2)).thenReturn(null);
  sql=RowMapper.getSqlRedo(metrics,rs,false,null,SCN_ONE,,,1,null,);
  assertThat(sql).isNull();
  verify(rs,times(13)).getInt(6);
  verify(rs,times(14)).getString(2);
  Mockito.when(rs.getInt(6)).thenReturn(0);
  Mockito.when(rs.getString(2)).thenThrow(SQLException.class);
  sql=RowMapper.getSqlRedo(metrics,rs,false,null,SCN_ONE,,,1,null,);
  assertThat(sql.equals()).isTrue();
  verify(rs,times(13)).getInt(6);
  verify(rs,times(15)).getString(2);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\RowMapperTest.java",123
1297,"'-tryline","@Test public void testGetTableId() throws SQLException {
  Mockito.when(rs.getString(8)).thenReturn(SCHEMA);
  Mockito.when(rs.getString(7)).thenReturn(TABLE);
  TableId tableId=RowMapper.getTableId(CATALOG,rs);
  assertThat(tableId.toString().equals(CATALOG.SCHEMA.TABLE)).isTrue();
  verify(rs).getString(8);
  Mockito.when(rs.getString(8)).thenThrow(SQLException.class);
  tableId=null;
  try {
    tableId=RowMapper.getTableId(catalog,rs);
    fail(RowMapper should not have returned a TableId);
  }
 catch (  DebeziumException e) {
    assertThat(tableId).isNull();
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\RowMapperTest.java",165
1298,"'-tryline","@Test @FixFor(DBZ-2555) public void testGetTableIdWithVariedCase() throws SQLException {
  Mockito.when(rs.getString(8)).thenReturn(Schema);
  Mockito.when(rs.getString(7)).thenReturn(table);
  TableId tableId=RowMapper.getTableId(CATALOG,rs);
  assertThat(tableId.toString().equals(CATALOG.Schema.table)).isTrue();
  verify(rs).getString(8);
  Mockito.when(rs.getString(8)).thenThrow(SQLException.class);
  tableId=null;
  try {
    tableId=RowMapper.getTableId(catalog,rs);
    fail(RowMapper should not have returned a TableId);
  }
 catch (  DebeziumException e) {
    assertThat(tableId).isNull();
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\RowMapperTest.java",184
1299,"'-tryline","@BeforeClass public static void beforeSuperClass() throws SQLException {
  try (OracleConnection adminConnection=TestHelper.adminConnection()){
    adminConnection.resetSessionToCdb();
    LogMinerHelper.removeLogFilesFromMining(adminConnection);
  }
   conn=TestHelper.defaultConnection();
  conn.resetSessionToCdb();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\LogMinerHelperIT.java",48
1300,"'-tryline","@AfterClass public static void closeConnection() throws SQLException {
  if (conn != null && conn.isConnected()) {
    conn.close();
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\LogMinerHelperIT.java",59
1301,"'-tryline","@Before public void before() throws SQLException {
  setConsumeTimeout(TestHelper.defaultMessageConsumerPollTimeout(),TimeUnit.SECONDS);
  initializeConnectorTestFramework();
  Testing.Files.delete(TestHelper.DB_HISTORY_PATH);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\LogMinerHelperIT.java",66
1302,"'-tryline","private static int getNumberOfAddedLogFiles(OracleConnection conn) throws SQLException {
  int counter=0;
  try (PreparedStatement ps=conn.connection(false).prepareStatement(select * from V$LOGMNR_LOGS);ResultSet result=ps.executeQuery()){
    while (result.next()) {
      counter++;
    }
  }
   return counter;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\LogMinerHelperIT.java",129
1303,"'-tryline","private List<Scn> getOneDayArchivedLogNextScn(OracleConnection conn) throws SQLException {
  List<Scn> allArchivedNextScn=new ArrayList<>();
  try (PreparedStatement st=conn.connection(false).prepareStatement(SELECT NAME AS FILE_NAME, NEXT_CHANGE# AS NEXT_CHANGE FROM V$ARCHIVED_LOG  +  WHERE NAME IS NOT NULL AND FIRST_TIME >= SYSDATE - 1 AND ARCHIVED = 'YES'  +  AND STATUS = 'A' ORDER BY 2);ResultSet rs=st.executeQuery()){
    while (rs.next()) {
      allArchivedNextScn.add(Scn.valueOf(rs.getString(2)));
    }
  }
   return allArchivedNextScn;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\LogMinerHelperIT.java",140
1304,"'-tryline","@BeforeClass public static void beforeClass() throws SQLException {
  connection=TestHelper.testConnection();
  adminConnection=TestHelper.adminConnection();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorFilterIT.java",52
1305,"'-tryline","@AfterClass public static void closeConnection() throws SQLException {
  if (adminConnection != null) {
    adminConnection.close();
  }
  if (connection != null) {
    TestHelper.dropTable(connection,debezium.table1);
    TestHelper.dropTable(connection,debezium.table2);
    connection.close();
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorFilterIT.java",58
1306,"'-tryline","@Before public void before() throws SQLException {
  setConsumeTimeout(TestHelper.defaultMessageConsumerPollTimeout(),TimeUnit.SECONDS);
  TestHelper.dropTable(connection,debezium.table1);
  TestHelper.dropTable(connection,debezium.table2);
  TestHelper.dropTable(connection,debezium.table3);
  try {
    adminConnection.execute(DROP USER debezium2 CASCADE);
  }
 catch (  SQLException ignored) {
  }
  adminConnection.execute(CREATE USER debezium2 IDENTIFIED BY dbz,GRANT CONNECT TO debezium2,GRANT CREATE SESSION TO debezium2,GRANT CREATE TABLE TO debezium2,GRANT CREATE SEQUENCE TO debezium2,ALTER USER debezium2 QUOTA 100M ON users,CREATE TABLE debezium2.table2 (id NUMERIC(9,0) NOT NULL, name VARCHAR2(1000), PRIMARY KEY (id)),CREATE TABLE debezium2.nopk (id NUMERIC(9,0) NOT NULL),GRANT ALL PRIVILEGES ON debezium2.table2 TO debezium,GRANT SELECT ON debezium2.table2 TO  + TestHelper.getConnectorUserName(),GRANT SELECT ON debezium2.nopk TO  + TestHelper.getConnectorUserName(),ALTER TABLE debezium2.table2 ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
  String ddl=CREATE TABLE debezium.table1 ( +   id NUMERIC(9,0) NOT NULL,  +   name VARCHAR2(1000), +   PRIMARY KEY (id)+ );
  connection.execute(ddl);
  connection.execute(GRANT SELECT ON debezium.table1 TO  + TestHelper.getConnectorUserName());
  connection.execute(ALTER TABLE debezium.table1 ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
  ddl=CREATE TABLE debezium.table2 ( +   id NUMERIC(9,0) NOT NULL,  +   name VARCHAR2(1000), +   PRIMARY KEY (id)+ );
  connection.execute(ddl);
  connection.execute(GRANT SELECT ON debezium.table2 TO   + TestHelper.getConnectorUserName());
  connection.execute(ALTER TABLE debezium.table2 ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
  initializeConnectorTestFramework();
  Testing.Files.delete(TestHelper.DB_HISTORY_PATH);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorFilterIT.java",70
1307,"'-tryline","@After public void after() throws SQLException {
  TestHelper.dropTable(adminConnection,debezium2.table2);
  TestHelper.dropTable(adminConnection,debezium2.nopk);
  adminConnection.execute(DROP USER debezium2);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorFilterIT.java",120
1308,"'-tryline","@BeforeClass public static void beforeClass() throws SQLException {
  connection=TestHelper.testConnection();
  TestHelper.dropTable(connection,debezium.customer);
  TestHelper.dropTable(connection,debezium.masked_hashed_column_table);
  TestHelper.dropTable(connection,debezium.truncated_column_table);
  TestHelper.dropTable(connection,debezium.dt_table);
  String ddl=create table debezium.customer ( +   id numeric(9,0) not null,  +   name varchar2(1000), +   score decimal(6, 2), +   registered timestamp, +   primary key (id)+ );
  connection.execute(ddl);
  connection.execute(GRANT SELECT ON debezium.customer to   + TestHelper.getConnectorUserName());
  connection.execute(ALTER TABLE debezium.customer ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
  String ddl2=create table debezium.masked_hashed_column_table ( +   id numeric(9,0) not null,  +   name varchar2(255), +   name2 varchar2(255), +   name3 varchar2(20),+   primary key (id)+ );
  connection.execute(ddl2);
  connection.execute(GRANT SELECT ON debezium.masked_hashed_column_table to   + TestHelper.getConnectorUserName());
  connection.execute(ALTER TABLE debezium.masked_hashed_column_table ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
  String ddl3=create table debezium.truncated_column_table ( +   id numeric(9,0) not null,  +   name varchar2(20), +   primary key (id)+ );
  connection.execute(ddl3);
  connection.execute(GRANT SELECT ON debezium.truncated_column_table to   + TestHelper.getConnectorUserName());
  connection.execute(ALTER TABLE debezium.truncated_column_table ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
  String ddl4=create table dt_table ( +   id numeric(9,0) not null,  +   c1 int, +   c2 int, +   c3a numeric(5,2), +   c3b varchar(128), +   f1 float(10), +   f2 decimal(8,4), +   primary key (id)+ );
  connection.execute(ddl4);
  connection.execute(GRANT SELECT ON debezium.dt_table to   + TestHelper.getConnectorUserName());
  connection.execute(ALTER TABLE debezium.dt_table ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",73
1309,"'-tryline","@AfterClass public static void closeConnection() throws SQLException {
  if (connection != null) {
    TestHelper.dropTable(connection,customer);
    TestHelper.dropTable(connection,masked_hashed_column_table);
    TestHelper.dropTable(connection,truncated_column_table);
    TestHelper.dropTable(connection,dt_table);
    connection.close();
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",132
1310,"'-tryline","@Before public void before() throws SQLException {
  connection.execute(delete from debezium.customer);
  connection.execute(delete from debezium.masked_hashed_column_table);
  connection.execute(delete from debezium.truncated_column_table);
  connection.execute(delete from debezium.dt_table);
  setConsumeTimeout(TestHelper.defaultMessageConsumerPollTimeout(),TimeUnit.SECONDS);
  initializeConnectorTestFramework();
  Testing.Files.delete(TestHelper.DB_HISTORY_PATH);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",143
1311,"'-tryline","private void sendTxBatch(Configuration config,int expectedRecordCount,int offset) throws SQLException, InterruptedException {
  boolean isAutoCommit=false;
  if (connection.connection().getAutoCommit()) {
    isAutoCommit=true;
    connection.connection().setAutoCommit(false);
  }
  for (int i=offset; i < expectedRecordCount + offset; i++) {
    connection.executeWithoutCommitting(String.format(INSERT INTO debezium.customer VALUES (%s, 'Brian%s', 2345.67, null),i,i));
  }
  connection.connection().commit();
  if (isAutoCommit) {
    connection.connection().setAutoCommit(true);
  }
  assertTxBatch(config,expectedRecordCount,offset);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",386
1312,"'-tryline","private void insertDataBatchStartingAtKey(int initialKey) throws SQLException {
  connection.executeWithoutCommitting(INSERT INTO debezium.number_one_test values ( + initialKey + , 0, 0));
  connection.executeWithoutCommitting(INSERT INTO debezium.number_one_test values ( + (initialKey + 1) + , 1, 1));
  connection.executeWithoutCommitting(INSERT INTO debezium.number_one_test values ( + (initialKey + 2) + , 2, 2));
  connection.executeWithoutCommitting(INSERT INTO debezium.number_one_test values ( + (initialKey + 3) + , -1, -1));
  connection.executeWithoutCommitting(INSERT INTO debezium.number_one_test (id) values ( + (initialKey + 4) + ));
  connection.execute(COMMIT);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleNumberOneIT.java",152
1313,"'-tryline","@Before public void before() throws SQLException {
  connection=TestHelper.testConnection();
  TestHelper.dropTable(connection,debezium.tablea);
  TestHelper.dropTable(connection,debezium.tableb);
  TestHelper.dropTable(connection,debezium.tablec);
  connection.execute(CREATE TABLE debezium.tablea (id numeric(9,0) not null, cola varchar2(30), primary key(id)),CREATE TABLE debezium.tableb (id numeric(9,0) not null, colb varchar2(30), primary key(id)),CREATE TABLE debezium.tablec (id numeric(9,0) not null, colc varchar2(30), primary key(id)));
  connection.execute(GRANT SELECT ON debezium.tablea to   + TestHelper.getConnectorUserName());
  connection.execute(ALTER TABLE debezium.tablea ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
  connection.execute(GRANT SELECT ON debezium.tableb to   + TestHelper.getConnectorUserName());
  connection.execute(ALTER TABLE debezium.tableb ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
  connection.execute(GRANT SELECT ON debezium.tablec to   + TestHelper.getConnectorUserName());
  connection.execute(ALTER TABLE debezium.tablec ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
  initializeConnectorTestFramework();
  Testing.Files.delete(TestHelper.DB_HISTORY_PATH);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\SchemaHistoryTopicIT.java",39
1314,"'-tryline","@After public void after() throws SQLException {
  if (connection != null) {
    TestHelper.dropTable(connection,debezium.tablea);
    TestHelper.dropTable(connection,debezium.tableb);
    TestHelper.dropTable(connection,debezium.tablec);
    connection.close();
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\SchemaHistoryTopicIT.java",61
1315,"'-tryline","@BeforeClass public static void beforeClass() throws SQLException {
  connection=TestHelper.testConnection();
  TestHelper.dropTable(connection,debezium.customer);
  TestHelper.dropTable(connection,debezium.debezium_signal);
  String ddl=create table debezium.customer ( +   id numeric(9,0) not null,  +   name varchar2(1000), +   score decimal(6, 2), +   registered timestamp, +   constraint mypk primary key (id)+ );
  connection.execute(ddl);
  connection.execute(GRANT SELECT ON debezium.customer to   + TestHelper.getConnectorUserName());
  connection.execute(ALTER TABLE debezium.customer ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
  ddl=create table debezium.debezium_signal ( +  id varchar2(64),  +  type varchar2(64), +  data varchar2(2048) + );
  connection.execute(ddl);
  connection.execute(GRANT SELECT ON debezium.debezium_signal to   + TestHelper.getConnectorUserName());
  connection.execute(ALTER TABLE debezium.debezium_signal ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\SignalsIT.java",37
1316,"'-tryline","@AfterClass public static void closeConnection() throws SQLException {
  if (connection != null) {
    connection.close();
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\SignalsIT.java",68
1317,"'-tryline","@Before public void before() throws SQLException {
  connection.execute(delete from debezium.customer);
  connection.execute(delete from debezium.debezium_signal);
  setConsumeTimeout(TestHelper.defaultMessageConsumerPollTimeout(),TimeUnit.SECONDS);
  initializeConnectorTestFramework();
  Testing.Files.delete(TestHelper.DB_HISTORY_PATH);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\SignalsIT.java",75
1318,"'-tryline","@BeforeClass public static void beforeClass() throws SQLException {
  AbstractOracleDatatypesTest.beforeClass();
  createTables();
  insertStringTypes();
  insertFpTypes();
  insertIntTypes();
  insertTimeTypes();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\SnapshotDatatypesIT.java",31
1319,"'-tryline","@Before public void before() throws SQLException {
  connection=TestHelper.testConnection();
  cleanupTables();
  connection.execute(String.format(DDL,table1));
  connection.execute(String.format(DDL,table2));
  connection.execute(String.format(DDL,table3));
  for (int i=0; i < INITIAL_RECORDS_PER_TABLE; i++) {
    connection.execute(String.format(DML,table1,i,name + i,new BigDecimal(i + .23),JUL-18-2018,i % 2));
    connection.execute(String.format(DML,table2,i,name + i,new BigDecimal(i + .23),JUL-18-2018,i % 2));
    connection.execute(String.format(DML,table3,i,name + i,new BigDecimal(i + .23),JUL-18-2018,i % 2));
  }
  TestHelper.streamTable(connection,debezium.table1);
  TestHelper.streamTable(connection,debezium.table2);
  TestHelper.streamTable(connection,debezium.table3);
  initializeConnectorTestFramework();
  Testing.Files.delete(TestHelper.DB_HISTORY_PATH);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\SnapshotSelectOverridesIT.java",45
1320,"'-tryline","@BeforeClass public static void beforeClass() throws SQLException {
  connection=TestHelper.testConnection();
  TestHelper.dropTable(connection,debezium.customer);
  TestHelper.dropTable(connection,debezium.orders);
  String ddl=create table debezium.customer ( +   id numeric(9,0) not null,  +   name varchar2(1000), +   score decimal(6, 2), +   registered timestamp, +   primary key (id)+ );
  connection.execute(ddl);
  connection.execute(GRANT SELECT ON debezium.customer to   + TestHelper.getConnectorUserName());
  connection.execute(ALTER TABLE debezium.customer ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
  ddl=create table debezium.orders ( +  id number(6) not null primary key,  +  order_date date not null, +  purchaser number(4) not null, +  quantity number(4) not null, +  product_id number(4) not null+ );
  connection.execute(ddl);
  connection.execute(GRANT SELECT ON debezium.orders to   + TestHelper.getConnectorUserName());
  connection.execute(ALTER TABLE debezium.orders ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\TransactionMetadataIT.java",41
1321,"'-tryline","@AfterClass public static void closeConnection() throws SQLException {
  if (connection != null) {
    TestHelper.dropTable(connection,debezium.orders);
    TestHelper.dropTable(connection,debezium.customer);
    connection.close();
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\TransactionMetadataIT.java",73
1322,"'-tryline","@Before public void before() throws SQLException {
  connection.execute(delete from debezium.customer);
  connection.execute(delete from debezium.orders);
  setConsumeTimeout(TestHelper.defaultMessageConsumerPollTimeout(),TimeUnit.SECONDS);
  initializeConnectorTestFramework();
  Testing.Files.delete(TestHelper.DB_HISTORY_PATH);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\TransactionMetadataIT.java",82
1323,"'-tryline","/** 
 * Enables a given table to be streamed by Oracle.
 * @param connection the oracle connection
 * @param table the table name in {@code schema.table} format.
 * @throws SQLException if an exception occurred
 */
public static void streamTable(OracleConnection connection,String table) throws SQLException {
  connection.execute(String.format(GRANT SELECT ON %s TO %s,table,getConnectorUserName()));
  connection.execute(String.format(ALTER TABLE %s ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS,table));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\util\TestHelper.java",304
1324,"'-tryline","@Override public void processMessage(ByteBuffer buffer,ReplicationMessageProcessor processor,TypeRegistry typeRegistry) throws SQLException, InterruptedException {
  if (buffer == null) {
    processor.process(null);
  }
 else {
    processNotEmptyMessage(buffer,processor,typeRegistry);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\AbstractMessageDecoder.java",35
1325,"'-tryline","protected abstract void processNotEmptyMessage(ByteBuffer buffer,ReplicationMessageProcessor processor,TypeRegistry typeRegistry) throws SQLException, InterruptedException ;
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\AbstractMessageDecoder.java",46
1326,"'-tryline","/** 
 * Process a message upon arrival from logical decoder
 * @param buffer - binary representation of replication message
 * @param processor - message processing on arrival
 * @param typeRegistry - registry with known types
 */
void processMessage(ByteBuffer buffer,ReplicationMessageProcessor processor,TypeRegistry typeRegistry) throws SQLException, InterruptedException ;
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\MessageDecoder.java",26
1327,"'-tryline","@Override public void processNotEmptyMessage(ByteBuffer buffer,ReplicationMessageProcessor processor,TypeRegistry typeRegistry) throws SQLException, InterruptedException {
  if (LOGGER.isTraceEnabled()) {
    if (!buffer.hasArray()) {
      throw new IllegalStateException(Invalid buffer received from PG server during streaming replication);
    }
    final byte[] source=buffer.array();
    final byte[] content=Arrays.copyOfRange(source,buffer.arrayOffset(),source.length + 2);
    final int lastPos=content.length - 1;
    content[lastPos - 1]=SPACE;
    content[lastPos]=SPACE;
    LOGGER.trace(Message arrived from database {},HexConverter.convertToHexString(content));
  }
  final MessageType messageType=MessageType.forType((char)buffer.get());
switch (messageType) {
case BEGIN:
    handleBeginMessage(buffer,processor);
  break;
case COMMIT:
handleCommitMessage(buffer,processor);
break;
case RELATION:
handleRelationMessage(buffer,typeRegistry);
break;
case INSERT:
decodeInsert(buffer,typeRegistry,processor);
break;
case UPDATE:
decodeUpdate(buffer,typeRegistry,processor);
break;
case DELETE:
decodeDelete(buffer,typeRegistry,processor);
break;
case TRUNCATE:
if (config.getTruncateHandlingMode() == PostgresConnectorConfig.TruncateHandlingMode.INCLUDE) {
decodeTruncate(buffer,typeRegistry,processor);
}
 else {
LOGGER.trace(Message Type {} skipped, not processed.,messageType);
}
break;
default :
LOGGER.trace(Message Type {} skipped, not processed.,messageType);
break;
}
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\pgoutput\PgOutputMessageDecoder.java",149
1328,"'-tryline","/** 
 * Callback handler for the 'B' begin replication message.
 * @param buffer The replication stream buffer
 * @param processor The replication message processor
 */
private void handleBeginMessage(ByteBuffer buffer,ReplicationMessageProcessor processor) throws SQLException, InterruptedException {
  final Lsn lsn=Lsn.valueOf(buffer.getLong());
  this.commitTimestamp=PG_EPOCH.plus(buffer.getLong(),ChronoUnit.MICROS);
  this.transactionId=buffer.getInt();
  LOGGER.trace(Event: {},MessageType.BEGIN);
  LOGGER.trace(Final LSN of transaction: {},lsn);
  LOGGER.trace(Commit timestamp of transaction: {},commitTimestamp);
  LOGGER.trace(XID of transaction: {},transactionId);
  processor.process(new TransactionMessage(Operation.BEGIN,transactionId,commitTimestamp));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\pgoutput\PgOutputMessageDecoder.java",209
1329,"'-tryline","/** 
 * Callback handler for the 'C' commit replication message.
 * @param buffer The replication stream buffer
 * @param processor The replication message processor
 */
private void handleCommitMessage(ByteBuffer buffer,ReplicationMessageProcessor processor) throws SQLException, InterruptedException {
  int flags=buffer.get();
  final Lsn lsn=Lsn.valueOf(buffer.getLong());
  final Lsn endLsn=Lsn.valueOf(buffer.getLong());
  Instant commitTimestamp=PG_EPOCH.plus(buffer.getLong(),ChronoUnit.MICROS);
  LOGGER.trace(Event: {},MessageType.COMMIT);
  LOGGER.trace(Flags: {} (currently unused and most likely 0),flags);
  LOGGER.trace(Commit LSN: {},lsn);
  LOGGER.trace(End LSN of transaction: {},endLsn);
  LOGGER.trace(Commit timestamp of transaction: {},commitTimestamp);
  processor.process(new TransactionMessage(Operation.COMMIT,transactionId,commitTimestamp));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\pgoutput\PgOutputMessageDecoder.java",226
1330,"'-tryline","/** 
 * Callback handler for the 'R' relation replication message.
 * @param buffer The replication stream buffer
 * @param typeRegistry The postgres type registry
 */
private void handleRelationMessage(ByteBuffer buffer,TypeRegistry typeRegistry) throws SQLException {
  int relationId=buffer.getInt();
  String schemaName=readString(buffer);
  String tableName=readString(buffer);
  int replicaIdentityId=buffer.get();
  short columnCount=buffer.getShort();
  LOGGER.trace(Event: {}, RelationId: {}, Replica Identity: {}, Columns: {},MessageType.RELATION,relationId,replicaIdentityId,columnCount);
  LOGGER.trace(Schema: '{}', Table: '{}',schemaName,tableName);
  Map<String,Boolean> columnOptionality;
  List<String> primaryKeyColumns;
  try (final PostgresConnection connection=new PostgresConnection(config.getConfiguration())){
    final DatabaseMetaData databaseMetadata=connection.connection().getMetaData();
    final TableId tableId=new TableId(null,schemaName,tableName);
    columnOptionality=getTableColumnOptionalityFromDatabase(databaseMetadata,schemaName,tableName);
    primaryKeyColumns=connection.readPrimaryKeyNames(databaseMetadata,tableId);
    if (primaryKeyColumns == null || primaryKeyColumns.isEmpty()) {
      LOGGER.warn(Primary keys are not defined for table '{}', defaulting to unique indices,tableName);
      primaryKeyColumns=connection.readTableUniqueIndices(databaseMetadata,tableId);
    }
  }
   List<ColumnMetaData> columns=new ArrayList<>();
  Set<String> columnNames=new HashSet<>();
  for (short i=0; i < columnCount; ++i) {
    byte flags=buffer.get();
    String columnName=Strings.unquoteIdentifierPart(readString(buffer));
    int columnType=buffer.getInt();
    int attypmod=buffer.getInt();
    final PostgresType postgresType=typeRegistry.get(columnType);
    boolean key=isColumnInPrimaryKey(schemaName,tableName,columnName,primaryKeyColumns);
    Boolean optional=columnOptionality.get(columnName);
    if (optional == null) {
      LOGGER.warn(Column '{}' optionality could not be determined, defaulting to true,columnName);
      optional=true;
    }
    columns.add(new ColumnMetaData(columnName,postgresType,key,optional,attypmod));
    columnNames.add(columnName);
  }
  primaryKeyColumns.retainAll(columnNames);
  Table table=resolveRelationFromMetadata(new PgOutputRelationMetaData(relationId,schemaName,tableName,columns,primaryKeyColumns));
  config.getSchema().applySchemaChangesForTable(relationId,table);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\pgoutput\PgOutputMessageDecoder.java",245
1331,"'-tryline","/** 
 * Callback handler for the 'I' insert replication stream message.
 * @param buffer The replication stream buffer
 * @param typeRegistry The postgres type registry
 * @param processor The replication message processor
 */
private void decodeInsert(ByteBuffer buffer,TypeRegistry typeRegistry,ReplicationMessageProcessor processor) throws SQLException, InterruptedException {
  int relationId=buffer.getInt();
  char tupleType=(char)buffer.get();
  LOGGER.trace(Event: {}, Relation Id: {}, Tuple Type: {},MessageType.INSERT,relationId,tupleType);
  Optional<Table> resolvedTable=resolveRelation(relationId);
  if (!resolvedTable.isPresent()) {
    processor.process(new NoopMessage(transactionId,commitTimestamp));
  }
 else {
    Table table=resolvedTable.get();
    List<Column> columns=resolveColumnsFromStreamTupleData(buffer,typeRegistry,table);
    processor.process(new PgOutputReplicationMessage(Operation.INSERT,table.id().toDoubleQuotedString(),commitTimestamp,transactionId,null,columns));
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\pgoutput\PgOutputMessageDecoder.java",358
1332,"'-tryline","/** 
 * Callback handler for the 'U' update replication stream message.
 * @param buffer The replication stream buffer
 * @param typeRegistry The postgres type registry
 * @param processor The replication message processor
 */
private void decodeUpdate(ByteBuffer buffer,TypeRegistry typeRegistry,ReplicationMessageProcessor processor) throws SQLException, InterruptedException {
  int relationId=buffer.getInt();
  LOGGER.trace(Event: {}, RelationId: {},MessageType.UPDATE,relationId);
  Optional<Table> resolvedTable=resolveRelation(relationId);
  if (!resolvedTable.isPresent()) {
    processor.process(new NoopMessage(transactionId,commitTimestamp));
  }
 else {
    Table table=resolvedTable.get();
    List<Column> oldColumns=null;
    char tupleType=(char)buffer.get();
    if ('O' == tupleType || 'K' == tupleType) {
      oldColumns=resolveColumnsFromStreamTupleData(buffer,typeRegistry,table);
      tupleType=(char)buffer.get();
    }
    List<Column> columns=resolveColumnsFromStreamTupleData(buffer,typeRegistry,table);
    processor.process(new PgOutputReplicationMessage(Operation.UPDATE,table.id().toDoubleQuotedString(),commitTimestamp,transactionId,oldColumns,columns));
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\pgoutput\PgOutputMessageDecoder.java",390
1333,"'-tryline","/** 
 * Callback handler for the 'D' delete replication stream message.
 * @param buffer The replication stream buffer
 * @param typeRegistry The postgres type registry
 * @param processor The replication message processor
 */
private void decodeDelete(ByteBuffer buffer,TypeRegistry typeRegistry,ReplicationMessageProcessor processor) throws SQLException, InterruptedException {
  int relationId=buffer.getInt();
  char tupleType=(char)buffer.get();
  LOGGER.trace(Event: {}, RelationId: {}, Tuple Type: {},MessageType.DELETE,relationId,tupleType);
  Optional<Table> resolvedTable=resolveRelation(relationId);
  if (!resolvedTable.isPresent()) {
    processor.process(new NoopMessage(transactionId,commitTimestamp));
  }
 else {
    Table table=resolvedTable.get();
    List<Column> columns=resolveColumnsFromStreamTupleData(buffer,typeRegistry,table);
    processor.process(new PgOutputReplicationMessage(Operation.DELETE,table.id().toDoubleQuotedString(),commitTimestamp,transactionId,columns,null));
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\pgoutput\PgOutputMessageDecoder.java",437
1334,"'-tryline","/** 
 * Callback handler for the 'T' truncate replication stream message.
 * @param buffer       The replication stream buffer
 * @param typeRegistry The postgres type registry
 * @param processor    The replication message processor
 */
private void decodeTruncate(ByteBuffer buffer,TypeRegistry typeRegistry,ReplicationMessageProcessor processor) throws SQLException, InterruptedException {
  int numberOfRelations=buffer.getInt();
  int optionBits=buffer.get();
  List<String> truncateOptions=getTruncateOptions(optionBits);
  int[] relationIds=new int[numberOfRelations];
  for (int i=0; i < numberOfRelations; i++) {
    relationIds[i]=buffer.getInt();
  }
  List<Table> tables=new ArrayList<>();
  for (  int relationId : relationIds) {
    Optional<Table> resolvedTable=resolveRelation(relationId);
    resolvedTable.ifPresent(tables::add);
  }
  if (LOGGER.isTraceEnabled()) {
    LOGGER.trace(Event: {}, RelationIds: {}, OptionBits: {},MessageType.TRUNCATE,Arrays.toString(relationIds),optionBits);
  }
  int noOfResolvedTables=tables.size();
  for (int i=0; i < noOfResolvedTables; i++) {
    Table table=tables.get(i);
    boolean lastTableInTruncate=(i + 1) == noOfResolvedTables;
    processor.process(new PgOutputTruncateReplicationMessage(Operation.TRUNCATE,table.id().toDoubleQuotedString(),commitTimestamp,transactionId,lastTableInTruncate));
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\pgoutput\PgOutputMessageDecoder.java",470
1335,"'-tryline","@Override public void processNotEmptyMessage(final ByteBuffer buffer,ReplicationMessageProcessor processor,TypeRegistry typeRegistry) throws SQLException, InterruptedException {
  try {
    if (!buffer.hasArray()) {
      throw new IllegalStateException(Invalid buffer received from Postgres server during streaming replication);
    }
    final byte[] source=buffer.array();
    final byte[] content=Arrays.copyOfRange(source,buffer.arrayOffset(),source.length);
    final RowMessage message=PgProto.RowMessage.parseFrom(content);
    LOGGER.trace(Received protobuf message from the server {},message);
    if (!message.getNewTypeinfoList().isEmpty() && message.getNewTupleCount() != message.getNewTypeinfoCount()) {
      throw new ConnectException(String.format(Message from transaction {} has {} data columns but only {} of type info,Integer.toUnsignedLong(message.getTransactionId()),message.getNewTupleCount(),message.getNewTypeinfoCount()));
    }
    if (!SUPPORTED_OPS.contains(message.getOp())) {
      if (!warnedOnUnkownOp) {
        LOGGER.warn(Received message with type '{}' that is unknown to this version of connector, consider upgrading,message.getOp());
        warnedOnUnkownOp=true;
      }
      return;
    }
    processor.process(new PgProtoReplicationMessage(message,typeRegistry));
  }
 catch (  InvalidProtocolBufferException e) {
    throw new ConnectException(e);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\pgproto\PgProtoMessageDecoder.java",47
1336,"'-tryline","/** 
 * Prints out information about the REPLICA IDENTITY status of a table. This in turn determines how much information is available for UPDATE and DELETE operations for logical replication.
 * @param tableId the identifier of the table
 * @return the replica identity information; never null
 * @throws SQLException if there is a problem obtaining the replica identity information for the given table
 */
public ServerInfo.ReplicaIdentity readReplicaIdentityInfo(TableId tableId) throws SQLException {
  String statement=SELECT relreplident FROM pg_catalog.pg_class c  + LEFT JOIN pg_catalog.pg_namespace n ON c.relnamespace=n.oid  + WHERE n.nspname=? and c.relname=?;
  String schema=tableId.schema() != null && tableId.schema().length() > 0 ? tableId.schema() : public;
  StringBuilder replIdentity=new StringBuilder();
  prepareQuery(statement,stmt -> {
    stmt.setString(1,schema);
    stmt.setString(2,tableId.table());
  }
,rs -> {
    if (rs.next()) {
      replIdentity.append(rs.getString(1));
    }
 else {
      LOGGER.warn(Cannot determine REPLICA IDENTITY information for table '{}',tableId);
    }
  }
);
  return ServerInfo.ReplicaIdentity.parseFromDB(replIdentity.toString());
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresConnection.java",98
1337,"'-tryline","/** 
 * Returns the current state of the replication slot
 * @param slotName the name of the slot
 * @param pluginName the name of the plugin used for the desired slot
 * @return the {@link SlotState} or null, if no slot state is found
 * @throws SQLException
 */
public SlotState getReplicationSlotState(String slotName,String pluginName) throws SQLException {
  ServerInfo.ReplicationSlot slot;
  try {
    slot=readReplicationSlotInfo(slotName,pluginName);
    if (slot.equals(ServerInfo.ReplicationSlot.INVALID)) {
      return null;
    }
 else {
      return slot.asSlotState();
    }
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    throw new ConnectException(Interrupted while waiting for valid replication slot info,e);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresConnection.java",126
1338,"'-tryline","/** 
 * Fetches the state of a replication stage given a slot name and plugin name
 * @param slotName the name of the slot
 * @param pluginName the name of the plugin used for the desired slot
 * @return the {@link ServerInfo.ReplicationSlot} object or a {@link ServerInfo.ReplicationSlot#INVALID} ifthe slot is not valid
 * @throws SQLException is thrown by the underlying JDBC
 */
private ServerInfo.ReplicationSlot fetchReplicationSlotInfo(String slotName,String pluginName) throws SQLException {
  final String database=database();
  final ServerInfo.ReplicationSlot slot=queryForSlot(slotName,database,pluginName,rs -> {
    if (rs.next()) {
      boolean active=rs.getBoolean(active);
      final Lsn confirmedFlushedLsn=parseConfirmedFlushLsn(slotName,pluginName,database,rs);
      if (confirmedFlushedLsn == null) {
        return null;
      }
      Lsn restartLsn=parseRestartLsn(slotName,pluginName,database,rs);
      if (restartLsn == null) {
        return null;
      }
      final Long xmin=rs.getLong(catalog_xmin);
      return new ServerInfo.ReplicationSlot(active,confirmedFlushedLsn,restartLsn,xmin);
    }
 else {
      LOGGER.debug(No replication slot '{}' is present for plugin '{}' and database '{}',slotName,pluginName,database);
      return ServerInfo.ReplicationSlot.INVALID;
    }
  }
);
  return slot;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresConnection.java",150
1339,"'-tryline","/** 
 * Fetches a replication slot, repeating the query until either the slot is created or until the max number of attempts has been reached To fetch the slot without the retries, use the  {@link PostgresConnection#fetchReplicationSlotInfo} call
 * @param slotName the slot name
 * @param pluginName the name of the plugin
 * @return the {@link ServerInfo.ReplicationSlot} object or a {@link ServerInfo.ReplicationSlot#INVALID} ifthe slot is not valid
 * @throws SQLException is thrown by the underyling jdbc driver
 * @throws InterruptedException is thrown if we don't return an answer within the set number of retries
 */
@VisibleForTesting ServerInfo.ReplicationSlot readReplicationSlotInfo(String slotName,String pluginName) throws SQLException, InterruptedException {
  final String database=database();
  final Metronome metronome=Metronome.parker(PAUSE_BETWEEN_REPLICATION_SLOT_RETRIEVAL_ATTEMPTS,Clock.SYSTEM);
  for (int attempt=1; attempt <= MAX_ATTEMPTS_FOR_OBTAINING_REPLICATION_SLOT; attempt++) {
    final ServerInfo.ReplicationSlot slot=fetchReplicationSlotInfo(slotName,pluginName);
    if (slot != null) {
      LOGGER.info(Obtained valid replication slot {},slot);
      return slot;
    }
    LOGGER.warn(Cannot obtain valid replication slot '{}' for plugin '{}' and database '{}' [during attempt {} out of {}, concurrent tx probably blocks taking snapshot.,slotName,pluginName,database,attempt,MAX_ATTEMPTS_FOR_OBTAINING_REPLICATION_SLOT);
    metronome.pause();
  }
  throw new ConnectException(Unable to obtain valid replication slot.  + Make sure there are no long-running transactions running in parallel as they may hinder the allocation of the replication slot when starting this connector);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresConnection.java",184
1340,"'-tryline","protected ServerInfo.ReplicationSlot queryForSlot(String slotName,String database,String pluginName,ResultSetMapper<ServerInfo.ReplicationSlot> map) throws SQLException {
  return prepareQueryAndMap(select * from pg_replication_slots where slot_name = ? and database = ? and plugin = ?,statement -> {
    statement.setString(1,slotName);
    statement.setString(2,database);
    statement.setString(3,pluginName);
  }
,map);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresConnection.java",217
1341,"'-tryline","private Lsn tryParseLsn(String slotName,String pluginName,String database,ResultSet rs,String column) throws ConnectException, SQLException {
  Lsn lsn=null;
  String lsnStr=rs.getString(column);
  if (lsnStr == null) {
    return null;
  }
  try {
    lsn=Lsn.valueOf(lsnStr);
  }
 catch (  Exception e) {
    throw new ConnectException(Value  + column +  in the pg_replication_slots table for slot = '+ slotName+ ', plugin = '+ pluginName+ ', database = '+ database+ ' is not valid. This is an abnormal situation and the database status should be checked.);
  }
  if (!lsn.isValid()) {
    throw new ConnectException(Invalid LSN returned from database);
  }
  return lsn;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresConnection.java",262
1342,"'-tryline","/** 
 * Returns the PG id of the current active transaction
 * @return a PG transaction identifier, or null if no tx is active
 * @throws SQLException if anything fails.
 */
public Long currentTransactionId() throws SQLException {
  AtomicLong txId=new AtomicLong(0);
  query(select * from txid_current(),rs -> {
    if (rs.next()) {
      txId.compareAndSet(0,rs.getLong(1));
    }
  }
);
  long value=txId.get();
  return value > 0 ? value : null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresConnection.java",359
1343,"'-tryline","/** 
 * Returns the current position in the server tx log.
 * @return a long value, never negative
 * @throws SQLException if anything unexpected fails.
 */
public long currentXLogLocation() throws SQLException {
  AtomicLong result=new AtomicLong(0);
  int majorVersion=connection().getMetaData().getDatabaseMajorVersion();
  query(majorVersion >= 10 ? select * from pg_current_wal_lsn() : select * from pg_current_xlog_location(),rs -> {
    if (!rs.next()) {
      throw new IllegalStateException(there should always be a valid xlog position);
    }
    result.compareAndSet(0,LogSequenceNumber.valueOf(rs.getString(1)).asLong());
  }
);
  return result.get();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresConnection.java",376
1344,"'-tryline","/** 
 * Returns information about the PG server to which this instance is connected.
 * @return a {@link ServerInfo} instance, never {@code null}
 * @throws SQLException if anything fails
 */
public ServerInfo serverInfo() throws SQLException {
  ServerInfo serverInfo=new ServerInfo();
  query(SELECT version(), current_user, current_database(),rs -> {
    if (rs.next()) {
      serverInfo.withServer(rs.getString(1)).withUsername(rs.getString(2)).withDatabase(rs.getString(3));
    }
  }
);
  String username=serverInfo.username();
  if (username != null) {
    query(SELECT oid, rolname, rolsuper, rolinherit, rolcreaterole, rolcreatedb, rolcanlogin, rolreplication FROM pg_roles  + WHERE pg_has_role(' + username + ', oid, 'member'),rs -> {
      while (rs.next()) {
        String roleInfo=superuser:  + rs.getBoolean(3) + , replication: + rs.getBoolean(8)+ , inherit: + rs.getBoolean(4)+ , create role: + rs.getBoolean(5)+ , create db: + rs.getBoolean(6)+ , can log in: + rs.getBoolean(7);
        String roleName=rs.getString(2);
        serverInfo.addRole(roleName,roleInfo);
      }
    }
);
  }
  return serverInfo;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresConnection.java",394
1345,"'-tryline","private static void validateServerVersion(Statement statement) throws SQLException {
  DatabaseMetaData metaData=statement.getConnection().getMetaData();
  int majorVersion=metaData.getDatabaseMajorVersion();
  int minorVersion=metaData.getDatabaseMinorVersion();
  if (majorVersion < 9 || (majorVersion == 9 && minorVersion < 4)) {
    throw new SQLException(Cannot connect to a version of Postgres lower than 9.4);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresConnection.java",438
1346,"'-tryline","@Override protected Optional<ColumnEditor> readTableColumn(ResultSet columnMetadata,TableId tableId,Tables.ColumnNameFilter columnFilter) throws SQLException {
  final String columnName=columnMetadata.getString(4);
  if (columnFilter == null || columnFilter.matches(tableId.catalog(),tableId.schema(),tableId.table(),columnName)) {
    final ColumnEditor column=Column.editor().name(columnName);
    column.type(columnMetadata.getString(6));
    column.length(columnMetadata.getInt(7));
    if (columnMetadata.getObject(9) != null) {
      column.scale(columnMetadata.getInt(9));
    }
    column.optional(isNullable(columnMetadata.getInt(11)));
    column.position(columnMetadata.getInt(17));
    column.autoIncremented(YES.equalsIgnoreCase(columnMetadata.getString(23)));
    String autogenerated=null;
    try {
      autogenerated=columnMetadata.getString(24);
    }
 catch (    SQLException e) {
    }
    column.generated(YES.equalsIgnoreCase(autogenerated));
    final PostgresType nativeType=getTypeRegistry().get(column.typeName());
    column.nativeType(nativeType.getRootType().getOid());
    column.jdbcType(nativeType.getRootType().getJdbcId());
    if (TypeRegistry.DOMAIN_TYPE == nativeType.getJdbcId()) {
      column.length(nativeType.getDefaultLength());
      column.scale(nativeType.getDefaultScale());
    }
    return Optional.of(column);
  }
  return Optional.empty();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresConnection.java",460
1347,"'-tryline","private ServerInfo.ReplicationSlot getSlotInfo() throws SQLException, InterruptedException {
  try (PostgresConnection connection=new PostgresConnection(originalConfig)){
    return connection.readReplicationSlotInfo(slotName,plugin.getPostgresPluginName());
  }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresReplicationConnection.java",129
1348,"'-tryline","protected void initReplicationSlot() throws SQLException, InterruptedException {
  ServerInfo.ReplicationSlot slotInfo=getSlotInfo();
  boolean shouldCreateSlot=ServerInfo.ReplicationSlot.INVALID == slotInfo;
  try {
    if (shouldCreateSlot) {
      this.createReplicationSlot();
    }
    pgConnection();
    final String identifySystemStatement=IDENTIFY_SYSTEM;
    LOGGER.debug(running '{}' to validate replication connection,identifySystemStatement);
    final Lsn xlogStart=queryAndMap(identifySystemStatement,rs -> {
      if (!rs.next()) {
        throw new IllegalStateException(The DB connection is not a valid replication connection);
      }
      String xlogpos=rs.getString(xlogpos);
      LOGGER.debug(received latest xlogpos '{}',xlogpos);
      return Lsn.valueOf(xlogpos);
    }
);
    if (slotCreationInfo != null) {
      this.defaultStartingPos=slotCreationInfo.startLsn();
    }
 else     if (shouldCreateSlot || !slotInfo.hasValidFlushedLsn()) {
      this.defaultStartingPos=xlogStart;
    }
 else {
      Lsn latestFlushedLsn=slotInfo.latestFlushedLsn();
      this.defaultStartingPos=latestFlushedLsn.compareTo(xlogStart) < 0 ? latestFlushedLsn : xlogStart;
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(found previous flushed LSN '{}',latestFlushedLsn);
      }
    }
    hasInitedSlot=true;
  }
 catch (  SQLException e) {
    throw new JdbcConnectionException(e);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresReplicationConnection.java",215
1349,"'-tryline","private boolean useTemporarySlot() throws SQLException {
  return false;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresReplicationConnection.java",261
1350,"'-tryline","/** 
 * creating a replication connection and starting to stream involves a few steps: 1. we create the connection and ensure that a. the slot exists b. the slot isn't currently being used 2. we query to get our potential start position in the slot (lsn) 3. we try and start streaming, depending on our options (such as in wal2json) this may fail, which can result in the connection being killed and we need to start the process over if we are using a temporary slot 4. actually start the streamer <p> This method takes care of all of these and this method queries for a default starting position If you know where you are starting from you should call  {@link #startStreaming(Lsn,WalPositionLocator)}, this method delegates to that method
 * @return
 * @throws SQLException
 * @throws InterruptedException
 */
@Override public ReplicationStream startStreaming(WalPositionLocator walPosition) throws SQLException, InterruptedException {
  return startStreaming(null,walPosition);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresReplicationConnection.java",268
1351,"'-tryline","@Override public ReplicationStream startStreaming(Lsn offset,WalPositionLocator walPosition) throws SQLException, InterruptedException {
  initConnection();
  connect();
  if (offset == null || !offset.isValid()) {
    offset=defaultStartingPos;
  }
  Lsn lsn=offset;
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(starting streaming from LSN '{}',lsn);
  }
  try {
    return createReplicationStream(lsn,walPosition);
  }
 catch (  Exception e) {
    String message=Failed to start replication stream at  + lsn;
    if (e.getMessage().matches(.*replication slot .* is active.*)) {
      message+=; when setting up multiple connectors for the same database host, please make sure to use a distinct replication slot name for each.;
    }
    throw new DebeziumException(message,e);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresReplicationConnection.java",292
1352,"'-tryline","@Override public void initConnection() throws SQLException, InterruptedException {
  initPublication();
  if (!hasInitedSlot) {
    initReplicationSlot();
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresReplicationConnection.java",317
1353,"'-tryline","@Override public Optional<SlotCreationResult> createReplicationSlot() throws SQLException {
  LOGGER.debug(Creating new replication slot '{}' for plugin '{}',slotName,plugin);
  String tempPart=;
  boolean canExportSnapshot=pgConnection().haveMinimumServerVersion(ServerVersion.v9_4);
  if ((dropSlotOnClose || exportSnapshot) && !canExportSnapshot) {
    LOGGER.warn(A slot marked as temporary or with an exported snapshot was created,  + but not on a supported version of Postgres, ignoring!);
  }
  if (useTemporarySlot()) {
    tempPart=TEMPORARY;
  }
  initPublication();
  try (Statement stmt=pgConnection().createStatement()){
    String createCommand=String.format(CREATE_REPLICATION_SLOT %s %s LOGICAL %s,slotName,tempPart,plugin.getPostgresPluginName());
    LOGGER.info(Creating replication slot with command {},createCommand);
    stmt.execute(createCommand);
    if (canExportSnapshot) {
      this.slotCreationInfo=parseSlotCreation(stmt.getResultSet());
    }
    return Optional.ofNullable(slotCreationInfo);
  }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresReplicationConnection.java",327
1354,"'-tryline","protected BaseConnection pgConnection() throws SQLException {
  return (BaseConnection)connection(false);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresReplicationConnection.java",368
1355,"'-tryline","private ReplicationStream createReplicationStream(final Lsn startLsn,WalPositionLocator walPosition) throws SQLException, InterruptedException {
  PGReplicationStream s;
  try {
    try {
      s=startPgReplicationStream(startLsn,plugin.forceRds() ? messageDecoder::optionsWithoutMetadata : messageDecoder::optionsWithMetadata);
      messageDecoder.setContainsMetadata(plugin.forceRds() ? false : true);
    }
 catch (    PSQLException e) {
      LOGGER.debug(Could not register for streaming, retrying without optional options,e);
      if (useTemporarySlot()) {
        initReplicationSlot();
      }
      s=startPgReplicationStream(startLsn,plugin.forceRds() ? messageDecoder::optionsWithoutMetadata : messageDecoder::optionsWithMetadata);
      messageDecoder.setContainsMetadata(plugin.forceRds() ? false : true);
    }
  }
 catch (  PSQLException e) {
    if (e.getMessage().matches((?s)ERROR: option .* is unknown.*)) {
      LOGGER.warn(Could not register for streaming with metadata in messages, falling back to messages without metadata);
      if (useTemporarySlot()) {
        initReplicationSlot();
      }
      s=startPgReplicationStream(startLsn,messageDecoder::optionsWithoutMetadata);
      messageDecoder.setContainsMetadata(false);
    }
 else     if (e.getMessage().matches((?s)ERROR: requested WAL segment .* has already been removed.*)) {
      LOGGER.error(Cannot rewind to last processed WAL position,e);
      throw new ConnectException(The offset to start reading from has been removed from the database write-ahead log. Create a new snapshot and consider setting of PostgreSQL parameter wal_keep_segments = 0.);
    }
 else {
      throw e;
    }
  }
  final PGReplicationStream stream=s;
  return new ReplicationStream(){
    private static final int CHECK_WARNINGS_AFTER_COUNT=100;
    private int warningCheckCounter=CHECK_WARNINGS_AFTER_COUNT;
    private ExecutorService keepAliveExecutor=null;
    private AtomicBoolean keepAliveRunning;
    private final Metronome metronome=Metronome.sleeper(statusUpdateInterval,Clock.SYSTEM);
    private volatile Lsn lastReceivedLsn;
    @Override public void read(    ReplicationMessageProcessor processor) throws SQLException, InterruptedException {
      processWarnings(false);
      ByteBuffer read=stream.read();
      final Lsn lastReceiveLsn=Lsn.valueOf(stream.getLastReceiveLSN());
      LOGGER.trace(Streaming requested from LSN {}, received LSN {},startLsn,lastReceiveLsn);
      if (messageDecoder.shouldMessageBeSkipped(read,lastReceiveLsn,startLsn,walPosition)) {
        return;
      }
      deserializeMessages(read,processor);
    }
    @Override public boolean readPending(    ReplicationMessageProcessor processor) throws SQLException, InterruptedException {
      processWarnings(false);
      ByteBuffer read=stream.readPending();
      final Lsn lastReceiveLsn=Lsn.valueOf(stream.getLastReceiveLSN());
      LOGGER.trace(Streaming requested from LSN {}, received LSN {},startLsn,lastReceiveLsn);
      if (read == null) {
        return false;
      }
      if (messageDecoder.shouldMessageBeSkipped(read,lastReceiveLsn,startLsn,walPosition)) {
        return true;
      }
      deserializeMessages(read,processor);
      return true;
    }
    private void deserializeMessages(    ByteBuffer buffer,    ReplicationMessageProcessor processor) throws SQLException, InterruptedException {
      lastReceivedLsn=Lsn.valueOf(stream.getLastReceiveLSN());
      LOGGER.trace(Received message at LSN {},lastReceivedLsn);
      messageDecoder.processMessage(buffer,processor,typeRegistry);
    }
    @Override public void close() throws SQLException {
      processWarnings(true);
      stream.close();
    }
    @Override public void flushLsn(    Lsn lsn) throws SQLException {
      doFlushLsn(lsn);
    }
    private void doFlushLsn(    Lsn lsn) throws SQLException {
      stream.setFlushedLSN(lsn.asLogSequenceNumber());
      stream.setAppliedLSN(lsn.asLogSequenceNumber());
      stream.forceUpdateStatus();
    }
    @Override public Lsn lastReceivedLsn(){
      return lastReceivedLsn;
    }
    @Override public void startKeepAlive(    ExecutorService service){
      if (keepAliveExecutor == null) {
        keepAliveExecutor=service;
        keepAliveRunning=new AtomicBoolean(true);
        keepAliveExecutor.submit(() -> {
          while (keepAliveRunning.get()) {
            try {
              LOGGER.trace(Forcing status update with replication stream);
              stream.forceUpdateStatus();
              metronome.pause();
            }
 catch (            Exception exp) {
              throw new RuntimeException(received unexpected exception will perform keep alive,exp);
            }
          }
        }
);
      }
    }
    @Override public void stopKeepAlive(){
      if (keepAliveExecutor != null) {
        keepAliveRunning.set(false);
        keepAliveExecutor.shutdownNow();
        keepAliveExecutor=null;
      }
    }
    private void processWarnings(    final boolean forced) throws SQLException {
      if (--warningCheckCounter == 0 || forced) {
        warningCheckCounter=CHECK_WARNINGS_AFTER_COUNT;
        for (SQLWarning w=connection().getWarnings(); w != null; w=w.getNextWarning()) {
          LOGGER.debug(Server-side message: '{}', state = {}, code = {},w.getMessage(),w.getSQLState(),w.getErrorCode());
        }
        connection().clearWarnings();
      }
    }
    @Override public Lsn startLsn(){
      return startLsn;
    }
  }
;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresReplicationConnection.java",391
1356,"'-tryline","@Override public void read(ReplicationMessageProcessor processor) throws SQLException, InterruptedException {
  processWarnings(false);
  ByteBuffer read=stream.read();
  final Lsn lastReceiveLsn=Lsn.valueOf(stream.getLastReceiveLSN());
  LOGGER.trace(Streaming requested from LSN {}, received LSN {},startLsn,lastReceiveLsn);
  if (messageDecoder.shouldMessageBeSkipped(read,lastReceiveLsn,startLsn,walPosition)) {
    return;
  }
  deserializeMessages(read,processor);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresReplicationConnection.java",452
1357,"'-tryline","@Override public boolean readPending(ReplicationMessageProcessor processor) throws SQLException, InterruptedException {
  processWarnings(false);
  ByteBuffer read=stream.readPending();
  final Lsn lastReceiveLsn=Lsn.valueOf(stream.getLastReceiveLSN());
  LOGGER.trace(Streaming requested from LSN {}, received LSN {},startLsn,lastReceiveLsn);
  if (read == null) {
    return false;
  }
  if (messageDecoder.shouldMessageBeSkipped(read,lastReceiveLsn,startLsn,walPosition)) {
    return true;
  }
  deserializeMessages(read,processor);
  return true;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresReplicationConnection.java",464
1358,"'-tryline","private void deserializeMessages(ByteBuffer buffer,ReplicationMessageProcessor processor) throws SQLException, InterruptedException {
  lastReceivedLsn=Lsn.valueOf(stream.getLastReceiveLSN());
  LOGGER.trace(Received message at LSN {},lastReceivedLsn);
  messageDecoder.processMessage(buffer,processor,typeRegistry);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresReplicationConnection.java",484
1359,"'-tryline","@Override public void close() throws SQLException {
  processWarnings(true);
  stream.close();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresReplicationConnection.java",490
1360,"'-tryline","@Override public void flushLsn(Lsn lsn) throws SQLException {
  doFlushLsn(lsn);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresReplicationConnection.java",496
1361,"'-tryline","private void doFlushLsn(Lsn lsn) throws SQLException {
  stream.setFlushedLSN(lsn.asLogSequenceNumber());
  stream.setAppliedLSN(lsn.asLogSequenceNumber());
  stream.forceUpdateStatus();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresReplicationConnection.java",501
1362,"'-tryline","private void processWarnings(final boolean forced) throws SQLException {
  if (--warningCheckCounter == 0 || forced) {
    warningCheckCounter=CHECK_WARNINGS_AFTER_COUNT;
    for (SQLWarning w=connection().getWarnings(); w != null; w=w.getNextWarning()) {
      LOGGER.debug(Server-side message: '{}', state = {}, code = {},w.getMessage(),w.getSQLState(),w.getErrorCode());
    }
    connection().clearWarnings();
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresReplicationConnection.java",543
1363,"'-tryline","private PGReplicationStream startPgReplicationStream(final Lsn lsn,Function<ChainedLogicalStreamBuilder,ChainedLogicalStreamBuilder> configurator) throws SQLException {
  assert lsn != null;
  ChainedLogicalStreamBuilder streamBuilder=pgConnection().getReplicationAPI().replicationStream().logical().withSlotName(slotName).withStartPosition(lsn.asLogSequenceNumber()).withSlotOptions(streamParams);
  streamBuilder=configurator.apply(streamBuilder);
  if (statusUpdateInterval != null && statusUpdateInterval.toMillis() > 0) {
    streamBuilder.withStatusInterval(toIntExact(statusUpdateInterval.toMillis()),TimeUnit.MILLISECONDS);
  }
  PGReplicationStream stream=streamBuilder.start();
  try {
    Thread.sleep(10);
  }
 catch (  Exception e) {
  }
  stream.forceUpdateStatus();
  return stream;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresReplicationConnection.java",561
1364,"'-tryline","@Override public void reconnect() throws SQLException {
  close(false);
  connection(false);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresReplicationConnection.java",614
1365,"'-tryline","/** 
 * Opens a stream for reading logical replication changes from the last known position of the slot for which the connection was opened. The last known position is based on the server's  {@code confirmed_flush_lsn} value from the {@code pg_replication_slots}table. <p> If there is no last known value (i.e. the connection is for a newly created slot) then the Postgres server will start streaming changes from that last position reported during this connection's creation. </p>
 * @return a {@link PGReplicationStream} from which data is read; never null
 * @throws SQLException if there is a problem obtaining the replication stream
 */
ReplicationStream startStreaming(WalPositionLocator walPosition) throws SQLException, InterruptedException ;
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\ReplicationConnection.java",32
1366,"'-tryline","/** 
 * Opens a stream for reading logical replication changes from a given LSN position. <p> Note that it is possible for a server to have recycled old WAL segments (see the  {@code wal_keep_segments} setting). Ifthat is the case, then even though a LSN number may be valid, the server will not stream back any changes because they are not available. </p>
 * @param offset a value representing the WAL sequence number where replication should start from; if the valueis  {@code null} or negative, this behaves exactly like {@link #startStreaming()}.
 * @return a {@link PGReplicationStream} from which data is read; never null
 * @see org.postgresql.replication.LogSequenceNumber
 * @throws SQLException if anything fails
 */
ReplicationStream startStreaming(Lsn offset,WalPositionLocator walPosition) throws SQLException, InterruptedException ;
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\ReplicationConnection.java",46
1367,"'-tryline","/** 
 * Creates a new replication slot with the given option and returns the result of the command, which may contain results (depending on postgres versions)
 * @throws SQLException if anything fails
 */
Optional<SlotCreationResult> createReplicationSlot() throws SQLException ;
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\ReplicationConnection.java",61
1368,"'-tryline","/** 
 * Forces the connection to be created, is called by startStreaming, but can be called manually in cases where we want the connection but not to to start streaming yet. Can be called multiple times
 */
void initConnection() throws SQLException, InterruptedException ;
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\ReplicationConnection.java",69
1369,"'-tryline","/** 
 * Checks whether this connection is open or not
 * @return {@code true} if this connection is open, {@code false} otherwise
 * @throws SQLException if anything unexpected fails
 */
boolean isConnected() throws SQLException ;
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\ReplicationConnection.java",77
1370,"'-tryline","public void reconnect() throws SQLException ;
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\ReplicationConnection.java",95
1371,"'-tryline","/** 
 * Processes the given replication message.
 * @param message The replication message, never {@code null}.
 */
void process(ReplicationMessage message) throws SQLException, InterruptedException ;
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\ReplicationStream.java",24
1372,"'-tryline","/** 
 * Blocks and waits for a replication message to be sent over a replication connection. Once a message has been received, the value of the  {@link #lastReceivedLsn() last received LSN} will also be updated accordingly.
 * @param processor - a callback to which the arrived message is passed
 * @throws SQLException if anything unexpected fails
 * @see PGReplicationStream#read()
 */
void read(ReplicationMessageProcessor processor) throws SQLException, InterruptedException ;
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\ReplicationStream.java",31
1373,"'-tryline","/** 
 * Attempts to read a replication message from a replication connection, processing that message if it's available or returning {@code false} if nothing is available. Once a message has been received, the value of the {@link #lastReceivedLsn() last received LSN}will also be updated accordingly.
 * @param processor - a callback to which the arrived message is passed
 * @return {@code true} if a message was received and processed
 * @throws SQLException if anything unexpected fails
 * @see PGReplicationStream#readPending()
 */
boolean readPending(ReplicationMessageProcessor processor) throws SQLException, InterruptedException ;
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\ReplicationStream.java",41
1374,"'-tryline","/** 
 * Sends a message to the server informing it about that latest position in the WAL that has successfully been processed. Due to the internal buffering the messages sent to Kafka (and thus committed offsets) will usually lag behind the latest received LSN, which is why this method must only be called after the accompanying event has been sent to Kafka and the offset has been committed there. <p> This essentially tells the server that this stream has successfully processed messages up to the current read cursor and so the server is free to discard older segments with earlier LSNs. It also affects the catch-up behavior once a slot is restarted and the server attempt to bring it up-to-date. </p>
 * @throws SQLException if anything goes wrong
 */
void flushLsn(Lsn lsn) throws SQLException ;
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\ReplicationStream.java",53
1375,"'-tryline","@Override public void processNotEmptyMessage(ByteBuffer buffer,ReplicationMessageProcessor processor,TypeRegistry typeRegistry) throws SQLException, InterruptedException {
  try {
    if (!buffer.hasArray()) {
      throw new IllegalStateException(Invalid buffer received from PG server during streaming replication);
    }
    final byte[] source=buffer.array();
    final byte[] content=Arrays.copyOfRange(source,buffer.arrayOffset(),source.length);
    LOGGER.trace(Message arrived for decoding {},new String(content));
    final Document message=DocumentReader.floatNumbersAsTextReader().read(content);
    final long txId=message.getLong(xid);
    final String timestamp=message.getString(timestamp);
    final Instant commitTime=dateTime.systemTimestampToInstant(timestamp);
    final Array changes=message.getArray(change);
    if (changes.isEmpty()) {
      processor.process(new TransactionMessage(Operation.BEGIN,txId,commitTime));
      processor.process(new TransactionMessage(Operation.COMMIT,txId,commitTime));
    }
 else {
      Iterator<Entry> it=changes.iterator();
      processor.process(new TransactionMessage(Operation.BEGIN,txId,commitTime));
      while (it.hasNext()) {
        Value value=it.next().getValue();
        processor.process(new Wal2JsonReplicationMessage(txId,commitTime,value.asDocument(),containsMetadata,!it.hasNext(),typeRegistry));
      }
      processor.process(new TransactionMessage(Operation.COMMIT,txId,commitTime));
    }
  }
 catch (  final IOException e) {
    throw new ConnectException(e);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\wal2json\NonStreamingWal2JsonMessageDecoder.java",52
1376,"'-tryline","@Override public void processNotEmptyMessage(ByteBuffer buffer,ReplicationMessageProcessor processor,TypeRegistry typeRegistry) throws SQLException, InterruptedException {
  try {
    if (!buffer.hasArray()) {
      throw new IllegalStateException(Invalid buffer received from PG server during streaming replication);
    }
    final byte[] source=buffer.array();
    final byte[] content=Arrays.copyOfRange(source,buffer.arrayOffset(),source.length + 2);
    final int lastPos=content.length - 1;
    content[lastPos - 1]=SPACE;
    content[lastPos]=SPACE;
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace(Chunk arrived from database {},new String(content));
    }
    if (!messageInProgress) {
      byte firstChar=getFirstNonWhiteChar(content);
      if (firstChar != LEFT_BRACE) {
        outOfOrderChunk(content);
        nonInitialChunk(processor,typeRegistry,content);
      }
 else {
        if (getLastNonWhiteChar(content) != RIGHT_BRACE) {
          content[lastPos - 1]=RIGHT_BRACKET;
          content[lastPos]=RIGHT_BRACE;
        }
        final Document message=DocumentReader.defaultReader().read(content);
        if (message.has(kind)) {
          outOfOrderChunk(content);
          nonInitialChunk(processor,typeRegistry,content);
        }
 else {
          txId=message.getLong(xid);
          final String timestamp=message.getString(timestamp);
          commitTime=dateTime.systemTimestampToInstant(timestamp);
          messageInProgress=true;
          currentChunk=null;
          processor.process(new TransactionMessage(Operation.BEGIN,txId,commitTime));
        }
      }
    }
 else {
      nonInitialChunk(processor,typeRegistry,content);
    }
  }
 catch (  final IOException e) {
    throw new ConnectException(e);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\wal2json\StreamingWal2JsonMessageDecoder.java",116
1377,"'-tryline","protected void nonInitialChunk(ReplicationMessageProcessor processor,TypeRegistry typeRegistry,final byte[] content) throws IOException, SQLException, InterruptedException {
  byte firstChar=getFirstNonWhiteChar(content);
  if (firstChar == LEFT_BRACE) {
    currentChunk=content;
  }
 else   if (firstChar == COMMA) {
    if (currentChunk != null) {
      doProcessMessage(processor,typeRegistry,currentChunk,false);
    }
    replaceFirstNonWhiteChar(content,SPACE);
    currentChunk=content;
  }
 else   if (firstChar == RIGHT_BRACKET) {
    doProcessMessage(processor,typeRegistry,currentChunk,true);
    messageInProgress=false;
    processor.process(new TransactionMessage(Operation.COMMIT,txId,commitTime));
  }
 else {
    throw new ConnectException(Chunk arrived in unexpected state);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\wal2json\StreamingWal2JsonMessageDecoder.java",172
1378,"'-tryline","private void doProcessMessage(ReplicationMessageProcessor processor,TypeRegistry typeRegistry,byte[] content,boolean lastMessage) throws IOException, SQLException, InterruptedException {
  if (content != null) {
    final Document change=DocumentReader.floatNumbersAsTextReader().read(content);
    LOGGER.trace(Change arrived for decoding {},change);
    processor.process(new Wal2JsonReplicationMessage(txId,commitTime,change,containsMetadata,lastMessage,typeRegistry));
  }
 else {
    LOGGER.trace(Empty change arrived);
    processor.process(new NoopMessage(txId,commitTime));
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\wal2json\StreamingWal2JsonMessageDecoder.java",253
1379,"'-tryline","private void setSnapshotStartLsn(PostgresSnapshotChangeEventSource snapshotSource,PostgresOffsetContext offsetContext) throws SQLException {
  snapshotSource.createSnapshotConnection();
  snapshotSource.setSnapshotTransactionIsolationLevel();
  snapshotSource.updateOffsetForPreSnapshotCatchUpStreaming(offsetContext);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresChangeEventSourceCoordinator.java",73
1380,"'-tryline","private Object[] columnValues(List<ReplicationMessage.Column> columns,TableId tableId,boolean refreshSchemaIfChanged,boolean metadataInMessage,boolean sourceOfToasted,boolean oldValues) throws SQLException {
  if (columns == null || columns.isEmpty()) {
    return null;
  }
  final Table table=schema.tableFor(tableId);
  Objects.requireNonNull(table);
  List<Column> schemaColumns=table.columns();
  List<ReplicationMessage.Column> columnsWithoutToasted=columns.stream().filter(Predicates.not(ReplicationMessage.Column::isToastedColumn)).collect(Collectors.toList());
  Object[] values=new Object[columnsWithoutToasted.size() < schemaColumns.size() ? schemaColumns.size() : columnsWithoutToasted.size()];
  final Set<String> undeliveredToastableColumns=new HashSet<>(schema.getToastableColumnsForTableId(table.id()));
  for (  ReplicationMessage.Column column : columns) {
    final String columnName=Strings.unquoteIdentifierPart(column.getName());
    undeliveredToastableColumns.remove(columnName);
    int position=getPosition(columnName,table,values);
    if (position != -1) {
      Object value=column.getValue(() -> (BaseConnection)connection.connection(),connectorConfig.includeUnknownDatatypes());
      if (sourceOfToasted) {
        cachedOldToastedValues.put(columnName,value);
      }
 else {
        if (value == UnchangedToastedReplicationMessageColumn.UNCHANGED_TOAST_VALUE) {
          final Object candidate=cachedOldToastedValues.get(columnName);
          if (candidate != null) {
            value=candidate;
          }
        }
      }
      values[position]=value;
    }
  }
  if (unchangedToastColumnMarkerMissing) {
    for (    String columnName : undeliveredToastableColumns) {
      int position=getPosition(columnName,table,values);
      if (position != -1) {
        final Object candidate=cachedOldToastedValues.get(columnName);
        if (oldValues && nullToastedValuesMissingFromOld) {
          values[position]=null;
        }
 else {
          values[position]=candidate != null ? candidate : UnchangedToastedReplicationMessageColumn.UNCHANGED_TOAST_VALUE;
        }
      }
    }
  }
  return values;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresChangeRecordEmitter.java",154
1381,"'-tryline","/** 
 * Initializes the content for this schema by reading all the database information from the supplied connection.
 * @param connection a {@link JdbcConnection} instance, never {@code null}
 * @param printReplicaIdentityInfo whether or not to look and print out replica identity information about the tables
 * @return this object so methods can be chained together; never null
 * @throws SQLException if there is a problem obtaining the schema from the database server
 */
protected PostgresSchema refresh(PostgresConnection connection,boolean printReplicaIdentityInfo) throws SQLException {
  connection.readSchema(tables(),null,null,getTableFilter(),null,true);
  if (printReplicaIdentityInfo) {
    tableIds().forEach(tableId -> printReplicaIdentityInfo(connection,tableId));
  }
  refreshSchemas();
  if (readToastableColumns) {
    tableIds().forEach(tableId -> refreshToastableColumnsMap(connection,tableId));
  }
  return this;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresSchema.java",90
1382,"'-tryline","/** 
 * Refreshes this schema's content for a particular table
 * @param connection a {@link JdbcConnection} instance, never {@code null}
 * @param tableId the table identifier; may not be null
 * @param refreshToastableColumns refreshes the cache of toastable columns for `tableId`, if {@code true}
 * @throws SQLException if there is a problem refreshing the schema from the database server
 */
protected void refresh(PostgresConnection connection,TableId tableId,boolean refreshToastableColumns) throws SQLException {
  Tables temp=new Tables();
  connection.readSchema(temp,null,null,tableId::equals,null,true);
  if (temp.size() == 0) {
    LOGGER.warn(Refresh of {} was requested but the table no longer exists,tableId);
    return;
  }
  tables().overwriteTable(temp.forTable(tableId));
  refreshSchema(tableId);
  if (refreshToastableColumns) {
    refreshToastableColumnsMap(connection,tableId);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresSchema.java",123
1383,"'-tryline","@Override protected void lockTablesForSchemaSnapshot(ChangeEventSourceContext sourceContext,RelationalSnapshotContext snapshotContext) throws SQLException, InterruptedException {
  final Duration lockTimeout=connectorConfig.snapshotLockTimeout();
  final Optional<String> lockStatement=snapshotter.snapshotTableLockingStatement(lockTimeout,snapshotContext.capturedTables);
  if (lockStatement.isPresent()) {
    LOGGER.info(Waiting a maximum of '{}' seconds for each table lock,lockTimeout.getSeconds());
    jdbcConnection.executeWithoutCommitting(lockStatement.get());
    schema.refresh(jdbcConnection,false);
  }
 else {
    if (!snapshotter.exportSnapshot()) {
      LOGGER.warn(Step 2: skipping locking each table, this may result in inconsistent schema!);
    }
 else {
      LOGGER.info(Step 2: skipping locking each table in an exported snapshot);
    }
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresSnapshotChangeEventSource.java",103
1384,"'-tryline","@Override protected void releaseSchemaSnapshotLocks(RelationalSnapshotContext snapshotContext) throws SQLException {
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresSnapshotChangeEventSource.java",127
1385,"'-tryline","private void updateOffsetForSnapshot(PostgresOffsetContext offset) throws SQLException {
  final Lsn xlogStart=getTransactionStartLsn();
  final long txId=jdbcConnection.currentTransactionId().longValue();
  LOGGER.info(Read xlogStart at '{}' from transaction '{}',xlogStart,txId);
  offset.updateWalPosition(xlogStart,offset.lastCompletelyProcessedLsn(),clock.currentTime(),txId,null,offset.xmin());
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresSnapshotChangeEventSource.java",152
1386,"'-tryline","protected void updateOffsetForPreSnapshotCatchUpStreaming(PostgresOffsetContext offset) throws SQLException {
  updateOffsetForSnapshot(offset);
  offset.setStreamingStoppingLsn(Lsn.valueOf(jdbcConnection.currentXLogLocation()));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresSnapshotChangeEventSource.java",161
1387,"'-tryline","private Lsn getTransactionStartLsn() throws SQLException {
  if (snapshotter.exportSnapshot() && slotCreatedInfo != null) {
    return slotCreatedInfo.startLsn();
  }
 else   if (!snapshotter.shouldStreamEventsStartingFromSnapshot() && startingSlotInfo != null) {
    SlotState currentSlotState=jdbcConnection.getReplicationSlotState(connectorConfig.slotName(),connectorConfig.plugin().getPostgresPluginName());
    return currentSlotState.slotLastFlushedLsn();
  }
  return Lsn.valueOf(jdbcConnection.currentXLogLocation());
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresSnapshotChangeEventSource.java",166
1388,"'-tryline","@Override protected void readTableStructure(ChangeEventSourceContext sourceContext,RelationalSnapshotContext snapshotContext) throws SQLException, InterruptedException {
  Set<String> schemas=snapshotContext.capturedTables.stream().map(TableId::schema).collect(Collectors.toSet());
  for (  String schema : schemas) {
    if (!sourceContext.isRunning()) {
      throw new InterruptedException(Interrupted while reading structure of schema  + schema);
    }
    LOGGER.info(Reading structure of schema '{}',snapshotContext.catalogName);
    jdbcConnection.readSchema(snapshotContext.tables,snapshotContext.catalogName,schema,connectorConfig.getTableFilters().dataCollectionFilter(),null,false);
  }
  schema.refresh(jdbcConnection,false);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresSnapshotChangeEventSource.java",184
1389,"'-tryline","@Override protected SchemaChangeEvent getCreateTableEvent(RelationalSnapshotContext snapshotContext,Table table) throws SQLException {
  return new SchemaChangeEvent(snapshotContext.offset.getPartition(),snapshotContext.offset.getOffset(),snapshotContext.offset.getSourceInfo(),snapshotContext.catalogName,table.id().schema(),null,table,SchemaChangeEventType.CREATE,true);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresSnapshotChangeEventSource.java",210
1390,"'-tryline","@Override protected Object getColumnValue(ResultSet rs,int columnIndex,Column column) throws SQLException {
  try {
    final ResultSetMetaData metaData=rs.getMetaData();
    final String columnTypeName=metaData.getColumnTypeName(columnIndex);
    final PostgresType type=schema.getTypeRegistry().get(columnTypeName);
    LOGGER.trace(Type of incoming data is: {},type.getOid());
    LOGGER.trace(ColumnTypeName is: {},columnTypeName);
    LOGGER.trace(Type is: {},type);
    if (type.isArrayType()) {
      return rs.getArray(columnIndex);
    }
switch (type.getOid()) {
case PgOid.MONEY:
      final String sMoney=rs.getString(columnIndex);
    if (sMoney == null) {
      return sMoney;
    }
  if (sMoney.startsWith(-)) {
    final String negativeMoney=( + sMoney.substring(1) + );
    return new PGmoney(negativeMoney).val;
  }
return new PGmoney(sMoney).val;
case PgOid.BIT:
return rs.getString(columnIndex);
case PgOid.NUMERIC:
final String s=rs.getString(columnIndex);
if (s == null) {
return s;
}
Optional<SpecialValueDecimal> value=PostgresValueConverter.toSpecialValue(s);
return value.isPresent() ? value.get() : new SpecialValueDecimal(rs.getBigDecimal(columnIndex));
case PgOid.TIME:
case PgOid.TIMETZ:
return rs.getString(columnIndex);
default :
Object x=rs.getObject(columnIndex);
if (x != null) {
LOGGER.trace(rs getobject returns class: {}; rs getObject value is: {},x.getClass(),x);
}
return x;
}
}
 catch (SQLException e) {
return super.getColumnValue(rs,columnIndex,column);
}
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresSnapshotChangeEventSource.java",234
1391,"'-tryline","protected void setSnapshotTransactionIsolationLevel() throws SQLException {
  LOGGER.info(Setting isolation level);
  String transactionStatement=snapshotter.snapshotTransactionIsolationLevelStatement(slotCreatedInfo);
  LOGGER.info(Opening transaction with statement {},transactionStatement);
  jdbcConnection.executeWithoutCommitting(transactionStatement);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresSnapshotChangeEventSource.java",292
1392,"'-tryline","public PostgresSnapshotContext(String catalogName) throws SQLException {
  super(catalogName);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresSnapshotChangeEventSource.java",304
1393,"'-tryline","private void processMessages(ChangeEventSourceContext context,final ReplicationStream stream) throws SQLException, InterruptedException {
  LOGGER.info(Processing messages);
  int noMessageIterations=0;
  while (context.isRunning() && (offsetContext.getStreamingStoppingLsn() == null || (lastCompletelyProcessedLsn.compareTo(offsetContext.getStreamingStoppingLsn()) < 0))) {
    boolean receivedMessage=stream.readPending(message -> {
      final Lsn lsn=stream.lastReceivedLsn();
      if (message.isLastEventForLsn()) {
        lastCompletelyProcessedLsn=lsn;
      }
      if (message.isTransactionalMessage()) {
        if (!connectorConfig.shouldProvideTransactionMetadata()) {
          LOGGER.trace(Received transactional message {},message);
          if (message.getOperation() == Operation.COMMIT) {
            commitMessage(lsn);
          }
          return;
        }
        offsetContext.updateWalPosition(lsn,lastCompletelyProcessedLsn,message.getCommitTime(),message.getTransactionId(),null,taskContext.getSlotXmin(connection));
        if (message.getOperation() == Operation.BEGIN) {
          dispatcher.dispatchTransactionStartedEvent(Long.toString(message.getTransactionId()),offsetContext);
        }
 else         if (message.getOperation() == Operation.COMMIT) {
          commitMessage(lsn);
          dispatcher.dispatchTransactionCommittedEvent(offsetContext);
        }
        maybeWarnAboutGrowingWalBacklog(true);
      }
 else {
        TableId tableId=null;
        if (message.getOperation() != Operation.NOOP) {
          tableId=PostgresSchema.parse(message.getTable());
          Objects.requireNonNull(tableId);
        }
        offsetContext.updateWalPosition(lsn,lastCompletelyProcessedLsn,message.getCommitTime(),message.getTransactionId(),tableId,taskContext.getSlotXmin(connection));
        boolean dispatched=message.getOperation() != Operation.NOOP && dispatcher.dispatchDataChangeEvent(tableId,new PostgresChangeRecordEmitter(offsetContext,clock,connectorConfig,schema,connection,message));
        maybeWarnAboutGrowingWalBacklog(dispatched);
      }
    }
);
    if (receivedMessage) {
      noMessageIterations=0;
    }
 else {
      if (offsetContext.hasCompletelyProcessedPosition()) {
        dispatcher.dispatchHeartbeatEvent(offsetContext);
      }
      noMessageIterations++;
      if (noMessageIterations >= THROTTLE_NO_MESSAGE_BEFORE_PAUSE) {
        noMessageIterations=0;
        pauseNoMessage.sleepWhen(true);
      }
    }
    if (!isInPreSnapshotCatchUpStreaming()) {
      connection.commit();
    }
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresStreamingChangeEventSource.java",178
1394,"'-tryline","private void searchWalPosition(ChangeEventSourceContext context,final ReplicationStream stream,final WalPositionLocator walPosition) throws SQLException, InterruptedException {
  AtomicReference<Lsn> resumeLsn=new AtomicReference<>();
  int noMessageIterations=0;
  LOGGER.info(Searching for WAL resume position);
  while (context.isRunning() && resumeLsn.get() == null) {
    boolean receivedMessage=stream.readPending(message -> {
      final Lsn lsn=stream.lastReceivedLsn();
      resumeLsn.set(walPosition.resumeFromLsn(lsn,message).orElse(null));
    }
);
    if (receivedMessage) {
      noMessageIterations=0;
    }
 else {
      noMessageIterations++;
      if (noMessageIterations >= THROTTLE_NO_MESSAGE_BEFORE_PAUSE) {
        noMessageIterations=0;
        pauseNoMessage.sleepWhen(true);
      }
    }
  }
  LOGGER.info(WAL resume position '{}' discovered,resumeLsn.get());
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresStreamingChangeEventSource.java",263
1395,"'-tryline","private void commitMessage(final Lsn lsn) throws SQLException, InterruptedException {
  lastCompletelyProcessedLsn=lsn;
  offsetContext.updateCommitPosition(lsn,lastCompletelyProcessedLsn,null,null,null,taskContext.getSlotXmin(connection));
  maybeWarnAboutGrowingWalBacklog(false);
  dispatcher.dispatchHeartbeatEvent(offsetContext);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresStreamingChangeEventSource.java",290
1396,"'-tryline","BaseConnection get() throws SQLException ;
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresStreamingChangeEventSource.java",376
1397,"'-tryline","protected void refreshSchema(PostgresConnection connection,boolean printReplicaIdentityInfo) throws SQLException {
  schema.refresh(connection,printReplicaIdentityInfo);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresTaskContext.java",67
1398,"'-tryline","Long getSlotXmin(PostgresConnection connection) throws SQLException {
  if (config.xminFetchInterval().toMillis() <= 0) {
    return null;
  }
  assert (this.refreshXmin != null);
  if (this.refreshXmin.hasElapsed()) {
    lastXmin=getCurrentSlotState(connection).slotCatalogXmin();
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug(Fetched new xmin from slot of {},lastXmin);
    }
  }
 else {
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace(reusing xmin value of {},lastXmin);
    }
  }
  return lastXmin;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresTaskContext.java",71
1399,"'-tryline","private SlotState getCurrentSlotState(PostgresConnection connection) throws SQLException {
  return connection.getReplicationSlotState(config.slotName(),config.plugin().getPostgresPluginName());
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresTaskContext.java",94
1400,"'-tryline","protected ReplicationConnection createReplicationConnection(boolean exportSnapshot,boolean doSnapshot) throws SQLException {
  final boolean dropSlotOnStop=config.dropSlotOnStop();
  if (dropSlotOnStop) {
    LOGGER.warn(Connector has enabled automated replication slot removal upon restart ({} = true).  + This setting is not recommended for production environments, as a new replication slot  + will be created after a connector restart, resulting in missed data change events.,PostgresConnectorConfig.DROP_SLOT_ON_STOP.name());
  }
  return ReplicationConnection.builder(config.jdbcConfig()).withSlot(config.slotName()).withPublication(config.publicationName()).withTableFilter(config.getTableFilters()).withPublicationAutocreateMode(config.publicationAutocreateMode()).withPlugin(config.plugin()).withTruncateHandlingMode(config.truncateHandlingMode()).dropSlotOnClose(dropSlotOnStop).streamParams(config.streamParams()).statusUpdateInterval(config.statusUpdateInterval()).withTypeRegistry(schema.getTypeRegistry()).exportSnapshotOnCreate(exportSnapshot).doSnapshot(doSnapshot).withSchema(schema).build();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresTaskContext.java",98
1401,"'-tryline","private PostgresType.Builder createTypeBuilderFromResultSet(Connection connection,ResultSet rs,TypeInfo typeInfo,SqlTypeMapper sqlTypeMapper) throws SQLException {
  final int oid=(int)rs.getLong(oid);
  final int parentTypeOid=(int)rs.getLong(parentoid);
  final int modifiers=(int)rs.getLong(modifiers);
  String typeName=rs.getString(name);
  String category=rs.getString(category);
  PostgresType.Builder builder=new PostgresType.Builder(this,typeName,oid,sqlTypeMapper.getSqlType(typeName),modifiers,typeInfo);
  if (CATEGORY_ENUM.equals(category)) {
    String[] enumValues=(String[])rs.getArray(enum_values).getArray();
    builder=builder.enumValues(Arrays.asList(enumValues));
  }
 else   if (CATEGORY_ARRAY.equals(category)) {
    builder=builder.elementType((int)rs.getLong(element));
  }
  return builder.parentType(parentTypeOid);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\TypeRegistry.java",344
1402,"'-tryline","private PostgresType loadType(Connection connection,PreparedStatement statement) throws SQLException {
  final TypeInfo typeInfo=((BaseConnection)connection).getTypeInfo();
  final SqlTypeMapper sqlTypeMapper=new SqlTypeMapper(connection,typeInfo);
  try (final ResultSet rs=statement.executeQuery()){
    while (rs.next()) {
      PostgresType result=createTypeBuilderFromResultSet(connection,rs,typeInfo,sqlTypeMapper).build();
      addType(result);
      return result;
    }
  }
   return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\TypeRegistry.java",401
1403,"'-tryline","private SqlTypeMapper(Connection db,TypeInfo typeInfo) throws SQLException {
  this.typeInfo=typeInfo;
  this.preloadedSqlTypes=Collect.unmodifiableSet(typeInfo.getPGTypeNamesWithSQLTypes());
  this.sqlTypesByPgTypeNames=getSqlTypes(db,typeInfo);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\TypeRegistry.java",446
1404,"'-tryline","public int getSqlType(String typeName) throws SQLException {
  boolean isCoreType=preloadedSqlTypes.contains(typeName);
  if (isCoreType) {
    return typeInfo.getSQLType(typeName);
  }
  if (typeName.endsWith([])) {
    return Types.ARRAY;
  }
 else {
    try {
      return sqlTypesByPgTypeNames.get(typeName);
    }
 catch (    Exception e) {
      LOGGER.warn(Failed to obtain SQL type information for type {} via custom statement, falling back to TypeInfo#getSQLType(),typeName,e);
      return typeInfo.getSQLType(typeName);
    }
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\TypeRegistry.java",452
1405,"'-tryline","/** 
 * Builds up a map of SQL (JDBC) types by PG type name; contains only values for non-core types.
 */
private static Map<String,Integer> getSqlTypes(Connection db,TypeInfo typeInfo) throws SQLException {
  Map<String,Integer> sqlTypesByPgTypeNames=new HashMap<>();
  try (final Statement statement=db.createStatement()){
    try (final ResultSet rs=statement.executeQuery(SQL_TYPE_DETAILS)){
      while (rs.next()) {
        int type;
        boolean isArray=rs.getBoolean(2);
        String typtype=rs.getString(3);
        if (isArray) {
          type=Types.ARRAY;
        }
 else         if (c.equals(typtype)) {
          type=Types.STRUCT;
        }
 else         if (d.equals(typtype)) {
          type=Types.DISTINCT;
        }
 else         if (e.equals(typtype)) {
          type=Types.VARCHAR;
        }
 else {
          type=Types.OTHER;
        }
        sqlTypesByPgTypeNames.put(rs.getString(1),type);
      }
    }
   }
   return sqlTypesByPgTypeNames;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\TypeRegistry.java",475
1406,"'-tryline","@Test public void shouldReportValidTxId() throws SQLException {
  try (PostgresConnection connection=TestHelper.create()){
    connection.connect();
    assertTrue(connection.currentTransactionId() > 0);
  }
   try (PostgresConnection connection=TestHelper.create()){
    connection.connect();
    connection.setAutoCommit(false);
    Long txId=connection.currentTransactionId();
    connection.executeWithoutCommitting(SELECT 1;);
    assertEquals(tx id should be the same,txId,connection.currentTransactionId());
    connection.connection().commit();
  }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\connection\PostgresConnectionIT.java",45
1407,"'-tryline","@Test public void shouldReportValidXLogPos() throws SQLException {
  try (PostgresConnection connection=TestHelper.create()){
    connection.connect();
    assertTrue(connection.currentXLogLocation() > 0);
  }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\connection\PostgresConnectionIT.java",62
1408,"'-tryline","@Override protected ServerInfo.ReplicationSlot queryForSlot(String slotName,String database,String pluginName,ResultSetMapper<ServerInfo.ReplicationSlot> map) throws SQLException {
  String fields=slot_name, plugin, slot_type, datoid, database, active, active_pid, xmin, catalog_xmin, restart_lsn;
  return prepareQueryAndMap(select  + fields +  from pg_replication_slots where slot_name = ? and database = ? and plugin = ?,statement -> {
    statement.setString(1,slotName);
    statement.setString(2,database);
    statement.setString(3,pluginName);
  }
,map);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\connection\PostgresConnectionIT.java",236
1409,"'-tryline","@Before public void before() throws SQLException {
  OFFSET_STORE_PATH.getParent().toFile().mkdirs();
  OFFSET_STORE_PATH.toFile().delete();
  TestHelper.dropAllSchemas();
  TestHelper.execute(CREATE SCHEMA engine;,CREATE TABLE engine.test (id INT PRIMARY KEY, val VARCHAR(32));,INSERT INTO engine.test VALUES(1, 'value1'););
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\DebeziumEngineIT.java",67
1410,"'-tryline","@BeforeClass public static void beforeClass() throws SQLException {
  TestHelper.dropAllSchemas();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",114
1411,"'-tryline","@Test @FixFor(DBZ-1245) public void shouldNotSendEmptyOffset() throws InterruptedException, SQLException {
  final String statement=DROP SCHEMA IF EXISTS s1 CASCADE; + CREATE SCHEMA s1;  + CREATE TABLE s1.a (pk SERIAL, aa integer, PRIMARY KEY(pk));;
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,s1.a).with(Heartbeat.HEARTBEAT_INTERVAL,10).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.execute(statement);
  waitForAvailableRecords(1000,TimeUnit.MILLISECONDS);
  SourceRecord record=consumeRecord();
  assertThat(record == null || !record.sourceOffset().isEmpty());
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",1041
1412,"'-tryline","@Test @FixFor(DBZ-965) public void shouldRegularlyFlushLsn() throws InterruptedException, SQLException {
  final int recordCount=10;
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,s1.a).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  waitForStreamingRunning(postgres,TestHelper.TEST_SERVER);
  assertNoRecordsToConsume();
  final Set<String> flushLsn=new HashSet<>();
  try (final PostgresConnection connection=TestHelper.create()){
    flushLsn.add(getConfirmedFlushLsn(connection));
    for (int i=2; i <= recordCount + 2; i++) {
      TestHelper.execute(INSERT_STMT);
      final SourceRecords actualRecords=consumeRecordsByTopic(1);
      assertThat(actualRecords.topics().size()).isEqualTo(1);
      assertThat(actualRecords.recordsForTopic(topicName(s1.a)).size()).isEqualTo(1);
      try {
        Awaitility.await().atMost(2,TimeUnit.SECONDS).ignoreExceptions().until(() -> flushLsn.add(getConfirmedFlushLsn(connection)));
      }
 catch (      ConditionTimeoutException e) {
      }
    }
  }
   Assertions.assertThat(flushLsn.size()).isGreaterThanOrEqualTo((recordCount * 3) / 4);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",1063
1413,"'-tryline","@Test @FixFor(DBZ-2660) public void shouldRegularlyFlushLsnWithTxMonitoring() throws InterruptedException, SQLException {
  final int recordCount=10;
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,s1.a).with(PostgresConnectorConfig.PROVIDE_TRANSACTION_METADATA,true).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  waitForStreamingRunning(postgres,TestHelper.TEST_SERVER);
  assertNoRecordsToConsume();
  final String txTopic=topicName(transaction);
  TestHelper.execute(INSERT_STMT);
  final SourceRecords firstRecords=consumeDmlRecordsByTopic(1);
  assertThat(firstRecords.topics().size()).isEqualTo(2);
  assertThat(firstRecords.recordsForTopic(txTopic).size()).isGreaterThanOrEqualTo(2);
  Assertions.assertThat(firstRecords.recordsForTopic(txTopic).get(1).sourceOffset().containsKey(lsn_commit)).isTrue();
  stopConnector();
  assertConnectorNotRunning();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  waitForStreamingRunning(postgres,TestHelper.TEST_SERVER);
  assertOnlyTransactionRecordsToConsume();
  final Set<String> flushLsn=new HashSet<>();
  try (final PostgresConnection connection=TestHelper.create()){
    flushLsn.add(getConfirmedFlushLsn(connection));
    for (int i=2; i <= recordCount + 2; i++) {
      TestHelper.execute(INSERT_STMT);
      final SourceRecords actualRecords=consumeDmlRecordsByTopic(1);
      assertThat(actualRecords.topics().size()).isEqualTo(2);
      assertThat(actualRecords.recordsForTopic(txTopic).size()).isGreaterThanOrEqualTo(2);
      assertThat(actualRecords.recordsForTopic(topicName(s1.a)).size()).isEqualTo(1);
      try {
        Awaitility.await().atMost(2,TimeUnit.SECONDS).ignoreExceptions().until(() -> flushLsn.add(getConfirmedFlushLsn(connection)));
      }
 catch (      ConditionTimeoutException e) {
      }
    }
  }
   Assertions.assertThat(flushLsn.size()).isGreaterThanOrEqualTo((recordCount * 3) / 4);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",1103
1414,"'-tryline","@Test @FixFor(DBZ-892) @SkipWhenDecoderPluginNameIsNot(value=SkipWhenDecoderPluginNameIsNot.DecoderPluginName.WAL2JSON,reason=Only wal2json decoder emits empty events and passes them to streaming source) public void shouldFlushLsnOnEmptyMessage() throws InterruptedException, SQLException {
  final String DDL_STATEMENT=CREATE TEMPORARY TABLE xx(id INT);;
  final int recordCount=10;
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,s1.a).with(Heartbeat.HEARTBEAT_INTERVAL,1_000).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  waitForStreamingRunning(postgres,TestHelper.TEST_SERVER);
  assertNoRecordsToConsume();
  final Set<String> flushLsn=new HashSet<>();
  TestHelper.execute(INSERT_STMT);
  Awaitility.await().atMost(TestHelper.waitTimeForRecords(),TimeUnit.SECONDS).until(() -> {
    final SourceRecords actualRecords=consumeRecordsByTopic(1);
    final List<SourceRecord> topicRecords=actualRecords.recordsForTopic(topicName(s1.a));
    return topicRecords != null && topicRecords.size() == 1;
  }
);
  try (final PostgresConnection connection=TestHelper.create()){
    flushLsn.add(getConfirmedFlushLsn(connection));
    for (int i=0; i < recordCount; i++) {
      TestHelper.execute(DDL_STATEMENT);
      try {
        Awaitility.await().atMost(5,TimeUnit.SECONDS).ignoreExceptions().until(() -> flushLsn.add(getConfirmedFlushLsn(connection)));
      }
 catch (      ConditionTimeoutException e) {
      }
    }
  }
   Assertions.assertThat(flushLsn.size()).isGreaterThanOrEqualTo((recordCount * 3) / 4);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",1160
1415,"'-tryline","private String getConfirmedFlushLsn(PostgresConnection connection) throws SQLException {
  final String lsn=connection.prepareQueryAndMap(select * from pg_replication_slots where slot_name = ? and database = ? and plugin = ?,statement -> {
    statement.setString(1,ReplicationConnection.Builder.DEFAULT_SLOT_NAME);
    statement.setString(2,postgres);
    statement.setString(3,TestHelper.decoderPlugin().getPostgresPluginName());
  }
,rs -> {
    if (rs.next()) {
      return rs.getString(confirmed_flush_lsn);
    }
 else {
      fail(No replication slot info available);
    }
    return null;
  }
);
  connection.rollback();
  return lsn;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",1830
1416,"'-tryline","@Override protected ReplicationConnection createReplicationConnection(boolean exportSnapshot,boolean doSnapshot) throws SQLException {
  throw new SQLException(Could not connect);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorTaskIT.java",37
1417,"'-tryline","@Before public void before() throws SQLException {
  TestHelper.dropAllSchemas();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresSchemaIT.java",75
1418,"'-tryline","@Before public void before() throws SQLException {
  TestHelper.dropAllSchemas();
  initializeConnectorTestFramework();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\SignalsIT.java",34
1419,"'-tryline","@Before public void before() throws SQLException {
  TestHelper.dropAllSchemas();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\SnapshotWithOverridesProducerIT.java",45
1420,"'-tryline","@Before public void before() throws SQLException {
  TestHelper.dropAllSchemas();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\TablesWithoutPrimaryKeyIT.java",36
1421,"'-tryline","/** 
 * Obtain a replication connection instance for the given slot name.
 * @param slotName the name of the logical decoding slot
 * @param dropOnClose true if the slot should be dropped upon close
 * @return the PostgresConnection instance; never null
 * @throws SQLException if there is a problem obtaining a replication connection
 */
public static ReplicationConnection createForReplication(String slotName,boolean dropOnClose) throws SQLException {
  final PostgresConnectorConfig.LogicalDecoder plugin=decoderPlugin();
  final PostgresConnectorConfig config=new PostgresConnectorConfig(defaultConfig().build());
  return ReplicationConnection.builder(defaultJdbcConfig()).withPlugin(plugin).withSlot(slotName).withTypeRegistry(getTypeRegistry()).dropSlotOnClose(dropOnClose).statusUpdateInterval(Duration.ofSeconds(10)).withSchema(getSchema(config)).build();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\TestHelper.java",76
1422,"'-tryline","/** 
 * Drops all the public non system schemas from the DB.
 * @throws SQLException if anything fails.
 */
public static void dropAllSchemas() throws SQLException {
  String lineSeparator=System.lineSeparator();
  Set<String> schemaNames=schemaNames();
  if (!schemaNames.contains(PostgresSchema.PUBLIC_SCHEMA_NAME)) {
    schemaNames.add(PostgresSchema.PUBLIC_SCHEMA_NAME);
  }
  String dropStmts=schemaNames.stream().map(schema -> \ + schema.replaceAll(\,\\) + \).map(schema -> DROP SCHEMA IF EXISTS  + schema +  CASCADE;).collect(Collectors.joining(lineSeparator));
  TestHelper.execute(dropStmts);
  try {
    TestHelper.executeDDL(init_database.ddl);
  }
 catch (  Exception e) {
    throw new IllegalStateException(Failed to initialize database,e);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\TestHelper.java",163
1423,"'-tryline","protected static Set<String> schemaNames() throws SQLException {
  try (PostgresConnection connection=create()){
    return connection.readAllSchemaNames(Filters.IS_SYSTEM_SCHEMA.negate());
  }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\TestHelper.java",205
1424,"'-tryline","protected static void assertNoOpenTransactions() throws SQLException {
  try (PostgresConnection connection=TestHelper.create()){
    connection.setAutoCommit(true);
    try {
      Awaitility.await().atMost(TestHelper.waitTimeForRecords() * 5,TimeUnit.SECONDS).until(() -> getOpenIdleTransactions(connection).size() == 0);
    }
 catch (    ConditionTimeoutException e) {
      fail(Expected no open transactions but there was at least one.);
    }
  }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\TestHelper.java",335
1425,"'-tryline","private static List<String> getOpenIdleTransactions(PostgresConnection connection) throws SQLException {
  int connectionPID=((PgConnection)connection.connection()).getBackendPID();
  return connection.queryAndMap(SELECT state FROM pg_stat_activity WHERE state like 'idle in transaction' AND pid <>  + connectionPID,rs -> {
    final List<String> ret=new ArrayList<>();
    while (rs.next()) {
      ret.add(rs.getString(1));
    }
    return ret;
  }
);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\TestHelper.java",350
1426,"'-tryline","@BeforeClass public static void beforeClass() throws SQLException {
  TestHelper.dropAllSchemas();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\TransactionMetadataIT.java",50
1427,"'-tryline","@Override protected int getOperation(ResultSet resultSet) throws SQLException {
  return resultSet.getInt(COL_OPERATION);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerChangeTablePointer.java",62
1428,"'-tryline","@Override protected Object getColumnData(ResultSet resultSet,int columnIndex) throws SQLException {
  if (resultSet.getMetaData().getColumnType(columnIndex) == Types.TIME) {
    return resultSet.getTime(columnIndex);
  }
  return super.getColumnData(resultSet,columnIndex);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerChangeTablePointer.java",67
1429,"'-tryline","@Override protected TxLogPosition getNextChangePosition(ResultSet resultSet) throws SQLException {
  return isCompleted() ? TxLogPosition.NULL : TxLogPosition.valueOf(Lsn.valueOf(resultSet.getBytes(COL_COMMIT_LSN)),Lsn.valueOf(resultSet.getBytes(COL_ROW_LSN)));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerChangeTablePointer.java",75
1430,"'-tryline","/** 
 * Check whether TX in currentChangePosition is newer (higher) than TX in previousChangePosition
 * @return true <=> TX in currentChangePosition > TX in previousChangePosition
 * @throws SQLException
 */
protected boolean isNewTransaction() throws SQLException {
  return (getPreviousChangePosition() != null) && getChangePosition().getCommitLsn().compareTo(getPreviousChangePosition().getCommitLsn()) > 0;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerChangeTablePointer.java",81
1431,"'-tryline","@Override public Object[] getData() throws SQLException {
  if (resultSetMapper == null) {
    this.resultSetMapper=createResultSetMapper(getChangeTable().getSourceTable());
  }
  return resultSetMapper.apply(resultSet);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerChangeTablePointer.java",91
1432,"'-tryline","/** 
 * Internally each row is represented as an array of objects, where the order of values corresponds to the order of columns (fields) in the table schema. However, when capture instance contains only a subset of original's table column, in order to preserve the aforementioned order of values in array, raw database results have to be adjusted accordingly.
 * @param table original table
 * @return a mapper which adjusts order of values in case the capture instance contains onlya subset of columns
 */
private ResultSetMapper<Object[]> createResultSetMapper(Table table) throws SQLException {
  ColumnUtils.MappedColumns columnMap=ColumnUtils.toMap(table);
  final List<String> resultColumns=getResultColumnNames();
  final int resultColumnCount=resultColumns.size();
  final IndicesMapping indicesMapping=new IndicesMapping(columnMap.getSourceTableColumns(),resultColumns);
  return resultSet -> {
    final Object[] data=new Object[columnMap.getGreatestColumnPosition()];
    for (int i=0; i < resultColumnCount; i++) {
      int index=indicesMapping.getSourceTableColumnIndex(i);
      if (index == INVALID_COLUMN_INDEX) {
        LOGGER.trace(Data for table '{}' contains a column without position mapping,table.id());
        continue;
      }
      data[index]=getColumnData(resultSet,columnDataOffset + i);
    }
    return data;
  }
;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerChangeTablePointer.java",99
1433,"'-tryline","private List<String> getResultColumnNames() throws SQLException {
  final int columnCount=resultSet.getMetaData().getColumnCount() - (columnDataOffset - 1);
  final List<String> columns=new ArrayList<>(columnCount);
  for (int i=0; i < columnCount; ++i) {
    columns.add(resultSet.getMetaData().getColumnName(columnDataOffset + i));
  }
  return columns;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerChangeTablePointer.java",130
1434,"'-tryline","/** 
 * @return the current largest log sequence number
 */
public Lsn getMaxLsn() throws SQLException {
  return queryAndMap(GET_MAX_LSN,singleResultMapper(rs -> {
    final Lsn ret=Lsn.valueOf(rs.getBytes(1));
    LOGGER.trace(Current maximum lsn is {},ret);
    return ret;
  }
,Maximum LSN query must return exactly one value));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerConnection.java",157
1435,"'-tryline","public MaxLsnResult getMaxLsnResult(boolean skipLowActivityLsnsEnabled) throws SQLException {
  if (skipLowActivityLsnsEnabled) {
    return prepareQueryAndMap(GET_MAX_LSN_SKIP_LOW_ACTIVTY,statement -> {
    }
,singleResultMapper(rs -> {
      final MaxLsnResult ret=new MaxLsnResult(Lsn.valueOf(rs.getBytes(1)),Lsn.valueOf(rs.getBytes(2)));
      LOGGER.trace(Current maximum transactional LSN is {},ret);
      return ret;
    }
,Maximum transactional LSN query must return exactly one value));
  }
  Lsn maxLsn=prepareQueryAndMap(GET_MAX_LSN,statement -> {
  }
,singleResultMapper(rs -> {
    final Lsn ret=Lsn.valueOf(rs.getBytes(1));
    LOGGER.trace(Current maximum LSN is {},ret);
    return ret;
  }
,Maximum LSN query must return exactly one value));
  return new MaxLsnResult(maxLsn,maxLsn);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerConnection.java",168
1436,"'-tryline","/** 
 * @return the smallest log sequence number of table
 */
public Lsn getMinLsn(String changeTableName) throws SQLException {
  String query=GET_MIN_LSN.replace(STATEMENTS_PLACEHOLDER,changeTableName);
  return queryAndMap(query,singleResultMapper(rs -> {
    final Lsn ret=Lsn.valueOf(rs.getBytes(1));
    LOGGER.trace(Current minimum lsn is {},ret);
    return ret;
  }
,Minimum LSN query must return exactly one value));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerConnection.java",186
1437,"'-tryline","/** 
 * Provides all changes recorded by the SQL Server CDC capture process for a given table.
 * @param tableId - the requested table changes
 * @param fromLsn - closed lower bound of interval of changes to be provided
 * @param toLsn  - closed upper bound of interval  of changes to be provided
 * @param consumer - the change processor
 * @throws SQLException
 */
public void getChangesForTable(TableId tableId,Lsn fromLsn,Lsn toLsn,ResultSetConsumer consumer) throws SQLException {
  final String query=GET_ALL_CHANGES_FOR_TABLE.replace(STATEMENTS_PLACEHOLDER,cdcNameForTable(tableId));
  prepareQuery(query,statement -> {
    statement.setBytes(1,fromLsn.getBinary());
    statement.setBytes(2,toLsn.getBinary());
  }
,consumer);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerConnection.java",198
1438,"'-tryline","/** 
 * Provides all changes recorder by the SQL Server CDC capture process for a set of tables.
 * @param changeTables - the requested tables to obtain changes for
 * @param intervalFromLsn - closed lower bound of interval of changes to be provided
 * @param intervalToLsn  - closed upper bound of interval  of changes to be provided
 * @param consumer - the change processor
 * @throws SQLException
 */
public void getChangesForTables(SqlServerChangeTable[] changeTables,Lsn intervalFromLsn,Lsn intervalToLsn,BlockingMultiResultSetConsumer consumer) throws SQLException, InterruptedException {
  final String[] queries=new String[changeTables.length];
  final StatementPreparer[] preparers=new StatementPreparer[changeTables.length];
  int idx=0;
  for (  SqlServerChangeTable changeTable : changeTables) {
    final String query=GET_ALL_CHANGES_FOR_TABLE.replace(STATEMENTS_PLACEHOLDER,changeTable.getCaptureInstance());
    queries[idx]=query;
    final Lsn fromLsn=getFromLsn(changeTable,intervalFromLsn);
    LOGGER.trace(Getting changes for table {} in range[{}, {}],changeTable,fromLsn,intervalToLsn);
    preparers[idx]=statement -> {
      if (queryFetchSize > 0) {
        statement.setFetchSize(queryFetchSize);
      }
      statement.setBytes(1,fromLsn.getBinary());
      statement.setBytes(2,intervalToLsn.getBinary());
    }
;
    idx++;
  }
  prepareQuery(queries,preparers,consumer);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerConnection.java",215
1439,"'-tryline","private Lsn getFromLsn(SqlServerChangeTable changeTable,Lsn intervalFromLsn) throws SQLException {
  Lsn fromLsn=changeTable.getStartLsn().compareTo(intervalFromLsn) > 0 ? changeTable.getStartLsn() : intervalFromLsn;
  return fromLsn.getBinary() != null ? fromLsn : getMinLsn(changeTable.getCaptureInstance());
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerConnection.java",250
1440,"'-tryline","/** 
 * Obtain the next available position in the database log.
 * @param lsn - LSN of the current position
 * @return LSN of the next position in the database
 * @throws SQLException
 */
public Lsn incrementLsn(Lsn lsn) throws SQLException {
  final String query=INCREMENT_LSN;
  return prepareQueryAndMap(query,statement -> {
    statement.setBytes(1,lsn.getBinary());
  }
,singleResultMapper(rs -> {
    final Lsn ret=Lsn.valueOf(rs.getBytes(1));
    LOGGER.trace(Increasing lsn from {} to {},lsn,ret);
    return ret;
  }
,Increment LSN query must return exactly one value));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerConnection.java",255
1441,"'-tryline","/** 
 * Map a commit LSN to a point in time when the commit happened.
 * @param lsn - LSN of the commit
 * @return time when the commit was recorded into the database log or thecurrent time, depending on the setting for the source timestamp mode option
 * @throws SQLException
 */
public Instant timestampOfLsn(Lsn lsn) throws SQLException {
  if (SourceTimestampMode.PROCESSING.equals(sourceTimestampMode)) {
    return clock.currentTime();
  }
  if (lsn.getBinary() == null) {
    return null;
  }
  Instant cachedInstant=lsnToInstantCache.get(lsn);
  if (cachedInstant != null) {
    return cachedInstant;
  }
  return prepareQueryAndMap(lsnToTimestamp,statement -> {
    statement.setBytes(1,lsn.getBinary());
  }
,singleResultMapper(rs -> {
    final Timestamp ts=rs.getTimestamp(1);
    Instant ret=(ts == null) ? null : normalize(ts);
    LOGGER.trace(Timestamp of lsn {} is {},lsn,ret);
    if (ret != null) {
      lsnToInstantCache.put(lsn,ret);
    }
    return ret;
  }
,LSN to timestamp query must return exactly one value));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerConnection.java",273
1442,"'-tryline","/** 
 * Creates an exclusive lock for a given table.
 * @param tableId to be locked
 * @throws SQLException
 */
public void lockTable(TableId tableId) throws SQLException {
  final String lockTableStmt=LOCK_TABLE.replace(STATEMENTS_PLACEHOLDER,tableId.table());
  execute(lockTableStmt);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerConnection.java",323
1443,"'-tryline","public Set<SqlServerChangeTable> listOfChangeTables() throws SQLException {
  final String query=GET_LIST_OF_CDC_ENABLED_TABLES;
  return queryAndMap(query,rs -> {
    final Set<SqlServerChangeTable> changeTables=new HashSet<>();
    while (rs.next()) {
      changeTables.add(new SqlServerChangeTable(new TableId(realDatabaseName,rs.getString(1),rs.getString(2)),rs.getString(3),rs.getInt(4),Lsn.valueOf(rs.getBytes(6)),Lsn.valueOf(rs.getBytes(7)),Arrays.asList(BRACKET_PATTERN.matcher(Optional.ofNullable(rs.getString(15)).orElse()).replaceAll().split(, ))));
    }
    return changeTables;
  }
);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerConnection.java",362
1444,"'-tryline","public Set<SqlServerChangeTable> listOfNewChangeTables(Lsn fromLsn,Lsn toLsn) throws SQLException {
  final String query=GET_LIST_OF_NEW_CDC_ENABLED_TABLES;
  return prepareQueryAndMap(query,ps -> {
    ps.setBytes(1,fromLsn.getBinary());
    ps.setBytes(2,toLsn.getBinary());
  }
,rs -> {
    final Set<SqlServerChangeTable> changeTables=new HashSet<>();
    while (rs.next()) {
      changeTables.add(new SqlServerChangeTable(rs.getString(4),rs.getInt(1),Lsn.valueOf(rs.getBytes(5)),Lsn.valueOf(rs.getBytes(6))));
    }
    return changeTables;
  }
);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerConnection.java",382
1445,"'-tryline","public Table getTableSchemaFromTable(SqlServerChangeTable changeTable) throws SQLException {
  final DatabaseMetaData metadata=connection().getMetaData();
  List<Column> columns=new ArrayList<>();
  try (ResultSet rs=metadata.getColumns(realDatabaseName,changeTable.getSourceTableId().schema(),changeTable.getSourceTableId().table(),null)){
    while (rs.next()) {
      readTableColumn(rs,changeTable.getSourceTableId(),null).ifPresent(ce -> {
        if (changeTable.getCapturedColumns().contains(ce.name())) {
          columns.add(ce.create());
        }
      }
);
    }
  }
   final List<String> pkColumnNames=readPrimaryKeyOrUniqueIndexNames(metadata,changeTable.getSourceTableId());
  Collections.sort(columns);
  return Table.editor().tableId(changeTable.getSourceTableId()).addColumns(columns).setPrimaryKeyNames(pkColumnNames).create();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerConnection.java",403
1446,"'-tryline","public Table getTableSchemaFromChangeTable(SqlServerChangeTable changeTable) throws SQLException {
  final DatabaseMetaData metadata=connection().getMetaData();
  final TableId changeTableId=changeTable.getChangeTableId();
  List<ColumnEditor> columnEditors=new ArrayList<>();
  try (ResultSet rs=metadata.getColumns(realDatabaseName,changeTableId.schema(),changeTableId.table(),null)){
    while (rs.next()) {
      readTableColumn(rs,changeTableId,null).ifPresent(columnEditors::add);
    }
  }
   final List<Column> columns=columnEditors.subList(CHANGE_TABLE_DATA_COLUMN_OFFSET,columnEditors.size() - 1).stream().map(c -> c.position(c.position() - CHANGE_TABLE_DATA_COLUMN_OFFSET).create()).collect(Collectors.toList());
  final List<String> pkColumnNames=new ArrayList<>();
  prepareQuery(GET_LIST_OF_KEY_COLUMNS,ps -> ps.setInt(1,changeTable.getChangeTableObjectId()),rs -> {
    while (rs.next()) {
      pkColumnNames.add(rs.getString(2));
    }
  }
);
  Collections.sort(columns);
  return Table.editor().tableId(changeTable.getSourceTableId()).addColumns(columns).setPrimaryKeyNames(pkColumnNames).create();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerConnection.java",431
1447,"'-tryline","Connection get() throws SQLException ;
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerDefaultValueConverter.java",45
1448,"'-tryline","@Override protected void lockTablesForSchemaSnapshot(ChangeEventSourceContext sourceContext,RelationalSnapshotContext snapshotContext) throws SQLException, InterruptedException {
  if (connectorConfig.getSnapshotIsolationMode() == SnapshotIsolationMode.READ_UNCOMMITTED) {
    jdbcConnection.connection().setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);
    LOGGER.info(Schema locking was disabled in connector configuration);
  }
 else   if (connectorConfig.getSnapshotIsolationMode() == SnapshotIsolationMode.READ_COMMITTED) {
    jdbcConnection.connection().setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
    LOGGER.info(Schema locking was disabled in connector configuration);
  }
 else   if (connectorConfig.getSnapshotIsolationMode() == SnapshotIsolationMode.SNAPSHOT) {
    LOGGER.info(Schema locking was disabled in connector configuration);
  }
 else   if (connectorConfig.getSnapshotIsolationMode() == SnapshotIsolationMode.EXCLUSIVE || connectorConfig.getSnapshotIsolationMode() == SnapshotIsolationMode.REPEATABLE_READ) {
    LOGGER.info(Setting locking timeout to {} s,connectorConfig.snapshotLockTimeout().getSeconds());
    jdbcConnection.execute(SET LOCK_TIMEOUT  + connectorConfig.snapshotLockTimeout().toMillis());
    jdbcConnection.connection().setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);
    ((SqlServerSnapshotContext)snapshotContext).preSchemaSnapshotSavepoint=jdbcConnection.connection().setSavepoint(dbz_schema_snapshot);
    LOGGER.info(Executing schema locking);
    try (Statement statement=jdbcConnection.connection().createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY)){
      for (      TableId tableId : snapshotContext.capturedTables) {
        if (!sourceContext.isRunning()) {
          throw new InterruptedException(Interrupted while locking table  + tableId);
        }
        LOGGER.info(Locking table {},tableId);
        String query=String.format(SELECT TOP(0) * FROM [%s].[%s] WITH (TABLOCKX),tableId.schema(),tableId.table());
        statement.executeQuery(query).close();
      }
    }
   }
 else {
    throw new IllegalStateException(Unknown locking mode specified.);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerSnapshotChangeEventSource.java",108
1449,"'-tryline","@Override protected void releaseSchemaSnapshotLocks(RelationalSnapshotContext snapshotContext) throws SQLException {
  if (connectorConfig.getSnapshotIsolationMode() == SnapshotIsolationMode.REPEATABLE_READ) {
    jdbcConnection.connection().rollback(((SqlServerSnapshotContext)snapshotContext).preSchemaSnapshotSavepoint);
    LOGGER.info(Schema locks released.);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerSnapshotChangeEventSource.java",149
1450,"'-tryline","@Override protected void readTableStructure(ChangeEventSourceContext sourceContext,RelationalSnapshotContext snapshotContext) throws SQLException, InterruptedException {
  Set<String> schemas=snapshotContext.capturedTables.stream().map(TableId::schema).collect(Collectors.toSet());
  for (  String schema : schemas) {
    if (!sourceContext.isRunning()) {
      throw new InterruptedException(Interrupted while reading structure of schema  + schema);
    }
    LOGGER.info(Reading structure of schema '{}',snapshotContext.catalogName);
    jdbcConnection.readSchema(snapshotContext.tables,snapshotContext.catalogName,schema,connectorConfig.getTableFilters().dataCollectionFilter(),null,false);
    changeTables=jdbcConnection.listOfChangeTables().stream().collect(Collectors.toMap(SqlServerChangeTable::getSourceTableId,changeTable -> changeTable,(changeTable1,changeTable2) -> changeTable1.getStartLsn().compareTo(changeTable2.getStartLsn()) > 0 ? changeTable1 : changeTable2));
    changeTables.forEach((tableId,sqlServerChangeTable) -> {
      Table sourceTable=snapshotContext.tables.forTable(tableId);
      if (sourceTable != null) {
        List<Column> cdcEnabledSourceColumns=sourceTable.filterColumns(column -> sqlServerChangeTable.getCapturedColumns().contains(column.name()));
        snapshotContext.tables.overwriteTable(sourceTable.id(),cdcEnabledSourceColumns,sourceTable.primaryKeyColumnNames(),sourceTable.defaultCharsetName());
      }
    }
);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerSnapshotChangeEventSource.java",168
1451,"'-tryline","@Override protected SchemaChangeEvent getCreateTableEvent(RelationalSnapshotContext snapshotContext,Table table) throws SQLException {
  return new SchemaChangeEvent(snapshotContext.offset.getPartition(),snapshotContext.offset.getOffset(),snapshotContext.offset.getSourceInfo(),snapshotContext.catalogName,table.id().schema(),null,table,SchemaChangeEventType.CREATE,true);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerSnapshotChangeEventSource.java",212
1452,"'-tryline","@Override protected Object getColumnValue(ResultSet rs,int columnIndex,Column column) throws SQLException {
  final ResultSetMetaData metaData=rs.getMetaData();
  final int columnType=metaData.getColumnType(columnIndex);
  if (columnType == Types.TIME) {
    return rs.getTimestamp(columnIndex);
  }
 else {
    return super.getColumnValue(rs,columnIndex,column);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerSnapshotChangeEventSource.java",284
1453,"'-tryline","public SqlServerSnapshotContext(String catalogName) throws SQLException {
  super(catalogName);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerSnapshotChangeEventSource.java",305
1454,"'-tryline","private void migrateTable(final Queue<SqlServerChangeTable> schemaChangeCheckpoints) throws InterruptedException, SQLException {
  final SqlServerChangeTable newTable=schemaChangeCheckpoints.poll();
  LOGGER.info(Migrating schema to {},newTable);
  Table tableSchema=metadataConnection.getTableSchemaFromTable(newTable);
  dispatcher.dispatchSchemaChangeEvent(newTable.getSourceTableId(),new SqlServerSchemaChangeEventEmitter(offsetContext,newTable,tableSchema,SchemaChangeEventType.ALTER));
  newTable.setSourceTable(tableSchema);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerStreamingChangeEventSource.java",287
1455,"'-tryline","private SqlServerChangeTable[] getCdcTablesToQuery() throws SQLException, InterruptedException {
  final Set<SqlServerChangeTable> cdcEnabledTables=dataConnection.listOfChangeTables();
  if (cdcEnabledTables.isEmpty()) {
    LOGGER.warn(No table has enabled CDC or security constraints prevents getting the list of change tables);
  }
  final Map<TableId,List<SqlServerChangeTable>> includeListCdcEnabledTables=cdcEnabledTables.stream().filter(changeTable -> {
    if (connectorConfig.getTableFilters().dataCollectionFilter().isIncluded(changeTable.getSourceTableId())) {
      return true;
    }
 else {
      LOGGER.info(CDC is enabled for table {} but the table is not whitelisted by connector,changeTable);
      return false;
    }
  }
).collect(Collectors.groupingBy(x -> x.getSourceTableId()));
  if (includeListCdcEnabledTables.isEmpty()) {
    LOGGER.warn(No whitelisted table has enabled CDC, whitelisted table list does not contain any table with CDC enabled or no table match the white/blacklist filter(s));
  }
  final List<SqlServerChangeTable> tables=new ArrayList<>();
  for (  List<SqlServerChangeTable> captures : includeListCdcEnabledTables.values()) {
    SqlServerChangeTable currentTable=captures.get(0);
    if (captures.size() > 1) {
      SqlServerChangeTable futureTable;
      if (captures.get(0).getStartLsn().compareTo(captures.get(1).getStartLsn()) < 0) {
        futureTable=captures.get(1);
      }
 else {
        currentTable=captures.get(1);
        futureTable=captures.get(0);
      }
      currentTable.setStopLsn(futureTable.getStartLsn());
      futureTable.setSourceTable(dataConnection.getTableSchemaFromTable(futureTable));
      tables.add(futureTable);
      LOGGER.info(Multiple capture instances present for the same table: {} and {},currentTable,futureTable);
    }
    if (schema.tableFor(currentTable.getSourceTableId()) == null) {
      LOGGER.info(Table {} is new to be monitored by capture instance {},currentTable.getSourceTableId(),currentTable.getCaptureInstance());
      offsetContext.event(currentTable.getSourceTableId(),Instant.now());
      dispatcher.dispatchSchemaChangeEvent(currentTable.getSourceTableId(),new SqlServerSchemaChangeEventEmitter(offsetContext,currentTable,dataConnection.getTableSchemaFromTable(currentTable),SchemaChangeEventType.CREATE));
    }
    currentTable.setSourceTable(schema.tableFor(currentTable.getSourceTableId()));
    tables.add(currentTable);
  }
  return tables.toArray(new SqlServerChangeTable[tables.size()]);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerStreamingChangeEventSource.java",309
1456,"'-tryline","@AfterClass public static void dropTables() throws SQLException {
  TestHelper.dropTestDatabase();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\AbstractSqlServerDatatypesTest.java",185
1457,"'-tryline","@BeforeClass public static void createTables() throws SQLException {
  TestHelper.createTestDatabase();
  try (SqlServerConnection connection=TestHelper.testConnection()){
    connection.execute(ALL_DDLS);
    for (    String table : ALL_TABLES) {
      TestHelper.enableTableCdc(connection,table);
    }
    connection.execute(INSERT INTO type_int VALUES (0, 1, 22, 333, 4444, 55555),INSERT INTO type_fp VALUES (0, 1.123, 2, 3.323, 4.323, 5.323, 6.323),INSERT INTO type_string VALUES (0, 'c\u010d', 'vc\u010d', 't\u010d', N'c\u010d', N'vc\u010d', N't\u010d'),INSERT INTO type_time VALUES (0, '2018-07-13', '10:23:45.678', '10:23:45.6789', '2018-07-13 11:23:45.34', '2018-07-13 12:23:45.456+11:00', '2018-07-13 13:23:45.78', '2018-07-13 14:23:45'),INSERT INTO type_xml VALUES (0, '<a>b</a>'));
    TestHelper.waitForCdcRecord(connection,type_xml,rs -> rs.getInt(id) == 0);
  }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\AbstractSqlServerDatatypesTest.java",190
1458,"'-tryline","@Before public void before() throws SQLException {
  TestHelper.createTestDatabase();
  connection=TestHelper.testConnection();
  initializeConnectorTestFramework();
  Testing.Files.delete(TestHelper.DB_HISTORY_PATH);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\CaseSensitivenessIT.java",35
1459,"'-tryline","@After public void after() throws SQLException {
  if (connection != null) {
    connection.close();
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\CaseSensitivenessIT.java",44
1460,"'-tryline","@BeforeClass public static void beforeClass() throws SQLException {
  createTables();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\DatatypesFromSnapshotIT.java",23
1461,"'-tryline","@Before public void before() throws SQLException {
  TestHelper.createTestDatabase();
  connection=TestHelper.testConnection();
  connection.execute(CREATE TABLE tablea (id int primary key, cola varchar(30)),CREATE TABLE tableb (id int primary key, colb BIGINT NOT NULL),CREATE TABLE tablec (id int primary key, colc varchar(30)));
  TestHelper.enableTableCdc(connection,tablea);
  TestHelper.enableTableCdc(connection,tableb);
  initializeConnectorTestFramework();
  Testing.Files.delete(TestHelper.DB_HISTORY_PATH);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\EventProcessingFailureHandlingIT.java",36
1462,"'-tryline","@After public void after() throws SQLException {
  if (connection != null) {
    connection.close();
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\EventProcessingFailureHandlingIT.java",51
1463,"'-tryline","@Before public void before() throws SQLException {
  TestHelper.createTestDatabase();
  connection=TestHelper.testConnection();
  connection.execute(CREATE TABLE tablea (id int primary key, cola varchar(30)),CREATE TABLE tableb (id int primary key, colb varchar(30)),CREATE TABLE tablec (id int primary key, colc varchar(30)));
  TestHelper.enableTableCdc(connection,tablea);
  TestHelper.enableTableCdc(connection,tableb);
  initializeConnectorTestFramework();
  Testing.Files.delete(TestHelper.DB_HISTORY_PATH);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SchemaHistoryTopicIT.java",41
1464,"'-tryline","@After public void after() throws SQLException {
  if (connection != null) {
    connection.close();
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SchemaHistoryTopicIT.java",56
1465,"'-tryline","@Before public void before() throws SQLException {
  TestHelper.createTestDatabase();
  connection=TestHelper.testConnection();
  connection.execute(CREATE TABLE table1 (id int, name varchar(30), price decimal(8,2), ts datetime2(0), primary key(id)));
  for (int i=0; i < INITIAL_RECORDS_PER_TABLE; i++) {
    connection.execute(String.format(INSERT INTO table1 VALUES(%s, '%s', %s, '%s'),i,name + i,new BigDecimal(i + .23),2018-07-18 13:28:56));
  }
  TestHelper.enableTableCdc(connection,table1);
  initializeConnectorTestFramework();
  Testing.Files.delete(TestHelper.DB_HISTORY_PATH);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SnapshotIT.java",60
1466,"'-tryline","@After public void after() throws SQLException {
  if (connection != null) {
    connection.close();
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SnapshotIT.java",79
1467,"'-tryline","private void testStreaming() throws SQLException, InterruptedException {
  for (int i=0; i < STREAMING_RECORDS_PER_TABLE; i++) {
    final int id=i + INITIAL_RECORDS_PER_TABLE;
    connection.execute(String.format(INSERT INTO table1 VALUES(%s, '%s', %s, '%s'),id,name + id,new BigDecimal(id + .23),2018-07-18 13:28:56));
  }
  final int lastId=INITIAL_RECORDS_PER_TABLE + (STREAMING_RECORDS_PER_TABLE - 1);
  TestHelper.waitForCdcRecord(connection,table1,rs -> rs.getInt(id) == lastId);
  final SourceRecords records=consumeRecordsByTopic(STREAMING_RECORDS_PER_TABLE);
  final List<SourceRecord> table1=records.recordsForTopic(server1.dbo.table1);
  assertThat(table1).hasSize(INITIAL_RECORDS_PER_TABLE);
  for (int i=0; i < INITIAL_RECORDS_PER_TABLE; i++) {
    final int id=i + INITIAL_RECORDS_PER_TABLE;
    final SourceRecord record1=table1.get(i);
    final List<SchemaAndValueField> expectedKey1=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,id));
    final List<SchemaAndValueField> expectedRow1=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,id),new SchemaAndValueField(name,Schema.OPTIONAL_STRING_SCHEMA,name + id),new SchemaAndValueField(price,Decimal.builder(2).parameter(connect.decimal.precision,8).optional().build(),new BigDecimal(id + .23)),new SchemaAndValueField(ts,Timestamp.builder().optional().schema(),1_531_920_536_000l));
    final Struct key1=(Struct)record1.key();
    final Struct value1=(Struct)record1.value();
    assertRecord(key1,expectedKey1);
    assertRecord((Struct)value1.get(after),expectedRow1);
    assertThat(record1.sourceOffset()).hasSize(4);
    Assert.assertTrue(record1.sourceOffset().containsKey(change_lsn));
    Assert.assertTrue(record1.sourceOffset().containsKey(commit_lsn));
    Assert.assertTrue(record1.sourceOffset().containsKey(event_serial_no));
    assertNull(value1.get(before));
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SnapshotIT.java",201
1468,"'-tryline","@Test @FixFor(DBZ-2456) public void shouldSelectivelySnapshotTables() throws SQLException, InterruptedException {
  connection.execute(CREATE TABLE table_a (id int, name varchar(30), amount integer primary key(id)),CREATE TABLE table_b (id int, name varchar(30), amount integer primary key(id)));
  connection.execute(INSERT INTO table_a VALUES(10, 'some_name', 120));
  connection.execute(INSERT INTO table_b VALUES(11, 'some_name', 447));
  TestHelper.enableTableCdc(connection,table_a);
  TestHelper.enableTableCdc(connection,table_b);
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(SqlServerConnectorConfig.COLUMN_EXCLUDE_LIST,dbo.table_a.amount).with(SqlServerConnectorConfig.TABLE_INCLUDE_LIST,dbo.table_a,dbo.table_b).with(CommonConnectorConfig.SNAPSHOT_MODE_TABLES,[A-z].*dbo.table_a).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  SourceRecords records=consumeRecordsByTopic(1);
  List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.table_a);
  List<SourceRecord> tableB=records.recordsForTopic(server1.dbo.table_b);
  Assertions.assertThat(tableA).hasSize(1);
  Assertions.assertThat(tableB).isNull();
  TestHelper.waitForSnapshotToBeCompleted();
  connection.execute(INSERT INTO table_a VALUES(22, 'some_name', 556));
  connection.execute(INSERT INTO table_b VALUES(24, 'some_name', 558));
  records=consumeRecordsByTopic(2);
  tableA=records.recordsForTopic(server1.dbo.table_a);
  tableB=records.recordsForTopic(server1.dbo.table_b);
  Assertions.assertThat(tableA).hasSize(1);
  Assertions.assertThat(tableB).hasSize(1);
  stopConnector();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SnapshotIT.java",374
1469,"'-tryline","@Before public void before() throws SQLException {
  TestHelper.createTestDatabase();
  connection=TestHelper.testConnection();
  connection.execute(CREATE TABLE table1 (id int, name varchar(30), price decimal(8,2), ts datetime2(0), soft_deleted bit, primary key(id)));
  connection.execute(CREATE TABLE table2 (id int, name varchar(30), price decimal(8,2), ts datetime2(0), soft_deleted bit, primary key(id)));
  connection.execute(CREATE TABLE table3 (id int, name varchar(30), price decimal(8,2), ts datetime2(0), soft_deleted bit, primary key(id)));
  for (int i=0; i < INITIAL_RECORDS_PER_TABLE; i++) {
    connection.execute(String.format(INSERT INTO table1 VALUES(%s, '%s', %s, '%s', %s),i,name + i,new BigDecimal(i + .23),2018-07-18 13:28:56,i % 2));
    connection.execute(String.format(INSERT INTO table2 VALUES(%s, '%s', %s, '%s', %s),i,name + i,new BigDecimal(i + .23),2018-07-18 13:28:56,i % 2));
    connection.execute(String.format(INSERT INTO table3 VALUES(%s, '%s', %s, '%s', %s),i,name + i,new BigDecimal(i + .23),2018-07-18 13:28:56,i % 2));
  }
  TestHelper.enableTableCdc(connection,table1);
  TestHelper.enableTableCdc(connection,table2);
  TestHelper.enableTableCdc(connection,table3);
  initializeConnectorTestFramework();
  Testing.Files.delete(TestHelper.DB_HISTORY_PATH);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SnapshotWithSelectOverridesIT.java",38
1470,"'-tryline","@After public void after() throws SQLException {
  if (connection != null) {
    connection.close();
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SnapshotWithSelectOverridesIT.java",85
1471,"'-tryline","@Before public void before() throws SQLException {
  TestHelper.createTestDatabase();
  connection=TestHelper.testConnection();
  initializeConnectorTestFramework();
  Testing.Files.delete(TestHelper.DB_HISTORY_PATH);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SpecialCharsInNamesIT.java",36
1472,"'-tryline","@After public void after() throws SQLException {
  if (connection != null) {
    connection.close();
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SpecialCharsInNamesIT.java",45
1473,"'-tryline","@Before public void before() throws SQLException {
  TestHelper.createTestDatabase();
  connection=TestHelper.testConnection();
  connection.execute(CREATE TABLE binary_mode_test (id INT IDENTITY (1, 1) PRIMARY KEY, binary_col BINARY(3) NOT NULL, varbinary_col VARBINARY(3) NOT NULL),INSERT INTO binary_mode_test (binary_col, varbinary_col) VALUES (0x010203, 0x010203));
  TestHelper.enableTableCdc(connection,binary_mode_test);
  initializeConnectorTestFramework();
  Testing.Files.delete(TestHelper.DB_HISTORY_PATH);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerBinaryModeIT.java",31
1474,"'-tryline","@After public void after() throws SQLException {
  stopConnector();
  if (connection != null) {
    connection.close();
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerBinaryModeIT.java",45
1475,"'-tryline","@Before public void before() throws SQLException {
  TestHelper.createTestDatabase();
  connection=TestHelper.testConnection();
  connection.execute(CREATE TABLE tablea (id int primary key, cola varchar(30)),CREATE TABLE tableb (id int primary key, colb varchar(30)),CREATE TABLE tablec (id int primary key, colc varchar(30)));
  TestHelper.enableTableCdc(connection,tablea);
  TestHelper.enableTableCdc(connection,tableb);
  initializeConnectorTestFramework();
  Testing.Files.delete(TestHelper.DB_HISTORY_PATH);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerChangeTableSetIT.java",45
1476,"'-tryline","@After public void after() throws SQLException {
  if (connection != null) {
    connection.close();
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerChangeTableSetIT.java",61
1477,"'-tryline","@Before public void before() throws SQLException {
  databaseZoneOffset=getDatabaseZoneOffset();
  TestHelper.dropTestDatabase();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectionIT.java",41
1478,"'-tryline","private ZoneOffset getDatabaseZoneOffset() throws SQLException {
  try (SqlServerConnection connection=TestHelper.adminConnection()){
    connection.connect();
    int datetimeoffset=connection.queryAndMap(SELECT DATEPART(TZoffset, SYSDATETIME()),rs -> {
      rs.next();
      return rs.getInt(1);
    }
);
    return ZoneOffset.ofTotalSeconds(datetimeoffset * 60);
  }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectionIT.java",47
1479,"'-tryline","@Before public void before() throws SQLException {
  TestHelper.createTestDatabase();
  connection=TestHelper.testConnection();
  connection.execute(CREATE TABLE tablea (id int primary key, cola varchar(30)),CREATE TABLE tableb (id int primary key, colb varchar(30)),INSERT INTO tablea VALUES(1, 'a'));
  TestHelper.enableTableCdc(connection,tablea);
  TestHelper.enableTableCdc(connection,tableb);
  initializeConnectorTestFramework();
  Testing.Files.delete(TestHelper.DB_HISTORY_PATH);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",75
1480,"'-tryline","@After public void after() throws SQLException {
  if (connection != null) {
    connection.close();
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",91
1481,"'-tryline","@Test @FixFor(DBZ-1015) public void shouldRewriteIdentityKey() throws InterruptedException, SQLException {
  connection.execute(CREATE TABLE keyless (id int, name varchar(30)),INSERT INTO keyless VALUES(1, 'k'));
  TestHelper.enableTableCdc(connection,keyless);
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(SqlServerConnectorConfig.TABLE_INCLUDE_LIST,dbo.keyless).with(SqlServerConnectorConfig.MSG_KEY_COLUMNS,(.*).keyless:id).build();
  start(SqlServerConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(1);
  List<SourceRecord> recordsForTopic=records.recordsForTopic(server1.dbo.keyless);
  assertThat(recordsForTopic.get(0).key()).isNotNull();
  Struct key=(Struct)recordsForTopic.get(0).key();
  Assertions.assertThat(key.get(id)).isNotNull();
  stopConnector();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",1964
1482,"'-tryline","@Test @FixFor(DBZ-1491) public void shouldCaptureTableSchema() throws SQLException, InterruptedException {
  connection.execute(CREATE TABLE table_schema_test (key_cola int not null, + key_colb varchar(10) not null, + cola int not null,+ colb datetimeoffset not null default ('2019-01-01 12:34:56.1234567+04:00'),+ colc varchar(20) default ('default_value'),+ cold float,+ primary key(key_cola, key_colb)));
  TestHelper.enableTableCdc(connection,table_schema_test);
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForSnapshotToBeCompleted();
  connection.execute(INSERT INTO table_schema_test (key_cola, key_colb, cola, colb, colc, cold) VALUES(1, 'a', 100, '2019-01-01 10:20:39.1234567 +02:00', 'some_value', 100.20));
  List<SourceRecord> records=consumeRecordsByTopic(1).recordsForTopic(server1.dbo.table_schema_test);
  assertThat(records).hasSize(1);
  SourceRecordAssert.assertThat(records.get(0)).keySchemaIsEqualTo(SchemaBuilder.struct().name(server1.dbo.table_schema_test.Key).field(key_cola,Schema.INT32_SCHEMA).field(key_colb,Schema.STRING_SCHEMA).build()).valueAfterFieldSchemaIsEqualTo(SchemaBuilder.struct().optional().name(server1.dbo.table_schema_test.Value).field(key_cola,Schema.INT32_SCHEMA).field(key_colb,Schema.STRING_SCHEMA).field(cola,Schema.INT32_SCHEMA).field(colb,SchemaBuilder.string().name(io.debezium.time.ZonedTimestamp).required().defaultValue(2019-01-01T12:34:56.1234567+04:00).version(1).build()).field(colc,SchemaBuilder.string().optional().defaultValue(default_value).build()).field(cold,Schema.OPTIONAL_FLOAT64_SCHEMA).build());
  stopConnector();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",1991
1483,"'-tryline","@Test @FixFor(DBZ-1988) public void shouldHonorSourceTimestampMode() throws InterruptedException, SQLException {
  connection.execute(CREATE TABLE source_timestamp_mode (id int, name varchar(30) primary key(id)));
  TestHelper.enableTableCdc(connection,source_timestamp_mode);
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(SqlServerConnectorConfig.TABLE_INCLUDE_LIST,dbo.source_timestamp_mode).with(SqlServerConnectorConfig.SOURCE_TIMESTAMP_MODE,processing).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(sql_server,server1);
  connection.execute(INSERT INTO source_timestamp_mode VALUES(1, 'abc'));
  SourceRecords records=consumeRecordsByTopic(1);
  List<SourceRecord> recordsForTopic=records.recordsForTopic(server1.dbo.source_timestamp_mode);
  SourceRecord record=recordsForTopic.get(0);
  long eventTs=(long)((Struct)record.value()).get(ts_ms);
  long sourceTs=(long)((Struct)((Struct)record.value()).get(source)).get(ts_ms);
  assertThat(eventTs - sourceTs).isLessThan(100);
  stopConnector();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",2095
1484,"'-tryline","/** 
 * Create 2 Tables. Each table has 4 columns cola: Decimal(8,4) type with 8 precision and 4 scale colb: Decimal - Default precision(18) and default scale(0) colc: numeric(7,1) - 7 precision and 1 scale cold: numeric- Default precision(18) and default scale(0)
 * @throws SQLException
 */
@Before public void before() throws SQLException {
  TestHelper.createTestDatabase();
  connection=TestHelper.testConnection();
  connection.execute(CREATE TABLE tablenuma (id int IDENTITY(1,1) primary key, cola DECIMAL(8, 4),colb DECIMAL, colc numeric(8,1), cold numeric),CREATE TABLE tablenumb (id int IDENTITY(1,1) primary key, cola DECIMAL(8, 4),colb DECIMAL, colc numeric(8,1), cold numeric),CREATE TABLE tablenumc (id int IDENTITY(1,1) primary key, cola DECIMAL(8, 4),colb DECIMAL, colc numeric(8,1), cold numeric),CREATE TABLE tablenumd (id int IDENTITY(1,1) primary key, cola DECIMAL(8, 4),colb DECIMAL, colc numeric(8,1), cold numeric));
  TestHelper.enableTableCdc(connection,tablenuma);
  TestHelper.enableTableCdc(connection,tablenumb);
  TestHelper.enableTableCdc(connection,tablenumc);
  TestHelper.enableTableCdc(connection,tablenumd);
  initializeConnectorTestFramework();
  Testing.Files.delete(TestHelper.DB_HISTORY_PATH);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SQLServerNumericColumnIT.java",37
1485,"'-tryline","@After public void after() throws SQLException {
  if (connection != null) {
    connection.close();
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SQLServerNumericColumnIT.java",63
1486,"'-tryline","@Before public void before() throws SQLException {
  TestHelper.createTestDatabase();
  initializeConnectorTestFramework();
  Testing.Files.delete(TestHelper.DB_HISTORY_PATH);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\TablesWithoutPrimaryKeyIT.java",40
1487,"'-tryline","@After public void after() throws SQLException {
  if (connection != null) {
    connection.close();
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\TablesWithoutPrimaryKeyIT.java",48
1488,"'-tryline","private void waitForEnabledCdc(SqlServerConnection connection,String table) throws SQLException, InterruptedException {
  Awaitility.await(CDC  + table).atMost(1,TimeUnit.MINUTES).pollInterval(100,TimeUnit.MILLISECONDS).until(() -> TestHelper.isCdcEnabled(connection,table));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\TablesWithoutPrimaryKeyIT.java",132
1489,"'-tryline","private void waitForDisabledCdc(SqlServerConnection connection,String table) throws SQLException, InterruptedException {
  Awaitility.await(CDC  + table).atMost(1,TimeUnit.MINUTES).pollInterval(100,TimeUnit.MILLISECONDS).until(() -> !TestHelper.isCdcEnabled(connection,table));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\TablesWithoutPrimaryKeyIT.java",140
1490,"'-tryline","@Before public void before() throws SQLException {
  TestHelper.createTestDatabase();
  connection=TestHelper.testConnection();
  connection.execute(CREATE TABLE tablea (id int primary key, cola varchar(30)),CREATE TABLE tableb (id int primary key, colb varchar(30)),INSERT INTO tablea VALUES(1, 'a'));
  TestHelper.enableTableCdc(connection,tablea);
  TestHelper.enableTableCdc(connection,tableb);
  initializeConnectorTestFramework();
  Testing.Files.delete(TestHelper.DB_HISTORY_PATH);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\TransactionMetadataIT.java",55
1491,"'-tryline","@After public void after() throws SQLException {
  if (connection != null) {
    connection.close();
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\TransactionMetadataIT.java",71
1492,"'-tryline","private static void dropTestDatabase(SqlServerConnection connection) throws SQLException {
  try {
    Awaitility.await(Disabling CDC).atMost(60,TimeUnit.SECONDS).until(() -> {
      try {
        connection.execute(USE testDB);
      }
 catch (      SQLException e) {
        return true;
      }
      try {
        disableDbCdc(connection,testDB);
        return true;
      }
 catch (      SQLException e) {
        return false;
      }
    }
);
  }
 catch (  ConditionTimeoutException e) {
    throw new IllegalArgumentException(Failed to disable CDC on testDB,e);
  }
  connection.execute(USE master);
  try {
    Awaitility.await(Dropping database testDB).atMost(60,TimeUnit.SECONDS).until(() -> {
      try {
        String sql=IF EXISTS(select 1 from sys.databases where name = 'testDB') DROP DATABASE testDB;
        connection.execute(sql);
        return true;
      }
 catch (      SQLException e) {
        LOGGER.warn(DROP DATABASE testDB failed (will be retried): {},e.getMessage());
        try {
          connection.execute(ALTER DATABASE testDB SET SINGLE_USER WITH ROLLBACK IMMEDIATE;);
        }
 catch (        SQLException e2) {
          LOGGER.error(Failed to rollback immediately,e2);
        }
        return false;
      }
    }
);
  }
 catch (  ConditionTimeoutException e) {
    throw new IllegalStateException(Failed to drop test database,e);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\util\TestHelper.java",163
1493,"'-tryline","/** 
 * Enables CDC for a given database, if not already enabled.
 * @param name the name of the DB, may not be  {@code null}
 * @throws SQLException if anything unexpected fails
 */
public static void enableDbCdc(SqlServerConnection connection,String name) throws SQLException {
  try {
    Objects.requireNonNull(name);
    connection.execute(ENABLE_DB_CDC.replace(STATEMENTS_PLACEHOLDER,name));
    Awaitility.await().atMost(60,TimeUnit.SECONDS).until(() -> {
      final String sql=IS_CDC_ENABLED.replace(STATEMENTS_PLACEHOLDER,name);
      return connection.queryAndMap(sql,connection.singleResultMapper(rs -> rs.getLong(1),)) == 1L;
    }
);
  }
 catch (  SQLException e) {
    LOGGER.error(Failed to enable CDC on database  + name);
    throw e;
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\util\TestHelper.java",222
1494,"'-tryline","/** 
 * Disables CDC for a given database, if not already disabled.
 * @param name the name of the DB, may not be  {@code null}
 * @throws SQLException if anything unexpected fails
 */
protected static void disableDbCdc(SqlServerConnection connection,String name) throws SQLException {
  Objects.requireNonNull(name);
  connection.execute(DISABLE_DB_CDC.replace(STATEMENTS_PLACEHOLDER,name));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\util\TestHelper.java",247
1495,"'-tryline","/** 
 * Enables CDC for a table if not already enabled and generates the wrapper functions for that table.
 * @param connection sql connection
 * @param name the name of the table, may not be  {@code null}
 * @throws SQLException if anything unexpected fails
 */
public static void enableTableCdc(SqlServerConnection connection,String name) throws SQLException {
  Objects.requireNonNull(name);
  String enableCdcForTableStmt=ENABLE_TABLE_CDC.replace(STATEMENTS_PLACEHOLDER,name);
  String generateWrapperFunctionsStmts=CDC_WRAPPERS_DML.replaceAll(STATEMENTS_PLACEHOLDER,name.replaceAll(\\$,\\\\\\$));
  connection.execute(enableCdcForTableStmt,generateWrapperFunctionsStmts);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\util\TestHelper.java",260
1496,"'-tryline","/** 
 * @param name the name of the table, may not be  {@code null}
 * @return true if CDC is enabled for the table
 * @throws SQLException if anything unexpected fails
 */
public static boolean isCdcEnabled(SqlServerConnection connection,String name) throws SQLException {
  Objects.requireNonNull(name);
  String tableEnabledStmt=IS_CDC_TABLE_ENABLED.replace(STATEMENTS_PLACEHOLDER,name);
  return connection.queryAndMap(tableEnabledStmt,connection.singleResultMapper(rs -> rs.getInt(1) > 0,Cannot get CDC status of the table));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\util\TestHelper.java",277
1497,"'-tryline","/** 
 * Enables CDC for a table with a custom capture name functions for that table.
 * @param connection sql connection
 * @param tableName the name of the table, may not be  {@code null}
 * @param captureName the name of the capture instance, may not be  {@code null}
 * @throws SQLException if anything unexpected fails
 */
public static void enableTableCdc(SqlServerConnection connection,String tableName,String captureName) throws SQLException {
  Objects.requireNonNull(tableName);
  Objects.requireNonNull(captureName);
  String enableCdcForTableStmt=String.format(ENABLE_TABLE_CDC_WITH_CUSTOM_CAPTURE,tableName,captureName,NULL);
  connection.execute(enableCdcForTableStmt);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\util\TestHelper.java",291
1498,"'-tryline","/** 
 * Enables CDC for a table with a custom capture name functions for that table.
 * @param connection sql connection
 * @param tableName the name of the table, may not be  {@code null}
 * @param captureName the name of the capture instance, may not be  {@code null}
 * @param captureColumnList the source table columns that are to be included in the change table, may not be  {@code null}
 * @throws SQLException if anything unexpected fails
 */
public static void enableTableCdc(SqlServerConnection connection,String tableName,String captureName,List<String> captureColumnList) throws SQLException {
  Objects.requireNonNull(tableName);
  Objects.requireNonNull(captureName);
  Objects.requireNonNull(captureColumnList);
  String captureColumnListParam=String.format(N'%s',Strings.join(,,captureColumnList));
  String enableCdcForTableStmt=String.format(ENABLE_TABLE_CDC_WITH_CUSTOM_CAPTURE,tableName,captureName,captureColumnListParam);
  connection.execute(enableCdcForTableStmt);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\util\TestHelper.java",311
1499,"'-tryline","/** 
 * Disables CDC for a table for which it was enabled before.
 * @param name the name of the table, may not be  {@code null}
 * @throws SQLException if anything unexpected fails
 */
public static void disableTableCdc(SqlServerConnection connection,String name) throws SQLException {
  Objects.requireNonNull(name);
  String disableCdcForTableStmt=DISABLE_TABLE_CDC.replace(STATEMENTS_PLACEHOLDER,name);
  connection.execute(disableCdcForTableStmt);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\util\TestHelper.java",334
1500,"'-tryline","boolean apply(ResultSet rs) throws SQLException ;
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\util\TestHelper.java",494
1501,"'-tryline","@Override public void accept(ResultSet[] rs) throws SQLException, InterruptedException {
  if (rs.length == 1) {
    final ResultSet resultSet=rs[0];
    while (resultSet.next()) {
      if (handler.apply(resultSet)) {
        this.found=true;
        break;
      }
    }
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\util\TestHelper.java",509
1502,"'-tryline","/** 
 * Establish a connection to the database denoted by the given configuration.
 * @param config the configuration with JDBC connection information
 * @return the JDBC connection; may not be null
 * @throws SQLException if there is an error connecting to the database
 */
Connection connect(JdbcConfiguration config) throws SQLException ;
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",93
1503,"'-tryline","@Override public Connection connect(JdbcConfiguration config) throws SQLException {
  if (Strings.isNullOrEmpty(config.getConnectionFactoryClassName())) {
    return defaultConnectionFactory.connect(config);
  }
  if (customConnectionFactory == null) {
    customConnectionFactory=config.getInstance(JdbcConfiguration.CONNECTION_FACTORY_CLASS,ConnectionFactory.class,classLoaderSupplier);
  }
  return customConnectionFactory.connect(config);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",113
1504,"'-tryline","/** 
 * Apply a series of operations against the given JDBC statement.
 * @param statement the JDBC statement to use to execute one or more operations
 * @throws SQLException if there is an error connecting to the database or executing the statements
 */
void apply(Statement statement) throws SQLException ;
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",131
1505,"'-tryline","T apply(ResultSet rs) throws SQLException ;
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",145
1506,"'-tryline","public JdbcConnection setAutoCommit(boolean autoCommit) throws SQLException {
  connection().setAutoCommit(autoCommit);
  return this;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",382
1507,"'-tryline","public JdbcConnection commit() throws SQLException {
  Connection conn=connection();
  if (!conn.getAutoCommit()) {
    conn.commit();
  }
  return this;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",387
1508,"'-tryline","public synchronized JdbcConnection rollback() throws SQLException {
  if (!isConnected()) {
    return this;
  }
  Connection conn=connection();
  if (!conn.getAutoCommit()) {
    conn.rollback();
  }
  return this;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",395
1509,"'-tryline","/** 
 * Ensure a connection to the database is established.
 * @return this object for chaining methods together
 * @throws SQLException if there is an error connecting to the database
 */
public JdbcConnection connect() throws SQLException {
  connection();
  return this;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",406
1510,"'-tryline","/** 
 * Execute a series of SQL statements as a single transaction.
 * @param sqlStatements the SQL statements that are to be performed as a single transaction
 * @return this object for chaining methods together
 * @throws SQLException if there is an error connecting to the database or executing the statements
 * @see #execute(Operations)
 */
public JdbcConnection execute(String... sqlStatements) throws SQLException {
  return execute(statement -> {
    for (    String sqlStatement : sqlStatements) {
      if (sqlStatement != null) {
        if (LOGGER.isTraceEnabled()) {
          LOGGER.trace(executing '{}',sqlStatement);
        }
        statement.execute(sqlStatement);
      }
    }
  }
);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",417
1511,"'-tryline","/** 
 * Execute a series of operations as a single transaction.
 * @param operations the function that will be called with a newly-created {@link Statement}, and that performs one or more operations on that statement object
 * @return this object for chaining methods together
 * @throws SQLException if there is an error connecting to the database or executing the statements
 */
public JdbcConnection execute(Operations operations) throws SQLException {
  Connection conn=connection();
  try (Statement statement=conn.createStatement()){
    operations.apply(statement);
    commit();
  }
   return this;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",438
1512,"'-tryline","void accept(ResultSet rs) throws SQLException ;
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",456
1513,"'-tryline","T apply(ResultSet rs) throws SQLException ;
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",460
1514,"'-tryline","void accept(ResultSet rs) throws SQLException, InterruptedException ;
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",464
1515,"'-tryline","void accept(List<?> parameters,ResultSet rs) throws SQLException ;
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",468
1516,"'-tryline","void accept(ResultSet[] rs) throws SQLException ;
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",472
1517,"'-tryline","void accept(ResultSet[] rs) throws SQLException, InterruptedException ;
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",476
1518,"'-tryline","void accept(PreparedStatement statement) throws SQLException ;
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",480
1519,"'-tryline","void accept(CallableStatement statement) throws SQLException ;
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",485
1520,"'-tryline","/** 
 * Execute a SQL query.
 * @param query the SQL query
 * @param resultConsumer the consumer of the query results
 * @return this object for chaining methods together
 * @throws SQLException if there is an error connecting to the database or executing the statements
 * @see #execute(Operations)
 */
public JdbcConnection query(String query,ResultSetConsumer resultConsumer) throws SQLException {
  return query(query,Connection::createStatement,resultConsumer);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",488
1521,"'-tryline","/** 
 * Execute a SQL query and map the result set into an expected type.
 * @param < T > type returned by the mapper
 * @param query the SQL query
 * @param mapper the function processing the query results
 * @return the result of the mapper calculation
 * @throws SQLException if there is an error connecting to the database or executing the statements
 * @see #execute(Operations)
 */
public <T>T queryAndMap(String query,ResultSetMapper<T> mapper) throws SQLException {
  return queryAndMap(query,Connection::createStatement,mapper);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",501
1522,"'-tryline","/** 
 * Execute a stored procedure.
 * @param sql the SQL query; may not be {@code null}
 * @param callPreparer a {@link CallPreparer} instance which can be used to set additional parameters; may be null
 * @param resultSetConsumer a {@link ResultSetConsumer} instance which can be used to process the results; may be null
 * @return this object for chaining methods together
 * @throws SQLException if anything unexpected fails
 */
public JdbcConnection call(String sql,CallPreparer callPreparer,ResultSetConsumer resultSetConsumer) throws SQLException {
  Connection conn=connection();
  try (CallableStatement callableStatement=conn.prepareCall(sql)){
    if (callPreparer != null) {
      callPreparer.accept(callableStatement);
    }
    try (ResultSet rs=callableStatement.executeQuery()){
      if (resultSetConsumer != null) {
        resultSetConsumer.accept(rs);
      }
    }
   }
   return this;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",515
1523,"'-tryline","/** 
 * Execute a SQL query.
 * @param query the SQL query
 * @param statementFactory the function that should be used to create the statement from the connection; may not be null
 * @param resultConsumer the consumer of the query results
 * @return this object for chaining methods together
 * @throws SQLException if there is an error connecting to the database or executing the statements
 * @see #execute(Operations)
 */
public JdbcConnection query(String query,StatementFactory statementFactory,ResultSetConsumer resultConsumer) throws SQLException {
  Connection conn=connection();
  try (Statement statement=statementFactory.createStatement(conn)){
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace(running '{}',query);
    }
    try (ResultSet resultSet=statement.executeQuery(query)){
      if (resultConsumer != null) {
        resultConsumer.accept(resultSet);
      }
    }
   }
   return this;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",539
1524,"'-tryline","/** 
 * Execute multiple SQL prepared queries where each query is executed with the same set of parameters.
 * @param multiQuery the array of prepared queries
 * @param preparer the function that supplies arguments to the prepared statement; may not be null
 * @param resultConsumer the consumer of the query results
 * @return this object for chaining methods together
 * @throws SQLException if there is an error connecting to the database or executing the statements
 * @see #execute(Operations)
 */
public JdbcConnection prepareQuery(String[] multiQuery,StatementPreparer preparer,BlockingMultiResultSetConsumer resultConsumer) throws SQLException, InterruptedException {
  final StatementPreparer[] preparers=new StatementPreparer[multiQuery.length];
  Arrays.fill(preparers,preparer);
  return prepareQuery(multiQuery,preparers,resultConsumer);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",564
1525,"'-tryline","/** 
 * Execute multiple SQL prepared queries where each query is executed with the same set of parameters.
 * @param multiQuery the array of prepared queries
 * @param preparers the array of functions that supply arguments to the prepared statements; may not be null
 * @param resultConsumer the consumer of the query results
 * @return this object for chaining methods together
 * @throws SQLException if there is an error connecting to the database or executing the statements
 * @see #execute(Operations)
 */
public JdbcConnection prepareQuery(String[] multiQuery,StatementPreparer[] preparers,BlockingMultiResultSetConsumer resultConsumer) throws SQLException, InterruptedException {
  final ResultSet[] resultSets=new ResultSet[multiQuery.length];
  final PreparedStatement[] preparedStatements=new PreparedStatement[multiQuery.length];
  try {
    for (int i=0; i < multiQuery.length; i++) {
      final String query=multiQuery[i];
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(running '{}',query);
      }
      final PreparedStatement statement=createPreparedStatement(query);
      preparedStatements[i]=statement;
      preparers[i].accept(statement);
      resultSets[i]=statement.executeQuery();
    }
    if (resultConsumer != null) {
      resultConsumer.accept(resultSets);
    }
  }
  finally {
    for (    ResultSet rs : resultSets) {
      if (rs != null) {
        try {
          rs.close();
        }
 catch (        Exception ei) {
        }
      }
    }
  }
  return this;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",581
1526,"'-tryline","/** 
 * Execute a SQL query and map the result set into an expected type.
 * @param < T > type returned by the mapper
 * @param query the SQL query
 * @param statementFactory the function that should be used to create the statement from the connection; may not be null
 * @param mapper the function processing the query results
 * @return the result of the mapper calculation
 * @throws SQLException if there is an error connecting to the database or executing the statements
 * @see #execute(Operations)
 */
public <T>T queryAndMap(String query,StatementFactory statementFactory,ResultSetMapper<T> mapper) throws SQLException {
  Objects.requireNonNull(mapper,Mapper must be provided);
  Connection conn=connection();
  try (Statement statement=statementFactory.createStatement(conn)){
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace(running '{}',query);
    }
    try (ResultSet resultSet=statement.executeQuery(query)){
      return mapper.apply(resultSet);
    }
   }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",625
1527,"'-tryline","public JdbcConnection queryWithBlockingConsumer(String query,StatementFactory statementFactory,BlockingResultSetConsumer resultConsumer) throws SQLException, InterruptedException {
  Connection conn=connection();
  try (Statement statement=statementFactory.createStatement(conn)){
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace(running '{}',query);
    }
    try (ResultSet resultSet=statement.executeQuery(query)){
      if (resultConsumer != null) {
        resultConsumer.accept(resultSet);
      }
    }
   }
   return this;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",649
1528,"'-tryline","/** 
 * Use the given connection to create a statement.
 * @param connection the JDBC connection; never null
 * @return the statement
 * @throws SQLException if there are problems creating a statement
 */
Statement createStatement(Connection connection) throws SQLException ;
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",671
1529,"'-tryline","/** 
 * Execute a SQL prepared query.
 * @param preparedQueryString the prepared query string
 * @param preparer the function that supplied arguments to the prepared statement; may not be null
 * @param resultConsumer the consumer of the query results
 * @return this object for chaining methods together
 * @throws SQLException if there is an error connecting to the database or executing the statements
 * @see #execute(Operations)
 */
public JdbcConnection prepareQueryWithBlockingConsumer(String preparedQueryString,StatementPreparer preparer,BlockingResultSetConsumer resultConsumer) throws SQLException, InterruptedException {
  final PreparedStatement statement=createPreparedStatement(preparedQueryString);
  preparer.accept(statement);
  try (ResultSet resultSet=statement.executeQuery()){
    if (resultConsumer != null) {
      resultConsumer.accept(resultSet);
    }
  }
   return this;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",680
1530,"'-tryline","/** 
 * Execute a SQL prepared query.
 * @param preparedQueryString the prepared query string
 * @param preparer the function that supplied arguments to the prepared statement; may not be null
 * @param resultConsumer the consumer of the query results
 * @return this object for chaining methods together
 * @throws SQLException if there is an error connecting to the database or executing the statements
 * @see #execute(Operations)
 */
public JdbcConnection prepareQuery(String preparedQueryString,StatementPreparer preparer,ResultSetConsumer resultConsumer) throws SQLException {
  final PreparedStatement statement=createPreparedStatement(preparedQueryString);
  preparer.accept(statement);
  try (ResultSet resultSet=statement.executeQuery()){
    if (resultConsumer != null) {
      resultConsumer.accept(resultSet);
    }
  }
   return this;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",702
1531,"'-tryline","/** 
 * Execute a SQL prepared query and map the result set into an expected type..
 * @param < T > type returned by the mapper
 * @param preparedQueryString the prepared query string
 * @param preparer the function that supplied arguments to the prepared statement; may not be null
 * @param mapper the function processing the query results
 * @return the result of the mapper calculation
 * @throws SQLException if there is an error connecting to the database or executing the statements
 * @see #execute(Operations)
 */
public <T>T prepareQueryAndMap(String preparedQueryString,StatementPreparer preparer,ResultSetMapper<T> mapper) throws SQLException {
  Objects.requireNonNull(mapper,Mapper must be provided);
  final PreparedStatement statement=createPreparedStatement(preparedQueryString);
  preparer.accept(statement);
  try (ResultSet resultSet=statement.executeQuery()){
    return mapper.apply(resultSet);
  }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",724
1532,"'-tryline","/** 
 * Execute a SQL update via a prepared statement.
 * @param stmt the statement string
 * @param preparer the function that supplied arguments to the prepared stmt; may be null
 * @return this object for chaining methods together
 * @throws SQLException if there is an error connecting to the database or executing the statements
 * @see #execute(Operations)
 */
public JdbcConnection prepareUpdate(String stmt,StatementPreparer preparer) throws SQLException {
  final PreparedStatement statement=createPreparedStatement(stmt);
  if (preparer != null) {
    preparer.accept(statement);
  }
  statement.execute();
  return this;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",745
1533,"'-tryline","/** 
 * Execute a SQL prepared query.
 * @param preparedQueryString the prepared query string
 * @param parameters the list of values for parameters in the query; may not be null
 * @param resultConsumer the consumer of the query results
 * @return this object for chaining methods together
 * @throws SQLException if there is an error connecting to the database or executing the statements
 * @see #execute(Operations)
 */
public JdbcConnection prepareQuery(String preparedQueryString,List<?> parameters,ParameterResultSetConsumer resultConsumer) throws SQLException {
  final PreparedStatement statement=createPreparedStatement(preparedQueryString);
  int index=1;
  for (  final Object parameter : parameters) {
    statement.setObject(index++,parameter);
  }
  try (ResultSet resultSet=statement.executeQuery()){
    if (resultConsumer != null) {
      resultConsumer.accept(parameters,resultSet);
    }
  }
   return this;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",763
1534,"'-tryline","private int[] findMaxLength(ResultSet resultSet) throws SQLException {
  ResultSetMetaData rsmd=resultSet.getMetaData();
  int columnCount=rsmd.getColumnCount();
  int[] columnSizes=new int[columnCount + 1];
  for (int i=1; i <= columnCount; i++) {
    columnSizes[i]=Math.max(columnSizes[i],rsmd.getColumnLabel(i).length());
  }
  while (resultSet.next()) {
    for (int i=1; i <= columnCount; i++) {
      String value=resultSet.getString(i);
      if (value != null) {
        columnSizes[i]=Math.max(columnSizes[i],value.length());
      }
    }
  }
  resultSet.beforeFirst();
  return columnSizes;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",840
1535,"'-tryline","public synchronized boolean isConnected() throws SQLException {
  if (conn == null) {
    return false;
  }
  return !conn.isClosed();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",859
1536,"'-tryline","public synchronized Connection connection() throws SQLException {
  return connection(true);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",866
1537,"'-tryline","public synchronized Connection connection(boolean executeOnConnect) throws SQLException {
  if (!isConnected()) {
    conn=factory.connect(JdbcConfiguration.adapt(config));
    if (!isConnected()) {
      throw new SQLException(Unable to obtain a JDBC connection);
    }
    if (initialOps != null) {
      execute(initialOps);
    }
    final String statements=config.getString(JdbcConfiguration.ON_CONNECT_STATEMENTS);
    if (statements != null && executeOnConnect) {
      final List<String> splitStatements=parseSqlStatementString(statements);
      execute(splitStatements.toArray(new String[splitStatements.size()]));
    }
  }
  return conn;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",870
1538,"'-tryline","/** 
 * Close the connection and release any resources.
 */
@Override public synchronized void close() throws SQLException {
  if (conn != null) {
    try {
      statementCache.values().forEach(this::cleanupPreparedStatement);
      statementCache.clear();
      LOGGER.trace(Closing database connection);
      doClose();
    }
  finally {
      conn=null;
    }
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",923
1539,"'-tryline","private void doClose() throws SQLException {
  ExecutorService executor=Executors.newSingleThreadExecutor();
  Future<Object> futureClose=executor.submit(() -> {
    conn.close();
    LOGGER.info(Connection gracefully closed);
    return null;
  }
);
  try {
    futureClose.get(WAIT_FOR_CLOSE_SECONDS,TimeUnit.SECONDS);
  }
 catch (  ExecutionException e) {
    if (e.getCause() instanceof SQLException) {
      throw (SQLException)e.getCause();
    }
 else     if (e.getCause() instanceof RuntimeException) {
      throw (RuntimeException)e.getCause();
    }
    throw new DebeziumException(e.getCause());
  }
catch (  TimeoutException|InterruptedException e) {
    LOGGER.warn(Failed to close database connection by calling close(), attempting abort());
    conn.abort(Runnable::run);
  }
 finally {
    executor.shutdownNow();
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",941
1540,"'-tryline","/** 
 * Get the names of all of the catalogs.
 * @return the set of catalog names; never null but possibly empty
 * @throws SQLException if an error occurs while accessing the database metadata
 */
public Set<String> readAllCatalogNames() throws SQLException {
  Set<String> catalogs=new HashSet<>();
  DatabaseMetaData metadata=connection().getMetaData();
  try (ResultSet rs=metadata.getCatalogs()){
    while (rs.next()) {
      String catalogName=rs.getString(1);
      catalogs.add(catalogName);
    }
  }
   return catalogs;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",970
1541,"'-tryline","/** 
 * Get the names of all of the schemas, optionally applying a filter.
 * @param filter a {@link Predicate} to test each schema name; may be null in which case all schema names are returned
 * @return the set of catalog names; never null but possibly empty
 * @throws SQLException if an error occurs while accessing the database metadata
 */
public Set<String> readAllSchemaNames(Predicate<String> filter) throws SQLException {
  Set<String> schemas=new HashSet<>();
  DatabaseMetaData metadata=connection().getMetaData();
  try (ResultSet rs=metadata.getSchemas()){
    while (rs.next()) {
      String schema=rs.getString(1);
      if (filter != null && filter.test(schema)) {
        schemas.add(schema);
      }
    }
  }
   return schemas;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",988
1542,"'-tryline","public String[] tableTypes() throws SQLException {
  List<String> types=new ArrayList<>();
  DatabaseMetaData metadata=connection().getMetaData();
  try (ResultSet rs=metadata.getTableTypes()){
    while (rs.next()) {
      String tableType=rs.getString(1);
      if (tableType != null) {
        types.add(tableType);
      }
    }
  }
   return types.toArray(new String[types.size()]);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",1010
1543,"'-tryline","/** 
 * Get the identifiers of all available tables.
 * @param tableTypes the set of table types to include in the results, which may be null for all table types
 * @return the set of {@link TableId}s; never null but possibly empty
 * @throws SQLException if an error occurs while accessing the database metadata
 */
public Set<TableId> readAllTableNames(String[] tableTypes) throws SQLException {
  return readTableNames(null,null,null,tableTypes);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",1024
1544,"'-tryline","/** 
 * Get the identifiers of the tables.
 * @param databaseCatalog the name of the catalog, which is typically the database name; may be an empty string for tablesthat have no catalog, or  {@code null} if the catalog name should not be used to narrow the list of tableidentifiers
 * @param schemaNamePattern the pattern used to match database schema names, which may be  to match only those tables withno schema or  {@code null} if the schema name should not be used to narrow the list of tableidentifiers
 * @param tableNamePattern the pattern used to match database table names, which may be null to match all table names
 * @param tableTypes the set of table types to include in the results, which may be null for all table types
 * @return the set of {@link TableId}s; never null but possibly empty
 * @throws SQLException if an error occurs while accessing the database metadata
 */
public Set<TableId> readTableNames(String databaseCatalog,String schemaNamePattern,String tableNamePattern,String[] tableTypes) throws SQLException {
  if (tableNamePattern == null) {
    tableNamePattern=%;
  }
  Set<TableId> tableIds=new HashSet<>();
  DatabaseMetaData metadata=connection().getMetaData();
  try (ResultSet rs=metadata.getTables(databaseCatalog,schemaNamePattern,tableNamePattern,tableTypes)){
    while (rs.next()) {
      String catalogName=rs.getString(1);
      String schemaName=rs.getString(2);
      String tableName=rs.getString(3);
      TableId tableId=new TableId(catalogName,schemaName,tableName);
      tableIds.add(tableId);
    }
  }
   return tableIds;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",1035
1545,"'-tryline","/** 
 * Create definitions for each tables in the database, given the catalog name, schema pattern, table filter, and column filter.
 * @param tables the set of table definitions to be modified; may not be null
 * @param databaseCatalog the name of the catalog, which is typically the database name; may be null if all accessibledatabases are to be processed
 * @param schemaNamePattern the pattern used to match database schema names, which may be  to match only those tables withno schema or null to process all accessible tables regardless of database schema name
 * @param tableFilter used to determine for which tables are to be processed; may be null if all accessible tables are to beprocessed
 * @param columnFilter used to determine which columns should be included as fields in its table's definition; maybe null if all columns for all tables are to be included
 * @param removeTablesNotFoundInJdbc {@code true} if this method should remove from {@code tables} any definitions for tablesthat are not found in the database metadata, or  {@code false} if such tables should be left untouched
 * @throws SQLException if an error occurs while accessing the database metadata
 */
public void readSchema(Tables tables,String databaseCatalog,String schemaNamePattern,TableFilter tableFilter,ColumnNameFilter columnFilter,boolean removeTablesNotFoundInJdbc) throws SQLException {
  Set<TableId> tableIdsBefore=new HashSet<>(tables.tableIds());
  DatabaseMetaData metadata=connection().getMetaData();
  final Set<TableId> viewIds=new HashSet<>();
  final Set<TableId> tableIds=new HashSet<>();
  int totalTables=0;
  try (final ResultSet rs=metadata.getTables(databaseCatalog,schemaNamePattern,null,new String[]{VIEW,MATERIALIZED VIEW,TABLE})){
    while (rs.next()) {
      final String catalogName=rs.getString(1);
      final String schemaName=rs.getString(2);
      final String tableName=rs.getString(3);
      final String tableType=rs.getString(4);
      if (TABLE.equals(tableType)) {
        totalTables++;
        TableId tableId=new TableId(catalogName,schemaName,tableName);
        if (tableFilter == null || tableFilter.isIncluded(tableId)) {
          tableIds.add(tableId);
        }
      }
 else {
        TableId tableId=new TableId(catalogName,schemaName,tableName);
        viewIds.add(tableId);
      }
    }
  }
   Map<TableId,List<Column>> columnsByTable=new HashMap<>();
  if (totalTables == tableIds.size() || config.getBoolean(RelationalDatabaseConnectorConfig.SNAPSHOT_FULL_COLUMN_SCAN_FORCE)) {
    columnsByTable=getColumnsDetails(databaseCatalog,schemaNamePattern,null,tableFilter,columnFilter,metadata,viewIds);
  }
 else {
    for (    TableId includeTable : tableIds) {
      Map<TableId,List<Column>> cols=getColumnsDetails(databaseCatalog,schemaNamePattern,includeTable.table(),tableFilter,columnFilter,metadata,viewIds);
      columnsByTable.putAll(cols);
    }
  }
  for (  Entry<TableId,List<Column>> tableEntry : columnsByTable.entrySet()) {
    List<String> pkColumnNames=readPrimaryKeyOrUniqueIndexNames(metadata,tableEntry.getKey());
    List<Column> columns=tableEntry.getValue();
    Collections.sort(columns);
    String defaultCharsetName=null;
    tables.overwriteTable(tableEntry.getKey(),columns,pkColumnNames,defaultCharsetName);
  }
  if (removeTablesNotFoundInJdbc) {
    tableIdsBefore.removeAll(columnsByTable.keySet());
    tableIdsBefore.forEach(tables::removeTable);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",1123
1546,"'-tryline","private Map<TableId,List<Column>> getColumnsDetails(String databaseCatalog,String schemaNamePattern,String tableName,TableFilter tableFilter,ColumnNameFilter columnFilter,DatabaseMetaData metadata,final Set<TableId> viewIds) throws SQLException {
  Map<TableId,List<Column>> columnsByTable=new HashMap<>();
  try (ResultSet columnMetadata=metadata.getColumns(databaseCatalog,schemaNamePattern,tableName,null)){
    while (columnMetadata.next()) {
      String catalogName=columnMetadata.getString(1);
      String schemaName=columnMetadata.getString(2);
      String metaTableName=columnMetadata.getString(3);
      TableId tableId=new TableId(catalogName,schemaName,metaTableName);
      if (viewIds.contains(tableId) || (tableFilter != null && !tableFilter.isIncluded(tableId))) {
        continue;
      }
      readTableColumn(columnMetadata,tableId,columnFilter).ifPresent(column -> {
        columnsByTable.computeIfAbsent(tableId,t -> new ArrayList<>()).add(column.create());
      }
);
    }
  }
   return columnsByTable;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",1207
1547,"'-tryline","/** 
 * Returns a  {@link ColumnEditor} representing the current record of the given result set of column metadata, ifincluded in column.include.list.
 */
protected Optional<ColumnEditor> readTableColumn(ResultSet columnMetadata,TableId tableId,ColumnNameFilter columnFilter) throws SQLException {
  final String defaultValue=columnMetadata.getString(13);
  final String columnName=columnMetadata.getString(4);
  if (columnFilter == null || columnFilter.matches(tableId.catalog(),tableId.schema(),tableId.table(),columnName)) {
    final ColumnEditor column=Column.editor().name(columnName);
    column.type(columnMetadata.getString(6));
    column.length(columnMetadata.getInt(7));
    if (columnMetadata.getObject(9) != null) {
      column.scale(columnMetadata.getInt(9));
    }
    column.optional(isNullable(columnMetadata.getInt(11)));
    column.position(columnMetadata.getInt(17));
    column.autoIncremented(YES.equalsIgnoreCase(columnMetadata.getString(23)));
    String autogenerated=null;
    try {
      autogenerated=columnMetadata.getString(24);
    }
 catch (    SQLException e) {
    }
    column.generated(YES.equalsIgnoreCase(autogenerated));
    column.nativeType(resolveNativeType(column.typeName()));
    column.jdbcType(resolveJdbcType(columnMetadata.getInt(5),column.nativeType()));
    if (defaultValue != null) {
      getDefaultValue(column.create(),defaultValue).ifPresent(column::defaultValue);
    }
    return Optional.of(column);
  }
  return Optional.empty();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",1235
1548,"'-tryline","public List<String> readPrimaryKeyNames(DatabaseMetaData metadata,TableId id) throws SQLException {
  final List<String> pkColumnNames=new ArrayList<>();
  try (ResultSet rs=metadata.getPrimaryKeys(id.catalog(),id.schema(),id.table())){
    while (rs.next()) {
      String columnName=rs.getString(4);
      int columnIndex=rs.getInt(5);
      Collect.set(pkColumnNames,columnIndex - 1,columnName,null);
    }
  }
   return pkColumnNames;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",1279
1549,"'-tryline","public List<String> readTableUniqueIndices(DatabaseMetaData metadata,TableId id) throws SQLException {
  final List<String> uniqueIndexColumnNames=new ArrayList<>();
  try (ResultSet rs=metadata.getIndexInfo(id.catalog(),id.schema(),id.table(),true,true)){
    String firstIndexName=null;
    while (rs.next()) {
      final String indexName=rs.getString(6);
      final String columnName=rs.getString(9);
      final int columnIndex=rs.getInt(8);
      if (firstIndexName == null) {
        firstIndexName=indexName;
      }
      if (!isTableUniqueIndexIncluded(indexName,columnName)) {
        continue;
      }
      if (indexName != null && !indexName.equals(firstIndexName)) {
        return uniqueIndexColumnNames;
      }
      if (columnName != null) {
        Collect.set(uniqueIndexColumnNames,columnIndex - 1,columnName,null);
      }
    }
  }
   return uniqueIndexColumnNames;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",1291
1550,"'-tryline","protected List<String> readPrimaryKeyOrUniqueIndexNames(DatabaseMetaData metadata,TableId id) throws SQLException {
  final List<String> pkColumnNames=readPrimaryKeyNames(metadata,id);
  return pkColumnNames.isEmpty() ? readTableUniqueIndices(metadata,id) : pkColumnNames;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",1320
1551,"'-tryline","/** 
 * Executes a series of statements without explicitly committing the connection.
 * @param statements a series of statements to execute
 * @return this object so methods can be chained together; never null
 * @throws SQLException if anything fails
 */
public JdbcConnection executeWithoutCommitting(String... statements) throws SQLException {
  Connection conn=connection();
  try (Statement statement=conn.createStatement()){
    for (    String stmt : statements) {
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(Executing statement {},stmt);
      }
      statement.execute(stmt);
    }
  }
   return this;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",1359
1552,"'-tryline","public <T>ResultSetMapper<T> singleResultMapper(ResultSetExtractor<T> extractor,String error) throws SQLException {
  return (rs) -> {
    if (rs.next()) {
      final T ret=extractor.apply(rs);
      if (!rs.next()) {
        return ret;
      }
    }
    throw new IllegalStateException(error);
  }
;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",1383
1553,"'-tryline","public static <T>T querySingleValue(Connection connection,String queryString,StatementPreparer preparer,ResultSetExtractor<T> extractor) throws SQLException {
  final PreparedStatement preparedStatement=connection.prepareStatement(queryString);
  preparer.accept(preparedStatement);
  try (ResultSet resultSet=preparedStatement.executeQuery()){
    if (resultSet.next()) {
      final T result=extractor.apply(resultSet);
      if (!resultSet.next()) {
        return result;
      }
    }
    throw new IllegalStateException(Exactly one result expected.);
  }
 }
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",1395
1554,"'-tryline","public T getChangePosition() throws SQLException {
  return currentChangePosition;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\source\spi\ChangeTableResultSet.java",46
1555,"'-tryline","public int getOperation() throws SQLException {
  return getOperation(resultSet);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\source\spi\ChangeTableResultSet.java",54
1556,"'-tryline","public boolean next() throws SQLException {
  completed=!resultSet.next();
  previousChangePosition=currentChangePosition;
  currentChangePosition=getNextChangePosition(resultSet);
  if (completed) {
    LOGGER.trace(Closing result set of change tables for table {},changeTable);
    resultSet.close();
  }
  return !completed;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\source\spi\ChangeTableResultSet.java",62
1557,"'-tryline","/** 
 * Get the column data from the source change table's result-set
 */
public Object[] getData() throws SQLException {
  final int dataColumnCount=resultSet.getMetaData().getColumnCount() - (columnDataOffset - 1);
  final Object[] data=new Object[dataColumnCount];
  for (int i=0; i < dataColumnCount; ++i) {
    data[i]=getColumnData(resultSet,columnDataOffset + i);
  }
  return data;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\source\spi\ChangeTableResultSet.java",73
1558,"'-tryline","/** 
 * Get the value of a specific column in the result-set.
 */
protected Object getColumnData(ResultSet resultSet,int columnIndex) throws SQLException {
  return resultSet.getObject(columnIndex);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\source\spi\ChangeTableResultSet.java",85
1559,"'-tryline","public int compareTo(ChangeTableResultSet<C,T> other) throws SQLException {
  return getChangePosition().compareTo(other.getChangePosition());
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\source\spi\ChangeTableResultSet.java",96
1560,"'-tryline","protected abstract int getOperation(ResultSet resultSet) throws SQLException ;
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\source\spi\ChangeTableResultSet.java",110
1561,"'-tryline","protected abstract T getNextChangePosition(ResultSet resultSet) throws SQLException ;
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\source\spi\ChangeTableResultSet.java",112
1562,"'-tryline","public Connection createSnapshotConnection() throws SQLException {
  Connection connection=jdbcConnection.connection();
  connection.setAutoCommit(false);
  return connection;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\RelationalSnapshotChangeEventSource.java",156
1563,"'-tryline","protected Object getColumnValue(ResultSet rs,int columnIndex,Column column,Table table) throws SQLException {
  return getColumnValue(rs,columnIndex,column);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\RelationalSnapshotChangeEventSource.java",453
1564,"'-tryline","@Deprecated protected Object getColumnValue(ResultSet rs,int columnIndex,Column column) throws SQLException {
  return rs.getObject(columnIndex);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\RelationalSnapshotChangeEventSource.java",457
1565,"'-tryline","/** 
 * Allow per-connector query creation to override for best database performance depending on the table size.
 */
protected Statement readTableStatement(OptionalLong tableSize) throws SQLException {
  int fetchSize=connectorConfig.getSnapshotFetchSize();
  Statement statement=jdbcConnection.connection().createStatement();
  statement.setFetchSize(fetchSize);
  return statement;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\RelationalSnapshotChangeEventSource.java",462
1566,"'-tryline","public RelationalSnapshotContext(String catalogName) throws SQLException {
  this.catalogName=catalogName;
  this.tables=new Tables();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\RelationalSnapshotChangeEventSource.java",495
1567,"'-tryline","public static ColumnArray toArray(ResultSet resultSet,Table table) throws SQLException {
  ResultSetMetaData metaData=resultSet.getMetaData();
  Column[] columns=new Column[metaData.getColumnCount()];
  int greatestColumnPosition=0;
  for (int i=0; i < columns.length; i++) {
    columns[i]=table.columnWithName(metaData.getColumnName(i + 1));
    greatestColumnPosition=greatestColumnPosition < columns[i].position() ? columns[i].position() : greatestColumnPosition;
  }
  return new ColumnArray(columns,greatestColumnPosition);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\ColumnUtils.java",34
1568,"'-tryline","@Test public void testNormalClose() throws SQLException {
  ConnectionFactory connFactory=(config) -> new NormalConnection();
  JdbcConnection conn=new JdbcConnection(Configuration.empty(),connFactory);
  conn.connect();
  conn.close();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",35
1569,"'-tryline","@Test public void testForceClose() throws SQLException {
  ConnectionFactory connFactory=(config) -> new TimingOutConnection();
  JdbcConnection conn=new JdbcConnection(Configuration.empty(),connFactory);
  conn.connect();
  conn.close();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",43
1570,"'-tryline","@Test(expected=SQLException.class) public void testRogueConnection() throws SQLException {
  ConnectionFactory connFactory=(config) -> new RogueConnection();
  JdbcConnection conn=new JdbcConnection(Configuration.empty(),connFactory);
  conn.connect();
  conn.close();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",51
1571,"'-tryline","@Override public void close() throws SQLException {
  throw new SQLException(something bad happened);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",60
1572,"'-tryline","@Override public void close() throws SQLException {
  try {
    TimeUnit.SECONDS.sleep(20);
    throw new SQLException(failed to close connection properly);
  }
 catch (  InterruptedException e) {
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",67
1573,"'-tryline","@Override public <T>T unwrap(Class<T> iface) throws SQLException {
  return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",80
1574,"'-tryline","@Override public boolean isWrapperFor(Class<?> iface) throws SQLException {
  return false;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",85
1575,"'-tryline","@Override public Statement createStatement() throws SQLException {
  return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",90
1576,"'-tryline","@Override public PreparedStatement prepareStatement(String sql) throws SQLException {
  return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",95
1577,"'-tryline","@Override public CallableStatement prepareCall(String sql) throws SQLException {
  return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",100
1578,"'-tryline","@Override public String nativeSQL(String sql) throws SQLException {
  return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",105
1579,"'-tryline","@Override public void setAutoCommit(boolean autoCommit) throws SQLException {
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",110
1580,"'-tryline","@Override public boolean getAutoCommit() throws SQLException {
  return false;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",115
1581,"'-tryline","@Override public void commit() throws SQLException {
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",120
1582,"'-tryline","@Override public void rollback() throws SQLException {
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",125
1583,"'-tryline","@Override public void close() throws SQLException {
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",130
1584,"'-tryline","@Override public boolean isClosed() throws SQLException {
  return false;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",135
1585,"'-tryline","@Override public DatabaseMetaData getMetaData() throws SQLException {
  return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",140
1586,"'-tryline","@Override public void setReadOnly(boolean readOnly) throws SQLException {
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",145
1587,"'-tryline","@Override public boolean isReadOnly() throws SQLException {
  return false;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",150
1588,"'-tryline","@Override public void setCatalog(String catalog) throws SQLException {
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",155
1589,"'-tryline","@Override public String getCatalog() throws SQLException {
  return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",160
1590,"'-tryline","@Override public void setTransactionIsolation(int level) throws SQLException {
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",165
1591,"'-tryline","@Override public int getTransactionIsolation() throws SQLException {
  return 0;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",170
1592,"'-tryline","@Override public SQLWarning getWarnings() throws SQLException {
  return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",175
1593,"'-tryline","@Override public void clearWarnings() throws SQLException {
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",180
1594,"'-tryline","@Override public Statement createStatement(int resultSetType,int resultSetConcurrency) throws SQLException {
  return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",185
1595,"'-tryline","@Override public PreparedStatement prepareStatement(String sql,int resultSetType,int resultSetConcurrency) throws SQLException {
  return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",190
1596,"'-tryline","@Override public CallableStatement prepareCall(String sql,int resultSetType,int resultSetConcurrency) throws SQLException {
  return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",196
1597,"'-tryline","@Override public Map<String,Class<?>> getTypeMap() throws SQLException {
  return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",201
1598,"'-tryline","@Override public void setTypeMap(Map<String,Class<?>> map) throws SQLException {
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",206
1599,"'-tryline","@Override public void setHoldability(int holdability) throws SQLException {
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",211
1600,"'-tryline","@Override public int getHoldability() throws SQLException {
  return 0;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",216
1601,"'-tryline","@Override public Savepoint setSavepoint() throws SQLException {
  return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",221
1602,"'-tryline","@Override public Savepoint setSavepoint(String name) throws SQLException {
  return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",226
1603,"'-tryline","@Override public void rollback(Savepoint savepoint) throws SQLException {
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",231
1604,"'-tryline","@Override public void releaseSavepoint(Savepoint savepoint) throws SQLException {
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",236
1605,"'-tryline","@Override public Statement createStatement(int resultSetType,int resultSetConcurrency,int resultSetHoldability) throws SQLException {
  return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",241
1606,"'-tryline","@Override public PreparedStatement prepareStatement(String sql,int resultSetType,int resultSetConcurrency,int resultSetHoldability) throws SQLException {
  return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",247
1607,"'-tryline","@Override public CallableStatement prepareCall(String sql,int resultSetType,int resultSetConcurrency,int resultSetHoldability) throws SQLException {
  return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",254
1608,"'-tryline","@Override public PreparedStatement prepareStatement(String sql,int autoGeneratedKeys) throws SQLException {
  return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",261
1609,"'-tryline","@Override public PreparedStatement prepareStatement(String sql,int[] columnIndexes) throws SQLException {
  return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",266
1610,"'-tryline","@Override public PreparedStatement prepareStatement(String sql,String[] columnNames) throws SQLException {
  return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",271
1611,"'-tryline","@Override public Clob createClob() throws SQLException {
  return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",276
1612,"'-tryline","@Override public Blob createBlob() throws SQLException {
  return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",281
1613,"'-tryline","@Override public NClob createNClob() throws SQLException {
  return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",286
1614,"'-tryline","@Override public SQLXML createSQLXML() throws SQLException {
  return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",291
1615,"'-tryline","@Override public boolean isValid(int timeout) throws SQLException {
  return false;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",296
1616,"'-tryline","@Override public String getClientInfo(String name) throws SQLException {
  return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",311
1617,"'-tryline","@Override public Properties getClientInfo() throws SQLException {
  return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",316
1618,"'-tryline","@Override public Array createArrayOf(String typeName,Object[] elements) throws SQLException {
  return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",321
1619,"'-tryline","@Override public Struct createStruct(String typeName,Object[] attributes) throws SQLException {
  return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",326
1620,"'-tryline","@Override public void setSchema(String schema) throws SQLException {
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",331
1621,"'-tryline","@Override public String getSchema() throws SQLException {
  return null;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",336
1622,"'-tryline","@Override public void abort(Executor executor) throws SQLException {
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",341
1623,"'-tryline","@Override public void setNetworkTimeout(Executor executor,int milliseconds) throws SQLException {
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",346
1624,"'-tryline","@Override public int getNetworkTimeout() throws SQLException {
  return 0;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",351
1625,"'-tryline","private boolean doExecute(Commands<Connection,SQLException> commands) throws SQLException {
  try (Connection con=DriverManager.getConnection(url,username,password)){
    commands.execute(con);
  }
   return true;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\databases\SqlDatabaseClient.java",38
1626,"'-tryline","public void execute(Commands<Connection,SQLException> commands) throws SQLException {
  await().atMost(scaled(2),TimeUnit.MINUTES).pollInterval(5,TimeUnit.SECONDS).ignoreExceptions().until(() -> doExecute(commands));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\databases\SqlDatabaseClient.java",45
1627,"'-tryline","public void execute(String database,Commands<Connection,SQLException> commands) throws SQLException {
  Commands<Connection,SQLException> withDatabase=con -> con.setCatalog(database);
  execute(con -> withDatabase.andThen(commands).execute(con));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\databases\SqlDatabaseClient.java",53
1628,"'-tryline","public void execute(String database,String command) throws SQLException {
  LOGGER.info(Running SQL Command [ + database + ]: + command);
  execute(database,con -> {
    try (Statement stmt=con.createStatement()){
      stmt.execute(command);
    }
   }
);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\databases\SqlDatabaseClient.java",58
1629,"'-tryline","public void execute(String command) throws SQLException {
  LOGGER.info(Running SQL Command:  + command);
  execute(con -> {
    try (Statement stmt=con.createStatement()){
      stmt.execute(command);
    }
   }
);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\databases\SqlDatabaseClient.java",67
1630,"'-tryline","private void insertCustomer(String firstName,String lastName,String email) throws SQLException {
  SqlDatabaseClient client=dbController.getDatabaseClient(DATABASE_DB2_DBZ_USERNAME,DATABASE_DB2_DBZ_PASSWORD);
  String sql=INSERT INTO DB2INST1.CUSTOMERS(first_name,last_name,email) VALUES  (' + firstName + ', '+ lastName+ ', '+ email+ ');
  client.execute(DATABASE_DB2_DBZ_DBNAME,sql);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\db2\DB2ConnectorIT.java",86
1631,"'-tryline","@Test @Order(4) public void shouldStreamChanges() throws SQLException {
  insertCustomer(Tom,Tester,tom@test.com);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .DB2INST1.CUSTOMERS,5));
  awaitAssert(() -> assertions.assertRecordsContain(connectorName + .DB2INST1.CUSTOMERS,tom@test.com));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\db2\DB2ConnectorIT.java",123
1632,"'-tryline","@Test @Order(5) public void shouldBeDown() throws SQLException, IOException {
  kafkaConnectController.undeployConnector(connectorName);
  insertCustomer(Jerry,Tester,jerry@test.com);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .DB2INST1.CUSTOMERS,5));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\db2\DB2ConnectorIT.java",131
1633,"'-tryline","@Test @Order(7) public void shouldBeDownAfterCrash() throws SQLException {
  operatorController.disable();
  kafkaConnectController.destroy();
  insertCustomer(Nibbles,Tester,nibbles@test.com);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .DB2INST1.CUSTOMERS,6));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\db2\DB2ConnectorIT.java",147
1634,"'-tryline","private void insertCustomer(String firstName,String lastName,String email) throws SQLException {
  SqlDatabaseClient client=dbController.getDatabaseClient(DATABASE_MYSQL_USERNAME,DATABASE_MYSQL_PASSWORD);
  String sql=INSERT INTO customers VALUES  (default, ' + firstName + ', '+ lastName+ ', '+ email+ ');
  client.execute(inventory,sql);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\mysql\MySqlConnectorIT.java",81
1635,"'-tryline","@Test @Order(4) public void shouldStreamChanges() throws SQLException {
  insertCustomer(Tom,Tester,tom@test.com);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .inventory.customers,5));
  awaitAssert(() -> assertions.assertRecordsContain(connectorName + .inventory.customers,tom@test.com));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\mysql\MySqlConnectorIT.java",120
1636,"'-tryline","@Test @Order(5) public void shouldBeDown() throws SQLException, IOException {
  kafkaConnectController.undeployConnector(connectorName);
  insertCustomer(Jerry,Tester,jerry@test.com);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .inventory.customers,5));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\mysql\MySqlConnectorIT.java",128
1637,"'-tryline","@Test @Order(7) public void shouldBeDownAfterCrash() throws SQLException {
  operatorController.disable();
  kafkaConnectController.destroy();
  insertCustomer(Nibbles,Tester,nibbles@test.com);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .inventory.customers,6));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\mysql\MySqlConnectorIT.java",144
1638,"'-tryline","private void insertCustomer(String firstName,String lastName,String email) throws SQLException {
  SqlDatabaseClient client=dbController.getDatabaseClient(DATABASE_POSTGRESQL_USERNAME,DATABASE_POSTGRESQL_PASSWORD);
  String sql=INSERT INTO inventory.customers VALUES  (default, ' + firstName + ', '+ lastName+ ', '+ email+ ');
  client.execute(DATABASE_POSTGRESQL_DBZ_DBNAME,sql);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\postgresql\PostgreSqlConnectorIT.java",83
1639,"'-tryline","@Test @Order(4) public void shouldStreamChanges() throws SQLException {
  insertCustomer(Tom,Tester,tom@test.com);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .inventory.customers,5));
  awaitAssert(() -> assertions.assertRecordsContain(connectorName + .inventory.customers,tom@test.com));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\postgresql\PostgreSqlConnectorIT.java",120
1640,"'-tryline","@Test @Order(5) public void shouldBeDown() throws SQLException, IOException {
  kafkaConnectController.undeployConnector(connectorName);
  insertCustomer(Jerry,Tester,jerry@test.com);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .inventory.customers,5));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\postgresql\PostgreSqlConnectorIT.java",128
1641,"'-tryline","@Test @Order(7) public void shouldBeDownAfterCrash() throws SQLException {
  operatorController.disable();
  kafkaConnectController.destroy();
  insertCustomer(Nibbles,Tester,nibbles@test.com);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .inventory.customers,6));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\postgresql\PostgreSqlConnectorIT.java",144
1642,"'-tryline","private void insertCustomer(String firstName,String lastName,String email) throws SQLException {
  SqlDatabaseClient client=dbController.getDatabaseClient(DATABASE_SQLSERVER_DBZ_USERNAME,DATABASE_SQLSERVER_DBZ_PASSWORD);
  String sql=INSERT INTO customers (first_name, last_name, email) VALUES (' + firstName + ', '+ lastName+ ', '+ email+ ');
  client.execute(DATABASE_SQLSERVER_DBZ_DBNAME,sql);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\sqlserver\SqlServerConnectorIT.java",81
1643,"'-tryline","@Test @Order(4) public void shouldStreamChanges() throws SQLException {
  insertCustomer(Tom,Tester,tom@test.com);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .dbo.customers,5));
  awaitAssert(() -> assertions.assertRecordsContain(connectorName + .dbo.customers,tom@test.com));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\sqlserver\SqlServerConnectorIT.java",118
1644,"'-tryline","@Test @Order(5) public void shouldBeDown() throws SQLException, IOException {
  kafkaConnectController.undeployConnector(connectorName);
  insertCustomer(Jerry,Tester,jerry@test.com);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .dbo.customers,5));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\sqlserver\SqlServerConnectorIT.java",126
1645,"'-tryline","@Test @Order(7) public void shouldBeDownAfterCrash() throws SQLException {
  operatorController.disable();
  kafkaConnectController.destroy();
  insertCustomer(Nibbles,Tester,nibbles@test.com);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .dbo.customers,6));
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\sqlserver\SqlServerConnectorIT.java",142
1646,"'-tryline","private Connection getConnection(PostgreSQLContainer<?> postgresContainer) throws SQLException {
  return DriverManager.getConnection(postgresContainer.getJdbcUrl(),postgresContainer.getUsername(),postgresContainer.getPassword());
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-testcontainers\src\test\java\io\debezium\testing\testcontainers\ApicurioRegistryTest.java",191
1647,"'-tryline","private Connection getConnection(PostgreSQLContainer<?> postgresContainer) throws SQLException {
  return DriverManager.getConnection(postgresContainer.getJdbcUrl(),postgresContainer.getUsername(),postgresContainer.getPassword());
}
","java.sql.SQLException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-testcontainers\src\test\java\io\debezium\testing\testcontainers\DebeziumContainerTest.java",129
1648,"'-tryline","@Override public void setClientInfo(String name,String value) throws SQLClientInfoException {
}
","java.sql.SQLClientInfoException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",301
1649,"'-tryline","@Override public void setClientInfo(Properties properties) throws SQLClientInfoException {
}
","java.sql.SQLClientInfoException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\jdbc\JdbcConnectionTest.java",306
1650,"'-tryline","@Override protected void initSSLContext(SSLContext sc) throws GeneralSecurityException {
  sc.init(finalKMS,new TrustManager[]{new X509TrustManager(){
    @Override public void checkClientTrusted(    X509Certificate[] x509Certificates,    String s) throws CertificateException {
    }
    @Override public void checkServerTrusted(    X509Certificate[] x509Certificates,    String s) throws CertificateException {
    }
    @Override public X509Certificate[] getAcceptedIssuers(){
      return new X509Certificate[0];
    }
  }
},null);
}
","java.security.GeneralSecurityException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\BinlogReader.java",1232
1651,"'-tryline","@Override protected void initSSLContext(SSLContext sc) throws GeneralSecurityException {
  sc.init(finalKMS,new TrustManager[]{new X509TrustManager(){
    @Override public void checkClientTrusted(    X509Certificate[] x509Certificates,    String s) throws CertificateException {
    }
    @Override public void checkServerTrusted(    X509Certificate[] x509Certificates,    String s) throws CertificateException {
    }
    @Override public X509Certificate[] getAcceptedIssuers(){
      return new X509Certificate[0];
    }
  }
},null);
}
","java.security.GeneralSecurityException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlStreamingChangeEventSource.java",986
1652,"'-tryline","/** 
 * Marks a single record as processed, must be called for each record.
 * @param record the record to commit
 */
void markProcessed(R record) throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-api\src\main\java\io\debezium\engine\DebeziumEngine.java",109
1653,"'-tryline","/** 
 * Marks a batch as finished, this may result in committing offsets/flushing data. <p> Should be called when a batch of records is finished being processed.
 */
void markBatchFinished() throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-api\src\main\java\io\debezium\engine\DebeziumEngine.java",117
1654,"'-tryline","/** 
 * Marks a record with updated source offsets as processed.
 * @param record the record to commit
 * @param sourceOffsets the source offsets to update the record with
 */
void markProcessed(R record,Offsets sourceOffsets) throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-api\src\main\java\io\debezium\engine\DebeziumEngine.java",125
1655,"'-tryline","/** 
 * Handles a batch of records, calling the  {@link RecordCommitter#markProcessed(Object)}for each record and  {@link RecordCommitter#markBatchFinished()} when this batch is finished.
 * @param records the records to be processed
 * @param committer the committer that indicates to the system that we are finished
 */
void handleBatch(List<R> records,RecordCommitter<R> committer) throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-api\src\main\java\io\debezium\engine\DebeziumEngine.java",162
1656,"'-tryline","/** 
 * Execute the supplied operation using the primary, blocking until a primary is available. Whenever the operation stops (e.g., if the primary is no longer primary), then restart the operation using the current primary.
 * @param desc the description of the operation, for logging purposes
 * @param operation the operation to be performed on the primary.
 * @throws InterruptedException if the operation was interrupted
 */
public void executeBlocking(String desc,BlockingConsumer<MongoClient> operation) throws InterruptedException {
  final Metronome errorMetronome=Metronome.sleeper(PAUSE_AFTER_ERROR,Clock.SYSTEM);
  while (true) {
    MongoClient primary=primaryConnectionSupplier.get();
    try {
      operation.accept(primary);
      return;
    }
 catch (    InterruptedException e) {
      throw e;
    }
catch (    Throwable t) {
      errorHandler.accept(desc,t);
      if (!isRunning()) {
        throw new ConnectException(Operation failed and MongoDB primary termination requested,t);
      }
      errorMetronome.pause();
    }
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\main\java\io\debezium\connector\mongodb\ConnectionContext.java",336
1657,"'-tryline","@Override protected void emitReadRecord(Receiver receiver,MongoDbCollectionSchema schema) throws InterruptedException {
  final Object newKey=schema.keyFromDocument(oplogEvent);
  assert newKey != null;
  final Struct value=schema.valueFromDocument(oplogEvent,null,getOperation());
  value.put(FieldName.SOURCE,getOffset().getSourceInfo());
  value.put(FieldName.OPERATION,getOperation().code());
  value.put(FieldName.TIMESTAMP,getClock().currentTimeAsInstant().toEpochMilli());
  receiver.changeRecord(schema,getOperation(),newKey,value,getOffset(),null);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\main\java\io\debezium\connector\mongodb\MongoDbChangeRecordEmitter.java",63
1658,"'-tryline","@Override protected void emitCreateRecord(Receiver receiver,MongoDbCollectionSchema schema) throws InterruptedException {
  createAndEmitChangeRecord(receiver,schema);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\main\java\io\debezium\connector\mongodb\MongoDbChangeRecordEmitter.java",76
1659,"'-tryline","@Override protected void emitUpdateRecord(Receiver receiver,MongoDbCollectionSchema schema) throws InterruptedException {
  createAndEmitChangeRecord(receiver,schema);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\main\java\io\debezium\connector\mongodb\MongoDbChangeRecordEmitter.java",81
1660,"'-tryline","@Override protected void emitDeleteRecord(Receiver receiver,MongoDbCollectionSchema schema) throws InterruptedException {
  createAndEmitChangeRecord(receiver,schema);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\main\java\io\debezium\connector\mongodb\MongoDbChangeRecordEmitter.java",86
1661,"'-tryline","private void createAndEmitChangeRecord(Receiver receiver,MongoDbCollectionSchema schema) throws InterruptedException {
  Document patchObject=oplogEvent.get(o,Document.class);
  Document queryObject=oplogEvent.get(o2,Document.class);
  final Document filter=queryObject != null ? queryObject : patchObject;
  final Object newKey=schema.keyFromDocument(filter);
  assert newKey != null;
  final Struct value=schema.valueFromDocument(patchObject,filter,getOperation());
  value.put(FieldName.SOURCE,getOffset().getSourceInfo());
  value.put(FieldName.OPERATION,getOperation().code());
  value.put(FieldName.TIMESTAMP,getClock().currentTimeAsInstant().toEpochMilli());
  receiver.changeRecord(schema,getOperation(),newKey,value,getOffset(),null);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\main\java\io\debezium\connector\mongodb\MongoDbChangeRecordEmitter.java",91
1662,"'-tryline","@Override public List<SourceRecord> doPoll() throws InterruptedException {
  List<DataChangeEvent> records=queue.poll();
  return records.stream().map(DataChangeEvent::getRecord).collect(Collectors.toList());
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\main\java\io\debezium\connector\mongodb\MongoDbConnectorTask.java",131
1663,"'-tryline","private void snapshotReplicaSet(ChangeEventSourceContext sourceContext,MongoDbSnapshotContext ctx,ReplicaSet replicaSet) throws InterruptedException {
  MongoPrimary primaryClient=null;
  try {
    primaryClient=establishConnectionToPrimary(replicaSet);
    if (primaryClient != null) {
      createDataEvents(sourceContext,ctx,replicaSet,primaryClient);
    }
  }
  finally {
    if (primaryClient != null) {
      primaryClient.stop();
    }
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\main\java\io\debezium\connector\mongodb\MongoDbSnapshotChangeEventSource.java",209
1664,"'-tryline","private void createDataEvents(ChangeEventSourceContext sourceContext,MongoDbSnapshotContext snapshotContext,ReplicaSet replicaSet,MongoPrimary primaryClient) throws InterruptedException {
  SnapshotReceiver snapshotReceiver=dispatcher.getSnapshotChangeEventReceiver();
  snapshotContext.offset.preSnapshotStart();
  createDataEventsForReplicaSet(sourceContext,snapshotContext,snapshotReceiver,replicaSet,primaryClient);
  snapshotContext.offset.preSnapshotCompletion();
  snapshotReceiver.completeSnapshot();
  snapshotContext.offset.postSnapshotCompletion();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\main\java\io\debezium\connector\mongodb\MongoDbSnapshotChangeEventSource.java",310
1665,"'-tryline","/** 
 * Dispatches the data change events for the records of a single replica-set.
 */
private void createDataEventsForReplicaSet(ChangeEventSourceContext sourceContext,MongoDbSnapshotContext snapshotContext,SnapshotReceiver snapshotReceiver,ReplicaSet replicaSet,MongoPrimary primaryClient) throws InterruptedException {
  final String rsName=replicaSet.replicaSetName();
  final MongoDbOffsetContext offsetContext=(MongoDbOffsetContext)snapshotContext.offset;
  final ReplicaSetOffsetContext rsOffsetContext=offsetContext.getReplicaSetOffsetContext(replicaSet);
  snapshotContext.lastCollection=false;
  offsetContext.startReplicaSetSnapshot(replicaSet.replicaSetName());
  LOGGER.info(Beginning snapshot of '{}' at {},rsName,rsOffsetContext.getOffset());
  final List<CollectionId> collections=determineDataCollectionsToBeSnapshotted(primaryClient.collections()).collect(Collectors.toList());
  snapshotProgressListener.monitoredDataCollectionsDetermined(collections);
  if (connectorConfig.getSnapshotMaxThreads() > 1) {
    final int numThreads=Math.min(collections.size(),connectorConfig.getSnapshotMaxThreads());
    final Queue<CollectionId> collectionsToCopy=new ConcurrentLinkedQueue<>(collections);
    final String snapshotThreadName=snapshot- + (replicaSet.hasReplicaSetName() ? replicaSet.replicaSetName() : main);
    final ExecutorService snapshotThreads=Threads.newFixedThreadPool(MongoDbConnector.class,taskContext.serverName(),snapshotThreadName,connectorConfig.getSnapshotMaxThreads());
    final CountDownLatch latch=new CountDownLatch(numThreads);
    final AtomicBoolean aborted=new AtomicBoolean(false);
    final AtomicInteger threadCounter=new AtomicInteger(0);
    LOGGER.info(Preparing to use {} thread(s) to snapshot {} collection(s): {},numThreads,collections.size(),Strings.join(, ,collections));
    for (int i=0; i < numThreads; ++i) {
      snapshotThreads.submit(() -> {
        taskContext.configureLoggingContext(replicaSet.replicaSetName() + -snapshot + threadCounter.incrementAndGet());
        try {
          CollectionId id=null;
          while (!aborted.get() && (id=collectionsToCopy.poll()) != null) {
            if (!sourceContext.isRunning()) {
              throw new InterruptedException(Interrupted while snapshotting replica set  + replicaSet.replicaSetName());
            }
            if (collectionsToCopy.isEmpty()) {
              snapshotContext.lastCollection=true;
            }
            createDataEventsForCollection(sourceContext,snapshotContext,snapshotReceiver,replicaSet,id,primaryClient);
          }
        }
 catch (        InterruptedException e) {
          aborted.set(true);
        }
 finally {
          latch.countDown();
        }
      }
);
    }
    try {
      latch.await();
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      aborted.set(true);
    }
    snapshotThreads.shutdown();
  }
 else {
    for (Iterator<CollectionId> it=collections.iterator(); it.hasNext(); ) {
      final CollectionId collectionId=it.next();
      if (!sourceContext.isRunning()) {
        throw new InterruptedException(Interrupted while snapshotting replica set  + replicaSet.replicaSetName());
      }
      if (!it.hasNext()) {
        snapshotContext.lastCollection=true;
      }
      createDataEventsForCollection(sourceContext,snapshotContext,snapshotReceiver,replicaSet,collectionId,primaryClient);
    }
  }
  offsetContext.stopReplicaSetSnapshot(replicaSet.replicaSetName());
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\main\java\io\debezium\connector\mongodb\MongoDbSnapshotChangeEventSource.java",323
1666,"'-tryline","private void createDataEventsForCollection(ChangeEventSourceContext sourceContext,MongoDbSnapshotContext snapshotContext,SnapshotReceiver snapshotReceiver,ReplicaSet replicaSet,CollectionId collectionId,MongoPrimary primaryClient) throws InterruptedException {
  long exportStart=clock.currentTimeInMillis();
  LOGGER.info(\t Exporting data for collection '{}',collectionId);
  primaryClient.executeBlocking(sync ' + collectionId + ',primary -> {
    final MongoDatabase database=primary.getDatabase(collectionId.dbName());
    final MongoCollection<Document> collection=database.getCollection(collectionId.name());
    final int batchSize=taskContext.getConnectorConfig().getSnapshotFetchSize();
    long docs=0;
    Bson filterQuery=Document.parse(connectorConfig.getSnapshotFilterQueryForCollection(collectionId).orElseGet(() -> {}));
    try (MongoCursor<Document> cursor=collection.find(filterQuery).batchSize(batchSize).iterator()){
      snapshotContext.lastRecordInCollection=false;
      if (cursor.hasNext()) {
        while (cursor.hasNext()) {
          if (!sourceContext.isRunning()) {
            throw new InterruptedException(Interrupted while snapshotting collection  + collectionId.name());
          }
          Document document=cursor.next();
          docs++;
          snapshotContext.lastRecordInCollection=!cursor.hasNext();
          if (snapshotContext.lastCollection && snapshotContext.lastRecordInCollection) {
            snapshotContext.offset.markLastSnapshotRecord();
          }
          dispatcher.dispatchSnapshotEvent(collectionId,getChangeRecordEmitter(snapshotContext,collectionId,document,replicaSet),snapshotReceiver);
        }
      }
 else       if (snapshotContext.lastCollection) {
        snapshotContext.offset.markLastSnapshotRecord();
      }
      LOGGER.info(\t Finished snapshotting {} records for collection '{}'; total duration '{}',docs,collectionId,Strings.duration(clock.currentTimeInMillis() - exportStart));
      snapshotProgressListener.dataCollectionSnapshotCompleted(collectionId,docs);
    }
   }
);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\main\java\io\debezium\connector\mongodb\MongoDbSnapshotChangeEventSource.java",430
1667,"'-tryline","@Override public void execute(ChangeEventSourceContext context) throws InterruptedException {
  final List<ReplicaSet> validReplicaSets=replicaSets.validReplicaSets();
  try {
    if (validReplicaSets.size() == 1) {
      streamChangesForReplicaSet(context,validReplicaSets.get(0));
    }
 else     if (validReplicaSets.size() > 1) {
      streamChangesForReplicaSets(context,validReplicaSets);
    }
  }
  finally {
    taskContext.getConnectionContext().shutdown();
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\main\java\io\debezium\connector\mongodb\MongoDbStreamingChangeEventSource.java",80
1668,"'-tryline","@Test public void shouldNotExcludeFieldsForEventOfOtherCollection() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  assertReadRecord(*.c2.name,*.c2.active,obj,AFTER,obj.toJson(COMPACT_JSON_SETTINGS));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",64
1669,"'-tryline","@Test public void shouldExcludeFieldsForReadEvent() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  String expected={ + \_id\: {\$oid\: \ + objId + \},+ \phone\: {\$numberLong\: \123\},+ \scores\: [1.2,3.4,5.6]+ };
  assertReadRecord(*.c1.name,*.c1.active,obj,AFTER,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",77
1670,"'-tryline","@Test public void shouldNotExcludeMissingFieldsForReadEvent() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  assertReadRecord(*.c1.missing,obj,AFTER,obj.toJson(COMPACT_JSON_SETTINGS));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",98
1671,"'-tryline","@Test public void shouldExcludeNestedFieldsForReadEvent() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(address,new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  String expected={ + \_id\: {\$oid\: \ + objId + \},+ \phone\: {\$numberLong\: \123\},+ \address\: {+ \street\: \Claude Debussylaan\,+ \city\: \Amsterdam\+ },+ \scores\: [1.2,3.4,5.6]+ };
  assertReadRecord(*.c1.name,*.c1.active,*.c1.address.number,obj,AFTER,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",111
1672,"'-tryline","@Test public void shouldNotExcludeNestedMissingFieldsForReadEvent() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(address,new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  assertReadRecord(*.c1.address.missing,obj,AFTER,obj.toJson(COMPACT_JSON_SETTINGS));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",140
1673,"'-tryline","@Test public void shouldExcludeFieldsForInsertEvent() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  String expected={ + \_id\: {\$oid\: \ + objId + \},+ \phone\: {\$numberLong\: \123\},+ \scores\: [1.2,3.4,5.6]+ };
  assertInsertRecord(*.c1.name,*.c1.active,obj,AFTER,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",157
1674,"'-tryline","@Test public void shouldNotExcludeMissingFieldsForInsertEvent() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  assertInsertRecord(*.c1.missing,obj,AFTER,obj.toJson(COMPACT_JSON_SETTINGS));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",178
1675,"'-tryline","@Test public void shouldExcludeNestedFieldsForInsertEvent() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(address,new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  String expected={ + \_id\: {\$oid\: \ + objId + \},+ \phone\: {\$numberLong\: \123\},+ \address\: {+ \street\: \Claude Debussylaan\,+ \city\: \Amsterdam\+ },+ \scores\: [1.2,3.4,5.6]+ };
  assertInsertRecord(*.c1.name,*.c1.active,*.c1.address.number,obj,AFTER,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",191
1676,"'-tryline","@Test public void shouldNotExcludeNestedMissingFieldsForInsertEvent() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(address,new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  assertInsertRecord(*.c1.address.missing,obj,AFTER,obj.toJson(COMPACT_JSON_SETTINGS));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",220
1677,"'-tryline","@Test public void shouldExcludeFieldsForUpdateEvent() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,456L).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6,7.8));
  Document updateObj=new Document().append(phone,123L).append(scores,Arrays.asList(1.2,3.4,5.6));
  String expected={ + \$v\: 1, + \$set\: {+ \phone\: {\$numberLong\: \123\},+ \scores\: [1.2,3.4,5.6]+ }+ };
  assertUpdateRecord(*.c1.name,*.c1.active,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",237
1678,"'-tryline","@Test public void shouldNotExcludeMissingFieldsForUpdateEvent() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,456L).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6,7.8));
  Document updateObj=new Document().append(phone,123L).append(scores,Arrays.asList(1.2,3.4,5.6));
  String expected={ + \$v\: 1, + \$set\: {+ \phone\: {\$numberLong\: \123\},+ \scores\: [1.2,3.4,5.6]+ }+ };
  assertUpdateRecord(*.c1.missing,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",264
1679,"'-tryline","@Test public void shouldExcludeNestedFieldsForUpdateEventWithEmbeddedDocument() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,456L).append(address,new Document().append(number,35L).append(street,Claude Debussylaane).append(city,Amsterdame)).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6,7.8));
  Document updateObj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(address,new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  String expected={ + \$v\: 1, + \$set\: {+ \address\: {+ \street\: \Claude Debussylaan\,+ \city\: \Amsterdam\+ },+ \phone\: {\$numberLong\: \123\},+ \scores\: [1.2,3.4,5.6]+ }+ };
  assertUpdateRecord(*.c1.name,*.c1.active,*.c1.address.number,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",291
1680,"'-tryline","@Test public void shouldNotExcludeNestedMissingFieldsForUpdateEventWithEmbeddedDocument() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,456L).append(address,new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)).append(active,false).append(scores,Arrays.asList(1.2,3.4,5.6,7.8));
  Document updateObj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(address,new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  String expected={ + \$v\: 1, + \$set\: {+ \active\: true,+ \address\: {+ \number\: {\$numberLong\: \34\},+ \street\: \Claude Debussylaan\,+ \city\: \Amsterdam\+ },+ \phone\: {\$numberLong\: \123\},+ \scores\: [1.2,3.4,5.6]+ }+ };
  assertUpdateRecord(*.c1.address.missing,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",333
1681,"'-tryline","@Test public void shouldExcludeNestedFieldsForUpdateEventWithArrayOfEmbeddedDocuments() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,456L).append(addresses,Arrays.asList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame),new Document().append(number,8L).append(street,Fragkokklisiass).append(city,Athense))).append(active,false).append(scores,Arrays.asList(1.2,3.4,5.6,7.8));
  Document updateObj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(addresses,Arrays.asList(new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam),new Document().append(number,7L).append(street,Fragkokklisias).append(city,Athens))).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  String expected={ + \$v\: 1, + \$set\: {+ \active\: true,+ \addresses\: [+ {+ \street\: \Claude Debussylaan\,+ \city\: \Amsterdam\+ },+ {+ \street\: \Fragkokklisias\,+ \city\: \Athens\+ }+ ],+ \phone\: {\$numberLong\: \123\},+ \scores\: [1.2,3.4,5.6]+ }+ };
  assertUpdateRecord(*.c1.name,*.c1.addresses.number,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",377
1682,"'-tryline","@Test public void shouldNotExcludeNestedFieldsForUpdateEventWithArrayOfArrays() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally Mae).append(phone,456L).append(addresses,Arrays.asList(Collections.singletonList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)),Collections.singletonList(new Document().append(number,8L).append(street,Fragkokklisiass).append(city,Athenss)))).append(active,false).append(scores,Arrays.asList(1.2,3.4,5.6,7.8));
  Document updateObj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(addresses,Arrays.asList(Collections.singletonList(new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)),Collections.singletonList(new Document().append(number,7L).append(street,Fragkokklisias).append(city,Athens)))).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  String expected={ + \$v\: 1, + \$set\: {+ \active\: true,+ \addresses\: [+ [+ {+ \number\: {\$numberLong\: \34\},+ \street\: \Claude Debussylaan\,+ \city\: \Amsterdam\+ }+ ],+ [+ {+ \number\: {\$numberLong\: \7\},+ \street\: \Fragkokklisias\,+ \city\: \Athens\+ }+ ]+ ],+ \phone\: {\$numberLong\: \123\},+ \scores\: [1.2,3.4,5.6]+ }+ };
  assertUpdateRecord(*.c1.name,*.c1.addresses.number,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",436
1683,"'-tryline","@Test public void shouldExcludeFieldsForSetTopLevelFieldUpdateEvent() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(phone,456L);
  Document updateObj=new Document().append(name,Sally).append(phone,123L);
  String expected={ + \$v\: 1, + \$set\: {+ \phone\: {\$numberLong\: \123\}+ }+ };
  assertUpdateRecord(*.c1.name,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",501
1684,"'-tryline","@Test public void shouldExcludeFieldsForUnsetTopLevelFieldUpdateEvent() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,456L).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  Document updateObj=new Document().append(name,).append(phone,);
  String expected={ + \$v\: 1, + \$unset\: {+ \phone\: true+ }+ };
  assertUpdateRecord(*.c1.name,objId,obj,updateObj,false,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",525
1685,"'-tryline","@Test public void shouldExcludeNestedFieldsForSetTopLevelFieldUpdateEventWithEmbeddedDocument() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(phone,456L).append(address,new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame));
  Document updateObj=new Document().append(name,Sally).append(phone,123L).append(address,new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam));
  String expected={ + \$v\: 1, + \$set\: {+ \address\: {+ \street\: \Claude Debussylaan\,+ \city\: \Amsterdam\+ },+ \phone\: {\$numberLong\: \123\}+ }+ };
  assertUpdateRecord(*.c1.name,*.c1.address.number,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",551
1686,"'-tryline","@Test public void shouldExcludeNestedFieldsForSetTopLevelFieldUpdateEventWithArrayOfEmbeddedDocuments() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(phone,456L).append(addresses,Arrays.asList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame),new Document().append(number,8L).append(street,Fragkokklisiass).append(city,Athense)));
  Document updateObj=new Document().append(name,Sally).append(phone,123L).append(addresses,Arrays.asList(new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam),new Document().append(number,7L).append(street,Fragkokklisias).append(city,Athens)));
  String expected={ + \$v\: 1, + \$set\: {+ \addresses\: [+ {+ \street\: \Claude Debussylaan\,+ \city\: \Amsterdam\+ },+ {+ \street\: \Fragkokklisias\,+ \city\: \Athens\+ }+ ],+ \phone\: {\$numberLong\: \123\}+ }+ };
  assertUpdateRecord(*.c1.name,*.c1.addresses.number,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",587
1687,"'-tryline","@Test public void shouldNotExcludeNestedFieldsForSetTopLevelFieldUpdateEventWithArrayOfArrays() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(phone,456L).append(addresses,Arrays.asList(Collections.singletonList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)),Collections.singletonList(new Document().append(number,8L).append(street,Fragkokklisiass).append(city,Athense))));
  Document updateObj=new Document().append(name,Sally).append(phone,123L).append(addresses,Arrays.asList(Collections.singletonList(new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)),Collections.singletonList(new Document().append(number,7L).append(street,Fragkokklisias).append(city,Athens))));
  String expected={ + \$v\: 1, + \$set\: {+ \addresses\: [+ [+ {+ \number\: {\$numberLong\: \34\},+ \street\: \Claude Debussylaan\,+ \city\: \Amsterdam\+ }+ ],+ [+ {+ \number\: {\$numberLong\: \7\},+ \street\: \Fragkokklisias\,+ \city\: \Athens\+ }+ ]+ ],+ \phone\: {\$numberLong\: \123\}+ }+ };
  assertUpdateRecord(*.c1.name,*.c1.addresses.number,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",639
1688,"'-tryline","@Test public void shouldExcludeNestedFieldsForSetNestedFieldUpdateEventWithEmbeddedDocument() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(phone,456L).append(address,new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame));
  Document updateObj=new Document().append(name,Sally).append(address.number,34L).append(address.street,Claude Debussylaan).append(address.city,Amsterdam);
  String expected={ + \$v\: 1, + \$set\: {+ \address.city\: \Amsterdam\,+ \address.street\: \Claude Debussylaan\+ }+ };
  assertUpdateRecord(*.c1.name,*.c1.address.number,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",697
1689,"'-tryline","@Test public void shouldExcludeNestedFieldsForSetNestedFieldUpdateEventWithArrayOfEmbeddedDocuments() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(addresses,Arrays.asList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)));
  Document updateObj=new Document().append(name,Sally).append(addresses.0.number,34L).append(addresses.0.street,Claude Debussylaan).append(addresses.0.city,Amsterdam);
  String expected={ + \$v\: 1, + \$set\: {+ \addresses.0.city\: \Amsterdam\,+ \addresses.0.street\: \Claude Debussylaan\,+ \name\: \Sally\+ }+ };
  assertUpdateRecord(*.c1.addresses.number,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",728
1690,"'-tryline","@Test public void shouldNotExcludeNestedFieldsForSetNestedFieldUpdateEventWithArrayOfArrays() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(addresses,Arrays.asList(Collections.singletonList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)),Collections.singletonList(new Document().append(number,8L).append(street,Fragkokklisiass).append(city,Athense))));
  Document updateObj=new Document().append(name,Sally).append(addresses.0.0.number,34L).append(addresses.0.0.street,Claude Debussylaan).append(addresses.0.0.city,Amsterdam);
  String expected={ + \$v\: 1, + \$set\: {+ \addresses.0.0.city\: \Amsterdam\,+ \addresses.0.0.number\: {\$numberLong\: \34\},+ \addresses.0.0.street\: \Claude Debussylaan\,+ \name\: \Sally\+ }+ };
  assertUpdateRecord(*.c1.addresses.number,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",760
1691,"'-tryline","@Test public void shouldExcludeNestedFieldsForSetNestedFieldUpdateEventWithSeveralArrays() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(addresses,Arrays.asList(Collections.singletonMap(second,Arrays.asList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)))));
  Document updateObj=new Document().append(name,Sally).append(addresses.0.second.0.number,34L).append(addresses.0.second.0.street,Claude Debussylaan).append(addresses.0.second.0.city,Amsterdam);
  String expected={ + \$v\: 1, + \$set\: {+ \addresses.0.second.0.city\: \Amsterdam\,+ \addresses.0.second.0.street\: \Claude Debussylaan\,+ \name\: \Sally\+ }+ };
  assertUpdateRecord(*.c1.addresses.second.number,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",797
1692,"'-tryline","@Test public void shouldExcludeFieldsForSetNestedFieldUpdateEventWithArrayOfEmbeddedDocuments() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(addresses,Arrays.asList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)));
  Document updateObj=new Document().append(name,Sally).append(addresses.0.0.number,34L).append(addresses.0.0.street,Claude Debussylaan).append(addresses.0.0.city,Amsterdam);
  String expected={ + \$v\: 1, + \$set\: {+ \name\: \Sally\+ }+ };
  assertUpdateRecord(*.c1.addresses,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",829
1693,"'-tryline","@Test public void shouldExcludeFieldsForSetToArrayFieldUpdateEventWithArrayOfEmbeddedDocuments() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(addresses,Arrays.asList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)));
  Document updateObj=new Document().append(name,Sally).append(addresses.0,new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam));
  String expected={ + \$v\: 1, + \$set\: {+ \name\: \Sally\+ }+ };
  assertUpdateRecord(*.c1.addresses,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",859
1694,"'-tryline","@Test public void shouldExcludeNestedFieldsForUnsetNestedFieldUpdateEventWithEmbeddedDocument() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,456L).append(address,new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)).append(active,false).append(scores,Arrays.asList(1.2,3.4,5.6,7.8));
  Document updateObj=new Document().append(name,).append(address.number,).append(address.street,).append(address.city,);
  String expected={ + \$v\: 1, + \$unset\: {+ \address.city\: true,+ \address.street\: true+ }+ };
  assertUpdateRecord(*.c1.name,*.c1.address.number,objId,obj,updateObj,false,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",890
1695,"'-tryline","@Test public void shouldExcludeNestedFieldsForUnsetNestedFieldUpdateEventWithArrayOfEmbeddedDocuments() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(addresses,Arrays.asList(new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam),new Document().append(number,7L).append(street,Fragkokklisias).append(city,Athens))).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  Document updateObj=new Document().append(name,).append(addresses.0.number,).append(addresses.0.street,).append(addresses.0.city,);
  String expected={ + \$v\: 1, + \$unset\: {+ \addresses.0.city\: true,+ \addresses.0.street\: true,+ \name\: true+ }+ };
  assertUpdateRecord(*.c1.addresses.number,objId,obj,updateObj,false,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",923
1696,"'-tryline","@Test public void shouldNotExcludeNestedFieldsForUnsetNestedFieldUpdateEventWithArrayOfArrays() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(addresses,Arrays.asList(Arrays.asList(new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)))).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  Document updateObj=new Document().append(name,).append(addresses.0.0.number,).append(addresses.0.0.street,).append(addresses.0.0.city,);
  String expected={ + \$v\: 1, + \$unset\: {+ \addresses.0.0.city\: true,+ \addresses.0.0.number\: true,+ \addresses.0.0.street\: true,+ \name\: true+ }+ };
  assertUpdateRecord(*.c1.addresses.number,objId,obj,updateObj,false,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",962
1697,"'-tryline","@Test public void shouldExcludeNestedFieldsForUnsetNestedFieldUpdateEventWithSeveralArrays() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(addresses,Arrays.asList(Collections.singletonMap(second,Arrays.asList(new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)))));
  Document updateObj=new Document().append(name,).append(addresses.0.second.0.number,).append(addresses.0.second.0.street,).append(addresses.0.second.0.city,);
  String expected={ + \$v\: 1, + \$unset\: {+ \addresses.0.second.0.city\: true,+ \addresses.0.second.0.street\: true,+ \name\: true+ }+ };
  assertUpdateRecord(*.c1.addresses.second.number,objId,obj,updateObj,false,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",999
1698,"'-tryline","@Test public void shouldExcludeFieldsForUnsetNestedFieldUpdateEventWithArrayOfEmbeddedDocuments() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(addresses,Arrays.asList(new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)));
  Document updateObj=new Document().append(name,).append(addresses.0.number,).append(addresses.0.street,).append(addresses.0.city,);
  String expected={ + \$v\: 1, + \$unset\: {+ \name\: true+ }+ };
  assertUpdateRecord(*.c1.addresses,objId,obj,updateObj,false,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",1032
1699,"'-tryline","@Test public void shouldExcludeFieldsForDeleteEvent() throws InterruptedException {
  config=getConfiguration(*.c1.name,*.c1.active);
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbA);
  ObjectId objId=new ObjectId();
  Document obj=new Document(_id,objId);
  storeDocuments(dbA,c1,obj);
  start(MongoDbConnector.class,config);
  SourceRecords snapshotRecords=consumeRecordsByTopic(1);
  assertThat(snapshotRecords.topics().size()).isEqualTo(1);
  assertThat(snapshotRecords.allRecordsInOrder().size()).isEqualTo(1);
  waitForStreamingRunning(mongodb,SERVER_NAME);
  deleteDocuments(dbA,c1,objId);
  SourceRecords deleteRecords=consumeRecordsByTopic(2);
  assertThat(deleteRecords.topics().size()).isEqualTo(1);
  assertThat(deleteRecords.allRecordsInOrder().size()).isEqualTo(2);
  SourceRecord record=deleteRecords.allRecordsInOrder().get(0);
  Struct value=getValue(record);
  String json=value.getString(AFTER);
  if (json == null) {
    json=value.getString(PATCH);
  }
  assertThat(json).isNull();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",1062
1700,"'-tryline","@Test public void shouldExcludeFieldsForDeleteTombstoneEvent() throws InterruptedException {
  config=getConfiguration(*.c1.name,*.c1.active);
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbA);
  ObjectId objId=new ObjectId();
  Document obj=new Document(_id,objId);
  storeDocuments(dbA,c1,obj);
  start(MongoDbConnector.class,config);
  SourceRecords snapshotRecords=consumeRecordsByTopic(1);
  assertThat(snapshotRecords.topics().size()).isEqualTo(1);
  assertThat(snapshotRecords.allRecordsInOrder().size()).isEqualTo(1);
  waitForStreamingRunning(mongodb,SERVER_NAME);
  deleteDocuments(dbA,c1,objId);
  SourceRecords deleteRecords=consumeRecordsByTopic(2);
  assertThat(deleteRecords.topics().size()).isEqualTo(1);
  assertThat(deleteRecords.allRecordsInOrder().size()).isEqualTo(2);
  SourceRecord record=deleteRecords.allRecordsInOrder().get(1);
  Struct value=getValue(record);
  assertThat(value).isNull();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",1100
1701,"'-tryline","private void assertReadRecord(String blackList,Document snapshotRecord,String field,String expected) throws InterruptedException {
  config=getConfiguration(blackList);
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbA);
  storeDocuments(dbA,c1,snapshotRecord);
  start(MongoDbConnector.class,config);
  SourceRecords snapshotRecords=consumeRecordsByTopic(1);
  assertThat(snapshotRecords.topics().size()).isEqualTo(1);
  assertThat(snapshotRecords.allRecordsInOrder().size()).isEqualTo(1);
  SourceRecord record=snapshotRecords.allRecordsInOrder().get(0);
  Struct value=getValue(record);
  assertThat(value.get(field)).isEqualTo(expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",1194
1702,"'-tryline","private void assertInsertRecord(String blackList,Document insertRecord,String field,String expected) throws InterruptedException {
  config=getConfiguration(blackList);
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbA);
  start(MongoDbConnector.class,config);
  waitForSnapshotToBeCompleted(mongodb,SERVER_NAME);
  storeDocuments(dbA,c1,insertRecord);
  SourceRecords insertRecords=consumeRecordsByTopic(1);
  assertThat(insertRecords.topics().size()).isEqualTo(1);
  assertThat(insertRecords.allRecordsInOrder().size()).isEqualTo(1);
  SourceRecord record=insertRecords.allRecordsInOrder().get(0);
  Struct value=getValue(record);
  assertThat(value.get(field)).isEqualTo(expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",1213
1703,"'-tryline","private void assertUpdateRecord(String blackList,ObjectId objectId,Document snapshotRecord,Document updateRecord,String field,String expected) throws InterruptedException {
  assertUpdateRecord(blackList,objectId,snapshotRecord,updateRecord,true,field,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",1235
1704,"'-tryline","private void assertUpdateRecord(String blackList,ObjectId objectId,Document snapshotRecord,Document updateRecord,boolean doSet,String field,String expected) throws InterruptedException {
  config=getConfiguration(blackList);
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbA);
  storeDocuments(dbA,c1,snapshotRecord);
  start(MongoDbConnector.class,config);
  SourceRecords snapshotRecords=consumeRecordsByTopic(1);
  assertThat(snapshotRecords.topics().size()).isEqualTo(1);
  assertThat(snapshotRecords.allRecordsInOrder().size()).isEqualTo(1);
  waitForStreamingRunning(mongodb,SERVER_NAME);
  updateDocuments(dbA,c1,objectId,updateRecord,doSet);
  SourceRecords updateRecords=consumeRecordsByTopic(1);
  assertThat(updateRecords.topics().size()).isEqualTo(1);
  assertThat(updateRecords.allRecordsInOrder().size()).isEqualTo(1);
  SourceRecord record=updateRecords.allRecordsInOrder().get(0);
  Struct value=getValue(record);
  Document expectedDoc=TestHelper.getDocumentWithoutLanguageVersion(expected);
  Document actualDoc=TestHelper.getDocumentWithoutLanguageVersion(value.getString(field));
  assertThat(actualDoc).isEqualTo(expectedDoc);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldBlacklistIT.java",1241
1705,"'-tryline","@Test public void shouldNotExcludeFieldsForEventOfOtherCollection() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  assertReadRecord(*.c2.name,*.c2.active,obj,AFTER,obj.toJson(COMPACT_JSON_SETTINGS));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",64
1706,"'-tryline","@Test public void shouldExcludeFieldsForReadEvent() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  String expected={ + \_id\: {\$oid\: \ + objId + \},+ \phone\: {\$numberLong\: \123\},+ \scores\: [1.2,3.4,5.6]+ };
  assertReadRecord(*.c1.name,*.c1.active,obj,AFTER,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",77
1707,"'-tryline","@Test public void shouldNotExcludeMissingFieldsForReadEvent() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  assertReadRecord(*.c1.missing,obj,AFTER,obj.toJson(COMPACT_JSON_SETTINGS));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",98
1708,"'-tryline","@Test public void shouldExcludeNestedFieldsForReadEvent() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(address,new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  String expected={ + \_id\: {\$oid\: \ + objId + \},+ \phone\: {\$numberLong\: \123\},+ \address\: {+ \street\: \Claude Debussylaan\,+ \city\: \Amsterdam\+ },+ \scores\: [1.2,3.4,5.6]+ };
  assertReadRecord(*.c1.name,*.c1.active,*.c1.address.number,obj,AFTER,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",111
1709,"'-tryline","@Test public void shouldNotExcludeNestedMissingFieldsForReadEvent() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(address,new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  assertReadRecord(*.c1.address.missing,obj,AFTER,obj.toJson(COMPACT_JSON_SETTINGS));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",140
1710,"'-tryline","@Test public void shouldExcludeFieldsForInsertEvent() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  String expected={ + \_id\: {\$oid\: \ + objId + \},+ \phone\: {\$numberLong\: \123\},+ \scores\: [1.2,3.4,5.6]+ };
  assertInsertRecord(*.c1.name,*.c1.active,obj,AFTER,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",157
1711,"'-tryline","@Test public void shouldNotExcludeMissingFieldsForInsertEvent() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  assertInsertRecord(*.c1.missing,obj,AFTER,obj.toJson(COMPACT_JSON_SETTINGS));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",178
1712,"'-tryline","@Test public void shouldExcludeNestedFieldsForInsertEvent() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(address,new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  String expected={ + \_id\: {\$oid\: \ + objId + \},+ \phone\: {\$numberLong\: \123\},+ \address\: {+ \street\: \Claude Debussylaan\,+ \city\: \Amsterdam\+ },+ \scores\: [1.2,3.4,5.6]+ };
  assertInsertRecord(*.c1.name,*.c1.active,*.c1.address.number,obj,AFTER,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",191
1713,"'-tryline","@Test public void shouldNotExcludeNestedMissingFieldsForInsertEvent() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(address,new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  assertInsertRecord(*.c1.address.missing,obj,AFTER,obj.toJson(COMPACT_JSON_SETTINGS));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",220
1714,"'-tryline","@Test public void shouldExcludeFieldsForUpdateEvent() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,456L).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6,7.8));
  Document updateObj=new Document().append(phone,123L).append(scores,Arrays.asList(1.2,3.4,5.6));
  String expected={ + \$v\: 1, + \$set\: {+ \phone\: {\$numberLong\: \123\},+ \scores\: [1.2,3.4,5.6]+ }+ };
  assertUpdateRecord(*.c1.name,*.c1.active,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",237
1715,"'-tryline","@Test public void shouldNotExcludeMissingFieldsForUpdateEvent() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,456L).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6,7.8));
  Document updateObj=new Document().append(phone,123L).append(scores,Arrays.asList(1.2,3.4,5.6));
  String expected={ + \$v\: 1, + \$set\: {+ \phone\: {\$numberLong\: \123\},+ \scores\: [1.2,3.4,5.6]+ }+ };
  assertUpdateRecord(*.c1.missing,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",264
1716,"'-tryline","@Test public void shouldExcludeNestedFieldsForUpdateEventWithEmbeddedDocument() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,456L).append(address,new Document().append(number,35L).append(street,Claude Debussylaane).append(city,Amsterdame)).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6,7.8));
  Document updateObj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(address,new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  String expected={ + \$v\: 1, + \$set\: {+ \address\: {+ \street\: \Claude Debussylaan\,+ \city\: \Amsterdam\+ },+ \phone\: {\$numberLong\: \123\},+ \scores\: [1.2,3.4,5.6]+ }+ };
  assertUpdateRecord(*.c1.name,*.c1.active,*.c1.address.number,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",291
1717,"'-tryline","@Test public void shouldNotExcludeNestedMissingFieldsForUpdateEventWithEmbeddedDocument() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,456L).append(address,new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)).append(active,false).append(scores,Arrays.asList(1.2,3.4,5.6,7.8));
  Document updateObj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(address,new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  String expected={ + \$v\: 1, + \$set\: {+ \active\: true,+ \address\: {+ \number\: {\$numberLong\: \34\},+ \street\: \Claude Debussylaan\,+ \city\: \Amsterdam\+ },+ \phone\: {\$numberLong\: \123\},+ \scores\: [1.2,3.4,5.6]+ }+ };
  assertUpdateRecord(*.c1.address.missing,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",333
1718,"'-tryline","@Test public void shouldExcludeNestedFieldsForUpdateEventWithArrayOfEmbeddedDocuments() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,456L).append(addresses,Arrays.asList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame),new Document().append(number,8L).append(street,Fragkokklisiass).append(city,Athense))).append(active,false).append(scores,Arrays.asList(1.2,3.4,5.6,7.8));
  Document updateObj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(addresses,Arrays.asList(new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam),new Document().append(number,7L).append(street,Fragkokklisias).append(city,Athens))).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  String expected={ + \$v\: 1, + \$set\: {+ \active\: true,+ \addresses\: [+ {+ \street\: \Claude Debussylaan\,+ \city\: \Amsterdam\+ },+ {+ \street\: \Fragkokklisias\,+ \city\: \Athens\+ }+ ],+ \phone\: {\$numberLong\: \123\},+ \scores\: [1.2,3.4,5.6]+ }+ };
  assertUpdateRecord(*.c1.name,*.c1.addresses.number,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",377
1719,"'-tryline","@Test public void shouldNotExcludeNestedFieldsForUpdateEventWithArrayOfArrays() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally Mae).append(phone,456L).append(addresses,Arrays.asList(Collections.singletonList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)),Collections.singletonList(new Document().append(number,8L).append(street,Fragkokklisiass).append(city,Athenss)))).append(active,false).append(scores,Arrays.asList(1.2,3.4,5.6,7.8));
  Document updateObj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(addresses,Arrays.asList(Collections.singletonList(new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)),Collections.singletonList(new Document().append(number,7L).append(street,Fragkokklisias).append(city,Athens)))).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  String expected={ + \$v\: 1, + \$set\: {+ \active\: true,+ \addresses\: [+ [+ {+ \number\: {\$numberLong\: \34\},+ \street\: \Claude Debussylaan\,+ \city\: \Amsterdam\+ }+ ],+ [+ {+ \number\: {\$numberLong\: \7\},+ \street\: \Fragkokklisias\,+ \city\: \Athens\+ }+ ]+ ],+ \phone\: {\$numberLong\: \123\},+ \scores\: [1.2,3.4,5.6]+ }+ };
  assertUpdateRecord(*.c1.name,*.c1.addresses.number,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",436
1720,"'-tryline","@Test public void shouldExcludeFieldsForSetTopLevelFieldUpdateEvent() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(phone,456L);
  Document updateObj=new Document().append(name,Sally).append(phone,123L);
  String expected={ + \$v\: 1, + \$set\: {+ \phone\: {\$numberLong\: \123\}+ }+ };
  assertUpdateRecord(*.c1.name,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",501
1721,"'-tryline","@Test public void shouldExcludeFieldsForUnsetTopLevelFieldUpdateEvent() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,456L).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  Document updateObj=new Document().append(name,).append(phone,);
  String expected={ + \$v\: 1, + \$unset\: {+ \phone\: true+ }+ };
  assertUpdateRecord(*.c1.name,objId,obj,updateObj,false,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",525
1722,"'-tryline","@Test public void shouldExcludeNestedFieldsForSetTopLevelFieldUpdateEventWithEmbeddedDocument() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(phone,456L).append(address,new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame));
  Document updateObj=new Document().append(name,Sally).append(phone,123L).append(address,new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam));
  String expected={ + \$v\: 1, + \$set\: {+ \address\: {+ \street\: \Claude Debussylaan\,+ \city\: \Amsterdam\+ },+ \phone\: {\$numberLong\: \123\}+ }+ };
  assertUpdateRecord(*.c1.name,*.c1.address.number,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",551
1723,"'-tryline","@Test public void shouldExcludeNestedFieldsForSetTopLevelFieldUpdateEventWithArrayOfEmbeddedDocuments() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(phone,456L).append(addresses,Arrays.asList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame),new Document().append(number,8L).append(street,Fragkokklisiass).append(city,Athense)));
  Document updateObj=new Document().append(name,Sally).append(phone,123L).append(addresses,Arrays.asList(new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam),new Document().append(number,7L).append(street,Fragkokklisias).append(city,Athens)));
  String expected={ + \$v\: 1, + \$set\: {+ \addresses\: [+ {+ \street\: \Claude Debussylaan\,+ \city\: \Amsterdam\+ },+ {+ \street\: \Fragkokklisias\,+ \city\: \Athens\+ }+ ],+ \phone\: {\$numberLong\: \123\}+ }+ };
  assertUpdateRecord(*.c1.name,*.c1.addresses.number,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",587
1724,"'-tryline","@Test public void shouldNotExcludeNestedFieldsForSetTopLevelFieldUpdateEventWithArrayOfArrays() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(phone,456L).append(addresses,Arrays.asList(Collections.singletonList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)),Collections.singletonList(new Document().append(number,8L).append(street,Fragkokklisiass).append(city,Athense))));
  Document updateObj=new Document().append(name,Sally).append(phone,123L).append(addresses,Arrays.asList(Collections.singletonList(new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)),Collections.singletonList(new Document().append(number,7L).append(street,Fragkokklisias).append(city,Athens))));
  String expected={ + \$v\: 1, + \$set\: {+ \addresses\: [+ [+ {+ \number\: {\$numberLong\: \34\},+ \street\: \Claude Debussylaan\,+ \city\: \Amsterdam\+ }+ ],+ [+ {+ \number\: {\$numberLong\: \7\},+ \street\: \Fragkokklisias\,+ \city\: \Athens\+ }+ ]+ ],+ \phone\: {\$numberLong\: \123\}+ }+ };
  assertUpdateRecord(*.c1.name,*.c1.addresses.number,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",639
1725,"'-tryline","@Test public void shouldExcludeNestedFieldsForSetNestedFieldUpdateEventWithEmbeddedDocument() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(phone,456L).append(address,new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame));
  Document updateObj=new Document().append(name,Sally).append(address.number,34L).append(address.street,Claude Debussylaan).append(address.city,Amsterdam);
  String expected={ + \$v\: 1, + \$set\: {+ \address.city\: \Amsterdam\,+ \address.street\: \Claude Debussylaan\+ }+ };
  assertUpdateRecord(*.c1.name,*.c1.address.number,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",697
1726,"'-tryline","@Test public void shouldExcludeNestedFieldsForSetNestedFieldUpdateEventWithArrayOfEmbeddedDocuments() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(addresses,Arrays.asList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)));
  Document updateObj=new Document().append(name,Sally).append(addresses.0.number,34L).append(addresses.0.street,Claude Debussylaan).append(addresses.0.city,Amsterdam);
  String expected={ + \$v\: 1, + \$set\: {+ \addresses.0.city\: \Amsterdam\,+ \addresses.0.street\: \Claude Debussylaan\,+ \name\: \Sally\+ }+ };
  assertUpdateRecord(*.c1.addresses.number,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",728
1727,"'-tryline","@Test public void shouldNotExcludeNestedFieldsForSetNestedFieldUpdateEventWithArrayOfArrays() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(addresses,Arrays.asList(Collections.singletonList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)),Collections.singletonList(new Document().append(number,8L).append(street,Fragkokklisiass).append(city,Athense))));
  Document updateObj=new Document().append(name,Sally).append(addresses.0.0.number,34L).append(addresses.0.0.street,Claude Debussylaan).append(addresses.0.0.city,Amsterdam);
  String expected={ + \$v\: 1, + \$set\: {+ \addresses.0.0.city\: \Amsterdam\,+ \addresses.0.0.number\: {\$numberLong\: \34\},+ \addresses.0.0.street\: \Claude Debussylaan\,+ \name\: \Sally\+ }+ };
  assertUpdateRecord(*.c1.addresses.number,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",760
1728,"'-tryline","@Test public void shouldExcludeNestedFieldsForSetNestedFieldUpdateEventWithSeveralArrays() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(addresses,Arrays.asList(Collections.singletonMap(second,Arrays.asList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)))));
  Document updateObj=new Document().append(name,Sally).append(addresses.0.second.0.number,34L).append(addresses.0.second.0.street,Claude Debussylaan).append(addresses.0.second.0.city,Amsterdam);
  String expected={ + \$v\: 1, + \$set\: {+ \addresses.0.second.0.city\: \Amsterdam\,+ \addresses.0.second.0.street\: \Claude Debussylaan\,+ \name\: \Sally\+ }+ };
  assertUpdateRecord(*.c1.addresses.second.number,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",797
1729,"'-tryline","@Test public void shouldExcludeFieldsForSetNestedFieldUpdateEventWithArrayOfEmbeddedDocuments() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(addresses,Arrays.asList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)));
  Document updateObj=new Document().append(name,Sally).append(addresses.0.0.number,34L).append(addresses.0.0.street,Claude Debussylaan).append(addresses.0.0.city,Amsterdam);
  String expected={ + \$v\: 1, + \$set\: {+ \name\: \Sally\+ }+ };
  assertUpdateRecord(*.c1.addresses,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",829
1730,"'-tryline","@Test public void shouldExcludeFieldsForSetToArrayFieldUpdateEventWithArrayOfEmbeddedDocuments() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally May).append(addresses,Arrays.asList(new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)));
  Document updateObj=new Document().append(name,Sally).append(addresses.0,new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam));
  String expected={ + \$v\: 1, + \$set\: {+ \name\: \Sally\+ }+ };
  assertUpdateRecord(*.c1.addresses,objId,obj,updateObj,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",859
1731,"'-tryline","@Test public void shouldExcludeNestedFieldsForUnsetNestedFieldUpdateEventWithEmbeddedDocument() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,456L).append(address,new Document().append(number,45L).append(street,Claude Debussylaann).append(city,Amsterdame)).append(active,false).append(scores,Arrays.asList(1.2,3.4,5.6,7.8));
  Document updateObj=new Document().append(name,).append(address.number,).append(address.street,).append(address.city,);
  String expected={ + \$v\: 1, + \$unset\: {+ \address.city\: true,+ \address.street\: true+ }+ };
  assertUpdateRecord(*.c1.name,*.c1.address.number,objId,obj,updateObj,false,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",890
1732,"'-tryline","@Test public void shouldExcludeNestedFieldsForUnsetNestedFieldUpdateEventWithArrayOfEmbeddedDocuments() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(addresses,Arrays.asList(new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam),new Document().append(number,7L).append(street,Fragkokklisias).append(city,Athens))).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  Document updateObj=new Document().append(name,).append(addresses.0.number,).append(addresses.0.street,).append(addresses.0.city,);
  String expected={ + \$v\: 1, + \$unset\: {+ \addresses.0.city\: true,+ \addresses.0.street\: true,+ \name\: true+ }+ };
  assertUpdateRecord(*.c1.addresses.number,objId,obj,updateObj,false,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",923
1733,"'-tryline","@Test public void shouldNotExcludeNestedFieldsForUnsetNestedFieldUpdateEventWithArrayOfArrays() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(addresses,Arrays.asList(Arrays.asList(new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)))).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  Document updateObj=new Document().append(name,).append(addresses.0.0.number,).append(addresses.0.0.street,).append(addresses.0.0.city,);
  String expected={ + \$v\: 1, + \$unset\: {+ \addresses.0.0.city\: true,+ \addresses.0.0.number\: true,+ \addresses.0.0.street\: true,+ \name\: true+ }+ };
  assertUpdateRecord(*.c1.addresses.number,objId,obj,updateObj,false,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",962
1734,"'-tryline","@Test public void shouldExcludeNestedFieldsForUnsetNestedFieldUpdateEventWithSeveralArrays() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(addresses,Arrays.asList(Collections.singletonMap(second,Arrays.asList(new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)))));
  Document updateObj=new Document().append(name,).append(addresses.0.second.0.number,).append(addresses.0.second.0.street,).append(addresses.0.second.0.city,);
  String expected={ + \$v\: 1, + \$unset\: {+ \addresses.0.second.0.city\: true,+ \addresses.0.second.0.street\: true,+ \name\: true+ }+ };
  assertUpdateRecord(*.c1.addresses.second.number,objId,obj,updateObj,false,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",999
1735,"'-tryline","@Test public void shouldExcludeFieldsForUnsetNestedFieldUpdateEventWithArrayOfEmbeddedDocuments() throws InterruptedException {
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(addresses,Arrays.asList(new Document().append(number,34L).append(street,Claude Debussylaan).append(city,Amsterdam)));
  Document updateObj=new Document().append(name,).append(addresses.0.number,).append(addresses.0.street,).append(addresses.0.city,);
  String expected={ + \$v\: 1, + \$unset\: {+ \name\: true+ }+ };
  assertUpdateRecord(*.c1.addresses,objId,obj,updateObj,false,PATCH,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",1032
1736,"'-tryline","@Test public void shouldExcludeFieldsForDeleteEvent() throws InterruptedException {
  config=getConfiguration(*.c1.name,*.c1.active);
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbA);
  ObjectId objId=new ObjectId();
  Document obj=new Document(_id,objId);
  storeDocuments(dbA,c1,obj);
  start(MongoDbConnector.class,config);
  SourceRecords snapshotRecords=consumeRecordsByTopic(1);
  assertThat(snapshotRecords.topics().size()).isEqualTo(1);
  assertThat(snapshotRecords.allRecordsInOrder().size()).isEqualTo(1);
  waitForStreamingRunning(mongodb,SERVER_NAME);
  deleteDocuments(dbA,c1,objId);
  SourceRecords deleteRecords=consumeRecordsByTopic(2);
  assertThat(deleteRecords.topics().size()).isEqualTo(1);
  assertThat(deleteRecords.allRecordsInOrder().size()).isEqualTo(2);
  SourceRecord record=deleteRecords.allRecordsInOrder().get(0);
  Struct value=getValue(record);
  String json=value.getString(AFTER);
  if (json == null) {
    json=value.getString(PATCH);
  }
  assertThat(json).isNull();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",1062
1737,"'-tryline","@Test public void shouldExcludeFieldsForDeleteTombstoneEvent() throws InterruptedException {
  config=getConfiguration(*.c1.name,*.c1.active);
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbA);
  ObjectId objId=new ObjectId();
  Document obj=new Document(_id,objId);
  storeDocuments(dbA,c1,obj);
  start(MongoDbConnector.class,config);
  SourceRecords snapshotRecords=consumeRecordsByTopic(1);
  assertThat(snapshotRecords.topics().size()).isEqualTo(1);
  assertThat(snapshotRecords.allRecordsInOrder().size()).isEqualTo(1);
  waitForStreamingRunning(mongodb,SERVER_NAME);
  deleteDocuments(dbA,c1,objId);
  SourceRecords deleteRecords=consumeRecordsByTopic(2);
  assertThat(deleteRecords.topics().size()).isEqualTo(1);
  assertThat(deleteRecords.allRecordsInOrder().size()).isEqualTo(2);
  SourceRecord record=deleteRecords.allRecordsInOrder().get(1);
  Struct value=getValue(record);
  assertThat(value).isNull();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",1100
1738,"'-tryline","private void assertReadRecord(String blackList,Document snapshotRecord,String field,String expected) throws InterruptedException {
  config=getConfiguration(blackList);
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbA);
  storeDocuments(dbA,c1,snapshotRecord);
  start(MongoDbConnector.class,config);
  SourceRecords snapshotRecords=consumeRecordsByTopic(1);
  assertThat(snapshotRecords.topics().size()).isEqualTo(1);
  assertThat(snapshotRecords.allRecordsInOrder().size()).isEqualTo(1);
  SourceRecord record=snapshotRecords.allRecordsInOrder().get(0);
  Struct value=getValue(record);
  assertThat(value.get(field)).isEqualTo(expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",1194
1739,"'-tryline","private void assertInsertRecord(String blackList,Document insertRecord,String field,String expected) throws InterruptedException {
  config=getConfiguration(blackList);
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbA);
  start(MongoDbConnector.class,config);
  waitForSnapshotToBeCompleted(mongodb,SERVER_NAME);
  storeDocuments(dbA,c1,insertRecord);
  SourceRecords insertRecords=consumeRecordsByTopic(1);
  assertThat(insertRecords.topics().size()).isEqualTo(1);
  assertThat(insertRecords.allRecordsInOrder().size()).isEqualTo(1);
  SourceRecord record=insertRecords.allRecordsInOrder().get(0);
  Struct value=getValue(record);
  assertThat(value.get(field)).isEqualTo(expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",1213
1740,"'-tryline","private void assertUpdateRecord(String blackList,ObjectId objectId,Document snapshotRecord,Document updateRecord,String field,String expected) throws InterruptedException {
  assertUpdateRecord(blackList,objectId,snapshotRecord,updateRecord,true,field,expected);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",1235
1741,"'-tryline","private void assertUpdateRecord(String blackList,ObjectId objectId,Document snapshotRecord,Document updateRecord,boolean doSet,String field,String expected) throws InterruptedException {
  config=getConfiguration(blackList);
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbA);
  storeDocuments(dbA,c1,snapshotRecord);
  start(MongoDbConnector.class,config);
  SourceRecords snapshotRecords=consumeRecordsByTopic(1);
  assertThat(snapshotRecords.topics().size()).isEqualTo(1);
  assertThat(snapshotRecords.allRecordsInOrder().size()).isEqualTo(1);
  waitForStreamingRunning(mongodb,SERVER_NAME);
  updateDocuments(dbA,c1,objectId,updateRecord,doSet);
  SourceRecords updateRecords=consumeRecordsByTopic(1);
  assertThat(updateRecords.topics().size()).isEqualTo(1);
  assertThat(updateRecords.allRecordsInOrder().size()).isEqualTo(1);
  SourceRecord record=updateRecords.allRecordsInOrder().get(0);
  Struct value=getValue(record);
  Document expectedDoc=TestHelper.getDocumentWithoutLanguageVersion(expected);
  Document actualDoc=TestHelper.getDocumentWithoutLanguageVersion(value.getString(field));
  assertThat(actualDoc).isEqualTo(expectedDoc);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\FieldExcludeListIT.java",1241
1742,"'-tryline","@Test public void shouldConsumeAllEventsFromDatabase() throws InterruptedException, IOException {
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.POLL_INTERVAL_MS,10).with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).build();
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbit);
  storeDocuments(dbit,simpletons,simple_objects.json);
  storeDocuments(dbit,restaurants,restaurants1.json);
  start(MongoDbConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(12);
  records.topics().forEach(System.out::println);
  assertThat(records.recordsForTopic(mongo.dbit.simpletons).size()).isEqualTo(6);
  assertThat(records.recordsForTopic(mongo.dbit.restaurants).size()).isEqualTo(6);
  assertThat(records.topics().size()).isEqualTo(2);
  AtomicBoolean foundLast=new AtomicBoolean(false);
  records.forEach(record -> {
    validate(record);
    verifyFromInitialSync(record,foundLast);
    verifyReadOperation(record);
  }
);
  assertThat(foundLast.get()).isTrue();
  storeDocuments(dbit,restaurants,restaurants2.json);
  SourceRecords records2=consumeRecordsByTopic(4);
  assertThat(records2.recordsForTopic(mongo.dbit.restaurants).size()).isEqualTo(4);
  assertThat(records2.topics().size()).isEqualTo(1);
  records2.forEach(record -> {
    validate(record);
    verifyNotFromInitialSync(record);
    verifyCreateOperation(record);
    verifyNotFromTransaction(record);
  }
);
  stopConnector();
  storeDocuments(dbit,restaurants,restaurants3.json);
  start(MongoDbConnector.class,config);
  SourceRecords records3=consumeRecordsByTopic(5);
  assertThat(records3.recordsForTopic(mongo.dbit.restaurants).size()).isEqualTo(5);
  assertThat(records3.topics().size()).isEqualTo(1);
  records3.forEach(record -> {
    validate(record);
    verifyNotFromInitialSync(record);
    verifyCreateOperation(record);
  }
);
  storeDocuments(dbit,restaurants,restaurants4.json);
  SourceRecords records4=consumeRecordsByTopic(8);
  assertThat(records4.recordsForTopic(mongo.dbit.restaurants).size()).isEqualTo(8);
  assertThat(records4.topics().size()).isEqualTo(1);
  records4.forEach(record -> {
    validate(record);
    verifyNotFromInitialSync(record);
    verifyCreateOperation(record);
  }
);
  AtomicReference<String> id=new AtomicReference<>();
  primary().execute(create,mongo -> {
    MongoDatabase db1=mongo.getDatabase(dbit);
    MongoCollection<Document> coll=db1.getCollection(arbitrary);
    coll.drop();
    Document doc=Document.parse({\a\: 1, \b\: 2});
    InsertOneOptions insertOptions=new InsertOneOptions().bypassDocumentValidation(true);
    coll.insertOne(doc,insertOptions);
    doc=coll.find().first();
    Testing.debug(Document:  + doc);
    id.set(doc.getObjectId(_id).toString());
    Testing.debug(Document ID:  + id.get());
  }
);
  primary().execute(update,mongo -> {
    MongoDatabase db1=mongo.getDatabase(dbit);
    MongoCollection<Document> coll=db1.getCollection(arbitrary);
    Document doc=coll.find().first();
    Testing.debug(Document:  + doc);
    Document filter=Document.parse({\a\: 1});
    Document operation=Document.parse({ \$set\: { \b\: 10 } });
    coll.updateOne(filter,operation);
    doc=coll.find().first();
    Testing.debug(Document:  + doc);
  }
);
  SourceRecords insertAndUpdate=consumeRecordsByTopic(2);
  assertThat(insertAndUpdate.recordsForTopic(mongo.dbit.arbitrary).size()).isEqualTo(2);
  assertThat(insertAndUpdate.topics().size()).isEqualTo(1);
  records4.forEach(record -> {
    validate(record);
    verifyNotFromInitialSync(record);
    verifyCreateOperation(record);
  }
);
  SourceRecord insertRecord=insertAndUpdate.allRecordsInOrder().get(0);
  SourceRecord updateRecord=insertAndUpdate.allRecordsInOrder().get(1);
  Testing.debug(Insert event:  + insertRecord);
  Testing.debug(Update event:  + updateRecord);
  Struct insertKey=(Struct)insertRecord.key();
  Struct updateKey=(Struct)updateRecord.key();
  String insertId=toObjectId(insertKey.getString(id)).toString();
  String updateId=toObjectId(updateKey.getString(id)).toString();
  assertThat(insertId).isEqualTo(id.get());
  assertThat(updateId).isEqualTo(id.get());
  primary().execute(delete,mongo -> {
    MongoDatabase db1=mongo.getDatabase(dbit);
    MongoCollection<Document> coll=db1.getCollection(arbitrary);
    Document filter=Document.parse({\a\: 1});
    coll.deleteOne(filter);
  }
);
  SourceRecords delete=consumeRecordsByTopic(2);
  assertThat(delete.recordsForTopic(mongo.dbit.arbitrary).size()).isEqualTo(2);
  assertThat(delete.topics().size()).isEqualTo(1);
  SourceRecord deleteRecord=delete.allRecordsInOrder().get(0);
  validate(deleteRecord);
  verifyNotFromInitialSync(deleteRecord);
  verifyDeleteOperation(deleteRecord);
  SourceRecord tombStoneRecord=delete.allRecordsInOrder().get(1);
  validate(tombStoneRecord);
  Testing.debug(Delete event:  + deleteRecord);
  Testing.debug(Tombstone event:  + tombStoneRecord);
  Struct deleteKey=(Struct)deleteRecord.key();
  String deleteId=toObjectId(deleteKey.getString(id)).toString();
  assertThat(deleteId).isEqualTo(id.get());
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",183
1743,"'-tryline","@Test @FixFor(DBZ-1831) public void shouldConsumeAllEventsFromDatabaseWithSkippedOperations() throws InterruptedException, IOException {
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.POLL_INTERVAL_MS,10).with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).with(MongoDbConnectorConfig.SKIPPED_OPERATIONS,u).build();
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbit);
  start(MongoDbConnector.class,config);
  waitForStreamingRunning(mongodb,mongo);
  AtomicReference<String> id=new AtomicReference<>();
  primary().execute(create,mongo -> {
    MongoDatabase db1=mongo.getDatabase(dbit);
    MongoCollection<Document> coll=db1.getCollection(arbitrary);
    coll.drop();
    Document doc=Document.parse({\a\: 1, \b\: 2});
    InsertOneOptions insertOptions=new InsertOneOptions().bypassDocumentValidation(true);
    coll.insertOne(doc,insertOptions);
    doc=coll.find().first();
    Testing.debug(Document:  + doc);
    id.set(doc.getObjectId(_id).toString());
    Testing.debug(Document ID:  + id.get());
  }
);
  SourceRecords insert=consumeRecordsByTopic(1);
  assertThat(insert.recordsForTopic(mongo.dbit.arbitrary)).hasSize(1);
  primary().execute(update,mongo -> {
    MongoDatabase db1=mongo.getDatabase(dbit);
    MongoCollection<Document> coll=db1.getCollection(arbitrary);
    Document doc=coll.find().first();
    Testing.debug(Document:  + doc);
    Document filter=Document.parse({\a\: 1});
    Document operation=Document.parse({ \$set\: { \b\: 10 } });
    coll.updateOne(filter,operation);
    doc=coll.find().first();
    Testing.debug(Document:  + doc);
  }
);
  primary().execute(delete,mongo -> {
    MongoDatabase db1=mongo.getDatabase(dbit);
    MongoCollection<Document> coll=db1.getCollection(arbitrary);
    Document doc=coll.find().first();
    Testing.debug(Document:  + doc);
    Document filter=Document.parse({\a\: 1});
    coll.deleteOne(filter);
    doc=coll.find().first();
    Testing.debug(Document:  + doc);
  }
);
  SourceRecords delete=consumeRecordsByTopic(1);
  assertThat(delete.recordsForTopic(mongo.dbit.arbitrary)).hasSize(1);
  SourceRecord deleteRecord=delete.allRecordsInOrder().get(0);
  validate(deleteRecord);
  verifyDeleteOperation(deleteRecord);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",372
1744,"'-tryline","@Test @FixFor(DBZ-1168) public void shouldConsumeAllEventsFromDatabaseWithCustomAuthSource() throws InterruptedException, IOException {
  final String authDbName=authdb;
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.POLL_INTERVAL_MS,10).with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).build();
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbit);
  primary().execute(Create auth database,client -> {
    final MongoDatabase db=client.getDatabase(authDbName);
    try {
      db.runCommand(BsonDocument.parse({dropUser: \dbz\}));
    }
 catch (    Exception e) {
      logger.info(Expected error while dropping user,e);
    }
    db.runCommand(BsonDocument.parse({createUser: \dbz\, pwd: \pass\, roles: [{role: \readAnyDatabase\, db: \admin\}]}));
  }
);
  storeDocuments(dbit,simpletons,simple_objects.json);
  storeDocuments(dbit,restaurants,restaurants1.json);
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.USER,dbz).with(MongoDbConnectorConfig.PASSWORD,pass).with(MongoDbConnectorConfig.AUTH_SOURCE,authDbName).with(MongoDbConnectorConfig.POLL_INTERVAL_MS,10).with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).build();
  context=new MongoDbTaskContext(config);
  start(MongoDbConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(12);
  records.topics().forEach(System.out::println);
  assertThat(records.recordsForTopic(mongo.dbit.simpletons).size()).isEqualTo(6);
  assertThat(records.recordsForTopic(mongo.dbit.restaurants).size()).isEqualTo(6);
  assertThat(records.topics().size()).isEqualTo(2);
  AtomicBoolean foundLast=new AtomicBoolean(false);
  records.forEach(record -> {
    validate(record);
    verifyFromInitialSync(record,foundLast);
    verifyReadOperation(record);
  }
);
  assertThat(foundLast.get()).isTrue();
  storeDocuments(dbit,restaurants,restaurants2.json);
  SourceRecords records2=consumeRecordsByTopic(4);
  assertThat(records2.recordsForTopic(mongo.dbit.restaurants).size()).isEqualTo(4);
  assertThat(records2.topics().size()).isEqualTo(1);
  records2.forEach(record -> {
    validate(record);
    verifyNotFromInitialSync(record);
    verifyCreateOperation(record);
    verifyNotFromTransaction(record);
  }
);
  stopConnector();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",457
1745,"'-tryline","@Test @FixFor(DBZ-1767) public void shouldSupportDbRef() throws InterruptedException, IOException {
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.POLL_INTERVAL_MS,10).with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).build();
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbit);
  storeDocuments(dbit,spec,spec_objects.json);
  context=new MongoDbTaskContext(config);
  start(MongoDbConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(mongo.dbit.spec).size()).isEqualTo(1);
  assertThat(records.topics().size()).isEqualTo(1);
  AtomicBoolean foundLast=new AtomicBoolean(false);
  records.forEach(record -> {
    validate(record);
    verifyFromInitialSync(record,foundLast);
    verifyReadOperation(record);
  }
);
  assertThat(foundLast.get()).isTrue();
  primary().execute(insert,client -> {
    client.getDatabase(dbit).getCollection(spec).insertOne(Document.parse({ '_id' : 2, 'data' : { '$ref' : 'a2', '$id' : 4, '$db' : 'b2' } }));
  }
);
  SourceRecords records2=consumeRecordsByTopic(1);
  assertThat(records2.recordsForTopic(mongo.dbit.spec).size()).isEqualTo(1);
  assertThat(records2.topics().size()).isEqualTo(1);
  records2.forEach(record -> {
    validate(record);
    verifyNotFromInitialSync(record);
    verifyCreateOperation(record);
    verifyNotFromTransaction(record);
  }
);
  stopConnector();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",550
1746,"'-tryline","@Test @FixFor(DBZ-865 and DBZ-1242) public void shouldConsumeEventsFromCollectionWithReplacedTopicName() throws InterruptedException, IOException {
  final LogInterceptor logInterceptor=new LogInterceptor();
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.POLL_INTERVAL_MS,10).with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.dbz865.*).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).build();
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbit);
  primary().execute(create,mongo -> {
    MongoDatabase db1=mongo.getDatabase(dbit);
    MongoCollection<Document> coll=db1.getCollection(dbz865_my@collection);
    coll.drop();
    Document doc=Document.parse({\a\: 1, \b\: 2});
    InsertOneOptions insertOptions=new InsertOneOptions().bypassDocumentValidation(true);
    coll.insertOne(doc,insertOptions);
  }
);
  start(MongoDbConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(12);
  records.topics().forEach(System.out::println);
  assertThat(records.recordsForTopic(mongo.dbit.dbz865_my_collection)).hasSize(1);
  assertThat(records.topics().size()).isEqualTo(1);
  AtomicBoolean foundLast=new AtomicBoolean(false);
  records.forEach(record -> {
    validate(record);
    verifyFromInitialSync(record,foundLast);
    verifyReadOperation(record);
  }
);
  assertThat(foundLast.get()).isTrue();
  stopConnector(value -> assertThat(logInterceptor.containsWarnMessage(DatabaseSchema.NO_CAPTURED_DATA_COLLECTIONS_WARNING)).isFalse());
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",618
1747,"'-tryline","@Test @FixFor(DBZ-1215) public void shouldConsumeTransaction() throws InterruptedException, IOException {
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.POLL_INTERVAL_MS,10).with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).build();
  context=new MongoDbTaskContext(config);
  if (!TestHelper.transactionsSupported(primary(),dbit)) {
    logger.info(Test not executed, transactions not supported in the server);
    return;
  }
  TestHelper.cleanDatabase(primary(),dbit);
  storeDocuments(dbit,simpletons,simple_objects.json);
  storeDocuments(dbit,restaurants,restaurants1.json);
  start(MongoDbConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(12);
  records.topics().forEach(System.out::println);
  assertThat(records.recordsForTopic(mongo.dbit.simpletons).size()).isEqualTo(6);
  assertThat(records.recordsForTopic(mongo.dbit.restaurants).size()).isEqualTo(6);
  assertThat(records.topics().size()).isEqualTo(2);
  AtomicBoolean foundLast=new AtomicBoolean(false);
  records.forEach(record -> {
    validate(record);
    verifyFromInitialSync(record,foundLast);
    verifyReadOperation(record);
  }
);
  assertThat(foundLast.get()).isTrue();
  storeDocumentsInTx(dbit,restaurants,restaurants2.json);
  SourceRecords records2=consumeRecordsByTopic(4);
  assertThat(records2.recordsForTopic(mongo.dbit.restaurants).size()).isEqualTo(4);
  assertThat(records2.topics().size()).isEqualTo(1);
  final AtomicLong txOrder=new AtomicLong(0);
  records2.forEach(record -> {
    validate(record);
    verifyNotFromInitialSync(record);
    verifyCreateOperation(record);
    verifyFromTransaction(record,txOrder.incrementAndGet());
  }
);
  stopConnector();
  storeDocumentsInTx(dbit,restaurants,restaurants3.json);
  start(MongoDbConnector.class,config);
  SourceRecords records3=consumeRecordsByTopic(5);
  assertThat(records3.recordsForTopic(mongo.dbit.restaurants).size()).isEqualTo(5);
  assertThat(records3.topics().size()).isEqualTo(1);
  txOrder.set(0);
  records3.forEach(record -> {
    validate(record);
    verifyNotFromInitialSync(record);
    verifyCreateOperation(record);
    verifyFromTransaction(record,txOrder.incrementAndGet());
  }
);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",725
1748,"'-tryline","@Test @FixFor(DBZ-1215) public void shouldResumeTransactionInMiddle() throws InterruptedException, IOException {
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.POLL_INTERVAL_MS,10).with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).build();
  context=new MongoDbTaskContext(config);
  if (!TestHelper.transactionsSupported(primary(),dbit)) {
    logger.info(Test not executed, transactions not supported in the server);
    return;
  }
  TestHelper.cleanDatabase(primary(),dbit);
  storeDocuments(dbit,simpletons,simple_objects.json);
  storeDocuments(dbit,restaurants,restaurants1.json);
  start(MongoDbConnector.class,config,record -> {
    final Struct struct=(Struct)record.value();
    final Long txOrder=struct.getStruct(source).getInt64(tord);
    return txOrder != null && txOrder.equals(3L);
  }
);
  SourceRecords records=consumeRecordsByTopic(12);
  records.topics().forEach(System.out::println);
  assertThat(records.recordsForTopic(mongo.dbit.simpletons).size()).isEqualTo(6);
  assertThat(records.recordsForTopic(mongo.dbit.restaurants).size()).isEqualTo(6);
  assertThat(records.topics().size()).isEqualTo(2);
  AtomicBoolean foundLast=new AtomicBoolean(false);
  records.forEach(record -> {
    validate(record);
    verifyFromInitialSync(record,foundLast);
    verifyReadOperation(record);
  }
);
  assertThat(foundLast.get()).isTrue();
  storeDocumentsInTx(dbit,restaurants,restaurants2.json);
  SourceRecords records2=consumeRecordsByTopic(2);
  assertThat(records2.recordsForTopic(mongo.dbit.restaurants).size()).isEqualTo(2);
  assertThat(records2.topics().size()).isEqualTo(1);
  final AtomicLong txOrder=new AtomicLong(0);
  records2.forEach(record -> {
    validate(record);
    verifyNotFromInitialSync(record);
    verifyCreateOperation(record);
    verifyFromTransaction(record,txOrder.incrementAndGet());
  }
);
  stopConnector();
  storeDocumentsInTx(dbit,restaurants,restaurants3.json);
  start(MongoDbConnector.class,config);
  SourceRecords records3=consumeRecordsByTopic(7);
  assertThat(records3.recordsForTopic(mongo.dbit.restaurants).size()).isEqualTo(7);
  assertThat(records3.topics().size()).isEqualTo(1);
  final List<Long> expectedTxOrd=Collect.arrayListOf(3L,4L,1L,2L,3L,4L,5L);
  records3.forEach(record -> {
    validate(record);
    verifyNotFromInitialSync(record);
    verifyCreateOperation(record);
    verifyFromTransaction(record,expectedTxOrd.remove(0));
  }
);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",819
1749,"'-tryline","@Test @FixFor(DBZ-2456) public void shouldSelectivelySnapshot() throws InterruptedException {
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.POLL_INTERVAL_MS,10).with(MongoDbConnectorConfig.SNAPSHOT_MODE,MongoDbConnectorConfig.SnapshotMode.INITIAL).with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).with(CommonConnectorConfig.SNAPSHOT_MODE_TABLES,[A-z].*dbit.restaurants1).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).build();
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbit);
  storeDocuments(dbit,restaurants1,restaurants1.json);
  storeDocuments(dbit,restaurants2,restaurants2.json);
  start(MongoDbConnector.class,config);
  waitForStreamingRunning(mongodb,mongo);
  SourceRecords records=consumeRecordsByTopic(6);
  List<SourceRecord> restaurant1=records.recordsForTopic(mongo.dbit.restaurants1);
  List<SourceRecord> restaurant2=records.recordsForTopic(mongo.dbit.restaurants2);
  assertThat(restaurant1.size()).isEqualTo(6);
  assertThat(restaurant2).isNull();
  final Instant timestamp=Instant.now();
  ObjectId objId=new ObjectId();
  Document obj=Document.parse({\name\: \Brunos On The Boulevard\, \restaurant_id\: \40356151\});
  insertDocuments(dbit,restaurants2,obj);
  records=consumeRecordsByTopic(1);
  assertThat(records.allRecordsInOrder().size()).isEqualTo(1);
  assertNoRecordsToConsume();
  stopConnector();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",1016
1750,"'-tryline","@Test(expected=ConnectException.class) public void shouldUseSSL() throws InterruptedException, IOException {
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.POLL_INTERVAL_MS,10).with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.*).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).with(MongoDbConnectorConfig.MAX_FAILED_CONNECTIONS,0).with(MongoDbConnectorConfig.SSL_ENABLED,true).with(MongoDbConnectorConfig.SERVER_SELECTION_TIMEOUT_MS,2000).build();
  context=new MongoDbTaskContext(config);
  final MongoPrimary primary=primary();
  primary.executeBlocking(Try SSL connection,mongo -> {
    primary.stop();
    mongo.getDatabase(dbit).listCollectionNames().first();
  }
);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",1186
1751,"'-tryline","@Test @FixFor(DBZ-1198) public void shouldEmitHeartbeatMessages() throws InterruptedException, IOException {
  Testing.Print.enable();
  config=TestHelper.getConfiguration().edit().with(MongoDbConnectorConfig.POLL_INTERVAL_MS,10).with(MongoDbConnectorConfig.COLLECTION_INCLUDE_LIST,dbit.mhb).with(MongoDbConnectorConfig.LOGICAL_NAME,mongo).with(Heartbeat.HEARTBEAT_INTERVAL,1).build();
  context=new MongoDbTaskContext(config);
  TestHelper.cleanDatabase(primary(),dbit);
  primary().execute(create,mongo -> {
    MongoDatabase db1=mongo.getDatabase(dbit);
    MongoCollection<Document> coll1=db1.getCollection(mhb);
    coll1.drop();
    Document doc=Document.parse({\a\: 1, \b\: 2});
    InsertOneOptions insertOptions=new InsertOneOptions().bypassDocumentValidation(true);
    coll1.insertOne(doc,insertOptions);
    MongoCollection<Document> coll2=db1.getCollection(nmhb);
    coll2.drop();
  }
);
  start(MongoDbConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.allRecordsInOrder()).hasSize(1);
  assertThat(records.recordsForTopic(mongo.dbit.mhb)).hasSize(1);
  primary().execute(insert-monitored,mongo -> {
    MongoDatabase db1=mongo.getDatabase(dbit);
    MongoCollection<Document> coll=db1.getCollection(mhb);
    Document doc=Document.parse({\a\: 2, \b\: 2});
    InsertOneOptions insertOptions=new InsertOneOptions().bypassDocumentValidation(true);
    coll.insertOne(doc,insertOptions);
  }
);
  records=consumeRecordsByTopic(2);
  assertThat(records.recordsForTopic(mongo.dbit.mhb)).hasSize(1);
  final Map<String,?> monitoredOffset=records.recordsForTopic(mongo.dbit.mhb).get(0).sourceOffset();
  final Integer monitoredTs=(Integer)monitoredOffset.get(SourceInfo.TIMESTAMP);
  final Integer monitoredOrd=(Integer)monitoredOffset.get(SourceInfo.ORDER);
  assertThat(records.recordsForTopic(__debezium-heartbeat.mongo)).hasSize(1);
  final Map<String,?> hbAfterMonitoredOffset=records.recordsForTopic(__debezium-heartbeat.mongo).get(0).sourceOffset();
  assertThat(monitoredTs).isEqualTo((Integer)hbAfterMonitoredOffset.get(SourceInfo.TIMESTAMP));
  assertThat(monitoredOrd).isEqualTo((Integer)hbAfterMonitoredOffset.get(SourceInfo.ORDER));
  primary().execute(insert-nonmonitored,mongo -> {
    MongoDatabase db1=mongo.getDatabase(dbit);
    MongoCollection<Document> coll=db1.getCollection(nmhb);
    Document doc=Document.parse({\a\: 3, \b\: 2});
    InsertOneOptions insertOptions=new InsertOneOptions().bypassDocumentValidation(true);
    coll.insertOne(doc,insertOptions);
  }
);
  records=consumeRecordsByTopic(2);
  final List<SourceRecord> heartbeatRecords=records.recordsForTopic(__debezium-heartbeat.mongo);
  assertThat(heartbeatRecords.size()).isGreaterThanOrEqualTo(1);
  heartbeatRecords.forEach(record -> {
    final Map<String,?> offset=record.sourceOffset();
    final Integer ts=(Integer)offset.get(SourceInfo.TIMESTAMP);
    final Integer ord=(Integer)offset.get(SourceInfo.ORDER);
    assertThat(ts > monitoredTs || (ts == monitoredTs && ord > monitoredOrd));
  }
);
  stopConnector();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\MongoDbConnectorIT.java",1208
1752,"'-tryline","SourceRecord getRecordByOperation(Envelope.Operation operation) throws InterruptedException {
  final SourceRecord candidateRecord=getNextRecord();
  if (!((Struct)candidateRecord.value()).get(op).equals(operation.code())) {
    return getRecordByOperation(operation);
  }
  return candidateRecord;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\AbstractExtractNewDocumentStateTestIT.java",108
1753,"'-tryline","SourceRecord getNextRecord() throws InterruptedException {
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  return records.recordsForTopic(this.topicName()).get(0);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\AbstractExtractNewDocumentStateTestIT.java",120
1754,"'-tryline","protected SourceRecord getUpdateRecord() throws InterruptedException {
  return getRecordByOperation(Envelope.Operation.UPDATE);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\AbstractExtractNewDocumentStateTestIT.java",128
1755,"'-tryline","@Test @FixFor(DBZ-563) public void shouldDropTombstoneByDefault() throws InterruptedException {
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(Document.parse({'_id': 1, 'dataStr': 'hello', 'dataInt': 123, 'dataLong': 80000000000}));
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  primary().execute(delete,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).deleteOne(RawBsonDocument.parse({'_id' : 1}));
  }
);
  SourceRecord firstRecord=getRecordByOperation(Operation.DELETE);
  final SourceRecord transformedDelete=transformation.apply(firstRecord);
  assertThat(transformedDelete).isNull();
  SourceRecord tombstoneRecord=getNextRecord();
  assertThat(tombstoneRecord).isNotNull();
  final SourceRecord transformedTombstone=transformation.apply(tombstoneRecord);
  assertThat(transformedTombstone).isNull();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",78
1756,"'-tryline","@Test public void shouldTransformEvents() throws InterruptedException, IOException {
  final Map<String,String> transformationConfig=new HashMap<>();
  transformationConfig.put(CONFIG_DROP_TOMBSTONES,false);
  transformationConfig.put(HANDLE_DELETES,none);
  transformation.configure(transformationConfig);
  primary().execute(insert,client -> {
    long timestamp=ZonedDateTime.of(2020,1,28,10,00,33,0,ZoneId.of(UTC)).toEpochSecond();
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(Document.parse({ +   '_id': 1,  +   'dataStr': 'hello', +   'dataInt': 123, +   'dataLong': 80000000000, +   'dataDate': ISODate(\2020-01-27T10:47:12.311Z\), +   'dataTimestamp': Timestamp( + timestamp + , 1)+ }));
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  final SourceRecord insertRecord=records.recordsForTopic(this.topicName()).get(0);
  final SourceRecord transformedInsert=transformation.apply(insertRecord);
  final Struct transformedInsertValue=(Struct)transformedInsert.value();
  assertThat(transformedInsert.valueSchema().field(id).schema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(transformedInsert.valueSchema().field(dataStr).schema()).isEqualTo(Schema.OPTIONAL_STRING_SCHEMA);
  assertThat(transformedInsert.valueSchema().field(dataInt).schema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(transformedInsert.valueSchema().field(dataLong).schema()).isEqualTo(Schema.OPTIONAL_INT64_SCHEMA);
  assertThat(transformedInsertValue.get(id)).isEqualTo(1);
  assertThat(transformedInsertValue.get(dataStr)).isEqualTo(hello);
  assertThat(transformedInsertValue.get(dataInt)).isEqualTo(123);
  assertThat(transformedInsertValue.get(dataLong)).isEqualTo(80_000_000_000l);
  assertThat(transformedInsertValue.get(dataDate)).isEqualTo(Date.from(Instant.from(ZonedDateTime.of(2020,1,27,10,47,12,311000000,ZoneId.of(UTC)))));
  assertThat(transformedInsertValue.get(dataTimestamp)).isEqualTo(Date.from(Instant.from(ZonedDateTime.of(2020,1,28,10,00,33,0,ZoneId.of(UTC)))));
  primary().execute(update,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).updateOne(RawBsonDocument.parse({'_id' : 1}),RawBsonDocument.parse({'$set': {'dataStr': 'bye'}}));
  }
);
  records=consumeRecordsByTopic(1);
  final SourceRecord candidateUpdateRecord=records.recordsForTopic(this.topicName()).get(0);
  if (((Struct)candidateUpdateRecord.value()).get(op).equals(c)) {
    records=consumeRecordsByTopic(1);
  }
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  final SourceRecord updateRecord=records.recordsForTopic(this.topicName()).get(0);
  final SourceRecord transformedUpdate=transformation.apply(updateRecord);
  final Struct transformedUpdateValue=(Struct)transformedUpdate.value();
  assertThat(transformedUpdate.valueSchema().field(id).schema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(transformedUpdate.valueSchema().field(dataStr).schema()).isEqualTo(Schema.OPTIONAL_STRING_SCHEMA);
  assertThat(transformedUpdateValue.get(id)).isEqualTo(1);
  assertThat(transformedUpdateValue.get(dataStr)).isEqualTo(bye);
  primary().execute(update,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).updateOne(RawBsonDocument.parse({'_id' : 1}),RawBsonDocument.parse({'$set': {'newStr': 'hello', 'dataInt': 456}}));
  }
);
  records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  final SourceRecord updateMultipleRecord=records.recordsForTopic(this.topicName()).get(0);
  final SourceRecord transformedMultipleUpdate=transformation.apply(updateMultipleRecord);
  final Struct transformedMultipleUpdateValue=(Struct)transformedMultipleUpdate.value();
  assertThat(transformedMultipleUpdate.valueSchema().field(id).schema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(transformedMultipleUpdate.valueSchema().field(newStr).schema()).isEqualTo(Schema.OPTIONAL_STRING_SCHEMA);
  assertThat(transformedMultipleUpdate.valueSchema().field(dataInt).schema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(transformedMultipleUpdateValue.get(id)).isEqualTo(1);
  assertThat(transformedMultipleUpdateValue.get(newStr)).isEqualTo(hello);
  assertThat(transformedMultipleUpdateValue.get(dataInt)).isEqualTo(456);
  primary().execute(update,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).updateOne(RawBsonDocument.parse({'_id' : 1}),RawBsonDocument.parse({'$unset': {'newStr': ''}}));
  }
);
  records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  final SourceRecord updateUnsetRecord=records.recordsForTopic(this.topicName()).get(0);
  final SourceRecord transformedUnsetUpdate=transformation.apply(updateUnsetRecord);
  final Struct transformedUnsetUpdateValue=(Struct)transformedUnsetUpdate.value();
  assertThat(transformedUnsetUpdate.valueSchema().field(id).schema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(transformedUnsetUpdate.valueSchema().field(newStr).schema()).isEqualTo(Schema.OPTIONAL_STRING_SCHEMA);
  assertThat(transformedUnsetUpdateValue.get(id)).isEqualTo(1);
  assertThat(transformedUnsetUpdateValue.get(newStr)).isEqualTo(null);
  primary().execute(update,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).updateOne(RawBsonDocument.parse({'_id' : 1}),RawBsonDocument.parse({'dataStr': 'Hi again'}));
  }
);
  records=consumeRecordsByTopic(1);
  final SourceRecord candidateFullUpdateRecord=records.recordsForTopic(this.topicName()).get(0);
  if (((Struct)candidateFullUpdateRecord.value()).get(op).equals(c)) {
    records=consumeRecordsByTopic(1);
  }
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  final SourceRecord FullUpdateRecord=records.recordsForTopic(this.topicName()).get(0);
  final SourceRecord transformedFullUpdate=transformation.apply(FullUpdateRecord);
  final Struct transformedFullUpdateValue=(Struct)transformedFullUpdate.value();
  assertThat(transformedFullUpdate.valueSchema().field(id).schema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(transformedFullUpdate.valueSchema().field(dataStr).schema()).isEqualTo(Schema.OPTIONAL_STRING_SCHEMA);
  assertThat(transformedFullUpdateValue.get(id)).isEqualTo(1);
  assertThat(transformedFullUpdateValue.get(dataStr)).isEqualTo(Hi again);
  primary().execute(delete,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).deleteOne(RawBsonDocument.parse({'_id' : 1}));
  }
);
  records=consumeRecordsByTopic(2);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(2);
  final SourceRecord deleteRecord=records.recordsForTopic(this.topicName()).get(0);
  final SourceRecord transformedDelete=transformation.apply(deleteRecord);
  final Struct transformedDeleteValue=(Struct)transformedDelete.value();
  assertThat(transformedDeleteValue).isNull();
  final SourceRecord tombstoneRecord=records.recordsForTopic(this.topicName()).get(1);
  final SourceRecord transformedTombstone=transformation.apply(tombstoneRecord);
  assertThat(transformedTombstone.value()).isNull();
  assertThat(SchemaUtil.asString(transformedDelete.keySchema())).isEqualTo(SchemaUtil.asString(transformedTombstone.keySchema()));
  assertThat(transformedDelete.key().toString()).isEqualTo(transformedTombstone.key().toString());
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",110
1757,"'-tryline","@Test @FixFor(DBZ-1767) public void shouldSupportDbRef() throws InterruptedException, IOException {
  final Map<String,String> transformationConfig=new HashMap<>();
  transformationConfig.put(array.encoding,array);
  transformationConfig.put(operation.header,true);
  transformationConfig.put(sanitize.field.names,true);
  transformation.configure(transformationConfig);
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(Document.parse({ '_id' : 2, 'data' : { '$ref' : 'a2', '$id' : 4, '$db' : 'b2' } }));
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  final SourceRecord transformed=transformation.apply(records.allRecordsInOrder().get(0));
  validate(transformed);
  final Struct value=((Struct)transformed.value()).getStruct(data);
  Assertions.assertThat(value.getString(_ref)).isEqualTo(a2);
  Assertions.assertThat(value.getInt32(_id)).isEqualTo(4);
  Assertions.assertThat(value.getString(_db)).isEqualTo(b2);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",262
1758,"'-tryline","@Test @FixFor(DBZ-2680) public void shouldSupportSubSanitizeFieldName() throws InterruptedException, IOException {
  final Map<String,String> transformationConfig=new HashMap<>();
  transformationConfig.put(array.encoding,array);
  transformationConfig.put(operation.header,true);
  transformationConfig.put(sanitize.field.names,true);
  transformation.configure(transformationConfig);
  final String doc={ +   \_id\: \222\, +   \metrics\: {+     \metric::fct\: {+       \min\: 0,+       \max\: 1,+     },+   }+ };
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(Document.parse(doc));
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  final SourceRecord transformed=transformation.apply(records.allRecordsInOrder().get(0));
  validate(transformed);
  final Struct metric=((Struct)transformed.value()).getStruct(metrics).getStruct(metric__fct);
  Assertions.assertThat(metric.getInt32(min)).isEqualTo(0);
  Assertions.assertThat(metric.getInt32(max)).isEqualTo(1);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",288
1759,"'-tryline","@Test @FixFor(DBZ-1442) public void shouldAddSourceFields() throws InterruptedException {
  waitForStreamingRunning();
  final Map<String,String> props=new HashMap<>();
  props.put(ADD_SOURCE_FIELDS,h,ts_ms,ord , db,rs);
  transformation.configure(props);
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(Document.parse({ '_id' : 3, 'name' : 'Tim' }));
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  primary().execute(update,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).updateOne(RawBsonDocument.parse({'_id' : 3}),RawBsonDocument.parse({'$set': {'name': 'Sally'}}));
  }
);
  records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  final SourceRecord record=records.allRecordsInOrder().get(0);
  final Struct source=((Struct)record.value()).getStruct(Envelope.FieldName.SOURCE);
  final SourceRecord transformed=transformation.apply(record);
  validate(transformed);
  final Struct value=(Struct)transformed.value();
  assertThat(value.get(__h)).isEqualTo(source.getInt64(h));
  assertThat(value.get(__ts_ms)).isEqualTo(source.getInt64(ts_ms));
  assertThat(value.get(__ord)).isEqualTo(source.getInt32(ord));
  assertThat(value.get(__db)).isEqualTo(source.getString(db));
  assertThat(value.get(__rs)).isEqualTo(source.getString(rs));
  assertThat(value.get(__db)).isEqualTo(DB_NAME);
  assertThat(value.get(__rs)).isEqualTo(rs0);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",321
1760,"'-tryline","@Test @FixFor(DBZ-1442) public void shouldAddSourceFieldsForRewriteDeleteEvent() throws InterruptedException {
  waitForStreamingRunning();
  final Map<String,String> props=new HashMap<>();
  props.put(ADD_SOURCE_FIELDS,h,ts_ms,ord,db,rs);
  props.put(HANDLE_DELETES,rewrite);
  transformation.configure(props);
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(Document.parse({ '_id' : 4, 'name' : 'Sally' }));
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  primary().execute(delete,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).deleteOne(RawBsonDocument.parse({ '_id' : 4 }));
  }
);
  records=consumeRecordsByTopic(2);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(2);
  assertNoRecordsToConsume();
  final SourceRecord record=records.allRecordsInOrder().get(0);
  final Struct source=((Struct)record.value()).getStruct(Envelope.FieldName.SOURCE);
  final SourceRecord transformed=transformation.apply(record);
  validate(transformed);
  final Struct value=(Struct)transformed.value();
  assertThat(value.get(__h)).isEqualTo(source.getInt64(h));
  assertThat(value.get(__ts_ms)).isEqualTo(source.getInt64(ts_ms));
  assertThat(value.get(__ord)).isEqualTo(source.getInt32(ord));
  assertThat(value.get(__db)).isEqualTo(source.getString(db));
  assertThat(value.get(__rs)).isEqualTo(source.getString(rs));
  assertThat(value.get(__db)).isEqualTo(DB_NAME);
  assertThat(value.get(__rs)).isEqualTo(rs0);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",370
1761,"'-tryline","@Test public void shouldTransformRecordForInsertEvent() throws InterruptedException {
  waitForStreamingRunning();
  final Map<String,String> props=new HashMap<>();
  props.put(OPERATION_HEADER,true);
  transformation.configure(props);
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(active,true).append(scores,Arrays.asList(1.2,3.4,5.6));
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(obj);
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  final SourceRecord record=records.allRecordsInOrder().get(0);
  final SourceRecord transformed=transformation.apply(record);
  validate(transformed);
  Iterator<Header> operationHeader=transformed.headers().allWithName(ExtractNewRecordStateConfigDefinition.DEBEZIUM_OPERATION_HEADER_KEY);
  assertThat((operationHeader).hasNext()).isTrue();
  assertThat(operationHeader.next().value().toString()).isEqualTo(Operation.CREATE.code());
  Struct key=(Struct)transformed.key();
  Struct value=(Struct)transformed.value();
  assertThat(key.schema()).isSameAs(transformed.keySchema());
  assertThat(key.schema().field(id).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(key.get(id)).isEqualTo(objId.toString());
  assertThat(value.schema().name()).isEqualTo(SERVER_NAME + . + DB_NAME+ .+ getCollectionName());
  assertThat(value.schema()).isSameAs(transformed.valueSchema());
  assertThat(value.get(name)).isEqualTo(Sally);
  assertThat(value.get(id)).isEqualTo(objId.toString());
  assertThat(value.get(phone)).isEqualTo(123L);
  assertThat(value.get(active)).isEqualTo(true);
  assertThat(value.get(scores)).isEqualTo(Arrays.asList(1.2,3.4,5.6));
  assertThat(value.schema().field(id).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(value.schema().field(name).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(value.schema().field(phone).schema()).isEqualTo(SchemaBuilder.OPTIONAL_INT64_SCHEMA);
  assertThat(value.schema().field(active).schema()).isEqualTo(SchemaBuilder.OPTIONAL_BOOLEAN_SCHEMA);
  assertThat(value.schema().field(scores).schema()).isEqualTo(SchemaBuilder.array(SchemaBuilder.OPTIONAL_FLOAT64_SCHEMA).optional().build());
  assertThat(value.schema().fields()).hasSize(5);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",419
1762,"'-tryline","@Test public void shouldTransformRecordForInsertEventWithComplexIdType() throws InterruptedException {
  waitForStreamingRunning();
  Document obj=new Document().append(_id,new Document().append(company,32).append(dept,home improvement)).append(name,Sally);
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(obj);
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  final SourceRecord record=records.allRecordsInOrder().get(0);
  final SourceRecord transformed=transformation.apply(record);
  validate(transformed);
  Struct key=(Struct)transformed.key();
  Struct value=(Struct)transformed.value();
  assertThat(key.schema()).isSameAs(transformed.keySchema());
  assertThat(key.schema().field(id).schema().field(company).schema()).isEqualTo(SchemaBuilder.OPTIONAL_INT32_SCHEMA);
  assertThat(key.schema().field(id).schema().field(dept).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(((Struct)key.get(id)).get(company)).isEqualTo(32);
  assertThat(((Struct)key.get(id)).get(dept)).isEqualTo(home improvement);
  assertThat(value.schema()).isSameAs(transformed.valueSchema());
  assertThat(((Struct)value.get(id)).get(company)).isEqualTo(32);
  assertThat(((Struct)value.get(id)).get(dept)).isEqualTo(home improvement);
  assertThat(value.get(name)).isEqualTo(Sally);
  assertThat(value.schema().field(id).schema().field(company).schema()).isEqualTo(SchemaBuilder.OPTIONAL_INT32_SCHEMA);
  assertThat(value.schema().field(id).schema().field(dept).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(value.schema().field(name).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(value.schema().fields()).hasSize(2);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",481
1763,"'-tryline","@Test public void shouldGenerateRecordForUpdateEvent() throws InterruptedException {
  waitForStreamingRunning();
  final Map<String,String> props=new HashMap<>();
  props.put(OPERATION_HEADER,true);
  transformation.configure(props);
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Tim);
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(obj);
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  Document updateObj=new Document().append($set,new Document(name,Sally));
  primary().execute(update,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).updateOne(RawBsonDocument.parse({ '_id' : { '$oid' : ' + objId + '}}),updateObj);
  }
);
  records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  final SourceRecord record=records.allRecordsInOrder().get(0);
  final SourceRecord transformed=transformation.apply(record);
  validate(transformed);
  Iterator<Header> operationHeader=transformed.headers().allWithName(ExtractNewRecordStateConfigDefinition.DEBEZIUM_OPERATION_HEADER_KEY);
  assertThat((operationHeader).hasNext()).isTrue();
  assertThat(operationHeader.next().value().toString()).isEqualTo(Operation.UPDATE.code());
  Struct key=(Struct)transformed.key();
  Struct value=(Struct)transformed.value();
  assertThat(key.schema()).isSameAs(transformed.keySchema());
  assertThat(key.schema().field(id).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(key.get(id)).isEqualTo(objId.toString());
  assertThat(value.schema()).isSameAs(transformed.valueSchema());
  assertThat(value.get(name)).isEqualTo(Sally);
  assertThat(value.get(id)).isEqualTo(objId.toString());
  assertThat(value.schema().field(id).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(value.schema().field(name).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(value.schema().fields()).hasSize(2);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",529
1764,"'-tryline","@Test @FixFor(DBZ-612) public void shouldGenerateRecordForUpdateEventWithUnset() throws InterruptedException {
  waitForStreamingRunning();
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Tim).append(phone,123L).append(active,false);
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(obj);
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  Document updateObj=new Document().append($set,new Document(name,Sally)).append($unset,new Document().append(phone,true).append(active,false));
  primary().execute(update,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).updateOne(RawBsonDocument.parse({ '_id' : { '$oid' : ' + objId + '}}),updateObj);
  }
);
  records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  final SourceRecord record=records.allRecordsInOrder().get(0);
  final SourceRecord transformed=transformation.apply(record);
  validate(transformed);
  Struct value=(Struct)transformed.value();
  assertThat(value.schema()).isSameAs(transformed.valueSchema());
  assertThat(value.get(name)).isEqualTo(Sally);
  assertThat(value.get(phone)).isEqualTo(null);
  assertThat(value.schema().field(phone).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(value.schema().fields()).hasSize(4);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",594
1765,"'-tryline","@Test @FixFor(DBZ-612) public void shouldGenerateRecordForUnsetOnlyUpdateEvent() throws InterruptedException {
  waitForStreamingRunning();
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(phone,123L).append(active,false);
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(obj);
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  Document updateObj=new Document().append($unset,new Document().append(phone,true).append(active,false));
  primary().execute(update,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).updateOne(RawBsonDocument.parse({ '_id' : { '$oid' : ' + objId + '}}),updateObj);
  }
);
  records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  final SourceRecord record=records.allRecordsInOrder().get(0);
  final SourceRecord transformed=transformation.apply(record);
  validate(transformed);
  Struct value=(Struct)transformed.value();
  assertThat(value.schema()).isSameAs(transformed.valueSchema());
  assertThat(value.get(phone)).isEqualTo(null);
  assertThat(value.schema().field(phone).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(value.schema().fields()).hasSize(3);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",647
1766,"'-tryline","@Test @FixFor(DBZ-582) public void shouldGenerateRecordForDeleteEventWithoutTombstone() throws InterruptedException {
  restartConnectorWithoutEmittingTombstones();
  waitForStreamingRunning();
  final Map<String,String> props=new HashMap<>();
  props.put(HANDLE_DELETES,none);
  transformation.configure(props);
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId);
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(obj);
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  primary().execute(delete,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).deleteOne(RawBsonDocument.parse({ '_id' : { '$oid' : ' + objId + '}}));
  }
);
  records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  final SourceRecord record=records.allRecordsInOrder().get(0);
  final SourceRecord transformed=transformation.apply(record);
  validate(transformed);
  Struct key=(Struct)transformed.key();
  Struct value=(Struct)transformed.value();
  assertThat(key.schema()).isSameAs(transformed.keySchema());
  assertThat(key.schema().field(id).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(key.get(id)).isEqualTo(objId.toString());
  assertThat(value).isNull();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",698
1767,"'-tryline","@Test @FixFor(DBZ-1032) public void shouldGenerateRecordHeaderForTombstone() throws InterruptedException {
  waitForStreamingRunning();
  final Map<String,String> props=new HashMap<>();
  props.put(OPERATION_HEADER,true);
  props.put(DROP_TOMBSTONE,false);
  transformation.configure(props);
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId);
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(obj);
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  primary().execute(delete,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).deleteOne(RawBsonDocument.parse({ '_id' : { '$oid' : ' + objId + '}}));
  }
);
  records=consumeRecordsByTopic(2);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(2);
  assertNoRecordsToConsume();
  final SourceRecord transformed=transformation.apply(records.allRecordsInOrder().get(1));
  validate(transformed);
  Struct key=(Struct)transformed.key();
  Struct value=(Struct)transformed.value();
  assertThat(key.schema()).isSameAs(transformed.keySchema());
  assertThat(key.schema().field(id).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(key.get(id)).isEqualTo(objId.toString());
  Iterator<Header> operationHeader=transformed.headers().allWithName(ExtractNewRecordStateConfigDefinition.DEBEZIUM_OPERATION_HEADER_KEY);
  assertThat((operationHeader).hasNext()).isTrue();
  assertThat(operationHeader.next().value().toString()).isEqualTo(Operation.DELETE.code());
  assertThat(value).isNull();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",751
1768,"'-tryline","@Test @FixFor(DBZ-583) public void shouldDropDeleteMessagesByDefault() throws InterruptedException {
  restartConnectorWithoutEmittingTombstones();
  waitForStreamingRunning();
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId);
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(obj);
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  primary().execute(delete,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).deleteOne(RawBsonDocument.parse({ '_id' : { '$oid' : ' + objId + '}}));
  }
);
  records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  final SourceRecord transformed=transformation.apply(records.allRecordsInOrder().get(0));
  assertThat(transformed).isNull();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",804
1769,"'-tryline","@Test @FixFor(DBZ-583) public void shouldRewriteDeleteMessage() throws InterruptedException {
  restartConnectorWithoutEmittingTombstones();
  waitForStreamingRunning();
  final Map<String,String> props=new HashMap<>();
  props.put(HANDLE_DELETES,rewrite);
  transformation.configure(props);
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId);
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(obj);
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  primary().execute(delete,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).deleteOne(RawBsonDocument.parse({ '_id' : { '$oid' : ' + objId + '}}));
  }
);
  records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  final SourceRecord transformed=transformation.apply(records.allRecordsInOrder().get(0));
  Struct key=(Struct)transformed.key();
  Struct value=(Struct)transformed.value();
  assertThat(key.schema()).isSameAs(transformed.keySchema());
  assertThat(key.schema().field(id).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(key.get(id)).isEqualTo(objId.toString());
  assertThat(value.schema().field(__deleted).schema()).isEqualTo(SchemaBuilder.OPTIONAL_BOOLEAN_SCHEMA);
  assertThat(value.get(__deleted)).isEqualTo(true);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",840
1770,"'-tryline","@Test @FixFor(DBZ-583) public void shouldRewriteMessagesWhichAreNotDeletes() throws InterruptedException {
  waitForStreamingRunning();
  final Map<String,String> props=new HashMap<>();
  props.put(HANDLE_DELETES,rewrite);
  transformation.configure(props);
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Tim);
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(obj);
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  Document updateObj=new Document().append($set,new Document(name,Sally));
  primary().execute(update,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).updateOne(RawBsonDocument.parse({ '_id' : { '$oid' : ' + objId + '}}),updateObj);
  }
);
  records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  final SourceRecord transformed=transformation.apply(records.allRecordsInOrder().get(0));
  Struct value=(Struct)transformed.value();
  assertThat(value.schema().field(__deleted).schema()).isEqualTo(SchemaBuilder.OPTIONAL_BOOLEAN_SCHEMA);
  assertThat(value.get(__deleted)).isEqualTo(false);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",888
1771,"'-tryline","@Test public void shouldGenerateRecordForDeleteEvent() throws InterruptedException {
  waitForStreamingRunning();
  final Map<String,String> props=new HashMap<>();
  props.put(OPERATION_HEADER,true);
  props.put(HANDLE_DELETES,none);
  transformation.configure(props);
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId);
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(obj);
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  primary().execute(delete,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).deleteOne(RawBsonDocument.parse({ '_id' : { '$oid' : ' + objId + '}}));
  }
);
  records=consumeRecordsByTopic(2);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(2);
  assertNoRecordsToConsume();
  final SourceRecord transformed=transformation.apply(records.allRecordsInOrder().get(0));
  Iterator<Header> operationHeader=transformed.headers().allWithName(ExtractNewRecordStateConfigDefinition.DEBEZIUM_OPERATION_HEADER_KEY);
  assertThat((operationHeader).hasNext()).isTrue();
  assertThat(operationHeader.next().value().toString()).isEqualTo(Operation.DELETE.code());
  Struct key=(Struct)transformed.key();
  Struct value=(Struct)transformed.value();
  assertThat(key.schema()).isSameAs(transformed.keySchema());
  assertThat(key.schema().field(id).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(key.get(id)).isEqualTo(objId.toString());
  assertThat(value).isNull();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",933
1772,"'-tryline","@Test @FixFor(DBZ-971) public void shouldPropagatePreviousRecordHeaders() throws InterruptedException {
  waitForStreamingRunning();
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Tim);
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(obj);
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  Document updateObj=new Document().append($set,new Document(name,Sally));
  primary().execute(update,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).updateOne(RawBsonDocument.parse({ '_id' : { '$oid' : ' + objId + '}}),updateObj);
  }
);
  records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  final SourceRecord record=records.allRecordsInOrder().get(0);
  record.headers().addString(application/debezium-test-header,shouldPropagatePreviousRecordHeaders);
  final SourceRecord transformed=transformation.apply(record);
  assertThat(transformed.headers()).hasSize(1);
  Iterator<Header> headers=transformed.headers().allWithName(application/debezium-test-header);
  assertThat(headers.hasNext()).isTrue();
  assertThat(headers.next().value().toString()).isEqualTo(shouldPropagatePreviousRecordHeaders);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",985
1773,"'-tryline","@Test public void shouldNotFlattenTransformRecordForInsertEvent() throws InterruptedException {
  waitForStreamingRunning();
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(address,new Document().append(street,Morris Park Ave).append(zipcode,10462));
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(obj);
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  final SourceRecord transformed=transformation.apply(records.allRecordsInOrder().get(0));
  Struct key=(Struct)transformed.key();
  Struct value=(Struct)transformed.value();
  assertThat(key.schema()).isSameAs(transformed.keySchema());
  assertThat(key.schema().field(id).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(key.get(id)).isEqualTo(objId.toString());
  assertThat(value.schema()).isSameAs(transformed.valueSchema());
  assertThat(value.get(name)).isEqualTo(Sally);
  assertThat(value.get(id)).isEqualTo(objId.toString());
  assertThat(value.get(address)).isEqualTo(new Struct(value.schema().field(address).schema()).put(street,Morris Park Ave).put(zipcode,10462));
  assertThat(value.schema().field(id).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(value.schema().field(name).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(value.schema().field(address).schema()).isEqualTo(SchemaBuilder.struct().name(SERVER_NAME + . + DB_NAME+ .+ getCollectionName()+ .address).optional().field(street,Schema.OPTIONAL_STRING_SCHEMA).field(zipcode,Schema.OPTIONAL_STRING_SCHEMA).build());
  assertThat(value.schema().fields()).hasSize(3);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",1028
1774,"'-tryline","@Test public void shouldFlattenTransformRecordForInsertEvent() throws InterruptedException {
  waitForStreamingRunning();
  final Map<String,String> props=new HashMap<>();
  props.put(FLATTEN_STRUCT,true);
  transformation.configure(props);
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(address,new Document().append(street,Morris Park Ave).append(zipcode,10462));
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(obj);
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  final SourceRecord transformed=transformation.apply(records.allRecordsInOrder().get(0));
  Struct key=(Struct)transformed.key();
  Struct value=(Struct)transformed.value();
  assertThat(key.schema()).isSameAs(transformed.keySchema());
  assertThat(key.schema().field(id).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(key.get(id)).isEqualTo(objId.toString());
  assertThat(value.schema()).isSameAs(transformed.valueSchema());
  assertThat(value.get(name)).isEqualTo(Sally);
  assertThat(value.get(id)).isEqualTo(objId.toString());
  assertThat(value.get(address_street)).isEqualTo(Morris Park Ave);
  assertThat(value.get(address_zipcode)).isEqualTo(10462);
  assertThat(value.schema().field(id).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(value.schema().field(name).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(value.schema().field(address_street).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(value.schema().field(address_zipcode).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(value.schema().fields()).hasSize(4);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",1079
1775,"'-tryline","@Test public void shouldFlattenWithDelimiterTransformRecordForInsertEvent() throws InterruptedException {
  waitForStreamingRunning();
  final Map<String,String> props=new HashMap<>();
  props.put(FLATTEN_STRUCT,true);
  props.put(DELIMITER,-);
  transformation.configure(props);
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(address,new Document().append(street,Morris Park Ave).append(zipcode,10462));
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(obj);
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  final SourceRecord transformed=transformation.apply(records.allRecordsInOrder().get(0));
  Struct key=(Struct)transformed.key();
  Struct value=(Struct)transformed.value();
  assertThat(key.schema()).isSameAs(transformed.keySchema());
  assertThat(key.schema().field(id).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(key.get(id)).isEqualTo(objId.toString());
  assertThat(value.schema()).isSameAs(transformed.valueSchema());
  assertThat(value.get(name)).isEqualTo(Sally);
  assertThat(value.get(id)).isEqualTo(objId.toString());
  assertThat(value.get(address-street)).isEqualTo(Morris Park Ave);
  assertThat(value.get(address-zipcode)).isEqualTo(10462);
  assertThat(value.schema().field(id).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(value.schema().field(name).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(value.schema().field(address-street).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(value.schema().field(address-zipcode).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(value.schema().fields()).hasSize(4);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",1129
1776,"'-tryline","@Test public void shouldFlattenWithDelimiterTransformRecordForUpdateEvent() throws InterruptedException {
  waitForStreamingRunning();
  final Map<String,String> props=new HashMap<>();
  props.put(FLATTEN_STRUCT,true);
  props.put(DELIMITER,-);
  transformation.configure(props);
  ObjectId objId=new ObjectId();
  Document obj=new Document().append(_id,objId).append(name,Sally).append(address,new Document().append(street,Morris Park Ave).append(zipcode,10462));
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(obj);
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  Document updateObj=new Document().append($set,new Document(Collect.hashMapOf(address.city,Canberra,address.name,James,address.city2.part,3)));
  primary().execute(update,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).updateOne(RawBsonDocument.parse({ '_id' : { '$oid' : ' + objId + '}}),updateObj);
  }
);
  records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  assertNoRecordsToConsume();
  final SourceRecord transformed=transformation.apply(records.allRecordsInOrder().get(0));
  Struct key=(Struct)transformed.key();
  Struct value=(Struct)transformed.value();
  assertThat(key.schema()).isSameAs(transformed.keySchema());
  assertThat(key.schema().field(id).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(key.get(id)).isEqualTo(objId.toString());
  assertThat(value.schema()).isSameAs(transformed.valueSchema());
  assertThat(value.get(id)).isEqualTo(objId.toString());
  assertThat(value.get(address-city)).isEqualTo(Canberra);
  assertThat(value.get(address-name)).isEqualTo(James);
  assertThat(value.get(address-city2-part)).isEqualTo(3);
  assertThat(value.schema().field(id).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(value.schema().field(address-city).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(value.schema().field(address-name).schema()).isEqualTo(SchemaBuilder.OPTIONAL_STRING_SCHEMA);
  assertThat(value.schema().field(address-city2-part).schema()).isEqualTo(SchemaBuilder.OPTIONAL_INT32_SCHEMA);
  assertThat(value.schema().fields()).hasSize(4);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",1180
1777,"'-tryline","@Test @FixFor(DBZ-2585) public void testEmptyArray() throws InterruptedException, IOException {
  final Map<String,String> transformationConfig=new HashMap<>();
  transformationConfig.put(array.encoding,array);
  transformationConfig.put(sanitize.field.names,true);
  transformation.configure(transformationConfig);
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(Document.parse({'empty_array': [] }));
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  final SourceRecord insertRecord=records.recordsForTopic(this.topicName()).get(0);
  final SourceRecord transformedInsert=transformation.apply(insertRecord);
  assertThat(transformedInsert.valueSchema().field(empty_array)).isNull();
  VerifyRecord.isValid(transformedInsert);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",1433
1778,"'-tryline","@Test @FixFor(DBZ-2569) public void testMatrixType() throws InterruptedException, IOException {
  final Map<String,String> transformationConfig=new HashMap<>();
  transformationConfig.put(array.encoding,array);
  transformationConfig.put(CONFIG_DROP_TOMBSTONES,false);
  transformationConfig.put(HANDLE_DELETES,none);
  transformation.configure(transformationConfig);
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(Document.parse({ +   'matrix': [ +     [1,2,3],+     [4,5,6],+     [7,8,9],+   ]+   ,'array_complex': [+     {'k1' : 'v1','k2' : 1},+     {'k1' : 'v2','k2' : 2},+   ]+   ,'matrix_complex': [+     [+       {'k3' : 'v111',+        'k4' : [1,2,3]},+       {'k3' : 'v211',+        'k4' : [4,5,6]}+     ],+     [+       {'k3' : 'v112',+        'k4' : [7,8]},+       {'k3' : 'v212',+        'k4' : [8]}+     ],+   ]+ }));
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  final SourceRecord insertRecord=records.recordsForTopic(this.topicName()).get(0);
  final SourceRecord transformedInsert=transformation.apply(insertRecord);
  final Struct transformedInsertValue=(Struct)transformedInsert.value();
  final Schema matrixSchema=transformedInsert.valueSchema().field(matrix).schema();
  assertThat(matrixSchema.type()).isEqualTo(Schema.Type.ARRAY);
  final Schema subMatrixSchema=matrixSchema.valueSchema().schema();
  assertThat(subMatrixSchema.type()).isEqualTo(Schema.Type.ARRAY);
  assertThat(subMatrixSchema.valueSchema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(transformedInsertValue.get(matrix)).isEqualTo(Arrays.asList(Arrays.asList(1,2,3),Arrays.asList(4,5,6),Arrays.asList(7,8,9)));
  final Schema arrayComplexSchema=transformedInsert.valueSchema().field(array_complex).schema();
  assertThat(arrayComplexSchema.type()).isEqualTo(Schema.Type.ARRAY);
  final Schema subArrayComplexSchema=arrayComplexSchema.valueSchema().schema();
  assertThat(subArrayComplexSchema.type()).isEqualTo(Schema.Type.STRUCT);
  assertThat(subArrayComplexSchema.field(k1).schema()).isEqualTo(Schema.OPTIONAL_STRING_SCHEMA);
  assertThat(subArrayComplexSchema.field(k2).schema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  final Field k1=subArrayComplexSchema.field(k1);
  final Field k2=subArrayComplexSchema.field(k2);
  final Struct subStruct1=new Struct(subArrayComplexSchema);
  subStruct1.put(k1,v1);
  subStruct1.put(k2,1);
  final Struct subStruct2=new Struct(subArrayComplexSchema);
  subStruct2.put(k1,v2);
  subStruct2.put(k2,2);
  assertThat(transformedInsertValue.get(array_complex)).isEqualTo(Arrays.asList(subStruct1,subStruct2));
  final Schema matrixComplexSchema=transformedInsert.valueSchema().field(matrix_complex).schema();
  assertThat(matrixComplexSchema.type()).isEqualTo(Schema.Type.ARRAY);
  final Schema subMatrixComplexSchema=matrixComplexSchema.valueSchema().schema();
  assertThat(subMatrixComplexSchema.type()).isEqualTo(Schema.Type.ARRAY);
  Schema strucSchema=subMatrixComplexSchema.valueSchema();
  assertThat(strucSchema.schema().type()).isEqualTo(Schema.Type.STRUCT);
  assertThat(strucSchema.field(k3).schema()).isEqualTo(Schema.OPTIONAL_STRING_SCHEMA);
  assertThat(strucSchema.field(k4).schema().type()).isEqualTo(Schema.Type.ARRAY);
  assertThat(strucSchema.field(k4).schema().valueSchema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  final Field k3=strucSchema.field(k3);
  final Field k4=strucSchema.field(k4);
  final Struct subStruct11=new Struct(strucSchema.schema());
  subStruct11.put(k3,v111);
  subStruct11.put(k4,Arrays.asList(1,2,3));
  final Struct subStruct12=new Struct(strucSchema.schema());
  subStruct12.put(k3,v112);
  subStruct12.put(k4,Arrays.asList(7,8));
  final Struct subStruct21=new Struct(strucSchema.schema());
  subStruct21.put(k3,v211);
  subStruct21.put(k4,Arrays.asList(4,5,6));
  final Struct subStruct22=new Struct(strucSchema.schema());
  subStruct22.put(k3,v212);
  subStruct22.put(k4,Arrays.asList(8));
  assertThat(transformedInsertValue.get(matrix_complex)).isEqualTo(Arrays.asList(Arrays.asList(subStruct11,subStruct21),Arrays.asList(subStruct12,subStruct22)));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",1534
1779,"'-tryline","@Test @FixFor(DBZ-2569) public void testMatrixArrayAsDocumentType() throws InterruptedException, IOException {
  final Map<String,String> transformationConfig=new HashMap<>();
  transformationConfig.put(array.encoding,document);
  transformationConfig.put(CONFIG_DROP_TOMBSTONES,false);
  transformationConfig.put(HANDLE_DELETES,none);
  transformation.configure(transformationConfig);
  primary().execute(insert,client -> {
    client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).insertOne(Document.parse({ +   'matrix': [ +     [1,'aa',3],+     [4,5,'6'],+     [7.0,8],+   ]+ }));
  }
);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName()).size()).isEqualTo(1);
  final SourceRecord insertRecord=records.recordsForTopic(this.topicName()).get(0);
  final SourceRecord transformedInsert=transformation.apply(insertRecord);
  final Schema matrixSchema=transformedInsert.valueSchema().field(matrix).schema();
  assertThat(matrixSchema.type()).isEqualTo(Schema.Type.STRUCT);
  assertThat(matrixSchema.fields().size()).isEqualTo(3);
  final Schema firstSubSchema=matrixSchema.field(_0).schema();
  assertThat(firstSubSchema.type()).isEqualTo(Schema.Type.STRUCT);
  assertThat(firstSubSchema.fields().size()).isEqualTo(3);
  assertThat(firstSubSchema.field(_0).schema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(firstSubSchema.field(_1).schema()).isEqualTo(Schema.OPTIONAL_STRING_SCHEMA);
  assertThat(firstSubSchema.field(_2).schema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  final Schema secondSubSchema=matrixSchema.field(_1).schema();
  assertThat(secondSubSchema.type()).isEqualTo(Schema.Type.STRUCT);
  assertThat(secondSubSchema.fields().size()).isEqualTo(3);
  assertThat(secondSubSchema.field(_0).schema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(secondSubSchema.field(_1).schema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(secondSubSchema.field(_2).schema()).isEqualTo(Schema.OPTIONAL_STRING_SCHEMA);
  final Schema thirdSubSchema=matrixSchema.field(_2).schema();
  assertThat(thirdSubSchema.type()).isEqualTo(Schema.Type.STRUCT);
  assertThat(thirdSubSchema.fields().size()).isEqualTo(2);
  assertThat(thirdSubSchema.field(_0).schema()).isEqualTo(Schema.OPTIONAL_FLOAT64_SCHEMA);
  assertThat(thirdSubSchema.field(_1).schema()).isEqualTo(Schema.OPTIONAL_INT32_SCHEMA);
  final Struct transformedInsertValue=(Struct)transformedInsert.value();
  final Struct firstSubStruct=new Struct(firstSubSchema);
  firstSubStruct.put(firstSubSchema.field(_0),1);
  firstSubStruct.put(firstSubSchema.field(_1),aa);
  firstSubStruct.put(firstSubSchema.field(_2),3);
  final Struct secondSubStruct=new Struct(secondSubSchema);
  secondSubStruct.put(secondSubSchema.field(_0),4);
  secondSubStruct.put(secondSubSchema.field(_1),5);
  secondSubStruct.put(secondSubSchema.field(_2),6);
  final Struct thirdSubStruct=new Struct(thirdSubSchema);
  thirdSubStruct.put(thirdSubSchema.field(_0),7.0);
  thirdSubStruct.put(thirdSubSchema.field(_1),8);
  final Struct struct=new Struct(matrixSchema);
  struct.put(matrixSchema.field(_0),firstSubStruct);
  struct.put(matrixSchema.field(_1),secondSubStruct);
  struct.put(matrixSchema.field(_2),thirdSubStruct);
  assertThat(transformedInsertValue.get(matrix)).isEqualTo(struct);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",1630
1780,"'-tryline","private static void waitForStreamingRunning() throws InterruptedException {
  waitForStreamingRunning(mongodb,SERVER_NAME);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\ExtractNewDocumentStateTestIT.java",1776
1781,"'-tryline","SourceRecord executeSimpleUpdateOperation(String updateDocument) throws InterruptedException {
  primary().execute(insert,createInsertItemDefault(1));
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(this.topicName())).hasSize(1);
  primary().execute(update,createUpdateOneItem(1,updateDocument));
  return getUpdateRecord();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\UpdateOperators\AbstractExtractNewDocumentStateUpdateOperatorsTestIT.java",37
1782,"'-tryline","/** 
 * @see <a href=https://docs.mongodb.com/v3.6/reference/operator/update/addToSet/#up._S_addToSet>MongoDB operator array update $addToSet</a>
 */
@Test public void shouldTransformOperationAddToSet() throws InterruptedException {
  SourceRecord updateRecord=executeSimpleUpdateOperation({'$addToSet': {dataArrayOfStr: 'b'}});
  final SourceRecord transformedUpdate=transformation.apply(updateRecord);
  final Struct transformedUpdateValue=(Struct)transformedUpdate.value();
  final Schema valueSchema=transformedUpdate.valueSchema();
  VerifyRecord.assertConnectSchemasAreEqual(id,valueSchema.field(id).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  VerifyRecord.assertConnectSchemasAreEqual(dataArrayOfStr,valueSchema.field(dataArrayOfStr).schema(),SchemaBuilder.array(Schema.OPTIONAL_STRING_SCHEMA).optional().build());
  assertThat(transformedUpdateValue.get(id)).isEqualTo(1);
  assertThat(transformedUpdateValue.get(dataArrayOfStr)).isEqualTo(Arrays.asList(a,c,e,b));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\UpdateOperators\ExtractNewDocumentStateArrayOperatorTestIT.java",31
1783,"'-tryline","/** 
 * @see <a href=https://docs.mongodb.com/v3.6/reference/operator/update/pop/#up._S_pop>MongoDB operator array update $pop</a>
 */
@Test public void shouldTransformOperationPop() throws InterruptedException {
  SourceRecord updateRecord=executeSimpleUpdateOperation({'$pop': {dataArrayOfStr: -1}});
  final SourceRecord transformedUpdate=transformation.apply(updateRecord);
  final Struct transformedUpdateValue=(Struct)transformedUpdate.value();
  final Schema valueSchema=transformedUpdate.valueSchema();
  VerifyRecord.assertConnectSchemasAreEqual(id,valueSchema.field(id).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  VerifyRecord.assertConnectSchemasAreEqual(dataArrayOfStr,valueSchema.field(dataArrayOfStr).schema(),SchemaBuilder.array(Schema.OPTIONAL_STRING_SCHEMA).optional().build());
  assertThat(transformedUpdateValue.get(id)).isEqualTo(1);
  assertThat(transformedUpdateValue.get(dataArrayOfStr)).isEqualTo(Arrays.asList(c,e));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\UpdateOperators\ExtractNewDocumentStateArrayOperatorTestIT.java",50
1784,"'-tryline","/** 
 * @see <a href=https://docs.mongodb.com/v3.6/reference/operator/update/pull/#pull>MongoDB operator array update $pull</a>
 */
@Test public void shouldTransformOperationPull() throws InterruptedException {
  SourceRecord updateRecord=executeSimpleUpdateOperation({'$pull': {dataArrayOfStr: {$in: ['c']}}});
  final SourceRecord transformedUpdate=transformation.apply(updateRecord);
  final Struct transformedUpdateValue=(Struct)transformedUpdate.value();
  final Schema valueSchema=transformedUpdate.valueSchema();
  VerifyRecord.assertConnectSchemasAreEqual(id,valueSchema.field(id).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  VerifyRecord.assertConnectSchemasAreEqual(dataArrayOfStr,valueSchema.field(dataArrayOfStr).schema(),SchemaBuilder.array(Schema.OPTIONAL_STRING_SCHEMA).optional().build());
  assertThat(transformedUpdateValue.get(id)).isEqualTo(1);
  assertThat(transformedUpdateValue.get(dataArrayOfStr)).isEqualTo(Arrays.asList(a,e));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\UpdateOperators\ExtractNewDocumentStateArrayOperatorTestIT.java",69
1785,"'-tryline","/** 
 * @see <a href=https://docs.mongodb.com/v3.6/reference/operator/update/pullAll/#up._S_pullAll>MongoDB operator array update $pullAll</a>
 */
@Test public void shouldTransformOperationPullAll() throws InterruptedException {
  SourceRecord updateRecord=executeSimpleUpdateOperation({'$pullAll': {dataArrayOfStr: ['c']}});
  final SourceRecord transformedUpdate=transformation.apply(updateRecord);
  final Struct transformedUpdateValue=(Struct)transformedUpdate.value();
  final Schema valueSchema=transformedUpdate.valueSchema();
  VerifyRecord.assertConnectSchemasAreEqual(id,valueSchema.field(id).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  VerifyRecord.assertConnectSchemasAreEqual(dataArrayOfStr,valueSchema.field(dataArrayOfStr).schema(),SchemaBuilder.array(Schema.OPTIONAL_STRING_SCHEMA).optional().build());
  assertThat(transformedUpdateValue.get(id)).isEqualTo(1);
  assertThat(transformedUpdateValue.get(dataArrayOfStr)).isEqualTo(Arrays.asList(a,e));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\UpdateOperators\ExtractNewDocumentStateArrayOperatorTestIT.java",88
1786,"'-tryline","/** 
 * @see <a href=https://docs.mongodb.com/v3.6/reference/operator/update/push/#push>MongoDB operator array update $push</a>
 */
@Test public void shouldTransformOperationPush() throws InterruptedException {
  SourceRecord updateRecord=executeSimpleUpdateOperation({'$push': {dataArrayOfStr: 'g'}});
  final SourceRecord transformedUpdate=transformation.apply(updateRecord);
  final Struct transformedUpdateValue=(Struct)transformedUpdate.value();
  final Schema valueSchema=transformedUpdate.valueSchema();
  VerifyRecord.assertConnectSchemasAreEqual(id,valueSchema.field(id).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  VerifyRecord.assertConnectSchemasAreEqual(dataArrayOfStr.3,valueSchema.field(dataArrayOfStr.3).schema(),Schema.OPTIONAL_STRING_SCHEMA);
  assertThat(transformedUpdateValue.get(id)).isEqualTo(1);
  assertThat(transformedUpdateValue.get(dataArrayOfStr.3)).isEqualTo(g);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\UpdateOperators\ExtractNewDocumentStateArrayOperatorTestIT.java",107
1787,"'-tryline","/** 
 * @see <a href=https://docs.mongodb.com/v3.6/reference/operator/update/bit/#bitwise-and>MongoDB operator update $bit AND</a>
 */
@Test public void shouldTransformOperationBitAnd() throws InterruptedException {
  SourceRecord updateRecord=executeSimpleUpdateOperation({'$bit': {dataInt: {and: NumberInt(1010)}}});
  final SourceRecord transformedUpdate=transformation.apply(updateRecord);
  final Struct transformedUpdateValue=(Struct)transformedUpdate.value();
  final Schema valueSchema=transformedUpdate.valueSchema();
  VerifyRecord.assertConnectSchemasAreEqual(id,valueSchema.field(id).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  VerifyRecord.assertConnectSchemasAreEqual(dataInt,valueSchema.field(dataInt).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(transformedUpdateValue.get(id)).isEqualTo(1);
  assertThat(transformedUpdateValue.get(dataInt)).isEqualTo(114);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\UpdateOperators\ExtractNewDocumentStateUpdateBitOperatorTestIT.java",28
1788,"'-tryline","/** 
 * @see <a href=https://docs.mongodb.com/v3.6/reference/operator/update/bit/#bitwise-or>MongoDB operator update $bit OR</a>
 */
@Test public void shouldTransformOperationBitOr() throws InterruptedException {
  SourceRecord updateRecord=executeSimpleUpdateOperation({'$bit': {dataInt: {or: NumberInt(1001)}}});
  final SourceRecord transformedUpdate=transformation.apply(updateRecord);
  final Struct transformedUpdateValue=(Struct)transformedUpdate.value();
  final Schema valueSchema=transformedUpdate.valueSchema();
  VerifyRecord.assertConnectSchemasAreEqual(id,valueSchema.field(id).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  VerifyRecord.assertConnectSchemasAreEqual(dataInt,valueSchema.field(dataInt).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(transformedUpdateValue.get(id)).isEqualTo(1);
  assertThat(transformedUpdateValue.get(dataInt)).isEqualTo(1019);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\UpdateOperators\ExtractNewDocumentStateUpdateBitOperatorTestIT.java",46
1789,"'-tryline","/** 
 * @see <a href=https://docs.mongodb.com/v3.6/reference/operator/update/bit/#bitwise-xor>MongoDB operator update $bit XOR</a>
 */
@Test public void shouldTransformOperationBitXor() throws InterruptedException {
  SourceRecord updateRecord=executeSimpleUpdateOperation({'$bit': {dataInt: {xor: NumberInt(111)}}});
  final SourceRecord transformedUpdate=transformation.apply(updateRecord);
  final Struct transformedUpdateValue=(Struct)transformedUpdate.value();
  final Schema valueSchema=transformedUpdate.valueSchema();
  VerifyRecord.assertConnectSchemasAreEqual(id,valueSchema.field(id).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  VerifyRecord.assertConnectSchemasAreEqual(dataInt,valueSchema.field(dataInt).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(transformedUpdateValue.get(id)).isEqualTo(1);
  assertThat(transformedUpdateValue.get(dataInt)).isEqualTo(20);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\UpdateOperators\ExtractNewDocumentStateUpdateBitOperatorTestIT.java",64
1790,"'-tryline","/** 
 * @see <a href=https://docs.mongodb.com/v3.6/reference/operator/update/inc/#up._S_inc>MongoDB operator update $inc</a>
 */
@Test public void shouldTransformOperationInc() throws InterruptedException {
  SourceRecord updateRecord=executeSimpleUpdateOperation({'$inc': {'dataInt': 123, 'nested.dataInt': -23}});
  final SourceRecord transformedUpdate=transformation.apply(updateRecord);
  final Struct transformedUpdateValue=(Struct)transformedUpdate.value();
  final Schema valueSchema=transformedUpdate.valueSchema();
  VerifyRecord.assertConnectSchemasAreEqual(id,valueSchema.field(id).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  VerifyRecord.assertConnectSchemasAreEqual(dataInt,valueSchema.field(dataInt).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  VerifyRecord.assertConnectSchemasAreEqual(nested.dataInt,valueSchema.field(nested.dataInt).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(transformedUpdateValue.get(id)).isEqualTo(1);
  assertThat(transformedUpdateValue.get(dataInt)).isEqualTo(246);
  assertThat(transformedUpdateValue.get(nested.dataInt)).isEqualTo(100);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\UpdateOperators\ExtractNewDocumentStateUpdateFieldOperatorTestIT.java",35
1791,"'-tryline","/** 
 * @see <a href=https://docs.mongodb.com/v3.6/reference/operator/update/min/#up._S_min>MongoDB operator update $min</a>
 */
@Test public void shouldTransformOperationMin() throws InterruptedException {
  SourceRecord updateRecord=executeSimpleUpdateOperation({'$min': {'dataInt': 122, 'nested.dataInt': 124}});
  final SourceRecord transformedUpdate=transformation.apply(updateRecord);
  final Struct transformedUpdateValue=(Struct)transformedUpdate.value();
  final Schema valueSchema=transformedUpdate.valueSchema();
  VerifyRecord.assertConnectSchemasAreEqual(id,valueSchema.field(id).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  VerifyRecord.assertConnectSchemasAreEqual(dataInt,valueSchema.field(dataInt).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(valueSchema.field(nested.dataInt)).isNull();
  assertThat(transformedUpdateValue.get(id)).isEqualTo(1);
  assertThat(transformedUpdateValue.get(dataInt)).isEqualTo(122);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\UpdateOperators\ExtractNewDocumentStateUpdateFieldOperatorTestIT.java",55
1792,"'-tryline","/** 
 * @see <a href=https://docs.mongodb.com/v3.6/reference/operator/update/max/#up._S_max>MongoDB operator update $max</a>
 */
@Test public void shouldTransformOperationMax() throws InterruptedException {
  SourceRecord updateRecord=executeSimpleUpdateOperation({'$max': {'dataInt': 122, 'nested.dataInt': 124}});
  final SourceRecord transformedUpdate=transformation.apply(updateRecord);
  final Struct transformedUpdateValue=(Struct)transformedUpdate.value();
  final Schema valueSchema=transformedUpdate.valueSchema();
  VerifyRecord.assertConnectSchemasAreEqual(id,valueSchema.field(id).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  VerifyRecord.assertConnectSchemasAreEqual(nested.dataInt,valueSchema.field(nested.dataInt).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(valueSchema.field(dataInt)).isNull();
  assertThat(transformedUpdateValue.get(id)).isEqualTo(1);
  assertThat(transformedUpdateValue.get(nested.dataInt)).isEqualTo(124);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\UpdateOperators\ExtractNewDocumentStateUpdateFieldOperatorTestIT.java",75
1793,"'-tryline","/** 
 * @see <a href=https://docs.mongodb.com/v3.6/reference/operator/update/mul/#up._S_mul>MongoDB operator update $mul</a>
 */
@Test public void shouldTransformOperationMul() throws InterruptedException {
  SourceRecord updateRecord=executeSimpleUpdateOperation({'$mul': {'dataInt': 3, 'nested.dataInt': 2, 'nonExistentField': 123}});
  final SourceRecord transformedUpdate=transformation.apply(updateRecord);
  final Struct transformedUpdateValue=(Struct)transformedUpdate.value();
  final Schema valueSchema=transformedUpdate.valueSchema();
  VerifyRecord.assertConnectSchemasAreEqual(id,valueSchema.field(id).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  VerifyRecord.assertConnectSchemasAreEqual(dataInt,valueSchema.field(dataInt).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  VerifyRecord.assertConnectSchemasAreEqual(nested.dataInt,valueSchema.field(nested.dataInt).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  VerifyRecord.assertConnectSchemasAreEqual(nonExistentField,valueSchema.field(nested.dataInt).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(transformedUpdateValue.get(id)).isEqualTo(1);
  assertThat(transformedUpdateValue.get(dataInt)).isEqualTo(369);
  assertThat(transformedUpdateValue.get(nested.dataInt)).isEqualTo(246);
  assertThat(transformedUpdateValue.get(nonExistentField)).isEqualTo(0);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\UpdateOperators\ExtractNewDocumentStateUpdateFieldOperatorTestIT.java",95
1794,"'-tryline","/** 
 * @see <a href=https://docs.mongodb.com/v3.6/reference/operator/update/rename/#up._S_rename>MongoDB operator update $rename</a>
 */
@Test public void shouldTransformOperationRename() throws InterruptedException {
  SourceRecord updateRecord=executeSimpleUpdateOperation({'$rename': {'dataInt': 'dataIntNewName', 'nonExistentField': 'nonExistentFieldRenamed'}});
  final SourceRecord transformedUpdate=transformation.apply(updateRecord);
  final Struct transformedUpdateValue=(Struct)transformedUpdate.value();
  final Schema valueSchema=transformedUpdate.valueSchema();
  VerifyRecord.assertConnectSchemasAreEqual(id,valueSchema.field(id).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  VerifyRecord.assertConnectSchemasAreEqual(dataIntNewName,valueSchema.field(dataIntNewName).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(transformedUpdateValue.get(id)).isEqualTo(1);
  assertThat(transformedUpdateValue.get(dataIntNewName)).isEqualTo(123);
  VerifyRecord.assertConnectSchemasAreEqual(dataInt,valueSchema.field(dataInt).schema(),Schema.OPTIONAL_STRING_SCHEMA);
  assertThat(transformedUpdateValue.get(dataInt)).isEqualTo(null);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\UpdateOperators\ExtractNewDocumentStateUpdateFieldOperatorTestIT.java",117
1795,"'-tryline","/** 
 * @see <a href=https://docs.mongodb.com/v3.6/reference/operator/update/set/#up._S_set>MongoDB operator update $set</a>For more extensive tests for the $set operator please check: {@link io.debezium.connector.mongodb.transforms.ExtractNewDocumentStateTest}{@link io.debezium.connector.mongodb.transforms.ExtractNewDocumentStateTestIT}
 */
@Test public void shouldTransformOperationSet() throws InterruptedException {
  SourceRecord updateRecord=executeSimpleUpdateOperation({'$set': {'dataStr': 'Setting new value', 'newDataInt': 456}});
  final SourceRecord transformedUpdate=transformation.apply(updateRecord);
  final Struct transformedUpdateValue=(Struct)transformedUpdate.value();
  final Schema valueSchema=transformedUpdate.valueSchema();
  VerifyRecord.assertConnectSchemasAreEqual(id,valueSchema.field(id).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  VerifyRecord.assertConnectSchemasAreEqual(dataStr,valueSchema.field(dataStr).schema(),Schema.OPTIONAL_STRING_SCHEMA);
  VerifyRecord.assertConnectSchemasAreEqual(newDataInt,valueSchema.field(newDataInt).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(transformedUpdateValue.get(id)).isEqualTo(1);
  assertThat(transformedUpdateValue.get(dataStr)).isEqualTo(Setting new value);
  assertThat(transformedUpdateValue.get(newDataInt)).isEqualTo(456);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\UpdateOperators\ExtractNewDocumentStateUpdateFieldOperatorTestIT.java",139
1796,"'-tryline","/** 
 * @see <a href=https://docs.mongodb.com/v3.6/reference/operator/update/setOnInsert/#up._S_setOnInsert>MongoDB operator update $setOnInsert</a>
 */
@Test public void shouldTransformOperationSetOnInsert() throws InterruptedException {
  Bson setOnInsert=Document.parse({'$setOnInsert': {'onlySetIfInsertDataInt': 789}});
  UpdateOptions updateOptions=new UpdateOptions();
  updateOptions.upsert(true);
  Consumer<MongoClient> upsert=client -> client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).updateOne(Document.parse({'_id' : 2}),setOnInsert,updateOptions);
  primary().execute(update,upsert);
  SourceRecord upsertRecord=consumeRecordsByTopic(1).recordsForTopic(this.topicName()).get(0);
  final SourceRecord transformedUpsert=transformation.apply(upsertRecord);
  final Struct transformedUpsertValue=(Struct)transformedUpsert.value();
  final Schema upsertValueSchema=transformedUpsert.valueSchema();
  VerifyRecord.assertConnectSchemasAreEqual(id,upsertValueSchema.field(id).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  VerifyRecord.assertConnectSchemasAreEqual(onlySetIfInsertDataInt,upsertValueSchema.field(onlySetIfInsertDataInt).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(transformedUpsertValue.get(id)).isEqualTo(2);
  assertThat(transformedUpsertValue.get(onlySetIfInsertDataInt)).isEqualTo(789);
  Bson setOnInsertAndSet=Document.parse({'$setOnInsert': {'onlySetIfInsertDataInt': 123}, '$set': {'newField': 456}});
  Consumer<MongoClient> upsertAndUpdate=client -> client.getDatabase(DB_NAME).getCollection(this.getCollectionName()).updateOne(Document.parse({'_id' : 2}),setOnInsertAndSet,updateOptions);
  primary().execute(update,upsertAndUpdate);
  SourceRecord updateRecord=getUpdateRecord();
  final SourceRecord transformedUpdate=transformation.apply(updateRecord);
  final Struct transformedUpdateValue=(Struct)transformedUpdate.value();
  final Schema updateValueSchema=transformedUpdate.valueSchema();
  VerifyRecord.assertConnectSchemasAreEqual(id,updateValueSchema.field(id).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  VerifyRecord.assertConnectSchemasAreEqual(newField,updateValueSchema.field(newField).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  assertThat(transformedUpdateValue.get(id)).isEqualTo(2);
  assertThat(transformedUpdateValue.get(newField)).isEqualTo(456);
  assertThat(updateValueSchema.field(onlySetIfInsertDataInt)).isNull();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\UpdateOperators\ExtractNewDocumentStateUpdateFieldOperatorTestIT.java",162
1797,"'-tryline","/** 
 * @see <a href=https://docs.mongodb.com/v3.6/reference/operator/update/unset/#up._S_unset>MongoDB operator update $unset</a>For more details on how the Unset is implemented please refer to:
 * @see <a href=https://github.com/debezium/debezium/pull/669>DBZ-612 Implementation</a>
 */
@Test public void shouldTransformOperationUnset() throws InterruptedException {
  SourceRecord updateRecord=executeSimpleUpdateOperation({'$unset': {'dataStr': '', 'nonExistentField': ''}});
  final SourceRecord transformedUpdate=transformation.apply(updateRecord);
  final Struct transformedUpdateValue=(Struct)transformedUpdate.value();
  final Schema valueSchema=transformedUpdate.valueSchema();
  VerifyRecord.assertConnectSchemasAreEqual(id,valueSchema.field(id).schema(),Schema.OPTIONAL_INT32_SCHEMA);
  VerifyRecord.assertConnectSchemasAreEqual(dataStr,valueSchema.field(dataStr).schema(),Schema.OPTIONAL_STRING_SCHEMA);
  assertThat(transformedUpdateValue.get(id)).isEqualTo(1);
  assertThat(transformedUpdateValue.get(dataStr)).isEqualTo(null);
  assertThat(valueSchema.field(nonExistentField)).isNull();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mongodb\src\test\java\io\debezium\connector\mongodb\transforms\UpdateOperators\ExtractNewDocumentStateUpdateFieldOperatorTestIT.java",205
1798,"'-tryline","@Override public List<SourceRecord> poll() throws InterruptedException {
  failureException=this.failure.get();
  if (failureException != null) {
    throw failureException;
  }
  if (!running.get()) {
    cleanupResources();
    throw new InterruptedException(Reader was stopped while polling);
  }
  logger.trace(Polling for next batch of records);
  List<SourceRecord> batch=new ArrayList<>(maxBatchSize);
  final Timer timeout=Threads.timer(Clock.SYSTEM,Temporals.min(pollInterval,ConfigurationDefaults.RETURN_CONTROL_INTERVAL));
  while (running.get() && (records.drainTo(batch,maxBatchSize) == 0) && !success.get()) {
    metronome.pause();
    failureException=this.failure.get();
    if (failureException != null) {
      throw failureException;
    }
    if (timeout.expired()) {
      break;
    }
  }
  if (batch.isEmpty() && success.get() && records.isEmpty()) {
    this.running.set(false);
    cleanupResources();
    return null;
  }
  pollComplete(batch);
  logger.trace(Completed batch of {} records,batch.size());
  return batch;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\AbstractReader.java",262
1799,"'-tryline","/** 
 * Enqueue a record so that it can be obtained when this reader is  {@link #poll() polled}. This method will block if the queue is full.
 * @param record the record to be enqueued
 * @throws InterruptedException if interrupted while waiting for the queue to have room for this record
 */
protected void enqueueRecord(SourceRecord record) throws InterruptedException {
  if (record != null && running.get()) {
    if (acceptAndContinue.accepts(record)) {
      if (logger.isTraceEnabled()) {
        logger.trace(Enqueuing source record: {},record);
      }
      this.records.put(record);
    }
 else {
      logger.info(predicate returned false; completing reader {},this.name);
      completeSuccessfully();
    }
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\AbstractReader.java",335
1800,"'-tryline","/** 
 * Handle the supplied event with an  {@link QueryEventData} by possibly recording the DDL statements as changes in theMySQL schemas.
 * @param event the database change data event to be processed; may not be null
 * @throws InterruptedException if this thread is interrupted while recording the DDL statements
 */
protected void handleQueryEvent(Event event) throws InterruptedException {
  QueryEventData command=unwrapData(event);
  logger.debug(Received query command: {},event);
  String sql=command.getSql().trim();
  if (sql.equalsIgnoreCase(BEGIN)) {
    source.startNextTransaction();
    source.setBinlogThread(command.getThreadId());
    if (initialEventsToSkip != 0) {
      logger.debug(Restarting partially-processed transaction; change events will not be created for the first {} events plus {} more rows in the next event,initialEventsToSkip,startingRowNumber);
      skipEvent=true;
    }
    return;
  }
  if (sql.equalsIgnoreCase(COMMIT)) {
    handleTransactionCompletion(event);
    return;
  }
  String upperCasedStatementBegin=Strings.getBegin(sql,7).toUpperCase();
  if (upperCasedStatementBegin.startsWith(XA )) {
    return;
  }
  if (context.ddlFilter().test(sql)) {
    logger.debug(DDL '{}' was filtered out of processing,sql);
    return;
  }
  if (upperCasedStatementBegin.equals(INSERT ) || upperCasedStatementBegin.equals(UPDATE ) || upperCasedStatementBegin.equals(DELETE )) {
    if (eventDeserializationFailureHandlingMode == EventProcessingFailureHandlingMode.FAIL) {
      throw new ConnectException(Received DML ' + sql + ' for processing, binlog probably contains events generated with statement or mixed based replication format);
    }
 else     if (eventDeserializationFailureHandlingMode == EventProcessingFailureHandlingMode.WARN) {
      logger.warn(Warning only: Received DML ' + sql + ' for processing, binlog probably contains events generated with statement or mixed based replication format);
      return;
    }
 else {
      return;
    }
  }
  if (sql.equalsIgnoreCase(ROLLBACK)) {
    logger.warn(Rollback statements cannot be handled without binlog buffering, the connector will fail. Please check '{}' to see how to enable buffering,MySqlConnectorConfig.BUFFER_SIZE_FOR_BINLOG_READER.name());
  }
  context.dbSchema().applyDdl(context.source(),command.getDatabase(),command.getSql(),(dbName,tables,statements) -> {
    if (recordSchemaChangesInSourceRecords && recordMakers.schemaChanges(dbName,tables,statements,super::enqueueRecord) > 0) {
      logger.debug(Recorded DDL statements for database '{}': {},dbName,statements);
    }
  }
);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\BinlogReader.java",760
1801,"'-tryline","/** 
 * Generate source records for the supplied event with an  {@link WriteRowsEventData}.
 * @param event the database change data event to be processed; may not be null
 * @throws InterruptedException if this thread is interrupted while blocking
 */
protected void handleInsert(Event event) throws InterruptedException {
  if (skipEvent) {
    logger.debug(Skipping previously processed row event: {},event);
    return;
  }
  if (ignoreDmlEventByGtidSource) {
    logger.debug(Skipping DML event because this GTID source is filtered: {},event);
    return;
  }
  WriteRowsEventData write=unwrapData(event);
  long tableNumber=write.getTableId();
  BitSet includedColumns=write.getIncludedColumns();
  RecordsForTable recordMaker=recordMakers.forTable(tableNumber,includedColumns,super::enqueueRecord);
  if (recordMaker != null) {
    List<Serializable[]> rows=write.getRows();
    final Instant ts=context.getClock().currentTimeAsInstant();
    int count=0;
    int numRows=rows.size();
    if (startingRowNumber < numRows) {
      for (int row=startingRowNumber; row != numRows; ++row) {
        count+=recordMaker.create(rows.get(row),ts,row,numRows);
      }
      if (logger.isDebugEnabled()) {
        if (startingRowNumber != 0) {
          logger.debug(Recorded {} insert record(s) for last {} row(s) in event: {},count,numRows - startingRowNumber,event);
        }
 else {
          logger.debug(Recorded {} insert record(s) for event: {},count,event);
        }
      }
    }
 else {
      logger.debug(Skipping previously processed insert event: {},event);
    }
  }
 else {
    informAboutUnknownTableIfRequired(event,recordMakers.getTableIdFromTableNumber(tableNumber),insert row);
  }
  startingRowNumber=0;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\BinlogReader.java",921
1802,"'-tryline","/** 
 * Generate source records for the supplied event with an  {@link UpdateRowsEventData}.
 * @param event the database change data event to be processed; may not be null
 * @throws InterruptedException if this thread is interrupted while blocking
 */
protected void handleUpdate(Event event) throws InterruptedException {
  if (skipEvent) {
    logger.debug(Skipping previously processed row event: {},event);
    return;
  }
  if (ignoreDmlEventByGtidSource) {
    logger.debug(Skipping DML event because this GTID source is filtered: {},event);
    return;
  }
  UpdateRowsEventData update=unwrapData(event);
  long tableNumber=update.getTableId();
  BitSet includedColumns=update.getIncludedColumns();
  RecordsForTable recordMaker=recordMakers.forTable(tableNumber,includedColumns,super::enqueueRecord);
  if (recordMaker != null) {
    List<Entry<Serializable[],Serializable[]>> rows=update.getRows();
    final Instant ts=context.getClock().currentTimeAsInstant();
    int count=0;
    int numRows=rows.size();
    if (startingRowNumber < numRows) {
      for (int row=startingRowNumber; row != numRows; ++row) {
        Map.Entry<Serializable[],Serializable[]> changes=rows.get(row);
        Serializable[] before=changes.getKey();
        Serializable[] after=changes.getValue();
        count+=recordMaker.update(before,after,ts,row,numRows);
      }
      if (logger.isDebugEnabled()) {
        if (startingRowNumber != 0) {
          logger.debug(Recorded {} update record(s) for last {} row(s) in event: {},count,numRows - startingRowNumber,event);
        }
 else {
          logger.debug(Recorded {} update record(s) for event: {},count,event);
        }
      }
    }
 else {
      logger.debug(Skipping previously processed update event: {},event);
    }
  }
 else {
    informAboutUnknownTableIfRequired(event,recordMakers.getTableIdFromTableNumber(tableNumber),update row);
  }
  startingRowNumber=0;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\BinlogReader.java",971
1803,"'-tryline","/** 
 * Generate source records for the supplied event with an  {@link DeleteRowsEventData}.
 * @param event the database change data event to be processed; may not be null
 * @throws InterruptedException if this thread is interrupted while blocking
 */
protected void handleDelete(Event event) throws InterruptedException {
  if (skipEvent) {
    logger.debug(Skipping previously processed row event: {},event);
    return;
  }
  if (ignoreDmlEventByGtidSource) {
    logger.debug(Skipping DML event because this GTID source is filtered: {},event);
    return;
  }
  DeleteRowsEventData deleted=unwrapData(event);
  long tableNumber=deleted.getTableId();
  BitSet includedColumns=deleted.getIncludedColumns();
  RecordsForTable recordMaker=recordMakers.forTable(tableNumber,includedColumns,super::enqueueRecord);
  if (recordMaker != null) {
    List<Serializable[]> rows=deleted.getRows();
    final Instant ts=context.getClock().currentTimeAsInstant();
    int count=0;
    int numRows=rows.size();
    if (startingRowNumber < numRows) {
      for (int row=startingRowNumber; row != numRows; ++row) {
        count+=recordMaker.delete(rows.get(row),ts,row,numRows);
      }
      if (logger.isDebugEnabled()) {
        if (startingRowNumber != 0) {
          logger.debug(Recorded {} delete record(s) for last {} row(s) in event: {},count,numRows - startingRowNumber,event);
        }
 else {
          logger.debug(Recorded {} delete record(s) for event: {},count,event);
        }
      }
    }
 else {
      logger.debug(Skipping previously processed delete event: {},event);
    }
  }
 else {
    informAboutUnknownTableIfRequired(event,recordMakers.getTableIdFromTableNumber(tableNumber),delete row);
  }
  startingRowNumber=0;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\BinlogReader.java",1025
1804,"'-tryline","/** 
 * Handle a  {@link EventType#VIEW_CHANGE} event.
 * @param event the database change data event to be processed; may not be null
 * @throws InterruptedException if this thread is interrupted while blocking
 */
protected void viewChange(Event event) throws InterruptedException {
  logger.debug(View Change event: {},event);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\BinlogReader.java",1075
1805,"'-tryline","/** 
 * Handle a  {@link EventType#XA_PREPARE} event.
 * @param event the database change data event to be processed; may not be null
 * @throws InterruptedException if this thread is interrupted while blocking
 */
protected void prepareTransaction(Event event) throws InterruptedException {
  logger.debug(XA Prepare event: {},event);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\BinlogReader.java",1086
1806,"'-tryline","/** 
 * Does nothing until the connector task is shut down, but regularly returns control back to Connect in order for being paused if requested.
 */
@Override public List<SourceRecord> poll() throws InterruptedException {
  if (state.get() == State.STOPPED) {
    return null;
  }
  metronome.pause();
  state.compareAndSet(State.RUNNING,State.STOPPING);
  return null;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\BlockingReader.java",41
1807,"'-tryline","@Override public List<SourceRecord> poll() throws InterruptedException {
  if (running.get() || !completed.get()) {
    final Reader reader=currentReader.get();
    if (reader != null) {
      return reader.poll();
    }
  }
  return null;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\ChainedReader.java",139
1808,"'-tryline","@Override public List<SourceRecord> doPoll() throws InterruptedException {
  Reader currentReader=readers;
  if (currentReader == null) {
    return null;
  }
  PreviousContext prevLoggingContext=this.taskContext.configureLoggingContext(task);
  try {
    logger.trace(Polling for events);
    return currentReader.poll();
  }
  finally {
    prevLoggingContext.restore();
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\MySqlConnectorTask.java",435
1809,"'-tryline","@Override public List<SourceRecord> poll() throws InterruptedException {
  List<SourceRecord> allRecords=oldTablesReader.isRunning() ? oldTablesReader.poll() : null;
  List<SourceRecord> newTablesRecords=newTablesReader.poll();
  if (newTablesRecords != null) {
    if (allRecords == null) {
      allRecords=newTablesRecords;
    }
 else {
      allRecords.addAll(newTablesRecords);
    }
  }
 else {
    if (allRecords == null) {
      completeSuccessfully();
    }
  }
  return allRecords;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\ParallelSnapshotReader.java",148
1810,"'-tryline","/** 
 * Poll for the next batch of source records. This method returns  {@code null} only when all records generated bythis reader have been processed, following the natural or explicit  {@link #stop() stopping} of this reader.Note that this method may block if no additional records are available but the reader may produce more, thus callers should call this method continually until this method returns  {@code null}.
 * @return the list of source records that may or may not be empty; or {@code null} when there will be no more recordsbecause the reader has completely  {@link State#STOPPED}.
 * @throws InterruptedException if this thread is interrupted while waiting for more records
 * @throws ConnectException if there is an error while this reader is running
 */
public List<SourceRecord> poll() throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\Reader.java",110
1811,"'-tryline","@Override public List<SourceRecord> poll() throws InterruptedException {
  List<SourceRecord> innerReaderPoll=reconcilingReader.poll();
  if (innerReaderPoll == null) {
    completeSuccessfully();
  }
  return innerReaderPoll;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\ReconcilingBinlogReader.java",115
1812,"'-tryline","@Override public int read(SourceInfo source,Object[] row,int rowNumber,int numberOfRows,BitSet includedColumns,Instant ts,BlockingConsumer<SourceRecord> consumer) throws InterruptedException {
  Struct key=tableSchema.keyFromColumnData(row);
  Struct value=tableSchema.valueFromColumnData(row);
  if (value != null || key != null) {
    Schema keySchema=tableSchema.keySchema();
    Map<String,?> partition=source.partition();
    Map<String,Object> offset=source.offsetForRow(rowNumber,numberOfRows);
    source.tableEvent(id);
    Struct origin=source.struct();
    SourceRecord record=new SourceRecord(partition,getSourceRecordOffset(offset),topicName,partitionNum,keySchema,key,envelope.schema(),envelope.read(value,origin,ts));
    consumer.accept(record);
    return 1;
  }
  return 0;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\RecordMakers.java",224
1813,"'-tryline","@Override public int insert(SourceInfo source,Object[] row,int rowNumber,int numberOfRows,BitSet includedColumns,Instant ts,BlockingConsumer<SourceRecord> consumer) throws InterruptedException {
  validateColumnCount(tableSchema,row);
  Struct key=tableSchema.keyFromColumnData(row);
  Struct value=tableSchema.valueFromColumnData(row);
  if (value != null || key != null) {
    Schema keySchema=tableSchema.keySchema();
    Map<String,?> partition=source.partition();
    Map<String,Object> offset=source.offsetForRow(rowNumber,numberOfRows);
    source.tableEvent(id);
    Struct origin=source.struct();
    SourceRecord record=new SourceRecord(partition,getSourceRecordOffset(offset),topicName,partitionNum,keySchema,key,envelope.schema(),envelope.create(value,origin,ts));
    consumer.accept(record);
    return 1;
  }
  return 0;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\RecordMakers.java",244
1814,"'-tryline","@Override public int update(SourceInfo source,Object[] before,Object[] after,int rowNumber,int numberOfRows,BitSet includedColumns,Instant ts,BlockingConsumer<SourceRecord> consumer) throws InterruptedException {
  int count=0;
  validateColumnCount(tableSchema,after);
  Struct newkey=tableSchema.keyFromColumnData(after);
  Struct valueAfter=tableSchema.valueFromColumnData(after);
  if (valueAfter != null || newkey != null) {
    Object oldKey=tableSchema.keyFromColumnData(before);
    Struct valueBefore=tableSchema.valueFromColumnData(before);
    Schema keySchema=tableSchema.keySchema();
    Map<String,?> partition=source.partition();
    Map<String,Object> offset=source.offsetForRow(rowNumber,numberOfRows);
    source.tableEvent(id);
    Struct origin=source.struct();
    if (newkey != null && !Objects.equals(newkey,oldKey)) {
      ConnectHeaders headers=new ConnectHeaders();
      headers.add(RelationalChangeRecordEmitter.PK_UPDATE_NEWKEY_FIELD,newkey,keySchema);
      SourceRecord record=new SourceRecord(partition,getSourceRecordOffset(offset),topicName,partitionNum,keySchema,oldKey,envelope.schema(),envelope.delete(valueBefore,origin,ts),null,headers);
      consumer.accept(record);
      ++count;
      if (emitTombstoneOnDelete) {
        record=new SourceRecord(partition,getSourceRecordOffset(offset),topicName,partitionNum,keySchema,oldKey,null,null);
        consumer.accept(record);
        ++count;
      }
      headers=new ConnectHeaders();
      headers.add(RelationalChangeRecordEmitter.PK_UPDATE_OLDKEY_FIELD,oldKey,keySchema);
      record=new SourceRecord(partition,getSourceRecordOffset(offset),topicName,partitionNum,keySchema,newkey,envelope.schema(),envelope.create(valueAfter,origin,ts),null,headers);
      consumer.accept(record);
      ++count;
    }
 else {
      SourceRecord record=new SourceRecord(partition,getSourceRecordOffset(offset),topicName,partitionNum,keySchema,newkey,envelope.schema(),envelope.update(valueBefore,valueAfter,origin,ts));
      consumer.accept(record);
      ++count;
    }
  }
  return count;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\RecordMakers.java",265
1815,"'-tryline","@Override public int delete(SourceInfo source,Object[] row,int rowNumber,int numberOfRows,BitSet includedColumns,Instant ts,BlockingConsumer<SourceRecord> consumer) throws InterruptedException {
  int count=0;
  validateColumnCount(tableSchema,row);
  Struct key=tableSchema.keyFromColumnData(row);
  Struct value=tableSchema.valueFromColumnData(row);
  if (value != null || key != null) {
    Schema keySchema=tableSchema.keySchema();
    Map<String,?> partition=source.partition();
    Map<String,Object> offset=source.offsetForRow(rowNumber,numberOfRows);
    source.tableEvent(id);
    Struct origin=source.struct();
    SourceRecord record=new SourceRecord(partition,getSourceRecordOffset(offset),topicName,partitionNum,keySchema,key,envelope.schema(),envelope.delete(value,origin,ts));
    consumer.accept(record);
    ++count;
    if (emitTombstoneOnDelete) {
      record=new SourceRecord(partition,getSourceRecordOffset(offset),topicName,partitionNum,keySchema,key,null,null);
      consumer.accept(record);
      ++count;
    }
  }
  return count;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\RecordMakers.java",322
1816,"'-tryline","int read(SourceInfo source,Object[] row,int rowNumber,int numberOfRows,BitSet includedColumns,Instant ts,BlockingConsumer<SourceRecord> consumer) throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\RecordMakers.java",395
1817,"'-tryline","int insert(SourceInfo source,Object[] row,int rowNumber,int numberOfRows,BitSet includedColumns,Instant ts,BlockingConsumer<SourceRecord> consumer) throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\RecordMakers.java",399
1818,"'-tryline","int update(SourceInfo source,Object[] before,Object[] after,int rowNumber,int numberOfRows,BitSet includedColumns,Instant ts,BlockingConsumer<SourceRecord> consumer) throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\RecordMakers.java",403
1819,"'-tryline","int delete(SourceInfo source,Object[] row,int rowNumber,int numberOfRows,BitSet includedColumns,Instant ts,BlockingConsumer<SourceRecord> consumer) throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\RecordMakers.java",407
1820,"'-tryline","/** 
 * Produce a  {@link io.debezium.data.Envelope.Operation#READ read} record for the row.
 * @param row the values of the row, in the same order as the columns in the {@link Table} definition in the{@link MySqlSchema}.
 * @param ts the timestamp for this row
 * @return the number of records produced; will be 0 or more
 * @throws InterruptedException if this thread is interrupted while waiting to give a source record to the consumer
 */
public int read(Object[] row,Instant ts) throws InterruptedException {
  return read(row,ts,0,1);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\RecordMakers.java",427
1821,"'-tryline","/** 
 * Produce a  {@link io.debezium.data.Envelope.Operation#READ read} record for the row.
 * @param row the values of the row, in the same order as the columns in the {@link Table} definition in the{@link MySqlSchema}.
 * @param ts the timestamp for this row
 * @param rowNumber the number of this row; must be 0 or more
 * @param numberOfRows the total number of rows to be read; must be 1 or more
 * @return the number of records produced; will be 0 or more
 * @throws InterruptedException if this thread is interrupted while waiting to give a source record to the consumer
 */
public int read(Object[] row,Instant ts,int rowNumber,int numberOfRows) throws InterruptedException {
  return converter.read(source,row,rowNumber,numberOfRows,includedColumns,ts,consumer);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\RecordMakers.java",440
1822,"'-tryline","/** 
 * Produce a  {@link io.debezium.data.Envelope.Operation#CREATE create} record for the row.
 * @param row the values of the row, in the same order as the columns in the {@link Table} definition in the{@link MySqlSchema}.
 * @param ts the timestamp for this row
 * @return the number of records produced; will be 0 or more
 * @throws InterruptedException if this thread is interrupted while waiting to give a source record to the consumer
 */
public int create(Object[] row,Instant ts) throws InterruptedException {
  return create(row,ts,0,1);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\RecordMakers.java",455
1823,"'-tryline","/** 
 * Produce a  {@link io.debezium.data.Envelope.Operation#CREATE create} record for the row.
 * @param row the values of the row, in the same order as the columns in the {@link Table} definition in the{@link MySqlSchema}.
 * @param ts the timestamp for this row
 * @param rowNumber the number of this row; must be 0 or more
 * @param numberOfRows the total number of rows to be read; must be 1 or more
 * @return the number of records produced; will be 0 or more
 * @throws InterruptedException if this thread is interrupted while waiting to give a source record to the consumer
 */
public int create(Object[] row,Instant ts,int rowNumber,int numberOfRows) throws InterruptedException {
  return converter.insert(source,row,rowNumber,numberOfRows,includedColumns,ts,consumer);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\RecordMakers.java",468
1824,"'-tryline","/** 
 * Produce an  {@link io.debezium.data.Envelope.Operation#UPDATE update} record for the row.
 * @param before the values of the row <i>before</i> the update, in the same order as the columns in the {@link Table}definition in the  {@link MySqlSchema}
 * @param after the values of the row <i>after</i> the update, in the same order as the columns in the {@link Table}definition in the  {@link MySqlSchema}
 * @param ts the timestamp for this row
 * @return the number of records produced; will be 0 or more
 * @throws InterruptedException if this thread is interrupted while waiting to give a source record to the consumer
 */
public int update(Object[] before,Object[] after,Instant ts) throws InterruptedException {
  return update(before,after,ts,0,1);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\RecordMakers.java",483
1825,"'-tryline","/** 
 * Produce an  {@link io.debezium.data.Envelope.Operation#UPDATE update} record for the row.
 * @param before the values of the row <i>before</i> the update, in the same order as the columns in the {@link Table}definition in the  {@link MySqlSchema}
 * @param after the values of the row <i>after</i> the update, in the same order as the columns in the {@link Table}definition in the  {@link MySqlSchema}
 * @param ts the timestamp for this row
 * @param rowNumber the number of this row; must be 0 or more
 * @param numberOfRows the total number of rows to be read; must be 1 or more
 * @return the number of records produced; will be 0 or more
 * @throws InterruptedException if this thread is interrupted while waiting to give a source record to the consumer
 */
public int update(Object[] before,Object[] after,Instant ts,int rowNumber,int numberOfRows) throws InterruptedException {
  return converter.update(source,before,after,rowNumber,numberOfRows,includedColumns,ts,consumer);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\RecordMakers.java",498
1826,"'-tryline","/** 
 * Produce a  {@link io.debezium.data.Envelope.Operation#DELETE delete} record for the row.
 * @param row the values of the row, in the same order as the columns in the {@link Table} definition in the{@link MySqlSchema}.
 * @param ts the timestamp for this row
 * @return the number of records produced; will be 0 or more
 * @throws InterruptedException if this thread is interrupted while waiting to give a source record to the consumer
 */
public int delete(Object[] row,Instant ts) throws InterruptedException {
  return delete(row,ts,0,1);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\RecordMakers.java",515
1827,"'-tryline","/** 
 * Produce a  {@link io.debezium.data.Envelope.Operation#DELETE delete} record for the row.
 * @param row the values of the row, in the same order as the columns in the {@link Table} definition in the{@link MySqlSchema}.
 * @param ts the timestamp for this row
 * @param rowNumber the number of this row; must be 0 or more
 * @param numberOfRows the total number of rows to be read; must be 1 or more
 * @return the number of records produced; will be 0 or more
 * @throws InterruptedException if this thread is interrupted while waiting to give a source record to the consumer
 */
public int delete(Object[] row,Instant ts,int rowNumber,int numberOfRows) throws InterruptedException {
  return converter.delete(source,row,rowNumber,numberOfRows,includedColumns,ts,consumer);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\RecordMakers.java",528
1828,"'-tryline","protected void recordRowAsRead(RecordsForTable recordMaker,Object[] row,Instant ts) throws InterruptedException {
  recordMaker.read(row,ts);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\SnapshotReader.java",1069
1829,"'-tryline","protected void recordRowAsInsert(RecordsForTable recordMaker,Object[] row,Instant ts) throws InterruptedException {
  recordMaker.create(row,ts);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\SnapshotReader.java",1073
1830,"'-tryline","void recordRow(RecordsForTable recordMaker,Object[] row,Instant ts) throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\SnapshotReader.java",1078
1831,"'-tryline","@Override public List<SourceRecord> poll() throws InterruptedException {
  super.poll();
  if (timer != null && timer.expired()) {
    stop();
  }
  return null;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\legacy\TimedBlockingReader.java",46
1832,"'-tryline","private void modifyAndFlushLastRecord(Function<SourceRecord,SourceRecord> modify) throws InterruptedException {
  queue.flushBuffer(dataChange -> new DataChangeEvent(modify.apply(dataChange.getRecord())));
  queue.disableBuffering();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlChangeEventSourceFactory.java",59
1833,"'-tryline","@Override public List<SourceRecord> doPoll() throws InterruptedException {
  final List<DataChangeEvent> records=queue.poll();
  final List<SourceRecord> sourceRecords=records.stream().map(DataChangeEvent::getRecord).collect(Collectors.toList());
  return sourceRecords;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlConnectorTask.java",158
1834,"'-tryline","@Override protected void lockTablesForSchemaSnapshot(ChangeEventSourceContext sourceContext,RelationalSnapshotContext snapshotContext) throws SQLException, InterruptedException {
  connection.connection().setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);
  connection.executeWithoutCommitting(SET SESSION lock_wait_timeout= + connectorConfig.snapshotLockTimeout().getSeconds());
  try {
    connection.executeWithoutCommitting(SET SESSION innodb_lock_wait_timeout= + connectorConfig.snapshotLockTimeout().getSeconds());
  }
 catch (  SQLException e) {
    LOGGER.warn(Unable to set innodb_lock_wait_timeout,e);
  }
  if (connectorConfig.getSnapshotLockingMode().usesLocking() && connectorConfig.useGlobalLock()) {
    try {
      globalLock();
      metrics.globalLockAcquired();
    }
 catch (    SQLException e) {
      LOGGER.info(Unable to flush and acquire global read lock, will use table read locks after reading table names);
      assert !isGloballyLocked();
    }
    connection.executeWithoutCommitting(SET TRANSACTION ISOLATION LEVEL REPEATABLE READ);
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlSnapshotChangeEventSource.java",164
1835,"'-tryline","@Override protected void postSnapshot() throws InterruptedException {
  lastEventProcessor.accept(record -> {
    record.sourceOffset().remove(SourceInfo.SNAPSHOT_KEY);
    ((Struct)record.value()).getStruct(Envelope.FieldName.SOURCE).put(SourceInfo.SNAPSHOT_KEY,SnapshotRecord.LAST.toString().toLowerCase());
    return record;
  }
);
  super.postSnapshot();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlSnapshotChangeEventSource.java",653
1836,"'-tryline","void emit(TableId tableId,T data) throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlStreamingChangeEventSource.java",180
1837,"'-tryline","/** 
 * Handle the supplied event with an  {@link QueryEventData} by possibly recording the DDL statements as changes in theMySQL schemas.
 * @param event the database change data event to be processed; may not be null
 * @throws InterruptedException if this thread is interrupted while recording the DDL statements
 */
protected void handleQueryEvent(Event event) throws InterruptedException {
  QueryEventData command=unwrapData(event);
  LOGGER.debug(Received query command: {},event);
  String sql=command.getSql().trim();
  if (sql.equalsIgnoreCase(BEGIN)) {
    offsetContext.startNextTransaction();
    eventDispatcher.dispatchTransactionStartedEvent(offsetContext.getTransactionId(),offsetContext);
    offsetContext.setBinlogThread(command.getThreadId());
    if (initialEventsToSkip != 0) {
      LOGGER.debug(Restarting partially-processed transaction; change events will not be created for the first {} events plus {} more rows in the next event,initialEventsToSkip,startingRowNumber);
      skipEvent=true;
    }
    return;
  }
  if (sql.equalsIgnoreCase(COMMIT)) {
    handleTransactionCompletion(event);
    return;
  }
  String upperCasedStatementBegin=Strings.getBegin(sql,7).toUpperCase();
  if (upperCasedStatementBegin.startsWith(XA )) {
    return;
  }
  if (connectorConfig.getDdlFilter().test(sql)) {
    LOGGER.debug(DDL '{}' was filtered out of processing,sql);
    return;
  }
  if (upperCasedStatementBegin.equals(INSERT ) || upperCasedStatementBegin.equals(UPDATE ) || upperCasedStatementBegin.equals(DELETE )) {
    if (eventDeserializationFailureHandlingMode == EventProcessingFailureHandlingMode.FAIL) {
      throw new DebeziumException(Received DML ' + sql + ' for processing, binlog probably contains events generated with statement or mixed based replication format);
    }
 else     if (eventDeserializationFailureHandlingMode == EventProcessingFailureHandlingMode.WARN) {
      LOGGER.warn(Warning only: Received DML ' + sql + ' for processing, binlog probably contains events generated with statement or mixed based replication format);
      return;
    }
 else {
      return;
    }
  }
  if (sql.equalsIgnoreCase(ROLLBACK)) {
    LOGGER.warn(Rollback statements cannot be handled without binlog buffering, the connector will fail. Please check '{}' to see how to enable buffering,MySqlConnectorConfig.BUFFER_SIZE_FOR_BINLOG_READER.name());
  }
  final List<SchemaChangeEvent> schemaChangeEvents=taskContext.getSchema().parseStreamingDdl(sql,command.getDatabase(),offsetContext,clock.currentTimeAsInstant());
  try {
    for (    SchemaChangeEvent schemaChangeEvent : schemaChangeEvents) {
      final TableId tableId=schemaChangeEvent.getTables().isEmpty() ? null : schemaChangeEvent.getTables().iterator().next().id();
      eventDispatcher.dispatchSchemaChangeEvent(tableId,(receiver) -> {
        try {
          receiver.schemaChangeEvent(schemaChangeEvent);
        }
 catch (        Exception e) {
          throw new DebeziumException(e);
        }
      }
);
    }
  }
 catch (  InterruptedException e) {
    LOGGER.info(Processing interrupted);
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlStreamingChangeEventSource.java",515
1838,"'-tryline","private void handleTransactionCompletion(Event event) throws InterruptedException {
  eventDispatcher.dispatchTransactionCommittedEvent(offsetContext);
  offsetContext.commitTransaction();
  offsetContext.setBinlogThread(-1L);
  skipEvent=false;
  ignoreDmlEventByGtidSource=false;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlStreamingChangeEventSource.java",594
1839,"'-tryline","/** 
 * Generate source records for the supplied event with an  {@link WriteRowsEventData}.
 * @param event the database change data event to be processed; may not be null
 * @throws InterruptedException if this thread is interrupted while blocking
 */
protected void handleInsert(Event event) throws InterruptedException {
  handleChange(event,insert,WriteRowsEventData.class,x -> taskContext.getSchema().getTableId(x.getTableId()),WriteRowsEventData::getRows,(tableId,row) -> eventDispatcher.dispatchDataChangeEvent(tableId,new MySqlChangeRecordEmitter(offsetContext,clock,Operation.CREATE,null,row)));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlStreamingChangeEventSource.java",673
1840,"'-tryline","/** 
 * Generate source records for the supplied event with an  {@link UpdateRowsEventData}.
 * @param event the database change data event to be processed; may not be null
 * @throws InterruptedException if this thread is interrupted while blocking
 */
protected void handleUpdate(Event event) throws InterruptedException {
  handleChange(event,update,UpdateRowsEventData.class,x -> taskContext.getSchema().getTableId(x.getTableId()),UpdateRowsEventData::getRows,(tableId,row) -> eventDispatcher.dispatchDataChangeEvent(tableId,new MySqlChangeRecordEmitter(offsetContext,clock,Operation.UPDATE,row.getKey(),row.getValue())));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlStreamingChangeEventSource.java",684
1841,"'-tryline","/** 
 * Generate source records for the supplied event with an  {@link DeleteRowsEventData}.
 * @param event the database change data event to be processed; may not be null
 * @throws InterruptedException if this thread is interrupted while blocking
 */
protected void handleDelete(Event event) throws InterruptedException {
  handleChange(event,delete,DeleteRowsEventData.class,x -> taskContext.getSchema().getTableId(x.getTableId()),DeleteRowsEventData::getRows,(tableId,row) -> eventDispatcher.dispatchDataChangeEvent(tableId,new MySqlChangeRecordEmitter(offsetContext,clock,Operation.DELETE,row,null)));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlStreamingChangeEventSource.java",696
1842,"'-tryline","private <T extends EventData,U>void handleChange(Event event,String changeType,Class<T> eventDataClass,TableIdProvider<T> tableIdProvider,RowsProvider<T,U> rowsProvider,BinlogChangeEmitter<U> changeEmitter) throws InterruptedException {
  if (skipEvent) {
    LOGGER.info(Skipping previously processed row event: {},event);
    return;
  }
  if (ignoreDmlEventByGtidSource) {
    LOGGER.debug(Skipping DML event because this GTID source is filtered: {},event);
    return;
  }
  final T data=unwrapData(event);
  final TableId tableId=tableIdProvider.getTableId(data);
  final List<U> rows=rowsProvider.getRows(data);
  if (tableId != null && taskContext.getSchema().schemaFor(tableId) != null) {
    int count=0;
    int numRows=rows.size();
    if (startingRowNumber < numRows) {
      for (int row=startingRowNumber; row != numRows; ++row) {
        offsetContext.setRowNumber(row,numRows);
        offsetContext.event(tableId,eventTimestamp);
        changeEmitter.emit(tableId,rows.get(row));
        count++;
      }
      if (LOGGER.isDebugEnabled()) {
        if (startingRowNumber != 0) {
          LOGGER.debug(Emitted {} {} record(s) for last {} row(s) in event: {},count,changeType,numRows - startingRowNumber,event);
        }
 else {
          LOGGER.debug(Emitted {} {} record(s) for event: {},count,changeType,event);
        }
      }
      offsetContext.changeEventCompleted();
    }
 else {
      LOGGER.debug(Skipping previously processed {} event: {},changeType,event);
    }
  }
 else {
    informAboutUnknownTableIfRequired(event,tableId,changeType +  row);
  }
  startingRowNumber=0;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlStreamingChangeEventSource.java",707
1843,"'-tryline","/** 
 * Handle a  {@link EventType#VIEW_CHANGE} event.
 * @param event the database change data event to be processed; may not be null
 * @throws InterruptedException if this thread is interrupted while blocking
 */
protected void viewChange(Event event) throws InterruptedException {
  LOGGER.debug(View Change event: {},event);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlStreamingChangeEventSource.java",755
1844,"'-tryline","/** 
 * Handle a  {@link EventType#XA_PREPARE} event.
 * @param event the database change data event to be processed; may not be null
 * @throws InterruptedException if this thread is interrupted while blocking
 */
protected void prepareTransaction(Event event) throws InterruptedException {
  LOGGER.debug(XA Prepare event: {},event);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlStreamingChangeEventSource.java",766
1845,"'-tryline","@Override public void execute(ChangeEventSourceContext context) throws InterruptedException {
  if (!connectorConfig.getSnapshotMode().shouldStream()) {
    LOGGER.info(Streaming is disabled for snapshot mode {},connectorConfig.getSnapshotMode());
    return;
  }
  taskContext.getSchema().assureNonEmptySchema();
  final Set<Operation> skippedOperations=connectorConfig.getSkippedOps();
  eventHandlers.put(EventType.STOP,this::handleServerStop);
  eventHandlers.put(EventType.HEARTBEAT,this::handleServerHeartbeat);
  eventHandlers.put(EventType.INCIDENT,this::handleServerIncident);
  eventHandlers.put(EventType.ROTATE,this::handleRotateLogsEvent);
  eventHandlers.put(EventType.TABLE_MAP,this::handleUpdateTableMetadata);
  eventHandlers.put(EventType.QUERY,this::handleQueryEvent);
  if (!skippedOperations.contains(Operation.CREATE)) {
    eventHandlers.put(EventType.WRITE_ROWS,this::handleInsert);
    eventHandlers.put(EventType.EXT_WRITE_ROWS,this::handleInsert);
  }
  if (!skippedOperations.contains(Operation.UPDATE)) {
    eventHandlers.put(EventType.UPDATE_ROWS,this::handleUpdate);
    eventHandlers.put(EventType.EXT_UPDATE_ROWS,this::handleUpdate);
  }
  if (!skippedOperations.contains(Operation.DELETE)) {
    eventHandlers.put(EventType.DELETE_ROWS,this::handleDelete);
    eventHandlers.put(EventType.EXT_DELETE_ROWS,this::handleDelete);
  }
  eventHandlers.put(EventType.VIEW_CHANGE,this::viewChange);
  eventHandlers.put(EventType.XA_PREPARE,this::prepareTransaction);
  eventHandlers.put(EventType.XID,this::handleTransactionCompletion);
  if (connectorConfig.includeSqlQuery()) {
    eventHandlers.put(EventType.ROWS_QUERY,this::handleRowsQuery);
  }
  client.registerEventListener(connectorConfig.bufferSizeForStreamingChangeEventSource() == 0 ? this::handleEvent : (new EventBuffer(connectorConfig.bufferSizeForStreamingChangeEventSource(),this,context))::add);
  client.registerLifecycleListener(new ReaderThreadLifecycleListener());
  client.registerEventListener(this::onEvent);
  if (LOGGER.isDebugEnabled()) {
    client.registerEventListener(this::logEvent);
  }
  final boolean isGtidModeEnabled=connection.isGtidModeEnabled();
  metrics.setIsGtidModeEnabled(isGtidModeEnabled);
  String availableServerGtidStr=connection.knownGtidSet();
  if (isGtidModeEnabled) {
    eventHandlers.put(EventType.GTID,this::handleGtidEvent);
    GtidSet availableServerGtidSet=new GtidSet(availableServerGtidStr);
    GtidSet purgedServerGtidSet=connection.purgedGtidSet();
    LOGGER.info(GTID set purged on server: {},purgedServerGtidSet);
    GtidSet filteredGtidSet=filterGtidSet(availableServerGtidSet,purgedServerGtidSet);
    if (filteredGtidSet != null) {
      LOGGER.info(Registering binlog reader with GTID set: {},filteredGtidSet);
      String filteredGtidSetStr=filteredGtidSet.toString();
      client.setGtidSet(filteredGtidSetStr);
      offsetContext.setCompletedGtidSet(filteredGtidSetStr);
      gtidSet=new com.github.shyiko.mysql.binlog.GtidSet(filteredGtidSetStr);
    }
 else {
      client.setBinlogFilename(offsetContext.getSource().binlogFilename());
      client.setBinlogPosition(offsetContext.getSource().binlogPosition());
      gtidSet=new com.github.shyiko.mysql.binlog.GtidSet();
    }
  }
 else {
    client.setBinlogFilename(offsetContext.getSource().binlogFilename());
    client.setBinlogPosition(offsetContext.getSource().binlogPosition());
  }
  initialEventsToSkip=offsetContext.eventsToSkipUponRestart();
  LOGGER.info(Skip {} events on streaming start,initialEventsToSkip);
  startingRowNumber=offsetContext.rowsToSkipUponRestart();
  LOGGER.info(Skip {} rows on streaming start,startingRowNumber);
  skipEvent=false;
  try {
    if (context.isRunning()) {
      long timeout=connectorConfig.getConnectionTimeout().toMillis();
      long started=clock.currentTimeInMillis();
      try {
        LOGGER.debug(Attempting to establish binlog reader connection with timeout of {} ms,timeout);
        client.connect(timeout);
        if (client.isKeepAlive()) {
          LOGGER.info(Waiting for keepalive thread to start);
          final Metronome metronome=Metronome.parker(Duration.ofMillis(100),clock);
          int waitAttempts=50;
          boolean keepAliveThreadRunning=false;
          while (!keepAliveThreadRunning && waitAttempts-- > 0) {
            for (            Thread t : binaryLogClientThreads.values()) {
              if (t.getName().startsWith(KEEPALIVE_THREAD_NAME) && t.isAlive()) {
                LOGGER.info(Keepalive thread is running);
                keepAliveThreadRunning=true;
              }
            }
            metronome.pause();
          }
        }
      }
 catch (      TimeoutException e) {
        long duration=clock.currentTimeInMillis() - started;
        if (duration > (0.9 * timeout)) {
          double actualSeconds=TimeUnit.MILLISECONDS.toSeconds(duration);
          throw new DebeziumException(Timed out after  + actualSeconds +  seconds while waiting to connect to MySQL at + connectorConfig.hostname()+ :+ connectorConfig.port()+  with user '+ connectorConfig.username()+ ',e);
        }
      }
catch (      AuthenticationException e) {
        throw new DebeziumException(Failed to authenticate to the MySQL database at  + connectorConfig.hostname() + :+ connectorConfig.port()+  with user '+ connectorConfig.username()+ ',e);
      }
catch (      Throwable e) {
        throw new DebeziumException(Unable to connect to the MySQL database at  + connectorConfig.hostname() + :+ connectorConfig.port()+  with user '+ connectorConfig.username()+ ': + e.getMessage(),e);
      }
    }
    while (context.isRunning()) {
      Thread.sleep(100);
    }
  }
  finally {
    try {
      client.disconnect();
    }
 catch (    Exception e) {
      LOGGER.info(Exception while stopping binary log client,e);
    }
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\main\java\io\debezium\connector\mysql\MySqlStreamingChangeEventSource.java",793
1846,"'-tryline","@Test public void shouldCorrectlyManageRollback() throws SQLException, InterruptedException {
  String masterPort=System.getProperty(database.port,3306);
  String replicaPort=System.getProperty(database.replica.port,3306);
  boolean replicaIsMaster=masterPort.equals(replicaPort);
  if (!replicaIsMaster) {
    Thread.sleep(5000L);
  }
  config=Configuration.create().with(MySqlConnectorConfig.HOSTNAME,System.getProperty(database.replica.hostname,localhost)).with(MySqlConnectorConfig.PORT,System.getProperty(database.replica.port,3306)).with(MySqlConnectorConfig.USER,snapper).with(MySqlConnectorConfig.PASSWORD,snapperpass).with(MySqlConnectorConfig.SERVER_ID,18765).with(MySqlConnectorConfig.SERVER_NAME,DATABASE.getServerName()).with(MySqlConnectorConfig.SSL_MODE,SecureConnectionMode.DISABLED).with(MySqlConnectorConfig.POLL_INTERVAL_MS,10).with(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,DATABASE.getDatabaseName()).with(MySqlConnectorConfig.DATABASE_HISTORY,FileDatabaseHistory.class).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(MySqlConnectorConfig.BUFFER_SIZE_FOR_BINLOG_READER,10_000).with(FileDatabaseHistory.FILE_PATH,DB_HISTORY_PATH).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(5 + 9 + 9+ 4+ 11+ 1);
  if (replicaIsMaster) {
    try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
      try (JdbcConnection connection=db.connect()){
        final Connection jdbc=connection.connection();
        connection.setAutoCommit(false);
        final Statement statement=jdbc.createStatement();
        statement.executeUpdate(CREATE TEMPORARY TABLE tmp_ids (a int));
        statement.executeUpdate(INSERT INTO tmp_ids VALUES(5));
        jdbc.commit();
        statement.executeUpdate(DROP TEMPORARY TABLE tmp_ids);
        statement.executeUpdate(UPDATE products SET weight=100.12 WHERE id=109);
        jdbc.rollback();
        connection.query(SELECT * FROM products,rs -> {
          if (Testing.Print.isEnabled()) {
            connection.print(rs);
          }
        }
);
        connection.setAutoCommit(true);
      }
     }
     Thread.sleep(5000);
    assertNoRecordsToConsume();
    assertEngineIsRunning();
    Testing.print(*** Done with rollback TX);
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\BinlogReaderBufferIT.java",65
1847,"'-tryline","@Test public void shouldProcessSavepoint() throws SQLException, InterruptedException {
  String masterPort=System.getProperty(database.port,3306);
  String replicaPort=System.getProperty(database.replica.port,3306);
  boolean replicaIsMaster=masterPort.equals(replicaPort);
  if (!replicaIsMaster) {
    Thread.sleep(5000L);
  }
  config=Configuration.create().with(MySqlConnectorConfig.HOSTNAME,System.getProperty(database.replica.hostname,localhost)).with(MySqlConnectorConfig.PORT,System.getProperty(database.replica.port,3306)).with(MySqlConnectorConfig.USER,snapper).with(MySqlConnectorConfig.PASSWORD,snapperpass).with(MySqlConnectorConfig.SERVER_ID,18765).with(MySqlConnectorConfig.SERVER_NAME,DATABASE.getServerName()).with(MySqlConnectorConfig.SSL_MODE,SecureConnectionMode.DISABLED).with(MySqlConnectorConfig.POLL_INTERVAL_MS,10).with(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,DATABASE.getDatabaseName()).with(MySqlConnectorConfig.DATABASE_HISTORY,FileDatabaseHistory.class).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(FileDatabaseHistory.FILE_PATH,DB_HISTORY_PATH).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(5 + 9 + 9+ 4+ 11+ 1);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      final Connection jdbc=connection.connection();
      connection.setAutoCommit(false);
      final Statement statement=jdbc.createStatement();
      statement.executeUpdate(INSERT INTO customers VALUES(default, 'first', 'first', 'first'));
      jdbc.setSavepoint();
      statement.executeUpdate(INSERT INTO customers VALUES(default, 'second', 'second', 'second'));
      jdbc.commit();
      connection.query(SELECT * FROM customers,rs -> {
        if (Testing.Print.isEnabled()) {
          connection.print(rs);
        }
      }
);
      connection.setAutoCommit(true);
    }
   }
   records=consumeRecordsByTopic(2);
  assertThat(records.topics().size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(customers))).hasSize(2);
  assertThat(records.allRecordsInOrder()).hasSize(2);
  Testing.print(*** Done with savepoint TX);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\BinlogReaderBufferIT.java",134
1848,"'-tryline","@Test public void shouldProcessLargeTransaction() throws SQLException, InterruptedException {
  String masterPort=System.getProperty(database.port,3306);
  String replicaPort=System.getProperty(database.replica.port,3306);
  boolean replicaIsMaster=masterPort.equals(replicaPort);
  if (!replicaIsMaster) {
    Thread.sleep(5000L);
  }
  config=Configuration.create().with(MySqlConnectorConfig.HOSTNAME,System.getProperty(database.replica.hostname,localhost)).with(MySqlConnectorConfig.PORT,System.getProperty(database.replica.port,3306)).with(MySqlConnectorConfig.USER,snapper).with(MySqlConnectorConfig.PASSWORD,snapperpass).with(MySqlConnectorConfig.SERVER_ID,18765).with(MySqlConnectorConfig.SERVER_NAME,DATABASE.getServerName()).with(MySqlConnectorConfig.SSL_MODE,SecureConnectionMode.DISABLED).with(MySqlConnectorConfig.POLL_INTERVAL_MS,10).with(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,DATABASE.getDatabaseName()).with(MySqlConnectorConfig.DATABASE_HISTORY,FileDatabaseHistory.class).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(MySqlConnectorConfig.BUFFER_SIZE_FOR_BINLOG_READER,9).with(FileDatabaseHistory.FILE_PATH,DB_HISTORY_PATH).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(5 + 9 + 9+ 4+ 11+ 1);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    final int numRecords=40;
    try (JdbcConnection connection=db.connect()){
      final Connection jdbc=connection.connection();
      connection.setAutoCommit(false);
      final Statement statement=jdbc.createStatement();
      for (int i=0; i < numRecords; i++) {
        statement.executeUpdate(String.format(INSERT INTO customers\n + VALUES (default,\%s\,\%s\,\%s\),i,i,i));
      }
      jdbc.commit();
      connection.query(SELECT * FROM customers,rs -> {
        if (Testing.Print.isEnabled()) {
          connection.print(rs);
        }
      }
);
      connection.setAutoCommit(true);
    }
     records=consumeRecordsByTopic(numRecords);
    int recordIndex=0;
    for (    SourceRecord r : records.allRecordsInOrder()) {
      Struct envelope=(Struct)r.value();
      assertThat(envelope.getString(op)).isEqualTo((c));
      assertThat(envelope.getStruct(after).getString(email)).isEqualTo(Integer.toString(recordIndex++));
    }
    assertThat(records.topics().size()).isEqualTo(1);
    Testing.print(*** Done with large TX);
  }
 }
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\BinlogReaderBufferIT.java",196
1849,"'-tryline","@FixFor(DBZ-411) @Test public void shouldProcessRolledBackSavepoint() throws SQLException, InterruptedException {
  String masterPort=System.getProperty(database.port,3306);
  String replicaPort=System.getProperty(database.replica.port,3306);
  boolean replicaIsMaster=masterPort.equals(replicaPort);
  if (!replicaIsMaster) {
    Thread.sleep(5000L);
  }
  config=Configuration.create().with(MySqlConnectorConfig.HOSTNAME,System.getProperty(database.replica.hostname,localhost)).with(MySqlConnectorConfig.PORT,System.getProperty(database.replica.port,3306)).with(MySqlConnectorConfig.USER,snapper).with(MySqlConnectorConfig.PASSWORD,snapperpass).with(MySqlConnectorConfig.SERVER_ID,18765).with(MySqlConnectorConfig.SERVER_NAME,DATABASE.getServerName()).with(MySqlConnectorConfig.SSL_MODE,SecureConnectionMode.DISABLED).with(MySqlConnectorConfig.POLL_INTERVAL_MS,10).with(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,DATABASE.getDatabaseName()).with(MySqlConnectorConfig.DATABASE_HISTORY,FileDatabaseHistory.class).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(FileDatabaseHistory.FILE_PATH,DB_HISTORY_PATH).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(5 + 9 + 9+ 4+ 11+ 1);
  if (replicaIsMaster) {
    try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
      try (JdbcConnection connection=db.connect()){
        final Connection jdbc=connection.connection();
        connection.setAutoCommit(false);
        final Statement statement=jdbc.createStatement();
        statement.executeUpdate(CREATE TEMPORARY TABLE tmp_ids (a int));
        statement.executeUpdate(INSERT INTO tmp_ids VALUES(5));
        jdbc.commit();
        statement.executeUpdate(DROP TEMPORARY TABLE tmp_ids);
        statement.executeUpdate(INSERT INTO customers VALUES(default, 'first', 'first', 'first'));
        final Savepoint savepoint=jdbc.setSavepoint();
        statement.executeUpdate(INSERT INTO customers VALUES(default, 'second', 'second', 'second'));
        jdbc.rollback(savepoint);
        jdbc.commit();
        connection.query(SELECT * FROM customers,rs -> {
          if (Testing.Print.isEnabled()) {
            connection.print(rs);
          }
        }
);
        connection.setAutoCommit(true);
      }
     }
     int recordCount;
    int customerEventsCount;
    int topicCount;
    if (MySqlTestConnection.isMySQL5() && !MySqlTestConnection.isPerconaServer()) {
      recordCount=3;
      customerEventsCount=2;
      topicCount=2;
    }
 else {
      recordCount=1;
      customerEventsCount=1;
      topicCount=1;
    }
    records=consumeRecordsByTopic(recordCount);
    assertThat(records.topics().size()).isEqualTo(topicCount);
    assertThat(records.recordsForTopic(DATABASE.topicForTable(customers))).hasSize(customerEventsCount);
    assertThat(records.allRecordsInOrder()).hasSize(recordCount);
    Testing.print(*** Done with savepoint TX);
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\BinlogReaderBufferIT.java",267
1850,"'-tryline","protected int consumeAtLeast(int minNumber) throws InterruptedException {
  return consumeAtLeast(minNumber,20,TimeUnit.SECONDS);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\BinlogReaderIT.java",106
1851,"'-tryline","protected int consumeAtLeast(int minNumber,long timeout,TimeUnit unit) throws InterruptedException {
  AtomicInteger counter=new AtomicInteger();
  List<SourceRecord> records=null;
  long startTime=System.currentTimeMillis();
  while (counter.get() < minNumber && (System.currentTimeMillis() - startTime) < unit.toMillis(timeout)) {
    records=reader.poll();
    if (records != null) {
      records.forEach(record -> {
        counter.incrementAndGet();
        VerifyRecord.isValid(record);
        store.add(record);
        schemaChanges.add(record);
      }
);
      Testing.print( + counter.get() +  records);
    }
  }
  return counter.get();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\BinlogReaderIT.java",110
1852,"'-tryline","protected long filterAtLeast(final int minNumber,final long timeout,final TimeUnit unit) throws InterruptedException {
  final BinlogReaderMetrics metrics=reader.getMetrics();
  final long targetNumber=minNumber;
  long startTime=System.currentTimeMillis();
  while (metrics.getNumberOfEventsFiltered() < targetNumber && (System.currentTimeMillis() - startTime) < unit.toMillis(timeout)) {
    reader.poll();
  }
  return reader.getMetrics().getNumberOfEventsFiltered();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\BinlogReaderIT.java",129
1853,"'-tryline","private void inconsistentSchema(EventProcessingFailureHandlingMode mode) throws InterruptedException, SQLException {
  if (mode == null) {
    config=simpleConfig().build();
  }
 else {
    config=simpleConfig().with(MySqlConnectorConfig.INCONSISTENT_SCHEMA_HANDLING_MODE,mode).build();
  }
  Filters filters=new Filters.Builder(config).build();
  context=new MySqlTaskContext(config,filters);
  context.start();
  context.source().setBinlogStartPoint(,0L);
  context.initializeHistory();
  reader=new BinlogReader(binlog,context,null);
  reader.start();
  int expected=9 + 9 + 4+ 5+ 1;
  int consumed=consumeAtLeast(expected);
  assertThat(consumed).isGreaterThanOrEqualTo(expected);
  reader.stop();
  reader.start();
  reader.context.dbSchema().applyDdl(context.source(),DATABASE.getDatabaseName(),DROP TABLE customers,null);
  try (final MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName());final JdbcConnection connection=db.connect();final Connection jdbc=connection.connection();final Statement statement=jdbc.createStatement()){
    statement.executeUpdate(INSERT INTO customers VALUES (default,'John','Lazy','john.lazy@acme.com'));
  }
 }
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\BinlogReaderIT.java",563
1854,"'-tryline","@Test public void shouldNotStartWithoutReaders() throws InterruptedException {
  reader=new ChainedReader.Builder().build();
  assertThat(reader.state()).isEqualTo(State.STOPPED);
  reader.start();
  assertThat(reader.state()).isEqualTo(State.STOPPED);
  assertPollReturnsNoMoreRecords();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\ChainedReaderTest.java",54
1855,"'-tryline","@Test public void shouldStartAndStopSingleReaderBeforeReaderStopsItself() throws InterruptedException {
  reader=new ChainedReader.Builder().addReader(new MockReader(r1,records())).completionMessage(Stopped the r1 reader).build();
  reader.start();
  assertThat(reader.state()).isEqualTo(State.RUNNING);
  assertThat(reader.poll()).isSameAs(RL1);
  assertThat(reader.poll()).isSameAs(RL2);
  assertThat(reader.poll()).isSameAs(RL3);
  assertThat(reader.poll()).isSameAs(RL4);
  reader.stop();
  assertThat(reader.state()).isEqualTo(State.STOPPING);
  assertThat(reader.poll()).isNull();
  assertThat(reader.state()).isEqualTo(State.STOPPED);
  assertPollReturnsNoMoreRecords();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\ChainedReaderTest.java",63
1856,"'-tryline","@Test public void shouldStartSingleReaderThatStopsAutomatically() throws InterruptedException {
  reader=new ChainedReader.Builder().addReader(new MockReader(r2,records())).completionMessage(Stopped the r2 reader).build();
  reader.start();
  assertThat(reader.state()).isEqualTo(State.RUNNING);
  assertThat(reader.poll()).isSameAs(RL1);
  assertThat(reader.poll()).isSameAs(RL2);
  assertThat(reader.poll()).isSameAs(RL3);
  assertThat(reader.poll()).isSameAs(RL4);
  assertThat(reader.poll()).isSameAs(RL5);
  assertThat(reader.poll()).isNull();
  assertThat(reader.state()).isEqualTo(State.STOPPED);
  assertPollReturnsNoMoreRecords();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\ChainedReaderTest.java",82
1857,"'-tryline","@Test public void shouldStartAndStopMultipleReaders() throws InterruptedException {
  reader=new ChainedReader.Builder().addReader(new MockReader(r3,records())).addReader(new MockReader(r4,records())).completionMessage(Stopped the r3+r4 reader).build();
  reader.start();
  assertThat(reader.state()).isEqualTo(State.RUNNING);
  assertThat(reader.poll()).isSameAs(RL1);
  assertThat(reader.poll()).isSameAs(RL2);
  assertThat(reader.poll()).isSameAs(RL3);
  assertThat(reader.poll()).isSameAs(RL4);
  assertThat(reader.poll()).isSameAs(RL5);
  List<SourceRecord> records=reader.poll();
  final Timer timeout=Threads.timer(Clock.SYSTEM,ConfigurationDefaults.RETURN_CONTROL_INTERVAL);
  while (records == null) {
    if (timeout.expired()) {
      Assert.fail(Subsequent reader has not started);
    }
    Thread.sleep(100);
    records=reader.poll();
  }
  assertThat(records).isSameAs(RL1);
  assertThat(reader.poll()).isSameAs(RL2);
  assertThat(reader.poll()).isSameAs(RL3);
  assertThat(reader.poll()).isSameAs(RL4);
  assertThat(reader.poll()).isSameAs(RL5);
  assertThat(reader.poll()).isNull();
  assertThat(reader.state()).isEqualTo(State.STOPPED);
  assertPollReturnsNoMoreRecords();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\ChainedReaderTest.java",100
1858,"'-tryline","@Test public void shouldStartAndStopReaderThatContinuesProducingItsRecordsAfterBeingStopped() throws InterruptedException {
  reader=new ChainedReader.Builder().addReader(new CompletingMockReader(r5,records())).completionMessage(Stopped the r5 reader).build();
  reader.start();
  assertThat(reader.state()).isEqualTo(State.RUNNING);
  assertThat(reader.poll()).isSameAs(RL1);
  assertThat(reader.poll()).isSameAs(RL2);
  reader.stop();
  assertThat(reader.state()).isEqualTo(State.STOPPING);
  assertThat(reader.poll()).isSameAs(RL3);
  assertThat(reader.poll()).isSameAs(RL4);
  assertThat(reader.poll()).isSameAs(RL5);
  assertThat(reader.poll()).isNull();
  assertThat(reader.state()).isEqualTo(State.STOPPED);
  assertPollReturnsNoMoreRecords();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\ChainedReaderTest.java",134
1859,"'-tryline","protected void assertPollReturnsNoMoreRecords() throws InterruptedException {
  for (int i=0; i != 10; ++i) {
    assertThat(reader.poll()).isNull();
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\ChainedReaderTest.java",157
1860,"'-tryline","@Override public List<SourceRecord> poll() throws InterruptedException {
  List<SourceRecord> record=null;
  if (continueReturningRecordsFromPolling()) {
    record=pollResultsSupplier.get();
  }
  if (record == null) {
    Runnable handler=this.completionHandler.get();
    if (handler != null) {
      handler.run();
    }
    completed.set(true);
    running.set(false);
  }
  return record;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\ChainedReaderTest.java",209
1861,"'-tryline","@Test public void shouldApplyDdlStatementsAndRecover() throws InterruptedException {
  mysql=build.storeDatabaseHistoryInFile(TEST_FILE_PATH).serverName(SERVER_NAME).createSchemas();
  mysql.start();
  source.setBinlogStartPoint(binlog-001,400);
  mysql.applyDdl(source,db1,SET  + MySqlSystemVariables.CHARSET_NAME_SERVER + =utf8mb4,this::printStatements);
  mysql.applyDdl(source,db1,readFile(ddl/mysql-products.ddl),this::printStatements);
  assertTableIncluded(connector_test.products);
  assertTableIncluded(connector_test.products_on_hand);
  assertTableIncluded(connector_test.customers);
  assertTableIncluded(connector_test.orders);
  assertHistoryRecorded();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\MySqlSchemaTest.java",66
1862,"'-tryline","@Test public void shouldIgnoreUnparseableDdlAndRecover() throws InterruptedException {
  mysql=build.with(DatabaseHistory.SKIP_UNPARSEABLE_DDL_STATEMENTS,true).storeDatabaseHistoryInFile(TEST_FILE_PATH).serverName(SERVER_NAME).createSchemas();
  mysql.start();
  source.setBinlogStartPoint(binlog-001,400);
  mysql.applyDdl(source,db1,SET  + MySqlSystemVariables.CHARSET_NAME_SERVER + =utf8mb4,this::printStatements);
  mysql.applyDdl(source,db1,xxxCREATE TABLE mytable\n + readFile(ddl/mysql-products.ddl),this::printStatements);
  mysql.applyDdl(source,db1,readFile(ddl/mysql-products.ddl),this::printStatements);
  assertTableIncluded(connector_test.products);
  assertTableIncluded(connector_test.products_on_hand);
  assertTableIncluded(connector_test.customers);
  assertTableIncluded(connector_test.orders);
  assertHistoryRecorded();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\MySqlSchemaTest.java",86
1863,"'-tryline","@Test(expected=ParsingException.class) public void shouldFailOnUnparseableDdl() throws InterruptedException {
  mysql=build.storeDatabaseHistoryInFile(TEST_FILE_PATH).serverName(SERVER_NAME).createSchemas();
  mysql.start();
  source.setBinlogStartPoint(binlog-001,400);
  mysql.applyDdl(source,db1,SET  + MySqlSystemVariables.CHARSET_NAME_SERVER + =utf8mb4,this::printStatements);
  mysql.applyDdl(source,db1,xxxCREATE TABLE mytable\n + readFile(ddl/mysql-products.ddl),this::printStatements);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\MySqlSchemaTest.java",111
1864,"'-tryline","@Test public void shouldLoadSystemAndNonSystemTablesAndConsumeOnlyFilteredDatabases() throws InterruptedException {
  mysql=build.storeDatabaseHistoryInFile(TEST_FILE_PATH).serverName(SERVER_NAME).includeDatabases(connector_test).excludeBuiltInTables().createSchemas();
  mysql.start();
  source.setBinlogStartPoint(binlog-001,400);
  mysql.applyDdl(source,mysql,SET  + MySqlSystemVariables.CHARSET_NAME_SERVER + =utf8mb4,this::printStatements);
  mysql.applyDdl(source,mysql,readFile(ddl/mysql-test-init-5.7.ddl),this::printStatements);
  source.setBinlogStartPoint(binlog-001,1000);
  mysql.applyDdl(source,db1,readFile(ddl/mysql-products.ddl),this::printStatements);
  assertTableIncluded(connector_test.products);
  assertTableIncluded(connector_test.products_on_hand);
  assertTableIncluded(connector_test.customers);
  assertTableIncluded(connector_test.orders);
  assertTableExcluded(mysql.columns_priv);
  assertNoTablesExistForDatabase(mysql);
  assertHistoryRecorded();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\MySqlSchemaTest.java",127
1865,"'-tryline","@Test public void shouldLoadSystemAndNonSystemTablesAndConsumeAllDatabases() throws InterruptedException {
  mysql=build.storeDatabaseHistoryInFile(TEST_FILE_PATH).serverName(SERVER_NAME).includeDatabases(connector_test,mysql).includeBuiltInTables().createSchemas();
  mysql.start();
  source.setBinlogStartPoint(binlog-001,400);
  mysql.applyDdl(source,mysql,SET  + MySqlSystemVariables.CHARSET_NAME_SERVER + =utf8mb4,this::printStatements);
  mysql.applyDdl(source,mysql,readFile(ddl/mysql-test-init-5.7.ddl),this::printStatements);
  source.setBinlogStartPoint(binlog-001,1000);
  mysql.applyDdl(source,db1,readFile(ddl/mysql-products.ddl),this::printStatements);
  assertTableIncluded(connector_test.products);
  assertTableIncluded(connector_test.products_on_hand);
  assertTableIncluded(connector_test.customers);
  assertTableIncluded(connector_test.orders);
  assertTableIncluded(mysql.columns_priv);
  assertTablesExistForDatabase(mysql);
  assertHistoryRecorded();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\MySqlSchemaTest.java",153
1866,"'-tryline","@Test public void pollCombinesBothReadersPolls() throws InterruptedException {
  BinlogReader mockOldBinlogReader=mock(BinlogReader.class);
  SnapshotReader mockNewSnapshotReader=mock(SnapshotReader.class);
  BinlogReader mockNewBinlogReader=mock(BinlogReader.class);
  ParallelSnapshotReader parallelSnapshotReader=new ParallelSnapshotReader(mockOldBinlogReader,mockNewSnapshotReader,mockNewBinlogReader);
  SourceRecord oldBinlogSourceRecord=mock(SourceRecord.class);
  List<SourceRecord> oldBinlogRecords=new ArrayList<>();
  oldBinlogRecords.add(oldBinlogSourceRecord);
  SourceRecord newSnapshotSourceRecord=mock(SourceRecord.class);
  List<SourceRecord> newSnapshotRecords=new ArrayList<>();
  newSnapshotRecords.add(newSnapshotSourceRecord);
  when(mockOldBinlogReader.isRunning()).thenReturn(true);
  when(mockOldBinlogReader.poll()).thenReturn(oldBinlogRecords);
  when(mockNewSnapshotReader.poll()).thenReturn(newSnapshotRecords);
  parallelSnapshotReader.start();
  List<SourceRecord> parallelRecords=parallelSnapshotReader.poll();
  Assert.assertEquals(2,parallelRecords.size());
  Assert.assertTrue(parallelRecords.contains(oldBinlogSourceRecord));
  Assert.assertTrue(parallelRecords.contains(newSnapshotSourceRecord));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\ParallelSnapshotReaderTest.java",48
1867,"'-tryline","@Test public void pollReturnsNewIfOldReaderIsStopped() throws InterruptedException {
  BinlogReader mockOldBinlogReader=mock(BinlogReader.class);
  SnapshotReader mockNewSnapshotReader=mock(SnapshotReader.class);
  BinlogReader mockNewBinlogReader=mock(BinlogReader.class);
  ParallelSnapshotReader parallelSnapshotReader=new ParallelSnapshotReader(mockOldBinlogReader,mockNewSnapshotReader,mockNewBinlogReader);
  SourceRecord newSnapshotSourceRecord=mock(SourceRecord.class);
  List<SourceRecord> newSnapshotRecords=new ArrayList<>();
  newSnapshotRecords.add(newSnapshotSourceRecord);
  when(mockOldBinlogReader.isRunning()).thenReturn(false);
  when(mockOldBinlogReader.poll()).thenThrow(new InterruptedException());
  when(mockNewSnapshotReader.poll()).thenReturn(newSnapshotRecords);
  parallelSnapshotReader.start();
  List<SourceRecord> parallelRecords=parallelSnapshotReader.poll();
  Assert.assertEquals(1,parallelRecords.size());
  Assert.assertTrue(parallelRecords.contains(newSnapshotSourceRecord));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\ParallelSnapshotReaderTest.java",78
1868,"'-tryline","@Test public void pollReturnsOldIfNewReaderIsStopped() throws InterruptedException {
  BinlogReader mockOldBinlogReader=mock(BinlogReader.class);
  SnapshotReader mockNewSnapshotReader=mock(SnapshotReader.class);
  BinlogReader mockNewBinlogReader=mock(BinlogReader.class);
  ParallelSnapshotReader parallelSnapshotReader=new ParallelSnapshotReader(mockOldBinlogReader,mockNewSnapshotReader,mockNewBinlogReader);
  SourceRecord oldBinlogSourceRecord=mock(SourceRecord.class);
  List<SourceRecord> oldBinlogRecords=new ArrayList<>();
  oldBinlogRecords.add(oldBinlogSourceRecord);
  when(mockOldBinlogReader.isRunning()).thenReturn(true);
  when(mockOldBinlogReader.poll()).thenReturn(oldBinlogRecords);
  List<SourceRecord> parallelRecords=parallelSnapshotReader.poll();
  Assert.assertEquals(1,parallelRecords.size());
  Assert.assertTrue(parallelRecords.contains(oldBinlogSourceRecord));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\ParallelSnapshotReaderTest.java",106
1869,"'-tryline","@Test public void pollReturnsNullIfBothReadersAreStopped() throws InterruptedException {
  BinlogReader mockOldBinlogReader=mock(BinlogReader.class);
  SnapshotReader mockNewSnapshotReader=mock(SnapshotReader.class);
  BinlogReader mockNewBinlogReader=mock(BinlogReader.class);
  ParallelSnapshotReader parallelSnapshotReader=new ParallelSnapshotReader(mockOldBinlogReader,mockNewSnapshotReader,mockNewBinlogReader);
  when(mockOldBinlogReader.isRunning()).thenReturn(false);
  when(mockOldBinlogReader.poll()).thenThrow(new InterruptedException());
  when(mockNewBinlogReader.poll()).thenReturn(null);
  List<SourceRecord> parallelRecords=parallelSnapshotReader.poll();
  Assert.assertEquals(null,parallelRecords);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\legacy\ParallelSnapshotReaderTest.java",129
1870,"'-tryline","@Test public void shouldConsumeAllEventsFromDatabaseUsingBinlogAndNoSnapshot() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(1 + 4 + 1);
  final List<String> tableNames=new ArrayList<>();
  records.forEach(record -> {
    final Struct source=((Struct)record.value()).getStruct(source);
    assertThat(source.getString(db)).isEqualTo(DATABASE.getDatabaseName());
    tableNames.add(source.getString(table));
  }
);
  assertThat(tableNames.subList(0,5)).containsExactly(null,t1,t2,t3,t4);
  String[] dropTableNames=tableNames.get(5).split(,);
  assertThat(dropTableNames).containsOnly(t1,t2,t3,t4);
  stopConnector();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MultiTableStatementIT.java",56
1871,"'-tryline","@Test @FixFor(DBZ-1814) public void shouldReceiveRawBinary() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).with(MySqlConnectorConfig.BINARY_HANDLING_MODE,BinaryHandlingMode.BYTES).build();
  start(MySqlConnector.class,config);
  Testing.Debug.enable();
  int createDatabaseCount=1;
  int createTableCount=1;
  int insertCount=1;
  SourceRecords sourceRecords=consumeRecordsByTopic(createDatabaseCount + createTableCount + insertCount);
  stopConnector();
  assertThat(sourceRecords).isNotNull();
  List<SourceRecord> topicSourceRecords=sourceRecords.recordsForTopic(DATABASE.topicForTable(dbz_1814_binary_mode_test));
  assertThat(topicSourceRecords).hasSize(1);
  SourceRecord topicSourceRecord=topicSourceRecords.get(0);
  Struct kafkaDataStructure=(Struct)((Struct)topicSourceRecord.value()).get(after);
  ByteBuffer expectedValue=ByteBuffer.wrap(new byte[]{1,2,3});
  assertEquals(expectedValue,kafkaDataStructure.get(blob_col));
  assertEquals(expectedValue,kafkaDataStructure.get(tinyblob_col));
  assertEquals(expectedValue,kafkaDataStructure.get(mediumblob_col));
  assertEquals(expectedValue,kafkaDataStructure.get(longblob_col));
  assertEquals(expectedValue,kafkaDataStructure.get(binary_col));
  assertEquals(expectedValue,kafkaDataStructure.get(varbinary_col));
  sourceRecords.forEach(this::validate);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlBinaryModeIT.java",58
1872,"'-tryline","@Test @FixFor(DBZ-1814) public void shouldReceiveHexBinary() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).with(MySqlConnectorConfig.BINARY_HANDLING_MODE,BinaryHandlingMode.HEX).build();
  start(MySqlConnector.class,config);
  Testing.Debug.enable();
  int createDatabaseCount=1;
  int createTableCount=1;
  int insertCount=1;
  SourceRecords sourceRecords=consumeRecordsByTopic(createDatabaseCount + createTableCount + insertCount);
  stopConnector();
  assertThat(sourceRecords).isNotNull();
  List<SourceRecord> topicSourceRecords=sourceRecords.recordsForTopic(DATABASE.topicForTable(dbz_1814_binary_mode_test));
  assertThat(topicSourceRecords).hasSize(1);
  SourceRecord topicSourceRecord=topicSourceRecords.get(0);
  Struct kafkaDataStructure=(Struct)((Struct)topicSourceRecord.value()).get(after);
  String expectedValue=010203;
  assertEquals(expectedValue,kafkaDataStructure.get(blob_col));
  assertEquals(expectedValue,kafkaDataStructure.get(tinyblob_col));
  assertEquals(expectedValue,kafkaDataStructure.get(mediumblob_col));
  assertEquals(expectedValue,kafkaDataStructure.get(longblob_col));
  assertEquals(expectedValue,kafkaDataStructure.get(binary_col));
  assertEquals(expectedValue,kafkaDataStructure.get(varbinary_col));
  sourceRecords.forEach(this::validate);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlBinaryModeIT.java",99
1873,"'-tryline","@Test @FixFor(DBZ-1814) public void shouldReceiveBase64Binary() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).with(MySqlConnectorConfig.BINARY_HANDLING_MODE,BinaryHandlingMode.BASE64).build();
  start(MySqlConnector.class,config);
  Testing.Debug.enable();
  int createDatabaseCount=1;
  int createTableCount=1;
  int insertCount=1;
  SourceRecords sourceRecords=consumeRecordsByTopic(createDatabaseCount + createTableCount + insertCount);
  stopConnector();
  assertThat(sourceRecords).isNotNull();
  List<SourceRecord> topicSourceRecords=sourceRecords.recordsForTopic(DATABASE.topicForTable(dbz_1814_binary_mode_test));
  assertThat(topicSourceRecords).hasSize(1);
  SourceRecord topicSourceRecord=topicSourceRecords.get(0);
  Struct kafkaDataStructure=(Struct)((Struct)topicSourceRecord.value()).get(after);
  String expectedValue=AQID;
  assertEquals(expectedValue,kafkaDataStructure.get(blob_col));
  assertEquals(expectedValue,kafkaDataStructure.get(tinyblob_col));
  assertEquals(expectedValue,kafkaDataStructure.get(mediumblob_col));
  assertEquals(expectedValue,kafkaDataStructure.get(longblob_col));
  assertEquals(expectedValue,kafkaDataStructure.get(binary_col));
  assertEquals(expectedValue,kafkaDataStructure.get(varbinary_col));
  sourceRecords.forEach(this::validate);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlBinaryModeIT.java",139
1874,"'-tryline","@Test public void shouldConsumeAllEventsFromDatabaseUsingSnapshot() throws SQLException, InterruptedException {
  shouldConsumeAllEventsFromDatabaseUsingSnapshotByField(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,18765);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",331
1875,"'-tryline","@Test public void shouldConsumeAllEventsFromDatabaseUsingSnapshotOld() throws SQLException, InterruptedException {
  shouldConsumeAllEventsFromDatabaseUsingSnapshotByField(MySqlConnectorConfig.DATABASE_WHITELIST,18775);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",336
1876,"'-tryline","private void shouldConsumeAllEventsFromDatabaseUsingSnapshotByField(Field dbIncludeListField,int serverId) throws SQLException, InterruptedException {
  String masterPort=System.getProperty(database.port,3306);
  String replicaPort=System.getProperty(database.replica.port,3306);
  boolean replicaIsMaster=masterPort.equals(replicaPort);
  if (!replicaIsMaster) {
    Thread.sleep(5000L);
  }
  config=Configuration.create().with(MySqlConnectorConfig.HOSTNAME,System.getProperty(database.replica.hostname,localhost)).with(MySqlConnectorConfig.PORT,System.getProperty(database.replica.port,3306)).with(MySqlConnectorConfig.USER,snapper).with(MySqlConnectorConfig.PASSWORD,snapperpass).with(MySqlConnectorConfig.SERVER_ID,serverId).with(MySqlConnectorConfig.SERVER_NAME,DATABASE.getServerName()).with(MySqlConnectorConfig.SSL_MODE,SecureConnectionMode.DISABLED).with(MySqlConnectorConfig.POLL_INTERVAL_MS,10).with(dbIncludeListField,DATABASE.getDatabaseName()).with(MySqlConnectorConfig.DATABASE_HISTORY,FileDatabaseHistory.class).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(FileDatabaseHistory.FILE_PATH,DB_HISTORY_PATH).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(5 + 9 + 9+ 4+ 11+ 1);
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(12);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(products)).size()).isEqualTo(9);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(products_on_hand)).size()).isEqualTo(9);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(customers)).size()).isEqualTo(4);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(orders)).size()).isEqualTo(5);
  assertThat(records.topics().size()).isEqualTo(5);
  assertThat(records.databaseNames().size()).isEqualTo(2);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(11);
  assertThat(records.ddlRecordsForDatabase(readbinlog_test)).isNull();
  assertThat(records.ddlRecordsForDatabase().size()).isEqualTo(1);
  records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).forEach(this::print);
  records.forEach(this::validate);
  List<SourceRecord> allRecords=records.allRecordsInOrder();
  SourceRecord last=allRecords.get(allRecords.size() - 1);
  SourceRecord secondToLast=allRecords.get(allRecords.size() - 2);
  assertThat(secondToLast.sourceOffset().containsKey(SourceInfo.SNAPSHOT_KEY)).isTrue();
  assertThat(last.sourceOffset().containsKey(SourceInfo.SNAPSHOT_KEY)).isFalse();
  assertThat(((Struct)secondToLast.value()).getStruct(Envelope.FieldName.SOURCE).getString(SourceInfo.SNAPSHOT_KEY)).isEqualTo(true);
  assertThat(((Struct)last.value()).getStruct(Envelope.FieldName.SOURCE).getString(SourceInfo.SNAPSHOT_KEY)).isEqualTo(last);
  waitForAvailableRecords(3,TimeUnit.SECONDS);
  int totalConsumed=consumeAvailableRecords(this::print);
  System.out.println(TOTAL CONSUMED =  + totalConsumed);
  stopConnector();
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.query(SELECT * FROM products,rs -> {
        if (Testing.Print.isEnabled()) {
          connection.print(rs);
        }
      }
);
      connection.execute(INSERT INTO products VALUES (default,'robot','Toy robot',1.304););
      connection.query(SELECT * FROM products,rs -> {
        if (Testing.Print.isEnabled()) {
          connection.print(rs);
        }
      }
);
    }
   }
   Testing.print(*** Restarting connector after inserts were made);
  start(MySqlConnector.class,config);
  records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(products)).size()).isEqualTo(1);
  assertThat(records.topics().size()).isEqualTo(1);
  List<SourceRecord> inserts=records.recordsForTopic(DATABASE.topicForTable(products));
  assertInsert(inserts.get(0),id,110);
  Testing.print(*** Done with inserts and restart);
  Testing.print(*** Stopping connector);
  stopConnector();
  Testing.print(*** Restarting connector);
  start(MySqlConnector.class,config);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(INSERT INTO products VALUES (1001,'roy','old robot',1234.56););
      connection.query(SELECT * FROM products,rs -> {
        if (Testing.Print.isEnabled()) {
          connection.print(rs);
        }
      }
);
    }
   }
   records=consumeRecordsByTopic(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(products)).size()).isEqualTo(1);
  assertThat(records.topics().size()).isEqualTo(1);
  inserts=records.recordsForTopic(DATABASE.topicForTable(products));
  assertInsert(inserts.get(0),id,1001);
  Testing.print(*** Done with simple insert);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(UPDATE products SET id=2001, description='really old robot' WHERE id=1001);
      connection.query(SELECT * FROM products,rs -> {
        if (Testing.Print.isEnabled()) {
          connection.print(rs);
        }
      }
);
    }
   }
   records=consumeRecordsByTopic(3);
  List<SourceRecord> updates=records.recordsForTopic(DATABASE.topicForTable(products));
  assertThat(updates.size()).isEqualTo(3);
  SourceRecord deleteRecord=updates.get(0);
  assertDelete(deleteRecord,id,1001);
  Header keyPKUpdateHeader=getPKUpdateNewKeyHeader(deleteRecord).get();
  assertEquals(Integer.valueOf(2001),((Struct)keyPKUpdateHeader.value()).getInt32(id));
  assertTombstone(updates.get(1),id,1001);
  SourceRecord insertRecord=updates.get(2);
  assertInsert(insertRecord,id,2001);
  keyPKUpdateHeader=getPKUpdateOldKeyHeader(insertRecord).get();
  assertEquals(Integer.valueOf(1001),((Struct)keyPKUpdateHeader.value()).getInt32(id));
  Testing.print(*** Done with PK change);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(UPDATE products SET weight=1345.67 WHERE id=2001);
      connection.query(SELECT * FROM products,rs -> {
        if (Testing.Print.isEnabled()) {
          connection.print(rs);
        }
      }
);
    }
   }
   records=consumeRecordsByTopic(1);
  assertThat(records.topics().size()).isEqualTo(1);
  updates=records.recordsForTopic(DATABASE.topicForTable(products));
  assertThat(updates.size()).isEqualTo(1);
  assertUpdate(updates.get(0),id,2001);
  updates.forEach(this::validate);
  Testing.print(*** Done with simple update);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(String.format(ALTER TABLE %s.products ADD COLUMN volume FLOAT, ADD COLUMN alias VARCHAR(30) NULL AFTER description,DATABASE.getDatabaseName()));
      connection.execute(UPDATE products SET volume=13.5 WHERE id=2001);
      connection.query(SELECT * FROM products,rs -> {
        if (Testing.Print.isEnabled()) {
          connection.print(rs);
        }
      }
);
    }
   }
   records=consumeRecordsByTopic(2);
  assertThat(records.topics().size()).isEqualTo(2);
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(1);
  updates=records.recordsForTopic(DATABASE.topicForTable(products));
  assertThat(updates.size()).isEqualTo(1);
  assertUpdate(updates.get(0),id,2001);
  updates.forEach(this::validate);
  Testing.print(*** Done with schema change (same db and fully-qualified name));
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(emptydb)){
    try (JdbcConnection connection=db.connect()){
      connection.execute(String.format(CREATE TABLE %s.stores ( +  id INT(11) PRIMARY KEY NOT NULL AUTO_INCREMENT, +  first_name VARCHAR(255) NOT NULL,+  last_name VARCHAR(255) NOT NULL,+  email VARCHAR(255) NOT NULL );,DATABASE.getDatabaseName()));
    }
   }
   records=consumeRecordsByTopic(1);
  assertThat(records.topics().size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(1);
  records.recordsForTopic(DATABASE.getServerName()).forEach(this::validate);
  Testing.print(*** Done with PK change (different db and fully-qualified name));
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(UPDATE products_on_hand SET quantity=20 WHERE product_id=109);
      connection.query(SELECT * FROM products_on_hand,rs -> {
        if (Testing.Print.isEnabled()) {
          connection.print(rs);
        }
      }
);
    }
   }
   records=consumeRecordsByTopic(1);
  assertThat(records.topics().size()).isEqualTo(1);
  updates=records.recordsForTopic(DATABASE.topicForTable(products_on_hand));
  assertThat(updates.size()).isEqualTo(1);
  assertUpdate(updates.get(0),product_id,109);
  updates.forEach(this::validate);
  Testing.print(*** Done with verifying no additional events);
  stopConnector();
  Testing.print(*** Restarting connector);
  CompletionResult completion=new CompletionResult();
  start(MySqlConnector.class,config,completion,(record) -> {
    Struct key=(Struct)record.key();
    Number id=(Number)key.get(id);
    if (id.intValue() == 3003) {
      return true;
    }
    return false;
  }
);
  BinlogPosition positionBeforeInserts=new BinlogPosition();
  BinlogPosition positionAfterInserts=new BinlogPosition();
  BinlogPosition positionAfterUpdate=new BinlogPosition();
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.query(SHOW MASTER STATUS,positionBeforeInserts::readFromDatabase);
      connection.execute(INSERT INTO products(id,name,description,weight,volume,alias) VALUES  + (3001,'ashley','super robot',34.56,0.00,'ashbot'),  + (3002,'arthur','motorcycle',87.65,0.00,'arcycle'), + (3003,'oak','tree',987.65,0.00,'oak'););
      connection.query(SELECT * FROM products,rs -> {
        if (Testing.Print.isEnabled()) {
          connection.print(rs);
        }
      }
);
      connection.query(SHOW MASTER STATUS,positionAfterInserts::readFromDatabase);
      connection.execute(UPDATE products_on_hand SET quantity=40 WHERE product_id=109);
      connection.query(SELECT * FROM products_on_hand,rs -> {
        if (Testing.Print.isEnabled()) {
          connection.print(rs);
        }
      }
);
      connection.query(SHOW MASTER STATUS,positionAfterUpdate::readFromDatabase);
    }
   }
   records=consumeRecordsByTopic(2);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(products)).size()).isEqualTo(2);
  assertThat(records.topics().size()).isEqualTo(1);
  inserts=records.recordsForTopic(DATABASE.topicForTable(products));
  assertInsert(inserts.get(0),id,3001);
  assertInsert(inserts.get(1),id,3002);
  completion.await(10,TimeUnit.SECONDS);
  assertThat(completion.hasCompleted()).isTrue();
  assertThat(completion.hasError()).isTrue();
  assertThat(completion.success()).isFalse();
  assertNoRecordsToConsume();
  assertConnectorNotRunning();
  stopConnector();
  final MySqlOffsetContext.Loader loader=new MySqlOffsetContext.Loader(new MySqlConnectorConfig(Configuration.create().with(MySqlConnectorConfig.SERVER_NAME,config.getString(MySqlConnectorConfig.SERVER_NAME)).build()));
  Map<String,?> lastCommittedOffset=readLastCommittedOffset(config,loader.getPartition());
  final MySqlOffsetContext offsetContext=(MySqlOffsetContext)loader.load(lastCommittedOffset);
  final SourceInfo persistedOffsetSource=offsetContext.getSource();
  Testing.print(Position before inserts:  + positionBeforeInserts);
  Testing.print(Position after inserts:   + positionAfterInserts);
  Testing.print(Offset:  + lastCommittedOffset);
  Testing.print(Position after update:   + positionAfterUpdate);
  if (replicaIsMaster) {
    assertThat(persistedOffsetSource.binlogFilename()).isEqualTo(positionBeforeInserts.binlogFilename());
    assertThat(persistedOffsetSource.binlogFilename()).isEqualTo(positionAfterInserts.binlogFilename());
    final MySqlVersion mysqlVersion=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName()).getMySqlVersion();
    if (mysqlVersion == MySqlVersion.MYSQL_5_5 || mysqlVersion == MySqlVersion.MYSQL_5_6) {
      assertThat(persistedOffsetSource.binlogPosition()).isGreaterThanOrEqualTo(positionBeforeInserts.binlogPosition());
    }
 else {
      assertThat(persistedOffsetSource.binlogPosition()).isGreaterThan(positionBeforeInserts.binlogPosition());
    }
    assertThat(persistedOffsetSource.binlogPosition()).isLessThan(positionAfterInserts.binlogPosition());
  }
 else {
  }
  assertThat(offsetContext.eventsToSkipUponRestart()).isEqualTo(2);
  Testing.print(*** Restarting connector, and should begin with inserting 3003 (not 109!));
  start(MySqlConnector.class,config);
  records=consumeRecordsByTopic(1);
  assertThat(records.topics().size()).isEqualTo(1);
  inserts=records.recordsForTopic(DATABASE.topicForTable(products));
  if (inserts == null) {
    updates=records.recordsForTopic(DATABASE.topicForTable(products_on_hand));
    if (updates != null) {
      fail(Restarted connector and missed the insert of product id=3003!);
    }
  }
  SourceRecord prod3003=inserts.get(0);
  assertInsert(prod3003,id,3003);
  assertOffset(prod3003,file,lastCommittedOffset.get(file));
  assertOffset(prod3003,pos,lastCommittedOffset.get(pos));
  assertOffset(prod3003,row,3);
  assertOffset(prod3003,event,lastCommittedOffset.get(event));
  assertValueField(prod3003,after/id,3003);
  assertValueField(prod3003,after/name,oak);
  assertValueField(prod3003,after/description,tree);
  assertValueField(prod3003,after/weight,987.65d);
  assertValueField(prod3003,after/volume,0.0d);
  assertValueField(prod3003,after/alias,oak);
  records=consumeRecordsByTopic(1);
  assertThat(records.topics().size()).isEqualTo(1);
  updates=records.recordsForTopic(DATABASE.topicForTable(products_on_hand));
  assertThat(updates.size()).isEqualTo(1);
  assertUpdate(updates.get(0),product_id,109);
  updates.forEach(this::validate);
  Testing.print(*** Done with simple insert);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",341
1877,"'-tryline","@Test public void shouldUseOverriddenSelectStatementDuringSnapshotting() throws SQLException, InterruptedException {
  String masterPort=System.getProperty(database.port,3306);
  String replicaPort=System.getProperty(database.replica.port,3306);
  boolean replicaIsMaster=masterPort.equals(replicaPort);
  if (!replicaIsMaster) {
    Thread.sleep(5000L);
  }
  config=Configuration.create().with(MySqlConnectorConfig.HOSTNAME,System.getProperty(database.replica.hostname,localhost)).with(MySqlConnectorConfig.PORT,System.getProperty(database.replica.port,3306)).with(MySqlConnectorConfig.USER,snapper).with(MySqlConnectorConfig.PASSWORD,snapperpass).with(MySqlConnectorConfig.SERVER_ID,28765).with(MySqlConnectorConfig.SERVER_NAME,DATABASE.getServerName()).with(MySqlConnectorConfig.SSL_MODE,SecureConnectionMode.DISABLED).with(MySqlConnectorConfig.POLL_INTERVAL_MS,10).with(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,DATABASE.getDatabaseName()).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.getDatabaseName() + .products).with(MySqlConnectorConfig.SNAPSHOT_SELECT_STATEMENT_OVERRIDES_BY_TABLE,DATABASE.getDatabaseName() + .products).with(MySqlConnectorConfig.SNAPSHOT_SELECT_STATEMENT_OVERRIDES_BY_TABLE + . + DATABASE.getDatabaseName()+ .products,String.format(SELECT * from %s.products where id>=108 order by id,DATABASE.getDatabaseName())).with(DatabaseHistory.STORE_ONLY_MONITORED_TABLES_DDL,true).with(MySqlConnectorConfig.DATABASE_HISTORY,FileDatabaseHistory.class).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(FileDatabaseHistory.FILE_PATH,DB_HISTORY_PATH).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(6 + 2);
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(6);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(products)).size()).isEqualTo(2);
  assertThat(((Struct)records.recordsForTopic(DATABASE.topicForTable(products)).get(0).key()).getInt32(id)).isEqualTo(108);
  assertThat(((Struct)records.recordsForTopic(DATABASE.topicForTable(products)).get(1).key()).getInt32(id)).isEqualTo(109);
  records.forEach(this::validate);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",754
1878,"'-tryline","@Test public void shouldUseMultipleOverriddenSelectStatementsDuringSnapshotting() throws SQLException, InterruptedException {
  String masterPort=System.getProperty(database.port,3306);
  String replicaPort=System.getProperty(database.replica.port,3306);
  boolean replicaIsMaster=masterPort.equals(replicaPort);
  if (!replicaIsMaster) {
    Thread.sleep(5000L);
  }
  String tables=String.format(%s.products,%s.products_on_hand,DATABASE.getDatabaseName(),DATABASE.getDatabaseName());
  config=Configuration.create().with(MySqlConnectorConfig.HOSTNAME,System.getProperty(database.replica.hostname,localhost)).with(MySqlConnectorConfig.PORT,System.getProperty(database.replica.port,3306)).with(MySqlConnectorConfig.USER,snapper).with(MySqlConnectorConfig.PASSWORD,snapperpass).with(MySqlConnectorConfig.SERVER_ID,28765).with(MySqlConnectorConfig.SERVER_NAME,DATABASE.getServerName()).with(MySqlConnectorConfig.SSL_MODE,SecureConnectionMode.DISABLED).with(MySqlConnectorConfig.POLL_INTERVAL_MS,10).with(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,DATABASE.getDatabaseName()).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,tables).with(DatabaseHistory.STORE_ONLY_MONITORED_TABLES_DDL,true).with(MySqlConnectorConfig.SNAPSHOT_SELECT_STATEMENT_OVERRIDES_BY_TABLE,tables).with(MySqlConnectorConfig.SNAPSHOT_SELECT_STATEMENT_OVERRIDES_BY_TABLE + . + DATABASE.getDatabaseName()+ .products,String.format(SELECT * from %s.products where id>=108 order by id,DATABASE.getDatabaseName())).with(MySqlConnectorConfig.SNAPSHOT_SELECT_STATEMENT_OVERRIDES_BY_TABLE + . + DATABASE.getDatabaseName()+ .products_on_hand,String.format(SELECT * from %s.products_on_hand where product_id>=108 order by product_id,DATABASE.getDatabaseName())).with(MySqlConnectorConfig.DATABASE_HISTORY,FileDatabaseHistory.class).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(FileDatabaseHistory.FILE_PATH,DB_HISTORY_PATH).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(8 + 4);
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(8);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(products)).size()).isEqualTo(2);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(products_on_hand)).size()).isEqualTo(2);
  assertThat(((Struct)records.recordsForTopic(DATABASE.topicForTable(products)).get(0).key()).getInt32(id)).isEqualTo(108);
  assertThat(((Struct)records.recordsForTopic(DATABASE.topicForTable(products)).get(1).key()).getInt32(id)).isEqualTo(109);
  assertThat(((Struct)records.recordsForTopic(DATABASE.topicForTable(products_on_hand)).get(0).key()).getInt32(product_id)).isEqualTo(108);
  assertThat(((Struct)records.recordsForTopic(DATABASE.topicForTable(products_on_hand)).get(1).key()).getInt32(product_id)).isEqualTo(109);
  records.forEach(this::validate);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",804
1879,"'-tryline","@Test @FixFor(DBZ-977) public void shouldIgnoreAlterTableForNonCapturedTablesNotStoredInHistory() throws SQLException, InterruptedException {
  Testing.Files.delete(DB_HISTORY_PATH);
  final String tables=String.format(%s.customers,DATABASE.getDatabaseName(),DATABASE.getDatabaseName());
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,tables).with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(DatabaseHistory.STORE_ONLY_MONITORED_TABLES_DDL,true).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(1 + 5);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(5);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(ALTER TABLE orders ADD COLUMN (newcol INT));
      connection.execute(ALTER TABLE customers ADD COLUMN (newcol INT));
      connection.execute(INSERT INTO customers VALUES  + (default,'name','surname','email',1););
    }
   }
   records=consumeRecordsByTopic(2);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(customers)).size()).isEqualTo(1);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(1);
  stopConnector();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",860
1880,"'-tryline","@Test @FixFor(DBZ-1201) public void shouldSaveSetCharacterSetWhenStoringOnlyMonitoredTables() throws SQLException, InterruptedException {
  Testing.Files.delete(DB_HISTORY_PATH);
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,no_ + DATABASE.getDatabaseName()).with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(DatabaseHistory.STORE_ONLY_MONITORED_TABLES_DDL,true).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(1);
  assertThat(records.ddlRecordsForDatabase().size()).isEqualTo(1);
  stopConnector();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",897
1881,"'-tryline","@Test @FixFor(DBZ-1246) public void shouldProcessCreateUniqueIndex() throws SQLException, InterruptedException {
  Testing.Files.delete(DB_HISTORY_PATH);
  final String tables=String.format(%s.migration_test,DATABASE.getDatabaseName(),DATABASE.getDatabaseName());
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,tables).with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).build();
  start(MySqlConnector.class,config);
  waitForStreamingRunning(DATABASE.getServerName());
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(create table migration_test (id varchar(20) null,mgb_no varchar(20) null),create unique index migration_test_mgb_no_uindex on migration_test (mgb_no),insert into migration_test values(1,'2'));
    }
   }
   SourceRecords records=consumeRecordsByTopic(15);
  final List<SourceRecord> migrationTestRecords=records.recordsForTopic(DATABASE.topicForTable(migration_test));
  assertThat(migrationTestRecords.size()).isEqualTo(1);
  final SourceRecord record=migrationTestRecords.get(0);
  assertThat(((Struct)record.key()).getString(mgb_no)).isEqualTo(2);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(13);
  stopConnector();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",920
1882,"'-tryline","@Test @FixFor(DBZ-977) public void shouldIgnoreAlterTableForNonCapturedTablesStoredInHistory() throws SQLException, InterruptedException {
  Testing.Files.delete(DB_HISTORY_PATH);
  final String tables=String.format(%s.customers,DATABASE.getDatabaseName(),DATABASE.getDatabaseName());
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,tables).with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).build();
  dropDatabases();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(1 + 1 + 2+ 2 * 4);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(1 + 2 + 2 * 4);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(ALTER TABLE orders ADD COLUMN (newcol INT));
      connection.execute(ALTER TABLE customers ADD COLUMN (newcol INT));
      connection.execute(INSERT INTO customers VALUES  + (default,'name','surname','email',1););
    }
   }
   records=consumeRecordsByTopic(3);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(customers)).size()).isEqualTo(1);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(2);
  stopConnector();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",971
1883,"'-tryline","@Test @FixFor(DBZ-1264) public void shouldIgnoreCreateIndexForNonCapturedTablesNotStoredInHistory() throws SQLException, InterruptedException {
  Testing.Files.delete(DB_HISTORY_PATH);
  final String tables=String.format(%s.customers,DATABASE.getDatabaseName(),DATABASE.getDatabaseName());
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,tables).with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(DatabaseHistory.STORE_ONLY_MONITORED_TABLES_DDL,true).build();
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(CREATE TABLE nonmon (id INT));
    }
   }
   start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(6);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(5);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(CREATE UNIQUE INDEX pk ON nonmon(id),INSERT INTO customers VALUES (default,'name','surname','email'););
    }
   }
   final SourceRecord record=consumeRecord();
  Assertions.assertThat(record.topic()).isEqualTo(DATABASE.topicForTable(customers));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",1009
1884,"'-tryline","@Test @FixFor(DBZ-683) public void shouldReceiveSchemaForNonWhitelistedTablesAndDatabases() throws SQLException, InterruptedException {
  Testing.Files.delete(DB_HISTORY_PATH);
  final String tables=String.format(%s.customers,%s.orders,DATABASE.getDatabaseName(),DATABASE.getDatabaseName());
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,tables).with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,.*).build();
  dropDatabases();
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(mysql)){
    try (JdbcConnection connection=db.connect()){
      connection.execute(CREATE DATABASE non_wh,USE non_wh,CREATE TABLE t1 (ID INT PRIMARY KEY));
    }
   }
   start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(1 + 1 + 2+ 2 * 4 + 1 + 2 + 2);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(1 + 2 + 2 * 4);
  stopConnector();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",1048
1885,"'-tryline","@Test @FixFor(DBZ-1546) public void shouldHandleIncludeListTables() throws SQLException, InterruptedException {
  Testing.Files.delete(DB_HISTORY_PATH);
  final String tables=String.format(%s.customers, %s.orders,DATABASE.getDatabaseName(),DATABASE.getDatabaseName());
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,tables).with(MySqlConnectorConfig.DATABASE_INCLUDE_LIST,.*).build();
  dropDatabases();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(1 + 1 + 2+ 2 * 4 + 1 + 2 + 2);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(1 + 2 + 2 * 4);
  stopConnector();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",1086
1886,"'-tryline","@Test public void shouldHandleWhitelistedTables() throws SQLException, InterruptedException {
  Testing.Files.delete(DB_HISTORY_PATH);
  final String tables=String.format(%s.customers, %s.orders,DATABASE.getDatabaseName(),DATABASE.getDatabaseName());
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.TABLE_WHITELIST,tables).with(MySqlConnectorConfig.DATABASE_WHITELIST,.*).build();
  dropDatabases();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(1 + 1 + 2+ 2 * 4 + 1 + 2 + 2);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(1 + 2 + 2 * 4);
  stopConnector();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",1113
1887,"'-tryline","@Test public void shouldConsumeEventsWithNoSnapshot() throws SQLException, InterruptedException {
  Testing.Files.delete(DB_HISTORY_PATH);
  config=RO_DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(INITIAL_EVENT_COUNT);
  assertThat(recordsForTopicForRoProductsTable(records).size()).isEqualTo(9);
  assertThat(records.recordsForTopic(RO_DATABASE.topicForTable(products_on_hand)).size()).isEqualTo(9);
  assertThat(records.recordsForTopic(RO_DATABASE.topicForTable(customers)).size()).isEqualTo(4);
  assertThat(records.recordsForTopic(RO_DATABASE.topicForTable(orders)).size()).isEqualTo(5);
  assertThat(records.recordsForTopic(RO_DATABASE.topicForTable(Products)).size()).isEqualTo(9);
  assertThat(records.topics().size()).isEqualTo(4 + 1);
  assertThat(records.ddlRecordsForDatabase(RO_DATABASE.getDatabaseName()).size()).isEqualTo(6);
  Optional<SourceRecord> recordWithScientfic=records.recordsForTopic(RO_DATABASE.topicForTable(Products)).stream().filter(x -> hammer2.equals(getAfter(x).get(name))).findFirst();
  assertThat(recordWithScientfic.isPresent());
  assertThat(getAfter(recordWithScientfic.get()).get(weight)).isEqualTo(0.875);
  records.forEach(this::validate);
  stopConnector();
  records.recordsForTopic(RO_DATABASE.topicForTable(orders)).forEach(record -> {
    print(record);
  }
);
  records.recordsForTopic(RO_DATABASE.topicForTable(customers)).forEach(record -> {
    print(record);
  }
);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",1196
1888,"'-tryline","@Test @FixFor(DBZ-1962) public void shouldConsumeEventsWithIncludedColumns() throws SQLException, InterruptedException {
  Testing.Files.delete(DB_HISTORY_PATH);
  config=RO_DATABASE.defaultConfig().with(MySqlConnectorConfig.COLUMN_INCLUDE_LIST,RO_DATABASE.qualifiedTableName(orders) + .order_number).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(9 + 9 + 4+ 5+ 1);
  assertThat(records.recordsForTopic(RO_DATABASE.topicForTable(orders)).size()).isEqualTo(5);
  assertThat(records.topics().size()).isEqualTo(5);
  records.forEach(this::validate);
  stopConnector();
  records.recordsForTopic(RO_DATABASE.topicForTable(orders)).forEach(record -> {
    print(record);
    Struct value=((Struct)record.value()).getStruct(after);
    try {
      value.get(order_number);
    }
 catch (    DataException e) {
      fail(The 'order_number' field was not found but should exist);
    }
    try {
      value.get(order_date);
      fail(The 'order_date' field was found but should be filtered);
    }
 catch (    DataException e) {
    }
  }
);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",1241
1889,"'-tryline","@Test public void shouldConsumeEventsWithMaskedAndBlacklistedColumns() throws SQLException, InterruptedException {
  Testing.Files.delete(DB_HISTORY_PATH);
  config=RO_DATABASE.defaultConfig().with(MySqlConnectorConfig.COLUMN_EXCLUDE_LIST,RO_DATABASE.qualifiedTableName(orders) + .order_number).with(column.mask.with.12.chars,RO_DATABASE.qualifiedTableName(customers) + .email).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(9 + 9 + 4+ 5+ 1);
  assertThat(recordsForTopicForRoProductsTable(records).size()).isEqualTo(9);
  assertThat(records.recordsForTopic(RO_DATABASE.topicForTable(products_on_hand)).size()).isEqualTo(9);
  assertThat(records.recordsForTopic(RO_DATABASE.topicForTable(customers)).size()).isEqualTo(4);
  assertThat(records.recordsForTopic(RO_DATABASE.topicForTable(orders)).size()).isEqualTo(5);
  assertThat(records.topics().size()).isEqualTo(5);
  records.forEach(this::validate);
  stopConnector();
  records.recordsForTopic(RO_DATABASE.topicForTable(orders)).forEach(record -> {
    print(record);
    Struct value=(Struct)record.value();
    try {
      value.getStruct(after).get(order_number);
      fail(The 'order_number' field was found but should not exist);
    }
 catch (    DataException e) {
    }
  }
);
  records.recordsForTopic(RO_DATABASE.topicForTable(customers)).forEach(record -> {
    Struct value=(Struct)record.value();
    if (value.getStruct(after) != null) {
      assertThat(value.getStruct(after).getString(email)).isEqualTo(************);
    }
    if (value.getStruct(before) != null) {
      assertThat(value.getStruct(before).getString(email)).isEqualTo(************);
    }
    print(record);
  }
);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",1288
1890,"'-tryline","@Test @FixFor(DBZ-1692) public void shouldConsumeEventsWithMaskedHashedColumns() throws InterruptedException {
  Testing.Files.delete(DB_HISTORY_PATH);
  config=RO_DATABASE.defaultConfig().with(column.mask.hash.SHA-256.with.salt.CzQMA0cB5K,RO_DATABASE.qualifiedTableName(customers) + .email).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(9 + 9 + 4+ 5+ 1);
  assertThat(recordsForTopicForRoProductsTable(records)).hasSize(9);
  assertThat(records.recordsForTopic(RO_DATABASE.topicForTable(products_on_hand))).hasSize(9);
  final List<SourceRecord> customers=records.recordsForTopic(RO_DATABASE.topicForTable(customers));
  assertThat(customers).hasSize(4);
  assertThat(records.recordsForTopic(RO_DATABASE.topicForTable(orders))).hasSize(5);
  assertThat(records.topics()).hasSize(5);
  records.forEach(this::validate);
  stopConnector();
  Struct value1001=(Struct)customers.get(0).value();
  if (value1001.getStruct(after) != null) {
    assertThat(value1001.getStruct(after).getString(email)).isEqualTo(d540e71abf15be8b51c7967397ba359db27d6f6ae85a297fe8d0d7005ffd0e82);
  }
  Struct value1002=(Struct)customers.get(1).value();
  if (value1002.getStruct(after) != null) {
    assertThat(value1002.getStruct(after).getString(email)).isEqualTo(b1f1a1a63559c1d3a98bd7bb5c363d7e21a37463a7266bc2ff341eaef7ac8ef3);
  }
  Struct value1003=(Struct)customers.get(2).value();
  if (value1003.getStruct(after) != null) {
    assertThat(value1003.getStruct(after).getString(email)).isEqualTo(bbe1de7b1068bc8f86bbb19f432ce1d44fbd461339916f42544b3f7ebff674d6);
  }
  Struct value1004=(Struct)customers.get(3).value();
  if (value1004.getStruct(after) != null) {
    assertThat(value1004.getStruct(after).getString(email)).isEqualTo(ff21be44fb224e57d822ea9a51d343d77e4c49ac3dedd3d144024ac2012af0a1);
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",1343
1891,"'-tryline","@Test @FixFor(DBZ-1972) public void shouldConsumeEventsWithTruncatedColumns() throws InterruptedException {
  Testing.Files.delete(DB_HISTORY_PATH);
  config=RO_DATABASE.defaultConfig().with(column.truncate.to.7.chars,RO_DATABASE.qualifiedTableName(customers) + .email).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(9 + 9 + 4+ 5+ 1);
  assertThat(recordsForTopicForRoProductsTable(records)).hasSize(9);
  assertThat(records.recordsForTopic(RO_DATABASE.topicForTable(products_on_hand))).hasSize(9);
  final List<SourceRecord> customers=records.recordsForTopic(RO_DATABASE.topicForTable(customers));
  assertThat(customers).hasSize(4);
  assertThat(records.recordsForTopic(RO_DATABASE.topicForTable(orders))).hasSize(5);
  assertThat(records.topics()).hasSize(5);
  records.forEach(this::validate);
  stopConnector();
  Struct value1001=(Struct)customers.get(0).value();
  if (value1001.getStruct(after) != null) {
    assertThat(value1001.getStruct(after).getString(email)).isEqualTo(sally.t);
  }
  Struct value1002=(Struct)customers.get(1).value();
  if (value1002.getStruct(after) != null) {
    assertThat(value1002.getStruct(after).getString(email)).isEqualTo(gbailey);
  }
  Struct value1003=(Struct)customers.get(2).value();
  if (value1003.getStruct(after) != null) {
    assertThat(value1003.getStruct(after).getString(email)).isEqualTo(ed@walk);
  }
  Struct value1004=(Struct)customers.get(3).value();
  if (value1004.getStruct(after) != null) {
    assertThat(value1004.getStruct(after).getString(email)).isEqualTo(annek@n);
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",1395
1892,"'-tryline","/** 
 * Specifying the adaptive time.precision.mode is no longer valid and a configuration validation problem should be reported when that configuration option is used.
 */
@Test @FixFor(DBZ-1234) public void shouldFailToValidateAdaptivePrecisionMode() throws InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).with(MySqlConnectorConfig.TIME_PRECISION_MODE,TemporalPrecisionMode.ADAPTIVE).build();
  MySqlConnector connector=new MySqlConnector();
  Config result=connector.validate(config.asMap());
  assertConfigurationErrors(result,MySqlConnectorConfig.TIME_PRECISION_MODE);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",2078
1893,"'-tryline","@Test @FixFor(DBZ-1015) public void shouldRewriteIdentityKey() throws InterruptedException, SQLException {
  final String tableName=products;
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(CommonConnectorConfig.TOMBSTONES_ON_DELETE,false).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(tableName)).with(MySqlConnectorConfig.INCLUDE_SQL_QUERY,true).with(MySqlConnectorConfig.MSG_KEY_COLUMNS,(.*).products:id,name).build();
  start(MySqlConnector.class,config);
  final SourceRecords records=consumeRecordsByTopic(9);
  final List<SourceRecord> recordsForTopic=records.recordsForTopic(DATABASE.topicForTable(tableName));
  recordsForTopic.forEach(record -> {
    Struct key=(Struct)record.key();
    Assertions.assertThat(key.get(id)).isNotNull();
    Assertions.assertThat(key.get(name)).isNotNull();
  }
);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",2172
1894,"'-tryline","@Test @FixFor(DBZ-2957) public void shouldRewriteIdentityKeyWithWhitespace() throws InterruptedException, SQLException {
  final String tableName=products;
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(CommonConnectorConfig.TOMBSTONES_ON_DELETE,false).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(tableName)).with(MySqlConnectorConfig.INCLUDE_SQL_QUERY,true).with(MySqlConnectorConfig.MSG_KEY_COLUMNS,   (.*).products:id,name   ).build();
  start(MySqlConnector.class,config);
  final SourceRecords records=consumeRecordsByTopic(9);
  final List<SourceRecord> recordsForTopic=records.recordsForTopic(DATABASE.topicForTable(tableName));
  recordsForTopic.forEach(record -> {
    Struct key=(Struct)record.key();
    Assertions.assertThat(key.get(id)).isNotNull();
    Assertions.assertThat(key.get(name)).isNotNull();
  }
);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",2202
1895,"'-tryline","@Test @FixFor(DBZ-2957) public void shouldRewriteIdentityKeyWithMsgKeyColumnsFieldRegexValidation() throws InterruptedException, SQLException {
  final String tableName=products;
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(CommonConnectorConfig.TOMBSTONES_ON_DELETE,false).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(tableName)).with(MySqlConnectorConfig.INCLUDE_SQL_QUERY,true).with(MySqlConnectorConfig.MSG_KEY_COLUMNS,(.*).products:id,name;).build();
  start(MySqlConnector.class,config);
  final SourceRecords records=consumeRecordsByTopic(9);
  final List<SourceRecord> recordsForTopic=records.recordsForTopic(DATABASE.topicForTable(tableName));
  recordsForTopic.forEach(record -> {
    Struct key=(Struct)record.key();
    Assertions.assertThat(key.get(id)).isNotNull();
    Assertions.assertThat(key.get(name)).isNotNull();
  }
);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",2232
1896,"'-tryline","private void waitForStreamingRunning(String serverName) throws InterruptedException {
  waitForStreamingRunning(mysql,serverName,getStreamingNamespace());
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorIT.java",2286
1897,"'-tryline","@Test @FixFor(DBZ-126) public void shouldConsumeAllEventsFromDatabaseUsingBinlogAndNoSnapshot() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).build();
  start(MySqlConnector.class,config);
  int numCreateDatabase=1;
  int numCreateTables=1;
  int numDataRecords=1;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numDataRecords);
  stopConnector();
  assertThat(records).isNotNull();
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(numCreateDatabase + numCreateTables);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_126_jsontable)).size()).isEqualTo(1);
  assertThat(records.topics().size()).isEqualTo(1 + numCreateTables);
  assertThat(records.databaseNames().size()).isEqualTo(1);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(numCreateDatabase + numCreateTables);
  assertThat(records.ddlRecordsForDatabase(regression_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(connector_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(readbinlog_test)).isNull();
  records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).forEach(this::print);
  records.forEach(this::validate);
  List<String> errors=new ArrayList<>();
  records.forEach(record -> {
    Struct value=(Struct)record.value();
    if (record.topic().endsWith(dbz_126_jsontable)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      Integer i=after.getInt32(id);
      assertThat(i).isNotNull();
      String json=after.getString(json);
      String expectedBinlog=after.getString(expectedBinlogStr);
      check(json,expectedBinlog,errors::add);
    }
  }
);
  if (!errors.isEmpty()) {
    fail( + errors.size() +  errors with JSON records...+ System.lineSeparator()+ String.join(System.lineSeparator(),errors));
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorJsonIT.java",60
1898,"'-tryline","@Test public void shouldConsumeAllEventsFromDatabaseUsingSnapshot() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().build();
  start(MySqlConnector.class,config);
  int numTables=1;
  int numDataRecords=1;
  int numDdlRecords=numTables * 2 + 3;
  int numSetVariables=1;
  SourceRecords records=consumeRecordsByTopic(numDdlRecords + numSetVariables + numDataRecords);
  stopConnector();
  assertThat(records).isNotNull();
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(numDdlRecords + numSetVariables);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_126_jsontable)).size()).isEqualTo(1);
  assertThat(records.topics().size()).isEqualTo(numTables + 1);
  assertThat(records.databaseNames().size()).isEqualTo(2);
  assertThat(records.databaseNames()).containsOnly(DATABASE.getDatabaseName(),);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(numDdlRecords);
  assertThat(records.ddlRecordsForDatabase(regression_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(connector_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(readbinlog_test)).isNull();
  assertThat(records.ddlRecordsForDatabase().size()).isEqualTo(1);
  records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).forEach(this::print);
  records.forEach(this::validate);
  List<String> errors=new ArrayList<>();
  records.forEach(record -> {
    Struct value=(Struct)record.value();
    if (record.topic().endsWith(dbz_126_jsontable)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      Integer i=after.getInt32(id);
      assertThat(i).isNotNull();
      String json=after.getString(json);
      String expectedJdbc=after.getString(expectedJdbcStr);
      check(json,expectedJdbc,errors::add);
    }
  }
);
  if (!errors.isEmpty()) {
    fail( + errors.size() +  errors with JSON records...+ System.lineSeparator()+ String.join(System.lineSeparator(),errors));
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorJsonIT.java",110
1899,"'-tryline","@Test @FixFor(DBZ-61) public void shouldConsumeAllEventsFromDatabaseUsingBinlogAndNoSnapshot() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).with(database.serverTimezone,DATABASE.timezone()).build();
  start(MySqlConnector.class,config);
  waitForStreamingRunning(mysql,DATABASE.getServerName(),getStreamingNamespace());
  int numCreateDatabase=1;
  int numCreateTables=12;
  int numDataRecords=22;
  int numCreateDefiner=1;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numDataRecords+ numCreateDefiner);
  stopConnector();
  assertThat(records).isNotNull();
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(numCreateDatabase + numCreateTables + numCreateDefiner);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(t1464075356413_testtable6)).size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz84_integer_types_table)).size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_85_fractest)).size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_100_enumsettest)).size()).isEqualTo(3);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_102_charsettest)).size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_114_zerovaluetest)).size()).isEqualTo(2);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_1318_zerovaluetest)).size()).isEqualTo(2);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_123_bitvaluetest)).size()).isEqualTo(2);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_104_customers)).size()).isEqualTo(4);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_147_decimalvalues)).size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_342_timetest)).size()).isEqualTo(1);
  assertThat(records.topics().size()).isEqualTo(numCreateTables + 1);
  assertThat(records.databaseNames().size()).isEqualTo(1);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(numCreateDatabase + numCreateTables + numCreateDefiner);
  assertThat(records.ddlRecordsForDatabase(connector_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(readbinlog_test)).isNull();
  records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).forEach(this::print);
  records.forEach(this::validate);
  records.forEach(record -> {
    Struct value=(Struct)record.value();
    if (record.topic().endsWith(dbz_100_enumsettest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      String c1=after.getString(c1);
      String c2=after.getString(c2);
      if (c1.equals(a)) {
        assertThat(c2).isEqualTo(a,b,c);
      }
 else       if (c1.equals(b)) {
        assertThat(c2).isEqualTo(a,b);
      }
 else       if (c1.equals(c)) {
        assertThat(c2).isEqualTo(a);
      }
 else {
        fail(c1 didn't match expected value);
      }
    }
 else     if (record.topic().endsWith(dbz_102_charsettest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      String text=after.getString(text);
      assertThat(text).isEqualTo(äº§å“�);
    }
 else     if (record.topic().endsWith(dbz_85_fractest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      Integer c1=after.getInt32(c1);
      LocalDate c1Date=LocalDate.ofEpochDay(c1);
      assertThat(c1Date.getYear()).isEqualTo(2014);
      assertThat(c1Date.getMonth()).isEqualTo(Month.SEPTEMBER);
      assertThat(c1Date.getDayOfMonth()).isEqualTo(8);
      assertThat(io.debezium.time.Date.toEpochDay(c1Date,ADJUSTER)).isEqualTo(c1);
      Long c2=after.getInt64(c2);
      Duration c2Time=Duration.ofNanos(c2 * 1_000);
      assertThat(c2Time.toHours()).isEqualTo(17);
      assertThat(c2Time.toMinutes()).isEqualTo(1071);
      assertThat(c2Time.getSeconds()).isEqualTo(64264);
      assertThat(c2Time.getNano()).isEqualTo(780000000);
      assertThat(c2Time.toNanos()).isEqualTo(64264780000000L);
      assertThat(c2Time).isEqualTo(Duration.ofHours(17).plusMinutes(51).plusSeconds(4).plusMillis(780));
      Long c3=after.getInt64(c3);
      long c3Seconds=c3 / 1000;
      long c3Millis=c3 % 1000;
      LocalDateTime c3DateTime=LocalDateTime.ofEpochSecond(c3Seconds,(int)TimeUnit.MILLISECONDS.toNanos(c3Millis),ZoneOffset.UTC);
      assertThat(c3DateTime.getYear()).isEqualTo(2014);
      assertThat(c3DateTime.getMonth()).isEqualTo(Month.SEPTEMBER);
      assertThat(c3DateTime.getDayOfMonth()).isEqualTo(8);
      assertThat(c3DateTime.getHour()).isEqualTo(17);
      assertThat(c3DateTime.getMinute()).isEqualTo(51);
      assertThat(c3DateTime.getSecond()).isEqualTo(4);
      assertThat(c3DateTime.getNano()).isEqualTo((int)TimeUnit.MILLISECONDS.toNanos(780));
      assertThat(io.debezium.time.Timestamp.toEpochMillis(c3DateTime,ADJUSTER)).isEqualTo(c3);
      String c4=after.getString(c4);
      assertTimestamp(c4);
    }
 else     if (record.topic().endsWith(dbz_114_zerovaluetest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      assertThat(after.getInt32(c1)).isNull();
      Long c2=after.getInt64(c2);
      Duration c2Time=Duration.ofNanos(c2 * 1_000);
      assertThat(c2Time.toHours()).isEqualTo(0);
      assertThat(c2Time.toMinutes() == 1 || c2Time.toMinutes() == 0).isTrue();
      assertThat(c2Time.getSeconds() == 0 || c2Time.getSeconds() == 60).isTrue();
      assertThat(c2Time.getNano()).isEqualTo(0);
      assertThat(c2Time.toNanos() == 0 || c2Time.toNanos() == 60000000000L).isTrue();
      assertThat(c2Time.equals(Duration.ofSeconds(0)) || c2Time.equals(Duration.ofMinutes(1))).isTrue();
      assertThat(after.getInt64(c3)).isNull();
      String c4=after.getString(c4);
      OffsetDateTime c4DateTime=OffsetDateTime.parse(c4,ZonedTimestamp.FORMATTER);
      assertThat(c4DateTime.getOffset()).isEqualTo(ZoneOffset.UTC);
      c4DateTime=c4DateTime.withOffsetSameInstant(ZoneOffset.of(Z));
      assertThat(c4DateTime.getYear()).isEqualTo(1970);
      assertThat(c4DateTime.getMonth()).isEqualTo(Month.JANUARY);
      assertThat(c4DateTime.getDayOfMonth()).isEqualTo(1);
      assertThat(c4DateTime.getHour()).isIn(0,1);
      assertThat(c4DateTime.getMinute()).isEqualTo(0);
      assertThat(c4DateTime.getSecond()).isEqualTo(0);
      assertThat(c4DateTime.getNano()).isEqualTo(0);
    }
 else     if (record.topic().endsWith(dbz_123_bitvaluetest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      Boolean c1=after.getBoolean(c1);
      assertThat(c1).isEqualTo(Boolean.TRUE);
      byte[] c2=after.getBytes(c2);
      assertThat(c2.length).isEqualTo(1);
      assertThat(c2[0]).isEqualTo((byte)2);
      byte[] c3=after.getBytes(c3);
      assertThat(c3.length).isEqualTo(1);
      assertThat(c3[0]).isEqualTo((byte)64);
      byte[] c4=after.getBytes(c4);
      assertThat(c4.length).isEqualTo(8);
      assertThat(c4[0]).isEqualTo((byte)219);
      assertThat(c4[1]).isEqualTo((byte)14);
      assertThat(c4[2]).isEqualTo((byte)110);
      assertThat(c4[3]).isEqualTo((byte)1);
      assertThat(c4[4]).isEqualTo((byte)0);
      assertThat(c4[5]).isEqualTo((byte)0);
      assertThat(c4[6]).isEqualTo((byte)0);
      assertThat(c4[7]).isEqualTo((byte)0);
    }
 else     if (record.topic().endsWith(dbz_147_decimalvalues)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      Object decimalValue=after.get(decimal_value);
      assertThat(decimalValue).isInstanceOf(BigDecimal.class);
      BigDecimal bigValue=(BigDecimal)decimalValue;
      assertThat(bigValue.doubleValue()).isEqualTo(12345.67,Delta.delta(0.01));
    }
 else     if (record.topic().endsWith(dbz_342_timetest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      long c1=after.getInt64(c1);
      Duration c1Time=Duration.ofNanos(c1 * 1_000);
      Duration c1ExpectedTime=toDuration(PT517H51M4.78S);
      assertEquals(c1ExpectedTime,c1Time);
      assertEquals(c1ExpectedTime.toNanos(),c1Time.toNanos());
      assertThat(c1Time.toNanos()).isEqualTo(1864264780000000L);
      assertThat(c1Time).isEqualTo(Duration.ofHours(517).plusMinutes(51).plusSeconds(4).plusMillis(780));
      long c2=after.getInt64(c2);
      Duration c2Time=Duration.ofNanos(c2 * 1_000);
      Duration c2ExpectedTime=toDuration(-PT13H14M50S);
      assertEquals(c2ExpectedTime,c2Time);
      assertEquals(c2ExpectedTime.toNanos(),c2Time.toNanos());
      assertThat(c2Time.toNanos()).isEqualTo(-47690000000000L);
      assertTrue(c2Time.isNegative());
      assertThat(c2Time).isEqualTo(Duration.ofHours(-13).minusMinutes(14).minusSeconds(50));
      long c3=after.getInt64(c3);
      Duration c3Time=Duration.ofNanos(c3 * 1_000);
      Duration c3ExpectedTime=toDuration(-PT733H0M0.001S);
      assertEquals(c3ExpectedTime,c3Time);
      assertEquals(c3ExpectedTime.toNanos(),c3Time.toNanos());
      assertThat(c3Time.toNanos()).isEqualTo(-2638800001000000L);
      assertTrue(c3Time.isNegative());
      assertThat(c3Time).isEqualTo(Duration.ofHours(-733).minusMillis(1));
      long c4=after.getInt64(c4);
      Duration c4Time=Duration.ofNanos(c4 * 1_000);
      Duration c4ExpectedTime=toDuration(-PT1H59M59.001S);
      assertEquals(c4ExpectedTime,c4Time);
      assertEquals(c4ExpectedTime.toNanos(),c4Time.toNanos());
      assertThat(c4Time.toNanos()).isEqualTo(-7199001000000L);
      assertTrue(c4Time.isNegative());
      assertThat(c4Time).isEqualTo(Duration.ofHours(-1).minusMinutes(59).minusSeconds(59).minusMillis(1));
      long c5=after.getInt64(c5);
      Duration c5Time=Duration.ofNanos(c5 * 1_000);
      Duration c5ExpectedTime=toDuration(-PT838H59M58.999999S);
      assertEquals(c5ExpectedTime,c5Time);
      assertEquals(c5ExpectedTime.toNanos(),c5Time.toNanos());
      assertThat(c5Time.toNanos()).isEqualTo(-3020398999999000L);
      assertTrue(c5Time.isNegative());
      assertThat(c5Time).isEqualTo(Duration.ofHours(-838).minusMinutes(59).minusSeconds(58).minusNanos(999999000));
    }
  }
);
  final Struct rec1=((Struct)records.recordsForTopic(DATABASE.topicForTable(dbz_1318_zerovaluetest)).get(0).value()).getStruct(after);
  final Struct rec2=((Struct)records.recordsForTopic(DATABASE.topicForTable(dbz_1318_zerovaluetest)).get(1).value()).getStruct(after);
  assertThat(rec1.get(c1)).isNull();
  assertThat(rec1.get(c2)).isEqualTo(0L);
  assertThat(rec1.get(c3)).isNull();
  assertThat(rec1.get(c4)).isEqualTo(1970-01-01T00:00:00Z);
  assertThat(rec1.get(nnc1)).isEqualTo(0);
  assertThat(rec1.get(nnc2)).isEqualTo(0L);
  assertThat(rec1.get(nnc3)).isEqualTo(0L);
  assertThat(rec2.get(c1)).isNull();
  assertThat(rec2.get(c2)).isEqualTo(60_000_000L);
  assertThat(rec2.get(c3)).isNull();
  assertThat(rec2.get(c4)).isEqualTo(1970-01-01T00:00:00Z);
  assertThat(rec2.get(nnc1)).isEqualTo(0);
  assertThat(rec2.get(nnc2)).isEqualTo(60_000_000L);
  assertThat(rec2.get(nnc3)).isEqualTo(0L);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorRegressionIT.java",80
1900,"'-tryline","@Test @FixFor(DBZ-61) public void shouldConsumeAllEventsFromDatabaseUsingBinlogAndNoSnapshotAndConnectTimesTypes() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER).with(MySqlConnectorConfig.TIME_PRECISION_MODE,TemporalPrecisionMode.CONNECT).with(database.serverTimezone,DATABASE.timezone()).build();
  start(MySqlConnector.class,config);
  int numCreateDatabase=1;
  int numCreateTables=12;
  int numDataRecords=22;
  int numCreateDefiner=1;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numDataRecords+ numCreateDefiner);
  stopConnector();
  assertThat(records).isNotNull();
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(numCreateDatabase + numCreateTables + numCreateDefiner);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(t1464075356413_testtable6)).size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz84_integer_types_table)).size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_85_fractest)).size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_100_enumsettest)).size()).isEqualTo(3);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_102_charsettest)).size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_114_zerovaluetest)).size()).isEqualTo(2);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_123_bitvaluetest)).size()).isEqualTo(2);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_104_customers)).size()).isEqualTo(4);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_147_decimalvalues)).size()).isEqualTo(1);
  assertThat(records.topics().size()).isEqualTo(1 + numCreateTables);
  assertThat(records.databaseNames().size()).isEqualTo(1);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(numCreateDatabase + numCreateTables + numCreateDefiner);
  assertThat(records.ddlRecordsForDatabase(connector_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(readbinlog_test)).isNull();
  records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).forEach(this::print);
  records.forEach(record -> {
    Struct value=(Struct)record.value();
    if (record.topic().endsWith(dbz_100_enumsettest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      String c1=after.getString(c1);
      String c2=after.getString(c2);
      if (c1.equals(a)) {
        assertThat(c2).isEqualTo(a,b,c);
      }
 else       if (c1.equals(b)) {
        assertThat(c2).isEqualTo(a,b);
      }
 else       if (c1.equals(c)) {
        assertThat(c2).isEqualTo(a);
      }
 else {
        fail(c1 didn't match expected value);
      }
    }
 else     if (record.topic().endsWith(dbz_102_charsettest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      String text=after.getString(text);
      assertThat(text).isEqualTo(äº§å“�);
    }
 else     if (record.topic().endsWith(dbz_85_fractest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      java.util.Date c1=(java.util.Date)after.get(c1);
      LocalDate c1Date=LocalDate.ofEpochDay(c1.getTime() / TimeUnit.DAYS.toMillis(1));
      assertThat(c1Date.getYear()).isEqualTo(2014);
      assertThat(c1Date.getMonth()).isEqualTo(Month.SEPTEMBER);
      assertThat(c1Date.getDayOfMonth()).isEqualTo(8);
      java.util.Date c2=(java.util.Date)after.get(c2);
      assertThat(c2.toInstant()).isEqualTo(LocalDateTime.of(1970,1,1,17,51,4,780_000_000).atOffset(ZoneOffset.UTC).toInstant());
      java.util.Date c3=(java.util.Date)after.get(c3);
      long c3Seconds=c3.getTime() / 1000;
      long c3Millis=c3.getTime() % 1000;
      LocalDateTime c3DateTime=LocalDateTime.ofEpochSecond(c3Seconds,(int)TimeUnit.MILLISECONDS.toNanos(c3Millis),ZoneOffset.UTC);
      assertThat(c3DateTime.getYear()).isEqualTo(2014);
      assertThat(c3DateTime.getMonth()).isEqualTo(Month.SEPTEMBER);
      assertThat(c3DateTime.getDayOfMonth()).isEqualTo(8);
      assertThat(c3DateTime.getHour()).isEqualTo(17);
      assertThat(c3DateTime.getMinute()).isEqualTo(51);
      assertThat(c3DateTime.getSecond()).isEqualTo(4);
      assertThat(c3DateTime.getNano()).isEqualTo((int)TimeUnit.MILLISECONDS.toNanos(780));
      assertThat(io.debezium.time.Timestamp.toEpochMillis(c3DateTime,ADJUSTER)).isEqualTo(c3.getTime());
      String c4=after.getString(c4);
      assertTimestamp(c4);
    }
 else     if (record.topic().endsWith(dbz_114_zerovaluetest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      java.util.Date c1=(java.util.Date)after.get(c1);
      assertThat(c1).isNull();
      java.util.Date c2=(java.util.Date)after.get(c2);
      LocalTime c2Time=LocalTime.ofNanoOfDay(TimeUnit.MILLISECONDS.toNanos(c2.getTime()));
      assertThat(c2Time.getHour()).isEqualTo(0);
      assertThat(c2Time.getMinute() == 0 || c2Time.getMinute() == 1).isTrue();
      assertThat(c2Time.getSecond()).isEqualTo(0);
      assertThat(c2Time.getNano()).isEqualTo(0);
      java.util.Date c3=(java.util.Date)after.get(c3);
      assertThat(c3).isNull();
      String c4=after.getString(c4);
      OffsetDateTime c4DateTime=OffsetDateTime.parse(c4,ZonedTimestamp.FORMATTER);
      assertThat(c4DateTime.getOffset()).isEqualTo(ZoneOffset.UTC);
      c4DateTime=c4DateTime.withOffsetSameInstant(ZoneOffset.of(Z));
      assertThat(c4DateTime.getYear()).isEqualTo(1970);
      assertThat(c4DateTime.getMonth()).isEqualTo(Month.JANUARY);
      assertThat(c4DateTime.getDayOfMonth()).isEqualTo(1);
      assertThat(c4DateTime.getHour()).isIn(0,1);
      assertThat(c4DateTime.getMinute()).isEqualTo(0);
      assertThat(c4DateTime.getSecond()).isEqualTo(0);
      assertThat(c4DateTime.getNano()).isEqualTo(0);
    }
 else     if (record.topic().endsWith(dbz_123_bitvaluetest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      Boolean c1=after.getBoolean(c1);
      assertThat(c1).isEqualTo(Boolean.TRUE);
      byte[] c2=after.getBytes(c2);
      assertThat(c2.length).isEqualTo(1);
      assertThat(c2[0]).isEqualTo((byte)2);
      byte[] c3=after.getBytes(c3);
      assertThat(c3.length).isEqualTo(1);
      assertThat(c3[0]).isEqualTo((byte)64);
      byte[] c4=after.getBytes(c4);
      assertThat(c4.length).isEqualTo(8);
      assertThat(c4[0]).isEqualTo((byte)219);
      assertThat(c4[1]).isEqualTo((byte)14);
      assertThat(c4[2]).isEqualTo((byte)110);
      assertThat(c4[3]).isEqualTo((byte)1);
      assertThat(c4[4]).isEqualTo((byte)0);
      assertThat(c4[5]).isEqualTo((byte)0);
      assertThat(c4[6]).isEqualTo((byte)0);
      assertThat(c4[7]).isEqualTo((byte)0);
    }
 else     if (record.topic().endsWith(dbz_147_decimalvalues)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      Object decimalValue=after.get(decimal_value);
      assertThat(decimalValue).isInstanceOf(BigDecimal.class);
      BigDecimal bigValue=(BigDecimal)decimalValue;
      assertThat(bigValue.doubleValue()).isEqualTo(12345.67,Delta.delta(0.01));
    }
  }
);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorRegressionIT.java",365
1901,"'-tryline","@Test public void shouldConsumeAllEventsFromDatabaseUsingSnapshot() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().build();
  start(MySqlConnector.class,config);
  int numTables=12;
  int numDataRecords=22;
  int numDdlRecords=numTables * 2 + 3;
  int numCreateDefiner=1;
  int numSetVariables=1;
  SourceRecords records=consumeRecordsByTopic(numDdlRecords + numSetVariables + numDataRecords);
  stopConnector();
  assertThat(records).isNotNull();
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(numDdlRecords + numSetVariables);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(t1464075356413_testtable6)).size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz84_integer_types_table)).size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_85_fractest)).size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_100_enumsettest)).size()).isEqualTo(3);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_102_charsettest)).size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_114_zerovaluetest)).size()).isEqualTo(2);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_1318_zerovaluetest)).size()).isEqualTo(2);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_123_bitvaluetest)).size()).isEqualTo(2);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_104_customers)).size()).isEqualTo(4);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_147_decimalvalues)).size()).isEqualTo(1);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_195_numvalues)).size()).isEqualTo(3);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_342_timetest)).size()).isEqualTo(1);
  assertThat(records.topics().size()).isEqualTo(numTables + 1);
  assertThat(records.databaseNames().size()).isEqualTo(2);
  assertThat(records.databaseNames()).containsOnly(DATABASE.getDatabaseName(),);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(numDdlRecords);
  assertThat(records.ddlRecordsForDatabase(connector_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(readbinlog_test)).isNull();
  assertThat(records.ddlRecordsForDatabase().size()).isEqualTo(1);
  records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).forEach(this::print);
  records.forEach(this::validate);
  records.forEach(record -> {
    Struct value=(Struct)record.value();
    if (record.topic().endsWith(dbz_100_enumsettest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      String c1=after.getString(c1);
      String c2=after.getString(c2);
      if (c1.equals(a)) {
        assertThat(c2).isEqualTo(a,b,c);
      }
 else       if (c1.equals(b)) {
        assertThat(c2).isEqualTo(a,b);
      }
 else       if (c1.equals(c)) {
        assertThat(c2).isEqualTo(a);
      }
 else {
        fail(c1 didn't match expected value);
      }
    }
 else     if (record.topic().endsWith(dbz_102_charsettest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      String text=after.getString(text);
      assertThat(text).isEqualTo(äº§å“�);
    }
 else     if (record.topic().endsWith(dbz_85_fractest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      Integer c1=after.getInt32(c1);
      LocalDate c1Date=LocalDate.ofEpochDay(c1);
      assertThat(c1Date.getYear()).isEqualTo(2014);
      assertThat(c1Date.getMonth()).isEqualTo(Month.SEPTEMBER);
      assertThat(c1Date.getDayOfMonth()).isEqualTo(8);
      assertThat(io.debezium.time.Date.toEpochDay(c1Date,ADJUSTER)).isEqualTo(c1);
      Long c2=after.getInt64(c2);
      Duration c2Time=Duration.ofNanos(c2 * 1_000);
      assertThat(c2Time.toHours()).isEqualTo(17);
      assertThat(c2Time.toMinutes()).isEqualTo(1071);
      assertThat(c2Time.getSeconds()).isEqualTo(64264);
      assertThat(c2Time.getNano()).isEqualTo(780000000);
      assertThat(c2Time.toNanos()).isEqualTo(64264780000000L);
      assertThat(c2Time).isEqualTo(Duration.ofHours(17).plusMinutes(51).plusSeconds(4).plusMillis(780));
      Long c3=after.getInt64(c3);
      long c3Seconds=c3 / 1000;
      long c3Millis=c3 % 1000;
      LocalDateTime c3DateTime=LocalDateTime.ofEpochSecond(c3Seconds,(int)TimeUnit.MILLISECONDS.toNanos(c3Millis),ZoneOffset.UTC);
      assertThat(c3DateTime.getYear()).isEqualTo(2014);
      assertThat(c3DateTime.getMonth()).isEqualTo(Month.SEPTEMBER);
      assertThat(c3DateTime.getDayOfMonth()).isEqualTo(8);
      assertThat(c3DateTime.getHour()).isEqualTo(17);
      assertThat(c3DateTime.getMinute()).isEqualTo(51);
      assertThat(c3DateTime.getSecond()).isEqualTo(4);
      assertThat(c3DateTime.getNano()).isEqualTo((int)TimeUnit.MILLISECONDS.toNanos(780));
      assertThat(io.debezium.time.Timestamp.toEpochMillis(c3DateTime,ADJUSTER)).isEqualTo(c3);
      String c4=after.getString(c4);
      OffsetDateTime c4DateTime=OffsetDateTime.parse(c4,ZonedTimestamp.FORMATTER);
      assertThat(c4DateTime.getYear()).isEqualTo(2014);
      assertThat(c4DateTime.getMonth()).isEqualTo(Month.SEPTEMBER);
      assertThat(c4DateTime.getDayOfMonth()).isEqualTo(9);
      assertThat(c4DateTime.getHour()).isEqualTo(4);
      assertThat(c4DateTime.getMinute()).isEqualTo(51);
      assertThat(c4DateTime.getSecond()).isEqualTo(4);
      assertThat(c4DateTime.getNano()).isEqualTo((int)TimeUnit.MILLISECONDS.toNanos(780));
      OffsetDateTime expected=ZonedDateTime.of(LocalDateTime.of(2014,9,8,17,51,4,(int)TimeUnit.MILLISECONDS.toNanos(780)),UniqueDatabase.TIMEZONE).withZoneSameInstant(ZoneOffset.UTC).toOffsetDateTime();
      assertThat(c4DateTime).isEqualTo(expected);
    }
 else     if (record.topic().endsWith(dbz_123_bitvaluetest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      Boolean c1=after.getBoolean(c1);
      assertThat(c1).isEqualTo(Boolean.TRUE);
      byte[] c2=after.getBytes(c2);
      assertThat(c2.length).isEqualTo(1);
      assertThat(c2[0]).isEqualTo((byte)2);
      byte[] c3=after.getBytes(c3);
      assertThat(c3.length).isEqualTo(1);
      assertThat(c3[0]).isEqualTo((byte)64);
      byte[] c4=after.getBytes(c4);
      assertThat(c4.length).isEqualTo(8);
      assertThat(c4[0]).isEqualTo((byte)219);
      assertThat(c4[1]).isEqualTo((byte)14);
      assertThat(c4[2]).isEqualTo((byte)110);
      assertThat(c4[3]).isEqualTo((byte)1);
      assertThat(c4[4]).isEqualTo((byte)0);
      assertThat(c4[5]).isEqualTo((byte)0);
      assertThat(c4[6]).isEqualTo((byte)0);
      assertThat(c4[7]).isEqualTo((byte)0);
    }
 else     if (record.topic().endsWith(dbz_147_decimalvalues)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      Object decimalValue=after.get(decimal_value);
      assertThat(decimalValue).isInstanceOf(BigDecimal.class);
      BigDecimal bigValue=(BigDecimal)decimalValue;
      assertThat(bigValue.doubleValue()).isEqualTo(12345.67,Delta.delta(0.01));
    }
 else     if (record.topic().endsWith(dbz_195_numvalues)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      Object searchVersion=after.get(search_version_read);
      assertThat(searchVersion).isInstanceOf(Integer.class);
      Integer intValue=(Integer)searchVersion;
      if (intValue.intValue() < 0) {
        assertThat(intValue.intValue()).isEqualTo(-2147483648);
      }
 else       if (intValue.intValue() > 0) {
        assertThat(intValue.intValue()).isEqualTo(2147483647);
      }
 else {
        assertThat(intValue.intValue()).isEqualTo(0);
      }
    }
 else     if (record.topic().endsWith(dbz_342_timetest)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      long c1=after.getInt64(c1);
      Duration c1Time=Duration.ofNanos(c1 * 1_000);
      Duration c1ExpectedTime=toDuration(PT517H51M4.78S);
      assertEquals(c1ExpectedTime,c1Time);
      assertEquals(c1ExpectedTime.toNanos(),c1Time.toNanos());
      assertThat(c1Time.toNanos()).isEqualTo(1864264780000000L);
      assertThat(c1Time).isEqualTo(Duration.ofHours(517).plusMinutes(51).plusSeconds(4).plusMillis(780));
      long c2=after.getInt64(c2);
      Duration c2Time=Duration.ofNanos(c2 * 1_000);
      Duration c2ExpectedTime=toDuration(-PT13H14M50S);
      assertEquals(c2ExpectedTime,c2Time);
      assertEquals(c2ExpectedTime.toNanos(),c2Time.toNanos());
      assertThat(c2Time.toNanos()).isEqualTo(-47690000000000L);
      assertTrue(c2Time.isNegative());
      assertThat(c2Time).isEqualTo(Duration.ofHours(-13).minusMinutes(14).minusSeconds(50));
      long c3=after.getInt64(c3);
      Duration c3Time=Duration.ofNanos(c3 * 1_000);
      Duration c3ExpectedTime=toDuration(-PT733H0M0.001S);
      assertEquals(c3ExpectedTime,c3Time);
      assertEquals(c3ExpectedTime.toNanos(),c3Time.toNanos());
      assertThat(c3Time.toNanos()).isEqualTo(-2638800001000000L);
      assertTrue(c3Time.isNegative());
      assertThat(c3Time).isEqualTo(Duration.ofHours(-733).minusMillis(1));
      long c4=after.getInt64(c4);
      Duration c4Time=Duration.ofNanos(c4 * 1_000);
      Duration c4ExpectedTime=toDuration(-PT1H59M59.001S);
      assertEquals(c4ExpectedTime,c4Time);
      assertEquals(c4ExpectedTime.toNanos(),c4Time.toNanos());
      assertThat(c4Time.toNanos()).isEqualTo(-7199001000000L);
      assertTrue(c4Time.isNegative());
      assertThat(c4Time).isEqualTo(Duration.ofHours(-1).minusMinutes(59).minusSeconds(59).minusMillis(1));
      long c5=after.getInt64(c5);
      Duration c5Time=Duration.ofNanos(c5 * 1_000);
      Duration c5ExpectedTime=toDuration(-PT838H59M58.999999S);
      assertEquals(c5ExpectedTime,c5Time);
      assertEquals(c5ExpectedTime.toNanos(),c5Time.toNanos());
      assertThat(c5Time.toNanos()).isEqualTo(-3020398999999000L);
      assertTrue(c5Time.isNegative());
      assertThat(c5Time).isEqualTo(Duration.ofHours(-838).minusMinutes(59).minusSeconds(58).minusNanos(999999000));
    }
  }
);
  try (MySqlTestConnection conn=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    final Struct rec1=((Struct)records.recordsForTopic(DATABASE.topicForTable(dbz_1318_zerovaluetest)).get(0).value()).getStruct(after);
    final Struct rec2=((Struct)records.recordsForTopic(DATABASE.topicForTable(dbz_1318_zerovaluetest)).get(1).value()).getStruct(after);
    assertThat(rec1.get(c1)).isNull();
    assertThat(rec1.get(c2)).isEqualTo(0L);
    assertThat(rec1.get(c3)).isNull();
    assertThat(rec1.get(c4)).isEqualTo(conn.databaseAsserts().currentDateTimeDefaultOptional(1970-01-01T00:00:00Z));
    assertThat(rec1.get(nnc1)).isEqualTo(0);
    assertThat(rec1.get(nnc2)).isEqualTo(0L);
    assertThat(rec1.get(nnc3)).isEqualTo(0L);
    assertThat(rec2.get(c1)).isNull();
    assertThat(rec2.get(c2)).isEqualTo(60_000_000L);
    assertThat(rec2.get(c3)).isNull();
    assertThat(rec2.get(c4)).isEqualTo(conn.databaseAsserts().currentDateTimeDefaultOptional(1970-01-01T00:00:00Z));
    assertThat(rec2.get(nnc1)).isEqualTo(0);
    assertThat(rec2.get(nnc2)).isEqualTo(60_000_000L);
    assertThat(rec2.get(nnc3)).isEqualTo(0L);
  }
 }
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorRegressionIT.java",573
1902,"'-tryline","@Test public void shouldConsumeDatesCorrectlyWhenClientTimezonePrecedesServerTimezoneUsingSnapshot() throws SQLException, InterruptedException {
  TimeZone originalTimeZone=TimeZone.getDefault();
  try {
    TimeZone.setDefault(TimeZone.getTimeZone(GMT-12));
    config=DATABASE.defaultConfig().with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(dbz_85_fractest)).with(DatabaseHistory.STORE_ONLY_MONITORED_TABLES_DDL,true).build();
    start(MySqlConnector.class,config);
    int numDdlRecords=6;
    int numDataRecords=1;
    SourceRecords records=consumeRecordsByTopic(numDdlRecords + numDataRecords);
    stopConnector();
    assertThat(records).isNotNull();
    assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(numDdlRecords);
    assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_85_fractest)).size()).isEqualTo(1);
    assertThat(records.topics().size()).isEqualTo(2);
    records.forEach(this::validate);
    records.forEach(record -> {
      Struct value=(Struct)record.value();
      if (record.topic().endsWith(dbz_85_fractest)) {
        Struct after=value.getStruct(Envelope.FieldName.AFTER);
        Integer c1=after.getInt32(c1);
        LocalDate c1Date=LocalDate.ofEpochDay(c1);
        assertThat(c1Date.getYear()).isEqualTo(2014);
        assertThat(c1Date.getMonth()).isEqualTo(Month.SEPTEMBER);
        assertThat(c1Date.getDayOfMonth()).isEqualTo(8);
        assertThat(io.debezium.time.Date.toEpochDay(c1Date,ADJUSTER)).isEqualTo(c1);
        Long c2=after.getInt64(c2);
        Duration c2Time=Duration.ofNanos(c2 * 1_000);
        assertThat(c2Time.toHours()).isEqualTo(17);
        assertThat(c2Time.toMinutes()).isEqualTo(1071);
        assertThat(c2Time.getSeconds()).isEqualTo(64264);
        assertThat(c2Time.getNano()).isEqualTo(780000000);
        assertThat(c2Time.toNanos()).isEqualTo(64264780000000L);
        assertThat(c2Time).isEqualTo(Duration.ofHours(17).plusMinutes(51).plusSeconds(4).plusMillis(780));
        Long c3=after.getInt64(c3);
        long c3Seconds=c3 / 1000;
        long c3Millis=c3 % 1000;
        LocalDateTime c3DateTime=LocalDateTime.ofEpochSecond(c3Seconds,(int)TimeUnit.MILLISECONDS.toNanos(c3Millis),ZoneOffset.UTC);
        assertThat(c3DateTime.getYear()).isEqualTo(2014);
        assertThat(c3DateTime.getMonth()).isEqualTo(Month.SEPTEMBER);
        assertThat(c3DateTime.getDayOfMonth()).isEqualTo(8);
        assertThat(c3DateTime.getHour()).isEqualTo(17);
        assertThat(c3DateTime.getMinute()).isEqualTo(51);
        assertThat(c3DateTime.getSecond()).isEqualTo(4);
        assertThat(c3DateTime.getNano()).isEqualTo((int)TimeUnit.MILLISECONDS.toNanos(780));
        assertThat(io.debezium.time.Timestamp.toEpochMillis(c3DateTime,ADJUSTER)).isEqualTo(c3);
        String c4=after.getString(c4);
        assertTimestamp(c4);
      }
    }
);
  }
  finally {
    TimeZone.setDefault(originalTimeZone);
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorRegressionIT.java",837
1903,"'-tryline","@Test @FixFor(DBZ-147) public void shouldConsumeAllEventsFromDecimalTableInDatabaseUsingBinlogAndNoSnapshot() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(dbz_147_decimalvalues)).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER.toString()).with(MySqlConnectorConfig.DECIMAL_HANDLING_MODE,DecimalHandlingMode.DOUBLE).build();
  start(MySqlConnector.class,config);
  waitForStreamingRunning(mysql,DATABASE.getServerName(),getStreamingNamespace());
  int numCreateDatabase=1;
  int numCreateTables=10;
  int numDataRecords=1;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numDataRecords);
  stopConnector();
  assertThat(records).isNotNull();
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(numCreateDatabase + numCreateTables);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_147_decimalvalues)).size()).isEqualTo(1);
  assertThat(records.topics().size()).isEqualTo(2);
  records.forEach(this::validate);
  records.forEach(record -> {
    Struct value=(Struct)record.value();
    if (record.topic().endsWith(dbz_147_decimalvalues)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      Object decimalValue=after.get(decimal_value);
      assertThat(decimalValue).isInstanceOf(Double.class);
      Double doubleValue=(Double)decimalValue;
      assertThat(doubleValue).isEqualTo(12345.67,Delta.delta(0.01));
    }
  }
);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorRegressionIT.java",925
1904,"'-tryline","@Test @FixFor(DBZ-611) public void shouldConsumeDecimalAsStringFromBinlog() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(dbz_147_decimalvalues)).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER.toString()).with(MySqlConnectorConfig.DECIMAL_HANDLING_MODE,DecimalHandlingMode.STRING).build();
  start(MySqlConnector.class,config);
  int numCreateDatabase=1;
  int numCreateTables=10;
  int numDataRecords=1;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numDataRecords);
  stopConnector();
  assertThat(records).isNotNull();
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(numCreateDatabase + numCreateTables);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_147_decimalvalues)).size()).isEqualTo(1);
  assertThat(records.topics().size()).isEqualTo(2);
  records.forEach(this::validate);
  records.forEach(record -> {
    Struct value=(Struct)record.value();
    if (record.topic().endsWith(dbz_147_decimalvalues)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      Object decimalValue=after.get(decimal_value);
      assertThat(decimalValue).isInstanceOf(String.class);
      assertThat(decimalValue).isEqualTo(12345.67);
    }
  }
);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorRegressionIT.java",967
1905,"'-tryline","@Test @FixFor(DBZ-611) public void shouldConsumeDecimalAsStringFromSnapshot() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(dbz_147_decimalvalues)).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(DatabaseHistory.STORE_ONLY_MONITORED_TABLES_DDL,true).with(MySqlConnectorConfig.DECIMAL_HANDLING_MODE,DecimalHandlingMode.STRING).build();
  start(MySqlConnector.class,config);
  int ddlRecords=6;
  int numDataRecords=1;
  SourceRecords records=consumeRecordsByTopic(ddlRecords + numDataRecords);
  stopConnector();
  assertThat(records).isNotNull();
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(ddlRecords);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_147_decimalvalues)).size()).isEqualTo(1);
  assertThat(records.topics().size()).isEqualTo(2);
  records.forEach(this::validate);
  records.forEach(record -> {
    Struct value=(Struct)record.value();
    if (record.topic().endsWith(dbz_147_decimalvalues)) {
      Struct after=value.getStruct(Envelope.FieldName.AFTER);
      Object decimalValue=after.get(decimal_value);
      assertThat(decimalValue).isInstanceOf(String.class);
      assertThat(decimalValue).isEqualTo(12345.67);
    }
  }
);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlConnectorRegressionIT.java",1007
1906,"'-tryline","@Test @FixFor(DBZ-1194) public void shouldAcceptAllZeroDatetimeInPrimaryKey() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).build();
  start(MySqlConnector.class,config);
  final int numDatabase=3;
  final int numTables=2;
  final int numInserts=1;
  final int numOthers=1;
  SourceRecords records=consumeRecordsByTopic(numDatabase + numTables + numInserts+ numOthers);
  assertThat(records).isNotNull();
  records.forEach(this::validate);
  List<SourceRecord> changes=records.recordsForTopic(DATABASE.topicForTable(dbz_1194_datetime_key_test));
  assertThat(changes).hasSize(1);
  assertKey(changes);
  try (final Connection conn=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName()).connection()){
    conn.createStatement().execute(SET sql_mode='';);
    conn.createStatement().execute(INSERT INTO dbz_1194_datetime_key_test VALUES (default, '0000-00-00 00:00:00', '0000-00-00', '00:00:00'));
  }
   records=consumeRecordsByTopic(1);
  assertThat(records).isNotNull();
  records.forEach(this::validate);
  changes=records.recordsForTopic(DATABASE.topicForTable(dbz_1194_datetime_key_test));
  assertThat(changes).hasSize(1);
  assertKey(changes);
  stopConnector();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlDateTimeInKeyIT.java",53
1907,"'-tryline","@Test @FixFor(DBZ-751) public void shouldSetPrecisionSchemaParameter() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).build();
  start(MySqlConnector.class,config);
  int numCreateDatabase=1;
  int numCreateTables=1;
  int numInserts=1;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numInserts);
  stopConnector();
  assertThat(records).isNotNull();
  records.forEach(this::validate);
  List<SourceRecord> dmls=records.recordsForTopic(DATABASE.topicForTable(dbz_751_decimal_column_test));
  assertThat(dmls).hasSize(1);
  SourceRecord insert=dmls.get(0);
  Map<String,String> rating1SchemaParameters=insert.valueSchema().field(before).schema().field(rating1).schema().parameters();
  assertThat(rating1SchemaParameters).includes(entry(scale,0),entry(PRECISION_PARAMETER_KEY,10));
  Map<String,String> rating2SchemaParameters=insert.valueSchema().field(before).schema().field(rating2).schema().parameters();
  assertThat(rating2SchemaParameters).includes(entry(scale,4),entry(PRECISION_PARAMETER_KEY,8));
  Map<String,String> rating3SchemaParameters=insert.valueSchema().field(before).schema().field(rating3).schema().parameters();
  assertThat(rating3SchemaParameters).includes(entry(scale,0),entry(PRECISION_PARAMETER_KEY,7));
  Map<String,String> rating4SchemaParameters=insert.valueSchema().field(before).schema().field(rating4).schema().parameters();
  assertThat(rating4SchemaParameters).includes(entry(scale,0),entry(PRECISION_PARAMETER_KEY,6));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlDecimalColumnIT.java",60
1908,"'-tryline","@Test @FixFor(DBZ-730) @SkipWhenKafkaVersion(value=SkipWhenKafkaVersion.KafkaVersion.KAFKA_1XX,check=EqualityCheck.EQUAL,description=No compatible with Kafka 1.x) public void testPreciseDecimalHandlingMode() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(TABLE_NAME)).with(MySqlConnectorConfig.DECIMAL_HANDLING_MODE,RelationalDatabaseConnectorConfig.DecimalHandlingMode.PRECISE).build();
  start(MySqlConnector.class,config);
  assertBigDecimalChangeRecord(consumeInsert());
  stopConnector();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlDecimalIT.java",65
1909,"'-tryline","@Test @FixFor(DBZ-730) public void testDoubleDecimalHandlingMode() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(TABLE_NAME)).with(MySqlConnectorConfig.DECIMAL_HANDLING_MODE,RelationalDatabaseConnectorConfig.DecimalHandlingMode.DOUBLE).build();
  start(MySqlConnector.class,config);
  assertDoubleChangeRecord(consumeInsert());
  stopConnector();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlDecimalIT.java",82
1910,"'-tryline","@Test @FixFor(DBZ-730) public void testStringDecimalHandlingMode() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(TABLE_NAME)).with(MySqlConnectorConfig.DECIMAL_HANDLING_MODE,RelationalDatabaseConnectorConfig.DecimalHandlingMode.STRING).build();
  start(MySqlConnector.class,config);
  assertStringChangeRecord(consumeInsert());
  stopConnector();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlDecimalIT.java",98
1911,"'-tryline","private SourceRecord consumeInsert() throws InterruptedException {
  final int numDatabase=2;
  final int numTables=4;
  final int numOthers=1;
  SourceRecords records=consumeRecordsByTopic(numDatabase + numTables + numOthers);
  assertThat(records).isNotNull();
  List<SourceRecord> events=records.recordsForTopic(DATABASE.topicForTable(TABLE_NAME));
  assertThat(events).hasSize(1);
  return events.get(0);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlDecimalIT.java",114
1912,"'-tryline","@Test public void databaseWithDefaultCharsetTest() throws InterruptedException, SQLException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(DATA) + , + DATABASE.qualifiedTableName(DATASTREAM)).build();
  start(MySqlConnector.class,config);
  Testing.Print.enable();
  AbstractConnectorTest.SourceRecords records=consumeRecordsByTopic(7);
  final SourceRecord record=records.recordsForTopic(DATABASE.topicForTable(DATA)).get(0);
  assertThat(((Struct)record.value()).getStruct(after).getString(MESSAGE)).isEqualTo(Å½luÅ¥ouÄ�kÃ½);
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.execute(CREATE TABLE DATASTREAM (MESSAGE TEXT););
      connection.execute(INSERT INTO DATASTREAM VALUES ('Å½luÅ¥ouÄ�kÃ½'););
    }
   }
   records=consumeRecordsByTopic(2);
  final SourceRecord recordStream=records.recordsForTopic(DATABASE.topicForTable(DATASTREAM)).get(0);
  assertThat(((Struct)recordStream.value()).getStruct(after).getString(MESSAGE)).isEqualTo(Å½luÅ¥ouÄ�kÃ½);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MysqlDefaultDatabaseCharsetIT.java",50
1913,"'-tryline","@Test @FixFor(DBZ-1123) public void generatedValueTest() throws InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(EVENT_COUNT);
  SourceRecord record=records.recordsForTopic(DATABASE.topicForTable(GENERATED_TABLE)).get(0);
  validate(record);
  Schema schemaB=record.valueSchema().fields().get(1).schema().fields().get(1).schema();
  Integer recordB=((Struct)record.value()).getStruct(after).getInt32(B);
  Schema schemaC=record.valueSchema().fields().get(1).schema().fields().get(2).schema();
  Integer recordC=((Struct)record.value()).getStruct(after).getInt32(C);
  assertThat(schemaB.isOptional()).isEqualTo(true);
  assertThat(schemaB.defaultValue()).isEqualTo(null);
  assertThat(schemaC.isOptional()).isEqualTo(false);
  assertThat(schemaC.defaultValue()).isEqualTo(null);
  assertThat(recordB).isEqualTo(30);
  assertThat(recordC).isEqualTo(45);
  validate(record);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MysqlDefaultGeneratedValueIT.java",59
1914,"'-tryline","@Test public void allZeroDateAndTimeTypeTest() throws InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(ALL_ZERO_DATE_AND_TIME_TABLE)).build();
  start(MySqlConnector.class,config);
  AbstractConnectorTest.SourceRecords records=consumeRecordsByTopic(7);
  final SourceRecord record=records.recordsForTopic(DATABASE.topicForTable(ALL_ZERO_DATE_AND_TIME_TABLE)).get(0);
  Schema schemaA=record.valueSchema().fields().get(1).schema().fields().get(0).schema();
  Schema schemaB=record.valueSchema().fields().get(1).schema().fields().get(1).schema();
  Schema schemaC=record.valueSchema().fields().get(1).schema().fields().get(2).schema();
  Schema schemaD=record.valueSchema().fields().get(1).schema().fields().get(3).schema();
  Schema schemaE=record.valueSchema().fields().get(1).schema().fields().get(4).schema();
  Schema schemaF=record.valueSchema().fields().get(1).schema().fields().get(5).schema();
  Schema schemaG=record.valueSchema().fields().get(1).schema().fields().get(6).schema();
  Schema schemaH=record.valueSchema().fields().get(1).schema().fields().get(7).schema();
  Schema schemaI=record.valueSchema().fields().get(1).schema().fields().get(8).schema();
  Schema schemaJ=record.valueSchema().fields().get(1).schema().fields().get(9).schema();
  Schema schemaK=record.valueSchema().fields().get(1).schema().fields().get(10).schema();
  Schema schemaL=record.valueSchema().fields().get(1).schema().fields().get(11).schema();
  ZonedDateTime a=ZonedDateTime.ofInstant(Instant.EPOCH,ZoneOffset.UTC);
  String isoStringA=ZonedTimestamp.toIsoString(a,ZoneOffset.UTC,MySqlValueConverters::adjustTemporal);
  assertThat(schemaA.defaultValue()).isEqualTo(isoStringA);
  assertThat(schemaB.isOptional()).isEqualTo(true);
  assertThat(schemaB.defaultValue()).isEqualTo(null);
  ZonedDateTime c=ZonedDateTime.ofInstant(Instant.EPOCH,ZoneOffset.UTC);
  String isoStringC=ZonedTimestamp.toIsoString(c,ZoneOffset.UTC,MySqlValueConverters::adjustTemporal);
  assertThat(schemaC.defaultValue()).isEqualTo(isoStringC);
  assertThat(schemaD.isOptional()).isEqualTo(true);
  assertThat(schemaD.defaultValue()).isEqualTo(null);
  assertThat(schemaE.defaultValue()).isEqualTo(0);
  assertThat(schemaF.isOptional()).isEqualTo(true);
  assertThat(schemaF.defaultValue()).isEqualTo(null);
  assertThat(schemaG.defaultValue()).isEqualTo(0);
  assertThat(schemaH.isOptional()).isEqualTo(true);
  assertThat(schemaH.defaultValue()).isEqualTo(null);
  String valueI=1970-01-01 00:00:00;
  long toEpochMillisI=Timestamp.toEpochMillis(LocalDateTime.from(DateTimeFormatter.ofPattern(yyyy-MM-dd HH:mm:ss).parse(valueI)),MySqlValueConverters::adjustTemporal);
  assertThat(schemaI.defaultValue()).isEqualTo(toEpochMillisI);
  assertThat(schemaJ.isOptional()).isEqualTo(true);
  assertThat(schemaJ.defaultValue()).isEqualTo(null);
  String valueK=1970-01-01 00:00:00;
  long toEpochMillisK=Timestamp.toEpochMillis(LocalDateTime.from(DateTimeFormatter.ofPattern(yyyy-MM-dd HH:mm:ss).parse(valueK)),MySqlValueConverters::adjustTemporal);
  assertThat(schemaK.defaultValue()).isEqualTo(toEpochMillisK);
  assertThat(schemaL.isOptional()).isEqualTo(true);
  assertThat(schemaL.defaultValue()).isEqualTo(null);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MysqlDefaultValueAllZeroTimeIT.java",59
1915,"'-tryline","@Test @SkipWhenKafkaVersion(check=EqualityCheck.EQUAL,value=KafkaVersion.KAFKA_1XX,description=Not compatible with Kafka 1.x) public void unsignedTinyIntTest() throws InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(EVENT_COUNT);
  SourceRecord record=records.recordsForTopic(DATABASE.topicForTable(UNSIGNED_TINYINT_TABLE)).get(0);
  validate(record);
  Schema schemaA=record.valueSchema().fields().get(1).schema().fields().get(0).schema();
  Schema schemaB=record.valueSchema().fields().get(1).schema().fields().get(1).schema();
  Schema schemaC=record.valueSchema().fields().get(1).schema().fields().get(2).schema();
  Schema schemaD=record.valueSchema().fields().get(1).schema().fields().get(3).schema();
  Schema schemaE=record.valueSchema().fields().get(1).schema().fields().get(4).schema();
  Schema schemaF=record.valueSchema().fields().get(1).schema().fields().get(5).schema();
  assertThat(schemaA.isOptional()).isEqualTo(true);
  assertThat(schemaA.defaultValue()).isEqualTo((short)0);
  assertThat(schemaB.isOptional()).isEqualTo(true);
  assertThat(schemaB.defaultValue()).isEqualTo((short)10);
  assertThat(schemaC.isOptional()).isEqualTo(true);
  assertThat(schemaC.defaultValue()).isEqualTo(null);
  assertThat(schemaD.isOptional()).isEqualTo(false);
  assertThat(schemaE.isOptional()).isEqualTo(false);
  assertThat(schemaE.defaultValue()).isEqualTo((short)0);
  assertThat(schemaF.isOptional()).isEqualTo(false);
  assertThat(schemaF.defaultValue()).isEqualTo((short)0);
  assertEmptyFieldValue(record,G);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MysqlDefaultValueIT.java",85
1916,"'-tryline","@Test @SkipWhenKafkaVersion(check=EqualityCheck.EQUAL,value=KafkaVersion.KAFKA_1XX,description=Not compatible with Kafka 1.x) public void unsignedSmallIntTest() throws InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(EVENT_COUNT);
  SourceRecord record=records.recordsForTopic(DATABASE.topicForTable(UNSIGNED_SMALLINT_TABLE)).get(0);
  validate(record);
  Schema schemaA=record.valueSchema().fields().get(1).schema().fields().get(0).schema();
  Schema schemaB=record.valueSchema().fields().get(1).schema().fields().get(1).schema();
  Schema schemaC=record.valueSchema().fields().get(1).schema().fields().get(2).schema();
  Schema schemaD=record.valueSchema().fields().get(1).schema().fields().get(3).schema();
  Schema schemaE=record.valueSchema().fields().get(1).schema().fields().get(4).schema();
  Schema schemaF=record.valueSchema().fields().get(1).schema().fields().get(5).schema();
  assertThat(schemaA.isOptional()).isEqualTo(true);
  assertThat(schemaA.defaultValue()).isEqualTo(0);
  assertThat(schemaB.isOptional()).isEqualTo(true);
  assertThat(schemaB.defaultValue()).isEqualTo(10);
  assertThat(schemaC.isOptional()).isEqualTo(true);
  assertThat(schemaC.defaultValue()).isEqualTo(null);
  assertThat(schemaD.isOptional()).isEqualTo(false);
  assertThat(schemaE.isOptional()).isEqualTo(false);
  assertThat(schemaE.defaultValue()).isEqualTo(0);
  assertThat(schemaF.isOptional()).isEqualTo(false);
  assertThat(schemaF.defaultValue()).isEqualTo(0);
  assertEmptyFieldValue(record,G);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MysqlDefaultValueIT.java",119
1917,"'-tryline","@Test @SkipWhenKafkaVersion(check=EqualityCheck.EQUAL,value=KafkaVersion.KAFKA_1XX,description=Not compatible with Kafka 1.x) public void unsignedMediumIntTest() throws InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(EVENT_COUNT);
  SourceRecord record=records.recordsForTopic(DATABASE.topicForTable(UNSIGNED_MEDIUMINT_TABLE)).get(0);
  validate(record);
  Schema schemaA=record.valueSchema().fields().get(1).schema().fields().get(0).schema();
  Schema schemaB=record.valueSchema().fields().get(1).schema().fields().get(1).schema();
  Schema schemaC=record.valueSchema().fields().get(1).schema().fields().get(2).schema();
  Schema schemaD=record.valueSchema().fields().get(1).schema().fields().get(3).schema();
  Schema schemaE=record.valueSchema().fields().get(1).schema().fields().get(4).schema();
  Schema schemaF=record.valueSchema().fields().get(1).schema().fields().get(5).schema();
  assertThat(schemaA.isOptional()).isEqualTo(true);
  assertThat(schemaA.defaultValue()).isEqualTo(0);
  assertThat(schemaB.isOptional()).isEqualTo(true);
  assertThat(schemaB.defaultValue()).isEqualTo(10);
  assertThat(schemaC.isOptional()).isEqualTo(true);
  assertThat(schemaC.defaultValue()).isEqualTo(null);
  assertThat(schemaD.isOptional()).isEqualTo(false);
  assertThat(schemaE.isOptional()).isEqualTo(false);
  assertThat(schemaE.defaultValue()).isEqualTo(0);
  assertThat(schemaF.isOptional()).isEqualTo(false);
  assertThat(schemaF.defaultValue()).isEqualTo(0);
  assertEmptyFieldValue(record,G);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MysqlDefaultValueIT.java",159
1918,"'-tryline","@Test @SkipWhenKafkaVersion(check=EqualityCheck.EQUAL,value=KafkaVersion.KAFKA_1XX,description=Not compatible with Kafka 1.x) public void unsignedIntTest() throws InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(EVENT_COUNT);
  SourceRecord record=records.recordsForTopic(DATABASE.topicForTable(UNSIGNED_INT_TABLE)).get(0);
  validate(record);
  Schema schemaA=record.valueSchema().fields().get(1).schema().fields().get(0).schema();
  Schema schemaB=record.valueSchema().fields().get(1).schema().fields().get(1).schema();
  Schema schemaC=record.valueSchema().fields().get(1).schema().fields().get(2).schema();
  Schema schemaD=record.valueSchema().fields().get(1).schema().fields().get(3).schema();
  Schema schemaE=record.valueSchema().fields().get(1).schema().fields().get(4).schema();
  Schema schemaF=record.valueSchema().fields().get(1).schema().fields().get(5).schema();
  assertThat(schemaA.isOptional()).isEqualTo(true);
  assertThat(schemaA.defaultValue()).isEqualTo(0L);
  assertThat(schemaB.isOptional()).isEqualTo(true);
  assertThat(schemaB.defaultValue()).isEqualTo(10L);
  assertThat(schemaC.isOptional()).isEqualTo(true);
  assertThat(schemaC.defaultValue()).isEqualTo(null);
  assertThat(schemaD.isOptional()).isEqualTo(false);
  assertThat(schemaE.isOptional()).isEqualTo(false);
  assertThat(schemaE.defaultValue()).isEqualTo(0L);
  assertThat(schemaF.isOptional()).isEqualTo(false);
  assertThat(schemaF.defaultValue()).isEqualTo(0L);
  assertEmptyFieldValue(record,G);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MysqlDefaultValueIT.java",193
1919,"'-tryline","@Test @SkipWhenKafkaVersion(check=EqualityCheck.EQUAL,value=KafkaVersion.KAFKA_1XX,description=Not compatible with Kafka 1.x) public void unsignedBigIntToLongTest() throws InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(EVENT_COUNT);
  SourceRecord record=records.recordsForTopic(DATABASE.topicForTable(UNSIGNED_BIGINT_TABLE)).get(0);
  validate(record);
  Schema schemaA=record.valueSchema().fields().get(1).schema().fields().get(0).schema();
  Schema schemaB=record.valueSchema().fields().get(1).schema().fields().get(1).schema();
  Schema schemaC=record.valueSchema().fields().get(1).schema().fields().get(2).schema();
  Schema schemaD=record.valueSchema().fields().get(1).schema().fields().get(3).schema();
  Schema schemaE=record.valueSchema().fields().get(1).schema().fields().get(4).schema();
  Schema schemaF=record.valueSchema().fields().get(1).schema().fields().get(5).schema();
  assertThat(schemaA.isOptional()).isEqualTo(true);
  assertThat(schemaA.defaultValue()).isEqualTo(0L);
  assertThat(schemaB.isOptional()).isEqualTo(true);
  assertThat(schemaB.defaultValue()).isEqualTo(10L);
  assertThat(schemaC.isOptional()).isEqualTo(true);
  assertThat(schemaC.defaultValue()).isEqualTo(null);
  assertThat(schemaD.isOptional()).isEqualTo(false);
  assertThat(schemaE.isOptional()).isEqualTo(false);
  assertThat(schemaE.defaultValue()).isEqualTo(0L);
  assertThat(schemaF.isOptional()).isEqualTo(false);
  assertThat(schemaF.defaultValue()).isEqualTo(0L);
  assertEmptyFieldValue(record,G);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MysqlDefaultValueIT.java",227
1920,"'-tryline","@Test @SkipWhenKafkaVersion(check=EqualityCheck.EQUAL,value=KafkaVersion.KAFKA_1XX,description=Not compatible with Kafka 1.x) public void unsignedBigIntToBigDecimalTest() throws InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.BIGINT_UNSIGNED_HANDLING_MODE,JdbcValueConverters.BigIntUnsignedMode.PRECISE).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(EVENT_COUNT);
  SourceRecord record=records.recordsForTopic(DATABASE.topicForTable(UNSIGNED_BIGINT_TABLE)).get(0);
  validate(record);
  Schema schemaA=record.valueSchema().fields().get(1).schema().fields().get(0).schema();
  Schema schemaB=record.valueSchema().fields().get(1).schema().fields().get(1).schema();
  Schema schemaC=record.valueSchema().fields().get(1).schema().fields().get(2).schema();
  Schema schemaD=record.valueSchema().fields().get(1).schema().fields().get(3).schema();
  Schema schemaE=record.valueSchema().fields().get(1).schema().fields().get(4).schema();
  Schema schemaF=record.valueSchema().fields().get(1).schema().fields().get(5).schema();
  assertThat(schemaA.isOptional()).isEqualTo(true);
  assertThat(schemaA.defaultValue()).isEqualTo(BigDecimal.ZERO);
  assertThat(schemaB.isOptional()).isEqualTo(true);
  assertThat(schemaB.defaultValue()).isEqualTo(new BigDecimal(10));
  assertThat(schemaC.isOptional()).isEqualTo(true);
  assertThat(schemaC.defaultValue()).isEqualTo(null);
  assertThat(schemaD.isOptional()).isEqualTo(false);
  assertThat(schemaE.isOptional()).isEqualTo(false);
  assertThat(schemaE.defaultValue()).isEqualTo(BigDecimal.ZERO);
  assertThat(schemaF.isOptional()).isEqualTo(false);
  assertThat(schemaF.defaultValue()).isEqualTo(BigDecimal.ZERO);
  assertEmptyFieldValue(record,G);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MysqlDefaultValueIT.java",261
1921,"'-tryline","@Test @SkipWhenKafkaVersion(check=EqualityCheck.EQUAL,value=KafkaVersion.KAFKA_1XX,description=Not compatible with Kafka 1.x) public void stringTest() throws InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(EVENT_COUNT);
  SourceRecord record=records.recordsForTopic(DATABASE.topicForTable(STRING_TABLE)).get(0);
  validate(record);
  Schema schemaA=record.valueSchema().fields().get(1).schema().fields().get(0).schema();
  Schema schemaB=record.valueSchema().fields().get(1).schema().fields().get(1).schema();
  Schema schemaC=record.valueSchema().fields().get(1).schema().fields().get(2).schema();
  Schema schemaD=record.valueSchema().fields().get(1).schema().fields().get(3).schema();
  Schema schemaE=record.valueSchema().fields().get(1).schema().fields().get(4).schema();
  Schema schemaF=record.valueSchema().fields().get(1).schema().fields().get(5).schema();
  Schema schemaG=record.valueSchema().fields().get(1).schema().fields().get(6).schema();
  Schema schemaH=record.valueSchema().fields().get(1).schema().fields().get(7).schema();
  assertThat(schemaA.defaultValue()).isEqualTo(A);
  assertThat(schemaB.defaultValue()).isEqualTo(b);
  assertThat(schemaC.defaultValue()).isEqualTo(CC);
  assertThat(schemaD.defaultValue()).isEqualTo(10);
  assertThat(schemaE.defaultValue()).isEqualTo(0);
  assertThat(schemaF.defaultValue()).isEqualTo(null);
  assertThat(schemaG.defaultValue()).isEqualTo(null);
  assertThat(schemaH.defaultValue()).isEqualTo(null);
  assertEmptyFieldValue(record,I);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MysqlDefaultValueIT.java",297
1922,"'-tryline","@Test @SkipWhenKafkaVersion(check=EqualityCheck.EQUAL,value=KafkaVersion.KAFKA_1XX,description=Not compatible with Kafka 1.x) public void unsignedBitTest() throws InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(EVENT_COUNT);
  SourceRecord record=records.recordsForTopic(DATABASE.topicForTable(BIT_TABLE)).get(0);
  validate(record);
  Schema schemaA=record.valueSchema().fields().get(1).schema().fields().get(0).schema();
  Schema schemaB=record.valueSchema().fields().get(1).schema().fields().get(1).schema();
  Schema schemaC=record.valueSchema().fields().get(1).schema().fields().get(2).schema();
  Schema schemaD=record.valueSchema().fields().get(1).schema().fields().get(3).schema();
  Schema schemaE=record.valueSchema().fields().get(1).schema().fields().get(4).schema();
  Schema schemaF=record.valueSchema().fields().get(1).schema().fields().get(5).schema();
  Schema schemaG=record.valueSchema().fields().get(1).schema().fields().get(6).schema();
  Schema schemaH=record.valueSchema().fields().get(1).schema().fields().get(7).schema();
  Schema schemaI=record.valueSchema().fields().get(1).schema().fields().get(8).schema();
  Schema schemaJ=record.valueSchema().fields().get(1).schema().fields().get(9).schema();
  assertThat(schemaA.defaultValue()).isEqualTo(null);
  assertThat(schemaB.defaultValue()).isEqualTo(false);
  assertThat(schemaC.defaultValue()).isEqualTo(true);
  assertThat(schemaD.defaultValue()).isEqualTo(false);
  assertThat(schemaE.defaultValue()).isEqualTo(true);
  assertThat(schemaF.defaultValue()).isEqualTo(true);
  assertThat(schemaG.defaultValue()).isEqualTo(false);
  assertThat(schemaH.defaultValue()).isEqualTo(new byte[]{66,1});
  assertThat(schemaI.defaultValue()).isEqualTo(null);
  assertThat(schemaJ.defaultValue()).isEqualTo(new byte[]{15,97,1,0});
  assertEmptyFieldValue(record,K);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MysqlDefaultValueIT.java",330
1923,"'-tryline","@Test @SkipWhenKafkaVersion(check=EqualityCheck.EQUAL,value=KafkaVersion.KAFKA_1XX,description=Not compatible with Kafka 1.x) public void booleanTest() throws InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(EVENT_COUNT);
  SourceRecord record=records.recordsForTopic(DATABASE.topicForTable(BOOLEAN_TABLE)).get(0);
  validate(record);
  Schema schemaA=record.valueSchema().fields().get(1).schema().fields().get(0).schema();
  Schema schemaB=record.valueSchema().fields().get(1).schema().fields().get(1).schema();
  Schema schemaC=record.valueSchema().fields().get(1).schema().fields().get(2).schema();
  Schema schemaD=record.valueSchema().fields().get(1).schema().fields().get(3).schema();
  Schema schemaE=record.valueSchema().fields().get(1).schema().fields().get(4).schema();
  assertThat(schemaA.defaultValue()).isEqualTo((short)0);
  assertThat(schemaB.defaultValue()).isEqualTo((short)1);
  assertThat(schemaC.defaultValue()).isEqualTo((short)1);
  assertThat(schemaD.defaultValue()).isEqualTo((short)1);
  assertThat(schemaE.defaultValue()).isEqualTo(null);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MysqlDefaultValueIT.java",367
1924,"'-tryline","@Test @SkipWhenKafkaVersion(check=EqualityCheck.EQUAL,value=KafkaVersion.KAFKA_1XX,description=Not compatible with Kafka 1.x) public void numberTest() throws InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(EVENT_COUNT);
  SourceRecord record=records.recordsForTopic(DATABASE.topicForTable(NUMBER_TABLE)).get(0);
  validate(record);
  Schema schemaA=record.valueSchema().fields().get(1).schema().fields().get(0).schema();
  Schema schemaB=record.valueSchema().fields().get(1).schema().fields().get(1).schema();
  Schema schemaC=record.valueSchema().fields().get(1).schema().fields().get(2).schema();
  Schema schemaD=record.valueSchema().fields().get(1).schema().fields().get(3).schema();
  Schema schemaE=record.valueSchema().fields().get(1).schema().fields().get(4).schema();
  Schema schemaG=record.valueSchema().fields().get(1).schema().fields().get(6).schema();
  Schema schemaH=record.valueSchema().fields().get(1).schema().fields().get(7).schema();
  assertThat(schemaA.defaultValue()).isEqualTo((short)10);
  assertThat(schemaB.defaultValue()).isEqualTo((short)5);
  assertThat(schemaC.defaultValue()).isEqualTo(0);
  assertThat(schemaD.defaultValue()).isEqualTo(20L);
  assertThat(schemaE.defaultValue()).isEqualTo(null);
  assertEmptyFieldValue(record,F);
  assertThat(schemaG.defaultValue()).isEqualTo((short)1);
  assertThat(schemaH.defaultValue()).isEqualTo((int)1);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MysqlDefaultValueIT.java",393
1925,"'-tryline","@Test @SkipWhenKafkaVersion(check=EqualityCheck.EQUAL,value=KafkaVersion.KAFKA_1XX,description=Not compatible with Kafka 1.x) public void floatAndDoubleTest() throws InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(EVENT_COUNT);
  SourceRecord record=records.recordsForTopic(DATABASE.topicForTable(FlOAT_DOUBLE_TABLE)).get(0);
  validate(record);
  Schema schemaA=record.valueSchema().fields().get(1).schema().fields().get(0).schema();
  Schema schemaB=record.valueSchema().fields().get(1).schema().fields().get(1).schema();
  assertThat(schemaA.defaultValue()).isEqualTo(0d);
  assertThat(schemaB.defaultValue()).isEqualTo(1.0d);
  assertEmptyFieldValue(record,H);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MysqlDefaultValueIT.java",484
1926,"'-tryline","@Test @SkipWhenKafkaVersion(check=EqualityCheck.EQUAL,value=KafkaVersion.KAFKA_1XX,description=Not compatible with Kafka 1.x) public void realTest() throws InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(EVENT_COUNT);
  SourceRecord record=records.recordsForTopic(DATABASE.topicForTable(REAL_TABLE)).get(0);
  validate(record);
  Schema schemaA=record.valueSchema().fields().get(1).schema().fields().get(0).schema();
  Schema schemaB=record.valueSchema().fields().get(1).schema().fields().get(1).schema();
  assertThat(schemaA.defaultValue()).isEqualTo(1d);
  assertThat(schemaB.defaultValue()).isEqualTo(null);
  assertEmptyFieldValue(record,C);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MysqlDefaultValueIT.java",505
1927,"'-tryline","@Test public void numericAndDecimalToDoubleTest() throws InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.DECIMAL_HANDLING_MODE,RelationalDatabaseConnectorConfig.DecimalHandlingMode.DOUBLE).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(EVENT_COUNT);
  SourceRecord record=records.recordsForTopic(DATABASE.topicForTable(NUMERIC_DECIMAL_TABLE)).get(0);
  validate(record);
  Schema schemaA=record.valueSchema().fields().get(1).schema().fields().get(0).schema();
  Schema schemaB=record.valueSchema().fields().get(1).schema().fields().get(1).schema();
  Schema schemaC=record.valueSchema().fields().get(1).schema().fields().get(2).schema();
  assertThat(schemaA.defaultValue()).isEqualTo(1.23d);
  assertThat(schemaB.defaultValue()).isEqualTo(2.321d);
  assertThat(schemaC.defaultValue()).isEqualTo(12.678d);
  assertEmptyFieldValue(record,D);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MysqlDefaultValueIT.java",526
1928,"'-tryline","@Test @SkipWhenKafkaVersion(check=EqualityCheck.EQUAL,value=KafkaVersion.KAFKA_1XX,description=Not compatible with Kafka 1.x) public void numericAndDecimalToDecimalTest() throws InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.DECIMAL_HANDLING_MODE,RelationalDatabaseConnectorConfig.DecimalHandlingMode.PRECISE).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(EVENT_COUNT);
  SourceRecord record=records.recordsForTopic(DATABASE.topicForTable(NUMERIC_DECIMAL_TABLE)).get(0);
  validate(record);
  Schema schemaA=record.valueSchema().fields().get(1).schema().fields().get(0).schema();
  Schema schemaB=record.valueSchema().fields().get(1).schema().fields().get(1).schema();
  assertThat(schemaA.defaultValue()).isEqualTo(BigDecimal.valueOf(1.23));
  assertThat(schemaB.defaultValue()).isEqualTo(BigDecimal.valueOf(2.321));
  assertEmptyFieldValue(record,D);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MysqlDefaultValueIT.java",549
1929,"'-tryline","@Test public void dateAndTimeTest() throws InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(DATE_TIME_TABLE)).with(DatabaseHistory.STORE_ONLY_MONITORED_TABLES_DDL,true).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(7);
  final SourceRecord record=records.recordsForTopic(DATABASE.topicForTable(DATE_TIME_TABLE)).get(0);
  validate(record);
  Schema schemaA=record.valueSchema().fields().get(1).schema().fields().get(0).schema();
  Schema schemaB=record.valueSchema().fields().get(1).schema().fields().get(1).schema();
  Schema schemaC=record.valueSchema().fields().get(1).schema().fields().get(2).schema();
  Schema schemaD=record.valueSchema().fields().get(1).schema().fields().get(3).schema();
  Schema schemaE=record.valueSchema().fields().get(1).schema().fields().get(4).schema();
  Schema schemaF=record.valueSchema().fields().get(1).schema().fields().get(5).schema();
  Schema schemaG=record.valueSchema().fields().get(1).schema().fields().get(6).schema();
  Schema schemaH=record.valueSchema().fields().get(1).schema().fields().get(7).schema();
  Schema schemaI=record.valueSchema().fields().get(1).schema().fields().get(8).schema();
  Schema schemaJ=record.valueSchema().fields().get(1).schema().fields().get(9).schema();
  Schema schemaL=record.valueSchema().fields().get(1).schema().fields().get(11).schema();
  Schema schemaM=record.valueSchema().fields().get(1).schema().fields().get(12).schema();
  assertThat(schemaA.defaultValue()).isEqualTo(2426);
  String value1=1970-01-01 00:00:01;
  ZonedDateTime t=java.sql.Timestamp.valueOf(value1).toInstant().atZone(ZoneId.systemDefault());
  String isoString=ZonedTimestamp.toIsoString(t,ZoneId.systemDefault(),MySqlValueConverters::adjustTemporal);
  assertThat(schemaB.defaultValue()).isEqualTo(isoString);
  String value2=2018-01-03 00:00:10;
  long toEpochMillis1=Timestamp.toEpochMillis(LocalDateTime.from(DateTimeFormatter.ofPattern(yyyy-MM-dd HH:mm:ss).parse(value2)),MySqlValueConverters::adjustTemporal);
  assertThat(schemaC.defaultValue()).isEqualTo(toEpochMillis1);
  String value3=2018-01-03 00:00:10.7;
  long toEpochMillis2=Timestamp.toEpochMillis(LocalDateTime.from(DateTimeFormatter.ofPattern(yyyy-MM-dd HH:mm:ss.S).parse(value3)),MySqlValueConverters::adjustTemporal);
  assertThat(schemaD.defaultValue()).isEqualTo(toEpochMillis2);
  String value4=2018-01-03 00:00:10.123456;
  long toEpochMicro=MicroTimestamp.toEpochMicros(LocalDateTime.from(DateTimeFormatter.ofPattern(yyyy-MM-dd HH:mm:ss.SSSSSS).parse(value4)),MySqlValueConverters::adjustTemporal);
  assertThat(schemaE.defaultValue()).isEqualTo(toEpochMicro);
  assertThat(schemaF.defaultValue()).isEqualTo(2001);
  assertThat(schemaG.defaultValue()).isEqualTo(0L);
  assertThat(schemaH.defaultValue()).isEqualTo(82800700000L);
  assertThat(schemaI.defaultValue()).isEqualTo(82800123456L);
  assertThat(schemaL.defaultValue()).isEqualTo(Duration.ofHours(-23).minusMinutes(45).minusSeconds(56).minusMillis(700).toNanos() / 1_000);
  assertThat(schemaM.defaultValue()).isEqualTo(Duration.ofHours(123).plus(123456,ChronoUnit.MICROS).toNanos() / 1_000);
  ZonedDateTime t5=ZonedDateTime.ofInstant(Instant.EPOCH,ZoneOffset.UTC);
  String isoString5=ZonedTimestamp.toIsoString(t5,ZoneOffset.UTC,MySqlValueConverters::adjustTemporal);
  assertThat(schemaJ.defaultValue()).isEqualTo(MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName()).databaseAsserts().currentDateTimeDefaultOptional(isoString5));
  assertEmptyFieldValue(record,K);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MysqlDefaultValueIT.java",572
1930,"'-tryline","@Test @FixFor(DBZ-254) public void shouldConsumeAllEventsFromDatabaseUsingBinlogAndNoSnapshot() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).build();
  start(MySqlConnector.class,config);
  int numCreateDatabase=1;
  int numCreateTables=1;
  int numInserts=4;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numInserts);
  stopConnector();
  assertThat(records).isNotNull();
  List<SourceRecord> dmls=records.recordsForTopic(DATABASE.topicForTable(dbz_254_binary_column_test));
  assertThat(dmls).hasSize(4);
  SourceRecord insert=dmls.get(0);
  Struct after=(Struct)((Struct)insert.value()).get(after);
  assertThat(encodeToBase64String((ByteBuffer)after.get(file_uuid))).isEqualTo(ZRrtCDkPSJOy8TaSPnt0AA==);
  insert=dmls.get(1);
  after=(Struct)((Struct)insert.value()).get(after);
  assertThat(encodeToBase64String((ByteBuffer)after.get(file_uuid))).isEqualTo(ZRrtCDkPSJOy8TaSPnt0qw==);
  insert=dmls.get(2);
  after=(Struct)((Struct)insert.value()).get(after);
  assertThat(encodeToBase64String((ByteBuffer)after.get(file_uuid))).isEqualTo(ZRrtCDkPSJOy8TaSPnt0AA==);
  insert=dmls.get(3);
  after=(Struct)((Struct)insert.value()).get(after);
  assertThat(encodeToBase64String((ByteBuffer)after.get(file_uuid))).isEqualTo(AAAAAAAAAAAAAAAAAAAAAA==);
  records.forEach(this::validate);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlFixedLengthBinaryColumnIT.java",57
1931,"'-tryline","@Test public void shouldConsumeAllEventsFromDatabaseUsingBinlogAndNoSnapshot() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).build();
  start(MySqlConnector.class,config);
  int numCreateDatabase=1;
  int numCreateTables=2;
  int numDataRecords=databaseDifferences.geometryPointTableRecords() + 2;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numDataRecords);
  stopConnector();
  assertThat(records).isNotNull();
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(numCreateDatabase + numCreateTables);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_222_point)).size()).isEqualTo(databaseDifferences.geometryPointTableRecords());
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_507_geometry)).size()).isEqualTo(2);
  assertThat(records.topics().size()).isEqualTo(1 + numCreateTables);
  assertThat(records.databaseNames().size()).isEqualTo(1);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(numCreateDatabase + numCreateTables);
  assertThat(records.ddlRecordsForDatabase(regression_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(connector_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(readbinlog_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(json_test)).isNull();
  records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).forEach(this::print);
  records.forEach(this::validate);
  records.forEach(record -> {
    Struct value=(Struct)record.value();
    if (record.topic().endsWith(dbz_222_point)) {
      assertPoint(value);
    }
 else     if (record.topic().endsWith(dbz_507_geometry)) {
      assertGeomRecord(value);
    }
  }
);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlGeometryIT.java",69
1932,"'-tryline","@Test public void shouldConsumeAllEventsFromDatabaseUsingSnapshot() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().build();
  start(MySqlConnector.class,config);
  int numTables=2;
  int numDataRecords=databaseDifferences.geometryPointTableRecords() + 2;
  int numDdlRecords=numTables * 2 + 3;
  int numSetVariables=1;
  SourceRecords records=consumeRecordsByTopic(numDdlRecords + numSetVariables + numDataRecords);
  stopConnector();
  assertThat(records).isNotNull();
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(numDdlRecords + numSetVariables);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_222_point)).size()).isEqualTo(databaseDifferences.geometryPointTableRecords());
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_507_geometry)).size()).isEqualTo(2);
  assertThat(records.topics().size()).isEqualTo(numTables + 1);
  assertThat(records.databaseNames()).containsOnly(DATABASE.getDatabaseName(),);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(numDdlRecords);
  assertThat(records.ddlRecordsForDatabase(regression_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(connector_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(readbinlog_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(json_test)).isNull();
  assertThat(records.ddlRecordsForDatabase().size()).isEqualTo(1);
  records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).forEach(this::print);
  records.forEach(this::validate);
  records.forEach(record -> {
    Struct value=(Struct)record.value();
    if (record.topic().endsWith(dbz_222_point)) {
      assertPoint(value);
    }
 else     if (record.topic().endsWith(dbz_507_geometry)) {
      assertGeomRecord(value);
    }
  }
);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlGeometryIT.java",115
1933,"'-tryline","private void waitForSnapshotToBeCompleted() throws InterruptedException {
  waitForSnapshotToBeCompleted(mysql,SERVER_NAME);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlMetricsIT.java",291
1934,"'-tryline","private void waitForStreamingToStart() throws InterruptedException {
  waitForStreamingRunning(mysql,SERVER_NAME,getStreamingNamespace());
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlMetricsIT.java",295
1935,"'-tryline","@Test @FixFor(DBZ-751) public void shouldSetPrecisionSchemaParameter() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).build();
  start(MySqlConnector.class,config);
  int numCreateDatabase=1;
  int numCreateTables=1;
  int numInserts=1;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numInserts);
  stopConnector();
  assertThat(records).isNotNull();
  records.forEach(this::validate);
  List<SourceRecord> dmls=records.recordsForTopic(DATABASE.topicForTable(dbz_751_numeric_column_test));
  assertThat(dmls).hasSize(1);
  SourceRecord insert=dmls.get(0);
  Map<String,String> rating1SchemaParameters=insert.valueSchema().field(before).schema().field(rating1).schema().parameters();
  assertThat(rating1SchemaParameters).includes(entry(scale,0),entry(PRECISION_PARAMETER_KEY,10));
  Map<String,String> rating2SchemaParameters=insert.valueSchema().field(before).schema().field(rating2).schema().parameters();
  assertThat(rating2SchemaParameters).includes(entry(scale,4),entry(PRECISION_PARAMETER_KEY,8));
  Map<String,String> rating3SchemaParameters=insert.valueSchema().field(before).schema().field(rating3).schema().parameters();
  assertThat(rating3SchemaParameters).includes(entry(scale,0),entry(PRECISION_PARAMETER_KEY,7));
  Map<String,String> rating4SchemaParameters=insert.valueSchema().field(before).schema().field(rating4).schema().parameters();
  assertThat(rating4SchemaParameters).includes(entry(scale,0),entry(PRECISION_PARAMETER_KEY,6));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlNumericColumnIT.java",60
1936,"'-tryline","@Test public void shouldCorrectlyMigrateTable() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(monitored) + , + DATABASE.qualifiedTableName(_monitored_new)).build();
  final MySqlTestConnection connection=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName());
  connection.execute(create table monitored (id int auto_increment primary key, value1 varchar(100), value2 int));
  connection.execute(insert into monitored values(default, 'a1', 1));
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(1);
  connection.execute(insert into monitored values(default, 'a2', 2));
  connection.execute(CREATE TABLE `_monitored_new` ( `id` int(11) NOT NULL AUTO_INCREMENT, `value1` varchar(100) DEFAULT NULL, `value2` int(11) DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1);
  connection.execute(ALTER TABLE `_monitored_new` drop value1);
  connection.execute(insert into _monitored_new values(default, 1));
  connection.execute(insert into _monitored_new values(default, 2));
  connection.execute(RENAME TABLE `monitored` TO `_monitored_old`, `_monitored_new` TO `monitored`);
  connection.execute(insert into monitored values(default, 3));
  records=consumeRecordsByTopic(4);
  stopConnector();
  assertThat(records).isNotNull();
  records.forEach(this::validate);
  assertInsert(records.allRecordsInOrder().get(3),id,5);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlSchemaMigrationIT.java",54
1937,"'-tryline","@Test public void shouldProcessAndWarnOnNonWhitelistedMigrateTable() throws SQLException, InterruptedException {
  final LogInterceptor logInterceptor=new LogInterceptor();
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(monitored)).build();
  final MySqlTestConnection connection=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName());
  connection.execute(create table monitored (id int auto_increment primary key, value1 varchar(100), value2 int));
  connection.execute(insert into monitored values(default, 'a1', 1));
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(1);
  connection.execute(insert into monitored values(default, 'a2', 2));
  connection.execute(CREATE TABLE `_monitored_new` ( `id` int(11) NOT NULL AUTO_INCREMENT, `value1` varchar(100) DEFAULT NULL, `value2` int(11) DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1);
  connection.execute(ALTER TABLE `_monitored_new` drop value1);
  connection.execute(insert into _monitored_new values(default, 1));
  connection.execute(insert into _monitored_new values(default, 2));
  connection.execute(RENAME TABLE `monitored` TO `_monitored_old`, `_monitored_new` TO `monitored`);
  connection.execute(insert into monitored values(default, 3));
  final String msg1=Renaming whitelisted table  + DATABASE.qualifiedTableName(monitored) +  to non-whitelisted table + DATABASE.qualifiedTableName(_monitored_old)+ , this can lead to schema inconsistency;
  final String msg2=Renaming non-whitelisted table  + DATABASE.qualifiedTableName(_monitored_new) +  to whitelisted table + DATABASE.qualifiedTableName(monitored)+ , this can lead to schema inconsistency;
  records=consumeRecordsByTopic(2);
  stopConnector(value -> {
    assertThat(logInterceptor.containsWarnMessage(msg1)).isTrue();
    assertThat(logInterceptor.containsWarnMessage(msg2)).isTrue();
  }
);
  assertThat(records).isNotNull();
  records.forEach(this::validate);
  assertInsert(records.allRecordsInOrder().get(1),id,5);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlSchemaMigrationIT.java",94
1938,"'-tryline","@Test public void shouldWarnOnInvalidMigrateTable() throws SQLException, InterruptedException {
  final LogInterceptor logInterceptor=new LogInterceptor();
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(DatabaseHistory.STORE_ONLY_MONITORED_TABLES_DDL,true).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(monitored)).build();
  final MySqlTestConnection connection=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName());
  connection.execute(create table monitored (id int auto_increment primary key, value1 varchar(100), value2 int));
  connection.execute(insert into monitored values(default, 'a1', 1));
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(1);
  connection.execute(insert into monitored values(default, 'a2', 2));
  connection.execute(CREATE TABLE `_monitored_new` ( `id` int(11) NOT NULL AUTO_INCREMENT, `value1` varchar(100) DEFAULT NULL, `value2` int(11) DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1);
  connection.execute(ALTER TABLE `_monitored_new` drop value1);
  connection.execute(insert into _monitored_new values(default, 1));
  connection.execute(insert into _monitored_new values(default, 2));
  connection.execute(RENAME TABLE `monitored` TO `_monitored_old`, `_monitored_new` TO `monitored`);
  connection.execute(insert into monitored values(default, 3));
  final String msg1=Renaming whitelisted table  + DATABASE.qualifiedTableName(monitored) +  to non-whitelisted table + DATABASE.qualifiedTableName(_monitored_old)+ , this can lead to schema inconsistency;
  final String msg2=Renaming non-whitelisted table  + DATABASE.qualifiedTableName(_monitored_new) +  to whitelisted table + DATABASE.qualifiedTableName(monitored)+ , this can lead to schema inconsistency;
  records=consumeRecordsByTopic(2);
  stopConnector(value -> {
    assertThat(logInterceptor.containsWarnMessage(msg1)).isTrue();
    assertThat(logInterceptor.containsWarnMessage(msg2)).isTrue();
  }
);
  assertThat(records).isNotNull();
  records.forEach(this::validate);
  assertInsert(records.allRecordsInOrder().get(1),id,5);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlSchemaMigrationIT.java",144
1939,"'-tryline","@Test @FixFor({DBZ-644,DBZ-1222}) public void shouldPropagateSourceTypeAsSchemaParameter() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).with(column.propagate.source.type,.*\\.c1,.*\\.c2,.*\\.c3.*,.*\\.f.).build();
  start(MySqlConnector.class,config);
  int numCreateDatabase=1;
  int numCreateTables=1;
  int numInserts=1;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numInserts);
  stopConnector();
  assertThat(records).isNotNull();
  records.forEach(this::validate);
  List<SourceRecord> dmls=records.recordsForTopic(DATABASE.topicForTable(dbz_644_source_type_mapped_as_schema_parameter_test));
  assertThat(dmls).hasSize(1);
  SourceRecord insert=dmls.get(0);
  Field before=insert.valueSchema().field(before);
  Map<String,String> idSchemaParameters=before.schema().field(id).schema().parameters();
  assertThat(idSchemaParameters).isNull();
  Map<String,String> c1SchemaParameters=before.schema().field(c1).schema().parameters();
  assertThat(c1SchemaParameters).includes(entry(TYPE_NAME_PARAMETER_KEY,INT));
  Map<String,String> c2SchemaParameters=before.schema().field(c2).schema().parameters();
  assertThat(c2SchemaParameters).includes(entry(TYPE_NAME_PARAMETER_KEY,MEDIUMINT));
  Map<String,String> c3aSchemaParameters=before.schema().field(c3a).schema().parameters();
  assertThat(c3aSchemaParameters).includes(entry(TYPE_NAME_PARAMETER_KEY,NUMERIC),entry(TYPE_LENGTH_PARAMETER_KEY,5),entry(TYPE_SCALE_PARAMETER_KEY,2));
  Map<String,String> c3bSchemaParameters=before.schema().field(c3b).schema().parameters();
  assertThat(c3bSchemaParameters).includes(entry(TYPE_NAME_PARAMETER_KEY,VARCHAR),entry(TYPE_LENGTH_PARAMETER_KEY,128));
  Map<String,String> f1SchemaParameters=before.schema().field(f1).schema().parameters();
  assertThat(f1SchemaParameters).includes(entry(TYPE_NAME_PARAMETER_KEY,FLOAT),entry(TYPE_LENGTH_PARAMETER_KEY,10));
  Map<String,String> f2SchemaParameters=before.schema().field(f2).schema().parameters();
  assertThat(f2SchemaParameters).includes(entry(TYPE_NAME_PARAMETER_KEY,FLOAT),entry(TYPE_LENGTH_PARAMETER_KEY,8),entry(TYPE_SCALE_PARAMETER_KEY,4));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlSourceTypeInSchemaIT.java",63
1940,"'-tryline","@Test @FixFor(DBZ-1830) public void shouldPropagateSourceTypeByDatatype() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).with(datatype.propagate.source.type,.+\\.FLOAT,.+\\.VARCHAR).build();
  start(MySqlConnector.class,config);
  waitForStreamingRunning(mysql,DATABASE.getServerName(),getStreamingNamespace());
  int numCreateDatabase=1;
  int numCreateTables=1;
  int numInserts=1;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numInserts);
  stopConnector();
  assertThat(records).isNotNull();
  records.forEach(this::validate);
  List<SourceRecord> dmls=records.recordsForTopic(DATABASE.topicForTable(dbz_644_source_type_mapped_as_schema_parameter_test));
  assertThat(dmls).hasSize(1);
  SourceRecord insert=dmls.get(0);
  Field before=insert.valueSchema().field(before);
  Map<String,String> idSchemaParameters=before.schema().field(id).schema().parameters();
  assertThat(idSchemaParameters).isNull();
  Map<String,String> c1SchemaParameters=before.schema().field(c1).schema().parameters();
  assertThat(c1SchemaParameters).isNull();
  Map<String,String> c2SchemaParameters=before.schema().field(c2).schema().parameters();
  assertThat(c2SchemaParameters).isNull();
  Map<String,String> c3aSchemaParameters=before.schema().field(c3a).schema().parameters();
  assertThat(c3aSchemaParameters).excludes(entry(TYPE_NAME_PARAMETER_KEY,NUMERIC));
  Map<String,String> c3bSchemaParameters=before.schema().field(c3b).schema().parameters();
  assertThat(c3bSchemaParameters).includes(entry(TYPE_NAME_PARAMETER_KEY,VARCHAR),entry(TYPE_LENGTH_PARAMETER_KEY,128));
  Map<String,String> f1SchemaParameters=before.schema().field(f1).schema().parameters();
  assertThat(f1SchemaParameters).includes(entry(TYPE_NAME_PARAMETER_KEY,FLOAT),entry(TYPE_LENGTH_PARAMETER_KEY,10));
  Map<String,String> f2SchemaParameters=before.schema().field(f2).schema().parameters();
  assertThat(f2SchemaParameters).includes(entry(TYPE_NAME_PARAMETER_KEY,FLOAT),entry(TYPE_LENGTH_PARAMETER_KEY,8),entry(TYPE_SCALE_PARAMETER_KEY,4));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlSourceTypeInSchemaIT.java",160
1941,"'-tryline","@Test @FixFor(DBZ-253) public void shouldConsumeAllEventsFromDatabaseUsingBinlogAndNoSnapshot() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).build();
  start(MySqlConnector.class,config);
  int numCreateDatabase=1;
  int numCreateTables=1;
  int numTableMaintenanceStatements=3;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numTableMaintenanceStatements);
  System.out.println(records.allRecordsInOrder());
  stopConnector();
  assertThat(records).isNotNull();
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(numCreateDatabase + numCreateTables + numTableMaintenanceStatements);
  assertThat(records.databaseNames()).containsOnly(DATABASE.getDatabaseName());
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(numCreateDatabase + numCreateTables + numTableMaintenanceStatements);
  records.forEach(this::validate);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlTableMaintenanceStatementsIT.java",52
1942,"'-tryline","@Test @FixFor(DBZ-1773) public void shouldHandleTinyIntAsNumber() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(DBZ1773)).build();
  start(MySqlConnector.class,config);
  consumeInitial();
  assertIntChangeRecord();
  try (final Connection conn=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName()).connection()){
    conn.createStatement().execute(INSERT INTO DBZ1773 VALUES (DEFAULT, 100, 5, 50, true));
  }
   assertIntChangeRecord();
  stopConnector();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlTinyIntIT.java",57
1943,"'-tryline","@Test @FixFor(DBZ-1800) public void shouldHandleTinyIntOneAsBoolean() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(DBZ1773)).with(MySqlConnectorConfig.CUSTOM_CONVERTERS,boolean).with(boolean.type,TinyIntOneToBooleanConverter.class.getName()).with(boolean.selector,.*DBZ1773.b).build();
  start(MySqlConnector.class,config);
  consumeInitial();
  assertBooleanChangeRecord();
  try (final Connection conn=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName()).connection()){
    conn.createStatement().execute(INSERT INTO DBZ1773 VALUES (DEFAULT, 100, 5, 50, true));
  }
   assertBooleanChangeRecord();
  stopConnector();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlTinyIntIT.java",81
1944,"'-tryline","@Test @FixFor(DBZ-2085) public void shouldDefaultValueForTinyIntOneAsBoolean() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(DBZ2085)).with(MySqlConnectorConfig.CUSTOM_CONVERTERS,boolean).with(boolean.type,TinyIntOneToBooleanConverter.class.getName()).with(boolean.selector,.*DBZ2085.b).build();
  start(MySqlConnector.class,config);
  consumeInitial();
  assertDefaultValueBooleanChangeRecord();
  try (final Connection conn=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName()).connection()){
    conn.createStatement().execute(INSERT INTO DBZ2085 VALUES (DEFAULT, true));
  }
   assertDefaultValueBooleanChangeRecord();
  stopConnector();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlTinyIntIT.java",108
1945,"'-tryline","private void consumeInitial() throws InterruptedException {
  final int numDatabase=2;
  final int numTables=4;
  final int numOthers=2;
  consumeRecords(numDatabase + numTables + numOthers);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlTinyIntIT.java",135
1946,"'-tryline","private void assertIntChangeRecord() throws InterruptedException {
  final SourceRecord record=consumeRecord();
  Assertions.assertThat(record).isNotNull();
  final Struct change=((Struct)record.value()).getStruct(after);
  Assertions.assertThat(change.getInt16(ti)).isEqualTo((short)100);
  Assertions.assertThat(change.getInt16(ti1)).isEqualTo((short)5);
  Assertions.assertThat(change.getInt16(ti2)).isEqualTo((short)50);
  Assertions.assertThat(change.getInt16(b)).isEqualTo((short)1);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlTinyIntIT.java",145
1947,"'-tryline","private void assertBooleanChangeRecord() throws InterruptedException {
  final SourceRecord record=consumeRecord();
  Assertions.assertThat(record).isNotNull();
  final Struct change=((Struct)record.value()).getStruct(after);
  Assertions.assertThat(change.getInt16(ti)).isEqualTo((short)100);
  Assertions.assertThat(change.getInt16(ti1)).isEqualTo((short)5);
  Assertions.assertThat(change.getInt16(ti2)).isEqualTo((short)50);
  Assertions.assertThat(change.getBoolean(b)).isEqualTo(true);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlTinyIntIT.java",156
1948,"'-tryline","private void assertDefaultValueBooleanChangeRecord() throws InterruptedException {
  final SourceRecord record=consumeRecord();
  Assertions.assertThat(record).isNotNull();
  final Struct change=((Struct)record.value()).getStruct(after);
  Assertions.assertThat(change.getBoolean(b)).isEqualTo(true);
  Assertions.assertThat(change.schema().field(b).schema().defaultValue()).isEqualTo(false);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlTinyIntIT.java",167
1949,"'-tryline","@Test public void shouldConsumeAllEventsFromDatabaseUsingBinlogAndNoSnapshot() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).with(MySqlConnectorConfig.BIGINT_UNSIGNED_HANDLING_MODE,MySqlConnectorConfig.BigIntUnsignedHandlingMode.PRECISE).build();
  start(MySqlConnector.class,config);
  Testing.Debug.enable();
  int numCreateDatabase=1;
  int numCreateTables=7;
  int numDataRecords=numCreateTables * 3;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numDataRecords);
  stopConnector();
  assertThat(records).isNotNull();
  assertThat(records.recordsForTopic(unsignednumericit).size()).isEqualTo(numCreateDatabase + numCreateTables);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_228_tinyint_unsigned)).size()).isEqualTo(3);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_228_smallint_unsigned)).size()).isEqualTo(3);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_228_mediumint_unsigned)).size()).isEqualTo(3);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_228_int_unsigned)).size()).isEqualTo(3);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_228_bigint_unsigned)).size()).isEqualTo(3);
  assertThat(records.topics().size()).isEqualTo(1 + numCreateTables);
  assertThat(records.databaseNames().size()).isEqualTo(1);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(numCreateDatabase + numCreateTables);
  assertThat(records.ddlRecordsForDatabase(regression_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(connector_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(readbinlog_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(json_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(geometry_test)).isNull();
  records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).forEach(this::print);
  records.forEach(this::validate);
  records.forEach(record -> {
    Struct value=(Struct)record.value();
    if (record.topic().endsWith(dbz_228_int_unsigned)) {
      assertIntUnsigned(value);
    }
 else     if (record.topic().endsWith(dbz_228_tinyint_unsigned)) {
      assertTinyintUnsigned(value);
    }
 else     if (record.topic().endsWith(dbz_228_smallint_unsigned)) {
      assertSmallUnsigned(value);
    }
 else     if (record.topic().endsWith(dbz_228_mediumint_unsigned)) {
      assertMediumUnsigned(value);
    }
 else     if (record.topic().endsWith(dbz_228_bigint_unsigned)) {
      assertBigintUnsignedPrecise(value);
    }
  }
);
  assertSerialPrecise(records.recordsForTopic(DATABASE.topicForTable(dbz_1185_serial)));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlUnsignedIntegerIT.java",60
1950,"'-tryline","@Test @FixFor(DBZ-363) public void shouldConsumeAllEventsFromBigIntTableInDatabaseUsingBinlogAndNoSnapshotUsingLong() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER.toString()).with(MySqlConnectorConfig.BIGINT_UNSIGNED_HANDLING_MODE,MySqlConnectorConfig.BigIntUnsignedHandlingMode.LONG).build();
  start(MySqlConnector.class,config);
  Testing.Debug.enable();
  int numCreateDatabase=1;
  int numCreateTables=7;
  int numDataRecords=numCreateTables * 3;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numDataRecords);
  stopConnector();
  assertThat(records).isNotNull();
  assertThat(records.recordsForTopic(DATABASE.getServerName()).size()).isEqualTo(numCreateDatabase + numCreateTables);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_228_bigint_unsigned)).size()).isEqualTo(3);
  assertThat(records.topics().size()).isEqualTo(1 + numCreateTables);
  records.forEach(this::validate);
  records.forEach(record -> {
    Struct value=(Struct)record.value();
    if (record.topic().endsWith(dbz_228_bigint_unsigned)) {
      assertBigintUnsignedLong(value);
    }
  }
);
  assertSerial(records.recordsForTopic(DATABASE.topicForTable(dbz_1185_serial)));
  assertSerialDefaultValue(records.recordsForTopic(DATABASE.topicForTable(dbz_1185_serial_default_value)));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlUnsignedIntegerIT.java",126
1951,"'-tryline","@Test public void shouldConsumeAllEventsFromDatabaseUsingSnapshot() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().build();
  start(MySqlConnector.class,config);
  int numTables=7;
  int numDataRecords=numTables * 3;
  int numDdlRecords=numTables * 2 + 3;
  int numSetVariables=1;
  SourceRecords records=consumeRecordsByTopic(numDdlRecords + numSetVariables + numDataRecords);
  stopConnector();
  assertThat(records).isNotNull();
  assertThat(records.recordsForTopic(unsignednumericit).size()).isEqualTo(numDdlRecords + numSetVariables);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_228_tinyint_unsigned)).size()).isEqualTo(3);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_228_smallint_unsigned)).size()).isEqualTo(3);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_228_mediumint_unsigned)).size()).isEqualTo(3);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_228_int_unsigned)).size()).isEqualTo(3);
  assertThat(records.recordsForTopic(DATABASE.topicForTable(dbz_228_bigint_unsigned)).size()).isEqualTo(3);
  assertThat(records.topics().size()).isEqualTo(numTables + 1);
  assertThat(records.databaseNames()).containsOnly(DATABASE.getDatabaseName(),);
  assertThat(records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).size()).isEqualTo(numDdlRecords);
  assertThat(records.ddlRecordsForDatabase(regression_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(connector_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(readbinlog_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(json_test)).isNull();
  assertThat(records.ddlRecordsForDatabase(geometry_test)).isNull();
  assertThat(records.ddlRecordsForDatabase().size()).isEqualTo(1);
  records.ddlRecordsForDatabase(DATABASE.getDatabaseName()).forEach(this::print);
  records.forEach(this::validate);
  records.forEach(record -> {
    Struct value=(Struct)record.value();
    if (record.topic().endsWith(dbz_228_int_unsigned)) {
      assertIntUnsigned(value);
    }
 else     if (record.topic().endsWith(dbz_228_tinyint_unsigned)) {
      assertTinyintUnsigned(value);
    }
 else     if (record.topic().endsWith(dbz_228_smallint_unsigned)) {
      assertSmallUnsigned(value);
    }
 else     if (record.topic().endsWith(dbz_228_mediumint_unsigned)) {
      assertMediumUnsigned(value);
    }
 else     if (record.topic().endsWith(dbz_228_bigint_unsigned)) {
      assertBigintUnsignedLong(value);
    }
  }
);
  assertSerial(records.recordsForTopic(DATABASE.topicForTable(dbz_1185_serial)));
  assertSerialDefaultValue(records.recordsForTopic(DATABASE.topicForTable(dbz_1185_serial_default_value)));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlUnsignedIntegerIT.java",163
1952,"'-tryline","@Test @FixFor(DBZ-1143) public void shouldProcessTwoAndForDigitYearsInDatabase() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).with(MySqlConnectorConfig.ENABLE_TIME_ADJUSTER,false).build();
  start(MySqlConnector.class,config);
  Testing.Debug.enable();
  final int numDatabase=2;
  final int numTables=2;
  final int numOthers=2;
  consumeRecords(numDatabase + numTables + numOthers);
  assertChangeRecordByDatabase();
  try (final Connection conn=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName()).connection()){
    conn.createStatement().execute(INSERT INTO dbz_1143_year_test VALUES (\n +     default,\n +     '18',\n+     '0018',\n+     '2018',\n+     '18-04-01',\n+     '0018-04-01',\n+     '2018-04-01',\n+     '18-04-01 12:34:56',\n+     '0018-04-01 12:34:56',\n+     '2018-04-01 12:34:56',\n+     '78',\n+     '0078',\n+     '1978',\n+     '78-04-01',\n+     '0078-04-01',\n+     '1978-04-01',\n+     '78-04-01 12:34:56',\n+     '0078-04-01 12:34:56',\n+     '1978-04-01 12:34:56'+ ););
  }
   assertChangeRecordByDatabase();
  stopConnector();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlYearIT.java",56
1953,"'-tryline","@Test @FixFor(DBZ-1143) public void shouldProcessTwoAndForDigitYearsInConnector() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.INITIAL).build();
  start(MySqlConnector.class,config);
  Testing.Debug.enable();
  final int numDatabase=2;
  final int numTables=2;
  final int numOthers=2;
  consumeRecords(numDatabase + numTables + numOthers);
  assertChangeRecordByConnector();
  try (final Connection conn=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName()).connection()){
    conn.createStatement().execute(INSERT INTO dbz_1143_year_test VALUES (\n +     default,\n +     '18',\n+     '0018',\n+     '2018',\n+     '18-04-01',\n+     '0018-04-01',\n+     '2018-04-01',\n+     '18-04-01 12:34:56',\n+     '0018-04-01 12:34:56',\n+     '2018-04-01 12:34:56',\n+     '78',\n+     '0078',\n+     '1978',\n+     '78-04-01',\n+     '0078-04-01',\n+     '1978-04-01',\n+     '78-04-01 12:34:56',\n+     '0078-04-01 12:34:56',\n+     '1978-04-01 12:34:56'+ ););
  }
   assertChangeRecordByConnector();
  stopConnector();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlYearIT.java",107
1954,"'-tryline","private void assertChangeRecordByDatabase() throws InterruptedException {
  final SourceRecord record=consumeRecord();
  Assertions.assertThat(record).isNotNull();
  final Struct change=((Struct)record.value()).getStruct(after);
  Assertions.assertThat(change.getInt32(y18)).isEqualTo(2018);
  Assertions.assertThat(change.getInt32(y0018)).isEqualTo(2018);
  Assertions.assertThat(change.getInt32(y2018)).isEqualTo(2018);
  Assertions.assertThat(change.getInt32(d18)).isEqualTo(17622);
  Assertions.assertThat(change.getInt32(d0018)).isEqualTo(-712863);
  Assertions.assertThat(change.getInt32(d2018)).isEqualTo(17622);
  Assertions.assertThat(change.getInt64(dt18)).isEqualTo(1_522_586_096_000L);
  Assertions.assertThat(change.getInt64(dt2018)).isEqualTo(1_522_586_096_000L);
  Assertions.assertThat(change.getInt32(y78)).isEqualTo(1978);
  Assertions.assertThat(change.getInt32(y0078)).isEqualTo(1978);
  Assertions.assertThat(change.getInt32(y1978)).isEqualTo(1978);
  Assertions.assertThat(change.getInt32(d78)).isEqualTo(3012);
  Assertions.assertThat(change.getInt32(d0078)).isEqualTo(-690948);
  Assertions.assertThat(change.getInt32(d1978)).isEqualTo(3012);
  Assertions.assertThat(change.getInt64(dt78)).isEqualTo(260_282_096_000L);
  Assertions.assertThat(change.getInt64(dt1978)).isEqualTo(260_282_096_000L);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlYearIT.java",157
1955,"'-tryline","private void assertChangeRecordByConnector() throws InterruptedException {
  final SourceRecord record=consumeRecord();
  Assertions.assertThat(record).isNotNull();
  final Struct change=((Struct)record.value()).getStruct(after);
  Assertions.assertThat(change.getInt32(y18)).isEqualTo(2018);
  Assertions.assertThat(change.getInt32(y0018)).isEqualTo(2018);
  Assertions.assertThat(change.getInt32(y2018)).isEqualTo(2018);
  Assertions.assertThat(change.getInt32(d18)).isEqualTo(17622);
  Assertions.assertThat(change.getInt32(d0018)).isEqualTo(17622);
  Assertions.assertThat(change.getInt32(d2018)).isEqualTo(17622);
  Assertions.assertThat(change.getInt64(dt18)).isEqualTo(1_522_586_096_000L);
  Assertions.assertThat(change.getInt64(dt0018)).isEqualTo(1_522_586_096_000L);
  Assertions.assertThat(change.getInt64(dt2018)).isEqualTo(1_522_586_096_000L);
  Assertions.assertThat(change.getInt32(y78)).isEqualTo(1978);
  Assertions.assertThat(change.getInt32(y0078)).isEqualTo(1978);
  Assertions.assertThat(change.getInt32(y1978)).isEqualTo(1978);
  Assertions.assertThat(change.getInt32(d78)).isEqualTo(3012);
  Assertions.assertThat(change.getInt32(d0078)).isEqualTo(3012);
  Assertions.assertThat(change.getInt32(d1978)).isEqualTo(3012);
  Assertions.assertThat(change.getInt64(dt78)).isEqualTo(260_282_096_000L);
  Assertions.assertThat(change.getInt64(dt0078)).isEqualTo(260_282_096_000L);
  Assertions.assertThat(change.getInt64(dt1978)).isEqualTo(260_282_096_000L);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\MySqlYearIT.java",199
1956,"'-tryline","@Before public void beforeEach() throws TimeoutException, IOException, SQLException, InterruptedException {
  events.clear();
  DATABASE.createAndInitialize();
  conn=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName());
  conn.connect();
  config=conn.config();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\ReadBinLogIT.java",81
1957,"'-tryline","protected int consumeAtLeast(int minNumber) throws InterruptedException {
  return consumeAtLeast(minNumber,20,TimeUnit.SECONDS);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\StreamingSourceIT.java",98
1958,"'-tryline","protected int consumeAtLeast(int minNumber,long timeout,TimeUnit unit) throws InterruptedException {
  final SourceRecords records=consumeRecordsByTopic(minNumber);
  final int count=records.allRecordsInOrder().size();
  records.forEach(record -> {
    VerifyRecord.isValid(record);
    store.add(record);
    schemaChanges.add(record);
  }
);
  Testing.print( + count +  records);
  return count;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\StreamingSourceIT.java",102
1959,"'-tryline","protected long filterAtLeast(final int minNumber,final long timeout,final TimeUnit unit) throws InterruptedException {
  final long targetNumber=minNumber;
  long startTime=System.currentTimeMillis();
  while (getNumberOfEventsFiltered() < targetNumber && (System.currentTimeMillis() - startTime) < unit.toMillis(timeout)) {
    consumeRecord();
  }
  return getNumberOfEventsFiltered();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\StreamingSourceIT.java",114
1960,"'-tryline","private void inconsistentSchema(EventProcessingFailureHandlingMode mode) throws InterruptedException, SQLException {
  Configuration.Builder builder=simpleConfig().with(DatabaseHistory.STORE_ONLY_MONITORED_TABLES_DDL,true).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(orders));
  if (mode == null) {
    config=builder.build();
  }
 else {
    config=builder.with(MySqlConnectorConfig.INCONSISTENT_SCHEMA_HANDLING_MODE,mode).build();
  }
  start(MySqlConnector.class,config);
  int expected=5;
  int consumed=consumeAtLeast(expected);
  assertThat(consumed).isGreaterThanOrEqualTo(expected);
  stopConnector();
  config=builder.with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,DATABASE.qualifiedTableName(orders) + , + DATABASE.qualifiedTableName(customers)).build();
  AtomicReference<Throwable> exception=new AtomicReference<>();
  start(MySqlConnector.class,config,(success,message,error) -> exception.set(error));
  try (final MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName());final JdbcConnection connection=db.connect();final Connection jdbc=connection.connection();final Statement statement=jdbc.createStatement()){
    statement.executeUpdate(INSERT INTO customers VALUES (default,'John','Lazy','john.lazy@acme.com'));
  }
   waitForStreamingRunning(mysql,DATABASE.getServerName(),streaming);
  stopConnector();
  final Throwable e=exception.get();
  if (e != null) {
    throw (RuntimeException)e;
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\StreamingSourceIT.java",526
1961,"'-tryline","@Test @FixFor(DBZ-878) public void shouldReplaceInvalidTopicNameCharacters() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).build();
  start(MySqlConnector.class,config);
  int numCreateDatabase=1;
  int numCreateTables=2;
  int numInserts=2;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numInserts);
  stopConnector();
  assertThat(records).isNotNull();
  records.forEach(this::validate);
  List<SourceRecord> dmls=records.recordsForTopic(DATABASE.topicForTable(dbz_878_some_test_data));
  assertThat(dmls).hasSize(1);
  SourceRecord insert=dmls.get(0);
  assertThat(insert.valueSchema().name()).endsWith(dbz_878_some_test_data.Envelope);
  VerifyRecord.isValidInsert(insert,id,1);
  String sourceTable=((Struct)insert.value()).getStruct(source).getString(table);
  assertThat(sourceTable).isEqualTo(dbz_878_some|test@data);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\TopicNameSanitizationIT.java",58
1962,"'-tryline","@Test @FixFor(DBZ-1834) public void shouldAcceptDotInTableName() throws SQLException, InterruptedException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.NEVER).build();
  start(MySqlConnector.class,config);
  int numCreateDatabase=1;
  int numCreateTables=2;
  int numInserts=2;
  SourceRecords records=consumeRecordsByTopic(numCreateDatabase + numCreateTables + numInserts);
  stopConnector();
  assertThat(records).isNotNull();
  records.forEach(this::validate);
  List<SourceRecord> dmls=records.recordsForTopic(DATABASE.topicForTable(DBZ.1834));
  assertThat(dmls).hasSize(1);
  SourceRecord insert=dmls.get(0);
  assertThat(insert.valueSchema().name()).endsWith(DBZ.1834.Envelope);
  VerifyRecord.isValidInsert(insert,id,1);
  String sourceTable=((Struct)insert.value()).getStruct(source).getString(table);
  assertThat(sourceTable).isEqualTo(DBZ.1834);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\TopicNameSanitizationIT.java",92
1963,"'-tryline","@Test public void transactionMetadataEnabled() throws InterruptedException, SQLException {
  config=DATABASE.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,MySqlConnectorConfig.SnapshotMode.SCHEMA_ONLY).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,false).with(MySqlConnectorConfig.PROVIDE_TRANSACTION_METADATA,true).with(MySqlConnector.IMPLEMENTATION_PROP,new).build();
  start(MySqlConnector.class,config);
  Testing.Debug.enable();
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(mysql,DATABASE.getServerName());
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(DATABASE.getDatabaseName())){
    try (JdbcConnection connection=db.connect()){
      connection.setAutoCommit(false);
      connection.execute(CUSTOMER_INSERT_STMT_1,PRODUCT_INSERT_STMT,ORDER_INSERT_STMT,CUSTOMER_INSERT_STMT_2);
      connection.commit();
    }
   }
   List<SourceRecord> records=consumeRecordsByTopic(1 + 4 + 1).allRecordsInOrder();
  String databaseName=DATABASE.getDatabaseName();
  final String txId=assertBeginTransaction(records.get(0));
  assertEndTransaction(records.get(5),txId,4,Collect.hashMapOf(databaseName + .products,1,databaseName + .customers,2,databaseName + .orders,1));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\TransactionMetadataIT.java",56
1964,"'-tryline","@Test @FixFor(DBZ-1184) public void shouldProcessPurgedGtidSet() throws SQLException, InterruptedException {
  Testing.Files.delete(DB_HISTORY_PATH);
  if (!isGtidModeEnabled()) {
    logger.warn(GTID is not enabled, skipping shouldProcessPurgedGtidSet);
    return;
  }
  purgeDatabaseLogs();
  final UniqueDatabase database=new UniqueDatabase(myServer1,connector_test).withDbHistoryPath(DB_HISTORY_PATH);
  final UniqueDatabase ro_database=new UniqueDatabase(myServer2,connector_test_ro,database).withDbHistoryPath(DB_HISTORY_PATH);
  ro_database.createAndInitialize();
  config=ro_database.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,ro_database.qualifiedTableName(customers)).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(6 + 4);
  assertThat(records.recordsForTopic(ro_database.topicForTable(customers)).size()).isEqualTo(4);
  assertThat(records.topics().size()).isEqualTo(1 + 1);
  assertThat(records.ddlRecordsForDatabase(ro_database.getDatabaseName()).size()).isEqualTo(6);
  records.forEach(this::validate);
  records.recordsForTopic(ro_database.topicForTable(customers)).forEach(record -> {
    final String gtids=(String)record.sourceOffset().get(gtids);
    final Pattern p=Pattern.compile(.*(.*):(.*)-(.*).*);
    final Matcher m=p.matcher(gtids);
    m.matches();
    Assertions.assertThat(m.group(2)).isNotEqualTo(1);
  }
);
  stopConnector();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\zzz\ZZZGtidSetIT.java",83
1965,"'-tryline","@Test @FixFor(DBZ-1244) public void shouldProcessPurgedLogsWhenDownAndSnapshotNeeded() throws SQLException, InterruptedException {
  Testing.Files.delete(DB_HISTORY_PATH);
  if (!isGtidModeEnabled()) {
    logger.warn(GTID is not enabled, skipping shouldProcessPurgedLogsWhenDownAndSnapshotNeeded);
    return;
  }
  purgeDatabaseLogs();
  final UniqueDatabase database=new UniqueDatabase(myServer1,connector_test).withDbHistoryPath(DB_HISTORY_PATH);
  database.createAndInitialize();
  config=database.defaultConfig().with(MySqlConnectorConfig.SNAPSHOT_MODE,SnapshotMode.WHEN_NEEDED).with(MySqlConnectorConfig.INCLUDE_SCHEMA_CHANGES,true).with(MySqlConnectorConfig.TABLE_INCLUDE_LIST,database.qualifiedTableName(customers)).build();
  start(MySqlConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(1 + 3 + 2 * 4 + 4);
  assertThat(records.recordsForTopic(database.topicForTable(customers)).size()).isEqualTo(4);
  assertThat(records.topics().size()).isEqualTo(1 + 1);
  assertThat(records.ddlRecordsForDatabase(database.getDatabaseName()).size()).isEqualTo(11);
  records.forEach(this::validate);
  stopConnector();
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(database.getDatabaseName())){
    db.execute(INSERT INTO customers VALUES(default,1,1,1),INSERT INTO customers VALUES(default,2,2,2));
  }
   start(MySqlConnector.class,config);
  records=consumeRecordsByTopic(2);
  stopConnector();
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(database.getDatabaseName())){
    db.execute(INSERT INTO customers VALUES(default,3,3,3),INSERT INTO customers VALUES(default,4,4,4));
  }
   purgeDatabaseLogs();
  start(MySqlConnector.class,config);
  records=consumeRecordsByTopic(1 + 3 + 2 * 4 + 8);
  assertThat(records.recordsForTopic(database.topicForTable(customers)).size()).isEqualTo(8);
  assertThat(records.topics().size()).isEqualTo(1 + 1);
  assertThat(records.ddlRecordsForDatabase(database.getDatabaseName()).size()).isEqualTo(11);
  stopConnector();
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(database.getDatabaseName())){
    db.execute(INSERT INTO customers VALUES(default,5,5,5),INSERT INTO customers VALUES(default,6,6,6));
  }
   purgeDatabaseLogs();
  try (MySqlTestConnection db=MySqlTestConnection.forTestDatabase(database.getDatabaseName())){
    db.execute(INSERT INTO customers VALUES(default,7,7,7),INSERT INTO customers VALUES(default,8,8,8));
  }
   start(MySqlConnector.class,config);
  records=consumeRecordsByTopic(1 + 3 + 2 * 4 + 12);
  assertThat(records.recordsForTopic(database.topicForTable(customers)).size()).isEqualTo(12);
  assertThat(records.topics().size()).isEqualTo(1 + 1);
  assertThat(records.ddlRecordsForDatabase(database.getDatabaseName()).size()).isEqualTo(11);
  stopConnector();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-mysql\src\test\java\io\debezium\connector\mysql\zzz\ZZZGtidSetIT.java",150
1966,"'-tryline","@Override public void emitSchemaChangeEvent(Receiver receiver) throws InterruptedException {
  SchemaChangeEventType eventType=getSchemaChangeEventType();
  if (eventType == null) {
    return;
  }
  Tables tables=new Tables();
  OracleDdlParser parser=new OracleDdlParser();
  parser.setCurrentDatabase(sourceDatabaseName);
  parser.setCurrentSchema(objectOwner);
  parser.parse(ddlText,tables);
  Set<TableId> changedTableIds=tables.drainChanges();
  if (changedTableIds.isEmpty()) {
    throw new IllegalArgumentException(Couldn't parse DDL statement  + ddlText);
  }
  Table table=tables.forTable(tableId);
  receiver.schemaChangeEvent(new SchemaChangeEvent(offsetContext.getPartition(),offsetContext.getOffset(),offsetContext.getSourceInfo(),sourceDatabaseName,objectOwner,ddlText,table,eventType,false));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\BaseOracleSchemaChangeEventEmitter.java",48
1967,"'-tryline","private void pauseBetweenMiningSessions() throws InterruptedException {
  Duration period=Duration.ofMillis(logMinerMetrics.getMillisecondToSleepBetweenMiningQuery());
  Metronome.sleeper(period,clock).pause();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\logminer\LogMinerStreamingChangeEventSource.java",261
1968,"'-tryline","/** 
 * Executes callback.
 * @param timestamp      commit timestamp
 * @param smallestScn    smallest SCN among other transactions
 * @param commitScn      commit SCN
 * @param callbackNumber number of the callback in the transaction
 */
void execute(Timestamp timestamp,Scn smallestScn,Scn commitScn,int callbackNumber) throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\logminer\TransactionalBuffer.java",309
1969,"'-tryline","@Override public List<SourceRecord> doPoll() throws InterruptedException {
  List<DataChangeEvent> records=queue.poll();
  List<SourceRecord> sourceRecords=records.stream().map(DataChangeEvent::getRecord).collect(Collectors.toList());
  return sourceRecords;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\OracleConnectorTask.java",108
1970,"'-tryline","@Override protected void lockTablesForSchemaSnapshot(ChangeEventSourceContext sourceContext,RelationalSnapshotContext snapshotContext) throws SQLException, InterruptedException {
  ((OracleSnapshotContext)snapshotContext).preSchemaSnapshotSavepoint=jdbcConnection.connection().setSavepoint(dbz_schema_snapshot);
  try (Statement statement=jdbcConnection.connection().createStatement()){
    for (    TableId tableId : snapshotContext.capturedTables) {
      if (!sourceContext.isRunning()) {
        throw new InterruptedException(Interrupted while locking table  + tableId);
      }
      LOGGER.debug(Locking table {},tableId);
      statement.execute(LOCK TABLE  + quote(tableId) +  IN EXCLUSIVE MODE);
    }
  }
 }
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\OracleSnapshotChangeEventSource.java",87
1971,"'-tryline","@Override protected void readTableStructure(ChangeEventSourceContext sourceContext,RelationalSnapshotContext snapshotContext) throws SQLException, InterruptedException {
  Set<String> schemas=snapshotContext.capturedTables.stream().map(TableId::schema).collect(Collectors.toSet());
  for (  String schema : schemas) {
    if (!sourceContext.isRunning()) {
      throw new InterruptedException(Interrupted while reading structure of schema  + schema);
    }
    jdbcConnection.readSchema(snapshotContext.tables,snapshotContext.catalogName,schema,connectorConfig.getTableFilters().dataCollectionFilter(),null,false);
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\OracleSnapshotChangeEventSource.java",207
1972,"'-tryline","private void dispatchDataChangeEvent(RowLCR lcr) throws InterruptedException {
  LOGGER.debug(Processing DML event {},lcr);
  if (RowLCR.COMMIT.equals(lcr.getCommandType())) {
    dispatcher.dispatchTransactionCommittedEvent(offsetContext);
    return;
  }
  TableId tableId=getTableId(lcr);
  dispatcher.dispatchDataChangeEvent(tableId,new XStreamChangeRecordEmitter(offsetContext,lcr,schema.tableFor(tableId),clock));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\xstream\LcrEventHandler.java",103
1973,"'-tryline","private void dispatchSchemaChangeEvent(DDLLCR ddlLcr) throws InterruptedException {
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(Processing DDL event {},ddlLcr.getDDLText());
  }
  TableId tableId=getTableId(ddlLcr);
  dispatcher.dispatchSchemaChangeEvent(tableId,new XStreamSchemaChangeEventEmitter(offsetContext,tableId,ddlLcr));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\xstream\LcrEventHandler.java",118
1974,"'-tryline","@Override public void execute(ChangeEventSourceContext context) throws InterruptedException {
  try {
    final byte[] startPosition=offsetContext.getLcrPosition() != null ? offsetContext.getLcrPosition().getRawPosition() : convertScnToPosition(offsetContext.getScn());
    xsOut=XStreamOut.attach((oracle.jdbc.OracleConnection)jdbcConnection.connection(),xStreamServerName,startPosition,1,1,XStreamOut.DEFAULT_MODE);
    LcrEventHandler handler=new LcrEventHandler(errorHandler,dispatcher,clock,schema,offsetContext,this.tablenameCaseInsensitive,this);
    while (context.isRunning()) {
      LOGGER.trace(Receiving LCR);
      xsOut.receiveLCRCallback(handler,XStreamOut.DEFAULT_MODE);
    }
  }
 catch (  Throwable e) {
    errorHandler.setProducerThrowable(e);
  }
 finally {
    if (this.xsOut != null) {
      try {
        XStreamOut xsOut=this.xsOut;
        this.xsOut=null;
        xsOut.detach(XStreamOut.DEFAULT_MODE);
      }
 catch (      StreamsException e) {
        LOGGER.error(Couldn't detach from XStream outbound server  + xStreamServerName,e);
      }
    }
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\main\java\io\debezium\connector\oracle\xstream\XstreamStreamingChangeEventSource.java",74
1975,"'-tryline","@After public void after() throws InterruptedException {
  transactionalBuffer.close();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\TransactionalBufferTest.java",105
1976,"'-tryline","@Test public void testIsEmptyWhenTransactionIsCommitted() throws InterruptedException {
  CountDownLatch commitLatch=new CountDownLatch(1);
  transactionalBuffer.registerCommitCallback(TRANSACTION_ID,SCN,Instant.now(),(timestamp,smallestScn,commitScn,counter) -> commitLatch.countDown());
  offsetContext=new OracleOffsetContext(connectorConfig,SCN,SCN,(LcrPosition)null,false,true,new TransactionContext());
  transactionalBuffer.commit(TRANSACTION_ID,SCN.add(SCN_ONE),offsetContext,TIMESTAMP,() -> true,MESSAGE,dispatcher);
  commitLatch.await();
  Thread.sleep(1000);
  assertThat(transactionalBuffer.isEmpty()).isEqualTo(true);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\TransactionalBufferTest.java",122
1977,"'-tryline","@Test public void testCalculateScnWhenTransactionIsCommitted() throws InterruptedException {
  CountDownLatch commitLatch=new CountDownLatch(1);
  AtomicReference<Scn> smallestScnContainer=new AtomicReference<>();
  transactionalBuffer.registerCommitCallback(TRANSACTION_ID,SCN,Instant.now(),(timestamp,smallestScn,commitScn,counter) -> {
    smallestScnContainer.set(smallestScn);
    commitLatch.countDown();
  }
);
  offsetContext=new OracleOffsetContext(connectorConfig,SCN,SCN,null,false,true,new TransactionContext());
  transactionalBuffer.commit(TRANSACTION_ID,SCN.add(SCN_ONE),offsetContext,TIMESTAMP,() -> true,MESSAGE,dispatcher);
  commitLatch.await();
  assertThat(smallestScnContainer.get()).isNull();
  assertThat(transactionalBuffer.getRolledBackTransactionIds().isEmpty()).isTrue();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\TransactionalBufferTest.java",165
1978,"'-tryline","@Test public void testCalculateScnWhenFirstTransactionIsCommitted() throws InterruptedException {
  CountDownLatch commitLatch=new CountDownLatch(1);
  AtomicReference<Scn> smallestScnContainer=new AtomicReference<>();
  transactionalBuffer.registerCommitCallback(TRANSACTION_ID,SCN,Instant.now(),(timestamp,smallestScn,commitScn,counter) -> {
    smallestScnContainer.set(smallestScn);
    commitLatch.countDown();
  }
);
  transactionalBuffer.registerCommitCallback(OTHER_TRANSACTION_ID,OTHER_SCN,Instant.now(),(timestamp,smallestScn,commitScn,counter) -> {
  }
);
  offsetContext=new OracleOffsetContext(connectorConfig,SCN,SCN,null,false,true,new TransactionContext());
  transactionalBuffer.commit(TRANSACTION_ID,SCN.add(SCN_ONE),offsetContext,TIMESTAMP,() -> true,MESSAGE,dispatcher);
  commitLatch.await();
  assertThat(smallestScnContainer.get()).isEqualTo(OTHER_SCN);
  assertThat(transactionalBuffer.getRolledBackTransactionIds().isEmpty()).isTrue();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\TransactionalBufferTest.java",182
1979,"'-tryline","@Test public void testCalculateScnWhenSecondTransactionIsCommitted() throws InterruptedException {
  transactionalBuffer.registerCommitCallback(TRANSACTION_ID,SCN,Instant.now(),(timestamp,smallestScn,commitScn,counter) -> {
  }
);
  CountDownLatch commitLatch=new CountDownLatch(1);
  AtomicReference<Scn> smallestScnContainer=new AtomicReference<>();
  transactionalBuffer.registerCommitCallback(OTHER_TRANSACTION_ID,OTHER_SCN,Instant.now(),(timestamp,smallestScn,commitScn,counter) -> {
    smallestScnContainer.set(smallestScn);
    commitLatch.countDown();
  }
);
  offsetContext=new OracleOffsetContext(connectorConfig,OTHER_SCN,OTHER_SCN,null,false,true,new TransactionContext());
  transactionalBuffer.commit(OTHER_TRANSACTION_ID,OTHER_SCN.add(SCN_ONE),offsetContext,TIMESTAMP,() -> true,MESSAGE,dispatcher);
  commitLatch.await();
  assertThat(smallestScnContainer.get()).isEqualTo(SCN);
  assertThat(transactionalBuffer.getRolledBackTransactionIds().isEmpty()).isTrue();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\logminer\TransactionalBufferTest.java",201
1980,"'-tryline","private void sendTxBatch(Configuration config,int expectedRecordCount,int offset) throws SQLException, InterruptedException {
  boolean isAutoCommit=false;
  if (connection.connection().getAutoCommit()) {
    isAutoCommit=true;
    connection.connection().setAutoCommit(false);
  }
  for (int i=offset; i < expectedRecordCount + offset; i++) {
    connection.executeWithoutCommitting(String.format(INSERT INTO debezium.customer VALUES (%s, 'Brian%s', 2345.67, null),i,i));
  }
  connection.connection().commit();
  if (isAutoCommit) {
    connection.connection().setAutoCommit(true);
  }
  assertTxBatch(config,expectedRecordCount,offset);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",386
1981,"'-tryline","private void assertTxBatch(Configuration config,int expectedRecordCount,int offset) throws InterruptedException {
  SourceRecords records;
  List<SourceRecord> testTableRecords;
  Struct after;
  Struct source;
  records=consumeRecordsByTopic(expectedRecordCount);
  testTableRecords=records.recordsForTopic(server1.DEBEZIUM.CUSTOMER);
  assertThat(testTableRecords).hasSize(expectedRecordCount);
  final String adapter=config.getString(OracleConnectorConfig.CONNECTOR_ADAPTER);
  for (int i=0; i < expectedRecordCount; i++) {
    SourceRecord record3=testTableRecords.get(i);
    VerifyRecord.isValidInsert(record3,ID,i + offset);
    after=(Struct)((Struct)record3.value()).get(after);
    assertThat(after.get(ID)).isEqualTo(i + offset);
    assertThat(record3.sourceOffset().containsKey(SourceInfo.SNAPSHOT_KEY)).isFalse();
    assertThat(record3.sourceOffset().containsKey(SNAPSHOT_COMPLETED_KEY)).isFalse();
    if (!LogMiner.equalsIgnoreCase(adapter)) {
      assertThat(record3.sourceOffset().containsKey(SourceInfo.LCR_POSITION_KEY)).isTrue();
      assertThat(record3.sourceOffset().containsKey(SourceInfo.SCN_KEY)).isFalse();
    }
    source=(Struct)((Struct)record3.value()).get(source);
    assertThat(source.get(SourceInfo.SNAPSHOT_KEY)).isEqualTo(false);
    assertThat(source.get(SourceInfo.SCN_KEY)).isNotNull();
    if (!LogMiner.equalsIgnoreCase(adapter)) {
      assertThat(source.get(SourceInfo.LCR_POSITION_KEY)).isNotNull();
    }
    assertThat(source.get(SourceInfo.SERVER_NAME_KEY)).isEqualTo(server1);
    assertThat(source.get(SourceInfo.DEBEZIUM_VERSION_KEY)).isNotNull();
    assertThat(source.get(SourceInfo.TXID_KEY)).isNotNull();
    assertThat(source.get(SourceInfo.TIMESTAMP_KEY)).isNotNull();
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-oracle\src\test\java\io\debezium\connector\oracle\OracleConnectorIT.java",403
1982,"'-tryline","@Override public void processMessage(ByteBuffer buffer,ReplicationMessageProcessor processor,TypeRegistry typeRegistry) throws SQLException, InterruptedException {
  if (buffer == null) {
    processor.process(null);
  }
 else {
    processNotEmptyMessage(buffer,processor,typeRegistry);
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\AbstractMessageDecoder.java",35
1983,"'-tryline","protected abstract void processNotEmptyMessage(ByteBuffer buffer,ReplicationMessageProcessor processor,TypeRegistry typeRegistry) throws SQLException, InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\AbstractMessageDecoder.java",46
1984,"'-tryline","/** 
 * Process a message upon arrival from logical decoder
 * @param buffer - binary representation of replication message
 * @param processor - message processing on arrival
 * @param typeRegistry - registry with known types
 */
void processMessage(ByteBuffer buffer,ReplicationMessageProcessor processor,TypeRegistry typeRegistry) throws SQLException, InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\MessageDecoder.java",26
1985,"'-tryline","@Override public void processNotEmptyMessage(ByteBuffer buffer,ReplicationMessageProcessor processor,TypeRegistry typeRegistry) throws SQLException, InterruptedException {
  if (LOGGER.isTraceEnabled()) {
    if (!buffer.hasArray()) {
      throw new IllegalStateException(Invalid buffer received from PG server during streaming replication);
    }
    final byte[] source=buffer.array();
    final byte[] content=Arrays.copyOfRange(source,buffer.arrayOffset(),source.length + 2);
    final int lastPos=content.length - 1;
    content[lastPos - 1]=SPACE;
    content[lastPos]=SPACE;
    LOGGER.trace(Message arrived from database {},HexConverter.convertToHexString(content));
  }
  final MessageType messageType=MessageType.forType((char)buffer.get());
switch (messageType) {
case BEGIN:
    handleBeginMessage(buffer,processor);
  break;
case COMMIT:
handleCommitMessage(buffer,processor);
break;
case RELATION:
handleRelationMessage(buffer,typeRegistry);
break;
case INSERT:
decodeInsert(buffer,typeRegistry,processor);
break;
case UPDATE:
decodeUpdate(buffer,typeRegistry,processor);
break;
case DELETE:
decodeDelete(buffer,typeRegistry,processor);
break;
case TRUNCATE:
if (config.getTruncateHandlingMode() == PostgresConnectorConfig.TruncateHandlingMode.INCLUDE) {
decodeTruncate(buffer,typeRegistry,processor);
}
 else {
LOGGER.trace(Message Type {} skipped, not processed.,messageType);
}
break;
default :
LOGGER.trace(Message Type {} skipped, not processed.,messageType);
break;
}
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\pgoutput\PgOutputMessageDecoder.java",149
1986,"'-tryline","/** 
 * Callback handler for the 'B' begin replication message.
 * @param buffer The replication stream buffer
 * @param processor The replication message processor
 */
private void handleBeginMessage(ByteBuffer buffer,ReplicationMessageProcessor processor) throws SQLException, InterruptedException {
  final Lsn lsn=Lsn.valueOf(buffer.getLong());
  this.commitTimestamp=PG_EPOCH.plus(buffer.getLong(),ChronoUnit.MICROS);
  this.transactionId=buffer.getInt();
  LOGGER.trace(Event: {},MessageType.BEGIN);
  LOGGER.trace(Final LSN of transaction: {},lsn);
  LOGGER.trace(Commit timestamp of transaction: {},commitTimestamp);
  LOGGER.trace(XID of transaction: {},transactionId);
  processor.process(new TransactionMessage(Operation.BEGIN,transactionId,commitTimestamp));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\pgoutput\PgOutputMessageDecoder.java",209
1987,"'-tryline","/** 
 * Callback handler for the 'C' commit replication message.
 * @param buffer The replication stream buffer
 * @param processor The replication message processor
 */
private void handleCommitMessage(ByteBuffer buffer,ReplicationMessageProcessor processor) throws SQLException, InterruptedException {
  int flags=buffer.get();
  final Lsn lsn=Lsn.valueOf(buffer.getLong());
  final Lsn endLsn=Lsn.valueOf(buffer.getLong());
  Instant commitTimestamp=PG_EPOCH.plus(buffer.getLong(),ChronoUnit.MICROS);
  LOGGER.trace(Event: {},MessageType.COMMIT);
  LOGGER.trace(Flags: {} (currently unused and most likely 0),flags);
  LOGGER.trace(Commit LSN: {},lsn);
  LOGGER.trace(End LSN of transaction: {},endLsn);
  LOGGER.trace(Commit timestamp of transaction: {},commitTimestamp);
  processor.process(new TransactionMessage(Operation.COMMIT,transactionId,commitTimestamp));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\pgoutput\PgOutputMessageDecoder.java",226
1988,"'-tryline","/** 
 * Callback handler for the 'I' insert replication stream message.
 * @param buffer The replication stream buffer
 * @param typeRegistry The postgres type registry
 * @param processor The replication message processor
 */
private void decodeInsert(ByteBuffer buffer,TypeRegistry typeRegistry,ReplicationMessageProcessor processor) throws SQLException, InterruptedException {
  int relationId=buffer.getInt();
  char tupleType=(char)buffer.get();
  LOGGER.trace(Event: {}, Relation Id: {}, Tuple Type: {},MessageType.INSERT,relationId,tupleType);
  Optional<Table> resolvedTable=resolveRelation(relationId);
  if (!resolvedTable.isPresent()) {
    processor.process(new NoopMessage(transactionId,commitTimestamp));
  }
 else {
    Table table=resolvedTable.get();
    List<Column> columns=resolveColumnsFromStreamTupleData(buffer,typeRegistry,table);
    processor.process(new PgOutputReplicationMessage(Operation.INSERT,table.id().toDoubleQuotedString(),commitTimestamp,transactionId,null,columns));
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\pgoutput\PgOutputMessageDecoder.java",358
1989,"'-tryline","/** 
 * Callback handler for the 'U' update replication stream message.
 * @param buffer The replication stream buffer
 * @param typeRegistry The postgres type registry
 * @param processor The replication message processor
 */
private void decodeUpdate(ByteBuffer buffer,TypeRegistry typeRegistry,ReplicationMessageProcessor processor) throws SQLException, InterruptedException {
  int relationId=buffer.getInt();
  LOGGER.trace(Event: {}, RelationId: {},MessageType.UPDATE,relationId);
  Optional<Table> resolvedTable=resolveRelation(relationId);
  if (!resolvedTable.isPresent()) {
    processor.process(new NoopMessage(transactionId,commitTimestamp));
  }
 else {
    Table table=resolvedTable.get();
    List<Column> oldColumns=null;
    char tupleType=(char)buffer.get();
    if ('O' == tupleType || 'K' == tupleType) {
      oldColumns=resolveColumnsFromStreamTupleData(buffer,typeRegistry,table);
      tupleType=(char)buffer.get();
    }
    List<Column> columns=resolveColumnsFromStreamTupleData(buffer,typeRegistry,table);
    processor.process(new PgOutputReplicationMessage(Operation.UPDATE,table.id().toDoubleQuotedString(),commitTimestamp,transactionId,oldColumns,columns));
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\pgoutput\PgOutputMessageDecoder.java",390
1990,"'-tryline","/** 
 * Callback handler for the 'D' delete replication stream message.
 * @param buffer The replication stream buffer
 * @param typeRegistry The postgres type registry
 * @param processor The replication message processor
 */
private void decodeDelete(ByteBuffer buffer,TypeRegistry typeRegistry,ReplicationMessageProcessor processor) throws SQLException, InterruptedException {
  int relationId=buffer.getInt();
  char tupleType=(char)buffer.get();
  LOGGER.trace(Event: {}, RelationId: {}, Tuple Type: {},MessageType.DELETE,relationId,tupleType);
  Optional<Table> resolvedTable=resolveRelation(relationId);
  if (!resolvedTable.isPresent()) {
    processor.process(new NoopMessage(transactionId,commitTimestamp));
  }
 else {
    Table table=resolvedTable.get();
    List<Column> columns=resolveColumnsFromStreamTupleData(buffer,typeRegistry,table);
    processor.process(new PgOutputReplicationMessage(Operation.DELETE,table.id().toDoubleQuotedString(),commitTimestamp,transactionId,columns,null));
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\pgoutput\PgOutputMessageDecoder.java",437
1991,"'-tryline","/** 
 * Callback handler for the 'T' truncate replication stream message.
 * @param buffer       The replication stream buffer
 * @param typeRegistry The postgres type registry
 * @param processor    The replication message processor
 */
private void decodeTruncate(ByteBuffer buffer,TypeRegistry typeRegistry,ReplicationMessageProcessor processor) throws SQLException, InterruptedException {
  int numberOfRelations=buffer.getInt();
  int optionBits=buffer.get();
  List<String> truncateOptions=getTruncateOptions(optionBits);
  int[] relationIds=new int[numberOfRelations];
  for (int i=0; i < numberOfRelations; i++) {
    relationIds[i]=buffer.getInt();
  }
  List<Table> tables=new ArrayList<>();
  for (  int relationId : relationIds) {
    Optional<Table> resolvedTable=resolveRelation(relationId);
    resolvedTable.ifPresent(tables::add);
  }
  if (LOGGER.isTraceEnabled()) {
    LOGGER.trace(Event: {}, RelationIds: {}, OptionBits: {},MessageType.TRUNCATE,Arrays.toString(relationIds),optionBits);
  }
  int noOfResolvedTables=tables.size();
  for (int i=0; i < noOfResolvedTables; i++) {
    Table table=tables.get(i);
    boolean lastTableInTruncate=(i + 1) == noOfResolvedTables;
    processor.process(new PgOutputTruncateReplicationMessage(Operation.TRUNCATE,table.id().toDoubleQuotedString(),commitTimestamp,transactionId,lastTableInTruncate));
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\pgoutput\PgOutputMessageDecoder.java",470
1992,"'-tryline","@Override public void processNotEmptyMessage(final ByteBuffer buffer,ReplicationMessageProcessor processor,TypeRegistry typeRegistry) throws SQLException, InterruptedException {
  try {
    if (!buffer.hasArray()) {
      throw new IllegalStateException(Invalid buffer received from Postgres server during streaming replication);
    }
    final byte[] source=buffer.array();
    final byte[] content=Arrays.copyOfRange(source,buffer.arrayOffset(),source.length);
    final RowMessage message=PgProto.RowMessage.parseFrom(content);
    LOGGER.trace(Received protobuf message from the server {},message);
    if (!message.getNewTypeinfoList().isEmpty() && message.getNewTupleCount() != message.getNewTypeinfoCount()) {
      throw new ConnectException(String.format(Message from transaction {} has {} data columns but only {} of type info,Integer.toUnsignedLong(message.getTransactionId()),message.getNewTupleCount(),message.getNewTypeinfoCount()));
    }
    if (!SUPPORTED_OPS.contains(message.getOp())) {
      if (!warnedOnUnkownOp) {
        LOGGER.warn(Received message with type '{}' that is unknown to this version of connector, consider upgrading,message.getOp());
        warnedOnUnkownOp=true;
      }
      return;
    }
    processor.process(new PgProtoReplicationMessage(message,typeRegistry));
  }
 catch (  InvalidProtocolBufferException e) {
    throw new ConnectException(e);
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\pgproto\PgProtoMessageDecoder.java",47
1993,"'-tryline","/** 
 * Fetches a replication slot, repeating the query until either the slot is created or until the max number of attempts has been reached To fetch the slot without the retries, use the  {@link PostgresConnection#fetchReplicationSlotInfo} call
 * @param slotName the slot name
 * @param pluginName the name of the plugin
 * @return the {@link ServerInfo.ReplicationSlot} object or a {@link ServerInfo.ReplicationSlot#INVALID} ifthe slot is not valid
 * @throws SQLException is thrown by the underyling jdbc driver
 * @throws InterruptedException is thrown if we don't return an answer within the set number of retries
 */
@VisibleForTesting ServerInfo.ReplicationSlot readReplicationSlotInfo(String slotName,String pluginName) throws SQLException, InterruptedException {
  final String database=database();
  final Metronome metronome=Metronome.parker(PAUSE_BETWEEN_REPLICATION_SLOT_RETRIEVAL_ATTEMPTS,Clock.SYSTEM);
  for (int attempt=1; attempt <= MAX_ATTEMPTS_FOR_OBTAINING_REPLICATION_SLOT; attempt++) {
    final ServerInfo.ReplicationSlot slot=fetchReplicationSlotInfo(slotName,pluginName);
    if (slot != null) {
      LOGGER.info(Obtained valid replication slot {},slot);
      return slot;
    }
    LOGGER.warn(Cannot obtain valid replication slot '{}' for plugin '{}' and database '{}' [during attempt {} out of {}, concurrent tx probably blocks taking snapshot.,slotName,pluginName,database,attempt,MAX_ATTEMPTS_FOR_OBTAINING_REPLICATION_SLOT);
    metronome.pause();
  }
  throw new ConnectException(Unable to obtain valid replication slot.  + Make sure there are no long-running transactions running in parallel as they may hinder the allocation of the replication slot when starting this connector);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresConnection.java",184
1994,"'-tryline","private ServerInfo.ReplicationSlot getSlotInfo() throws SQLException, InterruptedException {
  try (PostgresConnection connection=new PostgresConnection(originalConfig)){
    return connection.readReplicationSlotInfo(slotName,plugin.getPostgresPluginName());
  }
 }
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresReplicationConnection.java",129
1995,"'-tryline","protected void initReplicationSlot() throws SQLException, InterruptedException {
  ServerInfo.ReplicationSlot slotInfo=getSlotInfo();
  boolean shouldCreateSlot=ServerInfo.ReplicationSlot.INVALID == slotInfo;
  try {
    if (shouldCreateSlot) {
      this.createReplicationSlot();
    }
    pgConnection();
    final String identifySystemStatement=IDENTIFY_SYSTEM;
    LOGGER.debug(running '{}' to validate replication connection,identifySystemStatement);
    final Lsn xlogStart=queryAndMap(identifySystemStatement,rs -> {
      if (!rs.next()) {
        throw new IllegalStateException(The DB connection is not a valid replication connection);
      }
      String xlogpos=rs.getString(xlogpos);
      LOGGER.debug(received latest xlogpos '{}',xlogpos);
      return Lsn.valueOf(xlogpos);
    }
);
    if (slotCreationInfo != null) {
      this.defaultStartingPos=slotCreationInfo.startLsn();
    }
 else     if (shouldCreateSlot || !slotInfo.hasValidFlushedLsn()) {
      this.defaultStartingPos=xlogStart;
    }
 else {
      Lsn latestFlushedLsn=slotInfo.latestFlushedLsn();
      this.defaultStartingPos=latestFlushedLsn.compareTo(xlogStart) < 0 ? latestFlushedLsn : xlogStart;
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(found previous flushed LSN '{}',latestFlushedLsn);
      }
    }
    hasInitedSlot=true;
  }
 catch (  SQLException e) {
    throw new JdbcConnectionException(e);
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresReplicationConnection.java",215
1996,"'-tryline","/** 
 * creating a replication connection and starting to stream involves a few steps: 1. we create the connection and ensure that a. the slot exists b. the slot isn't currently being used 2. we query to get our potential start position in the slot (lsn) 3. we try and start streaming, depending on our options (such as in wal2json) this may fail, which can result in the connection being killed and we need to start the process over if we are using a temporary slot 4. actually start the streamer <p> This method takes care of all of these and this method queries for a default starting position If you know where you are starting from you should call  {@link #startStreaming(Lsn,WalPositionLocator)}, this method delegates to that method
 * @return
 * @throws SQLException
 * @throws InterruptedException
 */
@Override public ReplicationStream startStreaming(WalPositionLocator walPosition) throws SQLException, InterruptedException {
  return startStreaming(null,walPosition);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresReplicationConnection.java",268
1997,"'-tryline","@Override public ReplicationStream startStreaming(Lsn offset,WalPositionLocator walPosition) throws SQLException, InterruptedException {
  initConnection();
  connect();
  if (offset == null || !offset.isValid()) {
    offset=defaultStartingPos;
  }
  Lsn lsn=offset;
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(starting streaming from LSN '{}',lsn);
  }
  try {
    return createReplicationStream(lsn,walPosition);
  }
 catch (  Exception e) {
    String message=Failed to start replication stream at  + lsn;
    if (e.getMessage().matches(.*replication slot .* is active.*)) {
      message+=; when setting up multiple connectors for the same database host, please make sure to use a distinct replication slot name for each.;
    }
    throw new DebeziumException(message,e);
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresReplicationConnection.java",292
1998,"'-tryline","@Override public void initConnection() throws SQLException, InterruptedException {
  initPublication();
  if (!hasInitedSlot) {
    initReplicationSlot();
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresReplicationConnection.java",317
1999,"'-tryline","private ReplicationStream createReplicationStream(final Lsn startLsn,WalPositionLocator walPosition) throws SQLException, InterruptedException {
  PGReplicationStream s;
  try {
    try {
      s=startPgReplicationStream(startLsn,plugin.forceRds() ? messageDecoder::optionsWithoutMetadata : messageDecoder::optionsWithMetadata);
      messageDecoder.setContainsMetadata(plugin.forceRds() ? false : true);
    }
 catch (    PSQLException e) {
      LOGGER.debug(Could not register for streaming, retrying without optional options,e);
      if (useTemporarySlot()) {
        initReplicationSlot();
      }
      s=startPgReplicationStream(startLsn,plugin.forceRds() ? messageDecoder::optionsWithoutMetadata : messageDecoder::optionsWithMetadata);
      messageDecoder.setContainsMetadata(plugin.forceRds() ? false : true);
    }
  }
 catch (  PSQLException e) {
    if (e.getMessage().matches((?s)ERROR: option .* is unknown.*)) {
      LOGGER.warn(Could not register for streaming with metadata in messages, falling back to messages without metadata);
      if (useTemporarySlot()) {
        initReplicationSlot();
      }
      s=startPgReplicationStream(startLsn,messageDecoder::optionsWithoutMetadata);
      messageDecoder.setContainsMetadata(false);
    }
 else     if (e.getMessage().matches((?s)ERROR: requested WAL segment .* has already been removed.*)) {
      LOGGER.error(Cannot rewind to last processed WAL position,e);
      throw new ConnectException(The offset to start reading from has been removed from the database write-ahead log. Create a new snapshot and consider setting of PostgreSQL parameter wal_keep_segments = 0.);
    }
 else {
      throw e;
    }
  }
  final PGReplicationStream stream=s;
  return new ReplicationStream(){
    private static final int CHECK_WARNINGS_AFTER_COUNT=100;
    private int warningCheckCounter=CHECK_WARNINGS_AFTER_COUNT;
    private ExecutorService keepAliveExecutor=null;
    private AtomicBoolean keepAliveRunning;
    private final Metronome metronome=Metronome.sleeper(statusUpdateInterval,Clock.SYSTEM);
    private volatile Lsn lastReceivedLsn;
    @Override public void read(    ReplicationMessageProcessor processor) throws SQLException, InterruptedException {
      processWarnings(false);
      ByteBuffer read=stream.read();
      final Lsn lastReceiveLsn=Lsn.valueOf(stream.getLastReceiveLSN());
      LOGGER.trace(Streaming requested from LSN {}, received LSN {},startLsn,lastReceiveLsn);
      if (messageDecoder.shouldMessageBeSkipped(read,lastReceiveLsn,startLsn,walPosition)) {
        return;
      }
      deserializeMessages(read,processor);
    }
    @Override public boolean readPending(    ReplicationMessageProcessor processor) throws SQLException, InterruptedException {
      processWarnings(false);
      ByteBuffer read=stream.readPending();
      final Lsn lastReceiveLsn=Lsn.valueOf(stream.getLastReceiveLSN());
      LOGGER.trace(Streaming requested from LSN {}, received LSN {},startLsn,lastReceiveLsn);
      if (read == null) {
        return false;
      }
      if (messageDecoder.shouldMessageBeSkipped(read,lastReceiveLsn,startLsn,walPosition)) {
        return true;
      }
      deserializeMessages(read,processor);
      return true;
    }
    private void deserializeMessages(    ByteBuffer buffer,    ReplicationMessageProcessor processor) throws SQLException, InterruptedException {
      lastReceivedLsn=Lsn.valueOf(stream.getLastReceiveLSN());
      LOGGER.trace(Received message at LSN {},lastReceivedLsn);
      messageDecoder.processMessage(buffer,processor,typeRegistry);
    }
    @Override public void close() throws SQLException {
      processWarnings(true);
      stream.close();
    }
    @Override public void flushLsn(    Lsn lsn) throws SQLException {
      doFlushLsn(lsn);
    }
    private void doFlushLsn(    Lsn lsn) throws SQLException {
      stream.setFlushedLSN(lsn.asLogSequenceNumber());
      stream.setAppliedLSN(lsn.asLogSequenceNumber());
      stream.forceUpdateStatus();
    }
    @Override public Lsn lastReceivedLsn(){
      return lastReceivedLsn;
    }
    @Override public void startKeepAlive(    ExecutorService service){
      if (keepAliveExecutor == null) {
        keepAliveExecutor=service;
        keepAliveRunning=new AtomicBoolean(true);
        keepAliveExecutor.submit(() -> {
          while (keepAliveRunning.get()) {
            try {
              LOGGER.trace(Forcing status update with replication stream);
              stream.forceUpdateStatus();
              metronome.pause();
            }
 catch (            Exception exp) {
              throw new RuntimeException(received unexpected exception will perform keep alive,exp);
            }
          }
        }
);
      }
    }
    @Override public void stopKeepAlive(){
      if (keepAliveExecutor != null) {
        keepAliveRunning.set(false);
        keepAliveExecutor.shutdownNow();
        keepAliveExecutor=null;
      }
    }
    private void processWarnings(    final boolean forced) throws SQLException {
      if (--warningCheckCounter == 0 || forced) {
        warningCheckCounter=CHECK_WARNINGS_AFTER_COUNT;
        for (SQLWarning w=connection().getWarnings(); w != null; w=w.getNextWarning()) {
          LOGGER.debug(Server-side message: '{}', state = {}, code = {},w.getMessage(),w.getSQLState(),w.getErrorCode());
        }
        connection().clearWarnings();
      }
    }
    @Override public Lsn startLsn(){
      return startLsn;
    }
  }
;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresReplicationConnection.java",391
2000,"'-tryline","@Override public void read(ReplicationMessageProcessor processor) throws SQLException, InterruptedException {
  processWarnings(false);
  ByteBuffer read=stream.read();
  final Lsn lastReceiveLsn=Lsn.valueOf(stream.getLastReceiveLSN());
  LOGGER.trace(Streaming requested from LSN {}, received LSN {},startLsn,lastReceiveLsn);
  if (messageDecoder.shouldMessageBeSkipped(read,lastReceiveLsn,startLsn,walPosition)) {
    return;
  }
  deserializeMessages(read,processor);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresReplicationConnection.java",452
2001,"'-tryline","@Override public boolean readPending(ReplicationMessageProcessor processor) throws SQLException, InterruptedException {
  processWarnings(false);
  ByteBuffer read=stream.readPending();
  final Lsn lastReceiveLsn=Lsn.valueOf(stream.getLastReceiveLSN());
  LOGGER.trace(Streaming requested from LSN {}, received LSN {},startLsn,lastReceiveLsn);
  if (read == null) {
    return false;
  }
  if (messageDecoder.shouldMessageBeSkipped(read,lastReceiveLsn,startLsn,walPosition)) {
    return true;
  }
  deserializeMessages(read,processor);
  return true;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresReplicationConnection.java",464
2002,"'-tryline","private void deserializeMessages(ByteBuffer buffer,ReplicationMessageProcessor processor) throws SQLException, InterruptedException {
  lastReceivedLsn=Lsn.valueOf(stream.getLastReceiveLSN());
  LOGGER.trace(Received message at LSN {},lastReceivedLsn);
  messageDecoder.processMessage(buffer,processor,typeRegistry);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresReplicationConnection.java",484
2003,"'-tryline","/** 
 * Opens a stream for reading logical replication changes from the last known position of the slot for which the connection was opened. The last known position is based on the server's  {@code confirmed_flush_lsn} value from the {@code pg_replication_slots}table. <p> If there is no last known value (i.e. the connection is for a newly created slot) then the Postgres server will start streaming changes from that last position reported during this connection's creation. </p>
 * @return a {@link PGReplicationStream} from which data is read; never null
 * @throws SQLException if there is a problem obtaining the replication stream
 */
ReplicationStream startStreaming(WalPositionLocator walPosition) throws SQLException, InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\ReplicationConnection.java",32
2004,"'-tryline","/** 
 * Opens a stream for reading logical replication changes from a given LSN position. <p> Note that it is possible for a server to have recycled old WAL segments (see the  {@code wal_keep_segments} setting). Ifthat is the case, then even though a LSN number may be valid, the server will not stream back any changes because they are not available. </p>
 * @param offset a value representing the WAL sequence number where replication should start from; if the valueis  {@code null} or negative, this behaves exactly like {@link #startStreaming()}.
 * @return a {@link PGReplicationStream} from which data is read; never null
 * @see org.postgresql.replication.LogSequenceNumber
 * @throws SQLException if anything fails
 */
ReplicationStream startStreaming(Lsn offset,WalPositionLocator walPosition) throws SQLException, InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\ReplicationConnection.java",46
2005,"'-tryline","/** 
 * Forces the connection to be created, is called by startStreaming, but can be called manually in cases where we want the connection but not to to start streaming yet. Can be called multiple times
 */
void initConnection() throws SQLException, InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\ReplicationConnection.java",69
2006,"'-tryline","/** 
 * Processes the given replication message.
 * @param message The replication message, never {@code null}.
 */
void process(ReplicationMessage message) throws SQLException, InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\ReplicationStream.java",24
2007,"'-tryline","/** 
 * Blocks and waits for a replication message to be sent over a replication connection. Once a message has been received, the value of the  {@link #lastReceivedLsn() last received LSN} will also be updated accordingly.
 * @param processor - a callback to which the arrived message is passed
 * @throws SQLException if anything unexpected fails
 * @see PGReplicationStream#read()
 */
void read(ReplicationMessageProcessor processor) throws SQLException, InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\ReplicationStream.java",31
2008,"'-tryline","/** 
 * Attempts to read a replication message from a replication connection, processing that message if it's available or returning {@code false} if nothing is available. Once a message has been received, the value of the {@link #lastReceivedLsn() last received LSN}will also be updated accordingly.
 * @param processor - a callback to which the arrived message is passed
 * @return {@code true} if a message was received and processed
 * @throws SQLException if anything unexpected fails
 * @see PGReplicationStream#readPending()
 */
boolean readPending(ReplicationMessageProcessor processor) throws SQLException, InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\ReplicationStream.java",41
2009,"'-tryline","@Override public void processNotEmptyMessage(ByteBuffer buffer,ReplicationMessageProcessor processor,TypeRegistry typeRegistry) throws SQLException, InterruptedException {
  try {
    if (!buffer.hasArray()) {
      throw new IllegalStateException(Invalid buffer received from PG server during streaming replication);
    }
    final byte[] source=buffer.array();
    final byte[] content=Arrays.copyOfRange(source,buffer.arrayOffset(),source.length);
    LOGGER.trace(Message arrived for decoding {},new String(content));
    final Document message=DocumentReader.floatNumbersAsTextReader().read(content);
    final long txId=message.getLong(xid);
    final String timestamp=message.getString(timestamp);
    final Instant commitTime=dateTime.systemTimestampToInstant(timestamp);
    final Array changes=message.getArray(change);
    if (changes.isEmpty()) {
      processor.process(new TransactionMessage(Operation.BEGIN,txId,commitTime));
      processor.process(new TransactionMessage(Operation.COMMIT,txId,commitTime));
    }
 else {
      Iterator<Entry> it=changes.iterator();
      processor.process(new TransactionMessage(Operation.BEGIN,txId,commitTime));
      while (it.hasNext()) {
        Value value=it.next().getValue();
        processor.process(new Wal2JsonReplicationMessage(txId,commitTime,value.asDocument(),containsMetadata,!it.hasNext(),typeRegistry));
      }
      processor.process(new TransactionMessage(Operation.COMMIT,txId,commitTime));
    }
  }
 catch (  final IOException e) {
    throw new ConnectException(e);
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\wal2json\NonStreamingWal2JsonMessageDecoder.java",52
2010,"'-tryline","@Override public void processNotEmptyMessage(ByteBuffer buffer,ReplicationMessageProcessor processor,TypeRegistry typeRegistry) throws SQLException, InterruptedException {
  try {
    if (!buffer.hasArray()) {
      throw new IllegalStateException(Invalid buffer received from PG server during streaming replication);
    }
    final byte[] source=buffer.array();
    final byte[] content=Arrays.copyOfRange(source,buffer.arrayOffset(),source.length + 2);
    final int lastPos=content.length - 1;
    content[lastPos - 1]=SPACE;
    content[lastPos]=SPACE;
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace(Chunk arrived from database {},new String(content));
    }
    if (!messageInProgress) {
      byte firstChar=getFirstNonWhiteChar(content);
      if (firstChar != LEFT_BRACE) {
        outOfOrderChunk(content);
        nonInitialChunk(processor,typeRegistry,content);
      }
 else {
        if (getLastNonWhiteChar(content) != RIGHT_BRACE) {
          content[lastPos - 1]=RIGHT_BRACKET;
          content[lastPos]=RIGHT_BRACE;
        }
        final Document message=DocumentReader.defaultReader().read(content);
        if (message.has(kind)) {
          outOfOrderChunk(content);
          nonInitialChunk(processor,typeRegistry,content);
        }
 else {
          txId=message.getLong(xid);
          final String timestamp=message.getString(timestamp);
          commitTime=dateTime.systemTimestampToInstant(timestamp);
          messageInProgress=true;
          currentChunk=null;
          processor.process(new TransactionMessage(Operation.BEGIN,txId,commitTime));
        }
      }
    }
 else {
      nonInitialChunk(processor,typeRegistry,content);
    }
  }
 catch (  final IOException e) {
    throw new ConnectException(e);
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\wal2json\StreamingWal2JsonMessageDecoder.java",116
2011,"'-tryline","protected void nonInitialChunk(ReplicationMessageProcessor processor,TypeRegistry typeRegistry,final byte[] content) throws IOException, SQLException, InterruptedException {
  byte firstChar=getFirstNonWhiteChar(content);
  if (firstChar == LEFT_BRACE) {
    currentChunk=content;
  }
 else   if (firstChar == COMMA) {
    if (currentChunk != null) {
      doProcessMessage(processor,typeRegistry,currentChunk,false);
    }
    replaceFirstNonWhiteChar(content,SPACE);
    currentChunk=content;
  }
 else   if (firstChar == RIGHT_BRACKET) {
    doProcessMessage(processor,typeRegistry,currentChunk,true);
    messageInProgress=false;
    processor.process(new TransactionMessage(Operation.COMMIT,txId,commitTime));
  }
 else {
    throw new ConnectException(Chunk arrived in unexpected state);
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\wal2json\StreamingWal2JsonMessageDecoder.java",172
2012,"'-tryline","private void doProcessMessage(ReplicationMessageProcessor processor,TypeRegistry typeRegistry,byte[] content,boolean lastMessage) throws IOException, SQLException, InterruptedException {
  if (content != null) {
    final Document change=DocumentReader.floatNumbersAsTextReader().read(content);
    LOGGER.trace(Change arrived for decoding {},change);
    processor.process(new Wal2JsonReplicationMessage(txId,commitTime,change,containsMetadata,lastMessage,typeRegistry));
  }
 else {
    LOGGER.trace(Empty change arrived);
    processor.process(new NoopMessage(txId,commitTime));
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\wal2json\StreamingWal2JsonMessageDecoder.java",253
2013,"'-tryline","@Override protected CatchUpStreamingResult executeCatchUpStreaming(OffsetContext previousOffset,ChangeEventSourceContext context,SnapshotChangeEventSource snapshotSource) throws InterruptedException {
  if (previousOffset != null && !snapshotter.shouldStreamEventsStartingFromSnapshot() && slotInfo != null) {
    try {
      setSnapshotStartLsn((PostgresSnapshotChangeEventSource)snapshotSource,(PostgresOffsetContext)previousOffset);
    }
 catch (    SQLException e) {
      throw new DebeziumException(Failed to determine catch-up streaming stopping LSN);
    }
    LOGGER.info(Previous connector state exists and will stream events until {} then perform snapshot,((PostgresOffsetContext)previousOffset).getStreamingStoppingLsn());
    streamEvents(previousOffset,context);
    return new CatchUpStreamingResult(true);
  }
  return new CatchUpStreamingResult(false);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresChangeEventSourceCoordinator.java",52
2014,"'-tryline","@Override public void emitChangeRecords(DataCollectionSchema schema,Receiver receiver) throws InterruptedException {
  schema=synchronizeTableSchema(schema);
  super.emitChangeRecords(schema,receiver);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresChangeRecordEmitter.java",88
2015,"'-tryline","@Override protected void emitTruncateRecord(Receiver receiver,TableSchema tableSchema) throws InterruptedException {
  Struct envelope=tableSchema.getEnvelopeSchema().truncate(getOffset().getSourceInfo(),getClock().currentTimeAsInstant());
  receiver.changeRecord(tableSchema,Operation.TRUNCATE,null,envelope,getOffset(),null);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresChangeRecordEmitter.java",94
2016,"'-tryline","@Override public List<SourceRecord> doPoll() throws InterruptedException {
  final List<DataChangeEvent> records=queue.poll();
  final List<SourceRecord> sourceRecords=records.stream().map(DataChangeEvent::getRecord).collect(Collectors.toList());
  return sourceRecords;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresConnectorTask.java",255
2017,"'-tryline","@Override protected void lockTablesForSchemaSnapshot(ChangeEventSourceContext sourceContext,RelationalSnapshotContext snapshotContext) throws SQLException, InterruptedException {
  final Duration lockTimeout=connectorConfig.snapshotLockTimeout();
  final Optional<String> lockStatement=snapshotter.snapshotTableLockingStatement(lockTimeout,snapshotContext.capturedTables);
  if (lockStatement.isPresent()) {
    LOGGER.info(Waiting a maximum of '{}' seconds for each table lock,lockTimeout.getSeconds());
    jdbcConnection.executeWithoutCommitting(lockStatement.get());
    schema.refresh(jdbcConnection,false);
  }
 else {
    if (!snapshotter.exportSnapshot()) {
      LOGGER.warn(Step 2: skipping locking each table, this may result in inconsistent schema!);
    }
 else {
      LOGGER.info(Step 2: skipping locking each table in an exported snapshot);
    }
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresSnapshotChangeEventSource.java",103
2018,"'-tryline","@Override protected void readTableStructure(ChangeEventSourceContext sourceContext,RelationalSnapshotContext snapshotContext) throws SQLException, InterruptedException {
  Set<String> schemas=snapshotContext.capturedTables.stream().map(TableId::schema).collect(Collectors.toSet());
  for (  String schema : schemas) {
    if (!sourceContext.isRunning()) {
      throw new InterruptedException(Interrupted while reading structure of schema  + schema);
    }
    LOGGER.info(Reading structure of schema '{}',snapshotContext.catalogName);
    jdbcConnection.readSchema(snapshotContext.tables,snapshotContext.catalogName,schema,connectorConfig.getTableFilters().dataCollectionFilter(),null,false);
  }
  schema.refresh(jdbcConnection,false);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresSnapshotChangeEventSource.java",184
2019,"'-tryline","@Override public void execute(ChangeEventSourceContext context) throws InterruptedException {
  if (!snapshotter.shouldStream()) {
    LOGGER.info(Streaming is not enabled in correct configuration);
    return;
  }
  try {
    final WalPositionLocator walPosition;
    if (hasStartLsnStoredInContext) {
      final Lsn lsn=offsetContext.lastCompletelyProcessedLsn() != null ? offsetContext.lastCompletelyProcessedLsn() : offsetContext.lsn();
      LOGGER.info(Retrieved latest position from stored offset '{}',lsn);
      walPosition=new WalPositionLocator(offsetContext.lastCommitLsn(),lsn);
      replicationStream.compareAndSet(null,replicationConnection.startStreaming(lsn,walPosition));
    }
 else {
      LOGGER.info(No previous LSN found in Kafka, streaming from the latest xlogpos or flushed LSN...);
      walPosition=new WalPositionLocator();
      replicationStream.compareAndSet(null,replicationConnection.startStreaming(walPosition));
    }
    ReplicationStream stream=this.replicationStream.get();
    stream.startKeepAlive(Executors.newSingleThreadExecutor());
    taskContext.refreshSchema(connection,true);
    if (!isInPreSnapshotCatchUpStreaming()) {
      connection.commit();
    }
    this.lastCompletelyProcessedLsn=replicationStream.get().startLsn();
    if (walPosition.searchingEnabled()) {
      searchWalPosition(context,stream,walPosition);
      try {
        if (!isInPreSnapshotCatchUpStreaming()) {
          connection.commit();
        }
      }
 catch (      Exception e) {
        LOGGER.info(Commit failed while preparing for reconnect,e);
      }
      walPosition.enableFiltering();
      stream.stopKeepAlive();
      replicationConnection.reconnect();
      replicationStream.set(replicationConnection.startStreaming(walPosition.getLastEventStoredLsn(),walPosition));
      stream=this.replicationStream.get();
      stream.startKeepAlive(Executors.newSingleThreadExecutor());
    }
    processMessages(context,stream);
  }
 catch (  Throwable e) {
    errorHandler.setProducerThrowable(e);
  }
 finally {
    if (replicationConnection != null) {
      LOGGER.debug(stopping streaming...);
      ReplicationStream stream=replicationStream.get();
      if (stream != null) {
        stream.stopKeepAlive();
      }
      try {
        if (!isInPreSnapshotCatchUpStreaming()) {
          connection.commit();
        }
        replicationConnection.close();
      }
 catch (      Exception e) {
        LOGGER.debug(Exception while closing the connection,e);
      }
      replicationStream.set(null);
    }
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresStreamingChangeEventSource.java",92
2020,"'-tryline","private void processMessages(ChangeEventSourceContext context,final ReplicationStream stream) throws SQLException, InterruptedException {
  LOGGER.info(Processing messages);
  int noMessageIterations=0;
  while (context.isRunning() && (offsetContext.getStreamingStoppingLsn() == null || (lastCompletelyProcessedLsn.compareTo(offsetContext.getStreamingStoppingLsn()) < 0))) {
    boolean receivedMessage=stream.readPending(message -> {
      final Lsn lsn=stream.lastReceivedLsn();
      if (message.isLastEventForLsn()) {
        lastCompletelyProcessedLsn=lsn;
      }
      if (message.isTransactionalMessage()) {
        if (!connectorConfig.shouldProvideTransactionMetadata()) {
          LOGGER.trace(Received transactional message {},message);
          if (message.getOperation() == Operation.COMMIT) {
            commitMessage(lsn);
          }
          return;
        }
        offsetContext.updateWalPosition(lsn,lastCompletelyProcessedLsn,message.getCommitTime(),message.getTransactionId(),null,taskContext.getSlotXmin(connection));
        if (message.getOperation() == Operation.BEGIN) {
          dispatcher.dispatchTransactionStartedEvent(Long.toString(message.getTransactionId()),offsetContext);
        }
 else         if (message.getOperation() == Operation.COMMIT) {
          commitMessage(lsn);
          dispatcher.dispatchTransactionCommittedEvent(offsetContext);
        }
        maybeWarnAboutGrowingWalBacklog(true);
      }
 else {
        TableId tableId=null;
        if (message.getOperation() != Operation.NOOP) {
          tableId=PostgresSchema.parse(message.getTable());
          Objects.requireNonNull(tableId);
        }
        offsetContext.updateWalPosition(lsn,lastCompletelyProcessedLsn,message.getCommitTime(),message.getTransactionId(),tableId,taskContext.getSlotXmin(connection));
        boolean dispatched=message.getOperation() != Operation.NOOP && dispatcher.dispatchDataChangeEvent(tableId,new PostgresChangeRecordEmitter(offsetContext,clock,connectorConfig,schema,connection,message));
        maybeWarnAboutGrowingWalBacklog(dispatched);
      }
    }
);
    if (receivedMessage) {
      noMessageIterations=0;
    }
 else {
      if (offsetContext.hasCompletelyProcessedPosition()) {
        dispatcher.dispatchHeartbeatEvent(offsetContext);
      }
      noMessageIterations++;
      if (noMessageIterations >= THROTTLE_NO_MESSAGE_BEFORE_PAUSE) {
        noMessageIterations=0;
        pauseNoMessage.sleepWhen(true);
      }
    }
    if (!isInPreSnapshotCatchUpStreaming()) {
      connection.commit();
    }
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresStreamingChangeEventSource.java",178
2021,"'-tryline","private void searchWalPosition(ChangeEventSourceContext context,final ReplicationStream stream,final WalPositionLocator walPosition) throws SQLException, InterruptedException {
  AtomicReference<Lsn> resumeLsn=new AtomicReference<>();
  int noMessageIterations=0;
  LOGGER.info(Searching for WAL resume position);
  while (context.isRunning() && resumeLsn.get() == null) {
    boolean receivedMessage=stream.readPending(message -> {
      final Lsn lsn=stream.lastReceivedLsn();
      resumeLsn.set(walPosition.resumeFromLsn(lsn,message).orElse(null));
    }
);
    if (receivedMessage) {
      noMessageIterations=0;
    }
 else {
      noMessageIterations++;
      if (noMessageIterations >= THROTTLE_NO_MESSAGE_BEFORE_PAUSE) {
        noMessageIterations=0;
        pauseNoMessage.sleepWhen(true);
      }
    }
  }
  LOGGER.info(WAL resume position '{}' discovered,resumeLsn.get());
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresStreamingChangeEventSource.java",263
2022,"'-tryline","private void commitMessage(final Lsn lsn) throws SQLException, InterruptedException {
  lastCompletelyProcessedLsn=lsn;
  offsetContext.updateCommitPosition(lsn,lastCompletelyProcessedLsn,null,null,null,taskContext.getSlotXmin(connection));
  maybeWarnAboutGrowingWalBacklog(false);
  dispatcher.dispatchHeartbeatEvent(offsetContext);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresStreamingChangeEventSource.java",290
2023,"'-tryline","protected void await(long timeout,TimeUnit unit) throws InterruptedException {
  final ElapsedTimeStrategy timer=ElapsedTimeStrategy.constant(Clock.SYSTEM,unit.toMillis(timeout));
  timer.hasElapsed();
  while (!timer.hasElapsed()) {
    final SourceRecord r=consumeRecord();
    if (r != null) {
      accept(r);
      if (records.size() == expectedRecordsCount) {
        break;
      }
    }
  }
  if (records.size() != expectedRecordsCount) {
    fail(Consumer is still expecting  + (expectedRecordsCount - records.size()) +  records, as it received only + records.size());
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\AbstractRecordsProducerTest.java",1315
2024,"'-tryline","protected void waitForSnapshotToBeCompleted() throws InterruptedException {
  waitForSnapshotToBeCompleted(postgres,test_server);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\AbstractRecordsProducerTest.java",1333
2025,"'-tryline","protected void waitForStreamingToStart() throws InterruptedException {
  waitForStreamingRunning(postgres,test_server);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\AbstractRecordsProducerTest.java",1337
2026,"'-tryline","@Before public void beforeEach() throws InterruptedException {
  TestHelper.dropDefaultReplicationSlot();
  TestHelper.dropPublication();
  outboxEventRouter=new EventRouter<>();
  outboxEventRouter.configure(Collections.emptyMap());
  TestHelper.execute(SETUP_OUTBOX_SCHEMA);
  TestHelper.execute(SETUP_OUTOBOX_TABLE);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\OutboxEventRouterIT.java",95
2027,"'-tryline","private void startConnectorWithNoSnapshot() throws InterruptedException {
  Configuration.Builder configBuilder=getConfigurationBuilder(SnapshotMode.NEVER);
  start(PostgresConnector.class,configBuilder.build());
  waitForStreamingRunning(postgres,TestHelper.TEST_SERVER);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\OutboxEventRouterIT.java",527
2028,"'-tryline","@Test @FixFor(DBZ-1174) public void shouldUseMicrosecondsForTransactionCommitTime() throws InterruptedException {
  TestHelper.execute(SETUP_TABLES_STMT);
  start(PostgresConnector.class,TestHelper.defaultConfig().with(CommonConnectorConfig.SOURCE_STRUCT_MAKER_VERSION,Version.V1).build());
  assertConnectorIsRunning();
  Instant inst=Instant.now();
  final long microsSnapshot=TimeUnit.SECONDS.toMicros(inst.getEpochSecond()) + TimeUnit.NANOSECONDS.toMicros(inst.getNano());
  SourceRecords actualRecords=consumeRecordsByTopic(2);
  actualRecords.forEach(sourceRecord -> assertSourceInfoMicrosecondTransactionTimestamp(sourceRecord,microsSnapshot,TimeUnit.MINUTES.toMicros(1L)));
  TestHelper.execute(INSERT_STMT);
  inst=Instant.now();
  final long microsStream=TimeUnit.SECONDS.toMicros(inst.getEpochSecond()) + TimeUnit.NANOSECONDS.toMicros(inst.getNano());
  actualRecords=consumeRecordsByTopic(2);
  actualRecords.forEach(sourceRecord -> assertSourceInfoMicrosecondTransactionTimestamp(sourceRecord,microsStream,TimeUnit.MINUTES.toMicros(1L)));
  stopConnector();
  assertNoRecordsToConsume();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",314
2029,"'-tryline","@Test @FixFor(DBZ-1235) public void shouldUseMillisecondsForTransactionCommitTime() throws InterruptedException {
  TestHelper.execute(SETUP_TABLES_STMT);
  start(PostgresConnector.class,TestHelper.defaultConfig().build());
  assertConnectorIsRunning();
  Instant inst=Instant.now();
  final long millisSnapshot=TimeUnit.SECONDS.toMillis(inst.getEpochSecond()) + TimeUnit.NANOSECONDS.toMillis(inst.getNano());
  SourceRecords actualRecords=consumeRecordsByTopic(2);
  actualRecords.forEach(sourceRecord -> assertSourceInfoMillisecondTransactionTimestamp(sourceRecord,millisSnapshot,TimeUnit.MINUTES.toMillis(1L)));
  TestHelper.execute(INSERT_STMT);
  inst=Instant.now();
  final long millisStream=TimeUnit.SECONDS.toMillis(inst.getEpochSecond()) + TimeUnit.NANOSECONDS.toMillis(inst.getNano());
  actualRecords=consumeRecordsByTopic(2);
  actualRecords.forEach(sourceRecord -> assertSourceInfoMillisecondTransactionTimestamp(sourceRecord,millisStream,TimeUnit.MINUTES.toMillis(1L)));
  stopConnector();
  assertNoRecordsToConsume();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",344
2030,"'-tryline","@Test public void shouldProduceEventsWhenSnapshotsAreNeverAllowed() throws InterruptedException {
  Testing.Print.enable();
  TestHelper.dropDefaultReplicationSlot();
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForDefaultReplicationSlotBeActive();
  waitForAvailableRecords(100,TimeUnit.MILLISECONDS);
  assertNoRecordsToConsume();
  TestHelper.execute(INSERT_STMT);
  assertRecordsAfterInsert(2,2,2);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",663
2031,"'-tryline","@Test public void shouldNotProduceEventsWithInitialOnlySnapshot() throws InterruptedException {
  Testing.Print.enable();
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL_ONLY.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  assertRecordsFromSnapshot(2,1,1);
  TestHelper.execute(INSERT_STMT);
  waitForAvailableRecords(100,TimeUnit.MILLISECONDS);
  assertNoRecordsToConsume();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",685
2032,"'-tryline","@Test public void shouldProduceEventsWhenAlwaysTakingSnapshots() throws InterruptedException {
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.ALWAYS.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.FALSE);
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted();
  assertRecordsFromSnapshot(2,1,1);
  TestHelper.execute(INSERT_STMT);
  assertRecordsAfterInsert(2,2,2);
  stopConnector();
  assertNoRecordsToConsume();
  start(PostgresConnector.class,configBuilder.with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).build());
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted();
  assertRecordsFromSnapshot(4,1,2,1,2);
  stopConnector();
  TestHelper.dropDefaultReplicationSlot();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",706
2033,"'-tryline","@Test @FixFor(DBZ-1245) public void shouldNotSendEmptyOffset() throws InterruptedException, SQLException {
  final String statement=DROP SCHEMA IF EXISTS s1 CASCADE; + CREATE SCHEMA s1;  + CREATE TABLE s1.a (pk SERIAL, aa integer, PRIMARY KEY(pk));;
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,s1.a).with(Heartbeat.HEARTBEAT_INTERVAL,10).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.execute(statement);
  waitForAvailableRecords(1000,TimeUnit.MILLISECONDS);
  SourceRecord record=consumeRecord();
  assertThat(record == null || !record.sourceOffset().isEmpty());
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",1041
2034,"'-tryline","@Test @FixFor(DBZ-965) public void shouldRegularlyFlushLsn() throws InterruptedException, SQLException {
  final int recordCount=10;
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,s1.a).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  waitForStreamingRunning(postgres,TestHelper.TEST_SERVER);
  assertNoRecordsToConsume();
  final Set<String> flushLsn=new HashSet<>();
  try (final PostgresConnection connection=TestHelper.create()){
    flushLsn.add(getConfirmedFlushLsn(connection));
    for (int i=2; i <= recordCount + 2; i++) {
      TestHelper.execute(INSERT_STMT);
      final SourceRecords actualRecords=consumeRecordsByTopic(1);
      assertThat(actualRecords.topics().size()).isEqualTo(1);
      assertThat(actualRecords.recordsForTopic(topicName(s1.a)).size()).isEqualTo(1);
      try {
        Awaitility.await().atMost(2,TimeUnit.SECONDS).ignoreExceptions().until(() -> flushLsn.add(getConfirmedFlushLsn(connection)));
      }
 catch (      ConditionTimeoutException e) {
      }
    }
  }
   Assertions.assertThat(flushLsn.size()).isGreaterThanOrEqualTo((recordCount * 3) / 4);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",1063
2035,"'-tryline","@Test @FixFor(DBZ-2660) public void shouldRegularlyFlushLsnWithTxMonitoring() throws InterruptedException, SQLException {
  final int recordCount=10;
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,s1.a).with(PostgresConnectorConfig.PROVIDE_TRANSACTION_METADATA,true).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  waitForStreamingRunning(postgres,TestHelper.TEST_SERVER);
  assertNoRecordsToConsume();
  final String txTopic=topicName(transaction);
  TestHelper.execute(INSERT_STMT);
  final SourceRecords firstRecords=consumeDmlRecordsByTopic(1);
  assertThat(firstRecords.topics().size()).isEqualTo(2);
  assertThat(firstRecords.recordsForTopic(txTopic).size()).isGreaterThanOrEqualTo(2);
  Assertions.assertThat(firstRecords.recordsForTopic(txTopic).get(1).sourceOffset().containsKey(lsn_commit)).isTrue();
  stopConnector();
  assertConnectorNotRunning();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  waitForStreamingRunning(postgres,TestHelper.TEST_SERVER);
  assertOnlyTransactionRecordsToConsume();
  final Set<String> flushLsn=new HashSet<>();
  try (final PostgresConnection connection=TestHelper.create()){
    flushLsn.add(getConfirmedFlushLsn(connection));
    for (int i=2; i <= recordCount + 2; i++) {
      TestHelper.execute(INSERT_STMT);
      final SourceRecords actualRecords=consumeDmlRecordsByTopic(1);
      assertThat(actualRecords.topics().size()).isEqualTo(2);
      assertThat(actualRecords.recordsForTopic(txTopic).size()).isGreaterThanOrEqualTo(2);
      assertThat(actualRecords.recordsForTopic(topicName(s1.a)).size()).isEqualTo(1);
      try {
        Awaitility.await().atMost(2,TimeUnit.SECONDS).ignoreExceptions().until(() -> flushLsn.add(getConfirmedFlushLsn(connection)));
      }
 catch (      ConditionTimeoutException e) {
      }
    }
  }
   Assertions.assertThat(flushLsn.size()).isGreaterThanOrEqualTo((recordCount * 3) / 4);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",1103
2036,"'-tryline","@Test @FixFor(DBZ-892) @SkipWhenDecoderPluginNameIsNot(value=SkipWhenDecoderPluginNameIsNot.DecoderPluginName.WAL2JSON,reason=Only wal2json decoder emits empty events and passes them to streaming source) public void shouldFlushLsnOnEmptyMessage() throws InterruptedException, SQLException {
  final String DDL_STATEMENT=CREATE TEMPORARY TABLE xx(id INT);;
  final int recordCount=10;
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).with(PostgresConnectorConfig.TABLE_INCLUDE_LIST,s1.a).with(Heartbeat.HEARTBEAT_INTERVAL,1_000).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  waitForStreamingRunning(postgres,TestHelper.TEST_SERVER);
  assertNoRecordsToConsume();
  final Set<String> flushLsn=new HashSet<>();
  TestHelper.execute(INSERT_STMT);
  Awaitility.await().atMost(TestHelper.waitTimeForRecords(),TimeUnit.SECONDS).until(() -> {
    final SourceRecords actualRecords=consumeRecordsByTopic(1);
    final List<SourceRecord> topicRecords=actualRecords.recordsForTopic(topicName(s1.a));
    return topicRecords != null && topicRecords.size() == 1;
  }
);
  try (final PostgresConnection connection=TestHelper.create()){
    flushLsn.add(getConfirmedFlushLsn(connection));
    for (int i=0; i < recordCount; i++) {
      TestHelper.execute(DDL_STATEMENT);
      try {
        Awaitility.await().atMost(5,TimeUnit.SECONDS).ignoreExceptions().until(() -> flushLsn.add(getConfirmedFlushLsn(connection)));
      }
 catch (      ConditionTimeoutException e) {
      }
    }
  }
   Assertions.assertThat(flushLsn.size()).isGreaterThanOrEqualTo((recordCount * 3) / 4);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",1160
2037,"'-tryline","@Test @FixFor(DBZ-1082) public void shouldAllowForCustomSnapshot() throws InterruptedException {
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.CUSTOM.getValue()).with(PostgresConnectorConfig.SNAPSHOT_MODE_CLASS,CustomTestSnapshot.class.getName()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.FALSE).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  SourceRecords actualRecords=consumeRecordsByTopic(1);
  List<SourceRecord> s1recs=actualRecords.recordsForTopic(topicName(s1.a));
  List<SourceRecord> s2recs=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(s1recs.size()).isEqualTo(1);
  assertThat(s2recs).isNull();
  SourceRecord record=s1recs.get(0);
  VerifyRecord.isValidRead(record,PK_FIELD,1);
  TestHelper.execute(INSERT_STMT);
  actualRecords=consumeRecordsByTopic(2);
  s1recs=actualRecords.recordsForTopic(topicName(s1.a));
  s2recs=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(s1recs.size()).isEqualTo(1);
  assertThat(s2recs.size()).isEqualTo(1);
  record=s1recs.get(0);
  VerifyRecord.isValidInsert(record,PK_FIELD,2);
  record=s2recs.get(0);
  VerifyRecord.isValidInsert(record,PK_FIELD,2);
  stopConnector();
  config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.CUSTOM.getValue()).with(PostgresConnectorConfig.SNAPSHOT_MODE_CLASS,CustomTestSnapshot.class.getName()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  actualRecords=consumeRecordsByTopic(4);
  s1recs=actualRecords.recordsForTopic(topicName(s1.a));
  s2recs=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(s1recs.size()).isEqualTo(2);
  assertThat(s2recs.size()).isEqualTo(2);
  VerifyRecord.isValidRead(s1recs.get(0),PK_FIELD,1);
  VerifyRecord.isValidRead(s1recs.get(1),PK_FIELD,2);
  VerifyRecord.isValidRead(s2recs.get(0),PK_FIELD,1);
  VerifyRecord.isValidRead(s2recs.get(1),PK_FIELD,2);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",1208
2038,"'-tryline","@Test @FixFor(DBZ-2456) public void shouldAllowForSelectiveSnapshot() throws InterruptedException {
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.ALWAYS.name()).with(CommonConnectorConfig.SNAPSHOT_MODE_TABLES,s1.a).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.FALSE);
  start(PostgresConnector.class,configBuilder.build());
  assertConnectorIsRunning();
  SourceRecords actualRecords=consumeRecordsByTopic(1);
  List<SourceRecord> s1recs=actualRecords.recordsForTopic(topicName(s1.a));
  List<SourceRecord> s2recs=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(s1recs.size()).isEqualTo(1);
  assertThat(s2recs).isNull();
  VerifyRecord.isValidRead(s1recs.get(0),PK_FIELD,1);
  TestHelper.execute(INSERT_STMT);
  actualRecords=consumeRecordsByTopic(2);
  s1recs=actualRecords.recordsForTopic(topicName(s1.a));
  s2recs=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(s1recs.size()).isEqualTo(1);
  assertThat(s2recs.size()).isEqualTo(1);
  VerifyRecord.isValidInsert(s1recs.get(0),PK_FIELD,2);
  VerifyRecord.isValidInsert(s2recs.get(0),PK_FIELD,2);
  stopConnector();
  start(PostgresConnector.class,configBuilder.with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).with(PostgresConnectorConfig.SNAPSHOT_MODE_TABLES,s2.a).build());
  assertConnectorIsRunning();
  actualRecords=consumeRecordsByTopic(2);
  s1recs=actualRecords.recordsForTopic(topicName(s1.a));
  s2recs=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(s2recs.size()).isEqualTo(2);
  assertThat(s1recs).isNull();
  VerifyRecord.isValidRead(s2recs.get(0),PK_FIELD,1);
  VerifyRecord.isValidRead(s2recs.get(1),PK_FIELD,2);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",1262
2039,"'-tryline","@Test @FixFor(DBZ-1015) public void shouldRewriteIdentityKey() throws InterruptedException {
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration.Builder configBuilder=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL.getValue()).with(PostgresConnectorConfig.SCHEMA_INCLUDE_LIST,s1,s2).with(PostgresConnectorConfig.MSG_KEY_COLUMNS,(.*)1.a:pk,aa);
  start(PostgresConnector.class,configBuilder.build());
  waitForSnapshotToBeCompleted();
  SourceRecords records=consumeRecordsByTopic(2);
  records.recordsForTopic(test_server.s1.a).forEach(record -> {
    Struct key=(Struct)record.key();
    Assertions.assertThat(key.get(PK_FIELD)).isNotNull();
    Assertions.assertThat(key.get(aa)).isNotNull();
  }
);
  records.recordsForTopic(test_server.s2.a).forEach(record -> {
    Struct key=(Struct)record.key();
    Assertions.assertThat(key.get(PK_FIELD)).isNotNull();
    Assertions.assertThat(key.get(pk)).isNotNull();
    Assertions.assertThat(key.schema().field(aa)).isNull();
  }
);
  stopConnector();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",1980
2040,"'-tryline","private void assertRecordsFromSnapshot(int expectedCount,int... pks) throws InterruptedException {
  SourceRecords actualRecords=consumeRecordsByTopic(expectedCount);
  assertThat(actualRecords.allRecordsInOrder().size()).isEqualTo(expectedCount);
  int expectedCountPerSchema=expectedCount / 2;
  List<SourceRecord> recordsForTopicS1=actualRecords.recordsForTopic(topicName(s1.a));
  assertThat(recordsForTopicS1.size()).isEqualTo(expectedCountPerSchema);
  IntStream.range(0,expectedCountPerSchema).forEach(i -> VerifyRecord.isValidRead(recordsForTopicS1.remove(0),PK_FIELD,pks[i]));
  List<SourceRecord> recordsForTopicS2=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(recordsForTopicS2.size()).isEqualTo(expectedCountPerSchema);
  IntStream.range(0,expectedCountPerSchema).forEach(i -> VerifyRecord.isValidRead(recordsForTopicS2.remove(0),PK_FIELD,pks[i + expectedCountPerSchema]));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",2519
2041,"'-tryline","private void assertRecordsAfterInsert(int expectedCount,int... pks) throws InterruptedException {
  SourceRecords actualRecords=consumeRecordsByTopic(expectedCount);
  assertThat(actualRecords.topics().size()).isEqualTo(expectedCount);
  int expectedCountPerSchema=expectedCount / 2;
  List<SourceRecord> recordsForTopicS1=actualRecords.recordsForTopic(topicName(s1.a));
  assertThat(recordsForTopicS1.size()).isEqualTo(expectedCountPerSchema);
  IntStream.range(0,expectedCountPerSchema).forEach(i -> VerifyRecord.isValidInsert(recordsForTopicS1.remove(0),PK_FIELD,pks[i]));
  List<SourceRecord> recordsForTopicS2=actualRecords.recordsForTopic(topicName(s2.a));
  assertThat(recordsForTopicS2.size()).isEqualTo(expectedCountPerSchema);
  IntStream.range(0,expectedCountPerSchema).forEach(i -> VerifyRecord.isValidInsert(recordsForTopicS2.remove(0),PK_FIELD,pks[i]));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",2537
2042,"'-tryline","private void waitForSnapshotToBeCompleted() throws InterruptedException {
  waitForSnapshotToBeCompleted(postgres,TestHelper.TEST_SERVER);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",2607
2043,"'-tryline","private void waitForStreamingRunning() throws InterruptedException {
  waitForStreamingRunning(postgres,TestHelper.TEST_SERVER);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PostgresConnectorIT.java",2611
2044,"'-tryline","private SourceRecord assertRecordInserted(String expectedTopicName,String pkColumn,Integer pk) throws InterruptedException {
  assertFalse(records not generated,consumer.isEmpty());
  SourceRecord insertedRecord=consumer.remove();
  assertEquals(topicName(expectedTopicName),insertedRecord.topic());
  if (pk != null) {
    VerifyRecord.isValidInsert(insertedRecord,pkColumn,pk);
  }
 else {
    VerifyRecord.isValidInsert(insertedRecord);
  }
  return insertedRecord;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\PublicGeometryIT.java",115
2045,"'-tryline","private void startConnector(Function<Configuration.Builder,Configuration.Builder> customConfig,boolean waitForSnapshot,Predicate<SourceRecord> isStopRecord) throws InterruptedException {
  start(PostgresConnector.class,new PostgresConnectorConfig(customConfig.apply(TestHelper.defaultConfig().with(PostgresConnectorConfig.INCLUDE_UNKNOWN_DATATYPES,false).with(PostgresConnectorConfig.SCHEMA_EXCLUDE_LIST,postgis).with(PostgresConnectorConfig.SNAPSHOT_MODE,waitForSnapshot ? SnapshotMode.INITIAL : SnapshotMode.NEVER)).build()).getConfig(),isStopRecord);
  assertConnectorIsRunning();
  waitForStreamingToStart();
  if (waitForSnapshot) {
    consumer=testConsumer(1);
    consumer.await(TestHelper.waitTimeForRecords(),TimeUnit.SECONDS);
    consumer.remove();
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",144
2046,"'-tryline","private void startConnector(Function<Configuration.Builder,Configuration.Builder> customConfig,boolean waitForSnapshot) throws InterruptedException {
  startConnector(customConfig,waitForSnapshot,(x) -> false);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",162
2047,"'-tryline","private void startConnector(Function<Configuration.Builder,Configuration.Builder> customConfig) throws InterruptedException {
  startConnector(customConfig,true);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",166
2048,"'-tryline","private void startConnector() throws InterruptedException {
  startConnector(Function.identity(),true);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",170
2049,"'-tryline","private SourceRecord assertRecordInserted(SourceRecord insertedRecord,String expectedTopicName,String pkColumn,Integer pk) throws InterruptedException {
  assertEquals(topicName(expectedTopicName),insertedRecord.topic());
  if (pk != null) {
    VerifyRecord.isValidInsert(insertedRecord,pkColumn,pk);
  }
 else {
    VerifyRecord.isValidInsert(insertedRecord);
  }
  return insertedRecord;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",2777
2050,"'-tryline","private SourceRecord assertRecordInserted(String expectedTopicName,String pkColumn,Integer pk) throws InterruptedException {
  assertFalse(records not generated,consumer.isEmpty());
  SourceRecord insertedRecord=consumer.remove();
  return assertRecordInserted(insertedRecord,expectedTopicName,pkColumn,pk);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\RecordsStreamProducerIT.java",2790
2051,"'-tryline","@Test public void signalLog() throws InterruptedException {
  final LogInterceptor logInterceptor=new LogInterceptor();
  TestHelper.dropDefaultReplicationSlot();
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).with(PostgresConnectorConfig.SIGNAL_DATA_COLLECTION,s1.debezium_signal).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForDefaultReplicationSlotBeActive();
  waitForAvailableRecords(100,TimeUnit.MILLISECONDS);
  assertNoRecordsToConsume();
  TestHelper.execute(INSERT_STMT);
  TestHelper.execute(INSERT INTO s1.debezium_signal VALUES('1', 'log', '{\message\: \Signal message at offset ''{}''\}'));
  final SourceRecords records=consumeRecordsByTopic(2);
  Assertions.assertThat(records.allRecordsInOrder()).hasSize(2);
  Assertions.assertThat(logInterceptor.containsMessage(Signal message)).isTrue();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\SignalsIT.java",47
2052,"'-tryline","@Test public void signalingDisabled() throws InterruptedException {
  final LogInterceptor logInterceptor=new LogInterceptor();
  TestHelper.dropDefaultReplicationSlot();
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForDefaultReplicationSlotBeActive();
  waitForAvailableRecords(100,TimeUnit.MILLISECONDS);
  assertNoRecordsToConsume();
  TestHelper.execute(INSERT INTO s1.debezium_signal VALUES('1', 'log', '{\message\: \Signal message\}'));
  TestHelper.execute(INSERT_STMT);
  final SourceRecords records=consumeRecordsByTopic(2);
  Assertions.assertThat(records.allRecordsInOrder()).hasSize(2);
  Assertions.assertThat(logInterceptor.containsMessage(Signal message)).isFalse();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\SignalsIT.java",78
2053,"'-tryline","@Test public void signalSchemaChange() throws InterruptedException {
  TestHelper.dropDefaultReplicationSlot();
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).with(PostgresConnectorConfig.SIGNAL_DATA_COLLECTION,s1.debezium_signal).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForDefaultReplicationSlotBeActive();
  waitForAvailableRecords(100,TimeUnit.MILLISECONDS);
  assertNoRecordsToConsume();
  TestHelper.execute(INSERT_STMT);
  TestHelper.execute(INSERT INTO s1.debezium_signal VALUES('1', 'schema-changes', '{\database\: \postgres\, \changes\: [{\n +   \type\ : \ALTER\,\n +   \id\ : \\\\s1\\\.\\\a\\\\,\n+   \table\ : {\n+     \defaultCharsetName\ : null,\n+     \primaryKeyColumnNames\ : [ \pk\, \aa\ ],\n+     \columns\ : [ {\n+       \name\ : \pk\,\n+       \jdbcType\ : 4,\n+       \nativeType\ : 23,\n+       \typeName\ : \serial\,\n+       \typeExpression\ : \serial\,\n+       \charsetName\ : null,\n+       \length\ : 10,\n+       \scale\ : 0,\n+       \position\ : 1,\n+       \optional\ : false,\n+       \autoIncremented\ : true,\n+       \generated\ : false\n+     }, {\n+       \name\ : \aa\,\n+       \jdbcType\ : 4,\n+       \nativeType\ : 23,\n+       \typeName\ : \int4\,\n+       \typeExpression\ : \int4\,\n+       \charsetName\ : null,\n+       \length\ : 10,\n+       \scale\ : 0,\n+       \position\ : 2,\n+       \optional\ : true,\n+       \autoIncremented\ : false,\n+       \generated\ : false\n+     } ]\n+   }\n+ }]}'));
  TestHelper.execute(INSERT_STMT);
  final SourceRecords records=consumeRecordsByTopic(3);
  Assertions.assertThat(records.allRecordsInOrder()).hasSize(3);
  final SourceRecord pre=records.allRecordsInOrder().get(0);
  final SourceRecord post=records.allRecordsInOrder().get(2);
  Assertions.assertThat(((Struct)pre.key()).schema().fields()).hasSize(1);
  final Struct postKey=(Struct)post.key();
  Assertions.assertThat(postKey.schema().fields()).hasSize(2);
  Assertions.assertThat(postKey.schema().field(pk)).isNotNull();
  Assertions.assertThat(postKey.schema().field(aa)).isNotNull();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\SignalsIT.java",108
2054,"'-tryline","@Test public void transactionMetadata() throws InterruptedException {
  TestHelper.dropDefaultReplicationSlot();
  TestHelper.execute(SETUP_TABLES_STMT);
  Configuration config=TestHelper.defaultConfig().with(PostgresConnectorConfig.SNAPSHOT_MODE,SnapshotMode.NEVER.getValue()).with(PostgresConnectorConfig.DROP_SLOT_ON_STOP,Boolean.TRUE).with(PostgresConnectorConfig.PROVIDE_TRANSACTION_METADATA,true).build();
  start(PostgresConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForDefaultReplicationSlotBeActive();
  waitForAvailableRecords(100,TimeUnit.MILLISECONDS);
  assertNoRecordsToConsume();
  TestHelper.execute(INSERT_STMT);
  final List<SourceRecord> records=new ArrayList<>();
  Awaitility.await(Skip empty transactions and find the data).atMost(Duration.ofSeconds(TestHelper.waitTimeForRecords() * 3)).until(() -> {
    final List<SourceRecord> candidate=consumeRecordsByTopic(2).allRecordsInOrder();
    if (candidate.get(1).topic().contains(transaction)) {
      return false;
    }
    records.addAll(candidate);
    records.addAll(consumeRecordsByTopic(2).allRecordsInOrder());
    return true;
  }
);
  Assertions.assertThat(records).hasSize(4);
  final String txId=assertBeginTransaction(records.get(0));
  assertRecordTransactionMetadata(records.get(1),txId,1,1);
  assertRecordTransactionMetadata(records.get(2),txId,2,1);
  assertEndTransaction(records.get(3),txId,2,Collect.hashMapOf(s1.a,1,s2.a,1));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\test\java\io\debezium\connector\postgresql\TransactionMetadataIT.java",67
2055,"'-tryline","/** 
 * Provides all changes recorder by the SQL Server CDC capture process for a set of tables.
 * @param changeTables - the requested tables to obtain changes for
 * @param intervalFromLsn - closed lower bound of interval of changes to be provided
 * @param intervalToLsn  - closed upper bound of interval  of changes to be provided
 * @param consumer - the change processor
 * @throws SQLException
 */
public void getChangesForTables(SqlServerChangeTable[] changeTables,Lsn intervalFromLsn,Lsn intervalToLsn,BlockingMultiResultSetConsumer consumer) throws SQLException, InterruptedException {
  final String[] queries=new String[changeTables.length];
  final StatementPreparer[] preparers=new StatementPreparer[changeTables.length];
  int idx=0;
  for (  SqlServerChangeTable changeTable : changeTables) {
    final String query=GET_ALL_CHANGES_FOR_TABLE.replace(STATEMENTS_PLACEHOLDER,changeTable.getCaptureInstance());
    queries[idx]=query;
    final Lsn fromLsn=getFromLsn(changeTable,intervalFromLsn);
    LOGGER.trace(Getting changes for table {} in range[{}, {}],changeTable,fromLsn,intervalToLsn);
    preparers[idx]=statement -> {
      if (queryFetchSize > 0) {
        statement.setFetchSize(queryFetchSize);
      }
      statement.setBytes(1,fromLsn.getBinary());
      statement.setBytes(2,intervalToLsn.getBinary());
    }
;
    idx++;
  }
  prepareQuery(queries,preparers,consumer);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerConnection.java",215
2056,"'-tryline","@Override public List<SourceRecord> doPoll() throws InterruptedException {
  final List<DataChangeEvent> records=queue.poll();
  final List<SourceRecord> sourceRecords=records.stream().map(DataChangeEvent::getRecord).collect(Collectors.toList());
  return sourceRecords;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerConnectorTask.java",132
2057,"'-tryline","@Override public void emitSchemaChangeEvent(Receiver receiver) throws InterruptedException {
  final SchemaChangeEvent event=new SchemaChangeEvent(offsetContext.getPartition(),offsetContext.getOffset(),offsetContext.getSourceInfo(),changeTable.getSourceTableId().catalog(),changeTable.getSourceTableId().schema(),N/A,tableSchema,eventType,false);
  receiver.schemaChangeEvent(event);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerSchemaChangeEventEmitter.java",32
2058,"'-tryline","@Override protected void lockTablesForSchemaSnapshot(ChangeEventSourceContext sourceContext,RelationalSnapshotContext snapshotContext) throws SQLException, InterruptedException {
  if (connectorConfig.getSnapshotIsolationMode() == SnapshotIsolationMode.READ_UNCOMMITTED) {
    jdbcConnection.connection().setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);
    LOGGER.info(Schema locking was disabled in connector configuration);
  }
 else   if (connectorConfig.getSnapshotIsolationMode() == SnapshotIsolationMode.READ_COMMITTED) {
    jdbcConnection.connection().setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
    LOGGER.info(Schema locking was disabled in connector configuration);
  }
 else   if (connectorConfig.getSnapshotIsolationMode() == SnapshotIsolationMode.SNAPSHOT) {
    LOGGER.info(Schema locking was disabled in connector configuration);
  }
 else   if (connectorConfig.getSnapshotIsolationMode() == SnapshotIsolationMode.EXCLUSIVE || connectorConfig.getSnapshotIsolationMode() == SnapshotIsolationMode.REPEATABLE_READ) {
    LOGGER.info(Setting locking timeout to {} s,connectorConfig.snapshotLockTimeout().getSeconds());
    jdbcConnection.execute(SET LOCK_TIMEOUT  + connectorConfig.snapshotLockTimeout().toMillis());
    jdbcConnection.connection().setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);
    ((SqlServerSnapshotContext)snapshotContext).preSchemaSnapshotSavepoint=jdbcConnection.connection().setSavepoint(dbz_schema_snapshot);
    LOGGER.info(Executing schema locking);
    try (Statement statement=jdbcConnection.connection().createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY)){
      for (      TableId tableId : snapshotContext.capturedTables) {
        if (!sourceContext.isRunning()) {
          throw new InterruptedException(Interrupted while locking table  + tableId);
        }
        LOGGER.info(Locking table {},tableId);
        String query=String.format(SELECT TOP(0) * FROM [%s].[%s] WITH (TABLOCKX),tableId.schema(),tableId.table());
        statement.executeQuery(query).close();
      }
    }
   }
 else {
    throw new IllegalStateException(Unknown locking mode specified.);
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerSnapshotChangeEventSource.java",108
2059,"'-tryline","@Override protected void readTableStructure(ChangeEventSourceContext sourceContext,RelationalSnapshotContext snapshotContext) throws SQLException, InterruptedException {
  Set<String> schemas=snapshotContext.capturedTables.stream().map(TableId::schema).collect(Collectors.toSet());
  for (  String schema : schemas) {
    if (!sourceContext.isRunning()) {
      throw new InterruptedException(Interrupted while reading structure of schema  + schema);
    }
    LOGGER.info(Reading structure of schema '{}',snapshotContext.catalogName);
    jdbcConnection.readSchema(snapshotContext.tables,snapshotContext.catalogName,schema,connectorConfig.getTableFilters().dataCollectionFilter(),null,false);
    changeTables=jdbcConnection.listOfChangeTables().stream().collect(Collectors.toMap(SqlServerChangeTable::getSourceTableId,changeTable -> changeTable,(changeTable1,changeTable2) -> changeTable1.getStartLsn().compareTo(changeTable2.getStartLsn()) > 0 ? changeTable1 : changeTable2));
    changeTables.forEach((tableId,sqlServerChangeTable) -> {
      Table sourceTable=snapshotContext.tables.forTable(tableId);
      if (sourceTable != null) {
        List<Column> cdcEnabledSourceColumns=sourceTable.filterColumns(column -> sqlServerChangeTable.getCapturedColumns().contains(column.name()));
        snapshotContext.tables.overwriteTable(sourceTable.id(),cdcEnabledSourceColumns,sourceTable.primaryKeyColumnNames(),sourceTable.defaultCharsetName());
      }
    }
);
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerSnapshotChangeEventSource.java",168
2060,"'-tryline","@Override public void execute(ChangeEventSourceContext context) throws InterruptedException {
  if (connectorConfig.getSnapshotMode().equals(SnapshotMode.INITIAL_ONLY)) {
    LOGGER.info(Streaming is not enabled in current configuration);
    return;
  }
  final Metronome metronome=Metronome.sleeper(pollInterval,clock);
  final Queue<SqlServerChangeTable> schemaChangeCheckpoints=new PriorityQueue<>((x,y) -> x.getStopLsn().compareTo(y.getStopLsn()));
  try {
    final AtomicReference<SqlServerChangeTable[]> tablesSlot=new AtomicReference<SqlServerChangeTable[]>(getCdcTablesToQuery());
    final TxLogPosition lastProcessedPositionOnStart=offsetContext.getChangePosition();
    final long lastProcessedEventSerialNoOnStart=offsetContext.getEventSerialNo();
    LOGGER.info(Last position recorded in offsets is {}[{}],lastProcessedPositionOnStart,lastProcessedEventSerialNoOnStart);
    final AtomicBoolean changesStoppedBeingMonotonic=new AtomicBoolean(false);
    TxLogPosition lastProcessedPosition=lastProcessedPositionOnStart;
    boolean shouldIncreaseFromLsn=offsetContext.isSnapshotCompleted();
    while (context.isRunning()) {
      if (connectorConfig.isReadOnlyDatabaseConnection()) {
        dataConnection.commit();
      }
      final MaxLsnResult maxLsnResult=dataConnection.getMaxLsnResult(connectorConfig.isSkipLowActivityLsnsEnabled());
      if (!maxLsnResult.getMaxLsn().isAvailable() || !maxLsnResult.getMaxTransactionalLsn().isAvailable()) {
        LOGGER.warn(No maximum LSN recorded in the database; please ensure that the SQL Server Agent is running);
        metronome.pause();
        continue;
      }
      if (maxLsnResult.getMaxTransactionalLsn().compareTo(lastProcessedPosition.getCommitLsn()) <= 0 && shouldIncreaseFromLsn) {
        LOGGER.debug(No change in the database);
        metronome.pause();
        continue;
      }
      final Lsn fromLsn=lastProcessedPosition.getCommitLsn().isAvailable() && shouldIncreaseFromLsn ? dataConnection.incrementLsn(lastProcessedPosition.getCommitLsn()) : lastProcessedPosition.getCommitLsn();
      shouldIncreaseFromLsn=true;
      while (!schemaChangeCheckpoints.isEmpty()) {
        migrateTable(schemaChangeCheckpoints);
      }
      if (!dataConnection.listOfNewChangeTables(fromLsn,maxLsnResult.getMaxLsn()).isEmpty()) {
        final SqlServerChangeTable[] tables=getCdcTablesToQuery();
        tablesSlot.set(tables);
        for (        SqlServerChangeTable table : tables) {
          if (table.getStartLsn().isBetween(fromLsn,maxLsnResult.getMaxLsn())) {
            LOGGER.info(Schema will be changed for {},table);
            schemaChangeCheckpoints.add(table);
          }
        }
      }
      try {
        dataConnection.getChangesForTables(tablesSlot.get(),fromLsn,maxLsnResult.getMaxLsn(),resultSets -> {
          long eventSerialNoInInitialTx=1;
          final int tableCount=resultSets.length;
          final SqlServerChangeTablePointer[] changeTables=new SqlServerChangeTablePointer[tableCount];
          final SqlServerChangeTable[] tables=tablesSlot.get();
          for (int i=0; i < tableCount; i++) {
            changeTables[i]=new SqlServerChangeTablePointer(tables[i],resultSets[i]);
            changeTables[i].next();
          }
          for (; ; ) {
            SqlServerChangeTablePointer tableWithSmallestLsn=null;
            for (            SqlServerChangeTablePointer changeTable : changeTables) {
              if (changeTable.isCompleted()) {
                continue;
              }
              if (tableWithSmallestLsn == null || changeTable.compareTo(tableWithSmallestLsn) < 0) {
                tableWithSmallestLsn=changeTable;
              }
            }
            if (tableWithSmallestLsn == null) {
              break;
            }
            if (!(tableWithSmallestLsn.getChangePosition().isAvailable() && tableWithSmallestLsn.getChangePosition().getInTxLsn().isAvailable())) {
              LOGGER.error(Skipping change {} as its LSN is NULL which is not expected,tableWithSmallestLsn);
              tableWithSmallestLsn.next();
              continue;
            }
            if (tableWithSmallestLsn.isNewTransaction() && changesStoppedBeingMonotonic.get()) {
              LOGGER.info(Resetting changesStoppedBeingMonotonic as transaction changes);
              changesStoppedBeingMonotonic.set(false);
            }
            if (tableWithSmallestLsn.isCurrentPositionSmallerThanPreviousPosition()) {
              LOGGER.info(Disabling skipping changes due to not monotonic order of changes);
              changesStoppedBeingMonotonic.set(true);
            }
            if (!changesStoppedBeingMonotonic.get() && tableWithSmallestLsn.getChangePosition().compareTo(lastProcessedPositionOnStart) < 0) {
              LOGGER.info(Skipping change {} as its position is smaller than the last recorded position {},tableWithSmallestLsn,lastProcessedPositionOnStart);
              tableWithSmallestLsn.next();
              continue;
            }
            if (!changesStoppedBeingMonotonic.get() && tableWithSmallestLsn.getChangePosition().compareTo(lastProcessedPositionOnStart) == 0 && eventSerialNoInInitialTx <= lastProcessedEventSerialNoOnStart) {
              LOGGER.info(Skipping change {} as its order in the transaction {} is smaller than or equal to the last recorded operation {}[{}],tableWithSmallestLsn,eventSerialNoInInitialTx,lastProcessedPositionOnStart,lastProcessedEventSerialNoOnStart);
              eventSerialNoInInitialTx++;
              tableWithSmallestLsn.next();
              continue;
            }
            if (tableWithSmallestLsn.getChangeTable().getStopLsn().isAvailable() && tableWithSmallestLsn.getChangeTable().getStopLsn().compareTo(tableWithSmallestLsn.getChangePosition().getCommitLsn()) <= 0) {
              LOGGER.debug(Skipping table change {} as its stop LSN is smaller than the last recorded LSN {},tableWithSmallestLsn,tableWithSmallestLsn.getChangePosition());
              tableWithSmallestLsn.next();
              continue;
            }
            LOGGER.trace(Processing change {},tableWithSmallestLsn);
            LOGGER.trace(Schema change checkpoints {},schemaChangeCheckpoints);
            if (!schemaChangeCheckpoints.isEmpty()) {
              if (tableWithSmallestLsn.getChangePosition().getCommitLsn().compareTo(schemaChangeCheckpoints.peek().getStartLsn()) >= 0) {
                migrateTable(schemaChangeCheckpoints);
              }
            }
            final TableId tableId=tableWithSmallestLsn.getChangeTable().getSourceTableId();
            final int operation=tableWithSmallestLsn.getOperation();
            final Object[] data=tableWithSmallestLsn.getData();
            int eventCount=1;
            if (operation == SqlServerChangeRecordEmitter.OP_UPDATE_BEFORE) {
              if (!tableWithSmallestLsn.next() || tableWithSmallestLsn.getOperation() != SqlServerChangeRecordEmitter.OP_UPDATE_AFTER) {
                throw new IllegalStateException(The update before event at  + tableWithSmallestLsn.getChangePosition() +  for table + tableId+  was not followed by after event.\n Please report this as a bug together with a events around given LSN.);
              }
              eventCount=2;
            }
            final Object[] dataNext=(operation == SqlServerChangeRecordEmitter.OP_UPDATE_BEFORE) ? tableWithSmallestLsn.getData() : null;
            offsetContext.setChangePosition(tableWithSmallestLsn.getChangePosition(),eventCount);
            offsetContext.event(tableWithSmallestLsn.getChangeTable().getSourceTableId(),metadataConnection.timestampOfLsn(tableWithSmallestLsn.getChangePosition().getCommitLsn()));
            dispatcher.dispatchDataChangeEvent(tableId,new SqlServerChangeRecordEmitter(offsetContext,operation,data,dataNext,clock));
            tableWithSmallestLsn.next();
          }
        }
);
        lastProcessedPosition=TxLogPosition.valueOf(maxLsnResult.getMaxLsn());
        dataConnection.rollback();
      }
 catch (      SQLException e) {
        tablesSlot.set(processErrorFromChangeTableQuery(e,tablesSlot.get()));
      }
    }
  }
 catch (  Exception e) {
    errorHandler.setProducerThrowable(e);
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerStreamingChangeEventSource.java",99
2061,"'-tryline","private void migrateTable(final Queue<SqlServerChangeTable> schemaChangeCheckpoints) throws InterruptedException, SQLException {
  final SqlServerChangeTable newTable=schemaChangeCheckpoints.poll();
  LOGGER.info(Migrating schema to {},newTable);
  Table tableSchema=metadataConnection.getTableSchemaFromTable(newTable);
  dispatcher.dispatchSchemaChangeEvent(newTable.getSourceTableId(),new SqlServerSchemaChangeEventEmitter(offsetContext,newTable,tableSchema,SchemaChangeEventType.ALTER));
  newTable.setSourceTable(tableSchema);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerStreamingChangeEventSource.java",287
2062,"'-tryline","private SqlServerChangeTable[] getCdcTablesToQuery() throws SQLException, InterruptedException {
  final Set<SqlServerChangeTable> cdcEnabledTables=dataConnection.listOfChangeTables();
  if (cdcEnabledTables.isEmpty()) {
    LOGGER.warn(No table has enabled CDC or security constraints prevents getting the list of change tables);
  }
  final Map<TableId,List<SqlServerChangeTable>> includeListCdcEnabledTables=cdcEnabledTables.stream().filter(changeTable -> {
    if (connectorConfig.getTableFilters().dataCollectionFilter().isIncluded(changeTable.getSourceTableId())) {
      return true;
    }
 else {
      LOGGER.info(CDC is enabled for table {} but the table is not whitelisted by connector,changeTable);
      return false;
    }
  }
).collect(Collectors.groupingBy(x -> x.getSourceTableId()));
  if (includeListCdcEnabledTables.isEmpty()) {
    LOGGER.warn(No whitelisted table has enabled CDC, whitelisted table list does not contain any table with CDC enabled or no table match the white/blacklist filter(s));
  }
  final List<SqlServerChangeTable> tables=new ArrayList<>();
  for (  List<SqlServerChangeTable> captures : includeListCdcEnabledTables.values()) {
    SqlServerChangeTable currentTable=captures.get(0);
    if (captures.size() > 1) {
      SqlServerChangeTable futureTable;
      if (captures.get(0).getStartLsn().compareTo(captures.get(1).getStartLsn()) < 0) {
        futureTable=captures.get(1);
      }
 else {
        currentTable=captures.get(1);
        futureTable=captures.get(0);
      }
      currentTable.setStopLsn(futureTable.getStartLsn());
      futureTable.setSourceTable(dataConnection.getTableSchemaFromTable(futureTable));
      tables.add(futureTable);
      LOGGER.info(Multiple capture instances present for the same table: {} and {},currentTable,futureTable);
    }
    if (schema.tableFor(currentTable.getSourceTableId()) == null) {
      LOGGER.info(Table {} is new to be monitored by capture instance {},currentTable.getSourceTableId(),currentTable.getCaptureInstance());
      offsetContext.event(currentTable.getSourceTableId(),Instant.now());
      dispatcher.dispatchSchemaChangeEvent(currentTable.getSourceTableId(),new SqlServerSchemaChangeEventEmitter(offsetContext,currentTable,dataConnection.getTableSchemaFromTable(currentTable),SchemaChangeEventType.CREATE));
    }
    currentTable.setSourceTable(schema.tableFor(currentTable.getSourceTableId()));
    tables.add(currentTable);
  }
  return tables.toArray(new SqlServerChangeTable[tables.size()]);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\main\java\io\debezium\connector\sqlserver\SqlServerStreamingChangeEventSource.java",309
2063,"'-tryline","private void testStreaming() throws SQLException, InterruptedException {
  for (int i=0; i < STREAMING_RECORDS_PER_TABLE; i++) {
    final int id=i + INITIAL_RECORDS_PER_TABLE;
    connection.execute(String.format(INSERT INTO table1 VALUES(%s, '%s', %s, '%s'),id,name + id,new BigDecimal(id + .23),2018-07-18 13:28:56));
  }
  final int lastId=INITIAL_RECORDS_PER_TABLE + (STREAMING_RECORDS_PER_TABLE - 1);
  TestHelper.waitForCdcRecord(connection,table1,rs -> rs.getInt(id) == lastId);
  final SourceRecords records=consumeRecordsByTopic(STREAMING_RECORDS_PER_TABLE);
  final List<SourceRecord> table1=records.recordsForTopic(server1.dbo.table1);
  assertThat(table1).hasSize(INITIAL_RECORDS_PER_TABLE);
  for (int i=0; i < INITIAL_RECORDS_PER_TABLE; i++) {
    final int id=i + INITIAL_RECORDS_PER_TABLE;
    final SourceRecord record1=table1.get(i);
    final List<SchemaAndValueField> expectedKey1=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,id));
    final List<SchemaAndValueField> expectedRow1=Arrays.asList(new SchemaAndValueField(id,Schema.INT32_SCHEMA,id),new SchemaAndValueField(name,Schema.OPTIONAL_STRING_SCHEMA,name + id),new SchemaAndValueField(price,Decimal.builder(2).parameter(connect.decimal.precision,8).optional().build(),new BigDecimal(id + .23)),new SchemaAndValueField(ts,Timestamp.builder().optional().schema(),1_531_920_536_000l));
    final Struct key1=(Struct)record1.key();
    final Struct value1=(Struct)record1.value();
    assertRecord(key1,expectedKey1);
    assertRecord((Struct)value1.get(after),expectedRow1);
    assertThat(record1.sourceOffset()).hasSize(4);
    Assert.assertTrue(record1.sourceOffset().containsKey(change_lsn));
    Assert.assertTrue(record1.sourceOffset().containsKey(commit_lsn));
    Assert.assertTrue(record1.sourceOffset().containsKey(event_serial_no));
    assertNull(value1.get(before));
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SnapshotIT.java",201
2064,"'-tryline","@Test @FixFor(DBZ-2456) public void shouldSelectivelySnapshotTables() throws SQLException, InterruptedException {
  connection.execute(CREATE TABLE table_a (id int, name varchar(30), amount integer primary key(id)),CREATE TABLE table_b (id int, name varchar(30), amount integer primary key(id)));
  connection.execute(INSERT INTO table_a VALUES(10, 'some_name', 120));
  connection.execute(INSERT INTO table_b VALUES(11, 'some_name', 447));
  TestHelper.enableTableCdc(connection,table_a);
  TestHelper.enableTableCdc(connection,table_b);
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(SqlServerConnectorConfig.COLUMN_EXCLUDE_LIST,dbo.table_a.amount).with(SqlServerConnectorConfig.TABLE_INCLUDE_LIST,dbo.table_a,dbo.table_b).with(CommonConnectorConfig.SNAPSHOT_MODE_TABLES,[A-z].*dbo.table_a).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  SourceRecords records=consumeRecordsByTopic(1);
  List<SourceRecord> tableA=records.recordsForTopic(server1.dbo.table_a);
  List<SourceRecord> tableB=records.recordsForTopic(server1.dbo.table_b);
  Assertions.assertThat(tableA).hasSize(1);
  Assertions.assertThat(tableB).isNull();
  TestHelper.waitForSnapshotToBeCompleted();
  connection.execute(INSERT INTO table_a VALUES(22, 'some_name', 556));
  connection.execute(INSERT INTO table_b VALUES(24, 'some_name', 558));
  records=consumeRecordsByTopic(2);
  tableA=records.recordsForTopic(server1.dbo.table_a);
  tableB=records.recordsForTopic(server1.dbo.table_b);
  Assertions.assertThat(tableA).hasSize(1);
  Assertions.assertThat(tableB).hasSize(1);
  stopConnector();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SnapshotIT.java",374
2065,"'-tryline","@Test public void shouldReceiveRawBinary() throws InterruptedException {
  Struct data=consume(BinaryHandlingMode.BYTES);
  ByteBuffer expectedValue=ByteBuffer.wrap(new byte[]{1,2,3});
  assertEquals(expectedValue,data.get(binary_col));
  assertEquals(expectedValue,data.get(varbinary_col));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerBinaryModeIT.java",54
2066,"'-tryline","@Test public void shouldReceiveHexBinary() throws InterruptedException {
  Struct data=consume(BinaryHandlingMode.HEX);
  String expectedValue=010203;
  assertEquals(expectedValue,data.get(binary_col));
  assertEquals(expectedValue,data.get(varbinary_col));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerBinaryModeIT.java",63
2067,"'-tryline","@Test public void shouldReceiveBase64Binary() throws InterruptedException {
  Struct data=consume(BinaryHandlingMode.BASE64);
  String expectedValue=AQID;
  assertEquals(expectedValue,data.get(binary_col));
  assertEquals(expectedValue,data.get(varbinary_col));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerBinaryModeIT.java",72
2068,"'-tryline","private Struct consume(BinaryHandlingMode binaryMode) throws InterruptedException {
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SqlServerConnectorConfig.SnapshotMode.INITIAL).with(SqlServerConnectorConfig.TABLE_INCLUDE_LIST,dbo\\.binary_mode_test).with(SqlServerConnectorConfig.BINARY_HANDLING_MODE,binaryMode).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForSnapshotToBeCompleted();
  SourceRecords records=consumeRecordsByTopic(1);
  final List<SourceRecord> results=records.recordsForTopic(server1.dbo.binary_mode_test);
  Assertions.assertThat(results).hasSize(1);
  return (Struct)((Struct)results.get(0).value()).get(after);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerBinaryModeIT.java",81
2069,"'-tryline","@Test @FixFor(DBZ-1015) public void shouldRewriteIdentityKey() throws InterruptedException, SQLException {
  connection.execute(CREATE TABLE keyless (id int, name varchar(30)),INSERT INTO keyless VALUES(1, 'k'));
  TestHelper.enableTableCdc(connection,keyless);
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.INITIAL).with(SqlServerConnectorConfig.TABLE_INCLUDE_LIST,dbo.keyless).with(SqlServerConnectorConfig.MSG_KEY_COLUMNS,(.*).keyless:id).build();
  start(SqlServerConnector.class,config);
  SourceRecords records=consumeRecordsByTopic(1);
  List<SourceRecord> recordsForTopic=records.recordsForTopic(server1.dbo.keyless);
  assertThat(recordsForTopic.get(0).key()).isNotNull();
  Struct key=(Struct)recordsForTopic.get(0).key();
  Assertions.assertThat(key.get(id)).isNotNull();
  stopConnector();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",1964
2070,"'-tryline","@Test @FixFor(DBZ-1491) public void shouldCaptureTableSchema() throws SQLException, InterruptedException {
  connection.execute(CREATE TABLE table_schema_test (key_cola int not null, + key_colb varchar(10) not null, + cola int not null,+ colb datetimeoffset not null default ('2019-01-01 12:34:56.1234567+04:00'),+ colc varchar(20) default ('default_value'),+ cold float,+ primary key(key_cola, key_colb)));
  TestHelper.enableTableCdc(connection,table_schema_test);
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  TestHelper.waitForSnapshotToBeCompleted();
  connection.execute(INSERT INTO table_schema_test (key_cola, key_colb, cola, colb, colc, cold) VALUES(1, 'a', 100, '2019-01-01 10:20:39.1234567 +02:00', 'some_value', 100.20));
  List<SourceRecord> records=consumeRecordsByTopic(1).recordsForTopic(server1.dbo.table_schema_test);
  assertThat(records).hasSize(1);
  SourceRecordAssert.assertThat(records.get(0)).keySchemaIsEqualTo(SchemaBuilder.struct().name(server1.dbo.table_schema_test.Key).field(key_cola,Schema.INT32_SCHEMA).field(key_colb,Schema.STRING_SCHEMA).build()).valueAfterFieldSchemaIsEqualTo(SchemaBuilder.struct().optional().name(server1.dbo.table_schema_test.Value).field(key_cola,Schema.INT32_SCHEMA).field(key_colb,Schema.STRING_SCHEMA).field(cola,Schema.INT32_SCHEMA).field(colb,SchemaBuilder.string().name(io.debezium.time.ZonedTimestamp).required().defaultValue(2019-01-01T12:34:56.1234567+04:00).version(1).build()).field(colc,SchemaBuilder.string().optional().defaultValue(default_value).build()).field(cold,Schema.OPTIONAL_FLOAT64_SCHEMA).build());
  stopConnector();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",1991
2071,"'-tryline","@Test @FixFor(DBZ-1988) public void shouldHonorSourceTimestampMode() throws InterruptedException, SQLException {
  connection.execute(CREATE TABLE source_timestamp_mode (id int, name varchar(30) primary key(id)));
  TestHelper.enableTableCdc(connection,source_timestamp_mode);
  final Configuration config=TestHelper.defaultConfig().with(SqlServerConnectorConfig.SNAPSHOT_MODE,SnapshotMode.SCHEMA_ONLY).with(SqlServerConnectorConfig.TABLE_INCLUDE_LIST,dbo.source_timestamp_mode).with(SqlServerConnectorConfig.SOURCE_TIMESTAMP_MODE,processing).build();
  start(SqlServerConnector.class,config);
  assertConnectorIsRunning();
  waitForSnapshotToBeCompleted(sql_server,server1);
  connection.execute(INSERT INTO source_timestamp_mode VALUES(1, 'abc'));
  SourceRecords records=consumeRecordsByTopic(1);
  List<SourceRecord> recordsForTopic=records.recordsForTopic(server1.dbo.source_timestamp_mode);
  SourceRecord record=recordsForTopic.get(0);
  long eventTs=(long)((Struct)record.value()).get(ts_ms);
  long sourceTs=(long)((Struct)((Struct)record.value()).get(source)).get(ts_ms);
  assertThat(eventTs - sourceTs).isLessThan(100);
  stopConnector();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\SqlServerConnectorIT.java",2095
2072,"'-tryline","private void waitForEnabledCdc(SqlServerConnection connection,String table) throws SQLException, InterruptedException {
  Awaitility.await(CDC  + table).atMost(1,TimeUnit.MINUTES).pollInterval(100,TimeUnit.MILLISECONDS).until(() -> TestHelper.isCdcEnabled(connection,table));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\TablesWithoutPrimaryKeyIT.java",132
2073,"'-tryline","private void waitForDisabledCdc(SqlServerConnection connection,String table) throws SQLException, InterruptedException {
  Awaitility.await(CDC  + table).atMost(1,TimeUnit.MINUTES).pollInterval(100,TimeUnit.MILLISECONDS).until(() -> !TestHelper.isCdcEnabled(connection,table));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\TablesWithoutPrimaryKeyIT.java",140
2074,"'-tryline","@Override public void accept(ResultSet[] rs) throws SQLException, InterruptedException {
  if (rs.length == 1) {
    final ResultSet resultSet=rs[0];
    while (resultSet.next()) {
      if (handler.apply(resultSet)) {
        this.found=true;
        break;
      }
    }
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-sqlserver\src\test\java\io\debezium\connector\sqlserver\util\TestHelper.java",509
2075,"'-tryline","/** 
 * Enqueues a record so that it can be obtained via  {@link #poll()}. This method will block if the queue is full.
 * @param record the record to be enqueued
 * @throws InterruptedException if this thread has been interrupted
 */
public void enqueue(T record) throws InterruptedException {
  if (record == null) {
    return;
  }
  if (Thread.interrupted()) {
    throw new InterruptedException();
  }
  if (buffering) {
    final T newEvent=record;
    record=bufferedEvent;
    bufferedEvent=newEvent;
    if (record == null) {
      return;
    }
  }
  doEnqueue(record);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\connector\base\ChangeEventQueue.java",144
2076,"'-tryline","/** 
 * Applies a function to the event and the buffer and adds it to the queue. Buffer is emptied.
 * @param recordModifier
 * @throws InterruptedException
 */
public void flushBuffer(Function<T,T> recordModifier) throws InterruptedException {
  assert buffering : Unsuported for queues with disabled buffering;
  if (bufferedEvent != null) {
    doEnqueue(recordModifier.apply(bufferedEvent));
    bufferedEvent=null;
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\connector\base\ChangeEventQueue.java",176
2077,"'-tryline","protected void doEnqueue(T record) throws InterruptedException {
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(Enqueuing source record '{}',record);
  }
  while (maxQueueSizeInBytes > 0 && currentQueueSizeInBytes.get() > maxQueueSizeInBytes) {
    Thread.sleep(pollInterval.toMillis());
  }
  if (maxQueueSizeInBytes > 0) {
    long messageSize=ObjectSizeCalculator.getObjectSize(record);
    objectMap.put(record,messageSize);
    currentQueueSizeInBytes.addAndGet(messageSize);
  }
  queue.put(record);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\connector\base\ChangeEventQueue.java",198
2078,"'-tryline","/** 
 * Returns the next batch of elements from this queue. May be empty in case no elements have arrived in the maximum waiting time.
 * @throws InterruptedException if this thread has been interrupted while waiting for more elements to arrive
 */
public List<T> poll() throws InterruptedException {
  LoggingContext.PreviousContext previousContext=loggingContextSupplier.get();
  try {
    LOGGER.debug(polling records...);
    List<T> records=new ArrayList<>();
    final Timer timeout=Threads.timer(Clock.SYSTEM,Temporals.min(pollInterval,ConfigurationDefaults.RETURN_CONTROL_INTERVAL));
    while (!timeout.expired() && queue.drainTo(records,maxBatchSize) == 0) {
      throwProducerExceptionIfPresent();
      LOGGER.debug(no records available yet, sleeping a bit...);
      metronome.pause();
      LOGGER.debug(checking for more records...);
    }
    if (maxQueueSizeInBytes > 0 && records.size() > 0) {
      records.parallelStream().forEach((record) -> {
        if (objectMap.containsKey(record)) {
          currentQueueSizeInBytes.addAndGet(-objectMap.get(record));
          objectMap.remove(record);
        }
      }
);
    }
    return records;
  }
  finally {
    previousContext.restore();
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\connector\base\ChangeEventQueue.java",217
2079,"'-tryline","@Override public final List<SourceRecord> poll() throws InterruptedException {
  boolean started=startIfNeededAndPossible();
  if (!started) {
    Metronome.parker(Duration.of(2,ChronoUnit.SECONDS),Clock.SYSTEM).pause();
    return Collections.emptyList();
  }
  try {
    final List<SourceRecord> records=doPoll();
    logStatistics(records);
    return records;
  }
 catch (  RetriableException e) {
    stop(true);
    throw e;
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\connector\common\BaseSourceTask.java",146
2080,"'-tryline","/** 
 * Returns the next batch of source records, if any are available.
 */
protected abstract List<SourceRecord> doPoll() throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\connector\common\BaseSourceTask.java",190
2081,"'-tryline","@Override public void commitRecord(SourceRecord record) throws InterruptedException {
  Map<String,?> currentOffset=record.sourceOffset();
  if (currentOffset != null) {
    this.lastOffset=currentOffset;
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\connector\common\BaseSourceTask.java",266
2082,"'-tryline","@Override public void commit() throws InterruptedException {
  boolean locked=stateLock.tryLock();
  if (locked) {
    try {
      if (coordinator != null && lastOffset != null) {
        coordinator.commitOffset(lastOffset);
      }
    }
  finally {
      stateLock.unlock();
    }
  }
 else {
    LOGGER.warn(Couldn't commit processed log positions with the source database due to a concurrent connector shutdown or restart);
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\connector\common\BaseSourceTask.java",274
2083,"'-tryline","/** 
 * Performs this operation on the given argument.
 * @param t the input argument
 * @throws InterruptedException if the calling thread is interrupted while blocking
 */
void accept(T t) throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\function\BlockingConsumer.java",18
2084,"'-tryline","/** 
 * Flush all of the buffered values to the delegate by first running each buffered value through the given function to generate a new value to be flushed to the delegate consumer. <p> {@link #accept(Object)} may not be called after this method has been called.
 * @param function the function to apply to the values that are flushed
 * @throws InterruptedException if the thread is interrupted while this consumer is blocked
 */
public void close(Function<T,T> function) throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\function\BufferedBlockingConsumer.java",22
2085,"'-tryline","@Override public void accept(T t) throws InterruptedException {
  T previous=last.getAndSet(t);
  if (previous != null) {
    delegate.accept(previous);
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\function\BufferedBlockingConsumer.java",48
2086,"'-tryline","@Override public synchronized void close(Function<T,T> function) throws InterruptedException {
  T previous=last.get();
  if (previous != null) {
    try {
      delegate.accept(function.apply(previous));
    }
  finally {
      last.set(null);
    }
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\function\BufferedBlockingConsumer.java",56
2087,"'-tryline","@Override public void forcedBeat(Map<String,?> partition,Map<String,?> offset,BlockingConsumer<SourceRecord> consumer) throws InterruptedException {
  try {
    jdbcConnection.execute(heartBeatActionQuery);
  }
 catch (  SQLException e) {
    if (errorHandler != null) {
      errorHandler.onError(e);
    }
    LOGGER.error(Could not execute heartbeat action (Error:  + e.getSQLState() + ),e);
  }
  LOGGER.debug(Executed heartbeat action query);
  super.forcedBeat(partition,offset,consumer);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\heartbeat\DatabaseHeartbeatImpl.java",49
2088,"'-tryline","@Override public void heartbeat(Map<String,?> partition,Map<String,?> offset,BlockingConsumer<SourceRecord> consumer) throws InterruptedException {
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\heartbeat\Heartbeat.java",67
2089,"'-tryline","@Override public void forcedBeat(Map<String,?> partition,Map<String,?> offset,BlockingConsumer<SourceRecord> consumer) throws InterruptedException {
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\heartbeat\Heartbeat.java",71
2090,"'-tryline","@Override public void heartbeat(Map<String,?> partition,OffsetProducer offsetProducer,BlockingConsumer<SourceRecord> consumer) throws InterruptedException {
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\heartbeat\Heartbeat.java",76
2091,"'-tryline","/** 
 * Generates a heartbeat record if defined time has elapsed
 * @param partition partition for the heartbeat record
 * @param offset offset for the heartbeat record
 * @param consumer - a code to place record among others to be sent into Connect
 */
void heartbeat(Map<String,?> partition,Map<String,?> offset,BlockingConsumer<SourceRecord> consumer) throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\heartbeat\Heartbeat.java",88
2092,"'-tryline","/** 
 * Generates a heartbeat record if defined time has elapsed
 * @param partition partition for the heartbeat record
 * @param offsetProducer lazily calculated offset for the heartbeat record
 * @param consumer - a code to place record among others to be sent into Connect
 */
void heartbeat(Map<String,?> partition,OffsetProducer offsetProducer,BlockingConsumer<SourceRecord> consumer) throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\heartbeat\Heartbeat.java",98
2093,"'-tryline","/** 
 * Generates a heartbeat record unconditionaly
 * @param partition partition for the heartbeat record
 * @param offset offset for the heartbeat record
 * @param consumer - a code to place record among others to be sent into Connect
 */
void forcedBeat(Map<String,?> partition,Map<String,?> offset,BlockingConsumer<SourceRecord> consumer) throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\heartbeat\Heartbeat.java",107
2094,"'-tryline","@Override public void heartbeat(Map<String,?> partition,Map<String,?> offset,BlockingConsumer<SourceRecord> consumer) throws InterruptedException {
  if (heartbeatTimeout.expired()) {
    forcedBeat(partition,offset,consumer);
    heartbeatTimeout=resetHeartbeat();
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\heartbeat\HeartbeatImpl.java",70
2095,"'-tryline","@Override public void heartbeat(Map<String,?> partition,OffsetProducer offsetProducer,BlockingConsumer<SourceRecord> consumer) throws InterruptedException {
  if (heartbeatTimeout.expired()) {
    forcedBeat(partition,offsetProducer.offset(),consumer);
    heartbeatTimeout=resetHeartbeat();
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\heartbeat\HeartbeatImpl.java",78
2096,"'-tryline","@Override public void forcedBeat(Map<String,?> partition,Map<String,?> offset,BlockingConsumer<SourceRecord> consumer) throws InterruptedException {
  LOGGER.debug(Generating heartbeat event);
  if (offset == null || offset.isEmpty()) {
    return;
  }
  consumer.accept(heartbeatRecord(partition,offset));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\heartbeat\HeartbeatImpl.java",86
2097,"'-tryline","void accept(ResultSet rs) throws SQLException, InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",464
2098,"'-tryline","void accept(ResultSet[] rs) throws SQLException, InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",476
2099,"'-tryline","/** 
 * Execute multiple SQL prepared queries where each query is executed with the same set of parameters.
 * @param multiQuery the array of prepared queries
 * @param preparer the function that supplies arguments to the prepared statement; may not be null
 * @param resultConsumer the consumer of the query results
 * @return this object for chaining methods together
 * @throws SQLException if there is an error connecting to the database or executing the statements
 * @see #execute(Operations)
 */
public JdbcConnection prepareQuery(String[] multiQuery,StatementPreparer preparer,BlockingMultiResultSetConsumer resultConsumer) throws SQLException, InterruptedException {
  final StatementPreparer[] preparers=new StatementPreparer[multiQuery.length];
  Arrays.fill(preparers,preparer);
  return prepareQuery(multiQuery,preparers,resultConsumer);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",564
2100,"'-tryline","/** 
 * Execute multiple SQL prepared queries where each query is executed with the same set of parameters.
 * @param multiQuery the array of prepared queries
 * @param preparers the array of functions that supply arguments to the prepared statements; may not be null
 * @param resultConsumer the consumer of the query results
 * @return this object for chaining methods together
 * @throws SQLException if there is an error connecting to the database or executing the statements
 * @see #execute(Operations)
 */
public JdbcConnection prepareQuery(String[] multiQuery,StatementPreparer[] preparers,BlockingMultiResultSetConsumer resultConsumer) throws SQLException, InterruptedException {
  final ResultSet[] resultSets=new ResultSet[multiQuery.length];
  final PreparedStatement[] preparedStatements=new PreparedStatement[multiQuery.length];
  try {
    for (int i=0; i < multiQuery.length; i++) {
      final String query=multiQuery[i];
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(running '{}',query);
      }
      final PreparedStatement statement=createPreparedStatement(query);
      preparedStatements[i]=statement;
      preparers[i].accept(statement);
      resultSets[i]=statement.executeQuery();
    }
    if (resultConsumer != null) {
      resultConsumer.accept(resultSets);
    }
  }
  finally {
    for (    ResultSet rs : resultSets) {
      if (rs != null) {
        try {
          rs.close();
        }
 catch (        Exception ei) {
        }
      }
    }
  }
  return this;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",581
2101,"'-tryline","public JdbcConnection queryWithBlockingConsumer(String query,StatementFactory statementFactory,BlockingResultSetConsumer resultConsumer) throws SQLException, InterruptedException {
  Connection conn=connection();
  try (Statement statement=statementFactory.createStatement(conn)){
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace(running '{}',query);
    }
    try (ResultSet resultSet=statement.executeQuery(query)){
      if (resultConsumer != null) {
        resultConsumer.accept(resultSet);
      }
    }
   }
   return this;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",649
2102,"'-tryline","/** 
 * Execute a SQL prepared query.
 * @param preparedQueryString the prepared query string
 * @param preparer the function that supplied arguments to the prepared statement; may not be null
 * @param resultConsumer the consumer of the query results
 * @return this object for chaining methods together
 * @throws SQLException if there is an error connecting to the database or executing the statements
 * @see #execute(Operations)
 */
public JdbcConnection prepareQueryWithBlockingConsumer(String preparedQueryString,StatementPreparer preparer,BlockingResultSetConsumer resultConsumer) throws SQLException, InterruptedException {
  final PreparedStatement statement=createPreparedStatement(preparedQueryString);
  preparer.accept(statement);
  try (ResultSet resultSet=statement.executeQuery()){
    if (resultConsumer != null) {
      resultConsumer.accept(resultSet);
    }
  }
   return this;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\jdbc\JdbcConnection.java",680
2103,"'-tryline","@Override @SuppressWarnings({unchecked}) public void emitChangeRecords(DataCollectionSchema schema,Receiver receiver) throws InterruptedException {
  Operation operation=getOperation();
switch (operation) {
case CREATE:
    emitCreateRecord(receiver,(T)schema);
  break;
case READ:
emitReadRecord(receiver,(T)schema);
break;
case UPDATE:
emitUpdateRecord(receiver,(T)schema);
break;
case DELETE:
emitDeleteRecord(receiver,(T)schema);
break;
default :
throw new IllegalArgumentException(Unsupported operation:  + operation);
}
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\AbstractChangeRecordEmitter.java",29
2104,"'-tryline","/** 
 * Emits change record(s) associated with a snapshot.
 * @param receiver the handler for which the emitted record should be dispatched
 * @param schema the schema
 */
protected abstract void emitReadRecord(Receiver receiver,T schema) throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\AbstractChangeRecordEmitter.java",68
2105,"'-tryline","/** 
 * Emits change record(s) associated with an insert operation.
 * @param receiver the handler for which the emitted record should be dispatched
 * @param schema the schema
 */
protected abstract void emitCreateRecord(Receiver receiver,T schema) throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\AbstractChangeRecordEmitter.java",76
2106,"'-tryline","/** 
 * Emits change record(s) associated with an update operation.
 * @param receiver the handler for which the emitted record should be dispatched
 * @param schema the schema
 */
protected abstract void emitUpdateRecord(Receiver receiver,T schema) throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\AbstractChangeRecordEmitter.java",84
2107,"'-tryline","/** 
 * Emits change record(s) associated with a delete operation.
 * @param receiver the handler for which the emitted record should be dispatched
 * @param schema the schema
 */
protected abstract void emitDeleteRecord(Receiver receiver,T schema) throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\AbstractChangeRecordEmitter.java",92
2108,"'-tryline","protected CatchUpStreamingResult executeCatchUpStreaming(OffsetContext previousOffset,ChangeEventSourceContext context,SnapshotChangeEventSource snapshotSource) throws InterruptedException {
  return new CatchUpStreamingResult(false);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\ChangeEventSourceCoordinator.java",129
2109,"'-tryline","protected void streamEvents(OffsetContext offsetContext,ChangeEventSourceContext context) throws InterruptedException {
  streamingSource=changeEventSourceFactory.getStreamingChangeEventSource(offsetContext);
  eventDispatcher.setEventListener(streamingMetrics);
  streamingConnected(true);
  LOGGER.info(Starting streaming);
  streamingSource.execute(context);
  LOGGER.info(Finished streaming);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\ChangeEventSourceCoordinator.java",135
2110,"'-tryline","/** 
 * Stops this coordinator.
 */
public synchronized void stop() throws InterruptedException {
  running=false;
  try {
    Thread.interrupted();
    executor.shutdown();
    boolean isShutdown=executor.awaitTermination(SHUTDOWN_WAIT_TIMEOUT.toMillis(),TimeUnit.MILLISECONDS);
    if (!isShutdown) {
      LOGGER.warn(Coordinator didn't stop in the expected time, shutting down executor now);
      Thread.interrupted();
      executor.shutdownNow();
      executor.awaitTermination(SHUTDOWN_WAIT_TIMEOUT.toMillis(),TimeUnit.MILLISECONDS);
    }
  }
  finally {
    snapshotMetrics.unregister(LOGGER);
    streamingMetrics.unregister(LOGGER);
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\ChangeEventSourceCoordinator.java",150
2111,"'-tryline","public void dispatchSnapshotEvent(T dataCollectionId,ChangeRecordEmitter changeRecordEmitter,SnapshotReceiver receiver) throws InterruptedException {
  DataCollectionSchema dataCollectionSchema=schema.schemaFor(dataCollectionId);
  if (dataCollectionSchema == null) {
    errorOnMissingSchema(dataCollectionId,changeRecordEmitter);
  }
  changeRecordEmitter.emitChangeRecords(dataCollectionSchema,new Receiver(){
    @Override public void changeRecord(    DataCollectionSchema schema,    Operation operation,    Object key,    Struct value,    OffsetContext offset,    ConnectHeaders headers) throws InterruptedException {
      eventListener.onEvent(dataCollectionSchema.id(),offset,key,value);
      receiver.changeRecord(dataCollectionSchema,operation,key,value,offset,headers);
    }
  }
);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\EventDispatcher.java",145
2112,"'-tryline","@Override public void changeRecord(DataCollectionSchema schema,Operation operation,Object key,Struct value,OffsetContext offset,ConnectHeaders headers) throws InterruptedException {
  eventListener.onEvent(dataCollectionSchema.id(),offset,key,value);
  receiver.changeRecord(dataCollectionSchema,operation,key,value,offset,headers);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\EventDispatcher.java",157
2113,"'-tryline","/** 
 * Dispatches one or more  {@link DataChangeEvent}s. If the given data collection is included in the currently captured set of collections, the given emitter will be invoked, so it can emit one or more events (in the common case, one event will be emitted, but e.g. in case of PK updates, it may be a deletion and a creation event). The receiving coordinator creates  {@link SourceRecord}s for all emitted events and passes them to this dispatcher's {@link ChangeEventCreator} for converting them into data change events.
 * @return {@code true} if an event was dispatched (i.e. sent to the message broker), {@code false} otherwise.
 */
public boolean dispatchDataChangeEvent(T dataCollectionId,ChangeRecordEmitter changeRecordEmitter) throws InterruptedException {
  try {
    boolean handled=false;
    if (!filter.isIncluded(dataCollectionId)) {
      LOGGER.trace(Filtered data change event for {},dataCollectionId);
      eventListener.onFilteredEvent(source =  + dataCollectionId);
    }
 else {
      DataCollectionSchema dataCollectionSchema=schema.schemaFor(dataCollectionId);
      if (dataCollectionSchema == null) {
        final Optional<DataCollectionSchema> replacementSchema=inconsistentSchemaHandler.handle(dataCollectionId,changeRecordEmitter);
        if (!replacementSchema.isPresent()) {
          return false;
        }
        dataCollectionSchema=replacementSchema.get();
      }
      changeRecordEmitter.emitChangeRecords(dataCollectionSchema,new Receiver(){
        @Override public void changeRecord(        DataCollectionSchema schema,        Operation operation,        Object key,        Struct value,        OffsetContext offset,        ConnectHeaders headers) throws InterruptedException {
          transactionMonitor.dataEvent(dataCollectionId,offset,key,value);
          eventListener.onEvent(dataCollectionId,offset,key,value);
          if (operation == Operation.CREATE && signal.isSignal(dataCollectionId)) {
            signal.process(value,offset);
          }
          streamingReceiver.changeRecord(schema,operation,key,value,offset,headers);
        }
      }
);
      handled=true;
    }
    heartbeat.heartbeat(changeRecordEmitter.getOffset().getPartition(),changeRecordEmitter.getOffset().getOffset(),this::enqueueHeartbeat);
    return handled;
  }
 catch (  Exception e) {
switch (connectorConfig.getEventProcessingFailureHandlingMode()) {
case FAIL:
      throw new ConnectException(Error while processing event at offset  + changeRecordEmitter.getOffset().getOffset(),e);
case WARN:
    LOGGER.warn(Error while processing event at offset {},changeRecordEmitter.getOffset().getOffset());
  break;
case SKIP:
LOGGER.debug(Error while processing event at offset {},changeRecordEmitter.getOffset().getOffset());
break;
}
return false;
}
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\EventDispatcher.java",174
2114,"'-tryline","@Override public void changeRecord(DataCollectionSchema schema,Operation operation,Object key,Struct value,OffsetContext offset,ConnectHeaders headers) throws InterruptedException {
  transactionMonitor.dataEvent(dataCollectionId,offset,key,value);
  eventListener.onEvent(dataCollectionId,offset,key,value);
  if (operation == Operation.CREATE && signal.isSignal(dataCollectionId)) {
    signal.process(value,offset);
  }
  streamingReceiver.changeRecord(schema,operation,key,value,offset,headers);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\EventDispatcher.java",204
2115,"'-tryline","public void dispatchTransactionCommittedEvent(OffsetContext offset) throws InterruptedException {
  transactionMonitor.transactionComittedEvent(offset);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\EventDispatcher.java",248
2116,"'-tryline","public void dispatchTransactionStartedEvent(String transactionId,OffsetContext offset) throws InterruptedException {
  transactionMonitor.transactionStartedEvent(transactionId,offset);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\EventDispatcher.java",252
2117,"'-tryline","public void dispatchSchemaChangeEvent(T dataCollectionId,SchemaChangeEventEmitter schemaChangeEventEmitter) throws InterruptedException {
  if (dataCollectionId != null && !filter.isIncluded(dataCollectionId)) {
    if (historizedSchema == null || historizedSchema.storeOnlyMonitoredTables()) {
      LOGGER.trace(Filtering schema change event for {},dataCollectionId);
      return;
    }
  }
  schemaChangeEventEmitter.emitSchemaChangeEvent(new SchemaChangeEventReceiver());
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\EventDispatcher.java",269
2118,"'-tryline","public void dispatchSchemaChangeEvent(Collection<T> dataCollectionIds,SchemaChangeEventEmitter schemaChangeEventEmitter) throws InterruptedException {
  boolean anyNonfilteredEvent=false;
  if (dataCollectionIds == null || dataCollectionIds.isEmpty()) {
    anyNonfilteredEvent=true;
  }
 else {
    for (    T dataCollectionId : dataCollectionIds) {
      if (filter.isIncluded(dataCollectionId)) {
        anyNonfilteredEvent=true;
        break;
      }
    }
  }
  if (!anyNonfilteredEvent) {
    if (historizedSchema == null || historizedSchema.storeOnlyMonitoredTables()) {
      LOGGER.trace(Filtering schema change event for {},dataCollectionIds);
      return;
    }
  }
  schemaChangeEventEmitter.emitSchemaChangeEvent(new SchemaChangeEventReceiver());
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\EventDispatcher.java",279
2119,"'-tryline","public void alwaysDispatchHeartbeatEvent(OffsetContext offset) throws InterruptedException {
  heartbeat.forcedBeat(offset.getPartition(),offset.getOffset(),this::enqueueHeartbeat);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\EventDispatcher.java",302
2120,"'-tryline","public void dispatchHeartbeatEvent(OffsetContext offset) throws InterruptedException {
  heartbeat.heartbeat(offset.getPartition(),offset.getOffset(),this::enqueueHeartbeat);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\EventDispatcher.java",309
2121,"'-tryline","private void enqueueHeartbeat(SourceRecord record) throws InterruptedException {
  queue.enqueue(new DataChangeEvent(record));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\EventDispatcher.java",320
2122,"'-tryline","private void enqueueTransactionMessage(SourceRecord record) throws InterruptedException {
  queue.enqueue(new DataChangeEvent(record));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\EventDispatcher.java",324
2123,"'-tryline","private void enqueueSchemaChangeMessage(SourceRecord record) throws InterruptedException {
  queue.enqueue(new DataChangeEvent(record));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\EventDispatcher.java",328
2124,"'-tryline","void completeSnapshot() throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\EventDispatcher.java",338
2125,"'-tryline","@Override public void changeRecord(DataCollectionSchema dataCollectionSchema,Operation operation,Object key,Struct value,OffsetContext offsetContext,ConnectHeaders headers) throws InterruptedException {
  Objects.requireNonNull(value,value must not be null);
  LOGGER.trace(Received change record for {} operation on key {},operation,key);
  Schema keySchema=dataCollectionSchema.keySchema();
  String topicName=topicSelector.topicNameFor((T)dataCollectionSchema.id());
  SourceRecord record=new SourceRecord(offsetContext.getPartition(),offsetContext.getOffset(),topicName,null,keySchema,key,dataCollectionSchema.getEnvelopeSchema().schema(),value,null,headers);
  queue.enqueue(changeEventCreator.createDataChangeEvent(record));
  if (emitTombstonesOnDelete && operation == Operation.DELETE) {
    SourceRecord tombStone=record.newRecord(record.topic(),record.kafkaPartition(),record.keySchema(),record.key(),null,null,record.timestamp(),record.headers());
    queue.enqueue(changeEventCreator.createDataChangeEvent(tombStone));
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\EventDispatcher.java",343
2126,"'-tryline","@Override public void changeRecord(DataCollectionSchema dataCollectionSchema,Operation operation,Object key,Struct value,OffsetContext offsetContext,ConnectHeaders headers) throws InterruptedException {
  Objects.requireNonNull(value,value must not be null);
  LOGGER.trace(Received change record for {} operation on key {},operation,key);
  if (bufferedEvent != null) {
    queue.enqueue(bufferedEvent.get());
  }
  Schema keySchema=dataCollectionSchema.keySchema();
  String topicName=topicSelector.topicNameFor((T)dataCollectionSchema.id());
  bufferedEvent=() -> {
    SourceRecord record=new SourceRecord(offsetContext.getPartition(),offsetContext.getOffset(),topicName,null,keySchema,key,dataCollectionSchema.getEnvelopeSchema().schema(),value,null,headers);
    return changeEventCreator.createDataChangeEvent(record);
  }
;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\EventDispatcher.java",388
2127,"'-tryline","@Override public void completeSnapshot() throws InterruptedException {
  if (bufferedEvent != null) {
    final DataChangeEvent event=bufferedEvent.get();
    final Struct envelope=(Struct)event.getRecord().value();
    if (envelope.schema().field(Envelope.FieldName.SOURCE) != null) {
      final Struct source=envelope.getStruct(Envelope.FieldName.SOURCE);
      final SnapshotRecord snapshot=SnapshotRecord.fromSource(source);
      if (snapshot == SnapshotRecord.TRUE) {
        SnapshotRecord.LAST.toSource(source);
      }
    }
    queue.enqueue(event);
    bufferedEvent=null;
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\EventDispatcher.java",419
2128,"'-tryline","@Override public void schemaChangeEvent(SchemaChangeEvent event) throws InterruptedException {
  historizedSchema.applySchemaChange(event);
  if (connectorConfig.isSchemaChangesHistoryEnabled()) {
    final String topicName=topicSelector.getPrimaryTopic();
    final Integer partition=0;
    final Struct key=schemaChangeRecordKey(event);
    final Struct value=schemaChangeRecordValue(event);
    final SourceRecord record=new SourceRecord(null,event.getOffset(),topicName,partition,schemaChangeKeySchema,key,schemaChangeValueSchema,value);
    enqueueSchemaChangeMessage(record);
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\EventDispatcher.java",458
2129,"'-tryline","@Override public boolean arrived(Payload signalPayload) throws InterruptedException {
  final Array changes=signalPayload.data.getArray(FIELD_CHANGES);
  final String database=signalPayload.data.getString(FIELD_DATABASE);
  final String schema=signalPayload.data.getString(FIELD_SCHEMA);
  if (changes == null || changes.isEmpty()) {
    LOGGER.warn(Table changes signal '{}' has arrived but the requested field '{}' is missing from data,signalPayload,FIELD_CHANGES);
    return false;
  }
  if (database == null || database.isEmpty()) {
    LOGGER.warn(Table changes signal '{}' has arrived but the requested field '{}' is missing from data,signalPayload,FIELD_DATABASE);
    return false;
  }
  for (  TableChanges.TableChange tableChange : serializer.deserialize(changes,useCatalogBeforeSchema)) {
    if (dispatcher.getHistorizedSchema() != null) {
      LOGGER.info(Executing schema change for table '{}' requested by signal '{}',tableChange.getId(),signalPayload.id);
      dispatcher.dispatchSchemaChangeEvent(tableChange.getId(),emitter -> {
        emitter.schemaChangeEvent(new SchemaChangeEvent(signalPayload.offsetContext.getPartition(),signalPayload.offsetContext.getOffset(),signalPayload.source,database,schema,null,tableChange.getTable(),toSchemaChangeEventType(tableChange.getType()),false));
      }
);
    }
 else     if (dispatcher.getSchema() instanceof RelationalDatabaseSchema) {
      LOGGER.info(Executing schema change for table '{}' requested by signal '{}',tableChange.getId(),signalPayload.id);
      final RelationalDatabaseSchema databaseSchema=(RelationalDatabaseSchema)dispatcher.getSchema();
      if (tableChange.getType() == TableChangeType.CREATE || tableChange.getType() == TableChangeType.ALTER) {
        databaseSchema.refresh(tableChange.getTable());
      }
    }
  }
  return true;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\signal\SchemaChanges.java",45
2130,"'-tryline","/** 
 * @param signalPayload the content of the signal
 * @return true if the signal was processed
 */
boolean arrived(Payload signalPayload) throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\signal\Signal.java",48
2131,"'-tryline","public boolean process(String id,String type,String data,OffsetContext offset,Struct source) throws InterruptedException {
  LOGGER.debug(Arrived signal id = '{}', type = '{}', data = '{}',id,type,data);
  final Action action=signalActions.get(type);
  if (action == null) {
    LOGGER.warn(Signal '{}' has arrived but the type '{}' is not recognized,id,type);
    return false;
  }
  try {
    final Document jsonData=(data == null || data.isEmpty()) ? Document.create() : DocumentReader.defaultReader().read(data);
    return action.arrived(new Payload(id,type,jsonData,offset,source));
  }
 catch (  IOException e) {
    LOGGER.warn(Signal '{}' has arrived but the data '{}' cannot be parsed,id,data,e);
    return false;
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\signal\Signal.java",120
2132,"'-tryline","public boolean process(String id,String type,String data) throws InterruptedException {
  return process(id,type,data,null,null);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\signal\Signal.java",138
2133,"'-tryline","/** 
 * @param value Envelope with change from signaling table
 * @param offset offset of the incoming signal
 * @return true if the signal was processed
 */
public boolean process(Struct value,OffsetContext offset) throws InterruptedException {
  String id=null;
  String type=null;
  String data=null;
  Struct source=null;
  try {
    final Struct after=value.getStruct(Envelope.FieldName.AFTER);
    if (after == null) {
      LOGGER.warn(After part of signal '{}' is missing,value);
      return false;
    }
    if (value.schema().field(Envelope.FieldName.SOURCE) != null) {
      source=value.getStruct(Envelope.FieldName.SOURCE);
    }
    List<Field> fields=after.schema().fields();
    if (fields.size() != 3) {
      LOGGER.warn(The signal event '{}' should have 3 fields but has {},after,fields.size());
      return false;
    }
    id=after.getString(fields.get(0).name());
    type=after.getString(fields.get(1).name());
    data=after.getString(fields.get(2).name());
  }
 catch (  Exception e) {
    LOGGER.warn(Exception while preparing to process the signal '{}',value,e);
  }
  return process(id,type,data,offset,source);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\signal\Signal.java",142
2134,"'-tryline","@Override public SnapshotResult execute(ChangeEventSourceContext context) throws InterruptedException {
  SnapshottingTask snapshottingTask=getSnapshottingTask(previousOffset);
  if (snapshottingTask.shouldSkipSnapshot()) {
    LOGGER.debug(Skipping snapshotting);
    return SnapshotResult.skipped(previousOffset);
  }
  delaySnapshotIfNeeded(context);
  final SnapshotContext ctx;
  try {
    ctx=prepare(context);
  }
 catch (  Exception e) {
    LOGGER.error(Failed to initialize snapshot context.,e);
    throw new RuntimeException(e);
  }
  boolean completedSuccessfully=true;
  try {
    snapshotProgressListener.snapshotStarted();
    SnapshotResult result=doExecute(context,ctx,snapshottingTask);
    return result;
  }
 catch (  InterruptedException e) {
    completedSuccessfully=false;
    LOGGER.warn(Snapshot was interrupted before completion);
    throw e;
  }
catch (  Exception t) {
    completedSuccessfully=false;
    throw new DebeziumException(t);
  }
 finally {
    LOGGER.info(Snapshot - Final stage);
    complete(ctx);
    if (completedSuccessfully) {
      snapshotProgressListener.snapshotCompleted();
    }
 else {
      snapshotProgressListener.snapshotAborted();
    }
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\source\AbstractSnapshotChangeEventSource.java",48
2135,"'-tryline","/** 
 * Delays snapshot execution as per the  {@link CommonConnectorConfig#SNAPSHOT_DELAY_MS} parameter.
 */
protected void delaySnapshotIfNeeded(ChangeEventSourceContext context) throws InterruptedException {
  Duration snapshotDelay=connectorConfig.getSnapshotDelay();
  if (snapshotDelay.isZero() || snapshotDelay.isNegative()) {
    return;
  }
  Threads.Timer timer=Threads.timer(Clock.SYSTEM,snapshotDelay);
  Metronome metronome=Metronome.parker(ConfigurationDefaults.RETURN_CONTROL_INTERVAL,Clock.SYSTEM);
  while (!timer.expired()) {
    if (!context.isRunning()) {
      throw new InterruptedException(Interrupted while awaiting initial snapshot delay);
    }
    LOGGER.info(The connector will wait for {}s before proceeding,timer.remaining().getSeconds());
    metronome.pause();
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\source\AbstractSnapshotChangeEventSource.java",108
2136,"'-tryline","/** 
 * Invoked if an event is processed for a captured table.
 */
void onEvent(DataCollectionId source,OffsetContext offset,Object key,Struct value) throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\source\spi\DataChangeEventListener.java",23
2137,"'-tryline","/** 
 * Executes this source. Implementations should regularly check via the given context if they should stop. If that's the case, they should abort their processing and perform any clean-up needed, such as rolling back pending transactions, releasing locks etc.
 * @param context contextual information for this source's execution
 * @return an indicator to the position at which the snapshot was taken
 * @throws InterruptedException in case the snapshot was aborted before completion
 */
SnapshotResult execute(ChangeEventSourceContext context) throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\source\spi\SnapshotChangeEventSource.java",18
2138,"'-tryline","/** 
 * Executes this source. Implementations should regularly check via the given context if they should stop. If that's the case, they should abort their processing and perform any clean-up needed, such as rolling back pending transactions, releasing locks etc.
 * @param context contextual information for this source's execution
 * @return an indicator to the position at which the snapshot was taken
 * @throws InterruptedException in case the snapshot was aborted before completion
 */
void execute(ChangeEventSourceContext context) throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\source\spi\StreamingChangeEventSource.java",17
2139,"'-tryline","/** 
 * Emits the change record(s) corresponding to data change represented by this emitter.
 */
void emitChangeRecords(DataCollectionSchema schema,Receiver receiver) throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\spi\ChangeRecordEmitter.java",23
2140,"'-tryline","void changeRecord(DataCollectionSchema schema,Operation operation,Object key,Struct value,OffsetContext offset,ConnectHeaders headers) throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\spi\ChangeRecordEmitter.java",39
2141,"'-tryline","void emitSchemaChangeEvent(Receiver receiver) throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\spi\SchemaChangeEventEmitter.java",18
2142,"'-tryline","void schemaChangeEvent(SchemaChangeEvent event) throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\spi\SchemaChangeEventEmitter.java",21
2143,"'-tryline","public void dataEvent(DataCollectionId source,OffsetContext offset,Object key,Struct value) throws InterruptedException {
  if (!connectorConfig.shouldProvideTransactionMetadata()) {
    return;
  }
  final TransactionContext transactionContext=offset.getTransactionContext();
  final String txId=eventMetadataProvider.getTransactionId(source,offset,key,value);
  if (txId == null) {
    if (LOGGER.isTraceEnabled()) {
      LOGGER.trace(Event '{}' has no transaction id,eventMetadataProvider.toSummaryString(source,offset,key,value));
    }
    return;
  }
  if (!transactionContext.isTransactionInProgress()) {
    transactionContext.beginTransaction(txId);
    beginTransaction(offset);
  }
 else   if (!transactionContext.getTransactionId().equals(txId)) {
    endTransaction(offset);
    transactionContext.endTransaction();
    transactionContext.beginTransaction(txId);
    beginTransaction(offset);
  }
  transactionEvent(offset,source,value);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\txmetadata\TransactionMonitor.java",101
2144,"'-tryline","public void transactionComittedEvent(OffsetContext offset) throws InterruptedException {
  if (!connectorConfig.shouldProvideTransactionMetadata()) {
    return;
  }
  endTransaction(offset);
  offset.getTransactionContext().endTransaction();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\txmetadata\TransactionMonitor.java",128
2145,"'-tryline","public void transactionStartedEvent(String transactionId,OffsetContext offset) throws InterruptedException {
  if (!connectorConfig.shouldProvideTransactionMetadata()) {
    return;
  }
  offset.getTransactionContext().beginTransaction(transactionId);
  beginTransaction(offset);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\txmetadata\TransactionMonitor.java",136
2146,"'-tryline","private void beginTransaction(OffsetContext offsetContext) throws InterruptedException {
  final Struct key=new Struct(TRANSACTION_KEY_SCHEMA);
  key.put(DEBEZIUM_TRANSACTION_ID_KEY,offsetContext.getTransactionContext().getTransactionId());
  final Struct value=new Struct(TRANSACTION_VALUE_SCHEMA);
  value.put(DEBEZIUM_TRANSACTION_STATUS_KEY,TransactionStatus.BEGIN.name());
  value.put(DEBEZIUM_TRANSACTION_ID_KEY,offsetContext.getTransactionContext().getTransactionId());
  sender.accept(new SourceRecord(offsetContext.getPartition(),offsetContext.getOffset(),topicName,null,key.schema(),key,value.schema(),value));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\txmetadata\TransactionMonitor.java",157
2147,"'-tryline","private void endTransaction(OffsetContext offsetContext) throws InterruptedException {
  final Struct key=new Struct(TRANSACTION_KEY_SCHEMA);
  key.put(DEBEZIUM_TRANSACTION_ID_KEY,offsetContext.getTransactionContext().getTransactionId());
  final Struct value=new Struct(TRANSACTION_VALUE_SCHEMA);
  value.put(DEBEZIUM_TRANSACTION_STATUS_KEY,TransactionStatus.END.name());
  value.put(DEBEZIUM_TRANSACTION_ID_KEY,offsetContext.getTransactionContext().getTransactionId());
  value.put(DEBEZIUM_TRANSACTION_EVENT_COUNT_KEY,offsetContext.getTransactionContext().getTotalEventCount());
  final Set<Entry<String,Long>> perTableEventCount=offsetContext.getTransactionContext().getPerTableEventCount().entrySet();
  final List<Struct> valuePerTableCount=new ArrayList<>(perTableEventCount.size());
  for (  Map.Entry<String,Long> tableEventCount : perTableEventCount) {
    final Struct perTable=new Struct(EVENT_COUNT_PER_DATA_COLLECTION_SCHEMA);
    perTable.put(DEBEZIUM_TRANSACTION_COLLECTION_KEY,tableEventCount.getKey());
    perTable.put(DEBEZIUM_TRANSACTION_EVENT_COUNT_KEY,tableEventCount.getValue());
    valuePerTableCount.add(perTable);
  }
  value.put(DEBEZIUM_TRANSACTION_DATA_COLLECTIONS_KEY,valuePerTableCount);
  sender.accept(new SourceRecord(offsetContext.getPartition(),offsetContext.getOffset(),topicName,null,key.schema(),key,value.schema(),value));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\pipeline\txmetadata\TransactionMonitor.java",168
2148,"'-tryline","@Override public void emitChangeRecords(DataCollectionSchema schema,Receiver receiver) throws InterruptedException {
  TableSchema tableSchema=(TableSchema)schema;
  Operation operation=getOperation();
switch (operation) {
case CREATE:
    emitCreateRecord(receiver,tableSchema);
  break;
case READ:
emitReadRecord(receiver,tableSchema);
break;
case UPDATE:
emitUpdateRecord(receiver,tableSchema);
break;
case DELETE:
emitDeleteRecord(receiver,tableSchema);
break;
case TRUNCATE:
emitTruncateRecord(receiver,tableSchema);
break;
default :
throw new IllegalArgumentException(Unsupported operation:  + operation);
}
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\RelationalChangeRecordEmitter.java",38
2149,"'-tryline","@Override protected void emitCreateRecord(Receiver receiver,TableSchema tableSchema) throws InterruptedException {
  Object[] newColumnValues=getNewColumnValues();
  Struct newKey=tableSchema.keyFromColumnData(newColumnValues);
  Struct newValue=tableSchema.valueFromColumnData(newColumnValues);
  Struct envelope=tableSchema.getEnvelopeSchema().create(newValue,getOffset().getSourceInfo(),getClock().currentTimeAsInstant());
  if (skipEmptyMessages() && (newColumnValues == null || newColumnValues.length == 0)) {
    logger.warn(no new values found for table '{}' from create message at '{}'; skipping record,tableSchema,getOffset().getSourceInfo());
    return;
  }
  receiver.changeRecord(tableSchema,Operation.CREATE,newKey,envelope,getOffset(),null);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\RelationalChangeRecordEmitter.java",64
2150,"'-tryline","@Override protected void emitReadRecord(Receiver receiver,TableSchema tableSchema) throws InterruptedException {
  Object[] newColumnValues=getNewColumnValues();
  Struct newKey=tableSchema.keyFromColumnData(newColumnValues);
  Struct newValue=tableSchema.valueFromColumnData(newColumnValues);
  Struct envelope=tableSchema.getEnvelopeSchema().read(newValue,getOffset().getSourceInfo(),getClock().currentTimeAsInstant());
  receiver.changeRecord(tableSchema,Operation.READ,newKey,envelope,getOffset(),null);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\RelationalChangeRecordEmitter.java",80
2151,"'-tryline","@Override protected void emitUpdateRecord(Receiver receiver,TableSchema tableSchema) throws InterruptedException {
  Object[] oldColumnValues=getOldColumnValues();
  Object[] newColumnValues=getNewColumnValues();
  Struct oldKey=tableSchema.keyFromColumnData(oldColumnValues);
  Struct newKey=tableSchema.keyFromColumnData(newColumnValues);
  Struct newValue=tableSchema.valueFromColumnData(newColumnValues);
  Struct oldValue=tableSchema.valueFromColumnData(oldColumnValues);
  if (skipEmptyMessages() && (newColumnValues == null || newColumnValues.length == 0)) {
    logger.warn(no new values found for table '{}' from update message at '{}'; skipping record,tableSchema,getOffset().getSourceInfo());
    return;
  }
  if (oldKey == null || Objects.equals(oldKey,newKey)) {
    Struct envelope=tableSchema.getEnvelopeSchema().update(oldValue,newValue,getOffset().getSourceInfo(),getClock().currentTimeAsInstant());
    receiver.changeRecord(tableSchema,Operation.UPDATE,newKey,envelope,getOffset(),null);
  }
 else {
    ConnectHeaders headers=new ConnectHeaders();
    headers.add(PK_UPDATE_NEWKEY_FIELD,newKey,tableSchema.keySchema());
    Struct envelope=tableSchema.getEnvelopeSchema().delete(oldValue,getOffset().getSourceInfo(),getClock().currentTimeAsInstant());
    receiver.changeRecord(tableSchema,Operation.DELETE,oldKey,envelope,getOffset(),headers);
    headers=new ConnectHeaders();
    headers.add(PK_UPDATE_OLDKEY_FIELD,oldKey,tableSchema.keySchema());
    envelope=tableSchema.getEnvelopeSchema().create(newValue,getOffset().getSourceInfo(),getClock().currentTimeAsInstant());
    receiver.changeRecord(tableSchema,Operation.CREATE,newKey,envelope,getOffset(),headers);
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\RelationalChangeRecordEmitter.java",91
2152,"'-tryline","@Override protected void emitDeleteRecord(Receiver receiver,TableSchema tableSchema) throws InterruptedException {
  Object[] oldColumnValues=getOldColumnValues();
  Struct oldKey=tableSchema.keyFromColumnData(oldColumnValues);
  Struct oldValue=tableSchema.valueFromColumnData(oldColumnValues);
  if (skipEmptyMessages() && (oldColumnValues == null || oldColumnValues.length == 0)) {
    logger.warn(no old values found for table '{}' from delete message at '{}'; skipping record,tableSchema,getOffset().getSourceInfo());
    return;
  }
  Struct envelope=tableSchema.getEnvelopeSchema().delete(oldValue,getOffset().getSourceInfo(),getClock().currentTimeAsInstant());
  receiver.changeRecord(tableSchema,Operation.DELETE,oldKey,envelope,getOffset(),null);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\RelationalChangeRecordEmitter.java",129
2153,"'-tryline","protected void emitTruncateRecord(Receiver receiver,TableSchema schema) throws InterruptedException {
  throw new UnsupportedOperationException(TRUNCATE not supported);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\RelationalChangeRecordEmitter.java",144
2154,"'-tryline","/** 
 * Dispatches the data change events for the records of a single table.
 */
private void createDataEventsForTable(ChangeEventSourceContext sourceContext,RelationalSnapshotContext snapshotContext,SnapshotReceiver snapshotReceiver,Table table,int tableOrder,int tableCount) throws InterruptedException {
  long exportStart=clock.currentTimeInMillis();
  LOGGER.info(\t Exporting data from table '{}' ({} of {} tables),table.id(),tableOrder,tableCount);
  final Optional<String> selectStatement=determineSnapshotSelect(snapshotContext,table.id());
  if (!selectStatement.isPresent()) {
    LOGGER.warn(For table '{}' the select statement was not provided, skipping table,table.id());
    snapshotProgressListener.dataCollectionSnapshotCompleted(table.id(),0);
    return;
  }
  LOGGER.info(\t For table '{}' using select statement: '{}',table.id(),selectStatement.get());
  final OptionalLong rowCount=rowCountForTable(table.id());
  try (Statement statement=readTableStatement(rowCount);ResultSet rs=statement.executeQuery(selectStatement.get())){
    ColumnUtils.ColumnArray columnArray=ColumnUtils.toArray(rs,table);
    long rows=0;
    Timer logTimer=getTableScanLogTimer();
    snapshotContext.lastRecordInTable=false;
    if (rs.next()) {
      while (!snapshotContext.lastRecordInTable) {
        if (!sourceContext.isRunning()) {
          throw new InterruptedException(Interrupted while snapshotting table  + table.id());
        }
        rows++;
        final Object[] row=new Object[columnArray.getGreatestColumnPosition()];
        for (int i=0; i < columnArray.getColumns().length; i++) {
          row[columnArray.getColumns()[i].position() - 1]=getColumnValue(rs,i + 1,columnArray.getColumns()[i],table);
        }
        snapshotContext.lastRecordInTable=!rs.next();
        if (logTimer.expired()) {
          long stop=clock.currentTimeInMillis();
          if (rowCount.isPresent()) {
            LOGGER.info(\t Exported {} of {} records for table '{}' after {},rows,rowCount.getAsLong(),table.id(),Strings.duration(stop - exportStart));
          }
 else {
            LOGGER.info(\t Exported {} records for table '{}' after {},rows,table.id(),Strings.duration(stop - exportStart));
          }
          snapshotProgressListener.rowsScanned(table.id(),rows);
          logTimer=getTableScanLogTimer();
        }
        if (snapshotContext.lastTable && snapshotContext.lastRecordInTable) {
          lastSnapshotRecord(snapshotContext);
        }
        dispatcher.dispatchSnapshotEvent(table.id(),getChangeRecordEmitter(snapshotContext,table.id(),row),snapshotReceiver);
      }
    }
 else     if (snapshotContext.lastTable) {
      lastSnapshotRecord(snapshotContext);
    }
    LOGGER.info(\t Finished exporting {} records for table '{}'; total duration '{}',rows,table.id(),Strings.duration(clock.currentTimeInMillis() - exportStart));
    snapshotProgressListener.dataCollectionSnapshotCompleted(table.id(),rows);
  }
 catch (  SQLException e) {
    throw new ConnectException(Snapshotting of table  + table.id() +  failed,e);
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\RelationalSnapshotChangeEventSource.java",320
2155,"'-tryline","protected void postSnapshot() throws InterruptedException {
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\relational\RelationalSnapshotChangeEventSource.java",505
2156,"'-tryline","/** 
 * Pause until the next tick of the metronome.
 * @throws InterruptedException if the thread was interrupted while pausing
 */
public void pause() throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\Metronome.java",21
2157,"'-tryline","@Override public void pause() throws InterruptedException {
  for (; ; ) {
    final long now=timeSystem.currentTimeInMillis();
    if (next <= now) {
      break;
    }
    Thread.sleep(next - now);
  }
  next=next + periodInMillis;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\Metronome.java",50
2158,"'-tryline","@Override public void pause() throws InterruptedException {
  while (next > timeSystem.currentTimeInNanos()) {
    LockSupport.parkNanos(next - timeSystem.currentTimeInNanos());
    if (Thread.currentThread().isInterrupted()) {
      throw new InterruptedException();
    }
  }
  next=next + periodInNanos;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\Metronome.java",89
2159,"'-tryline","/** 
 * Block until all running stopwatches have been  {@link Stopwatch#stop() stopped}. This means that if a stopwatch is  {@link #create() created} but never started, this method will not wait for it. Likewise, if a stopwatchis  {@link #create() created} and started, then this method will block until the stopwatch is {@link Stopwatch#stop() stopped} (even if the same stopwatch is started multiple times).are stopped.
 * @throws InterruptedException if the thread is interrupted before unblocking
 */
void await() throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\Stopwatch.java",349
2160,"'-tryline","/** 
 * Block until all stopwatches that have been  {@link #create() created} and {@link Stopwatch#start() started} arestopped.
 * @param timeout the maximum length of time that this method should block
 * @param unit the unit for the timeout; may not be null
 * @throws InterruptedException if the thread is interrupted before unblocking
 */
void await(long timeout,TimeUnit unit) throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\Stopwatch.java",360
2161,"'-tryline","@Override public void await() throws InterruptedException {
  latch.await();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\Stopwatch.java",391
2162,"'-tryline","@Override public void await(long timeout,TimeUnit unit) throws InterruptedException {
  latch.await(timeout,unit);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\Stopwatch.java",396
2163,"'-tryline","/** 
 * Causes the current thread to wait until the latch has counted down to zero, unless the thread is  {@linkplain Thread#interrupt interrupted}. <p> If the current count is zero then this method returns immediately. <p> If the current count is greater than zero then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happen: <ul> <li>The count reaches zero due to invocations of the  {@link #countDown} method; or<li>Some other thread  {@linkplain Thread#interrupt interrupts} the current thread.</ul> <p> If the current thread: <ul> <li>has its interrupted status set on entry to this method; or <li>is  {@linkplain Thread#interrupt interrupted} while waiting,</ul> then  {@link InterruptedException} is thrown and the current thread's interrupted status is cleared.
 * @throws InterruptedException if the current thread is interruptedwhile waiting
 */
public void await() throws InterruptedException {
  sync.acquireSharedInterruptibly(1);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\VariableLatch.java",99
2164,"'-tryline","/** 
 * Causes the current thread to wait until the latch has counted down to zero, unless the thread is  {@linkplain Thread#interrupt interrupted}, or the specified waiting time elapses. <p> If the current count is zero then this method returns immediately with the value  {@code true}. <p> If the current count is greater than zero then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happen: <ul> <li>The count reaches zero due to invocations of the  {@link #countDown} method; or<li>Some other thread  {@linkplain Thread#interrupt interrupts} the current thread; or<li>The specified waiting time elapses. </ul> <p> If the count reaches zero then the method returns with the value  {@code true}. <p> If the current thread: <ul> <li>has its interrupted status set on entry to this method; or <li>is  {@linkplain Thread#interrupt interrupted} while waiting,</ul> then  {@link InterruptedException} is thrown and the current thread's interrupted status is cleared.<p> If the specified waiting time elapses then the value  {@code false} is returned. If the time is less than or equal to zero,the method will not wait at all.
 * @param timeout the maximum time to wait
 * @param unit the time unit of the {@code timeout} argument
 * @return {@code true} if the count reached zero and {@code false} if the waiting time elapsed before the count reached zero
 * @throws InterruptedException if the current thread is interruptedwhile waiting
 */
public boolean await(long timeout,TimeUnit unit) throws InterruptedException {
  return sync.tryAcquireSharedNanos(1,unit.toNanos(timeout));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\VariableLatch.java",129
2165,"'-tryline","@Test public void shouldMaintainSameOrder() throws InterruptedException {
  BufferedBlockingConsumer<Integer> buffered=BufferedBlockingConsumer.bufferLast(consumer);
  buffered.accept(1);
  buffered.accept(2);
  buffered.accept(3);
  buffered.accept(4);
  buffered.accept(5);
  assertThat(history).containsExactly(1,2,3,4);
  buffered.close(i -> i);
  assertThat(history).containsExactly(1,2,3,4,5);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\function\BufferedBlockingConsumerTest.java",30
2166,"'-tryline","/** 
 * Block until a record can be read from this consumer's topic, and return the value in that record.
 * @return the value; never null
 * @throws InterruptedException if the thread is interrupted while blocking
 */
default V nextValue() throws InterruptedException {
  return nextRecord().value();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\kafka\KafkaCluster.java",461
2167,"'-tryline","/** 
 * Block until a record can be read from this consumer's topic, and return the record.
 * @return the record; never null
 * @throws InterruptedException if the thread is interrupted while blocking
 */
ConsumerRecord<K,V> nextRecord() throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\kafka\KafkaCluster.java",471
2168,"'-tryline","/** 
 * Block until a record can be read from this consumer's topic or until the timeout occurs, and if a record was read return the value in that record.
 * @param timeout the maximum amount of time to block to wait for a record
 * @param unit the unit of time for the {@code timeout}
 * @return the value, or null if the method timed out
 * @throws InterruptedException if the thread is interrupted while blocking
 */
default V nextValue(long timeout,TimeUnit unit) throws InterruptedException {
  ConsumerRecord<K,V> record=nextRecord(timeout,unit);
  return record != null ? record.value() : null;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\kafka\KafkaCluster.java",479
2169,"'-tryline","/** 
 * Block until a record can be read from this consumer's topic or until the timeout occurs, and if a record was read return the record.
 * @param timeout the maximum amount of time to block to wait for a record
 * @param unit the unit of time for the {@code timeout}
 * @return the record, or null if the method timed out
 * @throws InterruptedException if the thread is interrupted while blocking
 */
ConsumerRecord<K,V> nextRecord(long timeout,TimeUnit unit) throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\kafka\KafkaCluster.java",493
2170,"'-tryline","@Override public ConsumerRecord<K,V> nextRecord() throws InterruptedException {
  return consumed.take();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\kafka\KafkaCluster.java",658
2171,"'-tryline","@Override public ConsumerRecord<K,V> nextRecord(long timeout,TimeUnit unit) throws InterruptedException {
  return consumed.poll(timeout,unit);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\kafka\KafkaCluster.java",663
2172,"'-tryline","default public Statistics once(InterruptableFunction runnable) throws InterruptedException {
  return Timer.time(null,1,runnable,null);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\util\Testing.java",340
2173,"'-tryline","default public <T>Statistics once(Callable<T> runnable,Consumer<T> cleanup) throws InterruptedException {
  return Timer.time(null,1,runnable,cleanup);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\util\Testing.java",344
2174,"'-tryline","default public Statistics time(String desc,int repeat,InterruptableFunction runnable) throws InterruptedException {
  return Timer.time(desc,repeat,runnable,null);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\util\Testing.java",348
2175,"'-tryline","default public <T>Statistics time(String desc,int repeat,Callable<T> runnable,Consumer<T> cleanup) throws InterruptedException {
  return Timer.time(desc,repeat,runnable,cleanup);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\util\Testing.java",352
2176,"'-tryline","protected static <T>Statistics time(String desc,int repeat,Callable<T> runnable,Consumer<T> cleanup) throws InterruptedException {
  sw.start();
  try {
    sws.time(repeat,runnable,result -> {
      if (cleanup != null) {
        cleanup.accept(result);
      }
    }
);
  }
 catch (  Throwable t) {
    t.printStackTrace();
    fail(t.getMessage());
  }
  sw.stop();
  return sw.durations().statistics();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\util\Testing.java",373
2177,"'-tryline","@Override public Void call() throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\test\java\io\debezium\util\Testing.java",398
2178,"'-tryline","@Override public List<SourceRecord> poll() throws InterruptedException {
  if (records.isEmpty()) {
    new CountDownLatch(1).await();
  }
  if (running.get()) {
    if (retryRecords != null) {
      final List<SourceRecord> r=retryRecords;
      retryRecords=null;
      return r;
    }
    List<SourceRecord> results=new ArrayList<>();
    int record=0;
    while (record < recordsPerBatch && !records.isEmpty()) {
      record++;
      final SourceRecord fetchedRecord=records.poll();
      final Integer id=((Struct)(fetchedRecord.key())).getInt32(id);
      results.add(fetchedRecord);
      if (id == errorOnRecord) {
        retryRecords=results;
        throw new RetriableException(Error on record  + errorOnRecord);
      }
    }
    return results;
  }
  return null;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\main\java\io\debezium\connector\simple\SimpleSourceConnector.java",179
2179,"'-tryline","@Override public void markProcessed(R record) throws InterruptedException {
  committer.markProcessed(fromFormat.apply(record));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\main\java\io\debezium\embedded\ConvertingEngineBuilder.java",87
2180,"'-tryline","@Override public void markBatchFinished() throws InterruptedException {
  committer.markBatchFinished();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\main\java\io\debezium\embedded\ConvertingEngineBuilder.java",92
2181,"'-tryline","@Override public void markProcessed(R record,DebeziumEngine.Offsets sourceOffsets) throws InterruptedException {
  committer.markProcessed(fromFormat.apply(record),sourceOffsets);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\main\java\io\debezium\embedded\ConvertingEngineBuilder.java",97
2182,"'-tryline","/** 
 * Causes the current thread to wait until the  {@link #handle(boolean,String,Throwable) completion occurs}or until the thread is  {@linkplain Thread#interrupt interrupted}. <p> This method returns immediately if the connector has completed already.
 * @throws InterruptedException if the current thread is interrupted while waiting
 */
public void await() throws InterruptedException {
  this.completed.await();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\main\java\io\debezium\embedded\EmbeddedEngine.java",361
2183,"'-tryline","/** 
 * Causes the current thread to wait until the  {@link #handle(boolean,String,Throwable) completion occurs}, unless the thread is  {@linkplain Thread#interrupt interrupted}, or the specified waiting time elapses. <p> This method returns immediately if the connector has completed already.
 * @param timeout the maximum time to wait
 * @param unit the time unit of the {@code timeout} argument
 * @return {@code true} if the completion was received, or {@code false} if the waiting time elapsed before the completionwas received.
 * @throws InterruptedException if the current thread is interrupted while waiting
 */
public boolean await(long timeout,TimeUnit unit) throws InterruptedException {
  return this.completed.await(timeout,unit);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\main\java\io\debezium\embedded\EmbeddedEngine.java",373
2184,"'-tryline","/** 
 * the default implementation that is compatible with the old Consumer api. On every record, it calls the consumer, and then only marks the record as processed when accept returns, additionally, it handles StopConnectorExceptions and ensures that we all ways try and mark a batch as finished, even with exceptions
 * @param records the records to be processed
 * @param committer the committer that indicates to the system that we are finished
 * @throws Exception
 */
@Override public void handleBatch(List<SourceRecord> records,DebeziumEngine.RecordCommitter<SourceRecord> committer) throws InterruptedException {
  for (  SourceRecord record : records) {
    try {
      consumer.accept(record);
      committer.markProcessed(record);
    }
 catch (    StopConnectorException|StopEngineException ex) {
      committer.markProcessed(record);
      throw ex;
    }
  }
  committer.markBatchFinished();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\main\java\io\debezium\embedded\EmbeddedEngine.java",458
2185,"'-tryline","@Override public synchronized void markProcessed(SourceRecord record) throws InterruptedException {
  task.commitRecord(record);
  recordsSinceLastCommit+=1;
  offsetWriter.offset(record.sourcePartition(),record.sourceOffset());
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\main\java\io\debezium\embedded\EmbeddedEngine.java",907
2186,"'-tryline","@Override public synchronized void markBatchFinished() throws InterruptedException {
  maybeFlush(offsetWriter,offsetCommitPolicy,commitTimeout,task);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\main\java\io\debezium\embedded\EmbeddedEngine.java",914
2187,"'-tryline","@Override public synchronized void markProcessed(SourceRecord record,DebeziumEngine.Offsets sourceOffsets) throws InterruptedException {
  SourceRecordOffsets offsets=(SourceRecordOffsets)sourceOffsets;
  SourceRecord recordWithUpdatedOffsets=new SourceRecord(record.sourcePartition(),offsets.getOffsets(),record.topic(),record.kafkaPartition(),record.keySchema(),record.key(),record.valueSchema(),record.value(),record.timestamp(),record.headers());
  markProcessed(recordWithUpdatedOffsets);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\main\java\io\debezium\embedded\EmbeddedEngine.java",919
2188,"'-tryline","/** 
 * Determine if we should flush offsets to storage, and if so then attempt to flush offsets.
 * @param offsetWriter the offset storage writer; may not be null
 * @param policy the offset commit policy; may not be null
 * @param commitTimeout the timeout to wait for commit results
 * @param task the task which produced the records for which the offsets have been committed
 */
protected void maybeFlush(OffsetStorageWriter offsetWriter,OffsetCommitPolicy policy,Duration commitTimeout,SourceTask task) throws InterruptedException {
  long timeSinceLastCommitMillis=clock.currentTimeInMillis() - timeOfLastCommitMillis;
  if (policy.performCommit(recordsSinceLastCommit,Duration.ofMillis(timeSinceLastCommitMillis))) {
    commitOffsets(offsetWriter,commitTimeout,task);
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\main\java\io\debezium\embedded\EmbeddedEngine.java",963
2189,"'-tryline","/** 
 * Flush offsets to storage.
 * @param offsetWriter the offset storage writer; may not be null
 * @param commitTimeout the timeout to wait for commit results
 * @param task the task which produced the records for which the offsets have been committed
 */
protected void commitOffsets(OffsetStorageWriter offsetWriter,Duration commitTimeout,SourceTask task) throws InterruptedException {
  long started=clock.currentTimeInMillis();
  long timeout=started + commitTimeout.toMillis();
  if (!offsetWriter.beginFlush()) {
    return;
  }
  Future<Void> flush=offsetWriter.doFlush(this::completedFlush);
  if (flush == null) {
    return;
  }
  try {
    flush.get(Math.max(timeout - clock.currentTimeInMillis(),0),TimeUnit.MILLISECONDS);
    task.commit();
    recordsSinceLastCommit=0;
    timeOfLastCommitMillis=clock.currentTimeInMillis();
  }
 catch (  InterruptedException e) {
    LOGGER.warn(Flush of {} offsets interrupted, cancelling,this);
    offsetWriter.cancelFlush();
    if (this.runningThread.get() == Thread.currentThread()) {
      Thread.currentThread().interrupt();
      throw e;
    }
  }
catch (  ExecutionException e) {
    LOGGER.error(Flush of {} offsets threw an unexpected exception: ,this,e);
    offsetWriter.cancelFlush();
  }
catch (  TimeoutException e) {
    LOGGER.error(Timed out waiting to flush {} offsets to storage,this);
    offsetWriter.cancelFlush();
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\main\java\io\debezium\embedded\EmbeddedEngine.java",981
2190,"'-tryline","/** 
 * Wait for the connector to complete processing. If the processor is not running, this method returns immediately; however, if the processor is  {@link #stop() stopped} and restarted before this method is called, this method will return onlywhen it completes the second time.
 * @param timeout the maximum amount of time to wait before returning
 * @param unit the unit of time; may not be null
 * @return {@code true} if the connector completed within the timeout (or was not running), or {@code false} if it is stillrunning when the timeout occurred
 * @throws InterruptedException if this thread is interrupted while waiting for the completion of the connector
 */
public boolean await(long timeout,TimeUnit unit) throws InterruptedException {
  return latch.await(timeout,unit);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\main\java\io\debezium\embedded\EmbeddedEngine.java",1073
2191,"'-tryline","/** 
 * Consume a single record from the connector.
 * @return the next record that was returned from the connector, or null if no such record has been produced by the connector
 * @throws InterruptedException if the thread was interrupted while waiting for a record to be returned
 */
protected SourceRecord consumeRecord() throws InterruptedException {
  return consumedLines.poll(pollTimeoutInMs,TimeUnit.MILLISECONDS);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\AbstractConnectorTest.java",385
2192,"'-tryline","/** 
 * Try to consume the specified number of records from the connector, and return the actual number of records that were consumed. Use this method when your test does not care what the records might contain.
 * @param numberOfRecords the number of records that should be consumed
 * @return the actual number of records that were consumed
 * @throws InterruptedException if the thread was interrupted while waiting for a record to be returned
 */
protected int consumeRecords(int numberOfRecords) throws InterruptedException {
  return consumeRecords(numberOfRecords,null);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\AbstractConnectorTest.java",395
2193,"'-tryline","/** 
 * Try to consume the specified number of records from the connector, calling the given function for each, and return the actual number of records that were consumed. For slower connectors it is possible to receive no records form the connector multiple times in a row till the waiting is terminated.
 * @param numberOfRecords the number of records that should be consumed
 * @param breakAfterNulls the number of allowed runs when no records are received
 * @param recordConsumer the function that should be called with each consumed record
 * @param assertRecords true if records serialization should be verified
 * @return the actual number of records that were consumed
 * @throws InterruptedException if the thread was interrupted while waiting for a record to be returned
 */
protected int consumeRecords(int numberOfRecords,int breakAfterNulls,Consumer<SourceRecord> recordConsumer,boolean assertRecords) throws InterruptedException {
  int recordsConsumed=0;
  int nullReturn=0;
  while (recordsConsumed < numberOfRecords) {
    SourceRecord record=consumedLines.poll(pollTimeoutInMs,TimeUnit.MILLISECONDS);
    if (record != null) {
      nullReturn=0;
      ++recordsConsumed;
      if (recordConsumer != null) {
        recordConsumer.accept(record);
      }
      if (Testing.Debug.isEnabled()) {
        Testing.debug(Consumed record  + recordsConsumed +  / + numberOfRecords+  (+ (numberOfRecords - recordsConsumed)+  more));
        debug(record);
      }
 else       if (Testing.Print.isEnabled()) {
        Testing.print(Consumed record  + recordsConsumed +  / + numberOfRecords+  (+ (numberOfRecords - recordsConsumed)+  more));
        print(record);
      }
      if (assertRecords) {
        VerifyRecord.isValid(record,skipAvroValidation);
      }
    }
 else {
      if (++nullReturn >= breakAfterNulls) {
        return recordsConsumed;
      }
    }
  }
  return recordsConsumed;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\AbstractConnectorTest.java",407
2194,"'-tryline","/** 
 * Try to consume the specified number of records from the connector, calling the given function for each, and return the actual number of records that were consumed. For slower connectors it is possible to receive no records form the connector at most 3 times in a row till the waiting is terminated.
 * @param numberOfRecords the number of records that should be consumed
 * @param recordConsumer the function that should be called with each consumed record
 * @return the actual number of records that were consumed
 * @throws InterruptedException if the thread was interrupted while waiting for a record to be returned
 */
protected int consumeRecords(int numberOfRecords,Consumer<SourceRecord> recordConsumer) throws InterruptedException {
  return consumeRecords(numberOfRecords,3,recordConsumer,true);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\AbstractConnectorTest.java",454
2195,"'-tryline","/** 
 * Try to consume and capture exactly the specified number of records from the connector.
 * @param numRecords the number of records that should be consumed
 * @param breakAfterNulls how many times to wait when no records arrive from the connector
 * @return the collector into which the records were captured; never null
 * @throws InterruptedException if the thread was interrupted while waiting for a record to be returned
 */
protected SourceRecords consumeRecordsByTopic(int numRecords,int breakAfterNulls) throws InterruptedException {
  SourceRecords records=new SourceRecords();
  consumeRecords(numRecords,breakAfterNulls,records::add,true);
  return records;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\AbstractConnectorTest.java",469
2196,"'-tryline","/** 
 * Try to consume and capture exactly the specified number of records from the connector.
 * @param numRecords the number of records that should be consumed
 * @return the collector into which the records were captured; never null
 * @throws InterruptedException if the thread was interrupted while waiting for a record to be returned
 */
protected SourceRecords consumeRecordsByTopic(int numRecords) throws InterruptedException {
  SourceRecords records=new SourceRecords();
  consumeRecords(numRecords,records::add);
  return records;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\AbstractConnectorTest.java",483
2197,"'-tryline","/** 
 * Try to consume and capture exactly the specified number of records from the connector.
 * @param numRecords the number of records that should be consumed
 * @return the collector into which the records were captured; never null
 * @throws InterruptedException if the thread was interrupted while waiting for a record to be returned
 */
protected SourceRecords consumeRecordsByTopic(int numRecords,boolean assertRecords) throws InterruptedException {
  SourceRecords records=new SourceRecords();
  consumeRecords(numRecords,3,records::add,assertRecords);
  return records;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\AbstractConnectorTest.java",496
2198,"'-tryline","/** 
 * Try to consume and capture exactly the specified number of Dml records from the connector. While transaction metadata topic records are captured by this method, the  {@code numDmlRecords} should notinclude the expected number of records emitted to the transaction topic.
 * @param numDmlRecords the number of Dml records that should be consumed
 * @return the collector to which the records were captured; never null
 * @throws InterruptedException if the thread was interrupted while waiting for a record to be returned
 */
protected SourceRecords consumeDmlRecordsByTopic(int numDmlRecords) throws InterruptedException {
  SourceRecords records=new SourceRecords();
  consumeDmlRecordsByTopic(numDmlRecords,records::add);
  return records;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\AbstractConnectorTest.java",509
2199,"'-tryline","/** 
 * Try to consume the specified number of records from the connector, calling the given function for each, and return the actual number of Dml records that were consumed. For slower connectors it is possible to receive no records form the connector at most 3 times in a row till the waiting is terminated.
 * @param numberDmlRecords the number of Dml records that should be consumed
 * @param recordConsumer the function that should be called for each consumed record
 * @return the actual number of Dml records that were consumed
 * @throws InterruptedException if the thread was interrupted while waiting for a record to be returned
 */
protected int consumeDmlRecordsByTopic(int numberDmlRecords,Consumer<SourceRecord> recordConsumer) throws InterruptedException {
  return consumeDmlRecordsByTopic(numberDmlRecords,3,recordConsumer,true);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\AbstractConnectorTest.java",525
2200,"'-tryline","/** 
 * Try to consume the specified number of records from the connector, calling the given function for each, and return the actual number of Dml records that were consumed. For slower connectors it is possible to receive no records from the connector at most 3 times in a row until the waiting is terminated.  Additionally, while this method will consume and append transaction metadata topic records to the consumer, the returned value only considers Dml records.
 * @param numberOfRecords the number of Dml records that should be consumed
 * @param breakAfterNulls the number of allowed run when no records are consumed
 * @param recordConsumer the function that should be called for each consumed record
 * @param assertRecords true if records serialization should be verified
 * @return the actual number of Dml records that were consumed
 * @throws InterruptedException if the thread was interrupted while waiting for a record to be returned
 */
protected int consumeDmlRecordsByTopic(int numberOfRecords,int breakAfterNulls,Consumer<SourceRecord> recordConsumer,boolean assertRecords) throws InterruptedException {
  int recordsConsumed=0;
  int nullReturn=0;
  Set<String> endTransactions=new LinkedHashSet<>();
  while (recordsConsumed < numberOfRecords) {
    SourceRecord record=consumedLines.poll(pollTimeoutInMs,TimeUnit.MILLISECONDS);
    if (record != null) {
      nullReturn=0;
      final Struct value=(Struct)record.value();
      if (isTransactionRecord(record)) {
        final String status=value.getString(TransactionMonitor.DEBEZIUM_TRANSACTION_STATUS_KEY);
        if (status.equals(TransactionStatus.BEGIN.name())) {
          endTransactions.add(value.getString(TransactionMonitor.DEBEZIUM_TRANSACTION_ID_KEY));
        }
 else {
          endTransactions.remove(value.getString(TransactionMonitor.DEBEZIUM_TRANSACTION_ID_KEY));
        }
      }
 else {
        final String txId=value.getStruct(source).getInt64(txId).toString();
        assertThat(endTransactions.contains(txId)).as(DML record txId  + txId +  not in open transaction set).isTrue();
        ++recordsConsumed;
      }
      if (recordConsumer != null) {
        recordConsumer.accept(record);
      }
      if (Testing.Debug.isEnabled()) {
        Testing.debug(Consumed record  + recordsConsumed +  / + numberOfRecords+  (+ (numberOfRecords - recordsConsumed)+  more), + endTransactions.size()+  active transactions);
        debug(record);
      }
 else       if (Testing.Print.isEnabled()) {
        Testing.print(Consumed record  + recordsConsumed +  / + numberOfRecords+  (+ (numberOfRecords - recordsConsumed)+  more), + endTransactions.size()+  active transactions);
        print(record);
      }
      if (assertRecords) {
        VerifyRecord.isValid(record);
      }
    }
 else {
      if (++nullReturn >= breakAfterNulls) {
        return recordsConsumed;
      }
    }
  }
  while (!endTransactions.isEmpty()) {
    SourceRecord record=consumedLines.poll(pollTimeoutInMs,TimeUnit.MILLISECONDS);
    if (record != null) {
      nullReturn=0;
      final Struct value=(Struct)record.value();
      if (isTransactionRecord(record)) {
        final String status=value.getString(TransactionMonitor.DEBEZIUM_TRANSACTION_STATUS_KEY);
        if (status.equals(TransactionStatus.END.name())) {
          endTransactions.remove(value.getString(TransactionMonitor.DEBEZIUM_TRANSACTION_ID_KEY));
        }
 else {
          endTransactions.add(value.getString(TransactionMonitor.DEBEZIUM_TRANSACTION_ID_KEY));
        }
      }
 else {
        final String txId=value.getStruct(source).getInt64(txId).toString();
        assertThat(endTransactions.contains(txId)).as(DML record txId  + txId +  not in open transaction set).isTrue();
        ++recordsConsumed;
      }
      if (recordConsumer != null) {
        recordConsumer.accept(record);
      }
      if (Testing.Debug.isEnabled()) {
        Testing.debug(Consumed record  + recordsConsumed +  / + numberOfRecords+  (+ (numberOfRecords - recordsConsumed)+  more), + endTransactions.size()+  active transactions);
        debug(record);
      }
 else       if (Testing.Print.isEnabled()) {
        Testing.print(Consumed record  + recordsConsumed +  / + numberOfRecords+  (+ (numberOfRecords - recordsConsumed)+  more), + endTransactions.size()+  active transactions);
        print(record);
      }
      if (assertRecords) {
        VerifyRecord.isValid(record);
      }
    }
 else {
      if (++nullReturn >= breakAfterNulls) {
        return recordsConsumed;
      }
    }
  }
  return recordsConsumed;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\AbstractConnectorTest.java",540
2201,"'-tryline","public static void waitForSnapshotToBeCompleted(String connector,String server) throws InterruptedException {
  final MBeanServer mbeanServer=ManagementFactory.getPlatformMBeanServer();
  Awaitility.await().alias(Streaming was not started on time).pollInterval(100,TimeUnit.MILLISECONDS).atMost(waitTimeForRecords() * 30,TimeUnit.SECONDS).ignoreException(InstanceNotFoundException.class).until(() -> (boolean)mbeanServer.getAttribute(getSnapshotMetricsObjectName(connector,server),SnapshotCompleted));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\AbstractConnectorTest.java",1042
2202,"'-tryline","public static void waitForStreamingRunning(String connector,String server) throws InterruptedException {
  waitForStreamingRunning(connector,server,getStreamingNamespace());
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\AbstractConnectorTest.java",1054
2203,"'-tryline","protected void consumeLines(int numberOfLines) throws InterruptedException {
  consumeRecords(numberOfLines,3,record -> {
    String line=record.value().toString();
    assertThat(line).isEqualTo(generateLine(nextConsumedLineNumber));
    ++nextConsumedLineNumber;
  }
,false);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\EmbeddedEngineTest.java",577
2204,"'-tryline","@Override public List<SourceRecord> poll() throws InterruptedException {
  throw new InterruptedException();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\EmbeddedEngineTest.java",597
2205,"'-tryline","@Override public Void get() throws InterruptedException {
  throw new InterruptedException();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\EmbeddedEngineTest.java",635
2206,"'-tryline","@Override public Void get(long timeout,TimeUnit unit) throws InterruptedException {
  throw new InterruptedException();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-embedded\src\test\java\io\debezium\embedded\EmbeddedEngineTest.java",640
2207,"'-tryline","@Override public void handleBatch(List<ChangeEvent<Object,Object>> records,RecordCommitter<ChangeEvent<Object,Object>> committer) throws InterruptedException {
  records.forEach(record -> {
    Testing.print(record);
    values.add(record.value());
    try {
      committer.markProcessed(record);
    }
 catch (    InterruptedException e) {
      throw new DebeziumException(e);
    }
  }
);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-server\debezium-server-core\src\test\java\io\debezium\server\TestConsumer.java",39
2208,"'-tryline","@Override public void handleBatch(List<ChangeEvent<Object,Object>> records,RecordCommitter<ChangeEvent<Object,Object>> committer) throws InterruptedException {
  LOGGER.trace(Event Hubs sink adapter processing change events);
  CreateBatchOptions op=new CreateBatchOptions().setPartitionId(partitionID);
  if (partitionKey != ) {
    op.setPartitionKey(partitionKey);
  }
  if (maxBatchSize.intValue() != 0) {
    op.setMaximumSizeInBytes(maxBatchSize);
  }
  EventDataBatch batch=producer.createBatch(op);
  for (  ChangeEvent<Object,Object> record : records) {
    LOGGER.trace(Received record '{}',record.value());
    if (null == record.value()) {
      continue;
    }
    EventData eventData=null;
    if (record.value() instanceof String) {
      eventData=new EventData((String)record.value());
    }
 else     if (record.value() instanceof byte[]) {
      eventData=new EventData(getBytes(record.value()));
    }
    try {
      if (!batch.tryAdd(eventData)) {
        throw new DebeziumException(Event data was too large to fit in the batch);
      }
    }
 catch (    IllegalArgumentException e) {
      throw new DebeziumException(e);
    }
catch (    AmqpException e) {
      throw new DebeziumException(Event data was larger than the maximum size of the batch,e);
    }
catch (    Exception e) {
      throw new DebeziumException(e);
    }
  }
  try {
    producer.send(batch);
    LOGGER.trace(Sent record batch to Event Hubs);
  }
 catch (  Exception e) {
    throw new DebeziumException(e);
  }
  for (  ChangeEvent<Object,Object> record : records) {
    try {
      committer.markProcessed(record);
      LOGGER.trace(Record marked processed);
    }
 catch (    Exception e) {
      throw new DebeziumException(e);
    }
  }
  committer.markBatchFinished();
  LOGGER.trace(Batch marked finished);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-server\debezium-server-eventhubs\src\main\java\io\debezium\server\eventhubs\EventHubsChangeConsumer.java",114
2209,"'-tryline","@Override public void handleBatch(List<ChangeEvent<Object,Object>> records,RecordCommitter<ChangeEvent<Object,Object>> committer) throws InterruptedException {
  for (  ChangeEvent<Object,Object> record : records) {
    LOGGER.trace(Received event '{}',record);
    final PutRecordRequest putRecord=PutRecordRequest.builder().partitionKey((record.key() != null) ? getString(record.key()) : nullKey).streamName(streamNameMapper.map(record.destination())).data(SdkBytes.fromByteArray(getBytes(record.value()))).build();
    client.putRecord(putRecord);
    committer.markProcessed(record);
  }
  committer.markBatchFinished();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-server\debezium-server-kinesis\src\main\java\io\debezium\server\kinesis\KinesisChangeConsumer.java",98
2210,"'-tryline","@Override public void handleBatch(List<ChangeEvent<Object,Object>> records,RecordCommitter<ChangeEvent<Object,Object>> committer) throws InterruptedException {
  final List<ApiFuture<String>> deliveries=new ArrayList<>();
  for (  ChangeEvent<Object,Object> record : records) {
    LOGGER.trace(Received event '{}',record);
    final String topicName=streamNameMapper.map(record.destination());
    Publisher publisher=publishers.computeIfAbsent(topicName,(x) -> publisherBuilder.get(ProjectTopicName.of(projectId,x)));
    final PubsubMessage.Builder pubsubMessage=PubsubMessage.newBuilder();
    if (orderingEnabled) {
      if (record.key() == null) {
        pubsubMessage.setOrderingKey(nullKey);
      }
 else       if (record.key() instanceof String) {
        pubsubMessage.setOrderingKey((String)record.key());
      }
 else       if (record.key() instanceof byte[]) {
        pubsubMessage.setOrderingKeyBytes(ByteString.copyFrom((byte[])record.key()));
      }
    }
    if (record.value() instanceof String) {
      pubsubMessage.setData(ByteString.copyFromUtf8((String)record.value()));
    }
 else     if (record.value() instanceof byte[]) {
      pubsubMessage.setData(ByteString.copyFrom((byte[])record.value()));
    }
    deliveries.add(publisher.publish(pubsubMessage.build()));
    committer.markProcessed(record);
  }
  List<String> messageIds;
  try {
    messageIds=ApiFutures.allAsList(deliveries).get();
  }
 catch (  ExecutionException e) {
    throw new DebeziumException(e);
  }
  LOGGER.trace(Sent messages with ids: {},messageIds);
  committer.markBatchFinished();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-server\debezium-server-pubsub\src\main\java\io\debezium\server\pubsub\PubSubChangeConsumer.java",113
2211,"'-tryline","@SuppressWarnings(unchecked) @Override public void handleBatch(List<ChangeEvent<Object,Object>> records,RecordCommitter<ChangeEvent<Object,Object>> committer) throws InterruptedException {
  for (  ChangeEvent<Object,Object> record : records) {
    LOGGER.trace(Received event '{}',record);
    final String topicName=streamNameMapper.map(record.destination());
    final Producer<?> producer=producers.computeIfAbsent(topicName,(topic) -> createProducer(topic,record.value()));
    final String key=getString(record.key());
    @SuppressWarnings(rawtypes) final TypedMessageBuilder message;
    if (record.value() instanceof String) {
      message=producer.newMessage(Schema.STRING);
    }
 else {
      message=producer.newMessage();
    }
    message.key(key == null ? nullKey : key).value(record.value());
    try {
      final MessageId messageId=message.send();
      LOGGER.trace(Sent message with id: {},messageId);
    }
 catch (    PulsarClientException e) {
      throw new DebeziumException(e);
    }
    committer.markProcessed(record);
  }
  committer.markBatchFinished();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-server\debezium-server-pulsar\src\main\java\io\debezium\server\pulsar\PulsarChangeConsumer.java",114
2212,"'-tryline","public void reload() throws InterruptedException {
  LOGGER.info(Recreating all pods of ' + name + ' deployment in namespace '+ project+ ');
  ocp.pods().inNamespace(project).withLabel(deployment,name).delete();
  deployment=ocp.apps().deployments().inNamespace(project).withName(name).waitUntilCondition(WaitConditions::deploymentAvailableCondition,scaled(5),TimeUnit.MINUTES);
  LOGGER.info(Deployment ' + name + ' is available);
  initialize();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\databases\DatabaseController.java",76
2213,"'-tryline","public abstract void initialize() throws InterruptedException ;
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\databases\DatabaseController.java",87
2214,"'-tryline","public void initialize() throws InterruptedException {
  Pod pod=ocp.pods().inNamespace(project).withLabel(deployment,name).list().getItems().get(0);
  String svcName=deployment.getMetadata().getName();
  CountDownLatch latch=new CountDownLatch(1);
  try (ExecWatch exec=ocp.pods().inNamespace(project).withName(pod.getMetadata().getName()).inContainer(mongo).writingOutput(System.out).writingError(System.err).usingListener(new DatabaseInitListener(mongo,latch)).exec(bash,-c,DB_INIT_SCRIPT_PATH_CONTAINER +  -h  + svcName+ .+ project+ .svc.cluster.local)){
    LOGGER.info(Waiting until database is initialized);
    latch.await(scaled(1),TimeUnit.MINUTES);
  }
 }
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\databases\mongodb\MongoController.java",43
2215,"'-tryline","@Override public void initialize() throws InterruptedException {
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\databases\SqlDatabaseController.java",32
2216,"'-tryline","public void initialize() throws InterruptedException {
  Pod pod=ocp.pods().inNamespace(project).withLabel(deployment,name).list().getItems().get(0);
  ocp.pods().inNamespace(project).withName(pod.getMetadata().getName()).file(DB_INIT_SCRIPT_PATH_CONTAINER).upload(initScript);
  CountDownLatch latch=new CountDownLatch(1);
  try (ExecWatch exec=ocp.pods().inNamespace(project).withName(pod.getMetadata().getName()).inContainer(sqlserver).writingOutput(System.out).writingError(System.err).usingListener(new DatabaseInitListener(sqlserver,latch)).exec(/opt/mssql-tools/bin/sqlcmd,-U,sa,-P,Debezium1$,-i,/opt/inventory.sql)){
    LOGGER.info(Waiting until database is initialized);
    latch.await(WaitConditions.scaled(1),TimeUnit.MINUTES);
  }
 }
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\databases\sqlserver\SqlServerController.java",54
2217,"'-tryline","/** 
 * Wait until KafkaConnect instance is back and ready
 * @return {@link KafkaConnect} resource instance
 * @throws InterruptedException
 */
public KafkaConnect waitForConnectCluster() throws InterruptedException {
  kafkaConnect=Crds.kafkaConnectOperation(ocp).inNamespace(project).withName(name).waitUntilCondition(WaitConditions::kafkaReadyCondition,5,MINUTES);
  return kafkaConnect;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\kafka\KafkaConnectController.java",109
2218,"'-tryline","/** 
 * Deploys Kafka connector with given name and configuration via REST
 * @param name connector name
 * @param config connector config
 * @throws IOException or request error
 */
public void deployConnector(String name,ConnectorConfigBuilder config) throws IOException, InterruptedException {
  LOGGER.info(Deploying connector  + name);
  if (useConnectorResources) {
    deployConnectorCr(name,config);
  }
 else {
    deployConnectorJson(name,config);
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\kafka\KafkaConnectController.java",175
2219,"'-tryline","private void deployConnectorCr(String name,ConnectorConfigBuilder config) throws InterruptedException {
  LOGGER.info(Deploying connector CR);
  KafkaConnector connector=config.getCustomResource();
  connector.getMetadata().setName(name);
  connector.getMetadata().getLabels().put(strimzi.io/cluster,kafkaConnect.getMetadata().getName());
  kafkaConnectorOperation().createOrReplace(connector);
  waitForKafkaConnector(connector.getMetadata().getName());
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\kafka\KafkaConnectController.java",211
2220,"'-tryline","/** 
 * Waits until connector is properly deployed. Note: works only for CR deployment
 * @param name name of the connector
 * @throws InterruptedException on wait error
 * @throws IllegalArgumentException when deployment doesn't use custom resources
 */
public KafkaConnector waitForKafkaConnector(String name) throws InterruptedException {
  if (!useConnectorResources) {
    throw new IllegalStateException(Unable to wait for connector, deployment doesn't use custom resources.);
  }
  return kafkaConnectorOperation().withName(name).waitUntilCondition(WaitConditions::kafkaReadyCondition,5,MINUTES);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\kafka\KafkaConnectController.java",221
2221,"'-tryline","public KafkaTopic deployTopic(String yamlPath) throws InterruptedException {
  LOGGER.info(Deploying Kafka topic from  + yamlPath);
  KafkaTopic topic=topicOperation().createOrReplace(YAML.fromResource(yamlPath,KafkaTopic.class));
  return waitForKafkaTopic(topic.getMetadata().getName());
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\kafka\KafkaController.java",64
2222,"'-tryline","/** 
 * Waits until topic is properly deployed.
 * @param name name of the topic
 * @throws InterruptedException on wait error
 * @throws IllegalArgumentException when deployment doesn't use custom resources
 */
public KafkaTopic waitForKafkaTopic(String name) throws InterruptedException {
  return topicOperation().withName(name).waitUntilCondition(WaitConditions::kafkaReadyCondition,5,MINUTES);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\kafka\KafkaController.java",78
2223,"'-tryline","/** 
 * Deploys Kafka Cluster
 * @param yamlPath path to CR descriptor (must be available on class path)
 * @return {@link KafkaController} instance for deployed cluster
 * @throws InterruptedException
 */
public KafkaController deployKafkaCluster(String yamlPath) throws InterruptedException {
  LOGGER.info(Deploying Kafka from  + yamlPath);
  Kafka kafka=kafkaOperation().createOrReplace(YAML.fromResource(yamlPath,Kafka.class));
  kafka=waitForKafkaCluster(kafka.getMetadata().getName());
  return new KafkaController(kafka,ocp,http);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\kafka\KafkaDeployer.java",66
2224,"'-tryline","/** 
 * Deploys Kafka Connect Cluster
 * @param yamlPath path to CR descriptor (must be available on class path)
 * @param useConnectorResources true if connector deployment should be managed by operator
 * @return {@link KafkaController} instance for deployed cluster
 */
public KafkaConnectController deployKafkaConnectCluster(String yamlPath,String loggingYamlPath,boolean useConnectorResources) throws InterruptedException {
  LOGGER.info(Deploying KafkaConnect from  + yamlPath);
  ocp.configMaps().inNamespace(project).createOrReplace(YAML.fromResource(loggingYamlPath,ConfigMap.class));
  KafkaConnect kafkaConnect=YAML.fromResource(yamlPath,KafkaConnect.class);
  if (useConnectorResources) {
    kafkaConnect=new KafkaConnectBuilder(kafkaConnect).editMetadata().addToAnnotations(strimzi.io/use-connector-resources,true).endMetadata().build();
  }
  kafkaConnectOperation().createOrReplace(kafkaConnect);
  kafkaConnect=waitForConnectCluster(kafkaConnect.getMetadata().getName());
  return new KafkaConnectController(kafkaConnect,ocp,http,useConnectorResources);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\kafka\KafkaDeployer.java",80
2225,"'-tryline","public Kafka waitForKafkaCluster(String name) throws InterruptedException {
  return kafkaOperation().withName(name).waitUntilCondition(WaitConditions::kafkaReadyCondition,scaled(5),MINUTES);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\kafka\KafkaDeployer.java",105
2226,"'-tryline","public KafkaConnect waitForConnectCluster(String name) throws InterruptedException {
  return kafkaConnectOperation().withName(name).waitUntilCondition(WaitConditions::kafkaReadyCondition,scaled(5),MINUTES);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\kafka\KafkaDeployer.java",109
2227,"'-tryline","/** 
 * Enables Strimzi cluster operator by scaling it to ONE
 * @throws InterruptedException
 */
public void enable() throws InterruptedException {
  LOGGER.info(Enabling Operator);
  setNumberOfReplicas(1);
  updateOperator();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\kafka\OperatorController.java",62
2228,"'-tryline","/** 
 * Updates Operator's  {@link Deployment} resource
 * @return {@link Deployment} resource of the operator
 */
public Deployment updateOperator() throws InterruptedException {
  operator=ocp.apps().deployments().inNamespace(project).createOrReplace(operator);
  operator=waitForAvailable();
  return operator;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\kafka\OperatorController.java",139
2229,"'-tryline","private Deployment waitForAvailable() throws InterruptedException {
  return ocp.apps().deployments().inNamespace(project).withName(name).waitUntilCondition(WaitConditions::deploymentAvailableCondition,scaled(5),MINUTES);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\kafka\OperatorController.java",149
2230,"'-tryline","/** 
 * Enables Strimzi cluster operator by scaling it to ONE
 * @throws InterruptedException
 */
public void enable() throws InterruptedException {
  LOGGER.info(Enabling Operator);
  setNumberOfReplicas(1);
  updateOperator();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\OperatorController.java",63
2231,"'-tryline","/** 
 * Updates Operator's  {@link Deployment} resource
 * @return {@link Deployment} resource of the operator
 */
public Deployment updateOperator() throws InterruptedException {
  operator=ocp.apps().deployments().inNamespace(project).createOrReplace(operator);
  operator=waitForAvailable();
  return operator;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\OperatorController.java",118
2232,"'-tryline","private Deployment waitForAvailable() throws InterruptedException {
  return ocp.apps().deployments().inNamespace(project).withName(name).waitUntilCondition(WaitConditions::deploymentAvailableCondition,scaled(5),MINUTES);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\OperatorController.java",128
2233,"'-tryline","/** 
 * Deploys Kafka Cluster
 * @param yamlPath path to CR descriptor (must be available on class path)
 * @return {@link RegistryController} instance for deployed registry
 * @throws InterruptedException
 */
public RegistryController deployRegistry(String yamlPath,String storageTopicYamlPath,String idTopicYamlPath) throws InterruptedException {
  LOGGER.info(Deploying Apicurio Registry from  + yamlPath);
  kafkaController.deployTopic(storageTopicYamlPath);
  kafkaController.deployTopic(idTopicYamlPath);
  ApicurioRegistry registry=YAML.fromResource(yamlPath,ApicurioRegistry.class);
  registry=registryOperation().createOrReplace(registry);
  registry=waitForRegistry(registry.getMetadata().getName());
  return new RegistryController(registry,ocp,http);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\registry\RegistryDeployer.java",67
2234,"'-tryline","public ApicurioRegistry waitForRegistry(String name) throws InterruptedException {
  LOGGER.info(Waiting for deployments of registry ' + name + ');
  await().atMost(scaled(1),MINUTES).pollInterval(5,SECONDS).until(() -> !getRegistryDeployments(name).isEmpty());
  DeploymentConfig dc=getRegistryDeployments(name).get(0);
  ocp.deploymentConfigs().inNamespace(project).withName(dc.getMetadata().getName()).waitUntilCondition(WaitConditions::deploymentAvailableCondition,scaled(5),MINUTES);
  return registryOperation().withName(name).get();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\main\java\io\debezium\testing\openshift\tools\registry\RegistryDeployer.java",92
2235,"'-tryline","@BeforeAll public static void setup() throws InterruptedException {
  Config cfg=new ConfigBuilder().withMasterUrl(ConfigProperties.OCP_URL).withUsername(ConfigProperties.OCP_USERNAME).withPassword(ConfigProperties.OCP_PASSWORD).withTrustCerts(true).build();
  ocp=new DefaultOpenShiftClient(cfg);
  testUtils=new TestUtils();
  deployKafkaCluster();
  initKafkaConsumerProps();
  if (ConfigProperties.DEPLOY_SERVICE_REGISTRY) {
    registryDeployer=new RegistryDeployer(ConfigProperties.OCP_PROJECT_REGISTRY,ocp,httpClient,kafkaController);
    registryController=registryDeployer.deployRegistry(REGISTRY_DEPLOYMENT_PATH,REGISTRY_STORAGE_TOPIC_PATH,REGISTRY_ID_TOPIC_PATH);
    assertions=new AvroKafkaAssertions(KAFKA_CONSUMER_PROPS);
  }
 else {
    assertions=new PlainKafkaAssertions(KAFKA_CONSUMER_PROPS);
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\ConnectorTestBase.java",69
2236,"'-tryline","private static void deployKafkaCluster() throws InterruptedException {
  kafkaDeployer=new KafkaDeployer(ConfigProperties.OCP_PROJECT_DBZ,ocp);
  operatorController=kafkaDeployer.getOperator();
  operatorController.setLogLevel(DEBUG);
  operatorController.setAlwaysPullPolicy();
  operatorController.setOperandAlwaysPullPolicy();
  operatorController.setSingleReplica();
  if (ConfigProperties.OCP_PULL_SECRET_PATHS.isPresent()) {
    String paths=ConfigProperties.OCP_PULL_SECRET_PATHS.get();
    LOGGER.info(Processing pull secrets:  + paths);
    List<String> secrets=Arrays.stream(paths.split(,)).map(kafkaDeployer::deployPullSecret).map(s -> s.getMetadata().getName()).collect(Collectors.toList());
    secrets.forEach(operatorController::setImagePullSecret);
    operatorController.setOperandImagePullSecrets(String.join(,,secrets));
  }
  operatorController.updateOperator();
  kafkaController=kafkaDeployer.deployKafkaCluster(KAFKA);
  kafkaConnectController=kafkaDeployer.deployKafkaConnectCluster(KAFKA_CONNECT_S2I,KAFKA_CONNECT_S2I_LOGGING,ConfigProperties.STRIMZI_OPERATOR_CONNECTORS);
  kafkaConnectController.allowServiceAccess();
  kafkaConnectController.exposeApi();
  kafkaConnectController.exposeMetrics();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\ConnectorTestBase.java",94
2237,"'-tryline","@BeforeAll public static void setupDatabase() throws IOException, InterruptedException, ClassNotFoundException {
  Class.forName(com.ibm.db2.jcc.DB2Driver);
  if (!ConfigProperties.DATABASE_DB2_HOST.isPresent()) {
    dbDeployer=new DB2Deployer(ocp).withProject(ConfigProperties.OCP_PROJECT_DB2).withDeployment(DB_DEPLOYMENT_PATH).withServices(DB_SERVICE_PATH_LB,DB_SERVICE_PATH);
    dbController=dbDeployer.deploy();
    dbController.initialize();
  }
  String id=testUtils.getUniqueId();
  connectorName=CONNECTOR_NAME + - + id;
  connectorConfig=connectorFactories.db2().put(database.server.name,connectorName);
  if (ConfigProperties.DEPLOY_SERVICE_REGISTRY) {
    connectorConfig.addApicurioAvroSupport(registryController.getRegistryApiAddress());
  }
  kafkaConnectController.deployConnector(connectorName,connectorConfig);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\db2\DB2ConnectorIT.java",58
2238,"'-tryline","@AfterAll public static void tearDownDatabase() throws IOException, InterruptedException {
  kafkaConnectController.undeployConnector(connectorName);
  dbController.reload();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\db2\DB2ConnectorIT.java",80
2239,"'-tryline","@Test @Order(6) public void shouldResumeStreamingAfterRedeployment() throws IOException, InterruptedException {
  kafkaConnectController.deployConnector(connectorName,connectorConfig);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .DB2INST1.CUSTOMERS,6));
  awaitAssert(() -> assertions.assertRecordsContain(connectorName + .DB2INST1.CUSTOMERS,jerry@test.com));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\db2\DB2ConnectorIT.java",139
2240,"'-tryline","@Test @Order(8) public void shouldResumeStreamingAfterCrash() throws InterruptedException {
  operatorController.enable();
  kafkaConnectController.waitForConnectCluster();
  awaitAssert(() -> assertions.assertMinimalRecordsCount(connectorName + .DB2INST1.CUSTOMERS,7));
  awaitAssert(() -> assertions.assertRecordsContain(connectorName + .DB2INST1.CUSTOMERS,nibbles@test.com));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\db2\DB2ConnectorIT.java",156
2241,"'-tryline","@BeforeAll public static void setupDatabase() throws IOException, InterruptedException {
  if (!ConfigProperties.DATABASE_MONGO_HOST.isPresent()) {
    dbDeployer=new MongoDeployer(ocp).withProject(ConfigProperties.OCP_PROJECT_MONGO).withDeployment(DB_DEPLOYMENT_PATH).withServices(DB_SERVICE_PATH_LB,DB_SERVICE_PATH);
    dbController=dbDeployer.deploy();
    dbController.initialize();
  }
  String id=testUtils.getUniqueId();
  connectorName=CONNECTOR_NAME + - + id;
  connectorConfig=connectorFactories.mongo().put(mongodb.name,connectorName);
  if (ConfigProperties.DEPLOY_SERVICE_REGISTRY) {
    connectorConfig.addApicurioAvroSupport(registryController.getRegistryApiAddress());
  }
  kafkaConnectController.deployConnector(connectorName,connectorConfig);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\mongodb\MongoConnectorIT.java",57
2242,"'-tryline","@AfterAll public static void tearDownDatabase() throws IOException, InterruptedException {
  kafkaConnectController.undeployConnector(connectorName);
  dbController.reload();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\mongodb\MongoConnectorIT.java",78
2243,"'-tryline","@Test @Order(6) public void shouldResumeStreamingAfterRedeployment() throws IOException, InterruptedException {
  kafkaConnectController.deployConnector(connectorName,connectorConfig);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .inventory.customers,6));
  awaitAssert(() -> assertions.assertRecordsContain(connectorName + .inventory.customers,jerry@test.com));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\mongodb\MongoConnectorIT.java",141
2244,"'-tryline","@Test @Order(8) public void shouldResumeStreamingAfterCrash() throws InterruptedException {
  operatorController.enable();
  kafkaConnectController.waitForConnectCluster();
  awaitAssert(() -> assertions.assertMinimalRecordsCount(connectorName + .inventory.customers,7));
  awaitAssert(() -> assertions.assertRecordsContain(connectorName + .inventory.customers,nibbles@test.com));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\mongodb\MongoConnectorIT.java",158
2245,"'-tryline","@BeforeAll public static void setupDatabase() throws IOException, InterruptedException, ClassNotFoundException {
  if (!ConfigProperties.DATABASE_MYSQL_HOST.isPresent()) {
    dbDeployer=new MySqlDeployer(ocp).withProject(ConfigProperties.OCP_PROJECT_MYSQL).withDeployment(DB_DEPLOYMENT_PATH).withServices(DB_SERVICE_PATH_LB,DB_SERVICE_PATH);
    dbController=dbDeployer.deploy();
  }
  connectorName=CONNECTOR_NAME + - + testUtils.getUniqueId();
  connectorConfig=connectorFactories.mysql().put(database.server.name,connectorName);
  if (ConfigProperties.DEPLOY_SERVICE_REGISTRY) {
    connectorConfig.addApicurioAvroSupport(registryController.getRegistryApiAddress());
  }
  kafkaConnectController.deployConnector(connectorName,connectorConfig);
  Class.forName(com.mysql.cj.jdbc.Driver);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\mysql\MySqlConnectorIT.java",55
2246,"'-tryline","@AfterAll public static void tearDownDatabase() throws IOException, InterruptedException {
  dbController.reload();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\mysql\MySqlConnectorIT.java",75
2247,"'-tryline","@Test @Order(6) public void shouldResumeStreamingAfterRedeployment() throws IOException, InterruptedException {
  kafkaConnectController.deployConnector(connectorName,connectorConfig);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .inventory.customers,6));
  awaitAssert(() -> assertions.assertRecordsContain(connectorName + .inventory.customers,jerry@test.com));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\mysql\MySqlConnectorIT.java",136
2248,"'-tryline","@Test @Order(8) public void shouldResumeStreamingAfterCrash() throws InterruptedException {
  operatorController.enable();
  kafkaConnectController.waitForConnectCluster();
  awaitAssert(() -> assertions.assertMinimalRecordsCount(connectorName + .inventory.customers,7));
  awaitAssert(() -> assertions.assertRecordsContain(connectorName + .inventory.customers,nibbles@test.com));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\mysql\MySqlConnectorIT.java",153
2249,"'-tryline","@BeforeAll public static void setupDatabase() throws IOException, InterruptedException, ClassNotFoundException {
  if (!ConfigProperties.DATABASE_MYSQL_HOST.isPresent()) {
    dbDeployer=new PostgreSqlDeployer(ocp).withProject(ConfigProperties.OCP_PROJECT_POSTGRESQL).withDeployment(DB_DEPLOYMENT_PATH).withServices(DB_SERVICE_PATH_LB,DB_SERVICE_PATH);
    dbController=dbDeployer.deploy();
  }
  String id=testUtils.getUniqueId();
  connectorName=CONNECTOR_NAME + - + id;
  connectorConfig=connectorFactories.postgresql().put(database.server.name,connectorName);
  if (ConfigProperties.DEPLOY_SERVICE_REGISTRY) {
    connectorConfig.addApicurioAvroSupport(registryController.getRegistryApiAddress());
  }
  kafkaConnectController.deployConnector(connectorName,connectorConfig);
  Class.forName(org.postgresql.Driver);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\postgresql\PostgreSqlConnectorIT.java",56
2250,"'-tryline","@AfterAll public static void tearDownDatabase() throws IOException, InterruptedException {
  kafkaConnectController.undeployConnector(connectorName);
  dbController.reload();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\postgresql\PostgreSqlConnectorIT.java",77
2251,"'-tryline","@Test @Order(6) public void shouldResumeStreamingAfterRedeployment() throws IOException, InterruptedException {
  kafkaConnectController.deployConnector(connectorName,connectorConfig);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .inventory.customers,6));
  awaitAssert(() -> assertions.assertRecordsContain(connectorName + .inventory.customers,jerry@test.com));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\postgresql\PostgreSqlConnectorIT.java",136
2252,"'-tryline","@Test @Order(8) public void shouldResumeStreamingAfterCrash() throws InterruptedException {
  operatorController.enable();
  kafkaConnectController.waitForConnectCluster();
  awaitAssert(() -> assertions.assertMinimalRecordsCount(connectorName + .inventory.customers,7));
  awaitAssert(() -> assertions.assertRecordsContain(connectorName + .inventory.customers,nibbles@test.com));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\postgresql\PostgreSqlConnectorIT.java",153
2253,"'-tryline","@BeforeAll public static void setupDatabase() throws IOException, InterruptedException, ClassNotFoundException {
  if (!ConfigProperties.DATABASE_SQLSERVER_HOST.isPresent()) {
    dbDeployer=new SqlServerDeployer(ocp).withProject(ConfigProperties.OCP_PROJECT_SQLSERVER).withDeployment(DB_DEPLOYMENT_PATH).withServices(DB_SERVICE_PATH_LB,DB_SERVICE_PATH);
    dbController=dbDeployer.deploy();
    dbController.initialize();
  }
  String id=testUtils.getUniqueId();
  connectorName=CONNECTOR_NAME + - + id;
  connectorConfig=connectorFactories.sqlserver().put(database.server.name,connectorName);
  kafkaConnectController.deployConnector(connectorName,connectorConfig);
  Class.forName(com.microsoft.sqlserver.jdbc.SQLServerDriver);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\sqlserver\SqlServerConnectorIT.java",56
2254,"'-tryline","@AfterAll public static void tearDownDatabase() throws IOException, InterruptedException {
  kafkaConnectController.undeployConnector(connectorName);
  dbController.reload();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\sqlserver\SqlServerConnectorIT.java",75
2255,"'-tryline","@Test @Order(6) public void shouldResumeStreamingAfterRedeployment() throws IOException, InterruptedException {
  kafkaConnectController.deployConnector(connectorName,connectorConfig);
  awaitAssert(() -> assertions.assertRecordsCount(connectorName + .dbo.customers,6));
  awaitAssert(() -> assertions.assertRecordsContain(connectorName + .dbo.customers,jerry@test.com));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\sqlserver\SqlServerConnectorIT.java",134
2256,"'-tryline","@Test @Order(8) public void shouldResumeStreamingAfterCrash() throws InterruptedException {
  operatorController.enable();
  kafkaConnectController.waitForConnectCluster();
  awaitAssert(() -> assertions.assertMinimalRecordsCount(connectorName + .dbo.customers,7));
  awaitAssert(() -> assertions.assertRecordsContain(connectorName + .dbo.customers,nibbles@test.com));
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\sqlserver\SqlServerConnectorIT.java",151
2257,"'-tryline","private Lsn tryParseLsn(String slotName,String pluginName,String database,ResultSet rs,String column) throws ConnectException, SQLException {
  Lsn lsn=null;
  String lsnStr=rs.getString(column);
  if (lsnStr == null) {
    return null;
  }
  try {
    lsn=Lsn.valueOf(lsnStr);
  }
 catch (  Exception e) {
    throw new ConnectException(Value  + column +  in the pg_replication_slots table for slot = '+ slotName+ ', plugin = '+ pluginName+ ', database = '+ database+ ' is not valid. This is an abnormal situation and the database status should be checked.);
  }
  if (!lsn.isValid()) {
    throw new ConnectException(Invalid LSN returned from database);
  }
  return lsn;
}
","org.apache.kafka.connect.errors.ConnectException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\connection\PostgresConnection.java",262
2258,"'-tryline","public ReplicationConnection createReplicationConnection(PostgresTaskContext taskContext,boolean shouldExport,boolean doSnapshot,int maxRetries,Duration retryDelay) throws ConnectException {
  final Metronome metronome=Metronome.parker(retryDelay,Clock.SYSTEM);
  short retryCount=0;
  ReplicationConnection replicationConnection=null;
  while (retryCount <= maxRetries) {
    try {
      return taskContext.createReplicationConnection(shouldExport,doSnapshot);
    }
 catch (    SQLException ex) {
      retryCount++;
      if (retryCount > maxRetries) {
        LOGGER.error(Too many errors connecting to server. All {} retries failed.,maxRetries);
        throw new ConnectException(ex);
      }
      LOGGER.warn(Error connecting to server; will attempt retry {} of {} after {}  + seconds. Exception message: {},retryCount,maxRetries,retryDelay.getSeconds(),ex.getMessage());
      try {
        metronome.pause();
      }
 catch (      InterruptedException e) {
        LOGGER.warn(Connection retry sleep interrupted by exception:  + e);
        Thread.currentThread().interrupt();
      }
    }
  }
  return replicationConnection;
}
","org.apache.kafka.connect.errors.ConnectException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-connector-postgres\src\main\java\io\debezium\connector\postgresql\PostgresConnectorTask.java",224
2259,"'-tryline","/** 
 * Reconstitute the <tt>ConcurrentHashMap</tt> instance from a stream (i.e., deserialize it).
 * @param s the stream
 */
@SuppressWarnings(unchecked) private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
  s.defaultReadObject();
  for (int i=0; i < segments.length; ++i) {
    segments[i].setTable(new HashEntry[1]);
  }
  for (; ; ) {
    K key=(K)s.readObject();
    V value=(V)s.readObject();
    if (key == null) {
      break;
    }
    put(key,value);
  }
}
","java.lang.ClassNotFoundException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\util\BoundedConcurrentHashMap.java",2440
2260,"'-tryline","@BeforeAll public static void setupDatabase() throws IOException, InterruptedException, ClassNotFoundException {
  Class.forName(com.ibm.db2.jcc.DB2Driver);
  if (!ConfigProperties.DATABASE_DB2_HOST.isPresent()) {
    dbDeployer=new DB2Deployer(ocp).withProject(ConfigProperties.OCP_PROJECT_DB2).withDeployment(DB_DEPLOYMENT_PATH).withServices(DB_SERVICE_PATH_LB,DB_SERVICE_PATH);
    dbController=dbDeployer.deploy();
    dbController.initialize();
  }
  String id=testUtils.getUniqueId();
  connectorName=CONNECTOR_NAME + - + id;
  connectorConfig=connectorFactories.db2().put(database.server.name,connectorName);
  if (ConfigProperties.DEPLOY_SERVICE_REGISTRY) {
    connectorConfig.addApicurioAvroSupport(registryController.getRegistryApiAddress());
  }
  kafkaConnectController.deployConnector(connectorName,connectorConfig);
}
","java.lang.ClassNotFoundException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\db2\DB2ConnectorIT.java",58
2261,"'-tryline","@BeforeAll public static void setupDatabase() throws IOException, InterruptedException, ClassNotFoundException {
  if (!ConfigProperties.DATABASE_MYSQL_HOST.isPresent()) {
    dbDeployer=new MySqlDeployer(ocp).withProject(ConfigProperties.OCP_PROJECT_MYSQL).withDeployment(DB_DEPLOYMENT_PATH).withServices(DB_SERVICE_PATH_LB,DB_SERVICE_PATH);
    dbController=dbDeployer.deploy();
  }
  connectorName=CONNECTOR_NAME + - + testUtils.getUniqueId();
  connectorConfig=connectorFactories.mysql().put(database.server.name,connectorName);
  if (ConfigProperties.DEPLOY_SERVICE_REGISTRY) {
    connectorConfig.addApicurioAvroSupport(registryController.getRegistryApiAddress());
  }
  kafkaConnectController.deployConnector(connectorName,connectorConfig);
  Class.forName(com.mysql.cj.jdbc.Driver);
}
","java.lang.ClassNotFoundException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\mysql\MySqlConnectorIT.java",55
2262,"'-tryline","@BeforeAll public static void setupDatabase() throws IOException, InterruptedException, ClassNotFoundException {
  if (!ConfigProperties.DATABASE_MYSQL_HOST.isPresent()) {
    dbDeployer=new PostgreSqlDeployer(ocp).withProject(ConfigProperties.OCP_PROJECT_POSTGRESQL).withDeployment(DB_DEPLOYMENT_PATH).withServices(DB_SERVICE_PATH_LB,DB_SERVICE_PATH);
    dbController=dbDeployer.deploy();
  }
  String id=testUtils.getUniqueId();
  connectorName=CONNECTOR_NAME + - + id;
  connectorConfig=connectorFactories.postgresql().put(database.server.name,connectorName);
  if (ConfigProperties.DEPLOY_SERVICE_REGISTRY) {
    connectorConfig.addApicurioAvroSupport(registryController.getRegistryApiAddress());
  }
  kafkaConnectController.deployConnector(connectorName,connectorConfig);
  Class.forName(org.postgresql.Driver);
}
","java.lang.ClassNotFoundException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\postgresql\PostgreSqlConnectorIT.java",56
2263,"'-tryline","@BeforeAll public static void setupDatabase() throws IOException, InterruptedException, ClassNotFoundException {
  if (!ConfigProperties.DATABASE_SQLSERVER_HOST.isPresent()) {
    dbDeployer=new SqlServerDeployer(ocp).withProject(ConfigProperties.OCP_PROJECT_SQLSERVER).withDeployment(DB_DEPLOYMENT_PATH).withServices(DB_SERVICE_PATH_LB,DB_SERVICE_PATH);
    dbController=dbDeployer.deploy();
    dbController.initialize();
  }
  String id=testUtils.getUniqueId();
  connectorName=CONNECTOR_NAME + - + id;
  connectorConfig=connectorFactories.sqlserver().put(database.server.name,connectorName);
  kafkaConnectController.deployConnector(connectorName,connectorConfig);
  Class.forName(com.microsoft.sqlserver.jdbc.SQLServerDriver);
}
","java.lang.ClassNotFoundException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-testing\debezium-testing-openshift\src\test\java\io\debezium\testing\openshift\sqlserver\SqlServerConnectorIT.java",56
2264,"'-tryline","/** 
 * Get the current token.
 * @return the current token; never null
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 * @throws NoSuchElementException if there are no more tokens
 */
final Token currentToken() throws IllegalStateException, NoSuchElementException {
  if (currentToken == null) {
    if (completed) {
      throw new NoSuchElementException(No more content);
    }
    throw new IllegalStateException(start() method must be called before consuming or matching);
  }
  assert currentToken != null;
  return currentToken;
}
","java.util.NoSuchElementException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1907
2265,"'-tryline","/** 
 * Get the previous token. This does not modify the state.
 * @param count the number of tokens back from the current position that this method should return
 * @return the previous token; never null
 * @throws IllegalStateException if this method was called before the stream was {@link #start() started}
 * @throws NoSuchElementException if there is no previous token
 */
public final Token previousToken(int count) throws IllegalStateException, NoSuchElementException {
  if (count < 1) {
    throw new IllegalArgumentException(The count must be positive);
  }
  if (currentToken == null) {
    if (completed) {
      if (tokens.isEmpty()) {
        throw new NoSuchElementException(No more content);
      }
      return tokens.get(tokens.size() - 1);
    }
    throw new IllegalStateException(start() method must be called before consuming or matching);
  }
  int index=tokenIterator.previousIndex() - count;
  if (index < 0) {
    throw new NoSuchElementException(No more content);
  }
  return tokens.get(tokenIterator.previousIndex() - count);
}
","java.util.NoSuchElementException","C:\Users\pavan\Downloads\debezium-master (1)\debezium-master\debezium-core\src\main\java\io\debezium\text\TokenStream.java",1974
