id,TryLine,ThrowsBlock,ExceptionType,FilePath,StartLine
1,"'-tryline","private void startNonGui(String testFile,String logFile,CLOption remoteStart,boolean generateReportDashboard) throws IllegalUserActionException, ConfigurationException {
  System.setProperty(JMETER_NON_GUI,true);
  JMeter driver=new JMeter();
  driver.remoteProps=this.remoteProps;
  driver.remoteStop=this.remoteStop;
  driver.deleteResultFile=this.deleteResultFile;
  PluginManager.install(this,false);
  String remoteHostsString=null;
  if (remoteStart != null) {
    remoteHostsString=remoteStart.getArgument();
    if (remoteHostsString == null) {
      remoteHostsString=JMeterUtils.getPropDefault(remote_hosts,127.0.0.1);
    }
  }
  if (testFile == null) {
    throw new IllegalUserActionException(Non-GUI runs require a test plan);
  }
  driver.runNonGui(testFile,logFile,remoteStart != null,remoteHostsString,generateReportDashboard);
}
","org.apache.jmeter.report.config.ConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\JMeter.java",983
2,"'-tryline","@SuppressWarnings(JdkObsolete) void runNonGui(String testFile,String logFile,boolean remoteStart,String remoteHostsString,boolean generateReportDashboard) throws ConfigurationException {
  try {
    File f=new File(testFile);
    if (!f.exists() || !f.isFile()) {
      throw new ConfigurationException(The file  + f.getAbsolutePath() +  doesn't exist or can't be opened);
    }
    FileServer.getFileServer().setBaseForScript(f);
    HashTree tree=SaveService.loadTree(f);
    @SuppressWarnings(deprecation) JMeterTreeModel treeModel=new JMeterTreeModel(new Object());
    JMeterTreeNode root=(JMeterTreeNode)treeModel.getRoot();
    treeModel.addSubTree(tree,root);
    SearchByClass<ReplaceableController> replaceableControllers=new SearchByClass<>(ReplaceableController.class);
    tree.traverse(replaceableControllers);
    Collection<ReplaceableController> replaceableControllersRes=replaceableControllers.getSearchResults();
    for (    ReplaceableController replaceableController : replaceableControllersRes) {
      replaceableController.resolveReplacementSubTree(root);
    }
    HashTree clonedTree=convertSubTree(tree,true);
    Summariser summariser=null;
    String summariserName=JMeterUtils.getPropDefault(summariser.name,);
    if (summariserName.length() > 0) {
      log.info(Creating summariser <{}>,summariserName);
      println(Creating summariser < + summariserName + >);
      summariser=new Summariser(summariserName);
    }
    ResultCollector resultCollector=null;
    if (logFile != null) {
      resultCollector=new ResultCollector(summariser);
      resultCollector.setFilename(logFile);
      clonedTree.add(clonedTree.getArray()[0],resultCollector);
    }
 else {
      if (summariser != null) {
        clonedTree.add(clonedTree.getArray()[0],summariser);
      }
    }
    if (deleteResultFile) {
      SearchByClass<ResultCollector> resultListeners=new SearchByClass<>(ResultCollector.class);
      clonedTree.traverse(resultListeners);
      Iterator<ResultCollector> irc=resultListeners.getSearchResults().iterator();
      while (irc.hasNext()) {
        ResultCollector rc=irc.next();
        File resultFile=new File(rc.getFilename());
        if (resultFile.exists() && !resultFile.delete()) {
          throw new IllegalStateException(Could not delete results file  + resultFile.getAbsolutePath() + (canRead:+ resultFile.canRead()+ , canWrite:+ resultFile.canWrite()+ ));
        }
      }
    }
    ReportGenerator reportGenerator=null;
    if (logFile != null && generateReportDashboard) {
      reportGenerator=new ReportGenerator(logFile,resultCollector);
    }
    clonedTree.add(clonedTree.getArray()[0],new RemoteThreadsListenerTestElement());
    List<JMeterEngine> engines=new ArrayList<>();
    println(Created the tree successfully using  + testFile);
    if (!remoteStart) {
      JMeterEngine engine=new StandardJMeterEngine();
      clonedTree.add(clonedTree.getArray()[0],new ListenToTest(org.apache.jmeter.JMeter.ListenToTest.RunMode.LOCAL,false,reportGenerator));
      engine.configure(clonedTree);
      long now=System.currentTimeMillis();
      println(Starting standalone test @  + new Date(now) +  (+ now+ ));
      engines.add(engine);
      engine.runTest();
    }
 else {
      java.util.StringTokenizer st=new java.util.StringTokenizer(remoteHostsString.trim(),,);
      List<String> hosts=new ArrayList<>();
      while (st.hasMoreElements()) {
        hosts.add(((String)st.nextElement()).trim());
      }
      ListenToTest testListener=new ListenToTest(org.apache.jmeter.JMeter.ListenToTest.RunMode.REMOTE,remoteStop,reportGenerator);
      clonedTree.add(clonedTree.getArray()[0],testListener);
      DistributedRunner distributedRunner=new DistributedRunner(this.remoteProps);
      distributedRunner.setStdout(System.out);
      distributedRunner.setStdErr(System.err);
      distributedRunner.init(hosts,clonedTree);
      engines.addAll(distributedRunner.getEngines());
      testListener.setStartedRemoteEngines(engines);
      distributedRunner.start();
    }
    startUdpDdaemon(engines);
  }
 catch (  ConfigurationException e) {
    throw e;
  }
catch (  Exception e) {
    System.out.println(Error in NonGUIDriver  + e.toString());
    log.error(Error in NonGUIDriver,e);
    throw new ConfigurationException(Error in NonGUIDriver  + e.getMessage(),e);
  }
}
","org.apache.jmeter.report.config.ConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\JMeter.java",1011
3,"'-tryline","/** 
 * Convert the specified string value to the property type.
 * @param < TProperty > the type of the property
 * @param value the string value
 * @param clazz the class of the property (must not be  {@code null})
 * @return the converted string
 * @throws ConfigurationException when unable to convert the string
 */
public static <TProperty>TProperty convert(String value,Class<TProperty> clazz) throws ConfigurationException {
  try {
    return Converters.convert(clazz,value);
  }
 catch (  ConvertException ex) {
    throw new ConfigurationException(String.format(Convert \%s\ to \%s\ is not supported,value,clazz.getName()));
  }
}
","org.apache.jmeter.report.config.ConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\report\config\ConfigurationUtils.java",37
4,"'-tryline","@Override public void initialize(String exportId,ExporterConfiguration exportConfiguration) throws ConfigurationException {
  log.debug(Load configuration for exporter '{}',exportId);
  String className=getRequiredProperty(props,getExporterPropertyKey(exportId,SUBCONF_KEY_CLASSNAME),,String.class);
  log.debug(Using class:'{}' for exporter:'{}',className,exportId);
  exportConfiguration.setClassName(className);
  boolean filtersOnlySampleSeries=getRequiredProperty(props,getExporterPropertyKey(exportId,EXPORTER_KEY_FILTERS_ONLY_SAMPLE_SERIES),EXPORTER_KEY_FILTERS_ONLY_SAMPLE_SERIES_DEFAULT,Boolean.class);
  exportConfiguration.filtersOnlySampleSeries(filtersOnlySampleSeries);
  String seriesFilter=getRequiredProperty(props,getExporterPropertyKey(exportId,EXPORTER_KEY_SERIES_FILTER),EXPORTER_KEY_SERIES_FILTER_DEFAULT,String.class);
  exportConfiguration.setSeriesFilter(seriesFilter);
  boolean showControllerSeriesOnly=getRequiredProperty(props,getExporterPropertyKey(exportId,EXPORTER_KEY_SHOW_CONTROLLERS_ONLY),EXPORTER_KEY_SHOW_CONTROLLERS_ONLY_DEFAULT,Boolean.class);
  exportConfiguration.showControllerSeriesOnly(showControllerSeriesOnly);
  Map<String,SubConfiguration> graphExtraConfigurations=exportConfiguration.getGraphExtraConfigurations();
  loadSubConfiguration(graphExtraConfigurations,props,getSubConfigurationPropertyKey(REPORT_GENERATOR_EXPORTER_KEY_PREFIX,exportId,EXPORTER_KEY_GRAPH_EXTRA_OPTIONS),true,new SubConfigurationFactory<SubConfiguration>(){
    @Override public SubConfiguration createSubConfiguration(){
      return new SubConfiguration();
    }
    @Override public void initialize(    String subConfId,    SubConfiguration subConfiguration){
    }
  }
);
}
","org.apache.jmeter.report.config.ConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\report\config\ReportGeneratorConfiguration.java",141
5,"'-tryline","@Override public void initialize(String graphId,GraphConfiguration graphConfiguration) throws ConfigurationException {
  log.debug(Load configuration for graph '{}',graphId);
  boolean excludeControllers=getRequiredProperty(props,getGraphPropertyKey(graphId,GRAPH_KEY_EXCLUDE_CONTROLLERS),GRAPH_KEY_EXCLUDE_CONTROLLERS_DEFAULT,Boolean.class);
  graphConfiguration.setExcludeControllers(excludeControllers);
  String title=getRequiredProperty(props,getGraphPropertyKey(graphId,GRAPH_KEY_TITLE),GRAPH_KEY_TITLE_DEFAULT,String.class);
  graphConfiguration.setTitle(title);
  String className=getRequiredProperty(props,getGraphPropertyKey(graphId,SUBCONF_KEY_CLASSNAME),,String.class);
  log.debug(Using class:'{}' for graph:'{}' with id:'{}',className,title,graphId);
  graphConfiguration.setClassName(className);
}
","org.apache.jmeter.report.config.ConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\report\config\ReportGeneratorConfiguration.java",227
6,"'-tryline","void initialize(String subConfId,T subConfiguration) throws ConfigurationException ;
","org.apache.jmeter.report.config.ConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\report\config\ReportGeneratorConfiguration.java",271
7,"'-tryline","/** 
 * Gets the property matching the specified key in the properties and casts it. Returns a default value is the key is not found.
 * @param < TProperty > the target type
 * @param props the properties
 * @param key the key of the property
 * @param defaultValue the default value
 * @param clazz the target class
 * @return the property
 * @throws ConfigurationException thrown when the property cannot be cast to the specified type
 */
private static <TProperty>TProperty getProperty(Props props,String key,TProperty defaultValue,Class<TProperty> clazz) throws ConfigurationException {
  String value=props.getValue(key);
  if (value == null) {
    log.info(Property '{}' not found, using default value '{}' instead.,key,defaultValue);
    return defaultValue;
  }
  return ConfigurationUtils.convert(value,clazz);
}
","org.apache.jmeter.report.config.ConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\report\config\ReportGeneratorConfiguration.java",467
8,"'-tryline","private static <TProperty>TProperty getOptionalProperty(Props props,String key,Class<TProperty> clazz) throws ConfigurationException {
  TProperty property=getProperty(props,key,null,clazz);
  if (property != null) {
    log.debug(Use '{}' value for optional property '{}',property,key);
  }
  return property;
}
","org.apache.jmeter.report.config.ConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\report\config\ReportGeneratorConfiguration.java",496
9,"'-tryline","private static <TProperty>TProperty getRequiredProperty(Props props,String key,TProperty defaultValue,Class<TProperty> clazz) throws ConfigurationException {
  TProperty property=getProperty(props,key,defaultValue,clazz);
  log.debug(Use '{}' value for required property '{}',property,key);
  return property;
}
","org.apache.jmeter.report.config.ConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\report\config\ReportGeneratorConfiguration.java",505
10,"'-tryline","/** 
 * * Initialize sub configuration items. This function iterates over properties and find each direct sub properties with the specified prefix <p> E.g. : </p> <p> With properties : <ul> <li>jmeter.reportgenerator.graph.graph1.title</li> <li>jmeter.reportgenerator.graph.graph1.min_abscissa</li> <li>jmeter.reportgenerator.graph.graph2.title</li> </ul> </p> <p> And prefix : jmeter.reportgenerator.graph </p> <p> The function creates 2 sub configuration items : graph1 and graph2 </p>
 * @param < TSubConf > the generic type
 * @param subConfigurations the sub configurations
 * @param props the props
 * @param propertyPrefix the property prefix
 * @param factory the factory
 * @param noPropertyKey indicates whether extra properties are prefixed with the SUBCONF_KEY_PROPERTY
 * @throws ConfigurationException the configuration exception
 */
private static <TSubConf extends SubConfiguration>void loadSubConfiguration(Map<String,TSubConf> subConfigurations,Props props,String propertyPrefix,boolean noPropertyKey,SubConfigurationFactory<TSubConf> factory) throws ConfigurationException {
  for (  Map.Entry<String,Object> entry : props.innerMap(propertyPrefix).entrySet()) {
    String key=entry.getKey();
    int index=key.indexOf(KEY_DELIMITER);
    if (index > 0) {
      String name=key.substring(0,index);
      TSubConf subConfiguration=subConfigurations.get(name);
      if (subConfiguration == null) {
        subConfiguration=factory.createSubConfiguration();
        subConfigurations.put(name,subConfiguration);
      }
    }
 else {
      log.warn(Invalid property '{}', skip it.,key);
    }
  }
  for (  Map.Entry<String,TSubConf> entry : subConfigurations.entrySet()) {
    String subConfId=entry.getKey();
    final TSubConf subConfiguration=entry.getValue();
    factory.initialize(subConfId,subConfiguration);
    Map<String,Object> extraKeys=props.innerMap(noPropertyKey ? getSubConfigurationPropertyPrefix(propertyPrefix,subConfId) : getSubConfigurationPropertyKey(propertyPrefix,subConfId,SUBCONF_KEY_PROPERTY));
    Map<String,String> extraProperties=subConfiguration.getProperties();
    for (    Map.Entry<String,Object> entryProperty : extraKeys.entrySet()) {
      extraProperties.put(entryProperty.getKey(),(String)entryProperty.getValue());
    }
  }
}
","org.apache.jmeter.report.config.ConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\report\config\ReportGeneratorConfiguration.java",513
11,"'-tryline","/** 
 * Load a configuration from the specified properties.
 * @param properties the properties
 * @return the report generator configuration
 * @throws ConfigurationException when mandatory properties are missing
 */
public static ReportGeneratorConfiguration loadFromProperties(Properties properties) throws ConfigurationException {
  log.debug(Report generator properties loading);
  ReportGeneratorConfiguration configuration=new ReportGeneratorConfiguration();
  final Props props=new Props();
  log.debug(Loading properties:\r\n{},properties);
  props.load(properties);
  final File tempDirectory=getRequiredProperty(props,REPORT_GENERATOR_KEY_TEMP_DIR,REPORT_GENERATOR_KEY_TEMP_DIR_DEFAULT,File.class);
  configuration.setTempDirectory(tempDirectory);
  final long apdexSatisfiedThreshold=getRequiredProperty(props,REPORT_GENERATOR_KEY_APDEX_SATISFIED_THRESHOLD,REPORT_GENERATOR_KEY_APDEX_SATISFIED_THRESHOLD_DEFAULT,long.class);
  configuration.setApdexSatisfiedThreshold(apdexSatisfiedThreshold);
  final long apdexToleratedThreshold=getRequiredProperty(props,REPORT_GENERATOR_KEY_APDEX_TOLERATED_THRESHOLD,REPORT_GENERATOR_KEY_APDEX_TOLERATED_THRESHOLD_DEFAULT,long.class);
  configuration.setApdexToleratedThreshold(apdexToleratedThreshold);
  final String apdexPerTransaction=getOptionalProperty(props,REPORT_GENERATOR_KEY_APDEX_PER_TRANSACTION,String.class);
  configuration.setApdexPerTransaction(getApdexPerTransactionParts(apdexPerTransaction));
  final boolean ignoreTCFromTop5ErrorsBySampler=getRequiredProperty(props,REPORT_GENERATOR_KEY_EXCLUDE_TC_FROM_TOP5_ERRORS_BY_SAMPLER,Boolean.TRUE,Boolean.class);
  configuration.setIgnoreTCFromTop5ErrorsBySampler(ignoreTCFromTop5ErrorsBySampler);
  final String sampleFilter=getOptionalProperty(props,REPORT_GENERATOR_KEY_SAMPLE_FILTER,String.class);
  configuration.setSampleFilter(sampleFilter);
  final String reportTitle=getOptionalProperty(props,REPORT_GENERATOR_KEY_REPORT_TITLE,String.class);
  configuration.setReportTitle(reportTitle);
  Date reportStartDate=null;
  Date reportEndDate=null;
  final String startDateValue=getOptionalProperty(props,REPORT_GENERATOR_KEY_START_DATE,String.class);
  final String endDateValue=getOptionalProperty(props,REPORT_GENERATOR_KEY_END_DATE,String.class);
  String rangeDateFormat=getOptionalProperty(props,REPORT_GENERATOR_KEY_RANGE_DATE_FORMAT,String.class);
  if (StringUtils.isEmpty(rangeDateFormat)) {
    rangeDateFormat=RANGE_DATE_FORMAT_DEFAULT;
  }
  SimpleDateFormat dateFormat=new SimpleDateFormat(rangeDateFormat,Locale.ENGLISH);
  try {
    if (!StringUtils.isEmpty(startDateValue)) {
      reportStartDate=dateFormat.parse(startDateValue);
      configuration.setStartDate(reportStartDate);
    }
  }
 catch (  ParseException e) {
    log.error(Error parsing property {} with value: {} using format: {},REPORT_GENERATOR_KEY_START_DATE,startDateValue,rangeDateFormat,e);
  }
  try {
    if (!StringUtils.isEmpty(endDateValue)) {
      reportEndDate=dateFormat.parse(endDateValue);
      configuration.setEndDate(reportEndDate);
    }
  }
 catch (  ParseException e) {
    log.error(Error parsing property {} with value: {} using format: {},REPORT_GENERATOR_KEY_END_DATE,endDateValue,rangeDateFormat,e);
  }
  log.info(Will use date range start date: {}, end date: {},startDateValue,endDateValue);
  final Map<String,GraphConfiguration> graphConfigurations=configuration.getGraphConfigurations();
  loadSubConfiguration(graphConfigurations,props,REPORT_GENERATOR_GRAPH_KEY_PREFIX,false,new GraphConfigurationFactory(props));
  if (graphConfigurations.isEmpty()) {
    log.info(No graph configuration found.);
  }
  final Map<String,ExporterConfiguration> exportConfigurations=configuration.getExportConfigurations();
  loadSubConfiguration(exportConfigurations,props,REPORT_GENERATOR_EXPORTER_KEY_PREFIX,false,new ExporterConfigurationFactory(props));
  if (exportConfigurations.isEmpty()) {
    log.warn(No export configuration found. No report will be generated.);
  }
  log.debug(End of report generator properties loading);
  return configuration;
}
","org.apache.jmeter.report.config.ConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\report\config\ReportGeneratorConfiguration.java",598
12,"'-tryline","/** 
 * Gets the value of the specified property.
 * @param < TProperty > the type of the property
 * @param key the key identifier of the property
 * @param defaultValue the default value of the property
 * @param clazz the class of the property
 * @return the value of property if found; defaultValue otherwise
 * @throws ConfigurationException if cannot convert property
 */
public final <TProperty>TProperty getProperty(String key,TProperty defaultValue,Class<TProperty> clazz) throws ConfigurationException {
  String value=properties.get(key);
  TProperty result;
  if (value == null) {
    result=defaultValue;
  }
 else {
    result=ConfigurationUtils.convert(value,clazz);
  }
  return result;
}
","org.apache.jmeter.report.config.ConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\report\config\SubConfiguration.java",41
13,"'-tryline","/** 
 * Instantiates a new report generator.
 * @param resultsFile     the test results file
 * @param resultCollector Can be null, used if generation occurs at end of test
 * @throws ConfigurationException when loading configuration from file fails
 */
public ReportGenerator(String resultsFile,ResultCollector resultCollector) throws ConfigurationException {
  if (!CSV_OUTPUT_FORMAT) {
    throw new IllegalArgumentException(Report generation requires csv output format, check 'jmeter.save.saveservice.output_format' property);
  }
  log.info(ReportGenerator will use for Parsing the separator: '{}',CSV_DEFAULT_SEPARATOR);
  File file=new File(resultsFile);
  if (resultCollector == null) {
    if (!(file.isFile() && file.canRead())) {
      throw new IllegalArgumentException(String.format(Cannot read test results file : %s,file));
    }
    log.info(Will only generate report from results file: {},resultsFile);
  }
 else {
    if (file.exists() && file.length() > 0) {
      throw new IllegalArgumentException(Results file: + resultsFile +  is not empty);
    }
    log.info(Will generate report at end of test from  results file: {},resultsFile);
  }
  this.resultCollector=resultCollector;
  this.testFile=file;
  final Properties merged=new Properties();
  File rgp=new File(JMeterUtils.getJMeterBinDir(),REPORTGENERATOR_PROPERTIES);
  if (log.isInfoEnabled()) {
    log.info(Reading report generator properties from: {},rgp.getAbsolutePath());
  }
  merged.putAll(loadProps(rgp));
  log.info(Merging with JMeter properties);
  merged.putAll(JMeterUtils.getJMeterProperties());
  configuration=ReportGeneratorConfiguration.loadFromProperties(merged);
}
","org.apache.jmeter.report.config.ConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\report\dashboard\ReportGenerator.java",111
14,"'-tryline","@Test public void testSuccessWhenJmxExists() throws IOException, ConfigurationException {
  File temp=File.createTempFile(testPlan,.jmx);
  String testPlan=<?xml version=\1.0\ encoding=\UTF-8\?>\n + <jmeterTestPlan version=\1.2\ properties=\5.0\ jmeter=\5.2-SNAPSHOT\>\n +   <hashTree>\n+     <TestPlan guiclass=\TestPlanGui\ testclass=\TestPlan\ testname=\Test Plan\ enabled=\true\>\n+       <stringProp name=\TestPlan.comments\></stringProp>\n+       <boolProp name=\TestPlan.functional_mode\>false</boolProp>\n+       <boolProp name=\TestPlan.tearDown_on_shutdown\>true</boolProp>\n+       <boolProp name=\TestPlan.serialize_threadgroups\>false</boolProp>\n+       <elementProp name=\TestPlan.user_defined_variables\ elementType=\Arguments\ guiclass=\ArgumentsPanel\ + testclass=\Arguments\ testname=\User Defined Variables\ enabled=\true\>\n+         <collectionProp name=\Arguments.arguments\/>\n+       </elementProp>\n+       <stringProp name=\TestPlan.user_define_classpath\></stringProp></TestPlan>+     <hashTree/></hashTree></jmeterTestPlan>;
  try (FileWriter fw=new FileWriter(temp);BufferedWriter out=new BufferedWriter(fw)){
    out.write(testPlan);
  }
   try {
    JMeter jmeter=new JMeter();
    jmeter.runNonGui(temp.getAbsolutePath(),null,false,null,false);
  }
  finally {
    assertTrue(File  + temp.getAbsolutePath() +  should have been deleted,temp.delete());
  }
}
","org.apache.jmeter.report.config.ConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\JMeterTest.java",47
15,"'-tryline","@Test public void testFailureWithMissingPlugin() throws IOException, ConfigurationException {
  File temp=File.createTempFile(testPlan,.jmx);
  String testPlan=<?xml version=\1.0\ encoding=\UTF-8\?>\n + <jmeterTestPlan version=\1.2\ properties=\5.0\ jmeter=\5.2-SNAPSHOT.20190506\>\n +   <hashTree>\n+     <TestPlan guiclass=\TestPlanGui\ testclass=\TestPlan\ testname=\Test Plan\ enabled=\true\>\n+       <stringProp name=\TestPlan.comments\></stringProp>\n+       <boolProp name=\TestPlan.functional_mode\>false</boolProp>\n+       <boolProp name=\TestPlan.tearDown_on_shutdown\>true</boolProp>\n+       <boolProp name=\TestPlan.serialize_threadgroups\>false</boolProp>\n+       <elementProp name=\TestPlan.user_defined_variables\ elementType=\Arguments\ + guiclass=\ArgumentsPanel\ testclass=\Arguments\ testname=\User Defined Variables\ enabled=\true\>\n+         <collectionProp name=\Arguments.arguments\/>\n+       </elementProp>\n+       <stringProp name=\TestPlan.user_define_classpath\></stringProp>\n+     </TestPlan>\n+     <hashTree>\n+       <hashTree>\n+         <kg.apc.jmeter.samplers.DummySampler guiclass=\kg.apc.jmeter.samplers.DummySamplerGui\ + testclass=\kg.apc.jmeter.samplers.DummySampler\ testname=\jp@gc - Dummy Sampler\ enabled=\true\>\n+           <boolProp name=\WAITING\>true</boolProp>\n+           <boolProp name=\SUCCESFULL\>true</boolProp>\n+           <stringProp name=\RESPONSE_CODE\>200</stringProp>\n+           <stringProp name=\RESPONSE_MESSAGE\>OK</stringProp>\n+           <stringProp name=\REQUEST_DATA\>{&quot;email&quot;:&quot;user1&quot;, &quot;password&quot;:&quot;password1&quot;}ï¼›+ </stringProp>\n+           <stringProp name=\RESPONSE_DATA\>{&quot;successful&quot;: true, &quot;account_id&quot;:&quot;0123456789&quot;}</stringProp>\n+           <stringProp name=\RESPONSE_TIME\>${__Random(50,500)}</stringProp>\n+           <stringProp name=\LATENCY\>${__Random(1,50)}</stringProp>\n+           <stringProp name=\CONNECT\>${__Random(1,5)}</stringProp>\n+         </kg.apc.jmeter.samplers.DummySampler></hashTree></hashTree>\n+   </hashTree></jmeterTestPlan><hashTree/></hashTree>\n+ </jmeterTestPlan>;
  try (FileWriter fw=new FileWriter(temp);BufferedWriter out=new BufferedWriter(fw)){
    out.write(testPlan);
  }
   JMeter jmeter=new JMeter();
  try {
    jmeter.runNonGui(temp.getAbsolutePath(),null,false,null,false);
    fail(Expected ConfigurationException to be thrown);
  }
 catch (  ConfigurationException e) {
    assertTrue(When the plugin doesn't exist, the method 'runNonGui' should have a detailed message,e.getMessage().contains(Error in NonGUIDriver Problem loading XML from));
  }
 finally {
    assertTrue(File  + temp.getAbsolutePath() +  should have been deleted,temp.delete());
  }
}
","org.apache.jmeter.report.config.ConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\JMeterTest.java",75
16,"'-tryline","/** 
 * Check if there are entries in use. <p> Caller must ensure that access to the files map is single-threaded as there is a window between checking the files Map and clearing it.
 * @throws IllegalStateException if there are any entries still in use
 */
private void checkForOpenFiles() throws IllegalStateException {
  if (filesOpen()) {
    throw new IllegalStateException(Files are still open, cannot change base directory);
  }
  files.clear();
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\services\FileServer.java",159
17,"'-tryline","@Override public void setStatusCode(int code) throws IllegalStateException {
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerHC4.java",168
18,"'-tryline","@Override public void setReasonPhrase(String reason) throws IllegalStateException {
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerHC4.java",172
19,"'-tryline","@Override public void setStatusCode(int code) throws IllegalStateException {
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerThreadIteration.java",188
20,"'-tryline","@Override public void setReasonPhrase(String reason) throws IllegalStateException {
}
","java.lang.IllegalStateException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerThreadIteration.java",192
21,"'-tryline","/** 
 * Get the string for the column from the current row
 * @param row row number (from 0)
 * @param col column number (from 0)
 * @return the string (empty if out of bounds)
 * @throws IndexOutOfBoundsException if the column number is out of bounds
 */
public String getColumn(int row,int col) throws IndexOutOfBoundsException {
  String colData;
  colData=fileData.get(row).get(col);
  log.debug({}({},{}):{},fileName,row,col,colData);
  return colData;
}
","java.lang.IndexOutOfBoundsException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\FileRowColContainer.java",95
22,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override protected Sampler nextIsNull() throws NextIsNullException {
  reInitialize();
  if (breakLoop || endOfArguments() || loopCount >= getEndIndex()) {
    resetBreakLoop();
    resetLoopCount();
    return null;
  }
  return next();
}
","org.apache.jmeter.control.NextIsNullException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\control\ForeachController.java",239
23,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override protected Sampler nextIsAController(Controller controller) throws NextIsNullException {
  Sampler sampler=controller.next();
  if (sampler == null) {
    currentReturnedNull(controller);
    return next();
  }
  currentReturnedAtLeastOne=true;
  if (getStyle() == IGNORE_SUB_CONTROLLERS) {
    incrementCurrent();
    skipNext=true;
  }
 else {
    searchStart=null;
  }
  return sampler;
}
","org.apache.jmeter.control.NextIsNullException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\control\InterleaveControl.java",99
24,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override protected Sampler nextIsASampler(Sampler element) throws NextIsNullException {
  skipNext=true;
  incrementCurrent();
  return element;
}
","org.apache.jmeter.control.NextIsNullException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\control\InterleaveControl.java",119
25,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override protected void setCurrentElement(TestElement currentElement) throws NextIsNullException {
  if (searchStart == null) {
    searchStart=currentElement;
  }
 else   if (searchStart == currentElement && !stillSame) {
    reInitialize();
    throw new NextIsNullException();
  }
}
","org.apache.jmeter.control.NextIsNullException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\control\InterleaveControl.java",141
26,"'-tryline","@Override protected Sampler nextIsNull() throws NextIsNullException {
  return null;
}
","org.apache.jmeter.control.NextIsNullException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\control\OnceOnlyController.java",55
27,"'-tryline","/** 
 * Called by  {@link #next()} if the element is a Controller, and returns thenext sampler from the controller. If this is <code>null</code>, then updates the current pointer and makes recursive call to  {@link #next()}.
 * @param controller the current <em>next</em> element
 * @return the next sampler
 * @throws NextIsNullException when the end of the list has already been reached
 */
protected Sampler nextIsAController(Controller controller) throws NextIsNullException {
  Sampler sampler=controller.next();
  if (sampler == null) {
    currentReturnedNull(controller);
    sampler=next();
  }
  return sampler;
}
","org.apache.jmeter.control.NextIsNullException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\control\GenericController.java",211
28,"'-tryline","/** 
 * Increment the current pointer and return the element. Called by {@link #next()} if the element is a sampler. (May be overridden bysub-classes).
 * @param element the current <em>next</em> element
 * @return input element
 * @throws NextIsNullException when the end of the list has already been reached
 */
protected Sampler nextIsASampler(Sampler element) throws NextIsNullException {
  incrementCurrent();
  return element;
}
","org.apache.jmeter.control.NextIsNullException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\control\GenericController.java",230
29,"'-tryline","/** 
 * Called by  {@link #next()} when {@link #getCurrentElement()} returns <code>null</code>.Reinitialises the controller.
 * @return null (always, for this class)
 * @throws NextIsNullException when the end of the list has already been reached
 */
protected Sampler nextIsNull() throws NextIsNullException {
  reInitialize();
  return null;
}
","org.apache.jmeter.control.NextIsNullException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\control\GenericController.java",246
30,"'-tryline","/** 
 * Empty implementation - does nothing.
 * @param currentElement the current element
 * @throws NextIsNullException when the list has been completed already
 */
protected void setCurrentElement(TestElement currentElement) throws NextIsNullException {
}
","org.apache.jmeter.control.NextIsNullException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\control\GenericController.java",294
31,"'-tryline","/** 
 * <p> Gets the element indicated by the <code>current</code> index, if one exists, from the <code>subControllersAndSamplers</code> list. </p> <p> If the <code>subControllersAndSamplers</code> list is empty, then set done = true, and throw NextIsNullException. </p>
 * @return the current element - or null if current index too large
 * @throws NextIsNullException if list is empty
 */
protected TestElement getCurrentElement() throws NextIsNullException {
  if (current < subControllersAndSamplers.size()) {
    return subControllersAndSamplers.get(current);
  }
  if (subControllersAndSamplers.isEmpty()) {
    setDone(true);
    throw new NextIsNullException();
  }
  return null;
}
","org.apache.jmeter.control.NextIsNullException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\control\GenericController.java",306
32,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override protected Sampler nextIsNull() throws NextIsNullException {
  reInitialize();
  if (endOfLoop()) {
    if (!getContinueForever()) {
      setDone(true);
    }
 else {
      resetLoopCount();
    }
    return null;
  }
  return next();
}
","org.apache.jmeter.control.NextIsNullException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\control\LoopController.java",152
33,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override protected Sampler nextIsNull() throws NextIsNullException {
  reInitialize();
  if (endOfLoop()) {
    resetLoopCount();
    return null;
  }
  return next();
}
","org.apache.jmeter.control.NextIsNullException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\control\RunTime.java",91
34,"'-tryline","@Override protected Sampler nextIsAController(Controller controller) throws NextIsNullException {
  if (!isGenerateParentSample()) {
    return super.nextIsAController(controller);
  }
  Sampler returnValue;
  Sampler sampler=controller.next();
  if (sampler == null) {
    currentReturnedNull(controller);
    returnValue=super.next();
  }
 else {
    returnValue=sampler;
  }
  return returnValue;
}
","org.apache.jmeter.control.NextIsNullException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\control\TransactionController.java",170
35,"'-tryline","/** 
 * Only called at End of Loop <p> {@inheritDoc}
 */
@Override protected Sampler nextIsNull() throws NextIsNullException {
  reInitialize();
  if (endOfLoop(true)) {
    resetBreakLoop();
    resetLoopCount();
    return null;
  }
  return next();
}
","org.apache.jmeter.control.NextIsNullException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\control\WhileController.java",77
36,"'-tryline","/** 
 * Register a GUI class so that it can later be retrieved via {@link #getGUI(Class)}. The key should match the fully-qualified class name for the class used as the parameter when retrieving the GUI.
 * @param key the name which can be used to retrieve this GUI later
 * @param guiClass the class object for the GUI component
 * @param testClass the class of the objects edited by this GUI
 * @throws InstantiationException if an instance of the GUI class can not be instantiated
 * @throws IllegalAccessException if access rights do not permit an instance of the GUI class to be created
 * @throws NoSuchMethodException when no constructor can be found on the given  {@code guiClass}
 * @throws InvocationTargetException when the called constructor throws an exception
 */
public static void registerGUI(String key,Class<?> guiClass,Class<?> testClass) throws InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {
  JMeterGUIComponent gui;
  if (guiClass == TestBeanGUI.class) {
    gui=new TestBeanGUI(testClass);
  }
 else {
    gui=(JMeterGUIComponent)guiClass.getDeclaredConstructor().newInstance();
  }
  GUI_MAP.put(key,gui);
}
","java.lang.NoSuchMethodException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\GUIFactory.java",143
37,"'-tryline","private boolean getSaveState(String methodName) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
  Method method=SampleSaveConfiguration.class.getMethod(methodName);
  return (Boolean)method.invoke(saveConfig);
}
","java.lang.NoSuchMethodException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\SavePropertyDialog.java",139
38,"'-tryline","/** 
 * Register converter.
 * @param key
 * @param jmxsaver
 * @param useMapper
 * @throws InstantiationException
 * @throws IllegalAccessException
 * @throws InvocationTargetException
 * @throws NoSuchMethodException
 * @throws ClassNotFoundException
 */
private static void registerConverter(String key,XStream jmxsaver,boolean useMapper) throws InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException, ClassNotFoundException {
  final Class<? extends Converter> clazz=Class.forName(key).asSubclass(Converter.class);
  if (useMapper) {
    jmxsaver.registerConverter(clazz.getConstructor(Mapper.class).newInstance(jmxsaver.getMapper()));
  }
 else {
    jmxsaver.registerConverter(clazz.getDeclaredConstructor().newInstance());
  }
}
","java.lang.NoSuchMethodException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\save\SaveService.java",267
39,"'-tryline","private Method getMethodFor(String name,Class<?>... paramsClasses) throws NoSuchMethodException, SecurityException {
  Class<ParseCurlCommandAction> parseCurlCommandAction=ParseCurlCommandAction.class;
  Method method=parseCurlCommandAction.getDeclaredMethod(name,paramsClasses);
  method.setAccessible(true);
  return method;
}
","java.lang.NoSuchMethodException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\gui\action\ParseCurlCommandActionTest.java",536
40,"'-tryline","/** 
 * Get the URLs for all the resources that a browser would automatically download following the download of the HTML content, that is: images, stylesheets, javascript files, applets, etc... <p> URLs should not appear twice in the returned iterator. <p> Malformed URLs can be reported to the caller by having the Iterator return the corresponding RL String. Overall problems parsing the html should be reported by throwing an HTMLParseException.
 * @param userAgent User Agent
 * @param html HTML code
 * @param baseUrl Base URL from which the HTML code was obtained
 * @param encoding Charset
 * @return an Iterator for the resource URLs
 * @throws HTMLParseException when parsing the <code>html</code> fails
 */
@Override public Iterator<URL> getEmbeddedResourceURLs(String userAgent,byte[] html,URL baseUrl,String encoding) throws HTMLParseException {
  Collection<URLString> col=new LinkedHashSet<>();
  return getEmbeddedResourceURLs(userAgent,html,baseUrl,new URLCollection(col),encoding);
}
","org.apache.jmeter.protocol.http.parser.HTMLParseException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\parser\HTMLParser.java",85
41,"'-tryline","/** 
 * Get the URLs for all the resources that a browser would automatically download following the download of the HTML content, that is: images, stylesheets, javascript files, applets, etc... <p> All URLs should be added to the Collection. <p> Malformed URLs can be reported to the caller by having the Iterator return the corresponding RL String. Overall problems parsing the html should be reported by throwing an HTMLParseException. <p> N.B. The Iterator returns URLs, but the Collection will contain objects of class URLString.
 * @param userAgent User Agent
 * @param html HTML code
 * @param baseUrl Base URL from which the HTML code was obtained
 * @param coll URLCollection
 * @param encoding Charset
 * @return an Iterator for the resource URLs
 * @throws HTMLParseException when parsing the <code>html</code> fails
 */
public abstract Iterator<URL> getEmbeddedResourceURLs(String userAgent,byte[] html,URL baseUrl,URLCollection coll,String encoding) throws HTMLParseException ;
","org.apache.jmeter.protocol.http.parser.HTMLParseException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\parser\HTMLParser.java",132
42,"'-tryline","/** 
 * Get the URLs for all the resources that a browser would automatically download following the download of the HTML content, that is: images, stylesheets, javascript files, applets, etc... <p> N.B. The Iterator returns URLs, but the Collection will contain objects of class URLString.
 * @param userAgent User Agent
 * @param html HTML code
 * @param baseUrl Base URL from which the HTML code was obtained
 * @param coll Collection - will contain URLString objects, not URLs
 * @param encoding Charset
 * @return an Iterator for the resource URLs
 * @throws HTMLParseException when parsing the <code>html</code> fails
 */
public Iterator<URL> getEmbeddedResourceURLs(String userAgent,byte[] html,URL baseUrl,Collection<URLString> coll,String encoding) throws HTMLParseException {
  return getEmbeddedResourceURLs(userAgent,html,baseUrl,new URLCollection(coll),encoding);
}
","org.apache.jmeter.protocol.http.parser.HTMLParseException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\parser\HTMLParser.java",162
43,"'-tryline","@Override public Iterator<URL> getEmbeddedResourceURLs(String userAgent,byte[] html,URL baseUrl,URLCollection coll,String encoding) throws HTMLParseException {
  try {
    String contents=new String(html,encoding);
    Document doc=Jsoup.parse(contents);
    JMeterNodeVisitor nodeVisitor=new JMeterNodeVisitor(new URLPointer(baseUrl),coll);
    NodeTraversor.traverse(nodeVisitor,doc);
    return coll.iterator();
  }
 catch (  Exception e) {
    throw new HTMLParseException(e);
  }
}
","org.apache.jmeter.protocol.http.parser.HTMLParseException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\parser\JsoupBasedHtmlParser.java",151
44,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override public Iterator<URL> getEmbeddedResourceURLs(String userAgent,byte[] html,URL baseUrl,URLCollection urls,String encoding) throws HTMLParseException {
  Document dom;
  try {
    dom=(Document)getDOM(html,encoding);
  }
 catch (  SAXException se) {
    throw new HTMLParseException(se);
  }
  scanNodes(dom,urls,baseUrl);
  return urls.iterator();
}
","org.apache.jmeter.protocol.http.parser.HTMLParseException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\parser\JTidyHTMLParser.java",47
45,"'-tryline","/** 
 * Scan nodes recursively, looking for embedded resources
 * @param node -initial node
 * @param urls -container for URLs
 * @param baseUrl -used to create absolute URLs
 * @return new base URL
 */
private URL scanNodes(Node node,URLCollection urls,URL baseUrl) throws HTMLParseException {
  if (node == null) {
    return baseUrl;
  }
  String name=node.getNodeName();
  int type=node.getNodeType();
switch (type) {
case Node.DOCUMENT_NODE:
    scanNodes(((Document)node).getDocumentElement(),urls,baseUrl);
  break;
case Node.ELEMENT_NODE:
NamedNodeMap attrs=node.getAttributes();
if (name.equalsIgnoreCase(TAG_BASE)) {
String tmp=getValue(attrs,ATT_HREF);
if (tmp != null) {
  try {
    baseUrl=ConversionUtils.makeRelativeURL(baseUrl,tmp);
  }
 catch (  MalformedURLException e) {
    throw new HTMLParseException(e);
  }
}
break;
}
if (name.equalsIgnoreCase(TAG_IMAGE) || name.equalsIgnoreCase(TAG_EMBED)) {
urls.addURL(getValue(attrs,ATT_SRC),baseUrl);
break;
}
if (name.equalsIgnoreCase(TAG_APPLET)) {
String codebase=getValue(attrs,ATT_CODEBASE);
String code=getValue(attrs,ATT_ARCHIVE);
if (StringUtils.isBlank(code)) {
code=getValue(attrs,ATT_CODE);
}
if (StringUtils.isBlank(codebase)) {
urls.addURL(code,baseUrl);
}
 else {
urls.addURL(codebase + / + code,baseUrl);
}
break;
}
if (name.equalsIgnoreCase(TAG_OBJECT)) {
String data=getValue(attrs,codebase);
if (!StringUtils.isEmpty(data)) {
urls.addURL(data,baseUrl);
}
data=getValue(attrs,data);
if (!StringUtils.isEmpty(data)) {
urls.addURL(data,baseUrl);
}
break;
}
if (name.equalsIgnoreCase(TAG_INPUT)) {
String src=getValue(attrs,ATT_SRC);
String typ=getValue(attrs,ATT_TYPE);
if ((src != null) && ATT_IS_IMAGE.equalsIgnoreCase(typ)) {
urls.addURL(src,baseUrl);
}
break;
}
if (TAG_LINK.equalsIgnoreCase(name) && (STYLESHEET.equalsIgnoreCase(getValue(attrs,ATT_REL)) || SHORTCUT_ICON.equalsIgnoreCase(getValue(attrs,ATT_REL)) || ICON.equalsIgnoreCase(getValue(attrs,ATT_REL)))) {
urls.addURL(getValue(attrs,ATT_HREF),baseUrl);
break;
}
if (name.equalsIgnoreCase(TAG_SCRIPT)) {
urls.addURL(getValue(attrs,ATT_SRC),baseUrl);
break;
}
if (name.equalsIgnoreCase(TAG_FRAME)) {
urls.addURL(getValue(attrs,ATT_SRC),baseUrl);
break;
}
if (name.equalsIgnoreCase(TAG_IFRAME)) {
urls.addURL(getValue(attrs,ATT_SRC),baseUrl);
break;
}
String back=getValue(attrs,ATT_BACKGROUND);
if (back != null) {
urls.addURL(back,baseUrl);
}
if (name.equalsIgnoreCase(TAG_BGSOUND)) {
urls.addURL(getValue(attrs,ATT_SRC),baseUrl);
break;
}
String style=getValue(attrs,ATT_STYLE);
if (style != null) {
HtmlParsingUtils.extractStyleURLs(baseUrl,urls,style);
}
NodeList children=node.getChildNodes();
if (children != null) {
int len=children.getLength();
for (int i=0; i < len; i++) {
baseUrl=scanNodes(children.item(i),urls,baseUrl);
}
}
break;
default :
break;
}
return baseUrl;
}
","org.apache.jmeter.protocol.http.parser.HTMLParseException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\parser\JTidyHTMLParser.java",66
46,"'-tryline","@Override public Iterator<URL> getEmbeddedResourceURLs(String userAgent,byte[] html,URL baseUrl,URLCollection coll,String encoding) throws HTMLParseException {
  try {
    Float ieVersion=extractIEVersion(userAgent);
    String contents=new String(html,encoding);
    LagartoParser lagartoParser=new LagartoParser(contents.toCharArray());
    LagartoDomBuilderConfig config=new LagartoDomBuilderConfig();
    config.setCaseSensitive(false);
    config.setEnableConditionalComments(isEnableConditionalComments(ieVersion));
    if (ieVersion != null) {
      config.setCondCommentIEVersion(ieVersion);
    }
    lagartoParser.setConfig(config);
    JMeterTagVisitor tagVisitor=new JMeterTagVisitor(new URLPointer(baseUrl),coll,ieVersion);
    lagartoParser.parse(tagVisitor);
    return coll.iterator();
  }
 catch (  LagartoException e) {
    if (log.isDebugEnabled()) {
      log.debug(Error extracting embedded resource URLs from:'{}', probably not text content, message:{},baseUrl,e.getMessage());
    }
    return Collections.<URL>emptyList().iterator();
  }
catch (  Exception e) {
    throw new HTMLParseException(e);
  }
}
","org.apache.jmeter.protocol.http.parser.HTMLParseException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\parser\LagartoBasedHtmlParser.java",219
47,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override public Iterator<URL> getEmbeddedResourceURLs(String userAgent,byte[] html,URL baseUrl,URLCollection urls,String encoding) throws HTMLParseException {
  Pattern pattern=null;
  Perl5Matcher matcher=null;
  try {
    matcher=JMeterUtils.getMatcher();
    PatternMatcherInput input=localInput.get();
    input.setInput(new String(html,encoding));
    pattern=JMeterUtils.getPatternCache().getPattern(REGEXP,Perl5Compiler.CASE_INSENSITIVE_MASK | Perl5Compiler.SINGLELINE_MASK | Perl5Compiler.READ_ONLY_MASK);
    while (matcher.contains(input,pattern)) {
      MatchResult match=matcher.getMatch();
      String s;
      if (log.isDebugEnabled()) {
        log.debug(match groups {} {},match.groups(),match);
      }
      for (int g=1; g <= NUM_BASE_GROUPS && g <= match.groups(); g++) {
        s=match.group(g);
        if (s != null) {
          log.debug(new baseUrl: {} - {},s,baseUrl);
          try {
            baseUrl=ConversionUtils.makeRelativeURL(baseUrl,s);
          }
 catch (          MalformedURLException e) {
            log.debug(Can't build base URL from URL {} in page {},s,baseUrl,e);
          }
        }
      }
      for (int g=NUM_BASE_GROUPS + 1; g <= match.groups(); g++) {
        s=match.group(g);
        if (s != null) {
          if (log.isDebugEnabled()) {
            log.debug(group {} - {},g,match.group(g));
          }
          urls.addURL(s,baseUrl);
        }
      }
    }
    return urls.iterator();
  }
 catch (  UnsupportedEncodingException|MalformedCachePatternException e) {
    throw new HTMLParseException(e.getMessage(),e);
  }
 finally {
    JMeterUtils.clearMatcherMemory(matcher,pattern);
  }
}
","org.apache.jmeter.protocol.http.parser.HTMLParseException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\parser\RegexpHTMLParser.java",125
48,"'-tryline","/** 
 * Add form action urls and their corresponding encodings for all forms on the page
 * @param html the html to parse for form encodings
 * @param formEncodings the Map where form encodings should be added
 * @param pageEncoding the encoding used for the whole page
 * @throws HTMLParseException when parsing the <code>html</code> fails
 */
public void addFormActionsAndCharSet(String html,Map<String,String> formEncodings,String pageEncoding) throws HTMLParseException {
  log.debug(Parsing html of: {},html);
  Document document=Jsoup.parse(html);
  Elements forms=document.select(form);
  for (  Element element : forms) {
    String action=element.attr(action);
    if (!StringUtils.isEmpty(action)) {
      String formCharSet=pageEncoding;
      String acceptCharSet=element.attr(accept-charset);
      if (acceptCharSet != null) {
        String[] charSets=JOrphanUtils.split(acceptCharSet,,);
        if (charSets.length > 0) {
          formCharSet=charSets[0].trim();
          if (formCharSet.length() == 0) {
            formCharSet=null;
          }
        }
      }
      if (formCharSet != null) {
        formEncodings.put(action,formCharSet);
      }
    }
  }
}
","org.apache.jmeter.protocol.http.parser.HTMLParseException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\FormCharSetFinder.java",43
49,"'-tryline","/** 
 * @param url   {@link URL} InfluxDB Url
 * @param token InfluxDB 2.0 authorization token
 * @return {@link HttpPost}
 * @throws URISyntaxException
 */
private HttpPost createRequest(URL url,String token) throws URISyntaxException {
  RequestConfig defaultRequestConfig=RequestConfig.custom().setConnectTimeout(JMeterUtils.getPropDefault(backend_influxdb.connection_timeout,1000)).setSocketTimeout(JMeterUtils.getPropDefault(backend_influxdb.socket_timeout,3000)).setConnectionRequestTimeout(JMeterUtils.getPropDefault(backend_influxdb.connection_request_timeout,100)).build();
  HttpPost currentHttpRequest=new HttpPost(url.toURI());
  currentHttpRequest.setConfig(defaultRequestConfig);
  if (StringUtils.isNotBlank(token)) {
    currentHttpRequest.setHeader(AUTHORIZATION_HEADER_NAME,AUTHORIZATION_HEADER_VALUE + token);
  }
  log.debug(Created InfluxDBMetricsSender with url: {},url);
  return currentHttpRequest;
}
","java.net.URISyntaxException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\backend\influxdb\HttpMetricsSender.java",129
50,"'-tryline","private static Icon loadIcon(IconToolbarBean iconBean,String iconPath) throws URISyntaxException {
  final URL imageURL=JMeterUtils.class.getClassLoader().getResource(iconPath);
  if (imageURL == null) {
    throw new IllegalArgumentException(No icon for:  + iconBean.getActionName());
  }
  if (StringUtils.endsWithIgnoreCase(iconBean.getIconPath(),.svg)) {
    return new ThemedSVGIcon(imageURL.toURI(),iconBean.getWidth(),iconBean.getHeight());
  }
  return new ImageIcon(imageURL);
}
","java.net.URISyntaxException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\util\JMeterToolBar.java",157
51,"'-tryline","/** 
 * Checks a URL and encodes it if necessary, i.e. if it is not currently correctly encoded. Warning: it may not work on all unencoded URLs.
 * @param url non-encoded URL
 * @return URI which has been encoded as necessary
 * @throws URISyntaxException if parts of the url form a non valid URI
 */
public static URI sanitizeUrl(URL url) throws URISyntaxException {
  try {
    return url.toURI();
  }
 catch (  URISyntaxException e) {
    return new URI(url.getProtocol(),url.getUserInfo(),url.getHost(),url.getPort(),url.getPath(),url.getQuery(),url.getRef());
  }
}
","java.net.URISyntaxException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\util\ConversionUtils.java",141
52,"'-tryline","@Test public void testGetMethod() throws URISyntaxException {
  for (  String method : VALID_METHODS) {
    HttpRequestBase request=new HttpWebdav(method,new URI(http://example.com));
    assertEquals(method,request.getMethod());
  }
}
","java.net.URISyntaxException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHttpWebdav.java",53
53,"'-tryline","@Override public void undo() throws CannotUndoException {
  super.undo();
  loader.accept(previous);
}
","javax.swing.undo.CannotUndoException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\GlobalUndoableEdit.java",39
54,"'-tryline","@Override public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
  for (  Callback callback : callbacks) {
    if (callback instanceof NameCallback && username != null) {
      NameCallback nc=(NameCallback)callback;
      nc.setName(username);
    }
 else     if (callback instanceof PasswordCallback) {
      PasswordCallback pc=(PasswordCallback)callback;
      pc.setPassword(password.toCharArray());
    }
 else {
      throw new UnsupportedCallbackException(callback,Unrecognized Callback);
    }
  }
}
","javax.security.auth.callback.UnsupportedCallbackException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\control\KerberosManager.java",106
55,"'-tryline","/** 
 * extracts a MIME message from the SampleResult
 */
private static MimeMessage getMessageFromResponse(SampleResult response,int messageNumber) throws MessagingException {
  SampleResult[] subResults=response.getSubResults();
  if (messageNumber >= subResults.length || messageNumber < 0) {
    throw new MessagingException(Message number not present in results:  + messageNumber);
  }
  final SampleResult sampleResult=subResults[messageNumber];
  if (log.isDebugEnabled()) {
    log.debug(Bytes: {}, Content Type: {},sampleResult.getBytesAsLong(),sampleResult.getContentType());
  }
  byte[] data=sampleResult.getResponseData();
  Session session=Session.getDefaultInstance(new Properties());
  MimeMessage msg=new MimeMessage(session,new ByteArrayInputStream(data));
  if (log.isDebugEnabled()) {
    log.debug(msg.getSize() = {},msg.getSize());
  }
  return msg;
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\assertions\SMIMEAssertion.java",311
56,"'-tryline","/** 
 * Sends a mail with the given parameters using SMTP.
 * @param from the sender of the mail as shown in the mail-client.
 * @param vEmails all receivers of the mail. The receivers are seperated by commas.
 * @param subject the subject of the mail.
 * @param attText the message-body.
 * @param smtpHost the smtp-server used to send the mail.
 * @throws MessagingException if the building of the message fails
 * @throws AddressException if any of the addresses is wrong
 */
public void sendMail(String from,List<String> vEmails,String subject,String attText,String smtpHost) throws MessagingException {
  sendMail(from,vEmails,subject,attText,smtpHost,DEFAULT_SMTP_PORT,null,null,null,false);
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\reporters\MailerModel.java",278
57,"'-tryline","/** 
 * Sends a mail with the given parameters using SMTP.
 * @param from the sender of the mail as shown in the mail-client.
 * @param vEmails all receivers of the mail. The receivers are seperated by commas.
 * @param subject the subject of the mail.
 * @param attText the message-body.
 * @param smtpHost the smtp-server used to send the mail.
 * @param smtpPort the smtp-server port used to send the mail.
 * @param user the login used to authenticate
 * @param password the password used to authenticate
 * @param mailAuthType {@link MailAuthType} Security policy
 * @param debug Flag whether debug messages for the mail session should be generated
 * @throws AddressException If mail address is wrong
 * @throws MessagingException If building MimeMessage fails
 */
public void sendMail(String from,List<String> vEmails,String subject,String attText,String smtpHost,String smtpPort,final String user,final String password,MailAuthType mailAuthType,boolean debug) throws MessagingException {
  InternetAddress[] address=new InternetAddress[vEmails.size()];
  for (int k=0; k < vEmails.size(); k++) {
    address[k]=new InternetAddress(vEmails.get(k));
  }
  Properties props=new Properties();
  props.put(MAIL_SMTP_HOST,smtpHost);
  props.put(MAIL_SMTP_PORT,smtpPort);
  Authenticator authenticator=null;
  if (mailAuthType != MailAuthType.NONE) {
    props.put(MAIL_SMTP_AUTH,true);
switch (mailAuthType) {
case SSL:
      props.put(MAIL_SMTP_SOCKETFACTORY_CLASS,javax.net.ssl.SSLSocketFactory);
    props.put(MAIL_SMTP_CHECK_SERVER_IDENTITY,true);
  break;
case TLS:
props.put(MAIL_SMTP_STARTTLS,true);
break;
default :
break;
}
}
if (!StringUtils.isEmpty(user)) {
authenticator=new javax.mail.Authenticator(){
@Override protected PasswordAuthentication getPasswordAuthentication(){
return new PasswordAuthentication(user,password);
}
}
;
}
Session session=Session.getInstance(props,authenticator);
session.setDebug(debug);
Message msg=new MimeMessage(session);
msg.setFrom(new InternetAddress(from));
msg.setRecipients(Message.RecipientType.TO,address);
msg.setSubject(subject);
msg.setText(attText);
Transport.send(msg);
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\reporters\MailerModel.java",302
58,"'-tryline","/** 
 * Send a Test Mail to check configuration
 * @throws AddressException If mail address is wrong
 * @throws MessagingException If building MimeMessage fails
 */
public synchronized void sendTestMail() throws MessagingException {
  String to=getToAddress();
  String from=getFromAddress();
  String subject=Testing mail-addresses;
  String smtpHost=getSmtpHost();
  String attText=JMeter-Testmail + \n + To:   + to + \n+ From: + from+ \n+ Via:  + smtpHost+ \n+ Fail Subject:  + getFailureSubject()+ \n+ Success Subject:  + getSuccessSubject();
  log.info(attText);
  sendMail(from,getAddressList(),subject,attText,smtpHost,getSmtpPort(),getLogin(),getPassword(),getMailAuthType(),true);
  log.info(Test mail sent successfully!!);
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\reporters\MailerModel.java",385
59,"'-tryline","@BeforeEach public void setUp() throws MessagingException, IOException {
  Session mailSession=Session.getDefaultInstance(new Properties());
  msg=new MimeMessage(mailSession,this.getClass().getResourceAsStream(signed_email.eml));
  parent=new SampleResult();
  parent.sampleStart();
  parent.addSubResult(createChildSample());
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\SMIMEAssertionTest.java",98
60,"'-tryline","private SampleResult createChildSample() throws MessagingException, IOException {
  SampleResult child=new SampleResult();
  child.setSampleLabel(Message  + msg.getMessageNumber());
  child.setContentType(msg.getContentType());
  child.setEncodingAndType(msg.getContentType());
  ByteArrayOutputStream outbuf=new ByteArrayOutputStream();
  msg.writeTo(outbuf);
  child.setResponseData(outbuf.toByteArray());
  child.setDataType(SampleResult.TEXT);
  child.setResponseOK();
  return child;
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\SMIMEAssertionTest.java",184
61,"'-tryline","@Override public void appendMessages(Message[] messages) throws MessagingException {
  throw new MessagingException(Not supported);
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\mail\sampler\MailFileFolder.java",60
62,"'-tryline","@Override public void close(boolean expunge) throws MessagingException {
  this.store.close();
  isOpen=false;
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\mail\sampler\MailFileFolder.java",65
63,"'-tryline","@Override public boolean create(int type) throws MessagingException {
  return false;
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\mail\sampler\MailFileFolder.java",71
64,"'-tryline","@Override public boolean delete(boolean recurse) throws MessagingException {
  return false;
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\mail\sampler\MailFileFolder.java",76
65,"'-tryline","@Override public boolean exists() throws MessagingException {
  return true;
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\mail\sampler\MailFileFolder.java",81
66,"'-tryline","@Override public Message[] expunge() throws MessagingException {
  return new Message[0];
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\mail\sampler\MailFileFolder.java",86
67,"'-tryline","@Override public Folder getFolder(String name) throws MessagingException {
  return this;
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\mail\sampler\MailFileFolder.java",91
68,"'-tryline","@Override public Message getMessage(int index) throws MessagingException {
  File f;
  if (isFile) {
    f=folderPath;
  }
 else {
    f=new File(folderPath,String.format(%d.msg,index));
  }
  try (InputStream fis=new FileInputStream(f);InputStream bis=new BufferedInputStream(fis)){
    return new MailFileMessage(this,bis,index);
  }
 catch (  IOException e) {
    throw new MessagingException(Cannot open folder:  + e.getMessage(),e);
  }
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\mail\sampler\MailFileFolder.java",101
69,"'-tryline","@Override public int getMessageCount() throws MessagingException {
  if (!isOpen) {
    return -1;
  }
  if (isFile) {
    return 1;
  }
  File[] listFiles=folderPath.listFiles(FILENAME_FILTER);
  return listFiles != null ? listFiles.length : 0;
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\mail\sampler\MailFileFolder.java",118
70,"'-tryline","@Override public Folder getParent() throws MessagingException {
  return null;
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\mail\sampler\MailFileFolder.java",135
71,"'-tryline","@Override public char getSeparator() throws MessagingException {
  return '/';
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\mail\sampler\MailFileFolder.java",145
72,"'-tryline","@Override public int getType() throws MessagingException {
  return HOLDS_MESSAGES;
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\mail\sampler\MailFileFolder.java",150
73,"'-tryline","@Override public boolean hasNewMessages() throws MessagingException {
  return false;
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\mail\sampler\MailFileFolder.java",155
74,"'-tryline","@Override public Folder[] list(String pattern) throws MessagingException {
  return new Folder[]{this};
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\mail\sampler\MailFileFolder.java",165
75,"'-tryline","@Override public void open(int mode) throws MessagingException {
  if (mode != READ_ONLY) {
    throw new MessagingException(Implementation only supports read-only access);
  }
  this.mode=mode;
  isOpen=true;
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\mail\sampler\MailFileFolder.java",170
76,"'-tryline","@Override public boolean renameTo(Folder newName) throws MessagingException {
  return false;
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\mail\sampler\MailFileFolder.java",179
77,"'-tryline","protected MailFileMessage(Folder folder,InputStream in,int number) throws MessagingException {
  super(folder,in,number);
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\mail\sampler\MailFileMessage.java",30
78,"'-tryline","@Override protected boolean protocolConnect(String host,int port,String user,String password) throws MessagingException {
  File base=new File(host);
  if (base.isDirectory() || base.isFile()) {
    return true;
  }
  throw new MessagingException(Host must be a valid directory or file);
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\mail\sampler\MailFileStore.java",34
79,"'-tryline","@Override public Folder getDefaultFolder() throws MessagingException {
  return new MailFileFolder(this,);
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\mail\sampler\MailFileStore.java",44
80,"'-tryline","@Override public Folder getFolder(String path) throws MessagingException {
  return new MailFileFolder(this,path);
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\mail\sampler\MailFileStore.java",49
81,"'-tryline","@Override public Folder getFolder(URLName path) throws MessagingException {
  return new MailFileFolder(this,path);
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\mail\sampler\MailFileStore.java",54
82,"'-tryline","private void appendMessageData(SampleResult child,Message message) throws MessagingException, IOException {
  StringBuilder cdata=new StringBuilder();
  cdata.append(Date: );
  cdata.append(message.getSentDate());
  cdata.append(NEW_LINE);
  cdata.append(To: );
  Address[] recips=message.getAllRecipients();
  for (int j=0; recips != null && j < recips.length; j++) {
    cdata.append(recips[j].toString());
    if (j < recips.length - 1) {
      cdata.append(; );
    }
  }
  cdata.append(NEW_LINE);
  cdata.append(From: );
  Address[] from=message.getFrom();
  for (int j=0; from != null && j < from.length; j++) {
    cdata.append(from[j].toString());
    if (j < from.length - 1) {
      cdata.append(; );
    }
  }
  cdata.append(NEW_LINE);
  cdata.append(Subject: );
  cdata.append(message.getSubject());
  cdata.append(NEW_LINE);
  cdata.append(NEW_LINE);
  Object content=message.getContent();
  if (content instanceof MimeMultipart) {
    appendMultiPart(child,cdata,(MimeMultipart)content);
  }
 else   if (content instanceof InputStream) {
    child.setResponseData(IOUtils.toByteArray((InputStream)content));
  }
 else {
    cdata.append(content);
    child.setResponseData(cdata.toString(),child.getDataEncodingNoDefault());
  }
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\mail\sampler\MailReaderSampler.java",323
83,"'-tryline","private void appendMultiPart(SampleResult child,StringBuilder cdata,MimeMultipart mmp) throws MessagingException, IOException {
  String preamble=mmp.getPreamble();
  if (preamble != null) {
    cdata.append(preamble);
  }
  child.setResponseData(cdata.toString(),child.getDataEncodingNoDefault());
  int count=mmp.getCount();
  for (int j=0; j < count; j++) {
    BodyPart bodyPart=mmp.getBodyPart(j);
    final Object bodyPartContent=bodyPart.getContent();
    final String contentType=bodyPart.getContentType();
    SampleResult sr=new SampleResult();
    sr.setSampleLabel(Part:  + j);
    sr.setContentType(contentType);
    sr.setDataEncoding(RFC_822_DEFAULT_ENCODING);
    sr.setEncodingAndType(contentType);
    sr.sampleStart();
    if (bodyPartContent instanceof InputStream) {
      sr.setResponseData(IOUtils.toByteArray((InputStream)bodyPartContent));
    }
 else     if (bodyPartContent instanceof MimeMultipart) {
      appendMultiPart(sr,cdata,(MimeMultipart)bodyPartContent);
    }
 else {
      sr.setResponseData(bodyPartContent.toString(),sr.getDataEncodingNoDefault());
    }
    sr.setResponseOK();
    if (sr.getEndTime() == 0) {
      sr.sampleEnd();
    }
    child.addSubResult(sr);
  }
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\mail\sampler\MailReaderSampler.java",366
84,"'-tryline","/** 
 * Prepares message prior to be sent via execute()-method, i.e. sets properties such as protocol, authentication, etc.
 * @return Message-object to be sent to execute()-method
 * @throws MessagingException when problems constructing or sending the mail occur
 * @throws IOException when the mail content can not be read or truststore problems are detected
 */
public Message prepareMessage() throws MessagingException, IOException {
  Properties props=new Properties();
  String protocol=getProtocol();
  props.setProperty(MAIL_PROPERTY_PREFIX + protocol + .host,smtpServer);
  props.setProperty(MAIL_PROPERTY_PREFIX + protocol + .port,getPort());
  props.setProperty(MAIL_PROPERTY_PREFIX + protocol + .auth,Boolean.toString(useAuthentication));
  props.setProperty(MAIL_PROPERTY_PREFIX + protocol + .timeout,getTimeout());
  props.setProperty(MAIL_PROPERTY_PREFIX + protocol + .connectiontimeout,getConnectionTimeout());
  configureTLSProtocols(props,protocol);
  if (enableDebug) {
    props.setProperty(mail.debug,true);
  }
  if (useStartTLS) {
    props.setProperty(mail.smtp.starttls.enable,true);
    if (enforceStartTLS) {
      props.setProperty(mail.smtp.starttls.require,true);
    }
  }
  configureCertificateTrust(props);
  session=Session.getInstance(props,null);
  Message message=buildMessage();
  message.saveChanges();
  return message;
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\protocol\SendMailCommand.java",119
85,"'-tryline","/** 
 * @return
 * @throws MessagingException
 * @throws FileNotFoundException
 * @throws IOException
 * @throws AddressException
 */
private Message buildMessage() throws MessagingException, IOException {
  Message message;
  if (sendEmlMessage) {
    message=new MimeMessage(session,new BufferedInputStream(new FileInputStream(emlMessage)));
  }
 else {
    message=new MimeMessage(session);
    Multipart multipart=new MimeMultipart();
    final int attachmentCount=attachments.size();
    if (plainBody && (attachmentCount == 0 || (mailBody.length() == 0 && attachmentCount == 1))) {
      if (attachmentCount == 1) {
        File first=attachments.get(0);
        try (FileInputStream fis=new FileInputStream(first);InputStream is=new BufferedInputStream(fis)){
          message.setText(IOUtils.toString(is,Charset.defaultCharset()));
        }
       }
 else {
        message.setText(mailBody);
      }
    }
 else {
      BodyPart body=new MimeBodyPart();
      body.setText(mailBody);
      multipart.addBodyPart(body);
      for (      File f : attachments) {
        BodyPart attach=new MimeBodyPart();
        attach.setFileName(f.getName());
        attach.setDataHandler(new DataHandler(new FileDataSource(f.getAbsolutePath())));
        multipart.addBodyPart(attach);
      }
      message.setContent(multipart);
    }
  }
  if (null != sender) {
    message.setFrom(new InternetAddress(sender));
  }
  if (null != replyTo) {
    InternetAddress[] to=new InternetAddress[replyTo.size()];
    message.setReplyTo(replyTo.toArray(to));
  }
  if (null != subject) {
    message.setSubject(subject);
  }
  if (receiverTo != null) {
    InternetAddress[] to=new InternetAddress[receiverTo.size()];
    receiverTo.toArray(to);
    message.setRecipients(Message.RecipientType.TO,to);
  }
  if (receiverCC != null) {
    InternetAddress[] cc=new InternetAddress[receiverCC.size()];
    receiverCC.toArray(cc);
    message.setRecipients(Message.RecipientType.CC,cc);
  }
  if (receiverBCC != null) {
    InternetAddress[] bcc=new InternetAddress[receiverBCC.size()];
    receiverBCC.toArray(bcc);
    message.setRecipients(Message.RecipientType.BCC,bcc);
  }
  for (int i=0; i < headerFields.size(); i++) {
    Argument argument=(Argument)headerFields.get(i).getObjectValue();
    message.setHeader(argument.getName(),argument.getValue());
  }
  return message;
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\protocol\SendMailCommand.java",168
86,"'-tryline","/** 
 * Sends message to mailserver, waiting for delivery if using synchronous mode.
 * @param message Message previously prepared by prepareMessage()
 * @throws MessagingException when problems sending the mail arise
 * @throws InterruptedException when interrupted while waiting for delivery in synchronous mode
 */
public void execute(Message message) throws MessagingException, InterruptedException {
  Transport tr=null;
  try {
    tr=session.getTransport(getProtocol());
    SynchronousTransportListener listener=null;
    if (synchronousMode) {
      listener=new SynchronousTransportListener();
      tr.addTransportListener(listener);
    }
    if (useAuthentication) {
      tr.connect(smtpServer,username,password);
    }
 else {
      tr.connect();
    }
    tr.sendMessage(message,message.getAllRecipients());
    if (listener != null) {
      listener.attend();
    }
  }
  finally {
    if (tr != null) {
      try {
        tr.close();
      }
 catch (      Exception e) {
      }
    }
    logger.debug(transport closed);
  }
  logger.debug(message sent);
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\protocol\SendMailCommand.java",298
87,"'-tryline","/** 
 * Processes prepareMessage() and execute()
 * @throws InterruptedException when interrupted while waiting for delivery in synchronous modus
 * @throws IOException when the mail content can not be read or truststore problems are detected
 * @throws MessagingException when problems constructing or sending the mail occur
 */
public void execute() throws MessagingException, IOException, InterruptedException {
  execute(prepareMessage());
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\protocol\SendMailCommand.java",347
88,"'-tryline","private long calculateMessageSize(Message message) throws IOException, MessagingException {
  if (getPropertyAsBoolean(MESSAGE_SIZE_STATS)) {
    CountingOutputStream cs=new CountingOutputStream(NullOutputStream.NULL_OUTPUT_STREAM);
    message.writeTo(cs);
    return cs.getByteCount();
  }
 else {
    return -1L;
  }
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\SmtpSampler.java",191
89,"'-tryline","private byte[] processSampler(Message message) throws IOException, MessagingException {
  try (InputStream is=message.getInputStream()){
    return IOUtils.toByteArray(is);
  }
 }
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\SmtpSampler.java",202
90,"'-tryline","private String getRequestHeaders(Message message) throws MessagingException {
  StringBuilder sb=new StringBuilder();
  @SuppressWarnings(unchecked) Enumeration<Header> headers=message.getAllHeaders();
  writeHeaders(headers,sb);
  return sb.toString();
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\SmtpSampler.java",296
91,"'-tryline","private String getSamplerData(Message message) throws MessagingException, IOException {
  StringBuilder sb=new StringBuilder();
  Object content=message.getContent();
  if (content instanceof Multipart) {
    Multipart multipart=(Multipart)content;
    String contentType=multipart.getContentType();
    ContentType ct=new ContentType(contentType);
    String boundary=ct.getParameter(boundary);
    for (int i=0; i < multipart.getCount(); i++) {
      sb.append(--);
      sb.append(boundary);
      sb.append(\n);
      BodyPart bodyPart=multipart.getBodyPart(i);
      writeBodyPart(sb,bodyPart);
    }
    sb.append(--);
    sb.append(boundary);
    sb.append(--);
    sb.append(\n);
  }
 else   if (content instanceof BodyPart) {
    BodyPart bodyPart=(BodyPart)content;
    writeBodyPart(sb,bodyPart);
  }
 else   if (content instanceof String) {
    sb.append(content);
  }
 else {
    sb.append(Content has class: );
    sb.append(content.getClass().getCanonicalName());
  }
  return sb.toString();
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\SmtpSampler.java",304
92,"'-tryline","private void writeBodyPart(StringBuilder sb,BodyPart bodyPart) throws MessagingException, IOException {
  @SuppressWarnings(unchecked) Enumeration<Header> allHeaders=bodyPart.getAllHeaders();
  writeHeaders(allHeaders,sb);
  String disposition=bodyPart.getDisposition();
  sb.append(\n);
  if (Part.ATTACHMENT.equals(disposition)) {
    sb.append(<attachment content not shown>);
  }
 else {
    sb.append(bodyPart.getContent());
  }
  sb.append(\n);
}
","javax.mail.MessagingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\SmtpSampler.java",346
93,"'-tryline","/** 
 * Wait until all threads called await on this timer
 * @param timeout The timeout in <code>timeUnit</code> units
 * @param timeUnit The time unit for the <code>timeout</code>
 * @return The arrival index of the current thread
 * @throws InterruptedException when interrupted while waiting, or the interrupted status is set on entering this method
 * @throws BrokenBarrierException if the barrier is reset while waiting or broken on entering or while waiting
 * @throws TimeoutException if the specified time elapses
 * @see java.util.concurrent.CyclicBarrier#await()
 */
public int await(long timeout,TimeUnit timeUnit) throws InterruptedException, BrokenBarrierException, TimeoutException {
  return barrier.await(timeout,timeUnit);
}
","java.util.concurrent.TimeoutException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\timers\SyncTimer.java",93
94,"'-tryline","/** 
 * Runs the command with given arguments and returns its return code.
 * @param arguments List of strings, not null
 * @return return code
 * @throws InterruptedException when execution was interrupted
 * @throws IOException when I/O error occurs while execution
 * @throws TimeoutException when timeout is reached while execution
 */
public int run(List<String> arguments) throws InterruptedException, IOException, TimeoutException {
  return run(arguments,stdin,stdout,stderr);
}
","java.util.concurrent.TimeoutException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\exec\SystemCommand.java",123
95,"'-tryline","private int run(List<String> arguments,InputStream in,OutputStream out,OutputStream err) throws InterruptedException, IOException, TimeoutException {
  Process proc=null;
  final ProcessBuilder procBuild=new ProcessBuilder(arguments);
  if (env != null) {
    procBuild.environment().putAll(env);
  }
  this.executionEnvironment=Collections.unmodifiableMap(procBuild.environment());
  procBuild.directory(directory);
  if (err == null) {
    procBuild.redirectErrorStream(true);
  }
  try {
    proc=procBuild.start();
    final OutputStream procOut=proc.getOutputStream();
    final InputStream procErr=proc.getErrorStream();
    final InputStream procIn=proc.getInputStream();
    final StreamCopier swerr;
    if (err != null) {
      swerr=new StreamCopier(procErr,err);
      swerr.start();
    }
 else {
      swerr=null;
    }
    final StreamCopier swout=new StreamCopier(procIn,out);
    swout.start();
    final StreamCopier swin;
    if (in != null) {
      swin=new StreamCopier(in,procOut);
      swin.start();
    }
 else {
      swin=null;
      procOut.close();
    }
    int exitVal=waitForEndWithTimeout(proc,timeoutMillis);
    swout.join();
    if (swerr != null) {
      swerr.join();
    }
    if (swin != null) {
      swin.interrupt();
      swin.join();
    }
    procErr.close();
    procIn.close();
    procOut.close();
    return exitVal;
  }
  finally {
    if (proc != null) {
      try {
        proc.destroy();
      }
 catch (      Exception ignored) {
      }
    }
  }
}
","java.util.concurrent.TimeoutException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\exec\SystemCommand.java",136
96,"'-tryline","/** 
 * Pipe the output of one command into another
 * @param arguments1 first command to run
 * @param arguments2 second command to run
 * @return exit status
 * @throws InterruptedException when execution gets interrupted
 * @throws TimeoutException when timeout is reached while execution
 * @throws IOException when I/O error occurs while execution
 */
public int run(List<String> arguments1,List<String> arguments2) throws InterruptedException, IOException, TimeoutException {
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  int exitCode=run(arguments1,stdin,out,stderr);
  if (exitCode == 0) {
    exitCode=run(arguments2,new ByteArrayInputStream(out.toByteArray()),stdout,stderr);
  }
  return exitCode;
}
","java.util.concurrent.TimeoutException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\exec\SystemCommand.java",200
97,"'-tryline","/** 
 * Wait for end of proc execution or timeout if timeoutInMillis is greater than 0
 * @param proc Process
 * @param timeoutInMillis long timeout in ms
 * @return proc exit value
 * @throws TimeoutException when timeout is reached while execution
 */
private int waitForEndWithTimeout(Process proc,long timeoutInMillis) throws InterruptedException, TimeoutException {
  if (timeoutInMillis <= 0L) {
    return proc.waitFor();
  }
  if (proc.waitFor(timeoutInMillis,TimeUnit.MILLISECONDS)) {
    return proc.exitValue();
  }
  throw new TimeoutException(Process timeout reached after  + timeoutInMillis +  milliseconds);
}
","java.util.concurrent.TimeoutException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\exec\SystemCommand.java",219
98,"'-tryline","@Override public void runTest() throws JMeterEngineException {
  log.info(running clientengine run method);
  JMeterContextService.clearTotalThreads();
  HashTree testTree=test;
synchronized (testTree) {
    PreCompiler compiler=new PreCompiler(true);
    testTree.traverse(compiler);
    JMeterContextService.initClientSideVariables(compiler.getClientSideVariables());
    testTree.traverse(new TurnElementsOn());
    testTree.traverse(new ConvertListeners());
  }
  String methodName=unknown;
  try {
    JMeterContextService.startTest();
    File baseDirRelative=FileServer.getFileServer().getBaseDirRelative();
    String scriptName=FileServer.getFileServer().getScriptName();
synchronized (LOCK) {
      methodName=rconfigure();
      remote.rconfigure(testTree,hostAndPort,baseDirRelative,scriptName);
    }
    log.info(sent test to {} basedir='{}',hostAndPort,baseDirRelative);
    if (savep == null) {
      savep=new Properties();
    }
    log.info(Sending properties {},savep);
    try {
      methodName=rsetProperties();
      remote.rsetProperties(toHashMapOfString(savep));
    }
 catch (    RemoteException e) {
      log.warn(Could not set properties: {}, error:{},savep,e.getMessage(),e);
    }
    methodName=rrunTest();
    remote.rrunTest();
    log.info(sent run command to {},hostAndPort);
  }
 catch (  IllegalStateException ex) {
    log.error(Error in {} method ,methodName,ex);
    tidyRMI(log);
    throw ex;
  }
catch (  Exception ex) {
    log.error(Error in {} method,methodName,ex);
    tidyRMI(log);
    throw new JMeterEngineException(Error in  + methodName +  method + ex,ex);
  }
}
","org.apache.jmeter.engine.JMeterEngineException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\ClientJMeterEngine.java",123
99,"'-tryline","/** 
 * Runs the test
 * @throws JMeterEngineException if an error occurs
 */
void runTest() throws JMeterEngineException ;
","org.apache.jmeter.engine.JMeterEngineException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\JMeterEngine.java",34
100,"'-tryline","void rrunTest() throws RemoteException, JMeterEngineException ;
","org.apache.jmeter.engine.JMeterEngineException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\RemoteJMeterEngine.java",33
101,"'-tryline","@Override public void rrunTest() throws RemoteException, JMeterEngineException {
  log.info(Running test);
  checkOwner(runTest);
  backingEngine.runTest();
}
","org.apache.jmeter.engine.JMeterEngineException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\RemoteJMeterEngineImpl.java",157
102,"'-tryline","@Override @SuppressWarnings(JdkObsolete) public void runTest() throws JMeterEngineException {
  if (host != null) {
    long now=System.currentTimeMillis();
    System.out.println(Starting the test on host  + host +  @ + new Date(now)+  (+ now+ ));
  }
  try {
    Thread runningThread=new Thread(this,StandardJMeterEngine);
    runningThread.start();
  }
 catch (  Exception err) {
    stopTest();
    throw new JMeterEngineException(err);
  }
}
","org.apache.jmeter.engine.JMeterEngineException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\StandardJMeterEngine.java",173
103,"'-tryline","@Override public void runTest() throws JMeterEngineException {
  log.debug(Running {},host);
}
","org.apache.jmeter.engine.JMeterEngineException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\engine\DistributedRunnerTest.java",148
104,"'-tryline","/** 
 * Return an object from an extension.
 * @param object Object on which to make the call (ignored).
 * @param method The name of the method to call.
 * @param args an array of arguments to bepassed to the extension, which may be either Vectors of Nodes, or Strings.
 */
@Override public Object call(Object object,String method,Object[] args) throws BSFException {
  Object retval=null;
  Context cx;
  try {
    cx=Context.enter();
    Object fun=global.get(method,global);
    if (fun == Scriptable.NOT_FOUND) {
      throw new EvaluatorException(function  + method +  not found.,none,0);
    }
    cx.setOptimizationLevel(-1);
    cx.setGeneratingDebug(false);
    cx.setGeneratingSource(false);
    cx.setOptimizationLevel(0);
    cx.setDebugger(null,null);
    retval=((Function)fun).call(cx,global,global,args);
    if (retval instanceof Wrapper) {
      retval=((Wrapper)retval).unwrap();
    }
  }
 catch (  Throwable t) {
    handleError(t);
  }
 finally {
    Context.exit();
  }
  return retval;
}
","org.apache.bsf.BSFException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\BSFJavaScriptEngine.java",53
105,"'-tryline","@Override public void declareBean(BSFDeclaredBean bean) throws BSFException {
  if ((bean.bean instanceof Number) || (bean.bean == null) || (bean.bean instanceof String)|| (bean.bean instanceof Boolean)) {
    global.put(bean.name,global,bean.bean);
  }
 else {
    Scriptable wrapped=Context.toObject(bean.bean,global);
    global.put(bean.name,global,wrapped);
  }
}
","org.apache.bsf.BSFException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\BSFJavaScriptEngine.java",102
106,"'-tryline","/** 
 * This is used by an application to evaluate a string containing some expression.
 */
@Override public Object eval(String source,int lineNo,int columnNo,Object oscript) throws BSFException {
  String scriptText=oscript.toString();
  Object retval=null;
  Context cx;
  try {
    cx=Context.enter();
    cx.setOptimizationLevel(-1);
    cx.setGeneratingDebug(false);
    cx.setGeneratingSource(false);
    cx.setOptimizationLevel(0);
    cx.setDebugger(null,null);
    retval=cx.evaluateString(global,scriptText,source,lineNo,null);
    if (retval instanceof NativeJavaObject) {
      retval=((NativeJavaObject)retval).unwrap();
    }
  }
 catch (  Throwable t) {
    handleError(t);
  }
 finally {
    Context.exit();
  }
  return retval;
}
","org.apache.bsf.BSFException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\BSFJavaScriptEngine.java",117
107,"'-tryline","/** 
 * @param t {@link Throwable}
 * @throws BSFException
 */
private void handleError(Throwable t) throws BSFException {
  Throwable target=t;
  if (t instanceof WrappedException) {
    target=((WrappedException)t).getWrappedException();
  }
  String message=null;
  if (target instanceof JavaScriptException) {
    message=target.getLocalizedMessage();
    Object value=((JavaScriptException)target).getValue();
    if (value instanceof Throwable) {
      target=(Throwable)value;
    }
  }
 else   if (target instanceof EvaluatorException || target instanceof SecurityException) {
    message=target.getLocalizedMessage();
  }
 else   if (target instanceof RuntimeException) {
    message=Internal Error:  + target.toString();
  }
 else   if (target instanceof StackOverflowError) {
    message=Stack Overflow;
  }
  if (message == null) {
    message=target.toString();
  }
  if (target instanceof Error && !(target instanceof StackOverflowError)) {
    throw (Error)target;
  }
 else {
    throw new BSFException(BSFException.REASON_OTHER_ERROR,JavaScript Error:  + message,target);
  }
}
","org.apache.bsf.BSFException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\BSFJavaScriptEngine.java",156
108,"'-tryline","/** 
 * Initialize the engine. Put the manager into the context-manager map hashtable too.
 */
@Override public void initialize(BSFManager mgr,String lang,@SuppressWarnings(rawtypes) Vector declaredBeans) throws BSFException {
  super.initialize(mgr,lang,declaredBeans);
  try {
    Context cx=Context.enter();
    global=new ImporterTopLevel(cx);
    Scriptable bsf=Context.toObject(new BSFFunctions(mgr,this),global);
    global.put(bsf,global,bsf);
    @SuppressWarnings(unchecked) final Vector<BSFDeclaredBean> beans=declaredBeans;
    for (    BSFDeclaredBean declaredBean : beans) {
      declareBean(declaredBean);
    }
  }
 catch (  Throwable t) {
    handleError(t);
  }
 finally {
    Context.exit();
  }
}
","org.apache.bsf.BSFException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\BSFJavaScriptEngine.java",207
109,"'-tryline","@Override public void undeclareBean(BSFDeclaredBean bean) throws BSFException {
  global.delete(bean.name);
}
","org.apache.bsf.BSFException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\BSFJavaScriptEngine.java",240
110,"'-tryline","protected BSFManager getManager() throws BSFException {
  BSFManager mgr=new BSFManager();
  initManager(mgr);
  return mgr;
}
","org.apache.bsf.BSFException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\BSFTestElement.java",58
111,"'-tryline","protected void initManager(BSFManager mgr) throws BSFException {
  final String label=getName();
  final String fileName=getFilename();
  final String scriptParameters=getParameters();
  final Logger logger=LoggerFactory.getLogger(getClass());
  mgr.declareBean(log,logger,Logger.class);
  mgr.declareBean(Label,label,String.class);
  mgr.declareBean(FileName,fileName,String.class);
  mgr.declareBean(Parameters,scriptParameters,String.class);
  String[] args=JOrphanUtils.split(scriptParameters, );
  mgr.declareBean(args,args,args.getClass());
  JMeterContext jmctx=JMeterContextService.getContext();
  JMeterVariables vars=jmctx.getVariables();
  Properties props=JMeterUtils.getJMeterProperties();
  mgr.declareBean(ctx,jmctx,jmctx.getClass());
  mgr.declareBean(vars,vars,vars.getClass());
  mgr.declareBean(props,props,props.getClass());
  mgr.declareBean(OUT,System.out,PrintStream.class);
  Sampler sampler=jmctx.getCurrentSampler();
  mgr.declareBean(sampler,sampler,Sampler.class);
  SampleResult prev=jmctx.getPreviousResult();
  mgr.declareBean(prev,prev,SampleResult.class);
}
","org.apache.bsf.BSFException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\BSFTestElement.java",64
112,"'-tryline","protected void processFileOrScript(BSFManager mgr) throws BSFException {
  BSFEngine bsfEngine=mgr.loadScriptingEngine(getScriptLanguage());
  final String scriptFile=getFilename();
  if (scriptFile.length() == 0) {
    bsfEngine.exec([script],0,0,getScript());
  }
 else {
    try {
      String script=FileUtils.readFileToString(new File(scriptFile),Charset.defaultCharset());
      bsfEngine.exec(scriptFile,0,0,script);
    }
 catch (    IOException e) {
      if (log.isWarnEnabled()) {
        log.warn(Exception executing script. {},e.getLocalizedMessage());
      }
      throw new BSFException(BSFException.REASON_IO_ERROR,Problem reading script file,e);
    }
  }
}
","org.apache.bsf.BSFException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\BSFTestElement.java",94
113,"'-tryline","protected Object evalFileOrScript(BSFManager mgr) throws BSFException {
  BSFEngine bsfEngine=mgr.loadScriptingEngine(getScriptLanguage());
  final String scriptFile=getFilename();
  if (scriptFile.length() == 0) {
    return bsfEngine.eval([script],0,0,getScript());
  }
 else {
    try {
      String script=FileUtils.readFileToString(new File(scriptFile),Charset.defaultCharset());
      return bsfEngine.eval(scriptFile,0,0,script);
    }
 catch (    IOException e) {
      if (log.isWarnEnabled()) {
        log.warn(Exception evaluating script. {},e.getLocalizedMessage());
      }
      throw new BSFException(BSFException.REASON_IO_ERROR,Problem reading script file,e);
    }
  }
}
","org.apache.bsf.BSFException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\BSFTestElement.java",112
114,"'-tryline","/** 
 * @param type                   type of the {@link KeyStore}
 * @param startIndex             which keys should be considered, starting from <code>0</code>
 * @param endIndex               which keys should be considered, up to <code>count - 1</code>
 * @param clientCertAliasVarName name for the default key, if empty use the first key available
 * @throws KeyStoreException        when the type of the keystore is not supported
 * @throws IllegalArgumentException when <code>startIndex</code> &lt; 0, <code>endIndex</code>&lt; -1 or <code>endIndex</code> &lt; </code>startIndex</code>
 */
private JmeterKeyStore(String type,int startIndex,int endIndex,String clientCertAliasVarName) throws KeyStoreException {
  if (startIndex < 0 || (endIndex != -1 && endIndex < startIndex)) {
    throw new IllegalArgumentException(Invalid index(es). Start= + startIndex + , end=+ endIndex);
  }
  this.store=KeyStore.getInstance(type);
  this.startIndex=startIndex;
  this.endIndex=endIndex;
  this.clientCertAliasVarName=clientCertAliasVarName;
}
","java.security.KeyStoreException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\keystore\JmeterKeyStore.java",70
115,"'-tryline","/** 
 * Process the input stream and try to read the keys from the store
 * @param is    {@link InputStream} from which the store should be loaded
 * @param pword the password used to check the integrity of the store
 * @throws IOException               if there is a problem decoding or reading the store. A badpassword might be the cause for this, or an empty store
 * @throws CertificateException      if any of the certificated in the store can not be loaded
 * @throws NoSuchAlgorithmException  if the algorithm to check the integrity of the store can notbe found
 * @throws KeyStoreException         if the store has not been initialized (should not happenhere)
 * @throws UnrecoverableKeyException if the key can not be recovered from the store (should nothappen here, either)
 */
@SuppressWarnings(JdkObsolete) public void load(InputStream is,String pword) throws NoSuchAlgorithmException, CertificateException, IOException, KeyStoreException, UnrecoverableKeyException {
  char[] pw=toCharArrayOrNull(pword);
  store.load(is,pw);
  List<String> aliasesList=new ArrayList<>();
  this.privateKeyByAlias=new HashMap<>();
  this.certsByAlias=new HashMap<>();
  PrivateKey privateKey=null;
  int index=0;
  Enumeration<String> aliases=store.aliases();
  while (aliases.hasMoreElements()) {
    String alias=aliases.nextElement();
    if (!store.isKeyEntry(alias)) {
      continue;
    }
    if (isIndexInConfiguredRange(index)) {
      privateKey=Objects.requireNonNull((PrivateKey)store.getKey(alias,pw),No key found for alias:  + alias);
      Certificate[] chain=Objects.requireNonNull(store.getCertificateChain(alias),No certificate chain found for alias + alias);
      aliasesList.add(alias);
      privateKeyByAlias.put(alias,privateKey);
      certsByAlias.put(alias,toX509Certificates(chain));
    }
    index++;
  }
  if (is != null) {
    Objects.requireNonNull(privateKey,No key(s) found);
    if (endIndex != -1 && index <= endIndex - startIndex && log.isWarnEnabled()) {
      log.warn(Did not find as much aliases as configured in indexes Start={}, end={}, found={},startIndex,endIndex,certsByAlias.size());
    }
  }
  this.names=aliasesList.toArray(new String[aliasesList.size()]);
}
","java.security.KeyStoreException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\keystore\JmeterKeyStore.java",90
116,"'-tryline","/** 
 * Create a keystore which returns a range of aliases (if available)
 * @param type                   store type (e.g. JKS)
 * @param startIndex             first index (from 0)
 * @param endIndex               last index (to count-1)
 * @param clientCertAliasVarName name of the default key to, if empty the first key will beused as default key
 * @return the keystore
 * @throws KeyStoreException        when the type of the store is not supported
 * @throws IllegalArgumentException when <code>startIndex</code> &lt; 0, <code>endIndex</code>&lt; -1, or <code>endIndex</code> &lt; <code>startIndex</code>
 */
public static JmeterKeyStore getInstance(String type,int startIndex,int endIndex,String clientCertAliasVarName) throws KeyStoreException {
  return new JmeterKeyStore(type,startIndex,endIndex,clientCertAliasVarName);
}
","java.security.KeyStoreException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\keystore\JmeterKeyStore.java",241
117,"'-tryline","/** 
 * Create a keystore which returns the first alias only.
 * @param type of the store e.g. JKS
 * @return the keystore
 * @throws KeyStoreException when the type of the store is not supported
 */
public static JmeterKeyStore getInstance(String type) throws KeyStoreException {
  return getInstance(type,0,-1,DEFAULT_ALIAS_VAR_NAME);
}
","java.security.KeyStoreException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\keystore\JmeterKeyStore.java",258
118,"'-tryline","private void retryLoadKeys(File initStore,boolean allowEmptyPassword) throws NoSuchAlgorithmException, CertificateException, IOException, KeyStoreException, UnrecoverableKeyException {
  for (int i=0; i < 3; i++) {
    String password=getPassword();
    if (!allowEmptyPassword) {
      Validate.notNull(password,Password for keystore must not be null);
    }
    try {
      if (initStore == null) {
        this.keyStore.load(null,password);
      }
 else {
        try (InputStream fis=new FileInputStream(initStore)){
          this.keyStore.load(fis,password);
        }
       }
      return;
    }
 catch (    IOException e) {
      log.debug(Could not load keystore. Wrong password for keystore?,e);
    }
    this.defaultpw=null;
  }
}
","java.security.KeyStoreException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SSLManager.java",169
119,"'-tryline","/** 
 * Get matching alias for a host from keyStore that may contain domain aliases. Assumes domains must have at least 2 parts (apache.org); does not check if TLD requires more (google.co.uk). Note that DNS wildcards only apply to a single level, i.e. podling.incubator.apache.org matches *.incubator.apache.org but does not match *.apache.org
 * @param keyStore the KeyStore to search
 * @param host the hostname to match
 * @return the keystore entry or {@code null} if no match found
 * @throws KeyStoreException
 */
private String getDomainMatch(KeyStore keyStore,String host) throws KeyStoreException {
  if (keyStore.containsAlias(host)) {
    return host;
  }
  String[] parts=host.split(\\.);
  StringBuilder sb=new StringBuilder(*);
  for (int j=1; j < parts.length; j++) {
    sb.append('.');
    sb.append(parts[j]);
  }
  String alias=sb.toString();
  if (keyStore.containsAlias(alias)) {
    return alias;
  }
  return null;
}
","java.security.KeyStoreException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\Proxy.java",388
120,"'-tryline","/** 
 * Look up the context from the local cache, creating it if necessary.
 * @param initialContextFactory used to set the property {@link Context#INITIAL_CONTEXT_FACTORY}
 * @param providerUrl used to set the property {@link Context#PROVIDER_URL}
 * @param useAuth set <code>true</code> if security is to be used.
 * @param securityPrincipal used to set the property {@link Context#SECURITY_PRINCIPAL}
 * @param securityCredentials used to set the property {@link Context#SECURITY_CREDENTIALS}
 * @return the context, never <code>null</code>
 * @throws NamingException when creation of the context fails
 */
public static Context lookupContext(String initialContextFactory,String providerUrl,boolean useAuth,String securityPrincipal,String securityCredentials) throws NamingException {
  String cacheKey=createKey(Thread.currentThread().getId(),initialContextFactory,providerUrl,securityPrincipal,securityCredentials);
  Context ctx=MAP.get(cacheKey);
  if (ctx == null) {
    Properties props=new Properties();
    props.setProperty(Context.INITIAL_CONTEXT_FACTORY,initialContextFactory);
    props.setProperty(Context.PROVIDER_URL,providerUrl);
    if (useAuth && securityPrincipal != null && securityCredentials != null && securityPrincipal.length() > 0 && securityCredentials.length() > 0) {
      props.setProperty(Context.SECURITY_PRINCIPAL,securityPrincipal);
      props.setProperty(Context.SECURITY_CREDENTIALS,securityCredentials);
      log.info(authentication properties set);
    }
    try {
      ctx=new InitialContext(props);
    }
 catch (    NoClassDefFoundError|Exception e) {
      throw new NamingException(e.toString());
    }
    Context oldCtx=MAP.putIfAbsent(cacheKey,ctx);
    if (oldCtx != null) {
      try {
        ctx.close();
      }
 catch (      Exception e) {
      }
      ctx=oldCtx;
    }
  }
  return ctx;
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\client\InitialContextFactory.java",40
121,"'-tryline","/** 
 * Initialize the JNDI initial context
 * @param useProps if true, create a new InitialContext; otherwise use the other parameters to call {@link #lookupContext(String,String,boolean,String,String)}
 * @param initialContextFactory name of the initial context factory (ignored if <code>useProps</code> is <code>true</code>)
 * @param providerUrl url of the provider to use (ignored if <code>useProps</code> is <code>true</code>)
 * @param useAuth <code>true</code> if auth should be used, <code>false</code> otherwise (ignored if <code>useProps</code> is <code>true</code>)
 * @param securityPrincipal name of the principal to (ignored if <code>useProps</code> is <code>true</code>)
 * @param securityCredentials credentials for the principal (ignored if <code>useProps</code> is <code>true</code>)
 * @return the context, never <code>null</code>
 * @throws NamingException when creation of the context fails
 */
public static Context getContext(boolean useProps,String initialContextFactory,String providerUrl,boolean useAuth,String securityPrincipal,String securityCredentials) throws NamingException {
  if (useProps) {
    try {
      return new InitialContext();
    }
 catch (    NoClassDefFoundError|Exception e) {
      throw new NamingException(e.toString());
    }
  }
 else {
    return lookupContext(initialContextFactory,providerUrl,useAuth,securityPrincipal,securityCredentials);
  }
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\client\InitialContextFactory.java",118
122,"'-tryline","/** 
 * Create a publisher using either the jndi.properties file or the provided parameters. Uses a static destination and persistent messages(for backward compatibility)
 * @param useProps true if a jndi.properties file is to be used
 * @param initialContextFactory the (ignored if useProps is true)
 * @param providerUrl (ignored if useProps is true)
 * @param connfactory name of the object factory to look up in context
 * @param destinationName name of the destination to use
 * @param useAuth (ignored if useProps is true)
 * @param securityPrincipal (ignored if useProps is true)
 * @param securityCredentials (ignored if useProps is true)
 * @throws JMSException if the context could not be initialised, or there was some other error
 * @throws NamingException when creation of the publisher fails
 */
public Publisher(boolean useProps,String initialContextFactory,String providerUrl,String connfactory,String destinationName,boolean useAuth,String securityPrincipal,String securityCredentials) throws JMSException, NamingException {
  this(useProps,initialContextFactory,providerUrl,connfactory,destinationName,useAuth,securityPrincipal,securityCredentials,true);
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\client\Publisher.java",55
123,"'-tryline","/** 
 * Create a publisher using either the jndi.properties file or the provided parameters
 * @param useProps true if a jndi.properties file is to be used
 * @param initialContextFactory the (ignored if useProps is true)
 * @param providerUrl (ignored if useProps is true)
 * @param connfactory name of the object factory to lookup in context
 * @param destinationName name of the destination to use
 * @param useAuth (ignored if useProps is true)
 * @param securityPrincipal (ignored if useProps is true)
 * @param securityCredentials (ignored if useProps is true)
 * @param staticDestination true if the destination is not to change between loops
 * @throws JMSException if the context could not be initialised, or there was some other error
 * @throws NamingException when creation of the publisher fails
 */
public Publisher(boolean useProps,String initialContextFactory,String providerUrl,String connfactory,String destinationName,boolean useAuth,String securityPrincipal,String securityCredentials,boolean staticDestination) throws JMSException, NamingException {
  super();
  boolean initSuccess=false;
  try {
    ctx=InitialContextFactory.getContext(useProps,initialContextFactory,providerUrl,useAuth,securityPrincipal,securityCredentials);
    connection=Utils.getConnection(ctx,connfactory);
    session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
    staticDest=staticDestination;
    if (staticDest) {
      Destination dest=Utils.lookupDestination(ctx,destinationName);
      producer=session.createProducer(dest);
    }
 else {
      producer=session.createProducer(null);
    }
    initSuccess=true;
  }
  finally {
    if (!initSuccess) {
      close();
    }
  }
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\client\Publisher.java",91
124,"'-tryline","public Message publish(String text,String destinationName,Map<String,Object> properties,int deliveryMode,int priority,long expiration) throws JMSException, NamingException {
  TextMessage msg=session.createTextMessage(text);
  return setPropertiesAndSend(destinationName,properties,msg,deliveryMode,priority,expiration);
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\client\Publisher.java",145
125,"'-tryline","public Message publish(Serializable contents,String destinationName,Map<String,Object> properties,int deliveryMode,int priority,long expiration) throws JMSException, NamingException {
  ObjectMessage msg=session.createObjectMessage(contents);
  return setPropertiesAndSend(destinationName,properties,msg,deliveryMode,priority,expiration);
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\client\Publisher.java",151
126,"'-tryline","public Message publish(byte[] bytes,String destinationName,Map<String,Object> properties,int deliveryMode,int priority,long expiration) throws JMSException, NamingException {
  BytesMessage msg=session.createBytesMessage();
  msg.writeBytes(bytes);
  return setPropertiesAndSend(destinationName,properties,msg,deliveryMode,priority,expiration);
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\client\Publisher.java",157
127,"'-tryline","public MapMessage publish(Map<String,Object> map,String destinationName,Map<String,Object> properties,int deliveryMode,int priority,long expiration) throws JMSException, NamingException {
  MapMessage msg=session.createMapMessage();
  for (  Map.Entry<String,Object> me : map.entrySet()) {
    msg.setObject(me.getKey(),me.getValue());
  }
  return (MapMessage)setPropertiesAndSend(destinationName,properties,msg,deliveryMode,priority,expiration);
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\client\Publisher.java",164
128,"'-tryline","/** 
 * @param destinationName
 * @param properties {@code Map<String, String>}
 * @param msg Message
 * @param deliveryMode
 * @param priority
 * @param expiration
 * @return Message
 * @throws JMSException
 * @throws NamingException
 */
private Message setPropertiesAndSend(String destinationName,Map<String,Object> properties,Message msg,int deliveryMode,int priority,long expiration) throws JMSException, NamingException {
  Utils.addJMSProperties(msg,properties);
  if (staticDest || destinationName == null) {
    producer.send(msg,deliveryMode,priority,expiration);
  }
 else {
    Destination dest=Utils.lookupDestination(ctx,destinationName);
    producer.send(dest,msg,deliveryMode,priority,expiration);
  }
  return msg;
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\client\Publisher.java",174
129,"'-tryline","/** 
 * Constructor takes the necessary JNDI related parameters to create a connection and prepare to begin receiving messages. <br> The caller must then invoke  {@link #start()} to enable message reception.
 * @param useProps if <code>true</code>, use <em>jndi.properties</em> instead of <code>initialContextFactory</code>, <code>providerUrl</code>, <code>securityPrincipal</code>, <code>securityCredentials</code>
 * @param initialContextFactory name of the initial context factory (will be ignored if <code>useProps</code> is <code>true</code>)
 * @param providerUrl url of the provider (will be ignored if <code>useProps</code> is <code>true</code>)
 * @param connfactory name of the object factory to look up in context
 * @param destinationName name of the destination
 * @param durableSubscriptionId id for a durable subscription (if empty or <code>null</code> no durable subscription will be done)
 * @param clientId client id to use (may be empty or <code>null</code>)
 * @param jmsSelector Message Selector
 * @param useAuth flag whether auth should be used (will be ignored if <code>useProps</code> is <code>true</code>)
 * @param securityPrincipal name of the principal to use for auth (will be ignored if <code>useProps</code> is <code>true</code>)
 * @param securityCredentials credentials for the principal (will be ignored if <code>useProps</code> is <code>true</code>)
 * @throws JMSException if could not create context or other problem occurred.
 * @throws NamingException when lookup of context or destination fails
 */
public ReceiveSubscriber(boolean useProps,String initialContextFactory,String providerUrl,String connfactory,String destinationName,String durableSubscriptionId,String clientId,String jmsSelector,boolean useAuth,String securityPrincipal,String securityCredentials) throws NamingException, JMSException {
  this(0,useProps,initialContextFactory,providerUrl,connfactory,destinationName,durableSubscriptionId,clientId,jmsSelector,useAuth,securityPrincipal,securityCredentials,false);
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\client\ReceiveSubscriber.java",69
130,"'-tryline","/** 
 * Constructor takes the necessary JNDI related parameters to create a connection and create an onMessageListener to prepare to begin receiving messages. <br> The caller must then invoke  {@link #start()} to enable message reception.
 * @param queueSize maximum queue size, where a <code>queueSize</code> &lt;=0 means no limit
 * @param useProps if <code>true</code>, use <em>jndi.properties</em> instead of <code>initialContextFactory</code>, <code>providerUrl</code>, <code>securityPrincipal</code>, <code>securityCredentials</code>
 * @param initialContextFactory name of the initial context factory (will be ignored if <code>useProps</code> is <code>true</code>)
 * @param providerUrl url of the provider (will be ignored if <code>useProps</code> is <code>true</code>)
 * @param connfactory name of the object factory to look up in context
 * @param destinationName name of the destination
 * @param durableSubscriptionId id for a durable subscription (if empty or <code>null</code> no durable subscription will be done)
 * @param clientId client id to use (may be empty or <code>null</code>)
 * @param jmsSelector Message Selector
 * @param useAuth flag whether auth should be used (will be ignored if <code>useProps</code> is <code>true</code>)
 * @param securityPrincipal name of the principal to use for auth (will be ignored if <code>useProps</code> is <code>true</code>)
 * @param securityCredentials credentials for the principal (will be ignored if <code>useProps</code> is <code>true</code>)
 * @throws JMSException if could not create context or other problem occurred.
 * @throws NamingException when lookup of context or destination fails
 */
public ReceiveSubscriber(int queueSize,boolean useProps,String initialContextFactory,String providerUrl,String connfactory,String destinationName,String durableSubscriptionId,String clientId,String jmsSelector,boolean useAuth,String securityPrincipal,String securityCredentials) throws NamingException, JMSException {
  this(queueSize,useProps,initialContextFactory,providerUrl,connfactory,destinationName,durableSubscriptionId,clientId,jmsSelector,useAuth,securityPrincipal,securityCredentials,true);
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\client\ReceiveSubscriber.java",120
131,"'-tryline","/** 
 * Constructor takes the necessary JNDI related parameters to create a connection and create an onMessageListener to prepare to begin receiving messages. <br/> The caller must then invoke  {@link #start()} to enable message reception.
 * @param queueSize maximum queue, where a queueSize &lt;=0 means no limit
 * @param useProps if <code>true</code>, use <em>jndi.properties</em> instead of <code>initialContextFactory</code>, <code>providerUrl</code>, <code>securityPrincipal</code>, <code>securityCredentials</code>
 * @param initialContextFactory name of the initial context factory (will be ignored if <code>useProps</code> is <code>true</code>)
 * @param providerUrl url of the provider (will be ignored if <code>useProps</code> is <code>true</code>)
 * @param connfactory name of the object factory to look up in context
 * @param destinationName name of the destination
 * @param durableSubscriptionId id for a durable subscription (if empty or <code>null</code> no durable subscription will be done)
 * @param clientId client id to use (may be empty or <code>null</code>)
 * @param jmsSelector Message Selector
 * @param useAuth flag whether auth should be used (will be ignored if <code>useProps</code> is <code>true</code>)
 * @param securityPrincipal name of the principal to use for auth (will be ignored if <code>useProps</code> is <code>true</code>)
 * @param securityCredentials credentials for the principal (will be ignored if <code>useProps</code> is <code>true</code>)
 * @param useMessageListener if <code>true</code> create an onMessageListener to prepare to begin receiving messages, otherwise queue will be <code>null</code>
 * @throws JMSException if could not create context or other problem occurred.
 * @throws NamingException when lookup of context or destination fails
 */
private ReceiveSubscriber(int queueSize,boolean useProps,String initialContextFactory,String providerUrl,String connfactory,String destinationName,String durableSubscriptionId,String clientId,String jmsSelector,boolean useAuth,String securityPrincipal,String securityCredentials,boolean useMessageListener) throws NamingException, JMSException {
  boolean initSuccess=false;
  try {
    Context ctx=InitialContextFactory.getContext(useProps,initialContextFactory,providerUrl,useAuth,securityPrincipal,securityCredentials);
    connection=Utils.getConnection(ctx,connfactory);
    if (!isEmpty(clientId)) {
      connection.setClientID(clientId);
    }
    session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
    Destination dest=Utils.lookupDestination(ctx,destinationName);
    subscriber=createSubscriber(session,dest,durableSubscriptionId,jmsSelector);
    if (useMessageListener) {
      if (queueSize <= 0) {
        queue=new LinkedBlockingQueue<>();
      }
 else {
        queue=new LinkedBlockingQueue<>(queueSize);
      }
      subscriber.setMessageListener(this);
    }
 else {
      queue=null;
    }
    log.debug(<init> complete);
    initSuccess=true;
  }
  finally {
    if (!initSuccess) {
      close();
    }
  }
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\client\ReceiveSubscriber.java",176
132,"'-tryline","@SuppressWarnings(JdkObsolete) private Context getInitialContext() throws NamingException {
  Hashtable<String,String> table=new Hashtable<>();
  if (getInitialContextFactory() != null && getInitialContextFactory().trim().length() > 0) {
    LOGGER.debug(Using InitialContext [{}],getInitialContextFactory());
    table.put(Context.INITIAL_CONTEXT_FACTORY,getInitialContextFactory());
  }
  if (getContextProvider() != null && getContextProvider().trim().length() > 0) {
    LOGGER.debug(Using Provider [{}],getContextProvider());
    table.put(Context.PROVIDER_URL,getContextProvider());
  }
  Map<String,String> map=getArguments(JMSSampler.JNDI_PROPERTIES).getArgumentsAsMap();
  if (LOGGER.isDebugEnabled()) {
    if (map.isEmpty()) {
      LOGGER.debug(Empty JNDI properties);
    }
 else {
      LOGGER.debug(Number of JNDI properties: {},map.size());
    }
  }
  for (  Map.Entry<String,String> me : map.entrySet()) {
    table.put(me.getKey(),me.getValue());
  }
  Context initialContext=new InitialContext(table);
  if (LOGGER.isDebugEnabled()) {
    printEnvironment(initialContext);
  }
  return initialContext;
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\sampler\JMSSampler.java",700
133,"'-tryline","@SuppressWarnings(JdkObsolete) private void printEnvironment(Context context) throws NamingException {
  try {
    Hashtable<?,?> env=context.getEnvironment();
    if (env != null) {
      LOGGER.debug(Initial Context Properties);
      for (      Map.Entry<?,?> entry : env.entrySet()) {
        LOGGER.debug({}={},entry.getKey(),entry.getValue());
      }
    }
 else {
      LOGGER.warn(context.getEnvironment() returned null (should not happen according to javadoc but non compliant implementation can return this));
    }
  }
 catch (  javax.naming.OperationNotSupportedException ex) {
    LOGGER.warn(context.getEnvironment() not supported by implementation );
  }
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\sampler\JMSSampler.java",731
134,"'-tryline","/** 
 * initialize the Publisher client.
 * @throws JMSException
 * @throws NamingException
 */
private void initClient() throws JMSException, NamingException {
  configureIsReconnectErrorCode();
  publisher=new Publisher(getUseJNDIPropertiesAsBoolean(),getJNDIInitialContextFactory(),getProviderUrl(),getConnectionFactory(),getDestination(),isUseAuth(),getUsername(),getPassword(),isDestinationStatic());
  ClientPool.addClient(publisher);
  log.debug(PublisherSampler.initClient called);
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\sampler\PublisherSampler.java",173
135,"'-tryline","/** 
 * Create the OnMessageSubscriber client and set the sampler as the message listener.
 * @throws JMSException
 * @throws NamingException
 */
private void initListenerClient() throws JMSException, NamingException {
  SUBSCRIBER=new ReceiveSubscriber(0,getUseJNDIPropertiesAsBoolean(),getJNDIInitialContextFactory(),getProviderUrl(),getConnectionFactory(),getDestination(),getDurableSubscriptionId(),getClientId(),getJmsSelector(),isUseAuth(),getUsername(),getPassword());
  log.debug(SubscriberSampler.initListenerClient called);
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\sampler\SubscriberSampler.java",109
136,"'-tryline","/** 
 * Create the ReceiveSubscriber client for the sampler.
 * @throws NamingException
 * @throws JMSException
 */
private void initReceiveClient() throws NamingException, JMSException {
  SUBSCRIBER=new ReceiveSubscriber(getUseJNDIPropertiesAsBoolean(),getJNDIInitialContextFactory(),getProviderUrl(),getConnectionFactory(),getDestination(),getDurableSubscriptionId(),getClientId(),getJmsSelector(),isUseAuth(),getUsername(),getPassword());
  log.debug(SubscriberSampler.initReceiveClient called);
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\sampler\SubscriberSampler.java",123
137,"'-tryline","/** 
 * Method will lookup a given destination (topic/queue) using JNDI.
 * @param context context to use for lookup
 * @param name the destination name
 * @return the destination, never null
 * @throws NamingException if the name cannot be found as a Destination
 */
public static Destination lookupDestination(Context context,String name) throws NamingException {
  Object o=context.lookup(name);
  if (o instanceof Destination) {
    return (Destination)o;
  }
  throw new NamingException(Found:  + name + ; expected Destination, but was: + (o != null ? o.getClass().getName() : null));
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\Utils.java",136
138,"'-tryline","/** 
 * Get value from Context environment taking into account non fully compliant JNDI implementations
 * @param context context to use
 * @param key key to lookup in contexts environment
 * @return String or <code>null</code> if context.getEnvironment() is not compliant
 * @throws NamingException if a naming problem occurs while getting the environment
 */
@SuppressWarnings(JdkObsolete) public static String getFromEnvironment(Context context,String key) throws NamingException {
  try {
    Hashtable<?,?> env=context.getEnvironment();
    if (env != null) {
      return (String)env.get(key);
    }
 else {
      log.warn(context.getEnvironment() returned null (should not happen according to javadoc but non compliant implementation can return this));
      return null;
    }
  }
 catch (  javax.naming.OperationNotSupportedException ex) {
    log.warn(context.getEnvironment() not supported by implementation );
    return null;
  }
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\Utils.java",155
139,"'-tryline","/** 
 * Obtain the queue connection from the context and factory name.
 * @param ctx context to use
 * @param factoryName name of the object factory to look up in <code>context</code>
 * @return the queue connection
 * @throws JMSException when creation of the connection fails
 * @throws NamingException when lookup in context fails
 */
public static Connection getConnection(Context ctx,String factoryName) throws JMSException, NamingException {
  Object objfac=null;
  try {
    objfac=ctx.lookup(factoryName);
  }
 catch (  NoClassDefFoundError e) {
    throw new NamingException(Lookup failed:  + e.toString());
  }
  if (objfac instanceof javax.jms.ConnectionFactory) {
    String username=getFromEnvironment(ctx,Context.SECURITY_PRINCIPAL);
    if (username != null) {
      String password=getFromEnvironment(ctx,Context.SECURITY_CREDENTIALS);
      return ((javax.jms.ConnectionFactory)objfac).createConnection(username,password);
    }
 else {
      return ((javax.jms.ConnectionFactory)objfac).createConnection();
    }
  }
  throw new NamingException(Expected javax.jms.ConnectionFactory, found  + (objfac != null ? objfac.getClass().getName() : null));
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\Utils.java",184
140,"'-tryline","/** 
 * Connect to server.
 * @param host name of the ldap server
 * @param port port of the ldap server
 * @param rootdn base dn to start ldap operations from
 * @param username user name to use for binding
 * @param password password to use for binding
 * @throws NamingException if  {@link InitialDirContext} can not be build using the aboveparameters
 */
@SuppressWarnings(JdkObsolete) public void connect(String host,String port,String rootdn,String username,String password) throws NamingException {
  Hashtable<String,String> env=new Hashtable<>();
  env.put(Context.INITIAL_CONTEXT_FACTORY,com.sun.jndi.ldap.LdapCtxFactory);
  env.put(Context.PROVIDER_URL,ldap:// + host + :+ port+ /+ rootdn);
  env.put(Context.REFERRAL,throw);
  env.put(Context.SECURITY_CREDENTIALS,password);
  env.put(Context.SECURITY_PRINCIPAL,username);
  dirContext=new InitialDirContext(env);
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\ldap\src\main\java\org\apache\jmeter\protocol\ldap\sampler\LdapClient.java",50
141,"'-tryline","/** 
 * Filter the data in the ldap directory for the given search base.
 * @param searchBase where the search should start
 * @param searchFilter filter this value from the base
 * @return <code>true</code> when the search yields results,<code>false</code> otherwise
 * @throws NamingException when searching fails
 */
public boolean searchTest(String searchBase,String searchFilter) throws NamingException {
  SearchControls searchcontrols=new SearchControls(SearchControls.SUBTREE_SCOPE,1L,0,null,false,false);
  NamingEnumeration<?> ne=dirContext.search(searchBase,searchFilter,searchcontrols);
  return ne.hasMore();
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\ldap\src\main\java\org\apache\jmeter\protocol\ldap\sampler\LdapClient.java",93
142,"'-tryline","/** 
 * Modify the attribute in the ldap directory for the given string.
 * @param mods list of all  {@link ModificationItem}s to apply
 * @param string dn of the object to modify
 * @throws NamingException when modification fails
 */
public void modifyTest(ModificationItem[] mods,String string) throws NamingException {
  dirContext.modifyAttributes(string,mods);
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\ldap\src\main\java\org\apache\jmeter\protocol\ldap\sampler\LdapClient.java",116
143,"'-tryline","/** 
 * Create the attribute in the ldap directory for the given string.
 * @param basicattributes add all the entry in to the basicattribute
 * @param string the string (dn) value
 * @throws NamingException when creating subcontext fails
 */
public void createTest(BasicAttributes basicattributes,String string) throws NamingException {
  dirContext.createSubcontext(string,basicattributes);
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\ldap\src\main\java\org\apache\jmeter\protocol\ldap\sampler\LdapClient.java",129
144,"'-tryline","/** 
 * Delete the attribute from the ldap directory.
 * @param string the string (dn) value
 * @throws NamingException when destroying sub context fails
 */
public void deleteTest(String string) throws NamingException {
  dirContext.destroySubcontext(string);
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\ldap\src\main\java\org\apache\jmeter\protocol\ldap\sampler\LdapClient.java",142
145,"'-tryline","/** 
 * connect to server
 * @param host name of the server to connect
 * @param port port of the server to connect
 * @param rootdn base of the tree to operate on
 * @param username name of the user to use for binding
 * @param password password to use for binding
 * @param connTimeOut connection timeout for connecting the server see com.sun.jndi.ldap.connect.timeout
 * @param secure flag whether ssl should be used
 * @param trustAll flag whether we should trust all certificates
 * @return newly created {@link DirContext}
 * @exception NamingException when creating the  {@link DirContext} fails
 */
@SuppressWarnings(JdkObsolete) public static DirContext connect(String host,String port,String rootdn,String username,String password,String connTimeOut,boolean secure,boolean trustAll) throws NamingException {
  DirContext dirContext;
  Hashtable<String,String> env=new Hashtable<>();
  env.put(Context.INITIAL_CONTEXT_FACTORY,com.sun.jndi.ldap.LdapCtxFactory);
  StringBuilder sb=new StringBuilder(80);
  if (secure) {
    sb.append(ldaps://);
    if (trustAll) {
      log.debug(Using secure connection with trustAll);
      env.put(java.naming.ldap.factory.socket,TrustAllSSLSocketFactory.class.getName());
    }
  }
 else {
    sb.append(ldap://);
  }
  sb.append(host);
  if (port.length() > 0) {
    sb.append(:);
    sb.append(port);
  }
  sb.append(/);
  sb.append(rootdn);
  env.put(Context.PROVIDER_URL,sb.toString());
  if (log.isInfoEnabled()) {
    log.info(prov_url= {},env.get(Context.PROVIDER_URL));
  }
  if (connTimeOut.length() > 0) {
    env.put(com.sun.jndi.ldap.connect.timeout,connTimeOut);
  }
  env.put(Context.REFERRAL,throw);
  env.put(java.naming.batchsize,0);
  env.put(Context.SECURITY_CREDENTIALS,password);
  env.put(Context.SECURITY_PRINCIPAL,username);
  dirContext=new InitialDirContext(env);
  return dirContext;
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\ldap\src\main\java\org\apache\jmeter\protocol\ldap\sampler\LdapExtClient.java",55
146,"'-tryline","/** 
 * Filter the data in the ldap directory for the given search base
 * @param dirContext context to perform the search on
 * @param searchBase base where the search should start
 * @param searchFilter filter this value from the base
 * @param scope scope for search. May be one of {@link SearchControls#OBJECT_SCOPE}, {@link SearchControls#ONELEVEL_SCOPE} or{@link SearchControls#SUBTREE_SCOPE}
 * @param countlim max number of results to get, <code>0</code> for all entries
 * @param timelim max time to wait for entries (in milliseconds), <code>0</code> for unlimited time
 * @param attrs list of attributes to return. If <code>null</code> all attributes will be returned. If empty, none will be returned
 * @param retobj flag whether the objects should be returned
 * @param deref flag whether objects should be dereferenced
 * @return result of the search
 * @throws NamingException when searching fails
 */
public static NamingEnumeration<SearchResult> searchTest(DirContext dirContext,String searchBase,String searchFilter,int scope,long countlim,int timelim,String[] attrs,boolean retobj,boolean deref) throws NamingException {
  if (dirContext == null) {
    throw new NamingException(CONTEXT_IS_NULL);
  }
  if (log.isDebugEnabled()) {
    log.debug(searchBase={}, scope={}, countlim={}, timelim={}, attrs={}, retobj={}, deref={}, filter={},searchBase,scope,countlim,timelim,attrs != null ? JOrphanUtils.unsplit(attrs,,) : null,retobj,deref,searchFilter);
  }
  SearchControls searchcontrols=new SearchControls(scope,countlim,timelim,attrs,retobj,deref);
  return dirContext.search(searchBase,searchFilter,searchcontrols);
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\ldap\src\main\java\org\apache\jmeter\protocol\ldap\sampler\LdapExtClient.java",142
147,"'-tryline","/** 
 * Filter the data in the ldap directory
 * @param dirContext the context to operate on
 * @param filter filter this value from the base
 * @param entrydn distinguished name of entry to compare
 * @return result of the search
 * @throws NamingException when searching fails
 */
public static NamingEnumeration<SearchResult> compare(DirContext dirContext,String filter,String entrydn) throws NamingException {
  if (dirContext == null) {
    throw new NamingException(CONTEXT_IS_NULL);
  }
  SearchControls searchcontrols=new SearchControls(0,1,0,new String[0],false,false);
  return dirContext.search(entrydn,filter,searchcontrols);
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\ldap\src\main\java\org\apache\jmeter\protocol\ldap\sampler\LdapExtClient.java",196
148,"'-tryline","/** 
 * ModDN the data in the ldap directory for the given search base
 * @param dirContext context to operate on
 * @param ddn distinguished name of object to rename
 * @param newdn new distinguished name of object
 * @throws NamingException when renaming fails
 */
public static void moddnOp(DirContext dirContext,String ddn,String newdn) throws NamingException {
  log.debug(ddn and newDn= {}@@@@{},ddn,newdn);
  if (dirContext == null) {
    throw new NamingException(CONTEXT_IS_NULL);
  }
  dirContext.rename(ddn,newdn);
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\ldap\src\main\java\org\apache\jmeter\protocol\ldap\sampler\LdapExtClient.java",217
149,"'-tryline","/** 
 * Modify the attribute in the ldap directory for the given string
 * @param dirContext context to operate on
 * @param mods list of all the  {@link ModificationItem}s to apply on <code>string</code>
 * @param string distinguished name of the object to modify
 * @throws NamingException when modification fails
 */
public static void modifyTest(DirContext dirContext,ModificationItem[] mods,String string) throws NamingException {
  if (dirContext == null) {
    throw new NamingException(CONTEXT_IS_NULL);
  }
  dirContext.modifyAttributes(string,mods);
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\ldap\src\main\java\org\apache\jmeter\protocol\ldap\sampler\LdapExtClient.java",238
150,"'-tryline","/** 
 * Create the entry in the ldap directory for the given string
 * @param dirContext context to operate on
 * @param attributes add all the attributes and values from the attributes object
 * @param string distinguished name of the subcontext to create
 * @return newly created subcontext
 * @throws NamingException when creating subcontext fails
 */
public static DirContext createTest(DirContext dirContext,Attributes attributes,String string) throws NamingException {
  if (dirContext == null) {
    throw new NamingException(CONTEXT_IS_NULL);
  }
  return dirContext.createSubcontext(string,attributes);
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\ldap\src\main\java\org\apache\jmeter\protocol\ldap\sampler\LdapExtClient.java",259
151,"'-tryline","/** 
 * Delete the attribute from the ldap directory
 * @param dirContext context to operate on
 * @param string distinguished name of the subcontext to destroy
 * @throws NamingException when destroying the subcontext fails
 */
public static void deleteTest(DirContext dirContext,String string) throws NamingException {
  if (dirContext == null) {
    throw new NamingException(CONTEXT_IS_NULL);
  }
  dirContext.destroySubcontext(string);
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\ldap\src\main\java\org\apache\jmeter\protocol\ldap\sampler\LdapExtClient.java",280
152,"'-tryline","/** 
 * This will do the add test for the User defined TestCase
 */
private void addTest(DirContext dirContext,SampleResult res) throws NamingException {
  DirContext ctx=null;
  try {
    res.sampleStart();
    ctx=LdapExtClient.createTest(dirContext,getUserAttributes(),getBaseEntryDN());
  }
  finally {
    LdapExtClient.disconnect(ctx);
    res.sampleEnd();
  }
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\ldap\src\main\java\org\apache\jmeter\protocol\ldap\sampler\LDAPExtSampler.java",620
153,"'-tryline","/** 
 * This will do the delete test for the User defined TestCase
 */
private void deleteTest(DirContext dirContext,SampleResult res) throws NamingException {
  try {
    res.sampleStart();
    LdapExtClient.deleteTest(dirContext,getPropertyAsString(DELETE));
  }
  finally {
    res.sampleEnd();
  }
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\ldap\src\main\java\org\apache\jmeter\protocol\ldap\sampler\LDAPExtSampler.java",636
154,"'-tryline","/** 
 * This will do the modify test for the User defined TestCase
 */
private void modifyTest(DirContext dirContext,SampleResult res) throws NamingException {
  try {
    res.sampleStart();
    LdapExtClient.modifyTest(dirContext,getUserModAttributes(),getBaseEntryDN());
  }
  finally {
    res.sampleEnd();
  }
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\ldap\src\main\java\org\apache\jmeter\protocol\ldap\sampler\LDAPExtSampler.java",649
155,"'-tryline","/** 
 * This will do the bind for the User defined Thread, this bind is used for the whole context
 */
private void bindOp(SampleResult res) throws NamingException {
  DirContext ctx=ldapContexts.remove(getThreadName());
  if (ctx != null) {
    if (log.isWarnEnabled()) {
      log.warn(Closing previous context for thread: {},getThreadName());
    }
    LdapExtClient.disconnect(ctx);
  }
  try {
    res.sampleStart();
    ctx=LdapExtClient.connect(getServername(),getPort(),getRootdn(),getUserDN(),getUserPw(),getConnTimeOut(),isSecure(),isTrustAll());
  }
  finally {
    res.sampleEnd();
  }
  ldapContexts.put(getThreadName(),ctx);
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\ldap\src\main\java\org\apache\jmeter\protocol\ldap\sampler\LDAPExtSampler.java",662
156,"'-tryline","/** 
 * This will do the bind and unbind for the User defined TestCase
 */
private void singleBindOp(SampleResult res) throws NamingException {
  try {
    res.sampleStart();
    DirContext ctx=LdapExtClient.connect(getServername(),getPort(),getRootdn(),getUserDN(),getUserPw(),getConnTimeOut(),isSecure(),isTrustAll());
    LdapExtClient.disconnect(ctx);
  }
  finally {
    res.sampleEnd();
  }
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\ldap\src\main\java\org\apache\jmeter\protocol\ldap\sampler\LDAPExtSampler.java",685
157,"'-tryline","/** 
 * This will do a moddn Opp for the User new DN defined
 */
private void renameTest(DirContext dirContext,SampleResult res) throws NamingException {
  try {
    res.sampleStart();
    LdapExtClient.moddnOp(dirContext,getPropertyAsString(MODDDN),getPropertyAsString(NEWDN));
  }
  finally {
    res.sampleEnd();
  }
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\ldap\src\main\java\org\apache\jmeter\protocol\ldap\sampler\LDAPExtSampler.java",700
158,"'-tryline","private void writeSearchResults(final XMLBuffer xmlb,final NamingEnumeration<SearchResult> srch) throws NamingException {
  final ArrayList<SearchResult> sortedResults=new ArrayList<>(MAX_SORTED_RESULTS);
  final String searchBase=getPropertyAsString(SEARCHBASE);
  final String rootDn=getRootdn();
  try {
    while (srch.hasMore() && (sortedResults.size() < MAX_SORTED_RESULTS)) {
      final SearchResult sr=srch.next();
      normaliseSearchDN(sr,searchBase,rootDn);
      sortedResults.add(sr);
    }
  }
  finally {
    sortResults(sortedResults);
    for (    final SearchResult sr : sortedResults) {
      writeSearchResult(sr,xmlb);
    }
  }
  while (srch.hasMore()) {
    final SearchResult sr=srch.next();
    normaliseSearchDN(sr,searchBase,rootDn);
    writeSearchResult(sr,xmlb);
  }
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\ldap\src\main\java\org\apache\jmeter\protocol\ldap\sampler\LDAPExtSampler.java",883
159,"'-tryline","private void writeSearchResult(final SearchResult sr,final XMLBuffer xmlb) throws NamingException {
  final Attributes attrs=sr.getAttributes();
  final int size=attrs.size();
  final List<Attribute> sortedAttrs=new ArrayList<>(size);
  xmlb.openTag(searchresult);
  xmlb.tag(dn,sr.getName());
  xmlb.tag(returnedattr,Integer.toString(size));
  xmlb.openTag(attributes);
  try {
    for (NamingEnumeration<? extends Attribute> en=attrs.getAll(); en.hasMore(); ) {
      final Attribute attr=en.next();
      sortedAttrs.add(attr);
    }
    sortAttributes(sortedAttrs);
    for (    final Attribute attr : sortedAttrs) {
      StringBuilder sb=new StringBuilder();
      if (attr.size() == 1) {
        sb.append(getWriteValue(attr.get()));
      }
 else {
        final ArrayList<String> sortedVals=new ArrayList<>(attr.size());
        for (NamingEnumeration<?> ven=attr.getAll(); ven.hasMore(); ) {
          final Object value=getWriteValue(ven.next());
          sortedVals.add(value.toString());
        }
        Collections.sort(sortedVals);
        sb.append(StringUtils.join(sortedVals,, ));
      }
      xmlb.tag(attr.getID(),sb);
    }
  }
  finally {
    xmlb.closeTag(attributes);
    xmlb.closeTag(searchresult);
  }
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\ldap\src\main\java\org\apache\jmeter\protocol\ldap\sampler\LDAPExtSampler.java",918
160,"'-tryline","/** 
 * This will do the add test for the User defined TestCase as well as inbuilt test case.
 */
private void addTest(LdapClient ldap,SampleResult res) throws NamingException {
  if (getPropertyAsBoolean(USER_DEFINED)) {
    res.sampleStart();
    ldap.createTest(getUserAttributes(),getPropertyAsString(BASE_ENTRY_DN));
    res.sampleEnd();
  }
 else {
    res.sampleStart();
    ldap.createTest(getBasicAttributes(),getPropertyAsString(ADD));
    res.sampleEnd();
    ldap.deleteTest(getPropertyAsString(ADD));
  }
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\ldap\src\main\java\org\apache\jmeter\protocol\ldap\sampler\LDAPSampler.java",362
161,"'-tryline","/** 
 * This will do the delete test for the User defined TestCase as well as inbuilt test case.
 */
private void deleteTest(LdapClient ldap,SampleResult res) throws NamingException {
  if (!getPropertyAsBoolean(USER_DEFINED)) {
    ldap.createTest(getBasicAttributes(),getPropertyAsString(ADD));
    setProperty(new StringProperty(DELETE,getPropertyAsString(ADD)));
  }
  res.sampleStart();
  ldap.deleteTest(getPropertyAsString(DELETE));
  res.sampleEnd();
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\ldap\src\main\java\org\apache\jmeter\protocol\ldap\sampler\LDAPSampler.java",380
162,"'-tryline","/** 
 * This will do the search test for the User defined TestCase as well as inbuilt test case.
 */
private void searchTest(LdapClient ldap,SampleResult res) throws NamingException {
  if (!getPropertyAsBoolean(USER_DEFINED)) {
    ldap.createTest(getBasicAttributes(),getPropertyAsString(ADD));
    setProperty(new StringProperty(SEARCHBASE,getPropertyAsString(ADD)));
    setProperty(new StringProperty(SEARCHFILTER,getPropertyAsString(ADD)));
  }
  res.sampleStart();
  searchFoundEntries=ldap.searchTest(getPropertyAsString(SEARCHBASE),getPropertyAsString(SEARCHFILTER));
  res.sampleEnd();
  if (!getPropertyAsBoolean(USER_DEFINED)) {
    ldap.deleteTest(getPropertyAsString(ADD));
  }
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\ldap\src\main\java\org\apache\jmeter\protocol\ldap\sampler\LDAPSampler.java",395
163,"'-tryline","/** 
 * This will do the search test for the User defined TestCase as well as inbuilt test case.
 */
private void modifyTest(LdapClient ldap,SampleResult res) throws NamingException {
  if (getPropertyAsBoolean(USER_DEFINED)) {
    res.sampleStart();
    ldap.modifyTest(getUserModAttributes(),getPropertyAsString(BASE_ENTRY_DN));
    res.sampleEnd();
  }
 else {
    ldap.createTest(getBasicAttributes(),getPropertyAsString(ADD));
    setProperty(new StringProperty(MODIFY,getPropertyAsString(ADD)));
    res.sampleStart();
    ldap.modifyTest(getModificationItem(),getPropertyAsString(MODIFY));
    res.sampleEnd();
    ldap.deleteTest(getPropertyAsString(ADD));
  }
}
","javax.naming.NamingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\ldap\src\main\java\org\apache\jmeter\protocol\ldap\sampler\LDAPSampler.java",414
164,"'-tryline","/** 
 * Returns the SSLContext we are using. This is either a context per thread, or, for backwards compatibility, a single shared context.
 * @return The Context value
 * @throws GeneralSecurityException when constructing the context fails
 */
public SSLContext getContext() throws GeneralSecurityException {
  if (SHARED_SESSION_CONTEXT) {
    if (log.isDebugEnabled()) {
      log.debug(Using shared SSL context for: {},Thread.currentThread().getName());
    }
    return this.defaultContext;
  }
  SSLContext sslContext=this.threadlocal.get();
  if (sslContext == null) {
    if (log.isDebugEnabled()) {
      log.debug(Creating threadLocal SSL context for: {},Thread.currentThread().getName());
    }
    sslContext=createContext();
    this.threadlocal.set(sslContext);
  }
  if (log.isDebugEnabled()) {
    log.debug(Using threadLocal SSL context for: {},Thread.currentThread().getName());
  }
  return sslContext;
}
","java.security.GeneralSecurityException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\JsseSSLManager.java",154
165,"'-tryline","private SSLContext createContext() throws GeneralSecurityException {
  SSLContext context;
  if (pro != null) {
    context=SSLContext.getInstance(DEFAULT_SSL_PROTOCOL,pro);
  }
 else {
    context=SSLContext.getInstance(DEFAULT_SSL_PROTOCOL);
  }
  KeyManagerFactory managerFactory=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
  JmeterKeyStore keys=this.getKeyStore();
  managerFactory.init(null,defaultpw == null ? new char[]{} : defaultpw.toCharArray());
  KeyManager[] managers=managerFactory.getKeyManagers();
  KeyManager[] newManagers=new KeyManager[managers.length];
  if (log.isDebugEnabled()) {
    log.debug(JmeterKeyStore type: {},keys.getClass());
  }
  for (int i=0; i < managers.length; i++) {
    if (managers[i] instanceof X509KeyManager) {
      X509KeyManager manager=(X509KeyManager)managers[i];
      newManagers[i]=new WrappedX509KeyManager(manager,keys);
    }
 else {
      newManagers[i]=managers[i];
    }
  }
  TrustManagerFactory tmfactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
  tmfactory.init(this.getTrustStore());
  TrustManager[] trustmanagers=tmfactory.getTrustManagers();
  for (int i=0; i < trustmanagers.length; i++) {
    if (trustmanagers[i] instanceof X509TrustManager) {
      trustmanagers[i]=new CustomX509TrustManager((X509TrustManager)trustmanagers[i]);
    }
  }
  context.init(newManagers,trustmanagers,this.rand);
  if (log.isDebugEnabled()) {
    String[] dCiphers=context.getSocketFactory().getDefaultCipherSuites();
    String[] sCiphers=context.getSocketFactory().getSupportedCipherSuites();
    int len=(dCiphers.length > sCiphers.length) ? dCiphers.length : sCiphers.length;
    for (int i=0; i < len; i++) {
      if (i < dCiphers.length) {
        log.debug(Default Cipher: {},dCiphers[i]);
      }
      if (i < sCiphers.length) {
        log.debug(Supported Cipher: {},sCiphers[i]);
      }
    }
  }
  return context;
}
","java.security.GeneralSecurityException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\JsseSSLManager.java",204
166,"'-tryline","/** 
 * Return the key managers, wrapped to return a specific alias
 */
private KeyManager[] getWrappedKeyManagers(final String keyAlias) throws GeneralSecurityException, IOException {
  if (!keyStore.containsAlias(keyAlias)) {
    throw new IOException(Keystore does not contain alias  + keyAlias);
  }
  KeyManagerFactory kmf=KeyManagerFactory.getInstance(KEYMANAGERFACTORY);
  kmf.init(keyStore,keyPassword.toCharArray());
  final KeyManager[] keyManagers=kmf.getKeyManagers();
  final int keyManagerCount=keyManagers.length;
  final KeyManager[] wrappedKeyManagers=new KeyManager[keyManagerCount];
  for (int i=0; i < keyManagerCount; i++) {
    wrappedKeyManagers[i]=new ServerAliasKeyManager(keyManagers[i],keyAlias);
  }
  return wrappedKeyManagers;
}
","java.security.GeneralSecurityException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\Proxy.java",420
167,"'-tryline","private void initKeyStore() throws IOException, GeneralSecurityException {
switch (KEYSTORE_MODE) {
case DYNAMIC_KEYSTORE:
    storePassword=getPassword();
  keyPassword=getPassword();
initDynamicKeyStore();
break;
case JMETER_KEYSTORE:
storePassword=getPassword();
keyPassword=getPassword();
initJMeterKeyStore();
break;
case USER_KEYSTORE:
storePassword=JMeterUtils.getPropDefault(proxy.cert.keystorepass,DEFAULT_PASSWORD);
keyPassword=JMeterUtils.getPropDefault(proxy.cert.keypassword,DEFAULT_PASSWORD);
log.info(HTTP(S) Test Script Recorder will use the keystore '{}' with the alias: '{}',CERT_PATH_ABS,CERT_ALIAS);
initUserKeyStore();
break;
case NONE:
throw new IOException(Cannot find keytool application and no keystore was provided);
default :
throw new IllegalStateException(Impossible case:  + KEYSTORE_MODE);
}
}
","java.security.GeneralSecurityException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\ProxyControl.java",1475
168,"'-tryline","/** 
 * Initialise the dynamic domain keystore
 */
@SuppressWarnings(JdkObsolete) private void initDynamicKeyStore() throws IOException, GeneralSecurityException {
  if (storePassword != null) {
    try {
      keyStore=getKeyStore(storePassword.toCharArray());
      for (      String alias : KeyToolUtils.getCAaliases()) {
        X509Certificate caCert=(X509Certificate)keyStore.getCertificate(alias);
        if (caCert == null) {
          keyStore=null;
          break;
        }
 else {
          caCert.checkValidity(new Date(System.currentTimeMillis() + DateUtils.MILLIS_PER_DAY));
          log.info(Valid alias found for {},alias);
        }
      }
    }
 catch (    IOException e) {
      keyStore=null;
      if (e.getCause() instanceof UnrecoverableKeyException) {
        log.warn(Could not read key store {}; cause: {}, a new one will be created, ensure you install it in browser,e.getMessage(),e.getCause().getMessage(),e);
      }
 else {
        log.warn(Could not open/read key store {}, a new one will be created, ensure you install it in browser,e.getMessage(),e);
      }
    }
catch (    CertificateExpiredException e) {
      keyStore=null;
      log.warn(Existing ROOT Certificate has expired, a new one will be created, ensure you install it in browser, message: {},e.getMessage(),e);
    }
catch (    CertificateNotYetValidException e) {
      keyStore=null;
      log.warn(Existing ROOT Certificate is not yet valid, a new one will be created, ensure you install it in browser, message: {},e.getMessage(),e);
    }
catch (    GeneralSecurityException e) {
      keyStore=null;
      log.warn(Problem reading key store, a new one will be created, ensure you install it in browser, message: {},e.getMessage(),e);
    }
  }
  if (keyStore == null) {
    storePassword=JOrphanUtils.generateRandomAlphanumericPassword(20);
    keyPassword=storePassword;
    setPassword(storePassword);
    log.info(Creating HTTP(S) Test Script Recorder Root CA in {}, ensure you install certificate in your Browser for recording,CERT_PATH_ABS);
    KeyToolUtils.generateProxyCA(CERT_PATH,storePassword,CERT_VALIDITY);
    log.info(Created keystore in {},CERT_PATH_ABS);
    keyStore=getKeyStore(storePassword.toCharArray());
  }
  final String sslDomains=getSslDomains().trim();
  if (sslDomains.length() > 0) {
    final String[] domains=sslDomains.split(,);
    for (    String subject : domains) {
      if (isValid(subject)) {
        if (!keyStore.containsAlias(subject)) {
          log.info(Creating entry {} in {},subject,CERT_PATH_ABS);
          KeyToolUtils.generateHostCert(CERT_PATH,storePassword,subject,CERT_VALIDITY);
          keyStore=getKeyStore(storePassword.toCharArray());
        }
      }
 else {
        log.warn(Attempt to create an invalid domain certificate: {},subject);
      }
    }
  }
}
","java.security.GeneralSecurityException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\ProxyControl.java",1522
169,"'-tryline","KeyStore updateKeyStore(String port,String host) throws IOException, GeneralSecurityException {
synchronized (CERT_PATH) {
    if (!keyStore.containsAlias(host)) {
      log.info({} Creating entry {} in {},port,host,CERT_PATH_ABS);
      KeyToolUtils.generateHostCert(CERT_PATH,storePassword,host,CERT_VALIDITY);
    }
    keyStore=getKeyStore(storePassword.toCharArray());
  }
  return keyStore;
}
","java.security.GeneralSecurityException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\ProxyControl.java",1607
170,"'-tryline","/** 
 * Initialise the single key JMeter keystore (original behaviour)
 */
@SuppressWarnings(JdkObsolete) private void initJMeterKeyStore() throws IOException, GeneralSecurityException {
  if (storePassword != null) {
    try {
      keyStore=getKeyStore(storePassword.toCharArray());
      X509Certificate caCert=(X509Certificate)keyStore.getCertificate(JMETER_SERVER_ALIAS);
      caCert.checkValidity(new Date(System.currentTimeMillis() + DateUtils.MILLIS_PER_DAY));
    }
 catch (    Exception e) {
      keyStore=null;
      log.warn(Could not open expected file or certificate is not valid {} {},CERT_PATH_ABS,e.getMessage(),e);
    }
  }
  if (keyStore == null) {
    storePassword=JOrphanUtils.generateRandomAlphanumericPassword(20);
    keyPassword=storePassword;
    setPassword(storePassword);
    log.info(Generating standard keypair in {},CERT_PATH_ABS);
    if (!CERT_PATH.delete()) {
      log.warn(Could not delete {}, this could create issues, stop jmeter, ensure file is deleted and restart again,CERT_PATH.getAbsolutePath());
    }
    KeyToolUtils.genkeypair(CERT_PATH,JMETER_SERVER_ALIAS,storePassword,CERT_VALIDITY,null,null);
    keyStore=getKeyStore(storePassword.toCharArray());
  }
}
","java.security.GeneralSecurityException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\ProxyControl.java",1618
171,"'-tryline","private KeyStore getKeyStore(char[] password) throws GeneralSecurityException, IOException {
  try (InputStream in=new BufferedInputStream(new FileInputStream(CERT_PATH))){
    log.debug(Opened Keystore file: {},CERT_PATH_ABS);
    KeyStore ks=KeyStore.getInstance(KEYSTORE_TYPE);
    ks.load(in,password);
    log.debug(Loaded Keystore file: {},CERT_PATH_ABS);
    return ks;
  }
 }
","java.security.GeneralSecurityException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\ProxyControl.java",1650
172,"'-tryline","private MutableTriple<CloseableHttpClient,AuthState,PoolingHttpClientConnectionManager> setupClient(HttpClientKey key,JMeterVariables jMeterVariables,HttpClientContext clientContext) throws GeneralSecurityException {
  Map<HttpClientKey,MutableTriple<CloseableHttpClient,AuthState,PoolingHttpClientConnectionManager>> mapHttpClientPerHttpClientKey=HTTPCLIENTS_CACHE_PER_THREAD_AND_HTTPCLIENTKEY.get();
  clientContext.setAttribute(CONTEXT_ATTRIBUTE_CLIENT_KEY,key);
  CloseableHttpClient httpClient=null;
  MutableTriple<CloseableHttpClient,AuthState,PoolingHttpClientConnectionManager> triple=null;
  boolean concurrentDwn=this.testElement.isConcurrentDwn();
  Map<String,Object> samplerContext=JMeterContextService.getContext().getSamplerContext();
  if (concurrentDwn) {
    triple=(MutableTriple<CloseableHttpClient,AuthState,PoolingHttpClientConnectionManager>)samplerContext.get(CONTEXT_ATTRIBUTE_PARENT_SAMPLE_CLIENT_STATE);
  }
  if (triple == null) {
    triple=mapHttpClientPerHttpClientKey.get(key);
  }
  if (triple != null) {
    httpClient=triple.getLeft();
  }
  setupProxyAuthState(triple,clientContext);
  resetStateIfNeeded(triple,jMeterVariables,clientContext,mapHttpClientPerHttpClientKey);
  if (httpClient == null) {
    DnsResolver resolver=this.testElement.getDNSResolver();
    if (resolver == null) {
      resolver=SystemDefaultDnsResolver.INSTANCE;
    }
    Registry<ConnectionSocketFactory> registry=RegistryBuilder.<ConnectionSocketFactory>create().register(https,new LazyLayeredConnectionSocketFactory()).register(http,CONNECTION_SOCKET_FACTORY).build();
    PoolingHttpClientConnectionManager pHCCM=new PoolingHttpClientConnectionManager(new JMeterDefaultHttpClientConnectionOperator(registry,null,resolver),null,TIME_TO_LIVE,TimeUnit.MILLISECONDS);
    pHCCM.setValidateAfterInactivity(VALIDITY_AFTER_INACTIVITY_TIMEOUT);
    if (concurrentDwn) {
      try {
        int maxConcurrentDownloads=Integer.parseInt(this.testElement.getConcurrentPool());
        pHCCM.setDefaultMaxPerRoute(Math.max(maxConcurrentDownloads,pHCCM.getDefaultMaxPerRoute()));
      }
 catch (      NumberFormatException nfe) {
      }
    }
    CookieSpecProvider cookieSpecProvider=new IgnoreSpecProvider();
    Lookup<CookieSpecProvider> cookieSpecRegistry=RegistryBuilder.<CookieSpecProvider>create().register(CookieSpecs.IGNORE_COOKIES,cookieSpecProvider).build();
    HttpClientBuilder builder=HttpClients.custom().setConnectionManager(pHCCM).setSchemePortResolver(new DefaultSchemePortResolver()).setDnsResolver(resolver).setRequestExecutor(REQUEST_EXECUTOR).setSSLSocketFactory(new LazyLayeredConnectionSocketFactory()).setDefaultCookieSpecRegistry(cookieSpecRegistry).setDefaultSocketConfig(SocketConfig.DEFAULT).setRedirectStrategy(new LaxRedirectStrategy()).setConnectionTimeToLive(TIME_TO_LIVE,TimeUnit.MILLISECONDS).setRetryHandler(new StandardHttpRequestRetryHandler(RETRY_COUNT,REQUEST_SENT_RETRY_ENABLED)).setConnectionReuseStrategy(DefaultClientConnectionReuseStrategy.INSTANCE).setProxyAuthenticationStrategy(getProxyAuthStrategy());
    if (DISABLE_DEFAULT_UA) {
      builder.disableDefaultUserAgent();
    }
    Lookup<AuthSchemeProvider> authSchemeRegistry=RegistryBuilder.<AuthSchemeProvider>create().register(AuthSchemes.BASIC,new BasicSchemeFactory()).register(AuthSchemes.DIGEST,new DigestSchemeFactory()).register(AuthSchemes.NTLM,new NTLMSchemeFactory()).register(AuthSchemes.SPNEGO,new DynamicSPNegoSchemeFactory(AuthManager.STRIP_PORT,AuthManager.USE_CANONICAL_HOST_NAME)).register(AuthSchemes.KERBEROS,new DynamicKerberosSchemeFactory(AuthManager.STRIP_PORT,AuthManager.USE_CANONICAL_HOST_NAME)).build();
    builder.setDefaultAuthSchemeRegistry(authSchemeRegistry);
    if (IDLE_TIMEOUT > 0) {
      builder.setKeepAliveStrategy(IDLE_STRATEGY);
    }
    AuthScope proxyAuthScope=null;
    NTCredentials proxyCredentials=null;
    if (key.hasProxy) {
      HttpHost proxy=new HttpHost(key.proxyHost,key.proxyPort,key.proxyScheme);
      builder.setProxy(proxy);
      CredentialsProvider credsProvider=new BasicCredentialsProvider();
      if (!key.proxyUser.isEmpty()) {
        proxyAuthScope=new AuthScope(key.proxyHost,key.proxyPort);
        proxyCredentials=new NTCredentials(key.proxyUser,key.proxyPass,LOCALHOST,PROXY_DOMAIN);
        credsProvider.setCredentials(proxyAuthScope,proxyCredentials);
      }
      builder.setDefaultCredentialsProvider(credsProvider);
    }
    builder.disableContentCompression().addInterceptorLast(RESPONSE_CONTENT_ENCODING);
    if (BASIC_AUTH_PREEMPTIVE) {
      builder.addInterceptorFirst(PREEMPTIVE_AUTH_INTERCEPTOR);
    }
 else {
      builder.setDefaultCredentialsProvider(new ManagedCredentialsProvider(getAuthManager(),proxyAuthScope,proxyCredentials));
    }
    httpClient=builder.build();
    if (log.isDebugEnabled()) {
      log.debug(Created new HttpClient: @{} {},System.identityHashCode(httpClient),key);
    }
    triple=MutableTriple.of(httpClient,null,pHCCM);
    mapHttpClientPerHttpClientKey.put(key,triple);
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug(Reusing the HttpClient: @{} {},System.identityHashCode(httpClient),key);
    }
  }
  if (concurrentDwn) {
    samplerContext.put(CONTEXT_ATTRIBUTE_PARENT_SAMPLE_CLIENT_STATE,triple);
  }
  return triple;
}
","java.security.GeneralSecurityException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPHC4Impl.java",1051
173,"'-tryline","public KerberosManager initKerberosManager() throws IllegalAccessException, NoSuchFieldException {
  KerberosManager kerberosManager=new KerberosManager();
  Future<Subject> future=Executors.newSingleThreadExecutor().submit(() -> new Subject());
  subjects.put(test,future);
  Field privateField=kerberosManager.getClass().getDeclaredField(subjects);
  privateField.setAccessible(true);
  privateField.set(kerberosManager,subjects);
  return kerberosManager;
}
","java.lang.NoSuchFieldException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestAuthManagerThreadIteration.java",43
174,"'-tryline","@Test public void testJmeterVariableAuthorizationWhenThreadIterationIsADifferentUser() throws IllegalAccessException, NoSuchFieldException {
  KerberosManager kerberosManager=initKerberosManager();
  AuthManager authManager=new AuthManager();
  Field authPrivateField=authManager.getClass().getDeclaredField(kerberosManager);
  authPrivateField.setAccessible(true);
  authPrivateField.set(authManager,kerberosManager);
  assertNotNull(Before the iteration, the AuthManager shouldn't be cleared,subjects.get(test));
  authManager.setControlledByThread(false);
  authManager.setClearEachIteration(true);
  authManager.testIterationStart(null);
  assertNull(After the iteration, the AuthManager should be cleared,subjects.get(test));
  kerberosManager=initKerberosManager();
  jmvars.putObject(SAME_USER,false);
  jmctx.setVariables(jmvars);
  authManager.setThreadContext(jmctx);
  authPrivateField.set(authManager,kerberosManager);
  assertNotNull(Before the iteration, the AuthManager shouldn't be cleared,subjects.get(test));
  authManager.setControlledByThread(true);
  authManager.setClearEachIteration(false);
  authManager.testIterationStart(null);
  assertNull(After the iteration, the AuthManager should be cleared,subjects.get(test));
}
","java.lang.NoSuchFieldException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestAuthManagerThreadIteration.java",59
175,"'-tryline","@Test public void testJmeterVariableAuthorizationWhenThreadIterationIsASameUser() throws IllegalAccessException, NoSuchFieldException {
  KerberosManager kerberosManager=initKerberosManager();
  AuthManager authManager=new AuthManager();
  Field authPrivateField=authManager.getClass().getDeclaredField(kerberosManager);
  authPrivateField.setAccessible(true);
  authPrivateField.set(authManager,kerberosManager);
  assertNotNull(Before the iteration, the AuthManager shouldn't be cleared,subjects.get(test));
  authManager.setControlledByThread(false);
  authManager.setClearEachIteration(false);
  authManager.testIterationStart(null);
  assertNotNull(After the iteration, the AuthManager shouldn't be cleared,subjects.get(test));
  kerberosManager=initKerberosManager();
  jmvars.putObject(SAME_USER,true);
  jmctx.setVariables(jmvars);
  authManager.setThreadContext(jmctx);
  authPrivateField.set(authManager,kerberosManager);
  assertNotNull(Before the iteration, the AuthManager shouldn't be cleared,subjects.get(test));
  authManager.setControlledByThread(true);
  authManager.setClearEachIteration(false);
  authManager.testIterationStart(null);
  assertNotNull(After the iteration, the AuthManager shouldn't be cleared,subjects.get(test));
}
","java.lang.NoSuchFieldException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestAuthManagerThreadIteration.java",86
176,"'-tryline","@Test public void testCookieManagerWhenThreadIterationIsNewUser() throws NoSuchFieldException, IllegalAccessException {
  jmvars.putObject(SAME_USER,false);
  jmctx.setVariables(jmvars);
  CookieManager cookieManagerDynamic=new CookieManager();
  cookieManagerDynamic.setThreadContext(jmctx);
  cookieManagerDynamic.getCookies().clear();
  cookieManagerDynamic.testStarted();
  Cookie cookieDynamic=new Cookie();
  cookieDynamic.setName(DYNAMIC_COOKIE);
  cookieManagerDynamic.getCookies().addItem(cookieDynamic);
  cookieManagerDynamic.setControlledByThread(true);
  Field privateStringField=CookieManager.class.getDeclaredField(initialCookies);
  privateStringField.setAccessible(true);
  CookieManager cookieManagerStatic=new CookieManager();
  Cookie cookieStatic=new Cookie();
  cookieStatic.setName(STATIC_COOKIE);
  cookieManagerStatic.getCookies().addItem(cookieStatic);
  CollectionProperty initialCookies=cookieManagerStatic.getCookies();
  privateStringField.set(cookieManagerDynamic,initialCookies);
  assertTrue(Before the iteration,the quantity of cookies should be 1,cookieManagerDynamic.getCookies().size() == 1);
  assertEquals(Before the iteration, the value of cookie should be what user have set,DYNAMIC_COOKIE,cookieManagerDynamic.getCookies().get(0).getName());
  cookieManagerDynamic.testIterationStart(null);
  assertEquals(After the iteration, the value of cookie should be the initial cookies,STATIC_COOKIE,cookieManagerDynamic.getCookies().get(0).getName());
  assertTrue(After the iteration, the quantity of cookies should be 1,cookieManagerDynamic.getCookies().size() == 1);
  jmvars.putObject(SAME_USER,true);
  jmctx.setVariables(jmvars);
  cookieManagerDynamic.setThreadContext(jmctx);
  cookieManagerDynamic.getCookies().clear();
  cookieManagerDynamic.testStarted();
  cookieDynamic.setName(DYNAMIC_COOKIE);
  cookieManagerDynamic.getCookies().addItem(cookieDynamic);
  cookieManagerDynamic.setClearEachIteration(true);
  cookieManagerDynamic.setControlledByThread(false);
  cookieManagerStatic.getCookies().clear();
  cookieManagerStatic.getCookies().addItem(cookieStatic);
  initialCookies=cookieManagerStatic.getCookies();
  privateStringField.set(cookieManagerDynamic,initialCookies);
  assertEquals(Before the iteration, the value of cookie should be what user have set,DYNAMIC_COOKIE,cookieManagerDynamic.getCookies().get(0).getName());
  assertTrue(Before the iteration,the quantity of cookies should be 1,cookieManagerDynamic.getCookies().size() == 1);
  cookieManagerDynamic.testIterationStart(null);
  assertEquals(After the iteration, the value of cookie should be the initial cookies,STATIC_COOKIE,cookieManagerDynamic.getCookies().get(0).getName());
  assertTrue(After the iteration, the quantity of cookies should be 1,cookieManagerDynamic.getCookies().size() == 1);
}
","java.lang.NoSuchFieldException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCookieManagerThreadIteration.java",74
177,"'-tryline","@Test public void testCookieManagerWhenThreadIterationIsSameUser() throws NoSuchFieldException, IllegalAccessException {
  jmvars.putObject(SAME_USER,true);
  jmctx.setVariables(jmvars);
  CookieManager cookieManagerDynamic=new CookieManager();
  cookieManagerDynamic.setThreadContext(jmctx);
  cookieManagerDynamic.getCookies().clear();
  cookieManagerDynamic.testStarted();
  Cookie cookieDynamic=new Cookie();
  cookieDynamic.setName(DYNAMIC_COOKIE);
  cookieManagerDynamic.getCookies().addItem(cookieDynamic);
  cookieManagerDynamic.setControlledByThread(true);
  Field privateStringField=CookieManager.class.getDeclaredField(initialCookies);
  privateStringField.setAccessible(true);
  CookieManager cookieManagerStatic=new CookieManager();
  Cookie cookieStatic=new Cookie();
  cookieStatic.setName(STATIC_COOKIE);
  cookieManagerStatic.getCookies().addItem(cookieStatic);
  CollectionProperty initialCookies=cookieManagerStatic.getCookies();
  privateStringField.set(cookieManagerDynamic,initialCookies);
  assertTrue(Before the iteration,the quantity of cookies should be 1,cookieManagerDynamic.getCookies().size() == 1);
  assertEquals(Before the iteration, the value of cookie should be what user have set,DYNAMIC_COOKIE,cookieManagerDynamic.getCookies().get(0).getName());
  cookieManagerDynamic.testIterationStart(null);
  assertEquals(After the iteration, the value of cookie should be what user have set,DYNAMIC_COOKIE,cookieManagerDynamic.getCookies().get(0).getName());
  assertTrue(After the iteration, the quantity of cookies should be 1,cookieManagerDynamic.getCookies().size() == 1);
  jmvars.putObject(SAME_USER,false);
  jmctx.setVariables(jmvars);
  cookieManagerDynamic.setControlledByThread(false);
  cookieManagerDynamic.getCookies().clear();
  cookieManagerDynamic.testStarted();
  cookieDynamic.setName(DYNAMIC_COOKIE);
  cookieManagerDynamic.getCookies().addItem(cookieDynamic);
  cookieManagerDynamic.setClearEachIteration(false);
  cookieManagerStatic.getCookies().clear();
  cookieStatic.setName(STATIC_COOKIE);
  privateStringField.set(cookieManagerDynamic,initialCookies);
  assertEquals(Before the iteration, the value of cookie should be what user have set,DYNAMIC_COOKIE,cookieManagerDynamic.getCookies().get(0).getName());
  assertTrue(Before the iteration,the quantity of cookies should be 1,cookieManagerDynamic.getCookies().size() == 1);
  cookieManagerDynamic.testIterationStart(null);
  assertEquals(After the iteration, the value of cookie should be what user have set,DYNAMIC_COOKIE,cookieManagerDynamic.getCookies().get(0).getName());
  assertTrue(After the iteration, the quantity of cookies should be 1,cookieManagerDynamic.getCookies().size() == 1);
}
","java.lang.NoSuchFieldException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCookieManagerThreadIteration.java",129
178,"'-tryline","/** 
 * Obtain the queue connection from the context and factory name.
 * @param ctx context to use
 * @param factoryName name of the object factory to look up in <code>context</code>
 * @return the queue connection
 * @throws JMSException when creation of the connection fails
 * @throws NamingException when lookup in context fails
 */
public static Connection getConnection(Context ctx,String factoryName) throws JMSException, NamingException {
  Object objfac=null;
  try {
    objfac=ctx.lookup(factoryName);
  }
 catch (  NoClassDefFoundError e) {
    throw new NamingException(Lookup failed:  + e.toString());
  }
  if (objfac instanceof javax.jms.ConnectionFactory) {
    String username=getFromEnvironment(ctx,Context.SECURITY_PRINCIPAL);
    if (username != null) {
      String password=getFromEnvironment(ctx,Context.SECURITY_CREDENTIALS);
      return ((javax.jms.ConnectionFactory)objfac).createConnection(username,password);
    }
 else {
      return ((javax.jms.ConnectionFactory)objfac).createConnection();
    }
  }
  throw new NamingException(Expected javax.jms.ConnectionFactory, found  + (objfac != null ? objfac.getClass().getName() : null));
}
","org.apache.jmeter.protocol.jms.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\Utils.java",184
179,"'-tryline","/** 
 * Set JMS Properties to msg
 * @param msg Message to operate on
 * @param map Map of Properties to be set on the message
 * @throws JMSException when <code>msg</code> throws a {@link JMSException} while the properties get set
 */
public static void addJMSProperties(Message msg,Map<String,Object> map) throws JMSException {
  if (map == null) {
    return;
  }
  for (  Map.Entry<String,Object> me : map.entrySet()) {
    String name=me.getKey();
    Object value=me.getValue();
    if (log.isDebugEnabled()) {
      log.debug(Adding property [{}={}],name,value);
    }
    if (JMSCorrelationID.equalsIgnoreCase(name)) {
      msg.setJMSCorrelationID((String)value);
    }
 else     if (JMSType.equalsIgnoreCase(name)) {
      msg.setJMSType((String)value);
    }
 else {
      msg.setObjectProperty(name,value);
    }
  }
}
","org.apache.jmeter.protocol.jms.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\Utils.java",217
180,"'-tryline","@Override public void redo() throws CannotRedoException {
  super.redo();
  loader.accept(item);
}
","javax.swing.undo.CannotRedoException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\GlobalUndoableEdit.java",46
181,"'-tryline","@Test public void testBug59609() throws ParseException {
  JMeterContext context=JMeterContextService.getContext();
  JSONPostProcessor processor=setupProcessor(context,0,false);
  String innerValue={\a\:\one\,\b\:\two\};
  String data={\context\: + innerValue + };
  SampleResult result=new SampleResult();
  result.setResponseData(data.getBytes(StandardCharsets.UTF_8));
  JMeterVariables vars=new JMeterVariables();
  context.setVariables(vars);
  context.setPreviousResult(result);
  processor.setJsonPathExpressions($.context);
  processor.process();
  JSONParser parser=new JSONParser(0);
  Object expectedValue=parser.parse(innerValue);
  assertThat(parser.parse(vars.get(VAR_NAME)),CoreMatchers.is(expectedValue));
  assertThat(vars.get(VAR_NAME + _matchNr),CoreMatchers.is(CoreMatchers.nullValue()));
  assertThat(vars.get(VAR_NAME + _1),CoreMatchers.is(CoreMatchers.nullValue()));
}
","net.minidev.json.parser.ParseException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\extractor\TestJSONPostProcessor.java",159
182,"'-tryline","/** 
 * Compute namespaces for XML
 * @param xml XML content
 * @return List of Namespaces
 * @throws XMLStreamException on problematic xml
 * @throws FactoryConfigurationError when no xml input factory can be established
 */
public static List<String[]> getNamespaces(String xml) throws XMLStreamException, FactoryConfigurationError {
  List<String[]> res=new ArrayList<>();
  XMLStreamReader reader;
  if (StringUtils.isNotEmpty(xml)) {
    reader=XMLInputFactory.newFactory().createXMLStreamReader(new StringReader(xml));
    while (reader.hasNext()) {
      int event=reader.next();
      if (XMLStreamConstants.START_ELEMENT == event || XMLStreamConstants.NAMESPACE == event) {
        addToList(reader,res);
      }
    }
  }
  return res;
}
","javax.xml.stream.XMLStreamException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\XPathUtil.java",514
183,"'-tryline","@Test public void testGetNamespaces() throws XMLStreamException, FactoryConfigurationError {
  String responseData=<age:ag xmlns:age=\http://www.w3.org/wgs84_pos#\>\n + <hd:head xmlns:hd=\http://www.w3.org/wgs85_pos#\><title>test</title></hd:head></age:ag>;
  List<String[]> res=XPathUtil.getNamespaces(responseData);
  assertEquals(age,res.get(0)[0]);
  assertEquals(http://www.w3.org/wgs84_pos#,res.get(0)[1]);
  assertEquals(hd,res.get(1)[0]);
  assertEquals(http://www.w3.org/wgs85_pos#,res.get(1)[1]);
}
","javax.xml.stream.XMLStreamException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\XPathUtilTest.java",226
184,"'-tryline","/** 
 * @throws InstantiationException if function instantiation fails
 * @throws IllegalAccessException if function instantiation fails
 */
protected void initParameterPanel() throws InstantiationException, IllegalAccessException {
  Arguments args=new Arguments();
  Function function;
  String functionName=getFunctionName(functionList.getText());
  try {
    function=CompoundVariable.getFunctionClass(functionName).getDeclaredConstructor().newInstance();
  }
 catch (  InvocationTargetException|NoSuchMethodException e) {
    InstantiationException ex=new InstantiationException(Unable to instantiate  + functionName);
    ex.initCause(e instanceof InvocationTargetException ? e.getCause() : e);
    throw ex;
  }
  List<String> argumentDesc=function.getArgumentDesc();
  for (  String help : argumentDesc) {
    args.addArgument(help,);
  }
  parameterPanel.configure(args);
  parameterPanel.revalidate();
}
","java.lang.InstantiationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\functions\gui\FunctionHelper.java",201
185,"'-tryline","/** 
 * Register a GUI class so that it can later be retrieved via {@link #getGUI(Class)}. The key should match the fully-qualified class name for the class used as the parameter when retrieving the GUI.
 * @param key the name which can be used to retrieve this GUI later
 * @param guiClass the class object for the GUI component
 * @param testClass the class of the objects edited by this GUI
 * @throws InstantiationException if an instance of the GUI class can not be instantiated
 * @throws IllegalAccessException if access rights do not permit an instance of the GUI class to be created
 * @throws NoSuchMethodException when no constructor can be found on the given  {@code guiClass}
 * @throws InvocationTargetException when the called constructor throws an exception
 */
public static void registerGUI(String key,Class<?> guiClass,Class<?> testClass) throws InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {
  JMeterGUIComponent gui;
  if (guiClass == TestBeanGUI.class) {
    gui=new TestBeanGUI(testClass);
  }
 else {
    gui=(JMeterGUIComponent)guiClass.getDeclaredConstructor().newInstance();
  }
  GUI_MAP.put(key,gui);
}
","java.lang.InstantiationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\GUIFactory.java",143
186,"'-tryline","/** 
 * Register converter.
 * @param key
 * @param jmxsaver
 * @param useMapper
 * @throws InstantiationException
 * @throws IllegalAccessException
 * @throws InvocationTargetException
 * @throws NoSuchMethodException
 * @throws ClassNotFoundException
 */
private static void registerConverter(String key,XStream jmxsaver,boolean useMapper) throws InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException, ClassNotFoundException {
  final Class<? extends Converter> clazz=Class.forName(key).asSubclass(Converter.class);
  if (useMapper) {
    jmxsaver.registerConverter(clazz.getConstructor(Mapper.class).newInstance(jmxsaver.getMapper()));
  }
 else {
    jmxsaver.registerConverter(clazz.getDeclaredConstructor().newInstance());
  }
}
","java.lang.InstantiationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\save\SaveService.java",267
187,"'-tryline","private static Provider tryConstructorWithString(Class<Provider> providerClass,final String config) throws InstantiationException, IllegalAccessException, InvocationTargetException {
  try {
    Constructor<Provider> constructor=providerClass.getConstructor(String.class);
    return constructor.newInstance(config);
  }
 catch (  NoSuchMethodException e) {
    log.warn(Security Provider {} has no constructor with a single String argument - try to use default constructor.,providerClass);
  }
  return null;
}
","java.lang.InstantiationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SecurityProviderLoader.java",81
188,"'-tryline","/** 
 * Check if existing Test Plan has been modified and ask user what they want to do if test plan is dirty. Also ask user for parameters in case of customizable templates.
 * @param actionEvent {@link ActionEvent}
 */
private void checkDirtyAndLoad(final ActionEvent actionEvent) throws HeadlessException {
  final String selectedTemplate=templateList.getText();
  final Template template=TemplateManager.getInstance().getTemplateByName(selectedTemplate);
  if (template == null) {
    return;
  }
  templateList.setValues(TemplateManager.getInstance().getTemplateNames());
  final boolean isTestPlan=template.isTestPlan();
  if (isTestPlan && !checkDirty(actionEvent)) {
    return;
  }
  ActionRouter.getInstance().doActionNow(new ActionEvent(actionEvent.getSource(),actionEvent.getID(),ActionNames.STOP_THREAD));
  final File parent=template.getParent();
  File fileToCopy=parent != null ? new File(parent,template.getFileName()) : new File(JMeterUtils.getJMeterHome(),template.getFileName());
  replaceTemplateParametersAndLoad(actionEvent,template,isTestPlan,fileToCopy);
}
","java.awt.HeadlessException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\action\SelectTemplatesDialog.java",143
189,"'-tryline","/** 
 * Invoke a public method on a class instance
 * @param instance object on which the method should be called
 * @param methodName name of the method to be called
 * @throws SecurityException if a security violation occurred while looking for the method
 * @throws IllegalArgumentException if the method parameters (none given) do not match the signature of the method
 * @throws JMeterException if something went wrong in the invoked method
 */
public static void invoke(Object instance,String methodName) throws SecurityException, IllegalArgumentException, JMeterException {
  Method m;
  try {
    m=ClassUtils.getPublicMethod(instance.getClass(),methodName,new Class[]{});
    m.invoke(instance,(Object[])null);
  }
 catch (  NoSuchMethodException|InvocationTargetException|IllegalAccessException e) {
    throw new JMeterException(e);
  }
}
","java.lang.SecurityException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\reflect\ClassTools.java",95
190,"'-tryline","private Method getMethodFor(String name,Class<?>... paramsClasses) throws NoSuchMethodException, SecurityException {
  Class<ParseCurlCommandAction> parseCurlCommandAction=ParseCurlCommandAction.class;
  Method method=parseCurlCommandAction.getDeclaredMethod(name,paramsClasses);
  method.setAccessible(true);
  return method;
}
","java.lang.SecurityException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\gui\action\ParseCurlCommandActionTest.java",536
191,"'-tryline","/** 
 * @param jsonString JSON String from which data is extracted
 * @param jsonPath JSON-PATH expression
 * @return List of JSON Strings of the extracted data
 * @throws ParseException when parsing fails
 */
public List<Object> extractWithJsonPath(String jsonString,String jsonPath) throws ParseException {
  JsonPath jsonPathParser=getJsonPath(jsonPath);
  List<Object> extractedObjects;
  try {
    extractedObjects=jsonPathParser.read(jsonString,DEFAULT_CONFIGURATION);
  }
 catch (  PathNotFoundException e) {
    if (log.isDebugEnabled()) {
      log.debug(Could not find JSON Path {} in [{}]: {},jsonPath,jsonString,e.getLocalizedMessage());
    }
    return Collections.emptyList();
  }
  List<Object> results=new ArrayList<>(extractedObjects.size());
  for (  Object obj : extractedObjects) {
    results.add(stringifyJSONObject(obj));
  }
  return Collections.unmodifiableList(results);
}
","java.text.ParseException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\extractor\json\jsonpath\JSONManager.java",63
192,"'-tryline","/** 
 * Check for duplicates of an option. It is an error to have duplicates unless appropriate flags is set in descriptor.
 * @param arguments the arguments
 */
private void checkIncompatibilities(final List<CLOption> arguments) throws ParseException {
  final int size=arguments.size();
  for (int i=0; i < size; i++) {
    final CLOption option=arguments.get(i);
    final int id=option.getDescriptor().getId();
    final CLOptionDescriptor descriptor=getDescriptorFor(id);
    if (null == descriptor) {
      continue;
    }
    final int[] incompatible=descriptor.getIncompatible();
    checkIncompatible(arguments,incompatible,i);
  }
}
","java.text.ParseException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\commons\cli\avalon\CLArgsParser.java",234
193,"'-tryline","private void checkIncompatible(final List<CLOption> arguments,final int[] incompatible,final int original) throws ParseException {
  final int size=arguments.size();
  for (int i=0; i < size; i++) {
    if (original == i) {
      continue;
    }
    final CLOption option=arguments.get(i);
    final int id=option.getDescriptor().getId();
    for (    int anIncompatible : incompatible) {
      if (id == anIncompatible) {
        final CLOption originalOption=arguments.get(original);
        final int originalId=originalOption.getDescriptor().getId();
        String message=null;
        if (id == originalId) {
          message=Duplicate options for  + describeDualOption(originalId) +  found.;
        }
 else {
          message=Incompatible options - + describeDualOption(id) +  and + describeDualOption(originalId)+  found.;
        }
        throw new ParseException(message,0);
      }
    }
  }
}
","java.text.ParseException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\commons\cli\avalon\CLArgsParser.java",261
194,"'-tryline","/** 
 * Actually parse arguments
 */
private void parse() throws ParseException {
  if (0 == this.args.length) {
    return;
  }
  this.stringLength=this.args[this.argIndex].length();
  while (true) {
    this.ch=peekAtChar();
    if (this.argIndex >= this.args.length) {
      break;
    }
    if (null != this.control && this.control.isFinished(this.lastOptionId)) {
      this.unparsedArgs=subArray(this.args,this.argIndex,this.stringIndex);
      return;
    }
    if (STATE_OPTION_MODE == this.state) {
      if (0 == this.ch) {
        getChar();
        this.state=STATE_NORMAL;
      }
 else {
        parseShortOption();
      }
    }
 else     if (STATE_NORMAL == this.state) {
      parseNormal();
    }
 else     if (STATE_NO_OPTIONS == this.state) {
      addOption(new CLOption(this.args[this.argIndex++]));
    }
 else {
      parseArguments();
    }
  }
  if (this.option != null) {
    if (STATE_OPTIONAL_ARG == this.state) {
      this.options.add(this.option);
    }
 else     if (STATE_REQUIRE_ARG == this.state) {
      final CLOptionDescriptor descriptor=getDescriptorFor(this.option.getDescriptor().getId());
      final String message=Missing argument to option  + getOptionDescription(descriptor);
      throw new ParseException(message,0);
    }
 else     if (STATE_REQUIRE_2ARGS == this.state) {
      if (1 == this.option.getArgumentCount()) {
        this.option.addArgument();
        this.options.add(this.option);
      }
 else {
        final CLOptionDescriptor descriptor=getDescriptorFor(this.option.getDescriptor().getId());
        final String message=Missing argument to option  + getOptionDescription(descriptor);
        throw new ParseException(message,0);
      }
    }
 else {
      throw new ParseException(IllegalState  + this.state + : + this.option,0);
    }
  }
}
","java.text.ParseException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\commons\cli\avalon\CLArgsParser.java",357
195,"'-tryline","private void parseOption(final CLOptionDescriptor descriptor,final String optionString) throws ParseException {
  if (null == descriptor) {
    throw new ParseException(Unknown option  + optionString,0);
  }
  this.state=getStateFor(descriptor);
  this.option=new CLOption(descriptor);
  if (STATE_NORMAL == this.state) {
    addOption(this.option);
  }
}
","java.text.ParseException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\commons\cli\avalon\CLArgsParser.java",506
196,"'-tryline","private void parseShortOption() throws ParseException {
  this.ch=getChar();
  final CLOptionDescriptor descriptor=getDescriptorFor(this.ch);
  this.isLong=false;
  parseOption(descriptor,- + this.ch);
  if (STATE_NORMAL == this.state) {
    this.state=STATE_OPTION_MODE;
  }
}
","java.text.ParseException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\commons\cli\avalon\CLArgsParser.java",520
197,"'-tryline","private void parseArguments() throws ParseException {
  if (STATE_REQUIRE_ARG == this.state) {
    if ('=' == this.ch || 0 == this.ch) {
      getChar();
    }
    final Token token=nextToken(NULL_SEPARATORS);
    this.option.addArgument(token.getValue());
    addOption(this.option);
    this.state=STATE_NORMAL;
  }
 else   if (STATE_OPTIONAL_ARG == this.state) {
    if ('-' == this.ch || 0 == this.ch) {
      getChar();
      addOption(this.option);
      this.state=STATE_NORMAL;
      return;
    }
    if (this.isLong && '=' != this.tokesep) {
      addOption(this.option);
      this.state=STATE_NORMAL;
      return;
    }
    if ('=' == this.ch) {
      getChar();
    }
    final Token token=nextToken(NULL_SEPARATORS);
    this.option.addArgument(token.getValue());
    addOption(this.option);
    this.state=STATE_NORMAL;
  }
 else   if (STATE_REQUIRE_2ARGS == this.state) {
    if (0 == this.option.getArgumentCount()) {
      if (!this.isLong) {
        if (0 == peekAtChar()) {
          getChar();
        }
      }
      final Token token=nextToken(ARG_SEPARATORS);
      if (TOKEN_SEPARATOR == token.getType()) {
        final CLOptionDescriptor descriptor=getDescriptorFor(this.option.getDescriptor().getId());
        final String message=Unable to parse first argument for option  + getOptionDescription(descriptor);
        throw new ParseException(message,0);
      }
 else {
        this.option.addArgument(token.getValue());
      }
      if (0 == this.ch && '-' == peekAtChar()) {
        this.option.addArgument();
        this.options.add(this.option);
        this.state=STATE_NORMAL;
      }
    }
 else {
      final StringBuilder sb=new StringBuilder();
      this.ch=getChar();
      while (!isSeparator(this.ch,NULL_SEPARATORS)) {
        sb.append(this.ch);
        this.ch=getChar();
      }
      final String argument=sb.toString();
      this.option.addArgument(argument);
      addOption(this.option);
      this.option=null;
      this.state=STATE_NORMAL;
    }
  }
}
","java.text.ParseException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\commons\cli\avalon\CLArgsParser.java",531
198,"'-tryline","/** 
 * Parse Options from Normal mode.
 */
private void parseNormal() throws ParseException {
  if ('-' != this.ch) {
    final String argument=nextToken(NULL_SEPARATORS).getValue();
    addOption(new CLOption(argument));
    this.state=STATE_NORMAL;
  }
 else {
    getChar();
    if (0 == peekAtChar()) {
      throw new ParseException(Malformed option -,0);
    }
 else {
      this.ch=peekAtChar();
      if ('-' != this.ch) {
        parseShortOption();
      }
 else {
        getChar();
        if (0 == peekAtChar()) {
          getChar();
          this.state=STATE_NO_OPTIONS;
        }
 else {
          final String optionName=nextToken(ARG_SEPARATORS).getValue();
          final CLOptionDescriptor descriptor=getDescriptorFor(optionName);
          this.isLong=true;
          parseOption(descriptor,-- + optionName);
        }
      }
    }
  }
}
","java.text.ParseException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\commons\cli\avalon\CLArgsParser.java",615
199,"'-tryline","private static RemoteJMeterEngine getEngine(String hostAndPort) throws RemoteException, NotBoundException {
  final String name=RemoteJMeterEngineImpl.JMETER_ENGINE_RMI_NAME;
  String host=hostAndPort;
  int port=RmiUtils.DEFAULT_RMI_PORT;
  int indexOfSeparator=hostAndPort.indexOf(':');
  if (indexOfSeparator >= 0) {
    host=hostAndPort.substring(0,indexOfSeparator);
    String portAsString=hostAndPort.substring(indexOfSeparator + 1);
    port=Integer.parseInt(portAsString);
  }
  Registry registry=LocateRegistry.getRegistry(host,port,RmiUtils.createClientSocketFactory());
  Remote remobj=registry.lookup(name);
  if (remobj instanceof RemoteJMeterEngine) {
    final RemoteJMeterEngine rje=(RemoteJMeterEngine)remobj;
    if (remobj instanceof RemoteObject) {
      RemoteObject robj=(RemoteObject)remobj;
      System.out.println(Using remote object:  + robj.getRef().remoteToString());
    }
    return rje;
  }
  throw new RemoteException(Could not find  + name);
}
","java.rmi.NotBoundException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\ClientJMeterEngine.java",56
200,"'-tryline","public ClientJMeterEngine(String hostAndPort) throws NotBoundException, RemoteException {
  this.remote=getEngine(hostAndPort);
  this.hostAndPort=hostAndPort;
}
","java.rmi.NotBoundException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\ClientJMeterEngine.java",83
201,"'-tryline","/** 
 * A factory method that might be overridden for unit testing
 * @param address address for engine
 * @return engine instance
 * @throws RemoteException if registry can't be contacted
 * @throws NotBoundException when name for address can't be found
 */
protected JMeterEngine createEngine(String address) throws RemoteException, NotBoundException {
  return new ClientJMeterEngine(address);
}
","java.rmi.NotBoundException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\DistributedRunner.java",234
202,"'-tryline","/** 
 * Default implementation calls  {@link TCPClient#read(InputStream)} for backward compatibility
 * @see org.apache.jmeter.protocol.tcp.sampler.TCPClient#read(java.io.InputStream,org.apache.jmeter.samplers.SampleResult)
 */
@Override @SuppressWarnings(deprecation) public String read(InputStream is,SampleResult sampleResult) throws ReadException {
  return read(is);
}
","org.apache.jmeter.protocol.tcp.sampler.ReadException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\tcp\src\main\java\org\apache\jmeter\protocol\tcp\sampler\AbstractTCPClient.java",82
203,"'-tryline","@Deprecated public String read(InputStream is) throws ReadException {
  log.warn(Deprecated method, use read(is, sampleResult) instead);
  return read(is,new SampleResult());
}
","org.apache.jmeter.protocol.tcp.sampler.ReadException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\tcp\src\main\java\org\apache\jmeter\protocol\tcp\sampler\BinaryTCPClientImpl.java",106
204,"'-tryline","/** 
 * Reads data until the defined EOM byte is reached. If there is no EOM byte defined, then reads until the end of the stream is reached. Response data is converted to hex-encoded binary
 * @return hex-encoded binary string
 * @throws ReadException when reading fails
 */
@Override public String read(InputStream is,SampleResult sampleResult) throws ReadException {
  ByteArrayOutputStream w=new ByteArrayOutputStream();
  try {
    byte[] buffer=new byte[4096];
    int x=0;
    boolean first=true;
    while ((x=is.read(buffer)) > -1) {
      if (first) {
        sampleResult.latencyEnd();
        first=false;
      }
      w.write(buffer,0,x);
      if (useEolByte && (buffer[x - 1] == eolByte)) {
        break;
      }
    }
  }
 catch (  SocketTimeoutException e) {
    if (useEolByte) {
      throw new ReadException(Socket timed out while looking for EOM,e,JOrphanUtils.baToHexString(w.toByteArray()));
    }
    log.debug(Ignoring SocketTimeoutException, as we are not looking for EOM,e);
  }
catch (  IOException e) {
    throw new ReadException(Problems while trying to read,e,JOrphanUtils.baToHexString(w.toByteArray()));
  }
  final String hexString=JOrphanUtils.baToHexString(w.toByteArray());
  if (log.isDebugEnabled()) {
    log.debug(Read: {}\n{},w.size(),hexString);
  }
  return hexString;
}
","org.apache.jmeter.protocol.tcp.sampler.ReadException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\tcp\src\main\java\org\apache\jmeter\protocol\tcp\sampler\BinaryTCPClientImpl.java",112
205,"'-tryline","@Deprecated public String read(InputStream is) throws ReadException {
  log.warn(Deprecated method, use read(is, sampleResult) instead);
  return read(is,new SampleResult());
}
","org.apache.jmeter.protocol.tcp.sampler.ReadException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\tcp\src\main\java\org\apache\jmeter\protocol\tcp\sampler\LengthPrefixedBinaryTCPClientImpl.java",70
206,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override public String read(InputStream is,SampleResult sampleResult) throws ReadException {
  byte[] msg=new byte[0];
  int msgLen=0;
  byte[] lengthBuffer=new byte[lengthPrefixLen];
  try {
    if (is.read(lengthBuffer,0,lengthPrefixLen) == lengthPrefixLen) {
      sampleResult.latencyEnd();
      msgLen=byteArrayToInt(lengthBuffer);
      msg=new byte[msgLen];
      int bytes=JOrphanUtils.read(is,msg,0,msgLen);
      if (bytes < msgLen) {
        log.warn(Incomplete message read, expected: {} got: {},msgLen,bytes);
      }
    }
    String buffer=JOrphanUtils.baToHexString(msg);
    if (log.isDebugEnabled()) {
      log.debug(Read:  + msgLen + \n+ buffer);
    }
    return buffer;
  }
 catch (  IOException e) {
    throw new ReadException(,e,JOrphanUtils.baToHexString(msg));
  }
}
","org.apache.jmeter.protocol.tcp.sampler.ReadException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\tcp\src\main\java\org\apache\jmeter\protocol\tcp\sampler\LengthPrefixedBinaryTCPClientImpl.java",76
207,"'-tryline","/** 
 * @param is -InputStream for socket
 * @return String read from socket
 * @throws ReadException exception that can contain partial response (Response until error occurred)
 * @deprecated since 3.3, implement {@link TCPClient#read(InputStream,SampleResult)} instead, will be removed in future version
 */
@Deprecated String read(InputStream is) throws ReadException ;
","org.apache.jmeter.protocol.tcp.sampler.ReadException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\tcp\src\main\java\org\apache\jmeter\protocol\tcp\sampler\TCPClient.java",61
208,"'-tryline","/** 
 * @param is -InputStream for socket
 * @param sampleResult {@link SampleResult}
 * @return String read from socket
 * @throws ReadException exception that can contain partial response
 */
String read(InputStream is,SampleResult sampleResult) throws ReadException ;
","org.apache.jmeter.protocol.tcp.sampler.ReadException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\tcp\src\main\java\org\apache\jmeter\protocol\tcp\sampler\TCPClient.java",72
209,"'-tryline","@Deprecated public String read(InputStream is) throws ReadException {
  return read(is,new SampleResult());
}
","org.apache.jmeter.protocol.tcp.sampler.ReadException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\tcp\src\main\java\org\apache\jmeter\protocol\tcp\sampler\TCPClientImpl.java",88
210,"'-tryline","/** 
 * Reads data until the defined EOL byte is reached. If there is no EOL byte defined, then reads until the end of the stream is reached.
 */
@Override public String read(InputStream is,SampleResult sampleResult) throws ReadException {
  ByteArrayOutputStream w=new ByteArrayOutputStream();
  try {
    byte[] buffer=new byte[4096];
    int x;
    boolean first=true;
    while ((x=is.read(buffer)) > -1) {
      if (first) {
        sampleResult.latencyEnd();
        first=false;
      }
      w.write(buffer,0,x);
      if (useEolByte && (buffer[x - 1] == eolByte)) {
        break;
      }
    }
    if (log.isDebugEnabled()) {
      log.debug(Read: {}\n{},w.size(),w.toString());
    }
    return w.toString(CHARSET);
  }
 catch (  IOException e) {
    throw new ReadException(Error reading from server, bytes read:  + w.size(),e,w.toString());
  }
}
","org.apache.jmeter.protocol.tcp.sampler.ReadException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\tcp\src\main\java\org\apache\jmeter\protocol\tcp\sampler\TCPClientImpl.java",93
211,"'-tryline","/** 
 * @return {@link ScriptEngine} for language defaulting to groovy if language is not set
 * @throws ScriptException when no {@link ScriptEngine} could be found
 */
protected ScriptEngine getScriptEngine() throws ScriptException {
  String lang=getScriptLanguageWithDefault();
  ScriptEngine scriptEngine=getInstance().getEngineByName(lang);
  if (scriptEngine == null) {
    throw new ScriptException(Cannot find engine named: ' + lang + ', ensure you set language field in JSR223 Test Element: + getName());
  }
  return scriptEngine;
}
","javax.script.ScriptException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\JSR223TestElement.java",92
212,"'-tryline","/** 
 * This method will run inline script or file script with special behaviour for file script: - If ScriptEngine implements Compilable script will be compiled and cached - If not if will be run
 * @param scriptEngine ScriptEngine
 * @param pBindings {@link Bindings} might be null
 * @return Object returned by script
 * @throws IOException when reading the script fails
 * @throws ScriptException when compiling or evaluation of the script fails
 */
protected Object processFileOrScript(ScriptEngine scriptEngine,final Bindings pBindings) throws IOException, ScriptException {
  Bindings bindings=pBindings;
  if (bindings == null) {
    bindings=scriptEngine.createBindings();
  }
  populateBindings(bindings);
  File scriptFile=new File(getFilename());
  boolean supportsCompilable=scriptEngine instanceof Compilable && !bsh.engine.BshScriptEngine.equals(scriptEngine.getClass().getName());
  try {
    if (!StringUtils.isEmpty(getFilename())) {
      if (scriptFile.exists() && scriptFile.canRead()) {
        if (supportsCompilable) {
          String newCacheKey=getScriptLanguage() + # + scriptFile.getAbsolutePath()+ #+ scriptFile.lastModified();
          CompiledScript compiledScript=compiledScriptsCache.get(newCacheKey);
          if (compiledScript == null) {
synchronized (compiledScriptsCache) {
              compiledScript=compiledScriptsCache.get(newCacheKey);
              if (compiledScript == null) {
                try (BufferedReader fileReader=Files.newBufferedReader(scriptFile.toPath())){
                  compiledScript=((Compilable)scriptEngine).compile(fileReader);
                  compiledScriptsCache.put(newCacheKey,compiledScript);
                }
               }
            }
          }
          return compiledScript.eval(bindings);
        }
 else {
          try (BufferedReader fileReader=Files.newBufferedReader(scriptFile.toPath())){
            return scriptEngine.eval(fileReader,bindings);
          }
         }
      }
 else {
        throw new ScriptException(Script file ' + scriptFile.getAbsolutePath() + ' does not exist or is unreadable for element:+ getName());
      }
    }
 else     if (!StringUtils.isEmpty(getScript())) {
      if (supportsCompilable && !ScriptingBeanInfoSupport.FALSE_AS_STRING.equals(cacheKey)) {
        computeScriptMD5();
        CompiledScript compiledScript=compiledScriptsCache.get(this.scriptMd5);
        if (compiledScript == null) {
synchronized (compiledScriptsCache) {
            compiledScript=compiledScriptsCache.get(this.scriptMd5);
            if (compiledScript == null) {
              compiledScript=((Compilable)scriptEngine).compile(getScript());
              compiledScriptsCache.put(this.scriptMd5,compiledScript);
            }
          }
        }
        return compiledScript.eval(bindings);
      }
 else {
        return scriptEngine.eval(getScript(),bindings);
      }
    }
 else {
      throw new ScriptException(Both script file and script text are empty for element: + getName());
    }
  }
 catch (  ScriptException ex) {
    Throwable rootCause=ex.getCause();
    if (isStopCondition(rootCause)) {
      throw (RuntimeException)ex.getCause();
    }
 else {
      throw ex;
    }
  }
}
","javax.script.ScriptException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\JSR223TestElement.java",151
213,"'-tryline","/** 
 * @return boolean true if element is not compilable or if compilation succeeds
 * @throws IOException if script is missing
 * @throws ScriptException if compilation fails
 */
public boolean compile() throws ScriptException, IOException {
  String lang=getScriptLanguageWithDefault();
  ScriptEngine scriptEngine=getInstance().getEngineByName(lang);
  boolean supportsCompilable=scriptEngine instanceof Compilable && !bsh.engine.BshScriptEngine.equals(scriptEngine.getClass().getName());
  if (!supportsCompilable) {
    return true;
  }
  if (!StringUtils.isEmpty(getScript())) {
    try {
      ((Compilable)scriptEngine).compile(getScript());
      return true;
    }
 catch (    ScriptException e) {
      logger.error(Error compiling script for test element {}, error:{},getName(),e.getMessage());
      return false;
    }
  }
 else {
    File scriptFile=new File(getFilename());
    try (BufferedReader fileReader=Files.newBufferedReader(scriptFile.toPath())){
      try {
        ((Compilable)scriptEngine).compile(fileReader);
        return true;
      }
 catch (      ScriptException e) {
        logger.error(Error compiling script for test element {}, error:{},getName(),e.getMessage());
        return false;
      }
    }
   }
}
","javax.script.ScriptException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\JSR223TestElement.java",234
214,"'-tryline","/** 
 * @throws InstantiationException if function instantiation fails
 * @throws IllegalAccessException if function instantiation fails
 */
protected void initParameterPanel() throws InstantiationException, IllegalAccessException {
  Arguments args=new Arguments();
  Function function;
  String functionName=getFunctionName(functionList.getText());
  try {
    function=CompoundVariable.getFunctionClass(functionName).getDeclaredConstructor().newInstance();
  }
 catch (  InvocationTargetException|NoSuchMethodException e) {
    InstantiationException ex=new InstantiationException(Unable to instantiate  + functionName);
    ex.initCause(e instanceof InvocationTargetException ? e.getCause() : e);
    throw ex;
  }
  List<String> argumentDesc=function.getArgumentDesc();
  for (  String help : argumentDesc) {
    args.addArgument(help,);
  }
  parameterPanel.configure(args);
  parameterPanel.revalidate();
}
","java.lang.IllegalAccessException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\functions\gui\FunctionHelper.java",201
215,"'-tryline","/** 
 * Register a GUI class so that it can later be retrieved via {@link #getGUI(Class)}. The key should match the fully-qualified class name for the class used as the parameter when retrieving the GUI.
 * @param key the name which can be used to retrieve this GUI later
 * @param guiClass the class object for the GUI component
 * @param testClass the class of the objects edited by this GUI
 * @throws InstantiationException if an instance of the GUI class can not be instantiated
 * @throws IllegalAccessException if access rights do not permit an instance of the GUI class to be created
 * @throws NoSuchMethodException when no constructor can be found on the given  {@code guiClass}
 * @throws InvocationTargetException when the called constructor throws an exception
 */
public static void registerGUI(String key,Class<?> guiClass,Class<?> testClass) throws InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {
  JMeterGUIComponent gui;
  if (guiClass == TestBeanGUI.class) {
    gui=new TestBeanGUI(testClass);
  }
 else {
    gui=(JMeterGUIComponent)guiClass.getDeclaredConstructor().newInstance();
  }
  GUI_MAP.put(key,gui);
}
","java.lang.IllegalAccessException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\GUIFactory.java",143
216,"'-tryline","private boolean getSaveState(String methodName) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
  Method method=SampleSaveConfiguration.class.getMethod(methodName);
  return (Boolean)method.invoke(saveConfig);
}
","java.lang.IllegalAccessException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\SavePropertyDialog.java",139
217,"'-tryline","/** 
 * Try to set a property on an object by reflection.
 * @param className     name of the objects class
 * @param obj           the object on which the property should be set
 * @param methods       methods of the object to be searched for the property setter
 * @param propertyName  name of the property to be set
 * @param propertyValue value to be set
 * @param setterName    name of the property setter that should be used to set theproperty
 * @throws IllegalAccessException if reflection throws an IllegalAccessException
 * @throws GenerationException    if conversion of the property value fails or reflectionthrows an InvocationTargetException
 */
private void setProperty(String className,Object obj,Method[] methods,String propertyName,String propertyValue,String setterName) throws IllegalAccessException, GenerationException {
  try {
    int i=0;
    while (i < methods.length) {
      Method method=methods[i];
      if (method.getName().equals(setterName)) {
        Class<?>[] parameterTypes=method.getParameterTypes();
        if (parameterTypes.length == 1) {
          Class<?> parameterType=parameterTypes[0];
          if (parameterType.isAssignableFrom(String.class)) {
            method.invoke(obj,propertyValue);
          }
 else {
            StringConverter<?> converter=Converters.getConverter(parameterType);
            if (converter == null) {
              throw new GenerationException(String.format(Not supported conversion to \%s\,parameterType.getName()));
            }
            method.invoke(obj,converter.convert(propertyValue));
          }
          return;
        }
      }
      i++;
    }
    log.warn('{}' is not a valid property for class '{}', skip it,propertyName,className);
  }
 catch (  InvocationTargetException|ConvertException ex) {
    String message=String.format(Cannot assign \%s\ to property \%s\ (mapped as \%s\), skip it,propertyValue,propertyName,setterName);
    log.error(message,ex);
    throw new GenerationException(message,ex);
  }
}
","java.lang.IllegalAccessException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\report\dashboard\ReportGenerator.java",503
218,"'-tryline","/** 
 * Register converter.
 * @param key
 * @param jmxsaver
 * @param useMapper
 * @throws InstantiationException
 * @throws IllegalAccessException
 * @throws InvocationTargetException
 * @throws NoSuchMethodException
 * @throws ClassNotFoundException
 */
private static void registerConverter(String key,XStream jmxsaver,boolean useMapper) throws InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException, ClassNotFoundException {
  final Class<? extends Converter> clazz=Class.forName(key).asSubclass(Converter.class);
  if (useMapper) {
    jmxsaver.registerConverter(clazz.getConstructor(Mapper.class).newInstance(jmxsaver.getMapper()));
  }
 else {
    jmxsaver.registerConverter(clazz.getDeclaredConstructor().newInstance());
  }
}
","java.lang.IllegalAccessException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\save\SaveService.java",267
219,"'-tryline","private static Provider tryConstructorWithString(Class<Provider> providerClass,final String config) throws InstantiationException, IllegalAccessException, InvocationTargetException {
  try {
    Constructor<Provider> constructor=providerClass.getConstructor(String.class);
    return constructor.newInstance(config);
  }
 catch (  NoSuchMethodException e) {
    log.warn(Security Provider {} has no constructor with a single String argument - try to use default constructor.,providerClass);
  }
  return null;
}
","java.lang.IllegalAccessException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SecurityProviderLoader.java",81
220,"'-tryline","@Test public void testSyntaxNames() throws IllegalArgumentException, IllegalAccessException {
  HashSet<String> values=new HashSet<>();
  for (  Field field : SyntaxConstants.class.getFields()) {
    int modifiers=field.getModifiers();
    if (field.getType().equals(String.class) && Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers)) {
      values.add((String)field.get(null));
    }
  }
  final Properties languageProperties=JMeterUtils.loadProperties(org/apache/jmeter/gui/util/textarea.properties);
  for (  Object s : languageProperties.values()) {
    if (!values.contains(s)) {
      fail(Invalid property value:  + s);
    }
  }
}
","java.lang.IllegalAccessException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\gui\util\JSyntaxTextAreaTest.java",48
221,"'-tryline","public KerberosManager initKerberosManager() throws IllegalAccessException, NoSuchFieldException {
  KerberosManager kerberosManager=new KerberosManager();
  Future<Subject> future=Executors.newSingleThreadExecutor().submit(() -> new Subject());
  subjects.put(test,future);
  Field privateField=kerberosManager.getClass().getDeclaredField(subjects);
  privateField.setAccessible(true);
  privateField.set(kerberosManager,subjects);
  return kerberosManager;
}
","java.lang.IllegalAccessException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestAuthManagerThreadIteration.java",43
222,"'-tryline","@Test public void testJmeterVariableAuthorizationWhenThreadIterationIsADifferentUser() throws IllegalAccessException, NoSuchFieldException {
  KerberosManager kerberosManager=initKerberosManager();
  AuthManager authManager=new AuthManager();
  Field authPrivateField=authManager.getClass().getDeclaredField(kerberosManager);
  authPrivateField.setAccessible(true);
  authPrivateField.set(authManager,kerberosManager);
  assertNotNull(Before the iteration, the AuthManager shouldn't be cleared,subjects.get(test));
  authManager.setControlledByThread(false);
  authManager.setClearEachIteration(true);
  authManager.testIterationStart(null);
  assertNull(After the iteration, the AuthManager should be cleared,subjects.get(test));
  kerberosManager=initKerberosManager();
  jmvars.putObject(SAME_USER,false);
  jmctx.setVariables(jmvars);
  authManager.setThreadContext(jmctx);
  authPrivateField.set(authManager,kerberosManager);
  assertNotNull(Before the iteration, the AuthManager shouldn't be cleared,subjects.get(test));
  authManager.setControlledByThread(true);
  authManager.setClearEachIteration(false);
  authManager.testIterationStart(null);
  assertNull(After the iteration, the AuthManager should be cleared,subjects.get(test));
}
","java.lang.IllegalAccessException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestAuthManagerThreadIteration.java",59
223,"'-tryline","@Test public void testJmeterVariableAuthorizationWhenThreadIterationIsASameUser() throws IllegalAccessException, NoSuchFieldException {
  KerberosManager kerberosManager=initKerberosManager();
  AuthManager authManager=new AuthManager();
  Field authPrivateField=authManager.getClass().getDeclaredField(kerberosManager);
  authPrivateField.setAccessible(true);
  authPrivateField.set(authManager,kerberosManager);
  assertNotNull(Before the iteration, the AuthManager shouldn't be cleared,subjects.get(test));
  authManager.setControlledByThread(false);
  authManager.setClearEachIteration(false);
  authManager.testIterationStart(null);
  assertNotNull(After the iteration, the AuthManager shouldn't be cleared,subjects.get(test));
  kerberosManager=initKerberosManager();
  jmvars.putObject(SAME_USER,true);
  jmctx.setVariables(jmvars);
  authManager.setThreadContext(jmctx);
  authPrivateField.set(authManager,kerberosManager);
  assertNotNull(Before the iteration, the AuthManager shouldn't be cleared,subjects.get(test));
  authManager.setControlledByThread(true);
  authManager.setClearEachIteration(false);
  authManager.testIterationStart(null);
  assertNotNull(After the iteration, the AuthManager shouldn't be cleared,subjects.get(test));
}
","java.lang.IllegalAccessException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestAuthManagerThreadIteration.java",86
224,"'-tryline","@Test public void testCookieManagerWhenThreadIterationIsNewUser() throws NoSuchFieldException, IllegalAccessException {
  jmvars.putObject(SAME_USER,false);
  jmctx.setVariables(jmvars);
  CookieManager cookieManagerDynamic=new CookieManager();
  cookieManagerDynamic.setThreadContext(jmctx);
  cookieManagerDynamic.getCookies().clear();
  cookieManagerDynamic.testStarted();
  Cookie cookieDynamic=new Cookie();
  cookieDynamic.setName(DYNAMIC_COOKIE);
  cookieManagerDynamic.getCookies().addItem(cookieDynamic);
  cookieManagerDynamic.setControlledByThread(true);
  Field privateStringField=CookieManager.class.getDeclaredField(initialCookies);
  privateStringField.setAccessible(true);
  CookieManager cookieManagerStatic=new CookieManager();
  Cookie cookieStatic=new Cookie();
  cookieStatic.setName(STATIC_COOKIE);
  cookieManagerStatic.getCookies().addItem(cookieStatic);
  CollectionProperty initialCookies=cookieManagerStatic.getCookies();
  privateStringField.set(cookieManagerDynamic,initialCookies);
  assertTrue(Before the iteration,the quantity of cookies should be 1,cookieManagerDynamic.getCookies().size() == 1);
  assertEquals(Before the iteration, the value of cookie should be what user have set,DYNAMIC_COOKIE,cookieManagerDynamic.getCookies().get(0).getName());
  cookieManagerDynamic.testIterationStart(null);
  assertEquals(After the iteration, the value of cookie should be the initial cookies,STATIC_COOKIE,cookieManagerDynamic.getCookies().get(0).getName());
  assertTrue(After the iteration, the quantity of cookies should be 1,cookieManagerDynamic.getCookies().size() == 1);
  jmvars.putObject(SAME_USER,true);
  jmctx.setVariables(jmvars);
  cookieManagerDynamic.setThreadContext(jmctx);
  cookieManagerDynamic.getCookies().clear();
  cookieManagerDynamic.testStarted();
  cookieDynamic.setName(DYNAMIC_COOKIE);
  cookieManagerDynamic.getCookies().addItem(cookieDynamic);
  cookieManagerDynamic.setClearEachIteration(true);
  cookieManagerDynamic.setControlledByThread(false);
  cookieManagerStatic.getCookies().clear();
  cookieManagerStatic.getCookies().addItem(cookieStatic);
  initialCookies=cookieManagerStatic.getCookies();
  privateStringField.set(cookieManagerDynamic,initialCookies);
  assertEquals(Before the iteration, the value of cookie should be what user have set,DYNAMIC_COOKIE,cookieManagerDynamic.getCookies().get(0).getName());
  assertTrue(Before the iteration,the quantity of cookies should be 1,cookieManagerDynamic.getCookies().size() == 1);
  cookieManagerDynamic.testIterationStart(null);
  assertEquals(After the iteration, the value of cookie should be the initial cookies,STATIC_COOKIE,cookieManagerDynamic.getCookies().get(0).getName());
  assertTrue(After the iteration, the quantity of cookies should be 1,cookieManagerDynamic.getCookies().size() == 1);
}
","java.lang.IllegalAccessException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCookieManagerThreadIteration.java",74
225,"'-tryline","@Test public void testCookieManagerWhenThreadIterationIsSameUser() throws NoSuchFieldException, IllegalAccessException {
  jmvars.putObject(SAME_USER,true);
  jmctx.setVariables(jmvars);
  CookieManager cookieManagerDynamic=new CookieManager();
  cookieManagerDynamic.setThreadContext(jmctx);
  cookieManagerDynamic.getCookies().clear();
  cookieManagerDynamic.testStarted();
  Cookie cookieDynamic=new Cookie();
  cookieDynamic.setName(DYNAMIC_COOKIE);
  cookieManagerDynamic.getCookies().addItem(cookieDynamic);
  cookieManagerDynamic.setControlledByThread(true);
  Field privateStringField=CookieManager.class.getDeclaredField(initialCookies);
  privateStringField.setAccessible(true);
  CookieManager cookieManagerStatic=new CookieManager();
  Cookie cookieStatic=new Cookie();
  cookieStatic.setName(STATIC_COOKIE);
  cookieManagerStatic.getCookies().addItem(cookieStatic);
  CollectionProperty initialCookies=cookieManagerStatic.getCookies();
  privateStringField.set(cookieManagerDynamic,initialCookies);
  assertTrue(Before the iteration,the quantity of cookies should be 1,cookieManagerDynamic.getCookies().size() == 1);
  assertEquals(Before the iteration, the value of cookie should be what user have set,DYNAMIC_COOKIE,cookieManagerDynamic.getCookies().get(0).getName());
  cookieManagerDynamic.testIterationStart(null);
  assertEquals(After the iteration, the value of cookie should be what user have set,DYNAMIC_COOKIE,cookieManagerDynamic.getCookies().get(0).getName());
  assertTrue(After the iteration, the quantity of cookies should be 1,cookieManagerDynamic.getCookies().size() == 1);
  jmvars.putObject(SAME_USER,false);
  jmctx.setVariables(jmvars);
  cookieManagerDynamic.setControlledByThread(false);
  cookieManagerDynamic.getCookies().clear();
  cookieManagerDynamic.testStarted();
  cookieDynamic.setName(DYNAMIC_COOKIE);
  cookieManagerDynamic.getCookies().addItem(cookieDynamic);
  cookieManagerDynamic.setClearEachIteration(false);
  cookieManagerStatic.getCookies().clear();
  cookieStatic.setName(STATIC_COOKIE);
  privateStringField.set(cookieManagerDynamic,initialCookies);
  assertEquals(Before the iteration, the value of cookie should be what user have set,DYNAMIC_COOKIE,cookieManagerDynamic.getCookies().get(0).getName());
  assertTrue(Before the iteration,the quantity of cookies should be 1,cookieManagerDynamic.getCookies().size() == 1);
  cookieManagerDynamic.testIterationStart(null);
  assertEquals(After the iteration, the value of cookie should be what user have set,DYNAMIC_COOKIE,cookieManagerDynamic.getCookies().get(0).getName());
  assertTrue(After the iteration, the quantity of cookies should be 1,cookieManagerDynamic.getCookies().size() == 1);
}
","java.lang.IllegalAccessException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCookieManagerThreadIteration.java",129
226,"'-tryline","public boolean openJmxFilesFromDragAndDrop(Transferable tr) throws UnsupportedFlavorException, IOException {
  @SuppressWarnings(unchecked) List<File> files=(List<File>)tr.getTransferData(DataFlavor.javaFileListFlavor);
  if (files.isEmpty()) {
    return false;
  }
  File file=files.get(0);
  if (!file.getName().endsWith(.jmx)) {
    if (log.isWarnEnabled()) {
      log.warn(Importing file, {}, from DnD failed because file extension does not end with .jmx,file.getName());
    }
    return false;
  }
  ActionEvent fakeEvent=new ActionEvent(this,ActionEvent.ACTION_PERFORMED,ActionNames.OPEN);
  LoadDraggedFile.loadProject(fakeEvent,file);
  return true;
}
","java.awt.datatransfer.UnsupportedFlavorException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\MainFrame.java",839
227,"'-tryline","@Override public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException {
  if (!isDataFlavorSupported(flavor)) {
    throw new UnsupportedFlavorException(flavor);
  }
  return nodes;
}
","java.awt.datatransfer.UnsupportedFlavorException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\tree\JMeterTreeTransferHandler.java",287
228,"'-tryline","@Override public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {
  if (!isDataFlavorSupported(flavor)) {
    throw new UnsupportedFlavorException(flavor);
  }
  if (data != null) {
    ObjectInput ois=null;
    try {
      ois=new ObjectInputStream(new ByteArrayInputStream(data));
      JMeterTreeNode[] nodes=(JMeterTreeNode[])ois.readObject();
      return nodes;
    }
 catch (    ClassNotFoundException cnfe) {
      throw new IOException(Failed to read object stream.,cnfe);
    }
 finally {
      if (ois != null) {
        try {
          ois.close();
        }
 catch (        Exception e) {
        }
      }
    }
  }
  return null;
}
","java.awt.datatransfer.UnsupportedFlavorException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\JMeterTreeNodeTransferable.java",54
229,"'-tryline","/** 
 * Get pasted text from clipboard
 * @return String Pasted text
 * @throws UnsupportedFlavorException if the clipboard data can not be get as a  {@link String}
 * @throws IOException if the clipboard data is no longer available
 */
public static String getPastedText() throws UnsupportedFlavorException, IOException {
  Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();
  Transferable trans=clipboard.getContents(null);
  DataFlavor[] flavourList=trans.getTransferDataFlavors();
  Collection<DataFlavor> flavours=new ArrayList<>(flavourList.length);
  if (Collections.addAll(flavours,flavourList) && flavours.contains(DataFlavor.stringFlavor)) {
    return (String)trans.getTransferData(DataFlavor.stringFlavor);
  }
 else {
    return null;
  }
}
","java.awt.datatransfer.UnsupportedFlavorException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\gui\GuiUtils.java",144
230,"'-tryline","/** 
 * @throws SSLInitializationException
 */
private static LayeredConnectionSocketFactory checkAndInit() throws SSLInitializationException {
  LOG.info(Setting up HTTPS TrustAll Socket Factory);
  return new SSLConnectionSocketFactory(new HttpSSLProtocolSocketFactory(JsseSSLManager.CPS),SUPPORTED_PROTOCOL_LIST,SUPPORTED_CIPHER_LIST,NoopHostnameVerifier.INSTANCE);
}
","org.apache.http.conn.ssl.SSLInitializationException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\hc\LazyLayeredConnectionSocketFactory.java",58
231,"'-tryline","private SendMailCommand createSendMailCommandFromProperties() throws AddressException {
  SendMailCommand sendMailCmd=new SendMailCommand();
  sendMailCmd.setSmtpServer(getPropertyAsString(SmtpSampler.SERVER));
  sendMailCmd.setSmtpPort(getPropertyAsString(SmtpSampler.SERVER_PORT));
  sendMailCmd.setConnectionTimeOut(getPropertyAsString(SmtpSampler.SERVER_CONNECTION_TIMEOUT));
  sendMailCmd.setTimeOut(getPropertyAsString(SmtpSampler.SERVER_TIMEOUT));
  sendMailCmd.setUseSSL(getPropertyAsBoolean(SecuritySettingsPanel.USE_SSL));
  sendMailCmd.setUseStartTLS(getPropertyAsBoolean(SecuritySettingsPanel.USE_STARTTLS));
  sendMailCmd.setTrustAllCerts(getPropertyAsBoolean(SecuritySettingsPanel.SSL_TRUST_ALL_CERTS));
  sendMailCmd.setEnforceStartTLS(getPropertyAsBoolean(SecuritySettingsPanel.ENFORCE_STARTTLS));
  sendMailCmd.setTlsProtocolsToUse(getPropertyAsString(SecuritySettingsPanel.TLS_PROTOCOLS));
  sendMailCmd.setUseAuthentication(getPropertyAsBoolean(USE_AUTH));
  sendMailCmd.setUsername(getPropertyAsString(USERNAME));
  sendMailCmd.setPassword(getPropertyAsString(PASSWORD));
  sendMailCmd.setUseLocalTrustStore(getPropertyAsBoolean(SecuritySettingsPanel.USE_LOCAL_TRUSTSTORE));
  sendMailCmd.setTrustStoreToUse(getPropertyAsString(SecuritySettingsPanel.TRUSTSTORE_TO_USE));
  sendMailCmd.setEmlMessage(getPropertyAsString(EML_MESSAGE_TO_SEND));
  sendMailCmd.setUseEmlMessage(getPropertyAsBoolean(USE_EML));
  if (!getPropertyAsBoolean(USE_EML)) {
    sendMailCmd.setMailBody(getPropertyAsString(MESSAGE));
    sendMailCmd.setPlainBody(getPropertyAsBoolean(PLAIN_BODY));
    getAttachmentFiles().forEach(sendMailCmd::addAttachment);
  }
  sendMailCmd.setEnableDebug(getPropertyAsBoolean(ENABLE_DEBUG));
  if (getPropertyAsString(MAIL_FROM).matches(.*@.*)) {
    sendMailCmd.setSender(encodeAddress(getPropertyAsString(MAIL_FROM)));
  }
  sendMailCmd.setReceiverTo(getPropAsAddresses(SmtpSampler.RECEIVER_TO));
  sendMailCmd.setReceiverCC(getPropAsAddresses(SmtpSampler.RECEIVER_CC));
  sendMailCmd.setReceiverBCC(getPropAsAddresses(SmtpSampler.RECEIVER_BCC));
  sendMailCmd.setReplyTo(getPropAsAddresses(SmtpSampler.MAIL_REPLYTO));
  sendMailCmd.setSubject(calculateSubject());
  sendMailCmd.setSynchronousMode(true);
  sendMailCmd.setHeaderFields((CollectionProperty)getProperty(SmtpSampler.HEADER_FIELDS));
  return sendMailCmd;
}
","javax.mail.internet.AddressException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\SmtpSampler.java",246
232,"'-tryline","/** 
 * Get the list of addresses or null. Null is treated differently from an empty list.
 * @param propKey key of the property containing addresses separated by ;
 * @return the list or null if the input was the empty string
 * @throws AddressException thrown if any address is an illegal format
 */
private List<InternetAddress> getPropAsAddresses(String propKey) throws AddressException {
  final String propValue=getPropertyAsString(propKey).trim();
  if (!propValue.isEmpty()) {
    List<InternetAddress> addresses=new ArrayList<>();
    for (    String address : propValue.split(;)) {
      addresses.add(new InternetAddress(encodeAddress(address)));
    }
    return addresses;
  }
 else {
    return null;
  }
}
","javax.mail.internet.AddressException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\SmtpSampler.java",361
233,"'-tryline","private Object bshInvoke(Method m,Object[] o,boolean shouldLog) throws JMeterException {
  Object r=null;
  final String errorString=Error invoking bsh method: ;
  try {
    r=m.invoke(bshInstance,o);
  }
 catch (  IllegalArgumentException|IllegalAccessException e) {
    final String message=errorString + m.getName();
    log.error(message);
    throw new JMeterError(message,e);
  }
catch (  InvocationTargetException e) {
    String message=errorString + m.getName();
    Throwable cause=e.getCause();
    if (cause != null) {
      message+=\t + cause.getLocalizedMessage();
    }
    if (shouldLog) {
      log.error(message);
    }
    throw new JMeterException(message,e);
  }
  return r;
}
","org.apache.jorphan.util.JMeterException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\BeanShellInterpreter.java",158
234,"'-tryline","public Object eval(String s) throws JMeterException {
  return bshInvoke(bshEval,new Object[]{s},true);
}
","org.apache.jorphan.util.JMeterException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\BeanShellInterpreter.java",184
235,"'-tryline","public Object evalNoLog(String s) throws JMeterException {
  return bshInvoke(bshEval,new Object[]{s},false);
}
","org.apache.jorphan.util.JMeterException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\BeanShellInterpreter.java",188
236,"'-tryline","public Object set(String s,Object o) throws JMeterException {
  return bshInvoke(bshSet,new Object[]{s,o},true);
}
","org.apache.jorphan.util.JMeterException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\BeanShellInterpreter.java",192
237,"'-tryline","public Object set(String s,boolean b) throws JMeterException {
  return bshInvoke(bshSet,new Object[]{s,b},true);
}
","org.apache.jorphan.util.JMeterException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\BeanShellInterpreter.java",196
238,"'-tryline","public Object source(String s) throws JMeterException {
  return bshInvoke(bshSource,new Object[]{s},true);
}
","org.apache.jorphan.util.JMeterException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\BeanShellInterpreter.java",200
239,"'-tryline","public Object get(String s) throws JMeterException {
  return bshInvoke(bshGet,new Object[]{s},true);
}
","org.apache.jorphan.util.JMeterException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\BeanShellInterpreter.java",204
240,"'-tryline","/** 
 * Process the file or script from the test element. <p> Sets the following script variables: <ul> <li>FileName</li> <li>Parameters</li> <li>bsh.args</li> </ul>
 * @param bsh the interpreter, not {@code null}
 * @return the result of the script, may be {@code null}
 * @throws JMeterException when working with the bsh fails
 */
protected Object processFileOrScript(BeanShellInterpreter bsh) throws JMeterException {
  String fileName=getFilename();
  String params=getParameters();
  bsh.set(FileName,fileName);
  bsh.set(Parameters,params);
  bsh.set(bsh.args,JOrphanUtils.split(params, ));
  if (fileName.length() == 0) {
    return bsh.eval(getScript());
  }
  return bsh.source(fileName);
}
","org.apache.jorphan.util.JMeterException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\BeanShellTestElement.java",124
241,"'-tryline","/** 
 * Call no-args constructor for a class.
 * @param className name of the class to be constructed
 * @return an instance of the class
 * @throws JMeterException if class cannot be created
 */
public static Object construct(String className) throws JMeterException {
  Object instance=null;
  try {
    instance=ClassUtils.getClass(className).getDeclaredConstructor().newInstance();
  }
 catch (  IllegalArgumentException|ReflectiveOperationException|SecurityException e) {
    throw new JMeterException(e);
  }
  return instance;
}
","org.apache.jorphan.util.JMeterException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\reflect\ClassTools.java",33
242,"'-tryline","/** 
 * Call a class constructor with an integer parameter
 * @param className name of the class to be constructed
 * @param parameter the value to be used in the constructor
 * @return an instance of the class
 * @throws JMeterException if class cannot be created
 */
public static Object construct(String className,int parameter) throws JMeterException {
  Object instance=null;
  try {
    Class<?> clazz=ClassUtils.getClass(className);
    Constructor<?> constructor=clazz.getConstructor(Integer.TYPE);
    instance=constructor.newInstance(parameter);
  }
 catch (  ClassNotFoundException|InvocationTargetException|IllegalArgumentException|NoSuchMethodException|SecurityException|IllegalAccessException|InstantiationException e) {
    throw new JMeterException(e);
  }
  return instance;
}
","org.apache.jorphan.util.JMeterException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\reflect\ClassTools.java",50
243,"'-tryline","/** 
 * Call a class constructor with an String parameter
 * @param className the name of the class to construct
 * @param parameter to be used for the construction of the class instance
 * @return an instance of the class
 * @throws JMeterException if class cannot be created
 */
public static Object construct(String className,String parameter) throws JMeterException {
  Object instance=null;
  try {
    Class<?> clazz=Class.forName(className);
    Constructor<?> constructor=clazz.getConstructor(String.class);
    instance=constructor.newInstance(parameter);
  }
 catch (  ClassNotFoundException|InvocationTargetException|IllegalArgumentException|NoSuchMethodException|IllegalAccessException|InstantiationException e) {
    throw new JMeterException(e);
  }
  return instance;
}
","org.apache.jorphan.util.JMeterException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\reflect\ClassTools.java",73
244,"'-tryline","/** 
 * Invoke a public method on a class instance
 * @param instance object on which the method should be called
 * @param methodName name of the method to be called
 * @throws SecurityException if a security violation occurred while looking for the method
 * @throws IllegalArgumentException if the method parameters (none given) do not match the signature of the method
 * @throws JMeterException if something went wrong in the invoked method
 */
public static void invoke(Object instance,String methodName) throws SecurityException, IllegalArgumentException, JMeterException {
  Method m;
  try {
    m=ClassUtils.getPublicMethod(instance.getClass(),methodName,new Class[]{});
    m.invoke(instance,(Object[])null);
  }
 catch (  NoSuchMethodException|InvocationTargetException|IllegalAccessException e) {
    throw new JMeterException(e);
  }
}
","org.apache.jorphan.util.JMeterException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\reflect\ClassTools.java",95
245,"'-tryline","@Test public void testConstructString() throws JMeterException {
  String dummy=(String)ClassTools.construct(java.lang.String);
  assertNotNull(dummy);
  assertEquals(,dummy);
}
","org.apache.jorphan.util.JMeterException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\test\java\org\apache\jorphan\reflect\TestClassTools.java",29
246,"'-tryline","@Test public void testConstructInt() throws JMeterException {
  Integer dummy=(Integer)ClassTools.construct(java.lang.Integer,23);
  assertNotNull(dummy);
  assertEquals(Integer.valueOf(23),dummy);
}
","org.apache.jorphan.util.JMeterException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\test\java\org\apache\jorphan\reflect\TestClassTools.java",36
247,"'-tryline","@Test public void testConstructStringString() throws JMeterException {
  String dummy=(String)ClassTools.construct(java.lang.String,hello);
  assertNotNull(dummy);
  assertEquals(hello,dummy);
}
","org.apache.jorphan.util.JMeterException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\test\java\org\apache\jorphan\reflect\TestClassTools.java",43
248,"'-tryline","@Override protected byte[] generateGSSToken(final byte[] input,final Oid oid,final String authServer,final Credentials credentials) throws GSSException {
  final GSSManager manager=getManager();
  final GSSName serverName=manager.createName(HTTP@ + authServer,GSSName.NT_HOSTBASED_SERVICE);
  final GSSCredential gssCredential;
  if (credentials instanceof KerberosCredentials) {
    gssCredential=((KerberosCredentials)credentials).getGSSCredential();
  }
 else {
    gssCredential=null;
  }
  final GSSContext gssContext=createDelegatingGSSContext(manager,oid,serverName,gssCredential);
  try {
    if (input != null) {
      return gssContext.initSecContext(input,0,input.length);
    }
 else {
      return gssContext.initSecContext(new byte[]{},0,0);
    }
  }
  finally {
    gssContext.dispose();
  }
}
","org.ietf.jgss.GSSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\control\DelegatingKerberosScheme.java",35
249,"'-tryline","GSSContext createDelegatingGSSContext(final GSSManager manager,final Oid oid,final GSSName serverName,final GSSCredential gssCredential) throws GSSException {
  final GSSContext gssContext=manager.createContext(serverName.canonicalize(oid),oid,gssCredential,GSSContext.DEFAULT_LIFETIME);
  gssContext.requestMutualAuth(true);
  gssContext.requestCredDeleg(true);
  return gssContext;
}
","org.ietf.jgss.GSSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\control\DelegatingKerberosScheme.java",61
250,"'-tryline","@Override protected byte[] generateGSSToken(final byte[] input,final Oid oid,final String authServer,final Credentials credentials) throws GSSException {
  final GSSManager manager=getManager();
  final GSSName serverName=manager.createName(HTTP@ + authServer,GSSName.NT_HOSTBASED_SERVICE);
  final GSSCredential gssCredential;
  if (credentials instanceof KerberosCredentials) {
    gssCredential=((KerberosCredentials)credentials).getGSSCredential();
  }
 else {
    gssCredential=null;
  }
  final GSSContext gssContext=createDelegatingGSSContext(manager,oid,serverName,gssCredential);
  try {
    if (input != null) {
      return gssContext.initSecContext(input,0,input.length);
    }
 else {
      return gssContext.initSecContext(new byte[]{},0,0);
    }
  }
  finally {
    gssContext.dispose();
  }
}
","org.ietf.jgss.GSSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\control\DelegatingSPNegoScheme.java",35
251,"'-tryline","GSSContext createDelegatingGSSContext(final GSSManager manager,final Oid oid,final GSSName serverName,final GSSCredential gssCredential) throws GSSException {
  final GSSContext gssContext=manager.createContext(serverName.canonicalize(oid),oid,gssCredential,GSSContext.DEFAULT_LIFETIME);
  gssContext.requestMutualAuth(true);
  gssContext.requestCredDeleg(true);
  return gssContext;
}
","org.ietf.jgss.GSSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\control\DelegatingSPNegoScheme.java",61
252,"'-tryline","/** 
 * @param ex EOFException
 * @param relaxMode relax mode enabled
 * @return -1 if relax
 * @throws EOFException
 */
private int handleRelaxMode(final EOFException ex,final boolean relaxMode) throws EOFException {
  if (relaxMode) {
    return -1;
  }
 else {
    throw ex;
  }
}
","java.io.EOFException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\hc\LaxDeflateInputStream.java",77
253,"'-tryline","/** 
 * @param ex EOFException
 * @param relaxMode relax mode enabled
 * @return -1 if relax
 * @throws EOFException
 */
private int handleRelaxMode(final EOFException ex,final boolean relaxMode) throws EOFException {
  if (relaxMode) {
    return -1;
  }
 else {
    throw ex;
  }
}
","java.io.EOFException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\hc\LaxGZIPInputStream.java",76
254,"'-tryline","public static void main(String[] args) throws Exception {
  if (args.length < MINARGS) {
    System.out.println(Please provide  + MINARGS +  or more arguments:);
    System.out.println(serverhost serverport filename [arg1 arg2 ...]);
    System.out.println(e.g. );
    System.out.println(localhost 9000 extras/remote.bsh apple blake 7);
    return;
  }
  String host=args[0];
  String portString=args[1];
  String file=args[2];
  int port=Integer.parseInt(portString) + 1;
  System.out.println(Connecting to BSH server on  + host + :+ portString);
  try (Socket sock=new Socket(host,port);InputStream is=sock.getInputStream();OutputStream os=sock.getOutputStream()){
    SockRead sockRead=new SockRead(is);
    sockRead.start();
    sendLine(bsh.prompt=\\;,os);
    sendLine(String [] args={,os);
    for (int i=MINARGS; i < args.length; i++) {
      sendLine(\ + args[i] + \,\n,os);
    }
    sendLine(};,os);
    int b;
    try (BufferedReader fis=Files.newBufferedReader(Paths.get(file))){
      while ((b=fis.read()) != -1) {
        os.write(b);
      }
    }
     sendLine(bsh.prompt=\bsh % \;,os);
    os.flush();
    sock.shutdownOutput();
    sockRead.join();
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\bshclient\src\main\java\org\apache\jmeter\util\BeanShellClient.java",39
255,"'-tryline","/** 
 * Used to do a JMESPath query and compute result if the expectedValue matches with the JMESPath query result
 * @param assertionResult          {@link AssertionResult}
 * @param responseDataAsJsonString the response data from the sender
 * @throws Exception
 */
private void doAssert(AssertionResult assertionResult,String responseDataAsJsonString,boolean invert) throws Exception {
  JsonNode input=OBJECT_MAPPER.readValue(responseDataAsJsonString,JsonNode.class);
  Expression<JsonNode> expression=JMESPathCache.getInstance().get(getJmesPath());
  JsonNode currentValue=expression.search(input);
  log.debug(JMESPath query {} invoked on response {}. Query result is {}. ,expression,responseDataAsJsonString,currentValue);
  boolean success=checkResult(OBJECT_MAPPER,currentValue);
  if (!invert) {
    if (!success) {
      failAssertion(invert,assertionResult);
    }
  }
 else {
    if (success) {
      failAssertion(invert,assertionResult);
    }
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\assertions\jmespath\JMESPathAssertion.java",60
256,"'-tryline","@Override public Expression<JsonNode> load(String jmesPathExpression) throws Exception {
  return runtime.compile(jmesPathExpression);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\extractor\json\jmespath\JMESPathCache.java",42
257,"'-tryline","private List<Object> extractWithTechnology(String textToParse,String expression) throws Exception {
  JSONManager jsonManager=new JSONManager();
  return jsonManager.extractWithJsonPath(textToParse,expression);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\extractor\json\render\RenderAsJsonRenderer.java",73
258,"'-tryline","@Override public void setupTest(BackendListenerContext context) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug({}: setupTest,getClass().getName());
  }
  metricsPerSampler.clear();
  userMetrics.clear();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\backend\AbstractBackendListenerClient.java",61
259,"'-tryline","@Override public void teardownTest(BackendListenerContext context) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug({}: teardownTest,getClass().getName());
  }
  metricsPerSampler.clear();
  userMetrics.clear();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\backend\AbstractBackendListenerClient.java",71
260,"'-tryline","/** 
 * Do any initialization required by this client. It is generally recommended to do any initialization such as getting parameter values here rather than  {@link #handleSampleResults(List,BackendListenerContext)}in order to add as little overhead as possible to the test.
 * @param context provides access to initialization parameters.
 * @throws Exception when setup fails
 */
void setupTest(BackendListenerContext context) throws Exception ;
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\backend\BackendListenerClient.java",68
261,"'-tryline","/** 
 * Do any clean-up required at the end of a test run.
 * @param context provides access to initialization parameters.
 * @throws Exception when tear down fails
 */
void teardownTest(BackendListenerContext context) throws Exception ;
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\backend\BackendListenerClient.java",92
262,"'-tryline","@Override public void setupTest(BackendListenerContext context) throws Exception {
  String graphiteMetricsSenderClass=context.getParameter(GRAPHITE_METRICS_SENDER);
  String graphiteHost=context.getParameter(GRAPHITE_HOST);
  int graphitePort=context.getIntParameter(GRAPHITE_PORT,DEFAULT_PLAINTEXT_PROTOCOL_PORT);
  summaryOnly=context.getBooleanParameter(SUMMARY_ONLY,true);
  samplersList=context.getParameter(SAMPLERS_LIST,);
  useRegexpForSamplersList=context.getBooleanParameter(USE_REGEXP_FOR_SAMPLERS_LIST,false);
  String rootMetricsPrefix=context.getParameter(ROOT_METRICS_PREFIX,DEFAULT_METRICS_PREFIX);
  String[] percentilesStringArray=context.getParameter(PERCENTILES,DEFAULT_METRICS_PREFIX).split(SEPARATOR);
  okPercentiles=new HashMap<>(percentilesStringArray.length);
  koPercentiles=new HashMap<>(percentilesStringArray.length);
  allPercentiles=new HashMap<>(percentilesStringArray.length);
  Arrays.stream(percentilesStringArray).map(String::trim).filter(StringUtils::isNotEmpty).forEach(this::initPercentileMaps);
  Class<?> clazz=Class.forName(graphiteMetricsSenderClass);
  this.graphiteMetricsManager=(GraphiteMetricsSender)clazz.getDeclaredConstructor().newInstance();
  graphiteMetricsManager.setup(graphiteHost,graphitePort,rootMetricsPrefix);
  if (useRegexpForSamplersList) {
    pattern=Pattern.compile(samplersList);
  }
 else {
    String[] samplers=samplersList.split(SEPARATOR);
    samplersToFilter=new HashSet<>();
    Collections.addAll(samplersToFilter,samplers);
  }
  scheduler=Executors.newScheduledThreadPool(MAX_POOL_SIZE);
  this.timerHandle=scheduler.scheduleAtFixedRate(this,SEND_INTERVAL,SEND_INTERVAL,TimeUnit.SECONDS);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\backend\graphite\GraphiteBackendListenerClient.java",296
263,"'-tryline","@Override public void teardownTest(BackendListenerContext context) throws Exception {
  boolean cancelState=timerHandle.cancel(false);
  log.debug(Canceled state: {},cancelState);
  scheduler.shutdown();
  try {
    scheduler.awaitTermination(30,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    log.error(Error waiting for end of scheduler);
    Thread.currentThread().interrupt();
  }
  sendMetrics();
  if (samplersToFilter != null) {
    samplersToFilter.clear();
  }
  graphiteMetricsManager.destroy();
  super.teardownTest(context);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\backend\graphite\GraphiteBackendListenerClient.java",351
264,"'-tryline","@Override public PooledObject<SocketOutputStream> makeObject(SocketConnectionInfos connectionInfos) throws Exception {
  return wrap(create(connectionInfos));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\backend\graphite\SocketOutputStreamPoolFactory.java",45
265,"'-tryline","@Override public void destroyObject(SocketConnectionInfos socketConnectionInfos,PooledObject<SocketOutputStream> socketOutputStream) throws Exception {
  super.destroyObject(socketConnectionInfos,socketOutputStream);
  SocketOutputStream outputStream=socketOutputStream.getObject();
  JOrphanUtils.closeQuietly(outputStream);
  JOrphanUtils.closeQuietly(outputStream.getSocket());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\backend\graphite\SocketOutputStreamPoolFactory.java",50
266,"'-tryline","@Override public SocketOutputStream create(SocketConnectionInfos connectionInfos) throws Exception {
  Socket socket=new Socket();
  socket.setKeepAlive(true);
  socket.setSoTimeout(socketTimeoutInMillis);
  socket.connect(new InetSocketAddress(connectionInfos.getHost(),connectionInfos.getPort()),socketConnectTimeoutInMillis);
  return new SocketOutputStream(socket);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\backend\graphite\SocketOutputStreamPoolFactory.java",70
267,"'-tryline","/** 
 * The HTTP API is the primary means of writing data into InfluxDB, by sending POST requests to the /write endpoint. Initiate the HttpClient client with a HttpPost request from influxdb url
 * @param influxdbUrl   example : http://localhost:8086/write?db=myd&rp=one_week
 * @param influxDBToken example: my-token
 * @see InfluxdbMetricsSender#setup(String,String)
 */
@Override public void setup(String influxdbUrl,String influxDBToken) throws Exception {
  IOReactorConfig ioReactorConfig=IOReactorConfig.custom().setIoThreadCount(1).setConnectTimeout(JMeterUtils.getPropDefault(backend_influxdb.connection_timeout,1000)).setSoTimeout(JMeterUtils.getPropDefault(backend_influxdb.socket_timeout,3000)).build();
  ConnectingIOReactor ioReactor=new DefaultConnectingIOReactor(ioReactorConfig);
  PoolingNHttpClientConnectionManager connManager=new PoolingNHttpClientConnectionManager(ioReactor);
  httpClient=HttpAsyncClientBuilder.create().setConnectionManager(connManager).setMaxConnPerRoute(2).setMaxConnTotal(2).setUserAgent(ApacheJMeter + JMeterUtils.getJMeterVersion()).disableCookieManagement().disableConnectionState().build();
  url=new URL(influxdbUrl);
  token=influxDBToken;
  httpRequest=createRequest(url,token);
  httpClient.start();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\backend\influxdb\HttpMetricsSender.java",90
268,"'-tryline","@Override public void setupTest(BackendListenerContext context) throws Exception {
  summaryOnly=context.getBooleanParameter(summaryOnly,false);
  samplersRegex=context.getParameter(samplersRegex,);
  applicationName=AbstractInfluxdbMetricsSender.tagToStringValue(context.getParameter(application,));
  measurement=AbstractInfluxdbMetricsSender.tagToStringValue(context.getParameter(measurement,DEFAULT_MEASUREMENT));
  testTitle=context.getParameter(testTitle,Test);
  testTags=AbstractInfluxdbMetricsSender.tagToStringValue(context.getParameter(eventTags,));
  initPercentiles(context);
  initUserTags(context);
  initInfluxdbMetricsManager(context);
  samplersToFilter=Pattern.compile(samplersRegex);
  addAnnotation(true);
  scheduler=Executors.newScheduledThreadPool(MAX_POOL_SIZE);
  this.timerHandle=scheduler.scheduleAtFixedRate(this,0,SEND_INTERVAL,TimeUnit.SECONDS);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\backend\influxdb\InfluxdbBackendListenerClient.java",311
269,"'-tryline","private void initInfluxdbMetricsManager(BackendListenerContext context) throws Exception {
  Class<?> clazz=Class.forName(context.getParameter(influxdbMetricsSender));
  influxdbMetricsManager=(InfluxdbMetricsSender)clazz.getDeclaredConstructor().newInstance();
  String influxdbUrl=context.getParameter(influxdbUrl);
  String influxdbToken=context.getParameter(influxdbToken);
  influxdbMetricsManager.setup(influxdbUrl,influxdbToken);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\backend\influxdb\InfluxdbBackendListenerClient.java",335
270,"'-tryline","@Override public void teardownTest(BackendListenerContext context) throws Exception {
  boolean cancelState=timerHandle.cancel(false);
  log.debug(Canceled state: {},cancelState);
  scheduler.shutdown();
  try {
    scheduler.awaitTermination(30,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    log.error(Error waiting for end of scheduler);
    Thread.currentThread().interrupt();
  }
  addAnnotation(false);
  log.info(Sending last metrics to InfluxDB);
  sendMetrics();
  influxdbMetricsManager.destroy();
  super.teardownTest(context);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\backend\influxdb\InfluxdbBackendListenerClient.java",402
271,"'-tryline","/** 
 * Setup sender using influxDBUrl
 * @param influxDBUrl   url pointing to InfluxDB
 * @param influxDBToken authorization token to InfluxDB 2.0
 * @throws Exception when setup fails
 */
public void setup(String influxDBUrl,String influxDBToken) throws Exception ;
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\backend\influxdb\InfluxdbMetricsSender.java",64
272,"'-tryline","@Override public void setupTest(BackendListenerContext context) throws Exception {
  initInfluxDBMetricsManager(context);
  measurement=context.getParameter(measurement,DEFAULT_MEASUREMENT);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\backend\influxdb\InfluxDBRawBackendListenerClient.java",76
273,"'-tryline","private void initInfluxDBMetricsManager(BackendListenerContext context) throws Exception {
  influxDBMetricsManager=Class.forName(context.getParameter(influxdbMetricsSender)).asSubclass(InfluxdbMetricsSender.class).getDeclaredConstructor().newInstance();
  influxDBMetricsManager.setup(context.getParameter(influxdbUrl),context.getParameter(influxdbToken));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\backend\influxdb\InfluxDBRawBackendListenerClient.java",82
274,"'-tryline","@Override public void setup(String influxdbUrl,String influxDBToken) throws Exception {
  try {
    log.debug(Setting up with url:{},influxdbUrl);
    String[] urlComponents=influxdbUrl.split(:);
    if (urlComponents.length == 2) {
      hostAddress=InetAddress.getByName(urlComponents[0]);
      udpPort=Integer.parseInt(urlComponents[1]);
    }
 else {
      throw new IllegalArgumentException(InfluxDB url ' + influxdbUrl + ' is wrong. The format should be <host/ip>:<port>);
    }
  }
 catch (  Exception e) {
    throw new IllegalArgumentException(InfluxDB url ' + influxdbUrl + ' is wrong. The format should be <host/ip>:<port>,e);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\backend\influxdb\UdpMetricsSender.java",58
275,"'-tryline","@Test public void testDurationLower() throws Exception {
  sampleResult.setStampAndTime(0,1000);
  assertion.setAllowedDuration(1100L);
  result=assertion.getResult(sampleResult);
  assertFalse(result.isError());
  assertFalse(result.isFailure());
  assertNull(result.getFailureMessage());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\DurationAssertionTest.java",50
276,"'-tryline","@Test public void testDurationEquals() throws Exception {
  sampleResult.setStampAndTime(0,1000);
  assertion.setAllowedDuration(1000L);
  result=assertion.getResult(sampleResult);
  assertFalse(result.isError());
  assertFalse(result.isFailure());
  assertNull(result.getFailureMessage());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\DurationAssertionTest.java",60
277,"'-tryline","@Test public void testDurationHigher() throws Exception {
  sampleResult.setStampAndTime(0,1200);
  assertion.setAllowedDuration(1100);
  result=assertion.getResult(sampleResult);
  assertFalse(result.isError());
  assertTrue(result.isFailure());
  assertNotNull(result.getFailureMessage());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\DurationAssertionTest.java",70
278,"'-tryline","@Test public void testDurationZero() throws Exception {
  sampleResult.setStampAndTime(0,0);
  assertion.setAllowedDuration(1100);
  result=assertion.getResult(sampleResult);
  assertFalse(result.isFailure());
  assertFalse(result.isError());
  assertNull(result.getFailureMessage());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\DurationAssertionTest.java",80
279,"'-tryline","@Test public void testResponseAssertionNoText() throws Exception {
  assertion.clearTestStrings();
  assertion.unsetNotType();
  assertion.setToSubstringType();
  assertion.setTestFieldResponseData();
  result=assertion.getResult(sample);
  assertPassed();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\ResponseAssertionTest.java",63
280,"'-tryline","@Test public void testResponseAssertionEquals() throws Exception {
  assertion.unsetNotType();
  assertion.setToEqualsType();
  assertion.setTestFieldURL();
  assertion.addTestString(Sampler Label);
  assertion.addTestString(Sampler labelx);
  result=assertion.getResult(sample);
  assertFailed();
  assertion.setToNotType();
  assertion.clearTestStrings();
  assertion.addTestString(Sampler LabeL);
  assertion.addTestString(Sampler Labelx);
  result=assertion.getResult(sample);
  assertPassed();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\ResponseAssertionTest.java",74
281,"'-tryline","@Test public void testCustomFailureMessage() throws Exception {
  assertion.unsetNotType();
  assertion.setToEqualsType();
  assertion.setTestFieldURL();
  assertion.addTestString(Sampler Label);
  assertion.addTestString(Sampler labelx);
  assertion.setCustomFailureMessage(Custom failure message);
  result=assertion.getResult(sample);
  assertFailed();
  assertEquals(Custom failure message,result.getFailureMessage());
  assertion.setToOrType();
  result=assertion.getResult(sample);
  assertFailed();
  assertEquals(Custom failure message,result.getFailureMessage());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\ResponseAssertionTest.java",92
282,"'-tryline","@Test public void testMalformedCachePatternException() throws Exception {
  assertion.unsetNotType();
  assertion.setToMatchType();
  assertion.setTestFieldResponseHeaders();
  assertion.addTestString([]);
  result=assertion.getResult(sample);
  assertNotNull(result.getFailureMessage());
  assertFalse(Should not be: Response was null,Response was null.equals(result.getFailureMessage()));
  assertTrue(Not expecting error:  + result.getFailureMessage(),result.isError());
  assertion.setCustomFailureMessage(Custom failure message);
  result=assertion.getResult(sample);
  assertTrue(Did not get expected error:  + result.getFailureMessage(),result.isError());
  assertFalse(Failure message must not be custom failure message for error,Custom failure message.equals(result.getFailureMessage()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\ResponseAssertionTest.java",110
283,"'-tryline","@Test public void testResponseAssertionResponseHeaders() throws Exception {
  assertion.unsetNotType();
  assertion.setToEqualsType();
  assertion.setTestFieldResponseHeaders();
  assertion.addTestString(X-Header: abcd);
  assertion.addTestString(X-Header: abcdx);
  result=assertion.getResult(sample);
  assertFailed();
  assertion.clearTestStrings();
  assertion.addTestString(X-Header: abcd);
  result=assertion.getResult(sample);
  assertPassed();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\ResponseAssertionTest.java",129
284,"'-tryline","@Test public void testResponseAssertionRequestHeaders() throws Exception {
  assertion.unsetNotType();
  assertion.setToEqualsType();
  assertion.setTestFieldRequestHeaders();
  assertion.addTestString(X-reqHeader: cdef);
  assertion.addTestString(X-reqHeader: cdefx);
  result=assertion.getResult(sample);
  assertFailed();
  assertion.clearTestStrings();
  assertion.addTestString(X-reqHeader: cdef);
  result=assertion.getResult(sample);
  assertPassed();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\ResponseAssertionTest.java",145
285,"'-tryline","@Test public void testResponseAssertionContains() throws Exception {
  assertion.unsetNotType();
  assertion.setToContainsType();
  assertion.setTestFieldURL();
  assertion.addTestString(Sampler);
  assertion.addTestString(Label);
  assertion.addTestString( x);
  result=assertion.getResult(sample);
  assertFailed();
  assertion.setToNotType();
  result=assertion.getResult(sample);
  assertFailed();
  assertion.clearTestStrings();
  assertion.addTestString(r l);
  result=assertion.getResult(sample);
  assertPassed();
  assertion.unsetNotType();
  assertion.setTestFieldResponseData();
  assertion.clearTestStrings();
  assertion.addTestString(line 2);
  result=assertion.getResult(sample);
  assertPassed();
  assertion.clearTestStrings();
  assertion.addTestString(line 2);
  assertion.addTestString(NOTINSAMPLEDATA);
  result=assertion.getResult(sample);
  assertFailed();
  assertion.clearTestStrings();
  assertion.setToOrType();
  assertion.addTestString(line 2);
  assertion.addTestString(NOTINSAMPLEDATA);
  result=assertion.getResult(sample);
  assertPassed();
  assertion.unsetOrType();
  assertion.clearTestStrings();
  assertion.setToOrType();
  assertion.addTestString(NOTINSAMPLEDATA);
  assertion.addTestString(line 2);
  result=assertion.getResult(sample);
  assertPassed();
  assertion.unsetOrType();
  assertion.clearTestStrings();
  assertion.setToOrType();
  assertion.addTestString(NOTINSAMPLEDATA);
  assertion.addTestString(NOTINSAMPLEDATA2);
  result=assertion.getResult(sample);
  assertFailed();
  assertion.unsetOrType();
  assertion.clearTestStrings();
  assertion.setToOrType();
  assertion.setToNotType();
  assertion.addTestString(line 2);
  assertion.addTestString(NOTINSAMPLEDATA2);
  result=assertion.getResult(sample);
  assertPassed();
  assertion.unsetOrType();
  assertion.unsetNotType();
  assertion.clearTestStrings();
  assertion.setToNotType();
  assertion.addTestString(NOTINSAMPLEDATA);
  result=assertion.getResult(sample);
  assertPassed();
  assertion.unsetNotType();
  assertion.clearTestStrings();
  assertion.addTestString((?s)line \\d+.*EOF);
  result=assertion.getResult(sample);
  assertPassed();
  assertion.setTestFieldResponseCode();
  assertion.clearTestStrings();
  assertion.addTestString(401);
  result=assertion.getResult(sample);
  assertPassed();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\ResponseAssertionTest.java",161
286,"'-tryline","@Test public void testResponseAssertionContainsDollar() throws Exception {
  sample.setResponseData(value=\${ID}\ Group$ctl00$drpEmails,null);
  assertion.unsetNotType();
  assertion.setToContainsType();
  assertion.setTestFieldResponseData();
  assertion.addTestString(value=\\\${ID}\ Group\\$ctl00\\$drpEmails);
  result=assertion.getResult(sample);
  assertPassed();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\ResponseAssertionTest.java",255
287,"'-tryline","@Test public void testResponseAssertionSubstring() throws Exception {
  assertion.unsetNotType();
  assertion.setToSubstringType();
  assertion.setTestFieldURL();
  assertion.addTestString(Sampler);
  assertion.addTestString(Label);
  assertion.addTestString(+();
  result=assertion.getResult(sample);
  assertFailed();
  assertion.setToNotType();
  result=assertion.getResult(sample);
  assertFailed();
  assertion.clearTestStrings();
  assertion.addTestString(r l);
  result=assertion.getResult(sample);
  assertPassed();
  assertion.unsetNotType();
  assertion.setTestFieldResponseData();
  assertion.clearTestStrings();
  assertion.addTestString(line 2);
  result=assertion.getResult(sample);
  assertPassed();
  assertion.clearTestStrings();
  assertion.addTestString(line 2\n\nEOF);
  result=assertion.getResult(sample);
  assertPassed();
  assertion.setTestFieldResponseCode();
  assertion.clearTestStrings();
  assertion.addTestString(401);
  result=assertion.getResult(sample);
  assertPassed();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\ResponseAssertionTest.java",267
288,"'-tryline","private void assertPassed() throws Exception {
  assertNull(result.getFailureMessage(),result.getFailureMessage());
  assertFalse(Not expecting error:  + result.getFailureMessage(),result.isError());
  assertFalse(Not expecting error,result.isError());
  assertFalse(Not expecting failure,result.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\ResponseAssertionTest.java",313
289,"'-tryline","private void assertFailed() throws Exception {
  assertNotNull(result.getFailureMessage());
  assertFalse(Should not be: Response was null,Response was null.equals(result.getFailureMessage()));
  assertFalse(Not expecting error:  + result.getFailureMessage(),result.isError());
  assertTrue(Expecting failure,result.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\ResponseAssertionTest.java",320
290,"'-tryline","@Test public void testThreadSafety() throws Exception {
  Thread[] threads=new Thread[100];
  CountDownLatch latch=new CountDownLatch(threads.length);
  for (int i=0; i < threads.length; i++) {
    threads[i]=new TestThread(latch);
  }
  failed=new AtomicInteger(0);
  for (  Thread thread : threads) {
    thread.start();
  }
  latch.await();
  assertEquals(failed.get(),0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\ResponseAssertionTest.java",329
291,"'-tryline","@Test public void testSizeAssertionEquals() throws Exception {
  assertion.setCompOper(SizeAssertion.EQUAL);
  assertion.setAllowedSize(0);
  result=assertion.getResult(sample1);
  assertFailed();
  result=assertion.getResult(sample0);
  assertPassed();
  assertion.setAllowedSize(data1Len);
  result=assertion.getResult(sample1);
  assertPassed();
  result=assertion.getResult(sample0);
  assertFailed();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\SizeAssertionTest.java",55
292,"'-tryline","@Test public void testSizeAssertionNotEquals() throws Exception {
  assertion.setCompOper(SizeAssertion.NOTEQUAL);
  assertion.setAllowedSize(0);
  result=assertion.getResult(sample1);
  assertPassed();
  result=assertion.getResult(sample0);
  assertFailed();
  assertion.setAllowedSize(data1Len);
  result=assertion.getResult(sample1);
  assertFailed();
  result=assertion.getResult(sample0);
  assertPassed();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\SizeAssertionTest.java",73
293,"'-tryline","@Test public void testSizeAssertionGreaterThan() throws Exception {
  assertion.setCompOper(SizeAssertion.GREATERTHAN);
  assertion.setAllowedSize(0);
  result=assertion.getResult(sample1);
  assertPassed();
  result=assertion.getResult(sample0);
  assertFailed();
  assertion.setAllowedSize(data1Len);
  result=assertion.getResult(sample1);
  assertFailed();
  result=assertion.getResult(sample0);
  assertFailed();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\SizeAssertionTest.java",91
294,"'-tryline","@Test public void testSizeAssertionGreaterThanEqual() throws Exception {
  assertion.setCompOper(SizeAssertion.GREATERTHANEQUAL);
  assertion.setAllowedSize(0);
  result=assertion.getResult(sample1);
  assertPassed();
  result=assertion.getResult(sample0);
  assertPassed();
  assertion.setAllowedSize(data1Len);
  result=assertion.getResult(sample1);
  assertPassed();
  result=assertion.getResult(sample0);
  assertFailed();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\SizeAssertionTest.java",109
295,"'-tryline","@Test public void testSizeAssertionLessThan() throws Exception {
  assertion.setCompOper(SizeAssertion.LESSTHAN);
  assertion.setAllowedSize(0);
  result=assertion.getResult(sample1);
  assertFailed();
  result=assertion.getResult(sample0);
  assertFailed();
  assertion.setAllowedSize(data1Len + 1);
  result=assertion.getResult(sample1);
  assertPassed();
  result=assertion.getResult(sample0);
  assertPassed();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\SizeAssertionTest.java",127
296,"'-tryline","@Test public void testSizeAssertionLessThanEqual() throws Exception {
  assertion.setCompOper(SizeAssertion.LESSTHANEQUAL);
  assertion.setAllowedSize(0);
  result=assertion.getResult(sample1);
  assertFailed();
  result=assertion.getResult(sample0);
  assertPassed();
  assertion.setAllowedSize(data1Len + 1);
  result=assertion.getResult(sample1);
  assertPassed();
  result=assertion.getResult(sample0);
  assertPassed();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\SizeAssertionTest.java",145
297,"'-tryline","private void assertPassed() throws Exception {
  assertNull(Failure message should be null,result.getFailureMessage());
  assertFalse(result.isError());
  assertFalse(result.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\SizeAssertionTest.java",164
298,"'-tryline","private void assertFailed() throws Exception {
  assertNotNull(Failure message should not be null,result.getFailureMessage());
  assertFalse(Should not be: Response was null,Response was null.equals(result.getFailureMessage()));
  assertFalse(result.isError());
  assertTrue(result.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\SizeAssertionTest.java",170
299,"'-tryline","@Test public void testSignerCert() throws Exception {
  SMIMEAssertionTestElement testElement=new SMIMEAssertionTestElement();
  testElement.setSignerCheckConstraints(true);
  testElement.setSignerCheckByFile(true);
  testElement.setSignerCertFile(new File(getClass().getResource(email.pem).toURI()).getAbsolutePath());
  AssertionResult result=SMIMEAssertion.getResult(testElement,parent,Test);
  assertFalse(Result should not be an error,result.isError());
  assertFalse(Result should not fail:  + result.getFailureMessage(),result.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\SMIMEAssertionTest.java",171
300,"'-tryline","@Test public void testUnsecureX() throws Exception {
  sampleResult.setResponseData(UNSECURE_XML,null);
  result=assertion.getResult(sampleResult);
  assertTrue(result.isFailure());
  assertTrue(result.isError());
  assertEquals(DOCTYPE is disallowed when the feature \http://apache.org/xml/features/disallow-doctype-decl\ set to true.,result.getFailureMessage());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XmlAssertionTest.java",56
301,"'-tryline","@Test public void testValidXML() throws Exception {
  sampleResult.setResponseData(VALID_XML,null);
  result=assertion.getResult(sampleResult);
  assertFalse(result.isFailure());
  assertFalse(result.isError());
  assertNull(result.getFailureMessage());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XmlAssertionTest.java",66
302,"'-tryline","@Test public void testInvalidXML() throws Exception {
  sampleResult.setResponseData(INVALID_XML,null);
  result=assertion.getResult(sampleResult);
  assertTrue(result.isFailure());
  assertTrue(result.isError());
  assertNotNull(result.getFailureMessage());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XmlAssertionTest.java",75
303,"'-tryline","@Test public void testNoXML() throws Exception {
  sampleResult.setResponseData(NO_XML,null);
  result=assertion.getResult(sampleResult);
  assertTrue(result.isFailure());
  assertTrue(result.isError());
  assertNotNull(result.getFailureMessage());
  assertTrue(result.getFailureMessage().contains(Content is not allowed in prolog));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XmlAssertionTest.java",84
304,"'-tryline","@BeforeEach public void setUp() throws Exception {
  jmctx=JMeterContextService.getContext();
  assertion=new XMLSchemaAssertion();
  assertion.setThreadContext(jmctx);
  result=new SampleResult();
  JMeterVariables vars=new JMeterVariables();
  jmctx.setVariables(vars);
  jmctx.setPreviousResult(result);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XMLSchemaAssertionTest.java",43
305,"'-tryline","@Test public void testAssertionOK() throws Exception {
  result.setResponseData(readFile(testfiles/XMLSchematest.xml));
  assertion.setXsdFileName(findTestPath(testfiles/XMLSchema-pass.xsd));
  AssertionResult res=assertion.getResult(jmctx.getPreviousResult());
  testLog.debug(isError()  + res.isError() +  isFailure() + res.isFailure());
  testLog.debug(failure  + res.getFailureMessage());
  assertFalse(Should not be an error,res.isError());
  assertFalse(Should not be a failure,res.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XMLSchemaAssertionTest.java",70
306,"'-tryline","@Test public void testAssertionFail() throws Exception {
  result.setResponseData(readFile(testfiles/XMLSchematest.xml));
  assertion.setXsdFileName(testfiles/XMLSchema-fail.xsd);
  AssertionResult res=assertion.getResult(jmctx.getPreviousResult());
  testLog.debug(isError()  + res.isError() +  isFailure() + res.isFailure());
  testLog.debug(failure  + res.getFailureMessage());
  assertTrue(res.isError());
  assertFalse(res.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XMLSchemaAssertionTest.java",81
307,"'-tryline","@Test public void testAssertionBadXSDFile() throws Exception {
  result.setResponseData(readFile(testfiles/XMLSchematest.xml));
  assertion.setXsdFileName(xtestfiles/XMLSchema-fail.xsd);
  AssertionResult res=assertion.getResult(jmctx.getPreviousResult());
  testLog.debug(isError()  + res.isError() +  isFailure() + res.isFailure());
  testLog.debug(failure  + res.getFailureMessage());
  assertTrue(res.getFailureMessage().indexOf(Failed to read schema document) > 0);
  assertTrue(res.isError());
  assertFalse(res.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XMLSchemaAssertionTest.java",92
308,"'-tryline","@Test public void testAssertionNoFile() throws Exception {
  result.setResponseData(readFile(testfiles/XMLSchematest.xml));
  assertion.setXsdFileName();
  AssertionResult res=assertion.getResult(jmctx.getPreviousResult());
  testLog.debug(isError()  + res.isError() +  isFailure() + res.isFailure());
  testLog.debug(failure  + res.getFailureMessage());
  assertEquals(XMLSchemaAssertion.FILE_NAME_IS_REQUIRED,res.getFailureMessage());
  assertFalse(res.isError());
  assertTrue(res.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XMLSchemaAssertionTest.java",104
309,"'-tryline","@Test public void testAssertionNoResult() throws Exception {
  assertion.setXsdFileName(testfiles/XMLSchema-fail.xsd);
  AssertionResult res=assertion.getResult(jmctx.getPreviousResult());
  testLog.debug(isError()  + res.isError() +  isFailure() + res.isFailure());
  testLog.debug(failure  + res.getFailureMessage());
  assertEquals(AssertionResult.RESPONSE_WAS_NULL,res.getFailureMessage());
  assertFalse(res.isError());
  assertTrue(res.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XMLSchemaAssertionTest.java",116
310,"'-tryline","@Test public void testAssertionEmptyResult() throws Exception {
  result.setResponseData(,null);
  assertion.setXsdFileName(testfiles/XMLSchema-fail.xsd);
  AssertionResult res=assertion.getResult(jmctx.getPreviousResult());
  testLog.debug(isError()  + res.isError() +  isFailure() + res.isFailure());
  testLog.debug(failure  + res.getFailureMessage());
  assertEquals(AssertionResult.RESPONSE_WAS_NULL,res.getFailureMessage());
  assertFalse(res.isError());
  assertTrue(res.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XMLSchemaAssertionTest.java",128
311,"'-tryline","@Test public void testAssertionBlankResult() throws Exception {
  result.setResponseData( ,null);
  assertion.setXsdFileName(testfiles/XMLSchema-fail.xsd);
  AssertionResult res=assertion.getResult(jmctx.getPreviousResult());
  testLog.debug(isError()  + res.isError() +  isFailure() + res.isFailure());
  testLog.debug(failure  + res.getFailureMessage());
  assertTrue(res.getFailureMessage().indexOf(Premature end of file) > 0);
  assertTrue(res.isError());
  assertFalse(res.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XMLSchemaAssertionTest.java",140
312,"'-tryline","@Test public void testXMLTrailingContent() throws Exception {
  ByteArrayOutputStream baos=readBA(testfiles/XMLSchematest.xml);
  baos.write(extra.getBytes());
  result.setResponseData(baos.toByteArray());
  assertion.setXsdFileName(findTestPath(testfiles/XMLSchema-pass.xsd));
  AssertionResult res=assertion.getResult(jmctx.getPreviousResult());
  testLog.debug(isError()  + res.isError() +  isFailure() + res.isFailure());
  testLog.debug(failure  + res.getFailureMessage());
  assertTrue(res.getFailureMessage().indexOf(Content is not allowed in trailing section) > 0);
  assertTrue(res.isError());
  assertFalse(res.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XMLSchemaAssertionTest.java",152
313,"'-tryline","@Test public void testXMLTrailingWhitespace() throws Exception {
  ByteArrayOutputStream baos=readBA(testfiles/XMLSchematest.xml);
  baos.write( \t\n.getBytes());
  result.setResponseData(baos.toByteArray());
  assertion.setXsdFileName(findTestPath(testfiles/XMLSchema-pass.xsd));
  AssertionResult res=assertion.getResult(jmctx.getPreviousResult());
  testLog.debug(xisError()  + res.isError() +  isFailure() + res.isFailure());
  testLog.debug(failure  + res.getFailureMessage());
  assertFalse(res.isError());
  assertFalse(res.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XMLSchemaAssertionTest.java",166
314,"'-tryline","@BeforeEach public void setUp() throws Exception {
  jmctx=JMeterContextService.getContext();
  assertion=new XPath2Assertion();
  assertion.setThreadContext(jmctx);
  response=new SampleResult();
  response.setResponseData(xmlDoc,UTF-8);
  vars=new JMeterVariables();
  jmctx.setVariables(vars);
  jmctx.setPreviousResult(response);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPath2AssertionTest.java",47
315,"'-tryline","@BeforeEach public void setUp() throws Exception {
  jmctx=JMeterContextService.getContext();
  assertion=new XPathAssertion();
  assertion.setThreadContext(jmctx);
  result=new SampleResult();
  result.setResponseData(readFile(testfiles/XPathAssertionTest.xml));
  vars=new JMeterVariables();
  jmctx.setVariables(vars);
  jmctx.setPreviousResult(result);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPathAssertionTest.java",47
316,"'-tryline","@Test public void testAssertionOK() throws Exception {
  assertion.setXPathString(/);
  AssertionResult res=assertion.getResult(result);
  testLog.debug(isError() {} isFailure() {},res.isError(),res.isFailure());
  testLog.debug(failure message: {},res.getFailureMessage());
  assertFalse(Should not be an error,res.isError());
  assertFalse(Should not be a failure,res.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPathAssertionTest.java",86
317,"'-tryline","@Test public void testAssertionFail() throws Exception {
  assertion.setXPathString(//x);
  AssertionResult res=assertion.getResult(result);
  testLog.debug(isError() {} isFailure() {},res.isError(),res.isFailure());
  testLog.debug(failure message: {},res.getFailureMessage());
  assertFalse(Should not be an error,res.isError());
  assertTrue(Should be a failure,res.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPathAssertionTest.java",96
318,"'-tryline","@Test public void testAssertionPath1() throws Exception {
  assertion.setXPathString(//*[code=1]);
  AssertionResult res=assertion.getResult(result);
  testLog.debug(isError() {} isFailure() {},res.isError(),res.isFailure());
  testLog.debug(failure message: {},res.getFailureMessage());
  assertFalse(Should not be an error,res.isError());
  assertFalse(Should not be a failure,res.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPathAssertionTest.java",106
319,"'-tryline","@Test public void testAssertionPath2() throws Exception {
  assertion.setXPathString(//*[code=2]);
  assertion.setNegated(true);
  AssertionResult res=assertion.getResult(result);
  testLog.debug(isError() {} isFailure() {},res.isError(),res.isFailure());
  testLog.debug(failure message: {},res.getFailureMessage());
  assertFalse(Should not be an error,res.isError());
  assertFalse(Should not be a failure,res.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPathAssertionTest.java",126
320,"'-tryline","@Test public void testAssertionBool1() throws Exception {
  assertion.setXPathString(count(//error)=2);
  AssertionResult res=assertion.getResult(result);
  testLog.debug(isError() {} isFailure() {},res.isError(),res.isFailure());
  testLog.debug(failure message: {},res.getFailureMessage());
  assertFalse(Should not be an error,res.isError());
  assertFalse(Should not be a failure,res.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPathAssertionTest.java",148
321,"'-tryline","@Test public void testAssertionBool2() throws Exception {
  assertion.setXPathString(count(//*[code=1])=1);
  AssertionResult res=assertion.getResult(result);
  testLog.debug(isError() {} isFailure() {},res.isError(),res.isFailure());
  testLog.debug(failure message: {},res.getFailureMessage());
  assertFalse(Should not be an error,res.isError());
  assertFalse(Should not be a failure,res.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPathAssertionTest.java",171
322,"'-tryline","@Test public void testAssertionBool3() throws Exception {
  assertion.setXPathString(count(//error)=1);
  AssertionResult res=assertion.getResult(result);
  testLog.debug(isError() {} isFailure() {},res.isError(),res.isFailure());
  testLog.debug(failure message: {},res.getFailureMessage());
  assertFalse(Should not be an error,res.isError());
  assertTrue(Should be a failure,res.isFailure());
  assertEquals(No Nodes Matched for count(//error)=1,res.getFailureMessage());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPathAssertionTest.java",194
323,"'-tryline","@Test public void testAssertionBool4() throws Exception {
  assertion.setXPathString(count(//*[code=2])=1);
  AssertionResult res=assertion.getResult(result);
  testLog.debug(isError() {} isFailure() {},res.isError(),res.isFailure());
  testLog.debug(failure message: {},res.getFailureMessage());
  assertFalse(Should not be an error,res.isError());
  assertTrue(Should be a failure,res.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPathAssertionTest.java",215
324,"'-tryline","@Test public void testAssertionBool4Negated() throws Exception {
  assertion.setXPathString(count(//*[code=2])=1);
  AssertionResult res=assertion.getResult(result);
  assertion.setNegated(true);
  testLog.debug(isError() {} isFailure() {},res.isError(),res.isFailure());
  testLog.debug(failure message: {},res.getFailureMessage());
  assertFalse(Should not be an error,res.isError());
  assertTrue(Should be a failure,res.isFailure());
  assertEquals(No Nodes Matched for count(//*[code=2])=1,res.getFailureMessage());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPathAssertionTest.java",225
325,"'-tryline","@Test public void testAssertionNumber() throws Exception {
  assertion.setXPathString(count(//error));
  AssertionResult res=assertion.getResult(result);
  testLog.debug(isError() {} isFailure() {},res.isError(),res.isFailure());
  testLog.debug(failure message: {},res.getFailureMessage());
  assertFalse(Should not be an error,res.isError());
  assertTrue(Should be a failure,res.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPathAssertionTest.java",236
326,"'-tryline","@Test public void testAssertionNoResult() throws Exception {
  result=new SampleResult();
  AssertionResult res=assertion.getResult(result);
  testLog.debug(isError() {} isFailure() {},res.isError(),res.isFailure());
  testLog.debug(failure message: {},res.getFailureMessage());
  assertEquals(AssertionResult.RESPONSE_WAS_NULL,res.getFailureMessage());
  assertFalse(Should not be an error,res.isError());
  assertTrue(Should be a failure,res.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPathAssertionTest.java",246
327,"'-tryline","@Test public void testAssertionEmptyResult() throws Exception {
  result.setResponseData(,null);
  AssertionResult res=assertion.getResult(result);
  testLog.debug(isError() {} isFailure() {},res.isError(),res.isFailure());
  testLog.debug(failure message: {},res.getFailureMessage());
  assertEquals(AssertionResult.RESPONSE_WAS_NULL,res.getFailureMessage());
  assertFalse(Should not be an error,res.isError());
  assertTrue(Should be a failure,res.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPathAssertionTest.java",258
328,"'-tryline","@Test public void testAssertionBlankResult() throws Exception {
  result.setResponseData( ,null);
  AssertionResult res=assertion.getResult(result);
  testLog.debug(isError() {} isFailure() {},res.isError(),res.isFailure());
  testLog.debug(failure message: {},res.getFailureMessage());
  assertTrue(res.getFailureMessage().indexOf(Premature end of file) > 0);
  assertTrue(Should be an error,res.isError());
  assertFalse(Should not be a failure,res.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPathAssertionTest.java",269
329,"'-tryline","@Test public void testNoTolerance() throws Exception {
  String data=<html><head><title>testtitle</title></head> + <body> + <p><i><b>invalid tag nesting</i></b><hr>+ </body></html>;
  result.setResponseData(data,null);
  vars=new JMeterVariables();
  jmctx.setVariables(vars);
  jmctx.setPreviousResult(result);
  assertion.setXPathString(/html/head/title);
  assertion.setValidating(false);
  assertion.setTolerant(false);
  AssertionResult res=assertion.getResult(result);
  log.debug(failureMessage: {},res.getFailureMessage());
  assertTrue(res.isError());
  assertFalse(res.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPathAssertionTest.java",280
330,"'-tryline","@Test public void testAssertion() throws Exception {
  setAlternateResponseData();
  assertion.setXPathString(//row/value[@field = 'alias']);
  AssertionResult res=assertion.getResult(jmctx.getPreviousResult());
  log.debug( res {},res.isError());
  log.debug( failure {},res.getFailureMessage());
  assertFalse(res.isError());
  assertFalse(res.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPathAssertionTest.java",298
331,"'-tryline","@Test public void testNegateAssertion() throws Exception {
  setAlternateResponseData();
  assertion.setXPathString(//row/value[@field = 'noalias']);
  assertion.setNegated(true);
  AssertionResult res=assertion.getResult(jmctx.getPreviousResult());
  log.debug( res {},res.isError());
  log.debug( failure {},res.getFailureMessage());
  assertFalse(res.isError());
  assertFalse(res.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPathAssertionTest.java",309
332,"'-tryline","@Test public void testValidationFailure() throws Exception {
  setAlternateResponseData();
  assertion.setXPathString(//row/value[@field = 'alias']);
  assertion.setNegated(false);
  assertion.setValidating(true);
  AssertionResult res=assertion.getResult(jmctx.getPreviousResult());
  log.debug({} error: {} failure: {},res.getFailureMessage(),res.isError(),res.isFailure());
  assertTrue(res.isError());
  assertFalse(res.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPathAssertionTest.java",322
333,"'-tryline","@Test public void testValidationSuccess() throws Exception {
  String data=<?xml version=\1.0\?> + <!DOCTYPE BOOK [ + <!ELEMENT p (#PCDATA)>+ <!ELEMENT BOOK         (OPENER,SUBTITLE?,INTRODUCTION?,(SECTION | PART)+)>+ <!ELEMENT OPENER       (TITLE_TEXT)*>+ <!ELEMENT TITLE_TEXT   (#PCDATA)>+ <!ELEMENT SUBTITLE     (#PCDATA)>+ <!ELEMENT INTRODUCTION (HEADER, p+)+>+ <!ELEMENT PART         (HEADER, CHAPTER+)>+ <!ELEMENT SECTION      (HEADER, p+)>+ <!ELEMENT HEADER       (#PCDATA)>+ <!ELEMENT CHAPTER      (CHAPTER_NUMBER, CHAPTER_TEXT)>+ <!ELEMENT CHAPTER_NUMBER (#PCDATA)>+ <!ELEMENT CHAPTER_TEXT (p)+>+ ]>+ <BOOK>+ <OPENER>+ <TITLE_TEXT>All About Me</TITLE_TEXT>+ </OPENER>+ <PART>+ <HEADER>Welcome To My Book</HEADER>+ <CHAPTER>+ <CHAPTER_NUMBER>CHAPTER 1</CHAPTER_NUMBER>+ <CHAPTER_TEXT>+ <p>Glad you want to hear about me.</p>+ <p>There's so much to say!</p>+ <p>Where should we start?</p>+ <p>How about more about me?</p>+ </CHAPTER_TEXT>+ </CHAPTER>+ </PART>+ </BOOK>;
  result.setResponseData(data,null);
  vars=new JMeterVariables();
  jmctx.setVariables(vars);
  jmctx.setPreviousResult(result);
  assertion.setXPathString(/);
  assertion.setValidating(true);
  AssertionResult res=assertion.getResult(result);
  assertFalse(res.isError());
  assertFalse(res.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPathAssertionTest.java",334
334,"'-tryline","@Test public void testValidationFailureWithDTD() throws Exception {
  String data=<?xml version=\1.0\?> + <!DOCTYPE BOOK [ + <!ELEMENT p (#PCDATA)>+ <!ELEMENT BOOK         (OPENER,SUBTITLE?,INTRODUCTION?,(SECTION | PART)+)>+ <!ELEMENT OPENER       (TITLE_TEXT)*>+ <!ELEMENT TITLE_TEXT   (#PCDATA)>+ <!ELEMENT SUBTITLE     (#PCDATA)>+ <!ELEMENT INTRODUCTION (HEADER, p+)+>+ <!ELEMENT PART         (HEADER, CHAPTER+)>+ <!ELEMENT SECTION      (HEADER, p+)>+ <!ELEMENT HEADER       (#PCDATA)>+ <!ELEMENT CHAPTER      (CHAPTER_NUMBER, CHAPTER_TEXT)>+ <!ELEMENT CHAPTER_NUMBER (#PCDATA)>+ <!ELEMENT CHAPTER_TEXT (p)+>+ ]>+ <BOOK>+ <OPENER>+ <TITLE_TEXT>All About Me</TITLE_TEXT>+ </OPENER>+ <PART>+ <HEADER>Welcome To My Book</HEADER>+ <CHAPTER>+ <CHAPTER_NUMBER>CHAPTER 1</CHAPTER_NUMBER>+ <CHAPTER_TEXT>+ <p>Glad you want to hear about me.</p>+ <p>There's so much to say!</p>+ <p>Where should we start?</p>+ <p>How about more about me?</p>+ </CHAPTER_TEXT>+ </CHAPTER>+ <illegal>not defined in dtd</illegal>+ </PART>+ </BOOK>;
  result.setResponseData(data,null);
  vars=new JMeterVariables();
  jmctx.setVariables(vars);
  jmctx.setPreviousResult(result);
  assertion.setXPathString(/);
  assertion.setValidating(true);
  AssertionResult res=assertion.getResult(result);
  log.debug(failureMessage: {},res.getFailureMessage());
  assertTrue(res.isError());
  assertFalse(res.isFailure());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPathAssertionTest.java",361
335,"'-tryline","@Test public void testTolerance() throws Exception {
  String data=<html><head><title>testtitle</title></head> + <body> + <p><i><b>invalid tag nesting</i></b><hr>+ </body></html>;
  result.setResponseData(data,null);
  vars=new JMeterVariables();
  jmctx.setVariables(vars);
  jmctx.setPreviousResult(result);
  assertion.setXPathString(/html/head/title);
  assertion.setValidating(true);
  assertion.setTolerant(true);
  AssertionResult res=assertion.getResult(result);
  log.debug(failureMessage: {},res.getFailureMessage());
  assertFalse(res.isFailure());
  assertFalse(res.isError());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPathAssertionTest.java",389
336,"'-tryline","/** 
 * Test that adding an argument to the table results in an appropriate TestElement being created.
 */
@Test public void testArgumentCreation() throws Exception {
  ArgumentsPanel gui=new ArgumentsPanel();
  gui.tableModel.addRow(new Argument());
  gui.tableModel.setValueAt(howdy,0,0);
  gui.tableModel.addRow(new Argument());
  gui.tableModel.setValueAt(doody,0,1);
  assertEquals(=,((Argument)((Arguments)gui.createTestElement()).getArguments().get(0).getObjectValue()).getMetaData());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\config\gui\TestArgumentsPanel.java",33
337,"'-tryline","@Test public void testopen() throws Exception {
  CSVDataSet csv=new CSVDataSet();
  csv.setFilename(No.such.filename);
  csv.setVariableNames(a,b,c);
  csv.setDelimiter(,);
  try {
    csv.iterationStart(null);
    fail(Bad filename in CSVDataSet -> IllegalArgumentException: File No.such.filename must exist and be readable);
  }
 catch (  IllegalArgumentException ignored) {
    assertEquals(Bad filename in CSVDataSet -> exception,File No.such.filename must exist and be readable,ignored.getMessage());
  }
  csv=new CSVDataSet();
  csv.setFilename(findTestPath(testfiles/testempty.csv));
  csv.setVariableNames(a,b,c);
  csv.setDelimiter(,);
  csv.iterationStart(null);
  assertEquals(,threadVars.get(a));
  assertEquals(b1,threadVars.get(b));
  assertEquals(c1,threadVars.get(c));
  csv.iterationStart(null);
  assertEquals(a2,threadVars.get(a));
  assertEquals(,threadVars.get(b));
  assertEquals(c2,threadVars.get(c));
  csv.iterationStart(null);
  assertEquals(a3,threadVars.get(a));
  assertEquals(b3,threadVars.get(b));
  assertEquals(,threadVars.get(c));
  csv.iterationStart(null);
  assertEquals(a4,threadVars.get(a));
  assertEquals(b4,threadVars.get(b));
  assertEquals(c4,threadVars.get(c));
  csv.iterationStart(null);
  assertEquals(,threadVars.get(a));
  assertEquals(b1,threadVars.get(b));
  assertEquals(c1,threadVars.get(c));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\config\TestCVSDataSet.java",55
338,"'-tryline","@Test public void testutf8() throws Exception {
  CSVDataSet csv=new CSVDataSet();
  csv.setFilename(findTestPath(testfiles/testutf8.csv));
  csv.setVariableNames(a,b,c,d);
  csv.setDelimiter(,);
  csv.setQuotedData(true);
  csv.setFileEncoding(UTF-8);
  csv.iterationStart(null);
  assertEquals(a1,threadVars.get(a));
  assertEquals(b1,threadVars.get(b));
  assertEquals(\u00e71,threadVars.get(c));
  assertEquals(d1,threadVars.get(d));
  csv.iterationStart(null);
  assertEquals(a2,threadVars.get(a));
  assertEquals(b2,threadVars.get(b));
  assertEquals(\u00e72,threadVars.get(c));
  assertEquals(d2,threadVars.get(d));
  csv.iterationStart(null);
  assertEquals(a3,threadVars.get(a));
  assertEquals(b3,threadVars.get(b));
  assertEquals(\u00e73,threadVars.get(c));
  assertEquals(d3,threadVars.get(d));
  csv.iterationStart(null);
  assertEquals(a4,threadVars.get(a));
  assertEquals(b4,threadVars.get(b));
  assertEquals(\u00e74,threadVars.get(c));
  assertEquals(d4,threadVars.get(d));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\config\TestCVSDataSet.java",102
339,"'-tryline","@Test public void testRandom() throws Exception {
  config.setMinimumValue(MIN_VALUE);
  config.setMaximumValue(MAX_VALUE);
  for (int i=0; i < 100; i++) {
    config.iterationStart(null);
    String value=threadVars.get(RANDOM_VAR_NAME);
    assertNotNull(threadVars.get(RANDOM_VAR_NAME));
    int numericValue=Integer.parseInt(value);
    assertTrue(numericValue >= 0 && numericValue <= 10,value: + numericValue +  is not in range [+ MIN_VALUE+ ,+ MAX_VALUE+ ]);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\config\TestRandomVariableConfig.java",53
340,"'-tryline","@Test public void testRandomWithFormat() throws Exception {
  Locale prevLocale=Locale.getDefault();
  try {
    Locale.setDefault(Locale.US);
    config.setMinimumValue(MAX_VALUE);
    config.setMaximumValue(MAX_VALUE);
    config.setOutputFormat(000.00);
    config.iterationStart(null);
    String value=threadVars.get(RANDOM_VAR_NAME);
    assertNotNull(threadVars.get(RANDOM_VAR_NAME));
    assertEquals(010.00,value);
  }
  finally {
    Locale.setDefault(prevLocale);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\config\TestRandomVariableConfig.java",67
341,"'-tryline","@Test public void testInvalidRange() throws Exception {
  config.setMinimumValue(MAX_VALUE);
  config.setMaximumValue(MIN_VALUE);
  config.iterationStart(null);
  assertNull(threadVars.get(RANDOM_VAR_NAME));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\config\TestRandomVariableConfig.java",85
342,"'-tryline","@Test public void testProcessing() throws Exception {
  testLog.debug(Testing Generic Controller);
  GenericController controller=new GenericController();
  GenericController sub_1=new GenericController();
  sub_1.addTestElement(new TestSampler(one));
  sub_1.addTestElement(new TestSampler(two));
  controller.addTestElement(sub_1);
  controller.addTestElement(new TestSampler(three));
  GenericController sub_2=new GenericController();
  GenericController sub_3=new GenericController();
  sub_2.addTestElement(new TestSampler(four));
  sub_3.addTestElement(new TestSampler(five));
  sub_3.addTestElement(new TestSampler(six));
  sub_2.addTestElement(sub_3);
  sub_2.addTestElement(new TestSampler(seven));
  controller.addTestElement(sub_2);
  String[] order=new String[]{one,two,three,four,five,six,seven};
  int counter=7;
  controller.initialize();
  for (int i=0; i < 2; i++) {
    assertEquals(7,counter);
    counter=0;
    TestElement sampler=null;
    while ((sampler=controller.next()) != null) {
      assertEquals(order[counter++],sampler.getName());
    }
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestGenericController.java",29
343,"'-tryline","@BugId(56160) @Test public void testStackOverflow() throws Exception {
  LoopController controller=new LoopController();
  controller.setLoops(1);
  controller.setContinueForever(false);
  IfController ifCont=new IfController(true==false);
  ifCont.setUseExpression(false);
  ifCont.setEvaluateAll(false);
  WhileController whileController=new WhileController();
  whileController.setCondition(${__javaScript(\true\ != \false\)});
  whileController.addTestElement(new TestSampler(Sample1));
  controller.addTestElement(ifCont);
  ifCont.addTestElement(whileController);
  Sampler sampler=null;
  int counter=0;
  controller.initialize();
  controller.setRunningVersion(true);
  ifCont.setRunningVersion(true);
  whileController.setRunningVersion(true);
  try {
    while ((sampler=controller.next()) != null) {
      sampler.sample(null);
      counter++;
    }
    assertEquals(0,counter);
  }
 catch (  StackOverflowError e) {
    fail(Stackoverflow occurred in testStackOverflow);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestIfController.java",39
344,"'-tryline","@BugId(53768) @Test public void testBug53768() throws Exception {
  LoopController controller=new LoopController();
  controller.setLoops(1);
  controller.setContinueForever(false);
  Arguments arguments=new Arguments();
  arguments.addArgument(VAR1,0,=);
  DebugSampler debugSampler1=new DebugSampler();
  debugSampler1.setName(VAR1 = ${VAR1});
  IfController ifCont=new IfController(true==false);
  ifCont.setUseExpression(false);
  ifCont.setEvaluateAll(false);
  IfController ifCont2=new IfController(true==true);
  ifCont2.setUseExpression(false);
  ifCont2.setEvaluateAll(false);
  CounterConfig counterConfig=new CounterConfig();
  counterConfig.setStart(1);
  counterConfig.setIncrement(1);
  counterConfig.setVarName(VAR1);
  DebugSampler debugSampler2=new DebugSampler();
  debugSampler2.setName(VAR1 = ${VAR1});
  controller.addTestElement(arguments);
  controller.addTestElement(debugSampler1);
  controller.addTestElement(ifCont);
  ifCont.addTestElement(ifCont2);
  ifCont2.addTestElement(counterConfig);
  controller.addTestElement(debugSampler2);
  controller.initialize();
  controller.setRunningVersion(true);
  ifCont.setRunningVersion(true);
  ifCont2.setRunningVersion(true);
  counterConfig.setRunningVersion(true);
  arguments.setRunningVersion(true);
  debugSampler1.setRunningVersion(true);
  debugSampler2.setRunningVersion(true);
  ifCont2.addIterationListener(counterConfig);
  JMeterVariables vars=new JMeterVariables();
  JMeterContext jmctx=JMeterContextService.getContext();
  jmctx.setVariables(vars);
  vars.put(VAR1,0);
  try {
    Sampler sampler=controller.next();
    sampler.sample(null);
    assertEquals(0,vars.get(VAR1));
    sampler=controller.next();
    sampler.sample(null);
    assertEquals(0,vars.get(VAR1));
  }
 catch (  StackOverflowError e) {
    fail(Stackoverflow occurred in testStackOverflow);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestIfController.java",74
345,"'-tryline","@Test @Disabled public void testProcessing() throws Exception {
  GenericController controller=new GenericController();
  controller.addTestElement(new IfController(false==false));
  controller.addTestElement(new IfController( \a\.equals(\a\)));
  controller.addTestElement(new IfController(2<100));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestIfController.java",138
346,"'-tryline","@Test public void testProcessingTrue() throws Exception {
  LoopController controller=new LoopController();
  controller.setLoops(2);
  controller.addTestElement(new TestSampler(Sample1));
  IfController ifCont=new IfController(true==true);
  ifCont.setEvaluateAll(true);
  ifCont.addTestElement(new TestSampler(Sample2));
  TestSampler sample3=new TestSampler(Sample3);
  ifCont.addTestElement(sample3);
  controller.addTestElement(ifCont);
  String[] order=new String[]{Sample1,Sample2,Sample3,Sample1,Sample2,Sample3};
  int counter=0;
  controller.initialize();
  controller.setRunningVersion(true);
  ifCont.setRunningVersion(true);
  Sampler sampler=null;
  while ((sampler=controller.next()) != null) {
    sampler.sample(null);
    assertEquals(order[counter],sampler.getName());
    counter++;
  }
  assertEquals(counter,6);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestIfController.java",152
347,"'-tryline","@Test public void testProcessingTrueWithExpression() throws Exception {
  LoopController controller=new LoopController();
  controller.setLoops(2);
  controller.addTestElement(new TestSampler(Sample1));
  IfController ifCont=new IfController(true);
  ifCont.setUseExpression(true);
  ifCont.setEvaluateAll(false);
  ifCont.addTestElement(new TestSampler(Sample2));
  TestSampler sample3=new TestSampler(Sample3);
  ifCont.addTestElement(sample3);
  controller.addTestElement(ifCont);
  String[] order=new String[]{Sample1,Sample2,Sample3,Sample1,Sample2,Sample3};
  int counter=0;
  controller.initialize();
  controller.setRunningVersion(true);
  ifCont.setRunningVersion(true);
  Sampler sampler=null;
  while ((sampler=controller.next()) != null) {
    sampler.sample(null);
    assertEquals(order[counter],sampler.getName());
    counter++;
  }
  assertEquals(counter,6);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestIfController.java",179
348,"'-tryline","/** 
 * Test false return on sample3 (sample4 doesn't execute)
 */
@Test public void testEvaluateAllChildrenWithoutSubController() throws Exception {
  LoopController controller=new LoopController();
  controller.setLoops(2);
  controller.addTestElement(new TestSampler(Sample1));
  IfController ifCont=new IfController(true==true);
  ifCont.setEvaluateAll(true);
  controller.addTestElement(ifCont);
  ifCont.addTestElement(new TestSampler(Sample2));
  TestSampler sample3=new TestSampler(Sample3);
  ifCont.addTestElement(sample3);
  TestSampler sample4=new TestSampler(Sample4);
  ifCont.addTestElement(sample4);
  String[] order=new String[]{Sample1,Sample2,Sample3,Sample1,Sample2,Sample3};
  int counter=0;
  controller.initialize();
  controller.setRunningVersion(true);
  ifCont.setRunningVersion(true);
  Sampler sampler=null;
  while ((sampler=controller.next()) != null) {
    sampler.sample(null);
    if (sampler.getName().equals(Sample3)) {
      ifCont.setCondition(true==false);
    }
    assertEquals(order[counter],sampler.getName());
    counter++;
  }
  assertEquals(counter,6);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestIfController.java",208
349,"'-tryline","/** 
 * test 2 loops with a sub generic controller (sample4 doesn't execute)
 */
@Test public void testEvaluateAllChildrenWithSubController() throws Exception {
  LoopController controller=new LoopController();
  controller.setLoops(2);
  controller.addTestElement(new TestSampler(Sample1));
  IfController ifCont=new IfController(true==true);
  ifCont.setEvaluateAll(true);
  controller.addTestElement(ifCont);
  ifCont.addTestElement(new TestSampler(Sample2));
  GenericController genericCont=new GenericController();
  TestSampler sample3=new TestSampler(Sample3);
  genericCont.addTestElement(sample3);
  TestSampler sample4=new TestSampler(Sample4);
  genericCont.addTestElement(sample4);
  ifCont.addTestElement(genericCont);
  String[] order=new String[]{Sample1,Sample2,Sample3,Sample1,Sample2,Sample3};
  int counter=0;
  controller.initialize();
  controller.setRunningVersion(true);
  ifCont.setRunningVersion(true);
  genericCont.setRunningVersion(true);
  Sampler sampler=null;
  while ((sampler=controller.next()) != null) {
    sampler.sample(null);
    if (sampler.getName().equals(Sample3)) {
      ifCont.setCondition(true==false);
    }
    assertEquals(order[counter],sampler.getName());
    counter++;
  }
  assertEquals(counter,6);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestIfController.java",244
350,"'-tryline","@Test public void testProcessing() throws Exception {
  testLog.debug(Testing Interleave Controller 1);
  GenericController controller=new GenericController();
  InterleaveControl sub_1=new InterleaveControl();
  sub_1.setStyle(InterleaveControl.IGNORE_SUB_CONTROLLERS);
  sub_1.addTestElement(new TestSampler(one));
  sub_1.addTestElement(new TestSampler(two));
  controller.addTestElement(sub_1);
  controller.addTestElement(new TestSampler(three));
  LoopController sub_2=new LoopController();
  sub_2.setLoops(3);
  GenericController sub_3=new GenericController();
  sub_2.addTestElement(new TestSampler(four));
  sub_3.addTestElement(new TestSampler(five));
  sub_3.addTestElement(new TestSampler(six));
  sub_2.addTestElement(sub_3);
  sub_2.addTestElement(new TestSampler(seven));
  controller.addTestElement(sub_2);
  String[] interleaveOrder=new String[]{one,two};
  String[] order=new String[]{dummy,three,four,five,six,seven,four,five,six,seven,four,five,six,seven};
  int counter=14;
  controller.setRunningVersion(true);
  sub_1.setRunningVersion(true);
  sub_2.setRunningVersion(true);
  sub_3.setRunningVersion(true);
  controller.initialize();
  for (int i=0; i < 4; i++) {
    assertEquals(14,counter);
    counter=0;
    TestElement sampler=null;
    while ((sampler=controller.next()) != null) {
      if (counter == 0) {
        assertEquals(interleaveOrder[i % 2],sampler.getName());
      }
 else {
        assertEquals(order[counter],sampler.getName());
      }
      counter++;
    }
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestInterleaveControl.java",29
351,"'-tryline","@Test public void testProcessing6() throws Exception {
  testLog.debug(Testing Interleave Controller 6);
  GenericController controller=new GenericController();
  InterleaveControl sub_1=new InterleaveControl();
  controller.addTestElement(new TestSampler(one));
  sub_1.setStyle(InterleaveControl.IGNORE_SUB_CONTROLLERS);
  controller.addTestElement(sub_1);
  LoopController sub_2=new LoopController();
  sub_1.addTestElement(sub_2);
  sub_2.setLoops(3);
  int counter=1;
  controller.setRunningVersion(true);
  sub_1.setRunningVersion(true);
  sub_2.setRunningVersion(true);
  controller.initialize();
  for (int i=0; i < 4; i++) {
    assertEquals(1,counter);
    counter=0;
    TestElement sampler=null;
    while ((sampler=controller.next()) != null) {
      assertEquals(one,sampler.getName());
      counter++;
    }
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestInterleaveControl.java",72
352,"'-tryline","@Test public void testProcessing2() throws Exception {
  testLog.debug(Testing Interleave Controller 2);
  GenericController controller=new GenericController();
  InterleaveControl sub_1=new InterleaveControl();
  sub_1.setStyle(InterleaveControl.IGNORE_SUB_CONTROLLERS);
  sub_1.addTestElement(new TestSampler(one));
  sub_1.addTestElement(new TestSampler(two));
  controller.addTestElement(sub_1);
  controller.addTestElement(new TestSampler(three));
  LoopController sub_2=new LoopController();
  sub_2.setLoops(3);
  GenericController sub_3=new GenericController();
  sub_2.addTestElement(new TestSampler(four));
  sub_3.addTestElement(new TestSampler(five));
  sub_3.addTestElement(new TestSampler(six));
  sub_2.addTestElement(sub_3);
  sub_2.addTestElement(new TestSampler(seven));
  sub_1.addTestElement(sub_2);
  String[] order=new String[]{one,three,two,three,four,three,one,three,two,three,five,three,one,three,two,three,six,three,one,three};
  int counter=0;
  controller.setRunningVersion(true);
  sub_1.setRunningVersion(true);
  sub_2.setRunningVersion(true);
  sub_3.setRunningVersion(true);
  controller.initialize();
  while (counter < order.length) {
    TestElement sampler=null;
    while ((sampler=controller.next()) != null) {
      assertEquals(failed on  + counter,order[counter],sampler.getName());
      counter++;
    }
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestInterleaveControl.java",99
353,"'-tryline","@Test public void testProcessing3() throws Exception {
  testLog.debug(Testing Interleave Controller 3);
  GenericController controller=new GenericController();
  InterleaveControl sub_1=new InterleaveControl();
  sub_1.setStyle(InterleaveControl.USE_SUB_CONTROLLERS);
  sub_1.addTestElement(new TestSampler(one));
  sub_1.addTestElement(new TestSampler(two));
  controller.addTestElement(sub_1);
  controller.addTestElement(new TestSampler(three));
  LoopController sub_2=new LoopController();
  sub_2.setLoops(3);
  GenericController sub_3=new GenericController();
  sub_2.addTestElement(new TestSampler(four));
  sub_3.addTestElement(new TestSampler(five));
  sub_3.addTestElement(new TestSampler(six));
  sub_2.addTestElement(sub_3);
  sub_2.addTestElement(new TestSampler(seven));
  sub_1.addTestElement(sub_2);
  String[] order=new String[]{one,three,two,three,four,five,six,seven,four,five,six,seven,four,five,six,seven,three,one,three,two,three};
  int counter=0;
  controller.setRunningVersion(true);
  sub_1.setRunningVersion(true);
  sub_2.setRunningVersion(true);
  sub_3.setRunningVersion(true);
  controller.initialize();
  while (counter < order.length) {
    TestElement sampler=null;
    while ((sampler=controller.next()) != null) {
      assertEquals(failed on + counter,order[counter],sampler.getName());
      counter++;
    }
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestInterleaveControl.java",135
354,"'-tryline","@Test public void testProcessing4() throws Exception {
  testLog.debug(Testing Interleave Controller 4);
  GenericController controller=new GenericController();
  InterleaveControl sub_1=new InterleaveControl();
  sub_1.setStyle(InterleaveControl.IGNORE_SUB_CONTROLLERS);
  controller.addTestElement(sub_1);
  GenericController sub_2=new GenericController();
  sub_2.addTestElement(new TestSampler(one));
  sub_2.addTestElement(new TestSampler(two));
  sub_1.addTestElement(sub_2);
  GenericController sub_3=new GenericController();
  sub_3.addTestElement(new TestSampler(three));
  sub_3.addTestElement(new TestSampler(four));
  sub_1.addTestElement(sub_3);
  String[] order=new String[]{one,three,two,four};
  int counter=0;
  controller.setRunningVersion(true);
  sub_1.setRunningVersion(true);
  sub_2.setRunningVersion(true);
  sub_3.setRunningVersion(true);
  controller.initialize();
  while (counter < order.length) {
    TestElement sampler=null;
    while ((sampler=controller.next()) != null) {
      assertEquals(failed on + counter,order[counter],sampler.getName());
      counter++;
    }
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestInterleaveControl.java",171
355,"'-tryline","@Test public void testProcessing5() throws Exception {
  testLog.debug(Testing Interleave Controller 5);
  GenericController controller=new GenericController();
  InterleaveControl sub_1=new InterleaveControl();
  sub_1.setStyle(InterleaveControl.USE_SUB_CONTROLLERS);
  controller.addTestElement(sub_1);
  GenericController sub_2=new GenericController();
  sub_2.addTestElement(new TestSampler(one));
  sub_2.addTestElement(new TestSampler(two));
  sub_1.addTestElement(sub_2);
  GenericController sub_3=new GenericController();
  sub_3.addTestElement(new TestSampler(three));
  sub_3.addTestElement(new TestSampler(four));
  sub_1.addTestElement(sub_3);
  String[] order=new String[]{one,two,three,four};
  int counter=0;
  controller.setRunningVersion(true);
  sub_1.setRunningVersion(true);
  sub_2.setRunningVersion(true);
  sub_3.setRunningVersion(true);
  controller.initialize();
  while (counter < order.length) {
    TestElement sampler=null;
    while ((sampler=controller.next()) != null) {
      assertEquals(failed on + counter,order[counter],sampler.getName());
      counter++;
    }
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestInterleaveControl.java",202
356,"'-tryline","@Test public void testProcessing() throws Exception {
  JMeterContext jmctx=JMeterContextService.getContext();
  JMeterVariables variables=new JMeterVariables();
  jmctx.setVariables(variables);
  GenericController controller=new GenericController();
  GenericController sub_1=new GenericController();
  sub_1.addTestElement(new TestSampler(one));
  sub_1.addTestElement(new TestSampler(two));
  controller.addTestElement(sub_1);
  controller.addTestElement(new TestSampler(three));
  LoopController sub_2=new LoopController();
  String lcName=LC;
  sub_2.setName(lcName);
  sub_2.setLoops(3);
  GenericController sub_3=new GenericController();
  sub_2.addTestElement(new TestSampler(four));
  sub_3.addTestElement(new TestSampler(five));
  sub_3.addTestElement(new TestSampler(six));
  sub_2.addTestElement(sub_3);
  sub_2.addTestElement(new TestSampler(seven));
  controller.addTestElement(sub_2);
  String[] order=new String[]{one,two,three,four,five,six,seven,four,five,six,seven,four,five,six,seven};
  int counter=15;
  controller.setRunningVersion(true);
  sub_1.setRunningVersion(true);
  sub_2.setRunningVersion(true);
  sub_3.setRunningVersion(true);
  controller.initialize();
  int loopControl=0;
  for (int i=0; i < 2; i++) {
    loopControl=0;
    assertEquals(15,counter);
    counter=0;
    TestElement sampler=null;
    while ((sampler=controller.next()) != null) {
      assertEquals(order[counter++],sampler.getName());
      if (four.equals(sampler.getName())) {
        Integer value=(Integer)variables.getObject(JMeterUtils.formatJMeterExportedVariableName(lcName + LoopController.INDEX_VAR_NAME_SUFFIX));
        assertNotNull(value);
        assertEquals(Integer.valueOf(loopControl++),value);
      }
    }
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestLoopController.java",43
357,"'-tryline","@Test public void testLoopZeroTimes() throws Exception {
  JMeterContext jmctx=JMeterContextService.getContext();
  JMeterVariables variables=new JMeterVariables();
  jmctx.setVariables(variables);
  LoopController loop=new LoopController();
  String lcName=LC;
  loop.setName(lcName);
  loop.setLoops(0);
  loop.addTestElement(new TestSampler(never run));
  loop.initialize();
  assertNull(loop.next());
  Integer value=(Integer)variables.getObject(JMeterUtils.formatJMeterExportedVariableName(lcName + LoopController.INDEX_VAR_NAME_SUFFIX));
  assertNotNull(value);
  assertEquals(Integer.valueOf(0),value);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestLoopController.java",92
358,"'-tryline","@Test public void testInfiniteLoop() throws Exception {
  JMeterContext jmctx=JMeterContextService.getContext();
  LoopController loop=new LoopController();
  String lcName=LC;
  loop.setName(lcName);
  loop.setLoops(LoopController.INFINITE_LOOP_COUNT);
  loop.addTestElement(new TestSampler(never run));
  JMeterVariables variables=new JMeterVariables();
  jmctx.setVariables(variables);
  loop.setRunningVersion(true);
  loop.initialize();
  for (int i=0; i < 42; i++) {
    assertNotNull(loop.next());
    Integer value=(Integer)variables.getObject(JMeterUtils.formatJMeterExportedVariableName(lcName + LoopController.INDEX_VAR_NAME_SUFFIX));
    assertNotNull(value);
    assertEquals(Integer.valueOf(i),value);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestLoopController.java",111
359,"'-tryline","@Test public void testBug54467() throws Exception {
  JMeterContext jmctx=JMeterContextService.getContext();
  String lcName=LC;
  LoopController loop=new LoopController();
  loop.setName(lcName);
  Map<String,String> variables=new HashMap<>();
  ReplaceStringWithFunctions transformer=new ReplaceStringWithFunctions(new CompoundVariable(),variables);
  jmctx.setVariables(new JMeterVariables());
  StringProperty prop=new StringProperty(LoopController.LOOPS,${__Random(1,12,)});
  JMeterProperty newProp=transformer.transformValue(prop);
  newProp.setRunningVersion(true);
  loop.setProperty(newProp);
  loop.addTestElement(new TestSampler(random run));
  loop.setRunningVersion(true);
  loop.initialize();
  int loops=loop.getLoops();
  for (int i=0; i < loops; i++) {
    Sampler s=loop.next();
    assertNotNull(s);
    Integer value=(Integer)jmctx.getVariables().getObject(JMeterUtils.formatJMeterExportedVariableName(lcName + LoopController.INDEX_VAR_NAME_SUFFIX));
    assertNotNull(value);
    assertEquals(Integer.valueOf(i),value);
  }
  assertNull(loop.next());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestLoopController.java",132
360,"'-tryline","@Test public void testProcessing() throws Exception {
  GenericController controller=new GenericController();
  GenericController sub_1=new OnceOnlyController();
  sub_1.addTestElement(new TestSampler(one));
  sub_1.addTestElement(new TestSampler(two));
  controller.addTestElement(sub_1);
  controller.addTestElement(new TestSampler(three));
  LoopController sub_2=new LoopController();
  sub_2.setLoops(3);
  GenericController sub_3=new GenericController();
  sub_2.addTestElement(new TestSampler(four));
  sub_3.addTestElement(new TestSampler(five));
  sub_3.addTestElement(new TestSampler(six));
  sub_2.addTestElement(sub_3);
  sub_2.addTestElement(new TestSampler(seven));
  controller.addTestElement(sub_2);
  String[] interleaveOrder=new String[]{one,two};
  String[] order=new String[]{,,three,four,five,six,seven,four,five,six,seven,four,five,six,seven};
  int counter=15;
  controller.setRunningVersion(true);
  sub_1.setRunningVersion(true);
  sub_2.setRunningVersion(true);
  sub_3.setRunningVersion(true);
  controller.initialize();
  for (int i=0; i < 4; i++) {
    assertEquals(15,counter);
    counter=0;
    if (i > 0) {
      counter=2;
    }
    TestElement sampler=null;
    while ((sampler=controller.next()) != null) {
      if (i == 0 && counter < 2) {
        assertEquals(interleaveOrder[counter],sampler.getName());
      }
 else {
        assertEquals(order[counter],sampler.getName());
      }
      counter++;
    }
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestOnceOnlyController.java",29
361,"'-tryline","@Test public void testProcessing2() throws Exception {
  GenericController controller=new GenericController();
  GenericController sub_1=new OnceOnlyController();
  sub_1.addTestElement(new TestSampler(one));
  sub_1.addTestElement(new TestSampler(two));
  controller.addTestElement(sub_1);
  controller.addTestElement(new TestSampler(three));
  LoopController sub_2=new LoopController();
  sub_2.setLoops(3);
  OnceOnlyController sub_3=new OnceOnlyController();
  sub_2.addTestElement(new TestSampler(four));
  sub_3.addTestElement(new TestSampler(five));
  sub_3.addTestElement(new TestSampler(six));
  sub_2.addTestElement(sub_3);
  sub_2.addIterationListener(sub_3);
  sub_2.addTestElement(new TestSampler(seven));
  controller.addTestElement(sub_2);
  String[] interleaveOrder=new String[]{one,two};
  String[] order=new String[]{,,three,four,five,six,seven,four,seven,four,seven};
  int counter=11;
  controller.setRunningVersion(true);
  sub_1.setRunningVersion(true);
  sub_2.setRunningVersion(true);
  sub_3.setRunningVersion(true);
  controller.initialize();
  for (int i=0; i < 4; i++) {
    assertEquals(11,counter);
    counter=0;
    if (i > 0) {
      counter=2;
    }
    TestElement sampler=null;
    while ((sampler=controller.next()) != null) {
      if (i == 0 && counter < 2) {
        assertEquals(interleaveOrder[counter],sampler.getName());
      }
 else {
        assertEquals(order[counter],sampler.getName());
      }
      counter++;
    }
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestOnceOnlyController.java",73
362,"'-tryline","@Test public void testInOuterLoop() throws Exception {
  LoopController controller=new LoopController();
  final int outerLoopCount=4;
  controller.setLoops(outerLoopCount);
  OnceOnlyController sub_1=new OnceOnlyController();
  sub_1.addTestElement(new TestSampler(one));
  sub_1.addTestElement(new TestSampler(two));
  controller.addTestElement(sub_1);
  controller.addIterationListener(sub_1);
  controller.addTestElement(new TestSampler(three));
  LoopController sub_2=new LoopController();
  final int innerLoopCount=3;
  sub_2.setLoops(innerLoopCount);
  GenericController sub_3=new GenericController();
  sub_2.addTestElement(new TestSampler(four));
  sub_3.addTestElement(new TestSampler(five));
  sub_3.addTestElement(new TestSampler(six));
  sub_2.addTestElement(sub_3);
  sub_2.addTestElement(new TestSampler(seven));
  controller.addTestElement(sub_2);
  String[] onlyOnceOrder=new String[]{one,two};
  String[] order=new String[]{three,four,five,six,seven,four,five,six,seven,four,five,six,seven};
  int expectedNoSamples=2 + (1 + (3 + 1) * innerLoopCount) * outerLoopCount;
  String[] expectedSamples=new String[expectedNoSamples];
  System.arraycopy(onlyOnceOrder,0,expectedSamples,0,onlyOnceOrder.length);
  final int onceOnlySamples=onlyOnceOrder.length;
  for (int i=0; i < order.length * outerLoopCount; i++) {
    expectedSamples[onceOnlySamples + i]=order[i % order.length];
  }
  controller.setRunningVersion(true);
  sub_1.setRunningVersion(true);
  sub_2.setRunningVersion(true);
  sub_3.setRunningVersion(true);
  controller.initialize();
  int counter=0;
  TestElement sampler=null;
  while ((sampler=controller.next()) != null) {
    assertEquals(expectedSamples[counter],sampler.getPropertyAsString(TestElement.NAME));
    counter++;
  }
  assertEquals(expectedNoSamples,counter);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestOnceOnlyController.java",118
363,"'-tryline","@Test public void testInsideInnerLoop() throws Exception {
  LoopController controller=new LoopController();
  final int outerLoopCount=4;
  controller.setLoops(outerLoopCount);
  OnceOnlyController sub_1=new OnceOnlyController();
  sub_1.addTestElement(new TestSampler(one));
  sub_1.addTestElement(new TestSampler(two));
  controller.addTestElement(sub_1);
  controller.addIterationListener(sub_1);
  controller.addTestElement(new TestSampler(three));
  LoopController sub_2=new LoopController();
  final int innerLoopCount=3;
  sub_2.setLoops(innerLoopCount);
  sub_2.addTestElement(new TestSampler(four));
  OnceOnlyController sub_3=new OnceOnlyController();
  sub_3.addTestElement(new TestSampler(five));
  sub_3.addTestElement(new TestSampler(six));
  sub_2.addTestElement(sub_3);
  sub_2.addIterationListener(sub_3);
  sub_2.addTestElement(new TestSampler(seven));
  controller.addTestElement(sub_2);
  String[] onlyOnceOrder=new String[]{one,two};
  String[] order=new String[]{three,four,five,six,seven,four,seven,four,seven};
  int expectedNoSamples=2 + (1 + 2 + (1 + 1) * innerLoopCount) * outerLoopCount;
  String[] expectedSamples=new String[expectedNoSamples];
  System.arraycopy(onlyOnceOrder,0,expectedSamples,0,onlyOnceOrder.length);
  final int onceOnlySamples=onlyOnceOrder.length;
  for (int i=0; i < order.length * outerLoopCount; i++) {
    expectedSamples[onceOnlySamples + i]=order[i % order.length];
  }
  controller.setRunningVersion(true);
  sub_1.setRunningVersion(true);
  sub_2.setRunningVersion(true);
  sub_3.setRunningVersion(true);
  controller.initialize();
  int counter=0;
  TestElement sampler=null;
  while ((sampler=controller.next()) != null) {
    assertEquals(expectedSamples[counter],sampler.getPropertyAsString(TestElement.NAME));
    counter++;
  }
  assertEquals(expectedNoSamples,counter);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestOnceOnlyController.java",177
364,"'-tryline","@Test public void testIssue57958() throws Exception {
  JMeterContextService.getContext().setVariables(new JMeterVariables());
  TestSampleListener listener=new TestSampleListener();
  TransactionController transactionController=new TransactionController();
  transactionController.setGenerateParentSample(true);
  ResponseAssertion assertion=new ResponseAssertion();
  assertion.setTestFieldResponseCode();
  assertion.setToEqualsType();
  assertion.addTestString(201);
  DebugSampler debugSampler=new DebugSampler();
  debugSampler.addTestElement(assertion);
  LoopController loop=new LoopController();
  loop.setLoops(1);
  loop.setContinueForever(false);
  ListedHashTree hashTree=new ListedHashTree();
  hashTree.add(loop);
  hashTree.add(loop,transactionController);
  hashTree.add(transactionController,debugSampler);
  hashTree.add(transactionController,listener);
  hashTree.add(debugSampler,assertion);
  TestCompiler compiler=new TestCompiler(hashTree);
  hashTree.traverse(compiler);
  ThreadGroup threadGroup=new ThreadGroup();
  threadGroup.setNumThreads(1);
  ListenerNotifier notifier=new ListenerNotifier();
  JMeterThread thread=new JMeterThread(hashTree,threadGroup,notifier);
  thread.setThreadGroup(threadGroup);
  thread.setOnErrorStopThread(true);
  thread.run();
  assertEquals(Must one transaction samples with parent debug sample,1,listener.events.size());
  assertEquals(Number of samples in transaction : 1, number of failing samples : 1,listener.events.get(0).getResult().getResponseMessage());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestTransactionController.java",43
365,"'-tryline","@Test public void testBlankPrevOK() throws Exception {
  runtestPrevOK();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestWhileController.java",70
366,"'-tryline","@Test public void testLastPrevOK() throws Exception {
  runtestPrevOK(LAST);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestWhileController.java",76
367,"'-tryline","@Test public void testOtherPrevOK() throws Exception {
  runtestPrevOK(OTHER);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestWhileController.java",84
368,"'-tryline","private void runtestPrevOK(String type) throws Exception {
  GenericController controller=new GenericController();
  WhileController while_cont=new WhileController();
  setLastSampleStatus(true);
  while_cont.setCondition(type);
  while_cont.addTestElement(new TestSampler(one));
  while_cont.addTestElement(new TestSampler(two));
  while_cont.addTestElement(new TestSampler(three));
  controller.addTestElement(while_cont);
  controller.addTestElement(new TestSampler(four));
  controller.initialize();
  assertEquals(one,nextName(controller));
  assertEquals(two,nextName(controller));
  assertEquals(three,nextName(controller));
  assertEquals(one,nextName(controller));
  assertEquals(two,nextName(controller));
  assertEquals(three,nextName(controller));
  assertEquals(one,nextName(controller));
  setLastSampleStatus(false);
  if (type.equals(OTHER)) {
    while_cont.setCondition(false);
  }
  assertEquals(two,nextName(controller));
  assertEquals(three,nextName(controller));
  setLastSampleStatus(true);
  if (type.equals(OTHER)) {
    while_cont.setCondition(OTHER);
  }
  assertEquals(one,nextName(controller));
  assertEquals(two,nextName(controller));
  assertEquals(three,nextName(controller));
  setLastSampleStatus(false);
  if (type.equals(OTHER)) {
    while_cont.setCondition(false);
  }
  assertEquals(four,nextName(controller));
  assertNull(nextName(controller));
  setLastSampleStatus(true);
  if (type.equals(OTHER)) {
    while_cont.setCondition(OTHER);
  }
  assertEquals(one,nextName(controller));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestWhileController.java",89
369,"'-tryline","@Test public void testBlankPrevFailed() throws Exception {
  GenericController controller=new GenericController();
  controller.setRunningVersion(true);
  WhileController while_cont=new WhileController();
  setLastSampleStatus(false);
  while_cont.setCondition();
  while_cont.addTestElement(new TestSampler(one));
  while_cont.addTestElement(new TestSampler(two));
  controller.addTestElement(while_cont);
  controller.addTestElement(new TestSampler(three));
  controller.initialize();
  assertEquals(one,nextName(controller));
  assertEquals(two,nextName(controller));
  assertEquals(three,nextName(controller));
  assertNull(nextName(controller));
  assertEquals(one,nextName(controller));
  assertEquals(two,nextName(controller));
  assertEquals(three,nextName(controller));
  assertNull(nextName(controller));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestWhileController.java",134
370,"'-tryline","@Test public void testVariable1() throws Exception {
  GenericController controller=new GenericController();
  WhileController while_cont=new WhileController();
  setLastSampleStatus(false);
  while_cont.setCondition(${VAR});
  jmvars.put(VAR,);
  ValueReplacer vr=new ValueReplacer();
  vr.replaceValues(while_cont);
  setRunning(while_cont);
  controller.addTestElement(new TestSampler(before));
  controller.addTestElement(while_cont);
  while_cont.addTestElement(new TestSampler(one));
  while_cont.addTestElement(new TestSampler(two));
  GenericController simple=new GenericController();
  while_cont.addTestElement(simple);
  simple.addTestElement(new TestSampler(three));
  simple.addTestElement(new TestSampler(four));
  controller.addTestElement(new TestSampler(after));
  controller.initialize();
  for (int i=1; i <= 3; i++) {
    assertEquals(Loop:  + i,before,nextName(controller));
    assertEquals(Loop:  + i,one,nextName(controller));
    assertEquals(Loop:  + i,two,nextName(controller));
    assertEquals(Loop:  + i,three,nextName(controller));
    assertEquals(Loop:  + i,four,nextName(controller));
    assertEquals(Loop:  + i,after,nextName(controller));
    assertNull(Loop:  + i,nextName(controller));
  }
  jmvars.put(VAR,LAST);
  for (int i=1; i <= 3; i++) {
    assertEquals(Loop:  + i,before,nextName(controller));
    assertEquals(Loop:  + i,after,nextName(controller));
    assertNull(Loop:  + i,nextName(controller));
  }
  jmvars.put(VAR,);
  for (int i=1; i <= 3; i++) {
    assertEquals(Loop:  + i,before,nextName(controller));
    if (i == 1) {
      assertEquals(Loop:  + i,one,nextName(controller));
      assertEquals(Loop:  + i,two,nextName(controller));
      assertEquals(Loop:  + i,three,nextName(controller));
      jmvars.put(VAR,LAST);
      assertEquals(Loop:  + i,four,nextName(controller));
    }
    assertEquals(Loop:  + i,after,nextName(controller));
    assertNull(Loop:  + i,nextName(controller));
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestWhileController.java",168
371,"'-tryline","@Test public void testVariable2() throws Exception {
  GenericController controller=new GenericController();
  WhileController while_cont=new WhileController();
  setLastSampleStatus(false);
  while_cont.setCondition(${VAR});
  jmvars.put(VAR,);
  ValueReplacer vr=new ValueReplacer();
  vr.replaceValues(while_cont);
  setRunning(while_cont);
  controller.addTestElement(new TestSampler(before));
  controller.addTestElement(while_cont);
  GenericController simple=new GenericController();
  while_cont.addTestElement(simple);
  simple.addTestElement(new TestSampler(one));
  simple.addTestElement(new TestSampler(two));
  while_cont.addTestElement(new TestSampler(three));
  while_cont.addTestElement(new TestSampler(four));
  controller.addTestElement(new TestSampler(after));
  controller.initialize();
  for (int i=1; i <= 3; i++) {
    assertEquals(Loop:  + i,before,nextName(controller));
    assertEquals(Loop:  + i,one,nextName(controller));
    assertEquals(Loop:  + i,two,nextName(controller));
    assertEquals(Loop:  + i,three,nextName(controller));
    assertEquals(Loop:  + i,four,nextName(controller));
    assertEquals(Loop:  + i,after,nextName(controller));
    assertNull(Loop:  + i,nextName(controller));
  }
  jmvars.put(VAR,LAST);
  for (int i=1; i <= 3; i++) {
    assertEquals(Loop:  + i,before,nextName(controller));
    assertEquals(Loop:  + i,after,nextName(controller));
    assertNull(Loop:  + i,nextName(controller));
  }
  jmvars.put(VAR,);
  for (int i=1; i <= 3; i++) {
    assertEquals(Loop:  + i,before,nextName(controller));
    if (i == 1) {
      assertEquals(Loop:  + i,one,nextName(controller));
      assertEquals(Loop:  + i,two,nextName(controller));
      jmvars.put(VAR,LAST);
      assertEquals(Loop:  + i,three,nextName(controller));
      assertEquals(Loop:  + i,four,nextName(controller));
    }
    assertEquals(Loop:  + i,after,nextName(controller));
    assertNull(Loop:  + i,nextName(controller));
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestWhileController.java",219
372,"'-tryline","@Test public void testLASTPrevFailed() throws Exception {
  runTestPrevFailed(LAST);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestWhileController.java",271
373,"'-tryline","@Test public void testfalsePrevFailed() throws Exception {
  runTestPrevFailed(False);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestWhileController.java",277
374,"'-tryline","private void runTestPrevFailed(String s) throws Exception {
  GenericController controller=new GenericController();
  WhileController while_cont=new WhileController();
  setLastSampleStatus(false);
  while_cont.setCondition(s);
  while_cont.addTestElement(new TestSampler(one));
  while_cont.addTestElement(new TestSampler(two));
  controller.addTestElement(while_cont);
  controller.addTestElement(new TestSampler(three));
  controller.initialize();
  assertEquals(three,nextName(controller));
  assertNull(nextName(controller));
  assertEquals(three,nextName(controller));
  assertNull(nextName(controller));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestWhileController.java",282
375,"'-tryline","@Test public void testLastFailedBlank() throws Exception {
  runTestLastFailed();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestWhileController.java",298
376,"'-tryline","@Test public void testLastFailedLast() throws Exception {
  runTestLastFailed(LAST);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestWhileController.java",303
377,"'-tryline","private void runTestLastFailed(String s) throws Exception {
  GenericController controller=new GenericController();
  controller.addTestElement(new TestSampler(1));
  WhileController while_cont=new WhileController();
  controller.addTestElement(while_cont);
  while_cont.setCondition(s);
  GenericController sub=new GenericController();
  while_cont.addTestElement(sub);
  sub.addTestElement(new TestSampler(2));
  sub.addTestElement(new TestSampler(3));
  controller.addTestElement(new TestSampler(4));
  setLastSampleStatus(true);
  controller.initialize();
  assertEquals(1,nextName(controller));
  assertEquals(2,nextName(controller));
  setLastSampleStatus(false);
  assertEquals(3,nextName(controller));
  assertEquals(4,nextName(controller));
  assertNull(nextName(controller));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestWhileController.java",309
378,"'-tryline","@Test public void testAlwaysFailOK() throws Exception {
  runTestAlwaysFail(true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestWhileController.java",333
379,"'-tryline","@Test public void testAlwaysFailBAD() throws Exception {
  runTestAlwaysFail(false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\control\TestWhileController.java",338
380,"'-tryline","@Test public void testEmptyDefaultVariable() throws Exception {
  extractor.setExpression(p.missing);
  extractor.setMatchNumber(1);
  extractor.setDefaultEmptyValue(true);
  extractor.process();
  assertEquals(,vars.get(regVal));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\extractor\TestHtmlExtractorJSoup.java",91
381,"'-tryline","@Test public void testNotEmptyDefaultVariable() throws Exception {
  extractor.setExpression(p.missing);
  extractor.setMatchNumber(1);
  extractor.setDefaultEmptyValue(false);
  extractor.process();
  assertNull(vars.get(regVal));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\extractor\TestHtmlExtractorJSoup.java",100
382,"'-tryline","@Test public void testNotEmptyDefaultValue() throws Exception {
  extractor.setExpression(p.missing);
  extractor.setMatchNumber(1);
  extractor.setDefaultEmptyValue(false);
  extractor.setDefaultValue(nv_value);
  extractor.process();
  assertEquals(nv_value,vars.get(regVal));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\extractor\TestHtmlExtractorJSoup.java",109
383,"'-tryline","@Test public void testVariableExtraction0() throws Exception {
  extractor.setExpression(p.single);
  extractor.setMatchNumber(0);
  extractor.process();
  assertEquals(Single,vars.get(regVal));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\extractor\TestHtmlExtractorJSoup.java",119
384,"'-tryline","@Test public void testVariableExtraction2() throws Exception {
  extractor.setExpression(a);
  extractor.setMatchNumber(2);
  extractor.process();
  assertEquals(example2,vars.get(regVal));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\extractor\TestHtmlExtractorJSoup.java",127
385,"'-tryline","@Test public void testVariableExtractionWithAttribute2() throws Exception {
  extractor.setExpression(a);
  extractor.setAttribute(href);
  extractor.setMatchNumber(2);
  extractor.process();
  assertEquals(http://example2.com/,vars.get(regVal));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\extractor\TestHtmlExtractorJSoup.java",135
386,"'-tryline","@Test public void testMultipleVariableExtraction() throws Exception {
  extractor.setExpression(a);
  extractor.setAttribute(href);
  extractor.setMatchNumber(-1);
  extractor.process();
  assertThat(vars.get(regVal_matchNr),CoreMatchers.is(2));
  assertEquals(http://example.com/,vars.get(regVal_1));
  assertEquals(http://example2.com/,vars.get(regVal_2));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\extractor\TestHtmlExtractorJSoup.java",144
387,"'-tryline","@Test public void testMultipleVariableExtractionWithAttribute() throws Exception {
  extractor.setExpression(b);
  extractor.setMatchNumber(-1);
  extractor.process();
  assertThat(vars.get(regVal_matchNr),CoreMatchers.is(2));
  assertEquals(example1,vars.get(regVal_1));
  assertEquals(example2,vars.get(regVal_2));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\extractor\TestHtmlExtractorJSoup.java",155
388,"'-tryline","@Test public void testMultipleVariableExtractionNoMatch() throws Exception {
  extractor.setExpression(c);
  extractor.setMatchNumber(-1);
  extractor.process();
  assertThat(vars.get(regVal_matchNr),CoreMatchers.is(0));
  assertNull(vars.get(regVal));
  assertNull(vars.get(regVal_1));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\extractor\TestHtmlExtractorJSoup.java",165
389,"'-tryline","@Test public void testPreviousVarsAreCleanedUp() throws Exception {
  testMultipleVariableExtractionWithAttribute();
  testMultipleVariableExtractionNoMatch();
  assertNull(vars.get(regVal_2));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\extractor\TestHtmlExtractorJSoup.java",175
390,"'-tryline","@Test public void testUnknownExtractor() throws Exception {
  extractor.setExtractor(UNKNOWN);
  extractor.setExpression(c);
  extractor.setMatchNumber(-1);
  extractor.process();
  assertNull(vars.get(regVal_matchNr));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\extractor\TestHtmlExtractorJSoup.java",182
391,"'-tryline","@Test public void testNoPrevious() throws Exception {
  jmctx.setPreviousResult(null);
  extractor.setExpression(b);
  extractor.setMatchNumber(-1);
  extractor.process();
  assertNull(vars.get(regVal_matchNr));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\extractor\TestHtmlExtractorJSoup.java",191
392,"'-tryline","@Test public void testVariableExtraction8() throws Exception {
  extractor.setRegex(http://jakarta\\.apache\\.org/(\\w+));
  extractor.setTemplate($1$);
  extractor.setMatchNumber(1);
  extractor.setUseField(RegexExtractor.USE_URL);
  assertFalse(useHdrs should be false,extractor.useHeaders());
  assertFalse(useBody should be false,extractor.useBody());
  assertTrue(useURL should be true,extractor.useUrl());
  extractor.process();
  assertNull(vars.get(regVal));
  result.setURL(new URL(http://jakarta.apache.org/index.html?abcd));
  extractor.process();
  assertEquals(index,vars.get(regVal));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\extractor\TestRegexExtractor.java",307
393,"'-tryline","@Test public void testAttributeExtraction() throws Exception {
  extractor.setXPathQuery(/book/preface/@title);
  extractor.process();
  assertEquals(Intro,vars.get(VAL_NAME));
  assertEquals(1,vars.get(VAL_NAME_NR));
  assertEquals(Intro,vars.get(VAL_NAME + _1));
  assertNull(vars.get(VAL_NAME + _2));
  extractor.setXPathQuery(/book/preface[@title]);
  extractor.process();
  assertEquals(zero,vars.get(VAL_NAME));
  assertEquals(1,vars.get(VAL_NAME_NR));
  assertEquals(zero,vars.get(VAL_NAME + _1));
  assertNull(vars.get(VAL_NAME + _2));
  extractor.setXPathQuery(/book/preface[@title='Intro']);
  extractor.process();
  assertEquals(zero,vars.get(VAL_NAME));
  assertEquals(1,vars.get(VAL_NAME_NR));
  assertEquals(zero,vars.get(VAL_NAME + _1));
  assertNull(vars.get(VAL_NAME + _2));
  extractor.setXPathQuery(/book/preface[@title='xyz']);
  extractor.process();
  assertEquals(Default,vars.get(VAL_NAME));
  assertEquals(0,vars.get(VAL_NAME_NR));
  assertNull(vars.get(VAL_NAME + _1));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\extractor\TestXPath2Extractor.java",57
394,"'-tryline","@Test public void testVariableExtraction() throws Exception {
  extractor.setXPathQuery(/book/preface);
  extractor.process();
  assertEquals(zero,vars.get(VAL_NAME));
  assertEquals(1,vars.get(VAL_NAME_NR));
  assertEquals(zero,vars.get(VAL_NAME + _1));
  assertNull(vars.get(VAL_NAME + _2));
  extractor.setXPathQuery(/book/page);
  extractor.setMatchNumber(1);
  extractor.process();
  assertEquals(one,vars.get(VAL_NAME));
  assertEquals(1,vars.get(VAL_NAME_NR));
  assertEquals(one,vars.get(VAL_NAME + _1));
  assertNull(vars.get(VAL_NAME + _2));
  assertNull(vars.get(VAL_NAME + _3));
  extractor.setXPathQuery(/book/page);
  extractor.setMatchNumber(1);
  extractor.process();
  assertEquals(one,vars.get(VAL_NAME));
  assertEquals(1,vars.get(VAL_NAME_NR));
  assertEquals(one,vars.get(VAL_NAME + _1));
  assertNull(vars.get(VAL_NAME + _2));
  assertNull(vars.get(VAL_NAME + _3));
  extractor.setXPathQuery(/book/page);
  extractor.setMatchNumber(2);
  extractor.process();
  assertEquals(two,vars.get(VAL_NAME));
  assertEquals(1,vars.get(VAL_NAME_NR));
  assertEquals(two,vars.get(VAL_NAME + _1));
  assertNull(vars.get(VAL_NAME + _2));
  assertNull(vars.get(VAL_NAME + _3));
  extractor.setMatchNumber(-1);
  extractor.setXPathQuery(/book/page);
  extractor.process();
  assertEquals(2,vars.get(VAL_NAME_NR));
  assertEquals(one,vars.get(VAL_NAME + _1));
  assertEquals(one,vars.get(VAL_NAME));
  assertEquals(two,vars.get(VAL_NAME + _2));
  assertNull(vars.get(VAL_NAME + _3));
  extractor.setMatchNumber(-1);
  extractor.setXPathQuery(/book/page[2]);
  extractor.process();
  assertEquals(two,vars.get(VAL_NAME));
  assertEquals(1,vars.get(VAL_NAME_NR));
  assertEquals(two,vars.get(VAL_NAME + _1));
  assertNull(vars.get(VAL_NAME + _2));
  assertNull(vars.get(VAL_NAME + _3));
  extractor.setXPathQuery(/book/index);
  extractor.process();
  assertEquals(Default,vars.get(VAL_NAME));
  assertEquals(0,vars.get(VAL_NAME_NR));
  assertNull(vars.get(VAL_NAME + _1));
  extractor.setMatchNumber(-1);
  extractor.setXPathQuery(/book/page[2]);
  extractor.setFragment(true);
  extractor.process();
  assertEquals(<page>two</page>,vars.get(VAL_NAME));
  extractor.setXPathQuery(/book/page[2]/text());
  extractor.process();
  assertEquals(two,vars.get(VAL_NAME));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\extractor\TestXPath2Extractor.java",87
395,"'-tryline","@Test public void testWithNamespace() throws Exception {
  result.setResponseData(<age:ag xmlns:age=\http://www.w3.org/wgs84_pos#\><head><title>test</title></head></age:ag>,null);
  String namespaces=age=http://www.w3.org/wgs84_pos#;
  String xPathQuery=/age:ag/head/title;
  extractor.setXPathQuery(xPathQuery);
  extractor.setNamespaces(namespaces);
  extractor.process();
  assertEquals(test,vars.get(VAL_NAME));
  assertEquals(1,vars.get(VAL_NAME_NR));
  assertEquals(test,vars.get(VAL_NAME + _1));
  assertNull(vars.get(VAL_NAME + _2));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\extractor\TestXPath2Extractor.java",232
396,"'-tryline","@Test public void testWithNamespaces() throws Exception {
  result.setResponseData(<age:ag xmlns:age=\http://www.w3.org/wgs84_pos#\> + <hd:head xmlns:hd=\http://www.w3.org/wgs85_pos#\><title>test</title></hd:head></age:ag>,null);
  String namespaces=age=http://www.w3.org/wgs84_pos# + \n + hd=http://www.w3.org/wgs85_pos#;
  String xPathQuery=/age:ag/hd:head/title;
  extractor.setXPathQuery(xPathQuery);
  extractor.setNamespaces(namespaces);
  extractor.process();
  assertEquals(test,vars.get(VAL_NAME));
  assertEquals(1,vars.get(VAL_NAME_NR));
  assertEquals(test,vars.get(VAL_NAME + _1));
  assertNull(vars.get(VAL_NAME + _2));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\extractor\TestXPath2Extractor.java",247
397,"'-tryline","@Test public void testWithoutNamespace() throws Exception {
  result.setResponseData(<age:ag xmlns:age=\http://www.w3.org/wgs84_pos#\><head><title>test</title></head></age:ag>,null);
  String xPathQuery=/age:ag/head/title;
  extractor.setXPathQuery(xPathQuery);
  extractor.process();
  assertEquals(Default,vars.get(VAL_NAME));
  assertEquals(0,vars.get(VAL_NAME_NR));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\extractor\TestXPath2Extractor.java",264
398,"'-tryline","@Test public void testPreviousResultIsEmpty() throws Exception {
  JMeterContext jmc=JMeterContextService.getContext();
  extractor=new XPath2Extractor();
  extractor.setThreadContext(jmctx);
  extractor.setRefName(VAL_NAME);
  extractor.setDefaultValue(Default);
  jmc.setPreviousResult(null);
  extractor.setXPathQuery(/book/preface);
  extractor.process();
  assertEquals(null,vars.get(VAL_NAME));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\extractor\TestXPath2Extractor.java",275
399,"'-tryline","@Test public void testAttributeExtraction() throws Exception {
  extractor.setXPathQuery(/book/preface/@title);
  extractor.process();
  assertEquals(Intro,vars.get(VAL_NAME));
  assertEquals(1,vars.get(VAL_NAME_NR));
  assertEquals(Intro,vars.get(VAL_NAME + _1));
  assertNull(vars.get(VAL_NAME + _2));
  extractor.setXPathQuery(/book/preface[@title]);
  extractor.process();
  assertEquals(zero,vars.get(VAL_NAME));
  assertEquals(1,vars.get(VAL_NAME_NR));
  assertEquals(zero,vars.get(VAL_NAME + _1));
  assertNull(vars.get(VAL_NAME + _2));
  extractor.setXPathQuery(/book/preface[@title='Intro']);
  extractor.process();
  assertEquals(zero,vars.get(VAL_NAME));
  assertEquals(1,vars.get(VAL_NAME_NR));
  assertEquals(zero,vars.get(VAL_NAME + _1));
  assertNull(vars.get(VAL_NAME + _2));
  extractor.setXPathQuery(/book/preface[@title='xyz']);
  extractor.process();
  assertEquals(Default,vars.get(VAL_NAME));
  assertEquals(0,vars.get(VAL_NAME_NR));
  assertNull(vars.get(VAL_NAME + _1));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\extractor\TestXPathExtractor.java",63
400,"'-tryline","@Test public void testVariableExtraction() throws Exception {
  extractor.setXPathQuery(/book/preface);
  extractor.process();
  assertEquals(zero,vars.get(VAL_NAME));
  assertEquals(1,vars.get(VAL_NAME_NR));
  assertEquals(zero,vars.get(VAL_NAME + _1));
  assertNull(vars.get(VAL_NAME + _2));
  extractor.setXPathQuery(/book/page);
  extractor.process();
  assertEquals(one,vars.get(VAL_NAME));
  assertEquals(2,vars.get(VAL_NAME_NR));
  assertEquals(one,vars.get(VAL_NAME + _1));
  assertEquals(two,vars.get(VAL_NAME + _2));
  assertNull(vars.get(VAL_NAME + _3));
  extractor.setXPathQuery(/book/page);
  extractor.setMatchNumber(1);
  extractor.process();
  assertEquals(one,vars.get(VAL_NAME));
  assertEquals(1,vars.get(VAL_NAME_NR));
  assertEquals(one,vars.get(VAL_NAME + _1));
  assertNull(vars.get(VAL_NAME + _2));
  assertNull(vars.get(VAL_NAME + _3));
  extractor.setXPathQuery(/book/page);
  extractor.setMatchNumber(0);
  extractor.process();
  assertEquals(1,vars.get(VAL_NAME_NR));
  assertTrue(StringUtils.isNoneEmpty(vars.get(VAL_NAME)));
  assertTrue(StringUtils.isNoneEmpty(vars.get(VAL_NAME + _1)));
  assertNull(vars.get(VAL_NAME + _2));
  assertNull(vars.get(VAL_NAME + _3));
  extractor.setMatchNumber(-1);
  extractor.setXPathQuery(/book/page[2]);
  extractor.process();
  assertEquals(two,vars.get(VAL_NAME));
  assertEquals(1,vars.get(VAL_NAME_NR));
  assertEquals(two,vars.get(VAL_NAME + _1));
  assertNull(vars.get(VAL_NAME + _2));
  assertNull(vars.get(VAL_NAME + _3));
  extractor.setXPathQuery(/book/index);
  extractor.process();
  assertEquals(Default,vars.get(VAL_NAME));
  assertEquals(0,vars.get(VAL_NAME_NR));
  assertNull(vars.get(VAL_NAME + _1));
  extractor.setXPathQuery(/book/a);
  extractor.process();
  assertEquals(Default,vars.get(VAL_NAME));
  assertEquals(1,vars.get(VAL_NAME_NR));
  assertNull(vars.get(VAL_NAME + _1));
  extractor.setXPathQuery(/book/empty);
  extractor.process();
  assertEquals(Default,vars.get(VAL_NAME));
  assertEquals(1,vars.get(VAL_NAME_NR));
  assertNull(vars.get(VAL_NAME + _1));
  extractor.setXPathQuery(//a);
  extractor.process();
  assertEquals(Default,vars.get(VAL_NAME));
  extractor.setXPathQuery(//a);
  extractor.process();
  extractor.setMatchNumber(-1);
  assertEquals(Default,vars.get(VAL_NAME));
  extractor.setXPathQuery(//a);
  extractor.process();
  extractor.setMatchNumber(2);
  assertEquals(Default,vars.get(VAL_NAME));
  extractor.setXPathQuery(//a);
  extractor.process();
  extractor.setMatchNumber(0);
  assertEquals(Default,vars.get(VAL_NAME));
  extractor.setMatchNumber(-1);
  extractor.setXPathQuery(/book/page[2]);
  extractor.setFragment(true);
  extractor.process();
  assertEquals(<page>two</page>,vars.get(VAL_NAME));
  extractor.setXPathQuery(/book/page[2]/text());
  extractor.process();
  assertEquals(two,vars.get(VAL_NAME));
  extractor.setXPathQuery(//a);
  extractor.process();
  assertEquals(<a><b/></a>,vars.get(VAL_NAME));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\extractor\TestXPathExtractor.java",93
401,"'-tryline","@Test public void testInvalidXpath() throws Exception {
  extractor.setXPathQuery(<);
  extractor.process();
  assertEquals(1,result.getAssertionResults().length);
  AssertionResult firstResult=result.getAssertionResults()[0];
  assertEquals(extractor.getName(),firstResult.getName());
  assertThat('<' is an invalid character in xpath, so it is expected to be present in the error message,firstResult.getFailureMessage(),containsString(<));
  if (Locale.getDefault().getLanguage().startsWith(Locale.ENGLISH.getLanguage())) {
    assertThat(firstResult.getFailureMessage(),containsString(A location path was expected, but the following token was encountered));
  }
  assertEquals(Default,vars.get(VAL_NAME));
  assertEquals(0,vars.get(VAL_NAME_NR));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\extractor\TestXPathExtractor.java",270
402,"'-tryline","@Test public void testNonXmlDocument() throws Exception {
  result.setResponseData(Error:exception occurred,null);
  extractor.setXPathQuery(//test);
  extractor.process();
  assertEquals(1,result.getAssertionResults().length);
  assertEquals(extractor.getName(),result.getAssertionResults()[0].getName());
  assertThat(result.getAssertionResults()[0].getFailureMessage(),containsString(Content is not allowed in prolog));
  assertEquals(Default,vars.get(VAL_NAME));
  assertEquals(0,vars.get(VAL_NAME_NR));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\extractor\TestXPathExtractor.java",293
403,"'-tryline","@Test public void testInvalidDocument() throws Exception {
  result.setResponseData(<z>,null);
  extractor.setXPathQuery(//test);
  extractor.process();
  assertEquals(1,result.getAssertionResults().length);
  assertEquals(extractor.getName(),result.getAssertionResults()[0].getName());
  assertThat(result.getAssertionResults()[0].getFailureMessage(),containsString(XML document structures must start and end within the same entity));
  assertEquals(Default,vars.get(VAL_NAME));
  assertEquals(0,vars.get(VAL_NAME_NR));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\extractor\TestXPathExtractor.java",306
404,"'-tryline","@Test public void testNonExistantXmlFileThrowsFileNotFoundException() throws Exception {
  File xmlTemplateFile=new File(missing.xml);
  Assertions.assertThrows(FileNotFoundException.class,() -> TemplateManager.getInstance().parseTemplateFile(xmlTemplateFile));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\gui\action\template\TestTemplateManager.java",100
405,"'-tryline","@Test public void testTreeConversion() throws Exception {
  HashTree tree=new ListedHashTree();
  JMeterTreeNode root=new JMeterTreeNode(new Arguments(),null);
  tree.add(root,root);
  tree.getTree(root).add(root,root);
  save.convertSubTree(tree);
  assertEquals(tree.getArray()[0].getClass().getName(),root.getTestElement().getClass().getName());
  tree=tree.getTree(tree.getArray()[0]);
  assertEquals(tree.getArray()[0].getClass().getName(),root.getTestElement().getClass().getName());
  assertEquals(tree.getTree(tree.getArray()[0]).getArray()[0].getClass().getName(),root.getTestElement().getClass().getName());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\gui\action\TestSave.java",37
406,"'-tryline","@Test public void testTimer1() throws Exception {
  ConstantThroughputTimer timer=new ConstantThroughputTimer();
  assertEquals(0,timer.getCalcMode());
  timer.setThroughput(60.0);
  long start=System.currentTimeMillis();
  long delay=timer.delay();
  assertEquals(0,delay);
  Thread.sleep(500);
  long elapsed=System.currentTimeMillis() - start;
  long expected=1000 - elapsed;
  if (expected < 0) {
    expected=0;
  }
  assertEquals(Expected delay of approx 500,expected,timer.delay(),50);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\timers\ConstantThroughputTimerTest.java",38
407,"'-tryline","@Test public void testTimer2() throws Exception {
  ConstantThroughputTimer timer=new ConstantThroughputTimer();
  assertEquals(0,timer.getCalcMode());
  timer.setThroughput(60.0);
  assertEquals(1000,timer.calculateCurrentTarget(0));
  timer.setThroughput(60000.0);
  assertEquals(1,timer.calculateCurrentTarget(0));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\timers\ConstantThroughputTimerTest.java",61
408,"'-tryline","@Test public void testTimer3() throws Exception {
  ConstantThroughputTimer timer=new ConstantThroughputTimer();
  timer.setMode(ConstantThroughputTimer.Mode.AllActiveThreads);
  assertEquals(1,timer.getCalcMode());
  for (int i=1; i <= 10; i++) {
    TestJMeterContextService.incrNumberOfThreads();
  }
  assertEquals(10,JMeterContextService.getNumberOfThreads());
  timer.setThroughput(600.0);
  assertEquals(1000,timer.calculateCurrentTarget(0));
  timer.setThroughput(600000.0);
  assertEquals(1,timer.calculateCurrentTarget(0));
  for (int i=1; i <= 990; i++) {
    TestJMeterContextService.incrNumberOfThreads();
  }
  assertEquals(1000,JMeterContextService.getNumberOfThreads());
  timer.setThroughput(60000000.0);
  assertEquals(1,timer.calculateCurrentTarget(0));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\timers\ConstantThroughputTimerTest.java",71
409,"'-tryline","@Test public void testTimerBSH() throws Exception {
  Assume.assumeTrue(BeanShell jar should be on the classpath, otherwise the test makes no sense,BeanShellInterpreter.isInterpreterPresent());
  BeanShellTimer timer=new BeanShellTimer();
  timer.setScript(\60\);
  assertEquals(60,timer.delay());
  timer.setScript(60);
  assertEquals(60,timer.delay());
  timer.setScript(5*3*4);
  assertEquals(60,timer.delay());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\timers\ConstantThroughputTimerTest.java",92
410,"'-tryline","@Test public void testTimerJSR223Timer() throws Exception {
  JSR223Timer timer=new JSR223Timer();
  timer.setScriptLanguage(ScriptingTestElement.DEFAULT_SCRIPT_LANGUAGE);
  timer.setCacheKey(UUID.randomUUID().toString());
  timer.setScript(\60\);
  assertEquals(60,timer.delay());
  timer.setScript(60);
  assertEquals(60,timer.delay());
  timer.setScript(5*3*4);
  assertEquals(60,timer.delay());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\timers\ConstantThroughputTimerTest.java",108
411,"'-tryline","@Test public void testUniformRandomTimer() throws Exception {
  UniformRandomTimer timer=new UniformRandomTimer();
  timer.setDelay(1000);
  timer.setRange(100d);
  timer.iterationStart(null);
  long delay=timer.delay();
  Assert.assertTrue(delay: + delay +  is not in expected range,delay >= 1000 && delay <= 1100);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\timers\ConstantThroughputTimerTest.java",124
412,"'-tryline","@Test public void testConstantTimer() throws Exception {
  ConstantTimer timer=new ConstantTimer();
  timer.setDelay(1000);
  timer.iterationStart(null);
  assertEquals(1000,timer.delay());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\timers\ConstantThroughputTimerTest.java",134
413,"'-tryline","@Test public void testPoissonRandomTimerRangeHigherThan30() throws Exception {
  PoissonRandomTimer timer=new PoissonRandomTimer();
  timer.setDelay(300);
  timer.setRange(100d);
  timer.iterationStart(null);
  long delay=timer.delay();
  Assert.assertTrue(delay: + delay +  is not in expected range,delay >= 356 && delay <= 457);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\timers\ConstantThroughputTimerTest.java",142
414,"'-tryline","@Test public void testPoissonRandomTimerRangeLowerThan30() throws Exception {
  PoissonRandomTimer timer=new PoissonRandomTimer();
  timer.setDelay(300);
  timer.setRange(30d);
  timer.iterationStart(null);
  long delay=timer.delay();
  Assert.assertTrue(delay: + delay +  is not in expected range,delay >= 305 && delay <= 362);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\timers\ConstantThroughputTimerTest.java",152
415,"'-tryline","@Test public void testTimer1() throws Exception {
  final int throughput=2;
  final int duration=5;
  final long seed=42L;
  final int batchSize=1;
  ConstantPoissonProcessGenerator gen=getConstantPoissonProcessGenerator(throughput,duration,seed,batchSize);
  gen.generateNext();
  double[] expected=new double[]{1.3787403472085118,1.3853924503706834,1.5435972766632988,1.8439145670565282,2.3182678790457665,3.327744758972868,3.416117358799227,3.6378184001643405,3.914508893950179,4.516861323360891,5.861089688439262,5.886892389546892,6.04883784433166,6.932834371796743,7.182454872116432,7.937136908931478,7.9717495544484205,8.749530906277236,9.129829359439105,9.596638914343584,10.157091194132905,11.789599597385642,12.088437733764593,12.855201742074335,12.900124422510304,13.567031289116144,13.7564020338373,13.762549742953254,14.088984654178198,14.870178407479408,16.45828248705902};
  double[] actual=new double[expected.length];
  boolean ok=true;
  for (int i=0; i < actual.length; i++) {
    actual[i]=gen.next();
    ok=ok && Math.abs(actual[i] - expected[i]) < 0.01;
  }
  if (!ok) {
    assertEquals(Schedule does not match expectation,  + throughput= + throughput + , duration=+ duration+ seed=+ seed+ , batchSize=+ batchSize,Arrays.toString(expected),Arrays.toString(actual));
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\timers\poissonarrivals\PreciseThroughputTimerTest.java",34
416,"'-tryline","@Test public void testExactNumberOfSamples() throws Exception {
  Random rnd=new Random();
  for (int i=0; i < 100; i++) {
    long seed=rnd.nextLong();
    final int testDuration=rnd.nextInt(100) + 5;
    final int throughput=rnd.nextInt(40) + 1;
    final int throughputInterval=rnd.nextInt(100) + 1;
    verifyExactThroughput(seed,testDuration,throughput,throughputInterval);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\timers\poissonarrivals\PreciseThroughputTimerTest.java",84
417,"'-tryline","@Test public void testSingleExactNumberOfSamples() throws Exception {
  long seed=6217980321110818258L;
  verifyExactThroughput(seed,60,5,60);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\timers\poissonarrivals\PreciseThroughputTimerTest.java",96
418,"'-tryline","@Test public void testSingleExactNumberOfSamples6812190053835844998() throws Exception {
  long seed=6812190053835844998L;
  verifyExactThroughput(seed,60,5,60);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\timers\poissonarrivals\PreciseThroughputTimerTest.java",102
419,"'-tryline","@ParameterizedTest(name=[{index}] token=\{0}\) @MethodSource(emptyTokens) public void emptyTokenIsNotSentAsAuthorizedHeader(String token,WireMockServer server) throws Exception {
  CountDownLatch latch=new CountDownLatch(1);
  server.stubFor(influxRequest(latch));
  setupSenderAndSendMetric(server.url(API_URL),token);
  latch.await(2,TimeUnit.SECONDS);
  assertAuthHeader(server,WireMock.absent());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\visualizers\backend\influxdb\HttpMetricsSenderTest.java",57
420,"'-tryline","@Test public void checkTokenPresentInHeader(WireMockServer server) throws Exception {
  CountDownLatch latch=new CountDownLatch(1);
  server.stubFor(influxRequest(latch));
  setupSenderAndSendMetric(server.url(API_URL),my-token);
  latch.await(2,TimeUnit.SECONDS);
  assertAuthHeader(server,WireMock.equalTo(Token my-token));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\visualizers\backend\influxdb\HttpMetricsSenderTest.java",69
421,"'-tryline","private void setupSenderAndSendMetric(String influxdbUrl,String influxDBToken) throws Exception {
  HttpMetricsSender metricsSender=new HttpMetricsSender();
  metricsSender.setup(influxdbUrl,influxDBToken);
  metricsSender.addMetric(measurement,,location=west,size=10);
  metricsSender.writeAndSendMetrics();
  metricsSender.destroy();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\visualizers\backend\influxdb\HttpMetricsSenderTest.java",80
422,"'-tryline","@BeforeEach @SuppressWarnings(deprecation) public void initMode() throws Exception {
  SamplerMetric.setDefaultWindowMode(WindowMode.FIXED);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\visualizers\backend\SamplerMetricFixedModeTest.java",34
423,"'-tryline","@Test public void checkResetOkAndAllStats() throws Exception {
  SamplerMetric metric=new SamplerMetric();
  metric.add(createSampleResult(true));
  assertEquals(Before reset  ok.max,DEFAULT_ELAPSED_TIME,metric.getOkMaxTime(),0.001);
  assertEquals(Before reset all.max,DEFAULT_ELAPSED_TIME,metric.getAllMaxTime(),0.001);
  assertEquals(Before reset failure,1,metric.getHits(),0.0);
  assertEquals(Before reset sent bytes,1000,metric.getSentBytes(),0.0);
  assertEquals(Before reset received bytes,2000,metric.getReceivedBytes(),0.0);
  metric.resetForTimeInterval();
  assertEquals(After reset in FIXED mode ok.max,DEFAULT_ELAPSED_TIME,metric.getOkMaxTime(),0.001);
  assertEquals(After reset in FIXED mode all.max,DEFAULT_ELAPSED_TIME,metric.getAllMaxTime(),0.0);
  assertEquals(After reset failure,0,metric.getHits(),0.0);
  assertEquals(After reset sent bytes,0,metric.getSentBytes(),0.0);
  assertEquals(After reset received bytes,0,metric.getReceivedBytes(),0.0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\visualizers\backend\SamplerMetricFixedModeTest.java",40
424,"'-tryline","@Test public void checkResetKoAndAllStats() throws Exception {
  SamplerMetric metric=new SamplerMetric();
  metric.add(createSampleResult(false));
  assertEquals(Before reset  ko.max,DEFAULT_ELAPSED_TIME,metric.getKoMaxTime(),0.001);
  assertEquals(Before reset all.max,DEFAULT_ELAPSED_TIME,metric.getAllMaxTime(),0.001);
  assertEquals(Before reset failure,1,metric.getFailures(),0.0);
  assertEquals(Before reset sent bytes,1000,metric.getSentBytes(),0.0);
  assertEquals(Before reset received bytes,2000,metric.getReceivedBytes(),0.0);
  metric.resetForTimeInterval();
  assertEquals(After reset in FIXED mode  ko.max,DEFAULT_ELAPSED_TIME,metric.getKoMaxTime(),0.0);
  assertEquals(After reset in FIXED mode all.max,DEFAULT_ELAPSED_TIME,metric.getAllMaxTime(),0.0);
  assertEquals(After reset failure,0,metric.getFailures(),0.001);
  assertEquals(After reset sent bytes,0,metric.getSentBytes(),0.0);
  assertEquals(After reset received bytes,0,metric.getReceivedBytes(),0.0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\visualizers\backend\SamplerMetricFixedModeTest.java",60
425,"'-tryline","@Test public void checkAddCumulatedOk() throws Exception {
  SamplerMetric metric=new SamplerMetric();
  SampleResult sample=createSampleResultWithSubresults(true);
  assertEquals(We are recognized as a TransactionController made sample,Boolean.TRUE,Boolean.valueOf(TransactionController.isFromTransactionController(sample)));
  metric.addCumulated(sample);
  assertEquals(Before reset  ok.max,DEFAULT_ELAPSED_TIME,metric.getOkMaxTime(),ALLOWED_DELTA);
  assertEquals(Before reset all.max,DEFAULT_ELAPSED_TIME,metric.getAllMaxTime(),ALLOWED_DELTA);
  assertEquals(Before reset hits,2,metric.getHits(),0.0);
  assertEquals(Before reset sent bytes,2000,metric.getSentBytes(),0.0);
  assertEquals(Before reset received bytes,4000,metric.getReceivedBytes(),0.0);
  metric.resetForTimeInterval();
  assertEquals(After reset in TIMED mode ok.max,DEFAULT_ELAPSED_TIME,metric.getOkMaxTime(),ALLOWED_DELTA);
  assertEquals(After reset in TIMED mode all.max,DEFAULT_ELAPSED_TIME,metric.getAllMaxTime(),ALLOWED_DELTA);
  assertEquals(After reset hits,0,metric.getHits(),0.0);
  assertEquals(After reset sent bytes,0,metric.getSentBytes(),0.0);
  assertEquals(After reset received bytes,0,metric.getReceivedBytes(),0.0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\visualizers\backend\SamplerMetricFixedModeTest.java",126
426,"'-tryline","@Test public void checkAddCumulatedKo() throws Exception {
  SamplerMetric metric=new SamplerMetric();
  SampleResult sample=createSampleResultWithSubresults(false);
  assertEquals(We are recognized as a TransactionController made sample,Boolean.TRUE,Boolean.valueOf(TransactionController.isFromTransactionController(sample)));
  metric.addCumulated(sample);
  assertEquals(Before reset  ko.max,DEFAULT_ELAPSED_TIME,metric.getKoMaxTime(),ALLOWED_DELTA);
  assertEquals(Before reset all.max,DEFAULT_ELAPSED_TIME,metric.getAllMaxTime(),ALLOWED_DELTA);
  assertEquals(Before reset failures,1,metric.getFailures(),0.0);
  assertEquals(Before reset sent bytes,2000,metric.getSentBytes(),0.0);
  assertEquals(Before reset received bytes,4000,metric.getReceivedBytes(),0.0);
  metric.resetForTimeInterval();
  assertEquals(After reset in TIMED mode ko.max,DEFAULT_ELAPSED_TIME,metric.getKoMaxTime(),ALLOWED_DELTA);
  assertEquals(After reset in TIMED mode all.max,DEFAULT_ELAPSED_TIME,metric.getAllMaxTime(),ALLOWED_DELTA);
  assertEquals(After reset failures,0,metric.getFailures(),0.0);
  assertEquals(After reset sent bytes,0,metric.getSentBytes(),0.0);
  assertEquals(After reset received bytes,0,metric.getReceivedBytes(),0.0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\visualizers\backend\SamplerMetricFixedModeTest.java",148
427,"'-tryline","@BeforeEach @SuppressWarnings(deprecation) public void initMode() throws Exception {
  SamplerMetric.setDefaultWindowMode(WindowMode.TIMED);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\visualizers\backend\SamplerMetricTimedModeTest.java",34
428,"'-tryline","@Test public void checkResetOkAndAllStats() throws Exception {
  SamplerMetric metric=new SamplerMetric();
  metric.add(createSampleResult(true));
  assertEquals(Before reset  ok.max,DEFAULT_ELAPSED_TIME,metric.getOkMaxTime(),0.001);
  assertEquals(Before reset all.max,DEFAULT_ELAPSED_TIME,metric.getAllMaxTime(),0.001);
  assertEquals(Before reset hits,1,metric.getHits(),0.0);
  assertEquals(Before reset sent bytes,1000,metric.getSentBytes(),0.0);
  assertEquals(Before reset received bytes,2000,metric.getReceivedBytes(),0.0);
  metric.resetForTimeInterval();
  assertEquals(After reset in TIMED mode ok.max,Double.NaN,metric.getOkMaxTime(),0.0);
  assertEquals(After reset in TIMED mode all.max,Double.NaN,metric.getAllMaxTime(),0.0);
  assertEquals(After reset hits,0,metric.getHits(),0.0);
  assertEquals(After reset sent bytes,0,metric.getSentBytes(),0.0);
  assertEquals(After reset received bytes,0,metric.getReceivedBytes(),0.0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\visualizers\backend\SamplerMetricTimedModeTest.java",40
429,"'-tryline","@Test public void checkResetKoAndAllStats() throws Exception {
  SamplerMetric metric=new SamplerMetric();
  metric.add(createSampleResult(false));
  assertEquals(Before reset  ko.max,DEFAULT_ELAPSED_TIME,metric.getKoMaxTime(),0.001);
  assertEquals(Before reset all.max,DEFAULT_ELAPSED_TIME,metric.getAllMaxTime(),0.001);
  assertEquals(Before reset failure,1,metric.getFailures(),0.0);
  assertEquals(Before reset sent bytes,1000,metric.getSentBytes(),0.0);
  assertEquals(Before reset received bytes,2000,metric.getReceivedBytes(),0.0);
  metric.resetForTimeInterval();
  assertEquals(After reset in TIMED mode  ko.max,Double.NaN,metric.getKoMaxTime(),0.0);
  assertEquals(After reset in TIMED mode all.max,Double.NaN,metric.getAllMaxTime(),0.0);
  assertEquals(After reset failure,0,metric.getFailures(),0.001);
  assertEquals(After reset sent bytes,0,metric.getSentBytes(),0.0);
  assertEquals(After reset received bytes,0,metric.getReceivedBytes(),0.0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\visualizers\backend\SamplerMetricTimedModeTest.java",61
430,"'-tryline","@Test public void checkAddCumulatedOk() throws Exception {
  SamplerMetric metric=new SamplerMetric();
  SampleResult sample=createSampleResultWithSubresults(true);
  assertEquals(We are recognized as a TransactionController made sample,Boolean.TRUE,Boolean.valueOf(TransactionController.isFromTransactionController(sample)));
  metric.addCumulated(sample);
  assertEquals(Before reset  ok.max,DEFAULT_ELAPSED_TIME,metric.getOkMaxTime(),ALLOWED_DELTA);
  assertEquals(Before reset all.max,DEFAULT_ELAPSED_TIME,metric.getAllMaxTime(),ALLOWED_DELTA);
  assertEquals(Before reset hits,2,metric.getHits(),0.0);
  assertEquals(Before reset sent bytes,2000,metric.getSentBytes(),0.0);
  assertEquals(Before reset received bytes,4000,metric.getReceivedBytes(),0.0);
  metric.resetForTimeInterval();
  assertEquals(After reset in TIMED mode ok.max,Double.NaN,metric.getOkMaxTime(),0.0);
  assertEquals(After reset in TIMED mode all.max,Double.NaN,metric.getAllMaxTime(),0.0);
  assertEquals(After reset hits,0,metric.getHits(),0.0);
  assertEquals(After reset sent bytes,0,metric.getSentBytes(),0.0);
  assertEquals(After reset received bytes,0,metric.getReceivedBytes(),0.0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\visualizers\backend\SamplerMetricTimedModeTest.java",108
431,"'-tryline","@Test public void checkAddCumulatedKo() throws Exception {
  SamplerMetric metric=new SamplerMetric();
  SampleResult sample=createSampleResultWithSubresults(false);
  assertEquals(We are recognized as a TransactionController made sample,Boolean.TRUE,Boolean.valueOf(TransactionController.isFromTransactionController(sample)));
  metric.addCumulated(sample);
  assertEquals(Before reset  ko.max,DEFAULT_ELAPSED_TIME,metric.getKoMaxTime(),ALLOWED_DELTA);
  assertEquals(Before reset all.max,DEFAULT_ELAPSED_TIME,metric.getAllMaxTime(),ALLOWED_DELTA);
  assertEquals(Before reset failures,1,metric.getFailures(),0.0);
  assertEquals(Before reset sent bytes,2000,metric.getSentBytes(),0.0);
  assertEquals(Before reset received bytes,4000,metric.getReceivedBytes(),0.0);
  metric.resetForTimeInterval();
  assertEquals(After reset in TIMED mode ko.max,Double.NaN,metric.getKoMaxTime(),0.0);
  assertEquals(After reset in TIMED mode all.max,Double.NaN,metric.getAllMaxTime(),0.0);
  assertEquals(After reset failures,0,metric.getFailures(),0.0);
  assertEquals(After reset sent bytes,0,metric.getSentBytes(),0.0);
  assertEquals(After reset received bytes,0,metric.getReceivedBytes(),0.0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\visualizers\backend\SamplerMetricTimedModeTest.java",130
432,"'-tryline","private String prettyJSON(String prettify) throws Exception {
  return (String)prettyJSON.invoke(null,prettify);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\visualizers\TestRenderAsJson.java",32
433,"'-tryline","@BeforeEach public void setUp() throws Exception {
  prettyJSON=RenderAsJSON.class.getDeclaredMethod(prettyJSON,String.class);
  prettyJSON.setAccessible(true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\visualizers\TestRenderAsJson.java",36
434,"'-tryline","@Test public void testRenderResultWithLongStringBug54826() throws Exception {
  StringBuilder json=new StringBuilder();
  json.append(\customData\: \);
  for (int i=0; i < 100; i++) {
    json.append(somenotsorandomtext);
  }
  json.append(\);
  assertEquals({\n + TAB + json.toString()+ \n},prettyJSON({ + json.toString() + }));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\visualizers\TestRenderAsJson.java",43
435,"'-tryline","@Test public void testRenderResultSimpleObject() throws Exception {
  assertEquals({\n},prettyJSON({}));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\visualizers\TestRenderAsJson.java",56
436,"'-tryline","@Test public void testRenderResultComplexArray() throws Exception {
  assertEquals([\n + TAB + 1,\n+ TAB+ {\n+ TAB+ TAB+ \A\: \B\\n+ TAB+ }\n],prettyJSON([1,{\A\:\B\}]));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\visualizers\TestRenderAsJson.java",61
437,"'-tryline","@Test public void testRenderResultSimpleArray() throws Exception {
  assertEquals([\n],prettyJSON([]));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\visualizers\TestRenderAsJson.java",65
438,"'-tryline","@Test public void testRenderArrayInObject() throws Exception {
  assertEquals({\n + TAB + \foo\: [\n+ TAB+ ]\n},prettyJSON({\foo\:[]}));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\visualizers\TestRenderAsJson.java",70
439,"'-tryline","@Test public void testRenderResultSimpleNumber() throws Exception {
  assertEquals(42,prettyJSON(42));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\visualizers\TestRenderAsJson.java",76
440,"'-tryline","@Test public void testRenderResultSimpleString() throws Exception {
  assertEquals(Hello World,prettyJSON(Hello World));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\visualizers\TestRenderAsJson.java",81
441,"'-tryline","@Test public void testRenderResultSimpleStructure() throws Exception {
  assertEquals({\n + TAB + \Hello\: \World\,\n+ TAB+ \more\: [\n+ TAB+ TAB+ \Something\,\n+ TAB+ TAB+ \else\\n+ TAB+ ]\n},prettyJSON({\Hello\: \World\, \more\: [\Something\, \else\, ]}));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\visualizers\TestRenderAsJson.java",86
442,"'-tryline","@Override public List<String> getSearchableTokens() throws Exception {
  List<String> datasToSearch=new ArrayList<>(2);
  datasToSearch.add(getName());
  datasToSearch.add(getFailureMessage());
  return datasToSearch;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\assertions\AssertionResult.java",169
443,"'-tryline","/** 
 * @param condition
 * @param resultStr
 * @return boolean
 * @throws Exception
 */
private static boolean computeResultFromString(String condition,String resultStr) throws Exception {
  boolean result;
switch (resultStr) {
case false:
    result=false;
  break;
case true:
result=true;
break;
default :
throw new Exception( BAD CONDITION ::  + condition +  :: expected true or false);
}
log.debug(    >> evaluate Condition -  [{}] results is  [{}],condition,result);
return result;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\control\IfController.java",181
444,"'-tryline","void generate(HashTree testPlan,File testPlanFile,OutputStream outputStream) throws Exception ;
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\action\SchematicView.java",63
445,"'-tryline","@Override public void generate(HashTree testPlan,File testPlanFile,OutputStream outputStream) throws Exception {
  TransformerFactory factory=TransformerFactory.newInstance(net.sf.saxon.BasicTransformerFactory,Thread.currentThread().getContextClassLoader());
  factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
  Source xslt;
  if (!StringUtils.isEmpty(DEFAULT_XSL_FILE)) {
    log.info(Will use file {} for Schematic View generation,DEFAULT_XSL_FILE);
    xslt=new StreamSource(new File(DEFAULT_XSL_FILE));
  }
 else {
    xslt=new StreamSource(SchematicView.class.getResourceAsStream(/org/apache/jmeter/gui/action/schematic.xsl));
  }
  Transformer transformer=factory.newTransformer(xslt);
  Source text=new StreamSource(testPlanFile);
  transformer.transform(text,new StreamResult(outputStream));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\action\SchematicView.java",67
446,"'-tryline","@Override protected List<String> doInBackground() throws Exception {
  HtmlReportGenerator htmlReportAction=new HtmlReportGenerator(csvFilePathTextField.getText(),userPropertiesFilePathTextField.getText(),outputDirectoryPathTextField.getText());
  SwingUtilities.invokeAndWait(() -> {
    reportLaunchButton.setEnabled(false);
    reportLaunchButton.setIcon(runningIcon);
    reportLaunchButton.setText(GENERATING_REPORT_LABEL);
  }
);
  return htmlReportAction.run();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\HtmlReportUI.java",174
447,"'-tryline","/** 
 * Replace in object  by replaceBy
 * @param regex Regular expression to search for
 * @param replaceBy Text used as replacement
 * @param caseSensitive flag, whether search should be done case sensitive
 * @return number of replacements
 * @throws Exception when something fails while replacing
 */
int replace(String regex,String replaceBy,boolean caseSensitive) throws Exception ;
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\Replaceable.java",29
448,"'-tryline","/** 
 * Get a list of all tokens that should be visible to searching
 * @return List of searchable tokens
 * @throws Exception when something fails while getting the searchable tokens
 */
List<String> getSearchableTokens() throws Exception ;
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\Searchable.java",30
449,"'-tryline","/** 
 * Generate a button component from icon bean
 * @param iconBean contains I18N key, ActionNames, icon path, optional icon path pressed
 * @return a button for toolbar
 */
private static JButton makeButtonItemRes(IconToolbarBean iconBean) throws Exception {
  JButton button=new JButton(loadIcon(iconBean,iconBean.getIconPath()));
  button.setToolTipText(JMeterUtils.getResString(iconBean.getI18nKey()));
  if (!iconBean.getIconPathPressed().equals(iconBean.getIconPath())) {
    button.setPressedIcon(loadIcon(iconBean,iconBean.getIconPathPressed()));
  }
  button.addActionListener(ActionRouter.getInstance());
  button.setActionCommand(iconBean.getActionNameResolve());
  return button;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\util\JMeterToolBar.java",141
450,"'-tryline","@Override public List<String> getSearchableTokens() throws Exception {
  List<String> datasToSearch=new ArrayList<>(4);
  datasToSearch.add(getSampleLabel());
  datasToSearch.add(getResponseDataAsString());
  datasToSearch.add(getRequestHeaders());
  datasToSearch.add(getResponseHeaders());
  return datasToSearch;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\samplers\SampleResult.java",1561
451,"'-tryline","@Override public XPathExecutable load(ImmutablePair<String,String> key) throws Exception {
  String xPathQuery=key.left;
  String namespacesString=key.right;
  Processor processor=XPathUtil.getProcessor();
  XPathCompiler xPathCompiler=processor.newXPathCompiler();
  List<String[]> namespacesList=XPathUtil.namespacesParse(namespacesString);
  log.debug(Parsed namespaces:{} into list of namespaces:{},namespacesString,namespacesList);
  for (  String[] namespaces : namespacesList) {
    xPathCompiler.declareNamespace(namespaces[0],namespaces[1]);
  }
  log.debug(Declared namespaces:{}, now compiling xPathQuery:{},namespacesList,xPathQuery);
  return xPathCompiler.compile(xPathQuery);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\XPathQueryCacheLoader.java",42
452,"'-tryline","@Test public void testSuccess() throws Exception {
  createJmeterEnv();
  JMeterUtils.setProperty(DistributedRunner.RETRIES_NUMBER,1);
  JMeterUtils.setProperty(DistributedRunner.CONTINUE_ON_FAIL,false);
  DistributedRunnerEmul obj=new DistributedRunnerEmul();
  obj.engines.add(new EmulatorEngine());
  obj.engines.add(new EmulatorEngine());
  List<String> hosts=Arrays.asList(test1,test2);
  obj.init(hosts,new HashTree());
  obj.start();
  obj.shutdown(hosts);
  obj.stop(hosts);
  obj.exit(hosts);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\engine\DistributedRunnerTest.java",52
453,"'-tryline","@Test public void testFailure1() throws Exception {
  createJmeterEnv();
  JMeterUtils.setProperty(DistributedRunner.RETRIES_NUMBER,2);
  JMeterUtils.setProperty(DistributedRunner.RETRIES_DELAY,1);
  JMeterUtils.setProperty(DistributedRunner.CONTINUE_ON_FAIL,true);
  DistributedRunnerEmul obj=new DistributedRunnerEmul();
  List<String> hosts=Arrays.asList(test1,test2);
  initRunner(obj,hosts);
  obj.start();
  obj.shutdown(hosts);
  obj.stop(hosts);
  obj.exit(hosts);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\engine\DistributedRunnerTest.java",68
454,"'-tryline","@Test public void testFailure2() throws Exception {
  createJmeterEnv();
  JMeterUtils.setProperty(DistributedRunner.RETRIES_NUMBER,1);
  JMeterUtils.setProperty(DistributedRunner.RETRIES_DELAY,1);
  JMeterUtils.setProperty(DistributedRunner.CONTINUE_ON_FAIL,false);
  DistributedRunnerEmul obj=new DistributedRunnerEmul();
  List<String> hosts=Arrays.asList(test1,test2);
  initRunner(obj,hosts);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\engine\DistributedRunnerTest.java",95
455,"'-tryline","@Test public void testFailure3() throws Exception {
  createJmeterEnv();
  JMeterUtils.setProperty(DistributedRunner.RETRIES_NUMBER,1);
  JMeterUtils.setProperty(DistributedRunner.RETRIES_DELAY,1);
  JMeterUtils.setProperty(DistributedRunner.CONTINUE_ON_FAIL,true);
  DistributedRunnerEmul obj=new DistributedRunnerEmul();
  List<String> hosts=Arrays.asList(test1,test2);
  initRunner(obj,hosts);
  obj.start(hosts);
  obj.shutdown(hosts);
  obj.stop(hosts);
  obj.exit(hosts);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\engine\DistributedRunnerTest.java",106
456,"'-tryline","@Test public void testInterfaces() throws Exception {
  String interfaces=Collections.list(NetworkInterface.getNetworkInterfaces()).stream().map(this::ifaceWithAddresses).collect(Collectors.joining(, ));
  perr(Interfaces: { + interfaces + });
  String externInterface=guessExternalIPv4Interface();
  perr(Choose  + externInterface +  to talk to external services);
  String localHost=getLocalHost().getHostAddress();
  boolean localHostIsBound=Collections.list(NetworkInterface.getNetworkInterfaces()).stream().flatMap(iface -> iface.getInterfaceAddresses().stream()).filter(iface -> iface.getAddress().getAddress().length == 4).map(this::toSubnetInfo).anyMatch(subnetInfo -> subnetInfo.isInRange(localHost));
  Assert.assertTrue(localHost:  + localHost +  is bound to an interface,localHostIsBound);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\engine\LocalHostTest.java",39
457,"'-tryline","@Test public void testLocalHost() throws Exception {
  InetAddress localHost=getLocalHost();
  showAddress(localHost);
  showAddress(InetAddress.getByName(localhost));
  for (  InetAddress a : InetAddress.getAllByName(InetAddress.getLocalHost().getHostName())) {
    perr(====================);
    showAddress(a);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\engine\LocalHostTest.java",85
458,"'-tryline","@Test public void testCloning() throws Exception {
  ListedHashTree original=new ListedHashTree();
  GenericController controller=new GenericController();
  controller.setName(controller);
  Arguments args=new Arguments();
  args.setName(args);
  TestPlan plan=new TestPlan();
  plan.addParameter(server,jakarta);
  original.add(controller,args);
  original.add(plan);
  ResultCollector listener=new ResultCollector();
  listener.setName(Collector);
  original.add(controller,listener);
  TreeCloner cloner=new TreeCloner();
  original.traverse(cloner);
  ListedHashTree newTree=cloner.getClonedTree();
  assertTrue(original != newTree);
  assertEquals(original.size(),newTree.size());
  assertEquals(original.getTree(original.getArray()[0]).size(),newTree.getTree(newTree.getArray()[0]).size());
  assertTrue(original.getArray()[0] != newTree.getArray()[0]);
  assertEquals(((GenericController)original.getArray()[0]).getName(),((GenericController)newTree.getArray()[0]).getName());
  assertSame(original.getTree(original.getArray()[0]).getArray()[1],newTree.getTree(newTree.getArray()[0]).getArray()[1]);
  TestPlan clonedTestPlan=(TestPlan)newTree.getArray()[1];
  clonedTestPlan.setRunningVersion(true);
  clonedTestPlan.recoverRunningVersion();
  assertTrue(!plan.getUserDefinedVariablesAsProperty().isRunningVersion());
  assertTrue(clonedTestPlan.getUserDefinedVariablesAsProperty().isRunningVersion());
  Arguments vars=(Arguments)plan.getUserDefinedVariablesAsProperty().getObjectValue();
  PropertyIterator iter=((CollectionProperty)vars.getProperty(Arguments.ARGUMENTS)).iterator();
  while (iter.hasNext()) {
    JMeterProperty argProp=iter.next();
    assertTrue(!argProp.isRunningVersion());
    assertTrue(argProp.getObjectValue() instanceof Argument);
    Argument arg=(Argument)argProp.getObjectValue();
    arg.setValue(yahoo);
    assertEquals(yahoo,arg.getValue());
  }
  vars=(Arguments)clonedTestPlan.getUserDefinedVariablesAsProperty().getObjectValue();
  iter=vars.propertyIterator();
  while (iter.hasNext()) {
    assertTrue(iter.next().isRunningVersion());
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\engine\TestTreeCloner.java",38
459,"'-tryline","@Test public void testReverseReplacement() throws Exception {
  ValueReplacer replacer=new ValueReplacer(variables);
  assertTrue(variables.getUserDefinedVariables().containsKey(server));
  assertTrue(replacer.containsKey(server));
  TestElement element=new TestPlan();
  element.setProperty(new StringProperty(domain,jakarta.apache.org));
  List<Object> argsin=new ArrayList<>();
  argsin.add(username is jack);
  argsin.add(his_password);
  element.setProperty(new CollectionProperty(args,argsin));
  replacer.reverseReplace(element);
  assertEquals(${server},element.getPropertyAsString(domain));
  @SuppressWarnings(unchecked) List<JMeterProperty> args=(List<JMeterProperty>)element.getProperty(args).getObjectValue();
  assertEquals(username is ${username},args.get(0).getStringValue());
  assertEquals(${password},args.get(1).getStringValue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\engine\util\TestValueReplacer.java",58
460,"'-tryline","@Test public void testReverseReplacementXml() throws Exception {
  ValueReplacer replacer=new ValueReplacer(variables);
  assertTrue(variables.getUserDefinedVariables().containsKey(bounded_regex));
  assertTrue(variables.getUserDefinedVariables().containsKey(normal_regex));
  assertTrue(replacer.containsKey(bounded_regex));
  assertTrue(replacer.containsKey(normal_regex));
  TestElement element=new TestPlan();
  element.setProperty(new StringProperty(domain,<this><is>xml</this></is>));
  List<Object> argsin=new ArrayList<>();
  argsin.add(<this><is>xml</this></is>);
  argsin.add(And I say: Hello World.);
  element.setProperty(new CollectionProperty(args,argsin));
  replacer.reverseReplace(element,true);
  @SuppressWarnings(unchecked) List<JMeterProperty> args=(List<JMeterProperty>)element.getProperty(args).getObjectValue();
  assertEquals(${bounded_regex},element.getPropertyAsString(domain));
  assertEquals(${bounded_regex},args.get(0).getStringValue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\engine\util\TestValueReplacer.java",77
461,"'-tryline","@Test public void testOverlappingMatches() throws Exception {
  TestPlan plan=new TestPlan();
  plan.addParameter(longMatch,servername);
  plan.addParameter(shortMatch,.*);
  ValueReplacer replacer=new ValueReplacer(plan);
  TestElement element=new TestPlan();
  element.setProperty(new StringProperty(domain,servername.domain));
  replacer.reverseReplace(element,true);
  String replacedDomain=element.getPropertyAsString(domain);
  assertEquals(${${shortMatch},replacedDomain);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\engine\util\TestValueReplacer.java",97
462,"'-tryline","@Test public void testPartialWordMatchesWithoutParens() throws Exception {
  assertEquals(toto%40005,replaceWord(005,toto%40005));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\engine\util\TestValueReplacer.java",110
463,"'-tryline","@Test public void testPartialWordMatchesWithParens() throws Exception {
  assertEquals(toto%40${domainMatcher},replaceWord((005),toto%40005));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\engine\util\TestValueReplacer.java",115
464,"'-tryline","@Test public void testCompleteWordMatchesWithoutParens() throws Exception {
  assertEquals(toto@${domainMatcher},replaceWord(005,toto@005));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\engine\util\TestValueReplacer.java",120
465,"'-tryline","@Test public void testCompleteWordMatchesWithParens() throws Exception {
  assertEquals(toto@${domainMatcher},replaceWord((005),toto@005));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\engine\util\TestValueReplacer.java",125
466,"'-tryline","private String replaceWord(String matchRegex,String testData) throws Exception {
  TestPlan plan=new TestPlan();
  plan.addParameter(domainMatcher,matchRegex);
  ValueReplacer replacer=new ValueReplacer(plan);
  TestElement element=new TestPlan();
  element.setProperty(new StringProperty(mail,testData));
  replacer.reverseReplace(element,true);
  return element.getPropertyAsString(mail);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\engine\util\TestValueReplacer.java",130
467,"'-tryline","@Test public void testReplace() throws Exception {
  ValueReplacer replacer=new ValueReplacer();
  replacer.setUserDefinedVariables(variables.getUserDefinedVariables());
  TestElement element=new ConfigTestElement();
  element.setProperty(new StringProperty(domain,${server}));
  replacer.replaceValues(element);
  element.setRunningVersion(true);
  assertEquals(jakarta.apache.org,element.getPropertyAsString(domain));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\engine\util\TestValueReplacer.java",140
468,"'-tryline","@Test public void testReplaceStringWithBackslash() throws Exception {
  ValueReplacer replacer=new ValueReplacer();
  replacer.setUserDefinedVariables(variables.getUserDefinedVariables());
  TestElement element=new ConfigTestElement();
  String input=\\${server} \\ \\\\ \\\\\\ \\, ;
  element.setProperty(new StringProperty(domain,input));
  replacer.replaceValues(element);
  element.setRunningVersion(true);
  assertEquals(input,element.getPropertyAsString(domain));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\engine\util\TestValueReplacer.java",151
469,"'-tryline","@Test public void testReplaceFunctionWithBackslash() throws Exception {
  ValueReplacer replacer=new ValueReplacer();
  replacer.setUserDefinedVariables(variables.getUserDefinedVariables());
  TestElement element=new ConfigTestElement();
  String input=${server} \\ \\\\ \\\\\\ \\, ;
  element.setProperty(new StringProperty(domain,input));
  replacer.replaceValues(element);
  element.setRunningVersion(true);
  assertEquals(jakarta.apache.org \\ \\ \\\\ , ,element.getPropertyAsString(domain));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\engine\util\TestValueReplacer.java",170
470,"'-tryline","@AfterEach public void tearDown() throws Exception {
  JMeterContextService.getContext().setSamplingStarted(false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\engine\util\TestValueReplacer.java",182
471,"'-tryline","@Test public void testSimpleLogging() throws Exception {
  final Logger log=LoggerFactory.getLogger(TestGuiLogEventAppender.class);
  log.info(logger created.);
  assertTrue(Logging appender error:  + log4j2LevelErrorMessages,log4j2LevelErrorMessages.isEmpty());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\gui\logging\TestGuiLogEventAppender.java",103
472,"'-tryline","public static void main(String[] args) throws Exception {
  JFrame frame=new JFrame(TristateCheckBoxTest);
  frame.setLayout(new GridLayout(0,1,15,15));
  UIManager.LookAndFeelInfo[] lfs=UIManager.getInstalledLookAndFeels();
  for (  UIManager.LookAndFeelInfo lf : lfs) {
    System.out.println(Look&Feel  + lf.getName());
    UIManager.setLookAndFeel(lf.getClassName());
    frame.add(makePanel(lf.getName()));
  }
  frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
  frame.pack();
  frame.setVisible(true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\gui\util\TristateCheckBoxTest.java",36
473,"'-tryline","protected void checkInvalidParameterCounts(AbstractFunction func,int minimum) throws Exception {
  Collection<CompoundVariable> parms=new ArrayDeque<>();
  for (int c=0; c < minimum; c++) {
    assertThrows(InvalidVariableException.class,() -> func.setParameters(parms),parms.size() =  + parms.size() +  is too small);
    parms.add(new CompoundVariable());
  }
  func.setParameters(parms);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\junit\JMeterTestCase.java",114
474,"'-tryline","protected void checkInvalidParameterCounts(AbstractFunction func,int min,int max) throws Exception {
  Collection<CompoundVariable> parms=new ArrayDeque<>();
  for (int count=0; count < min; count++) {
    assertThrows(InvalidVariableException.class,() -> func.setParameters(parms),parms.size() =  + parms.size() +  is too small);
    parms.add(new CompoundVariable());
  }
  for (int count=min; count <= max; count++) {
    func.setParameters(parms);
    parms.add(new CompoundVariable());
  }
  parms.add(new CompoundVariable());
  assertThrows(InvalidVariableException.class,() -> func.setParameters(parms),parms.size() =  + parms.size() +  is too big);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\junit\JMeterTestCase.java",125
475,"'-tryline","protected void checkInvalidParameterCounts(AbstractFunction func,int minimum) throws Exception {
  Collection<CompoundVariable> parms=new LinkedList<>();
  for (int c=0; c < minimum; c++) {
    try {
      func.setParameters(parms);
      fail(Should have generated InvalidVariableException for  + parms.size() +  parameters);
    }
 catch (    InvalidVariableException ignored) {
    }
    parms.add(new CompoundVariable());
  }
  func.setParameters(parms);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\junit\JMeterTestCaseJUnit.java",109
476,"'-tryline","@BeforeEach public void setUp() throws Exception {
  JMeterTestUtils.setupJMeterHome();
  JMeterUtils.loadJMeterProperties(JMeterUtils.getJMeterBinDir() + /jmeter.properties);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\report\core\TestCsvSampleWriter.java",38
477,"'-tryline","@Test public void testCsvSampleWriterConstructorWithNull() throws Exception {
  Assertions.assertThrows(NullPointerException.class,() -> new CsvSampleWriter(null));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\report\core\TestCsvSampleWriter.java",45
478,"'-tryline","@Test public void testCsvSampleWriterConstructorWithWriter() throws Exception {
  try (Writer writer=new StringWriter();CsvSampleWriter csvWriter=new CsvSampleWriter(writer,metadata)){
    csvWriter.writeHeader();
    csvWriter.flush();
    assertEquals(a,b + LINE_SEP,writer.toString());
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\report\core\TestCsvSampleWriter.java",53
479,"'-tryline","@Test public void testWriteWithoutWriter() throws Exception {
  try (CsvSampleWriter csvWriter=new CsvSampleWriter(metadata)){
    Sample sample=new SampleBuilder(metadata).add(a1).add(b1).build();
    try {
      csvWriter.write(sample);
      fail(ISE expected);
    }
 catch (    IllegalStateException e) {
    }
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\report\core\TestCsvSampleWriter.java",63
480,"'-tryline","@Test public void testWriteWithoutSample() throws Exception {
  try (Writer writer=new StringWriter();CsvSampleWriter csvWriter=new CsvSampleWriter(writer,metadata)){
    try {
      csvWriter.write(null);
      fail(NPE expected);
    }
 catch (    NullPointerException e) {
    }
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\report\core\TestCsvSampleWriter.java",76
481,"'-tryline","@Test public void testWrite() throws Exception {
  try (Writer writer=new StringWriter();CsvSampleWriter csvWriter=new CsvSampleWriter(writer,metadata)){
    Sample sample=new SampleBuilder(metadata).add(a1).add(b1).build();
    csvWriter.write(sample);
    csvWriter.flush();
    assertEquals(a1,b1 + LINE_SEP,writer.toString());
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\report\core\TestCsvSampleWriter.java",89
482,"'-tryline","@Test public void testgetApdexPerTransactionProperty() throws Exception {
  final Props props=new Props();
  final String REPORT_GENERATOR_KEY_PREFIX=jmeter.reportgenerator;
  final char KEY_DELIMITER='.';
  final String REPORT_GENERATOR_KEY_APDEX_PER_TRANSACTION=REPORT_GENERATOR_KEY_PREFIX + KEY_DELIMITER + apdex_per_transaction;
  props.load(this.getClass().getResourceAsStream(reportgenerator_test.properties));
  final String apdexPerTransaction=getOptionalProperty(props,REPORT_GENERATOR_KEY_APDEX_PER_TRANSACTION);
  assertEquals(apdexString,apdexPerTransaction);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\report\dashboard\ApdexPerTransactionTest.java",42
483,"'-tryline","@Test public void testgetApdexPerTransactionPropertySimple() throws Exception {
  final Props props=new Props();
  props.load(this.getClass().getResourceAsStream(reportgenerator_test.properties));
  final String title=getOptionalProperty(props,jmeter.reportgenerator.graph.responseTimePercentiles.title);
  assertNotNull(title should not be null,title);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\report\dashboard\ApdexPerTransactionTest.java",56
484,"'-tryline","private PropertyResourceBundle getRAS(String res) throws Exception {
  InputStream ras=this.getClass().getResourceAsStream(res);
  if (ras == null) {
    return null;
  }
  return new PropertyResourceBundle(ras);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\resources\PackageTest.java",85
485,"'-tryline","private void readRF(String res,List<String> l) throws Exception {
  InputStream ras=this.getClass().getResourceAsStream(res);
  if (ras == null) {
    if (MESSAGES.equals(resourcePrefix) || lang.length() == 0) {
      throw new IOException(Cannot open resource file  + res);
    }
 else {
      return;
    }
  }
  try (BufferedReader fileReader=new BufferedReader(new InputStreamReader(ras))){
    String s;
    while ((s=fileReader.readLine()) != null) {
      if (s.length() > 0 && !s.startsWith(#) && !s.startsWith(!)) {
        int equ=s.indexOf('=');
        String key=s.substring(0,equ);
        if (resourcePrefix.equals(MESSAGES)) {
          if (key.contains( ) || !key.toLowerCase(java.util.Locale.ENGLISH).equals(key)) {
            failures.add(Invalid key for JMeterUtils  + key);
          }
        }
        String val=s.substring(equ + 1);
        l.add(key);
        if (val.contains({0}) && val.contains(')) {
          String m=java.text.MessageFormat.format(val,DUMMY_PARAMS);
          if (m.contains({)) {
            failures.add(Incorrect message format ? (input/output) for:  + key + . Output contains {, it seems not all paratemeters were replaced.+ Format: + val+ , message with dummy parameters: + m);
          }
        }
      }
    }
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\resources\PackageTest.java",97
486,"'-tryline","private void check(String resname) throws Exception {
  check(resname,true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\resources\PackageTest.java",157
487,"'-tryline","private void check(String resname,boolean checkUnexpected) throws Exception {
  ArrayList<String> alf=new ArrayList<>(500);
  String res=getResName(resname);
  readRF(res,alf);
  Collections.sort(alf);
  String last=;
  for (  String curr : alf) {
    if (curr.equals(last)) {
      failures.add(Duplicate key= + curr +  in + res);
    }
    last=curr;
  }
  if (resname.length() == 0) {
    defaultPRB=getRAS(res);
    if (defaultPRB == null) {
      throw new IOException(Could not find required file:  + res);
    }
  }
 else   if (checkUnexpected) {
    PropertyResourceBundle prb=getRAS(res);
    if (prb == null) {
      return;
    }
    final ArrayList<String> list=Collections.list(prb.getKeys());
    Collections.sort(list);
    final boolean mainResourceFile=resname.startsWith(messages);
    for (    String key : list) {
      try {
        String val=defaultPRB.getString(key);
        if (mainResourceFile && val.equals(prb.getString(key))) {
          failures.add(Duplicate value?  + key + =+ val+  in + res);
        }
      }
 catch (      MissingResourceException e) {
        failures.add(resourcePrefix + _ + resname+  has unexpected key: + key);
      }
    }
  }
  if (failures.isEmpty()) {
    return;
  }
  fail(String.join(\n,failures));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\resources\PackageTest.java",165
488,"'-tryline","public void testLang() throws Exception {
  check(lang);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\resources\PackageTest.java",315
489,"'-tryline","/** 
 * Check all messages are available in one language
 * @throws Exception if something fails
 */
public void checkI18n() throws Exception {
  Map<String,Map<String,String>> missingLabelsPerBundle=new HashMap<>();
  for (  String prefix : prefixList) {
    Properties messages=new Properties();
    messages.load(Thread.currentThread().getContextClassLoader().getResourceAsStream(prefix.substring(1) + .properties));
    checkMessagesForLanguage(missingLabelsPerBundle,missingLabelsPerBundle,messages,prefix.substring(1),lang);
  }
  assertEquals(missingLabelsPerBundle.size() +  missing labels, labels missing: + printLabels(missingLabelsPerBundle),0,missingLabelsPerBundle.size());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\resources\PackageTest.java",319
490,"'-tryline","private PropertyResourceBundle getRAS(String res) throws Exception {
  InputStream ras=this.getClass().getResourceAsStream(res);
  if (ras == null) {
    return null;
  }
  return new PropertyResourceBundle(ras);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\resources\ResourceKeyUsageTest.java",44
491,"'-tryline","@Test public void checkResourceReferences() throws Exception {
  String resourceName=/org/apache/jmeter/resources/messages.properties;
  PropertyResourceBundle messagePRB=getRAS(resourceName);
  assertNotNull(Resource bundle  + resourceName +  was not found,resourceName);
  List<String> failures=new ArrayList<>();
  PackageTest.findFile(srcFiledir,null,new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      final File file=new File(dir,name);
      final Pattern pat=Pattern.compile(.*getResString\\(\([^\]+)\\\).*);
      if (name.endsWith(.java)) {
        BufferedReader fileReader=null;
        try {
          fileReader=new BufferedReader(new FileReader(file));
          String s;
          while ((s=fileReader.readLine()) != null) {
            if (s.matches(\\s*//.*)) {
              continue;
            }
            Matcher m=pat.matcher(s);
            if (m.matches()) {
              final String key=m.group(1);
              String resKey=key.replace(' ','_');
              resKey=resKey.toLowerCase(java.util.Locale.ENGLISH);
              if (!key.equals(resKey)) {
                System.out.println(file + : non-standard message key: ' + key+ ');
              }
              try {
                messagePRB.getString(resKey);
              }
 catch (              MissingResourceException e) {
                failures.add(file + : missing message key: ' + key+ ');
              }
            }
          }
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
 finally {
          JOrphanUtils.closeQuietly(fileReader);
        }
      }
      return file.isDirectory();
    }
  }
);
  if (failures.isEmpty()) {
    return;
  }
  fail(String.join(\n,failures));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\resources\ResourceKeyUsageTest.java",53
492,"'-tryline","@Test public void testElapsedTrue() throws Exception {
  SampleResult res=new SampleResult(true);
  res.sampleStart();
  Thread.sleep(110);
  res.sampleEnd();
  long time=res.getTime();
  if (time < 100) {
    fail(Sample time should be >=100, actual  + time);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\samplers\TestSampleResult.java",36
493,"'-tryline","@Test public void testElapsedFalse() throws Exception {
  SampleResult res=new SampleResult(false);
  res.sampleStart();
  Thread.sleep(110);
  res.sampleEnd();
  long time=res.getTime();
  if (time < 100) {
    fail(Sample time should be >=100, actual  + time);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\samplers\TestSampleResult.java",50
494,"'-tryline","@Test public void testPauseFalse() throws Exception {
  SampleResult res=new SampleResult(false);
  res.sampleStart();
  long totalSampleTime=sleep(100);
  res.samplePause();
  Thread.sleep(200);
  res.sampleResume();
  totalSampleTime+=sleep(100);
  res.sampleEnd();
  long sampleTime=res.getTime();
  assertEquals(Accumulated sample time,totalSampleTime,sampleTime,50);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\samplers\TestSampleResult.java",64
495,"'-tryline","@Test public void testPauseTrue() throws Exception {
  SampleResult res=new SampleResult(true);
  res.sampleStart();
  long totalSampleTime=sleep(100);
  res.samplePause();
  Thread.sleep(200);
  res.sampleResume();
  totalSampleTime+=sleep(100);
  res.sampleEnd();
  long sampleTime=res.getTime();
  assertEquals(Accumulated sample time,totalSampleTime,sampleTime,50);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\samplers\TestSampleResult.java",82
496,"'-tryline","@Test public void testPause2True() throws Exception {
  divertLog();
  SampleResult res=new SampleResult(true);
  res.sampleStart();
  res.samplePause();
  assertEquals(0,recordLogger.getLogRecordCount());
  res.samplePause();
  assertNotEquals(0,recordLogger.getLogRecordCount());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\samplers\TestSampleResult.java",112
497,"'-tryline","@Test public void testPause2False() throws Exception {
  divertLog();
  SampleResult res=new SampleResult(false);
  res.sampleStart();
  res.samplePause();
  assertEquals(0,recordLogger.getLogRecordCount());
  res.samplePause();
  assertNotEquals(0,recordLogger.getLogRecordCount());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\samplers\TestSampleResult.java",123
498,"'-tryline","@Test public void testByteCount() throws Exception {
  SampleResult res=new SampleResult();
  res.sampleStart();
  res.setBytes(100L);
  res.setSampleLabel(sample of size 100 bytes);
  res.sampleEnd();
  assertEquals(100,res.getBytesAsLong());
  assertEquals(sample of size 100 bytes,res.getSampleLabel());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\samplers\TestSampleResult.java",134
499,"'-tryline","@Test public void testSubResultsTrue() throws Exception {
  testSubResults(true,0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\samplers\TestSampleResult.java",146
500,"'-tryline","@Test public void testSubResultsTrueThread() throws Exception {
  testSubResults(true,500L,0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\samplers\TestSampleResult.java",151
501,"'-tryline","@Test public void testSubResultsFalse() throws Exception {
  testSubResults(false,0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\samplers\TestSampleResult.java",156
502,"'-tryline","@Test public void testSubResultsFalseThread() throws Exception {
  testSubResults(false,500L,0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\samplers\TestSampleResult.java",161
503,"'-tryline","@Test public void testSubResultsTruePause() throws Exception {
  testSubResults(true,100);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\samplers\TestSampleResult.java",166
504,"'-tryline","@Test public void testSubResultsTruePauseThread() throws Exception {
  testSubResults(true,500L,100);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\samplers\TestSampleResult.java",171
505,"'-tryline","@Test public void testSubResultsFalsePause() throws Exception {
  testSubResults(false,100);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\samplers\TestSampleResult.java",176
506,"'-tryline","@Test public void testSubResultsFalsePauseThread() throws Exception {
  testSubResults(false,500L,100);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\samplers\TestSampleResult.java",181
507,"'-tryline","public void xtestUntilFail() throws Exception {
  while (true) {
    testSubResultsTruePause();
    testSubResultsFalsePause();
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\samplers\TestSampleResult.java",187
508,"'-tryline","private void testSubResults(boolean nanoTime,long pause) throws Exception {
  testSubResults(nanoTime,0L,pause);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\samplers\TestSampleResult.java",194
509,"'-tryline","private void testSubResults(boolean nanoTime,long nanoThreadSleep,long pause) throws Exception {
  SampleResult parent=new SampleResult(nanoTime,nanoThreadSleep);
  JMeterTestCase.assertPrimitiveEquals(nanoTime,parent.useNanoTime);
  assertEquals(nanoThreadSleep,parent.nanoThreadSleep);
  long beginTest=parent.currentTimeInMillis();
  parent.sampleStart();
  Thread.sleep(100);
  parent.setBytes(300L);
  parent.setSampleLabel(Parent Sample);
  parent.setSuccessful(true);
  parent.sampleEnd();
  long parentElapsed=parent.getTime();
  SampleResult child1=new SampleResult(nanoTime);
  child1.sampleStart();
  Thread.sleep(100);
  child1.setBytes(100L);
  child1.setSampleLabel(Child1 Sample);
  child1.setSuccessful(true);
  child1.sampleEnd();
  long child1Elapsed=child1.getTime();
  assertTrue(child1.isSuccessful());
  assertEquals(100,child1.getBytesAsLong());
  assertEquals(Child1 Sample,child1.getSampleLabel());
  assertEquals(1,child1.getSampleCount());
  assertEquals(0,child1.getSubResults().length);
  long actualPause=0;
  if (pause > 0) {
    long t1=parent.currentTimeInMillis();
    Thread.sleep(pause);
    actualPause=parent.currentTimeInMillis() - t1;
  }
  SampleResult child2=new SampleResult(nanoTime);
  child2.sampleStart();
  Thread.sleep(100);
  child2.setBytes(200L);
  child2.setSampleLabel(Child2 Sample);
  child2.setSuccessful(true);
  child2.sampleEnd();
  long child2Elapsed=child2.getTime();
  assertTrue(child2.isSuccessful());
  assertEquals(200,child2.getBytesAsLong());
  assertEquals(Child2 Sample,child2.getSampleLabel());
  assertEquals(1,child2.getSampleCount());
  assertEquals(0,child2.getSubResults().length);
  parent.addSubResult(child1);
  parent.addSubResult(child2);
  assertTrue(parent.isSuccessful());
  assertEquals(600,parent.getBytesAsLong());
  assertEquals(Parent Sample,parent.getSampleLabel());
  assertEquals(1,parent.getSampleCount());
  assertEquals(2,parent.getSubResults().length);
  long parentElapsedTotal=parent.getTime();
  long overallTime=parent.currentTimeInMillis() - beginTest;
  long sumSamplesTimes=parentElapsed + child1Elapsed + actualPause+ child2Elapsed;
  long diff=parentElapsedTotal - sumSamplesTimes;
  long maxDiff=nanoTime ? 10 : 16;
  if (diff < 0 || diff > maxDiff) {
    fail(ParentElapsed:  + parentElapsedTotal +  - +  sum(samples): + sumSamplesTimes+  => + diff+  not in [0,+ maxDiff+ ]; nanotime=+ nanoTime);
  }
  diff=overallTime - parentElapsedTotal;
  if (diff < 0 || diff > maxDiff) {
    fail(TestElapsed:  + overallTime +  - +  ParentElapsed: + parentElapsedTotal+  => + diff+  not in [0,+ maxDiff+ ]; nanotime=+ nanoTime);
  }
  Calculator calculator=new Calculator();
  calculator.addSample(parent);
  assertEquals(600,calculator.getTotalBytes());
  assertEquals(1,calculator.getCount());
  assertEquals(1d / (parentElapsedTotal / 1000d),calculator.getRate(),0.0001d);
  assertFalse(1d / (parentElapsed / 1000d) <= calculator.getRate());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\samplers\TestSampleResult.java",198
510,"'-tryline","@Test public void testEncodingAndType() throws Exception {
  SampleResult res=new SampleResult();
  assertEquals(SampleResult.DEFAULT_ENCODING,res.getDataEncodingWithDefault());
  assertEquals(DataType should be blank,,res.getDataType());
  assertNull(res.getDataEncodingNoDefault());
  res.setEncodingAndType(null);
  assertEquals(SampleResult.DEFAULT_ENCODING,res.getDataEncodingWithDefault());
  assertEquals(DataType should be blank,,res.getDataType());
  assertNull(res.getDataEncodingNoDefault());
  res.setEncodingAndType(text/html);
  assertEquals(SampleResult.DEFAULT_ENCODING,res.getDataEncodingWithDefault());
  assertEquals(text,res.getDataType());
  assertNull(res.getDataEncodingNoDefault());
  res.setEncodingAndType(text/html; charset=aBcd);
  assertEquals(aBcd,res.getDataEncodingWithDefault());
  assertEquals(aBcd,res.getDataEncodingNoDefault());
  assertEquals(text,res.getDataType());
  res.setEncodingAndType(text/html; charset=\aBCd\);
  assertEquals(aBCd,res.getDataEncodingWithDefault());
  assertEquals(aBCd,res.getDataEncodingNoDefault());
  assertEquals(text,res.getDataType());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\samplers\TestSampleResult.java",305
511,"'-tryline","@Test public void testClone() throws Exception {
  SampleSaveConfiguration a=new SampleSaveConfiguration();
  a.setUrl(false);
  a.setAssertions(true);
  a.setDefaultDelimiter();
  a.setDefaultTimeStampFormat();
  a.setDataType(true);
  assertFalse(a.saveUrl());
  assertNotNull(a.getDelimiter());
  assertTrue(a.saveAssertions());
  assertTrue(a.saveDataType());
  SampleSaveConfiguration cloneA=(SampleSaveConfiguration)a.clone();
  assertNotSame(a,cloneA);
  assertEquals(a,cloneA);
  assertTrue(a.equals(cloneA));
  assertTrue(cloneA.equals(a));
  assertEquals(a.hashCode(),cloneA.hashCode());
  a.setUrl(true);
  assertFalse(a.equals(cloneA));
  assertFalse(cloneA.equals(a));
  assertFalse(a.hashCode() == cloneA.hashCode());
  a.setUrl(false);
  assertEquals(a,cloneA);
  assertTrue(a.equals(cloneA));
  assertTrue(cloneA.equals(a));
  assertEquals(a.hashCode(),cloneA.hashCode());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\samplers\TestSampleSaveConfiguration.java",36
512,"'-tryline","@Test public void testEqualsAndHashCode() throws Exception {
  SampleSaveConfiguration a=new SampleSaveConfiguration();
  a.setUrl(false);
  a.setAssertions(true);
  a.setDefaultDelimiter();
  a.setDefaultTimeStampFormat();
  a.setDataType(true);
  SampleSaveConfiguration b=new SampleSaveConfiguration();
  b.setUrl(false);
  b.setAssertions(true);
  b.setDefaultDelimiter();
  b.setDefaultTimeStampFormat();
  b.setDataType(true);
  assertEquals(a,b);
  assertTrue(a.equals(b));
  assertTrue(b.equals(a));
  assertEquals(a.hashCode(),b.hashCode());
  assertPrimitiveEquals(a.saveUrl(),b.saveUrl());
  assertPrimitiveEquals(a.saveAssertions(),b.saveAssertions());
  assertEquals(a.getDelimiter(),b.getDelimiter());
  assertPrimitiveEquals(a.saveDataType(),b.saveDataType());
  a.setAssertions(false);
  assertFalse(a.equals(b));
  assertFalse(b.equals(a));
  assertFalse(a.hashCode() == b.hashCode());
  assertFalse(a.saveAssertions() == b.saveAssertions());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\samplers\TestSampleSaveConfiguration.java",71
513,"'-tryline","@Test public void testFalse() throws Exception {
  SampleSaveConfiguration a=new SampleSaveConfiguration(false);
  SampleSaveConfiguration b=new SampleSaveConfiguration(false);
  assertEquals(Hash codes should be equal,a.hashCode(),b.hashCode());
  assertTrue(Objects should be equal,a.equals(b));
  assertTrue(Objects should be equal,b.equals(a));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\samplers\TestSampleSaveConfiguration.java",104
514,"'-tryline","@Test public void testTrue() throws Exception {
  SampleSaveConfiguration a=new SampleSaveConfiguration(true);
  SampleSaveConfiguration b=new SampleSaveConfiguration(true);
  assertEquals(Hash codes should be equal,a.hashCode(),b.hashCode());
  assertTrue(Objects should be equal,a.equals(b));
  assertTrue(Objects should be equal,b.equals(a));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\samplers\TestSampleSaveConfiguration.java",113
515,"'-tryline","@Test public void testFalseTrue() throws Exception {
  SampleSaveConfiguration a=new SampleSaveConfiguration(false);
  SampleSaveConfiguration b=new SampleSaveConfiguration(true);
  assertFalse(Hash codes should not be equal,a.hashCode() == b.hashCode());
  assertFalse(Objects should not be equal,a.equals(b));
  assertFalse(Objects should not be equal,b.equals(a));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\samplers\TestSampleSaveConfiguration.java",121
516,"'-tryline","@Test public void testFormatter() throws Exception {
  SampleSaveConfiguration a=new SampleSaveConfiguration(false);
  SampleSaveConfiguration b=new SampleSaveConfiguration(false);
  assertEquals(Hash codes should be equal,a.hashCode(),b.hashCode());
  assertTrue(Objects should be equal,a.equals(b));
  assertTrue(Objects should be equal,b.equals(a));
  assertTrue(a.strictDateFormatter() == null);
  assertTrue(b.strictDateFormatter() == null);
  assertTrue(a.threadSafeLenientFormatter() == null);
  assertTrue(b.threadSafeLenientFormatter() == null);
  a.setDateFormat(null);
  b.setDateFormat(null);
  assertEquals(Hash codes should be equal,a.hashCode(),b.hashCode());
  assertTrue(Objects should be equal,a.equals(b));
  assertTrue(Objects should be equal,b.equals(a));
  assertTrue(a.strictDateFormatter() == null);
  assertTrue(b.strictDateFormatter() == null);
  assertTrue(a.threadSafeLenientFormatter() == null);
  assertTrue(b.threadSafeLenientFormatter() == null);
  a.setDateFormat(dd/MM/yyyy);
  b.setDateFormat(dd/MM/yyyy);
  assertEquals(Hash codes should be equal,a.hashCode(),b.hashCode());
  assertTrue(Objects should be equal,a.equals(b));
  assertTrue(Objects should be equal,b.equals(a));
  assertTrue(Objects should be equal,a.strictDateFormatter().equals(b.strictDateFormatter()));
  assertTrue(Objects should be equal,a.threadSafeLenientFormatter().equals(b.threadSafeLenientFormatter()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\samplers\TestSampleSaveConfiguration.java",130
517,"'-tryline","@Test public void testSaveConfigNames() throws Exception {
  List<String> getMethodNames=new ArrayList<>();
  List<String> setMethodNames=new ArrayList<>();
  Method[] methods=SampleSaveConfiguration.class.getMethods();
  for (  Method method : methods) {
    String name=method.getName();
    if (name.startsWith(SampleSaveConfiguration.CONFIG_GETTER_PREFIX) && method.getParameterTypes().length == 0) {
      name=name.substring(SampleSaveConfiguration.CONFIG_GETTER_PREFIX.length());
      getMethodNames.add(name);
      assertTrue(SAVE_CONFIG_NAMES should contain save + name,SampleSaveConfiguration.SAVE_CONFIG_NAMES.contains(name));
    }
    if (name.startsWith(SampleSaveConfiguration.CONFIG_SETTER_PREFIX) && method.getParameterTypes().length == 1 && boolean.class.equals(method.getParameterTypes()[0])) {
      name=name.substring(SampleSaveConfiguration.CONFIG_SETTER_PREFIX.length());
      setMethodNames.add(name);
      assertTrue(SAVE_CONFIG_NAMES should contain set + name,SampleSaveConfiguration.SAVE_CONFIG_NAMES.contains(name));
    }
  }
  for (  String name : SampleSaveConfiguration.SAVE_CONFIG_NAMES) {
    assertTrue(SAVE_CONFIG_NAMES should NOT contain save + name,getMethodNames.contains(name));
    assertTrue(SAVE_CONFIG_NAMES should NOT contain set + name,setMethodNames.contains(name));
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\samplers\TestSampleSaveConfiguration.java",159
518,"'-tryline","private void checkSplitString(String input,char delim,String[] expected) throws Exception {
  String[] out=CSVSaveService.csvSplitString(input,delim);
  checkStrings(expected,out);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\save\TestCSVSaveService.java",37
519,"'-tryline","@Test public void testSplitEmpty() throws Exception {
  checkSplitString(,',',new String[]{});
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\save\TestCSVSaveService.java",50
520,"'-tryline","@Test public void testSplitUnquoted() throws Exception {
  checkSplitString(a,',',new String[]{a});
  checkSplitString(a,bc,d,e,',',new String[]{a,bc,d,e});
  checkSplitString(,bc,d,e,',',new String[]{,bc,d,e});
  checkSplitString(a,,d,e,',',new String[]{a,,d,e});
  checkSplitString(a,bc, ,e,',',new String[]{a,bc, ,e});
  checkSplitString(a,bc,d, ,',',new String[]{a,bc,d, });
  checkSplitString(a,bc,d,,',',new String[]{a,bc,d,});
  checkSplitString(a,bc,,,',',new String[]{a,bc,,});
  checkSplitString(a,,,,',',new String[]{a,,,});
  checkSplitString(a,bc,d,\n,',',new String[]{a,bc,d,});
  checkSplitString(a,b\u00e7,d,\u00e9,',',new String[]{a,b\u00e7,d,\u00e9});
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\save\TestCSVSaveService.java",57
521,"'-tryline","@Test public void testSplitQuoted() throws Exception {
  checkSplitString(a,bc,d,e,',',new String[]{a,bc,d,e});
  checkSplitString(,bc,d,e,',',new String[]{,bc,d,e});
  checkSplitString(\\,bc,d,e,',',new String[]{,bc,d,e});
  checkSplitString(a,,d,e,',',new String[]{a,,d,e});
  checkSplitString(a,\\,d,e,',',new String[]{a,,d,e});
  checkSplitString(a,bc, ,e,',',new String[]{a,bc, ,e});
  checkSplitString(a,bc,\ \,e,',',new String[]{a,bc, ,e});
  checkSplitString(a,bc,d, ,',',new String[]{a,bc,d, });
  checkSplitString(a,bc,d,\ \,',',new String[]{a,bc,d, });
  checkSplitString(a,bc,d,,',',new String[]{a,bc,d,});
  checkSplitString(a,bc,d,\\,',',new String[]{a,bc,d,});
  checkSplitString(a,bc,d,\\\n,',',new String[]{a,bc,d,});
  checkSplitString(\a\,\b\u00e7\,\d\,\\u00e9\,',',new String[]{a,b\u00e7,d,\u00e9});
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\save\TestCSVSaveService.java",75
522,"'-tryline","@Test public void testSplitBadQuote() throws Exception {
  try {
    checkSplitString(a\b,',',new String[]{});
    fail(Should have generated IOException);
  }
 catch (  IOException e) {
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\save\TestCSVSaveService.java",95
523,"'-tryline","@Test public void testSplitMultiLine() throws Exception {
  String line=a,,\c\nd\,e\n,,f,g,\n\n;
  String[] out;
  BufferedReader br=new BufferedReader(new StringReader(line));
  out=CSVSaveService.csvReadFile(br,',');
  checkStrings(new String[]{a,,c\nd,e},out);
  out=CSVSaveService.csvReadFile(br,',');
  checkStrings(new String[]{,,f,g,},out);
  out=CSVSaveService.csvReadFile(br,',');
  checkStrings(new String[]{},out);
  assertEquals(Expected to be at EOF,-1,br.read());
  out=CSVSaveService.csvReadFile(br,',');
  checkStrings(new String[]{},out);
  out=CSVSaveService.csvReadFile(br,',');
  checkStrings(new String[]{},out);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\save\TestCSVSaveService.java",104
524,"'-tryline","@Test public void testBlankLine() throws Exception {
  BufferedReader br=new BufferedReader(new StringReader(\n));
  String[] out=CSVSaveService.csvReadFile(br,',');
  checkStrings(new String[]{},out);
  assertEquals(Expected to be at EOF,-1,br.read());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\save\TestCSVSaveService.java",123
525,"'-tryline","@Test public void testBlankLineQuoted() throws Exception {
  BufferedReader br=new BufferedReader(new StringReader(\\\n));
  String[] out=CSVSaveService.csvReadFile(br,',');
  checkStrings(new String[]{},out);
  assertEquals(Expected to be at EOF,-1,br.read());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\save\TestCSVSaveService.java",131
526,"'-tryline","@Test public void testEmptyFile() throws Exception {
  BufferedReader br=new BufferedReader(new StringReader());
  String[] out=CSVSaveService.csvReadFile(br,',');
  checkStrings(new String[]{},out);
  assertEquals(Expected to be at EOF,-1,br.read());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\save\TestCSVSaveService.java",139
527,"'-tryline","@Test public void testShortFile() throws Exception {
  BufferedReader br=new BufferedReader(new StringReader(a));
  String[] out=CSVSaveService.csvReadFile(br,',');
  checkStrings(new String[]{a},out);
  assertEquals(Expected to be at EOF,-1,br.read());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\save\TestCSVSaveService.java",147
528,"'-tryline","private void testSetGet(ComboStringEditor e,Object value) throws Exception {
  e.setValue(value);
  assertEquals(value,e.getValue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\testbeans\gui\TestComboStringEditor.java",27
529,"'-tryline","private void testSetGetAsText(ComboStringEditor e,String text) throws Exception {
  e.setAsText(text);
  assertEquals(text,e.getAsText());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\testbeans\gui\TestComboStringEditor.java",32
530,"'-tryline","@Test public void testSetGet() throws Exception {
  @SuppressWarnings(deprecation) ComboStringEditor e=new ComboStringEditor();
  testSetGet(e,any string);
  testSetGet(e,);
  testSetGet(e,null);
  testSetGet(e,${var});
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\testbeans\gui\TestComboStringEditor.java",37
531,"'-tryline","@Test public void testSetGetAsText() throws Exception {
  @SuppressWarnings(deprecation) ComboStringEditor e=new ComboStringEditor();
  testSetGetAsText(e,any string);
  testSetGetAsText(e,);
  testSetGetAsText(e,null);
  testSetGetAsText(e,${var});
  e.setAsText(e.UNDEFINED.toString());
  assertNotNull(e.getAsText());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\testbeans\gui\TestComboStringEditor.java",48
532,"'-tryline","private void testSetGet(ComboStringEditor e,Object value) throws Exception {
  e.setValue(value);
  assertEquals(value,e.getValue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\testbeans\gui\TestFieldStringEditor.java",26
533,"'-tryline","private void testSetGetAsText(ComboStringEditor e,String text) throws Exception {
  e.setAsText(text);
  assertEquals(text,e.getAsText());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\testbeans\gui\TestFieldStringEditor.java",31
534,"'-tryline","@Test public void testSetGet() throws Exception {
  @SuppressWarnings(deprecation) ComboStringEditor e=new ComboStringEditor();
  testSetGet(e,any string);
  testSetGet(e,);
  testSetGet(e,${var});
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\testbeans\gui\TestFieldStringEditor.java",36
535,"'-tryline","@Test public void testSetGetAsText() throws Exception {
  @SuppressWarnings(deprecation) ComboStringEditor e=new ComboStringEditor();
  testSetGetAsText(e,any string);
  testSetGetAsText(e,);
  testSetGetAsText(e,${var});
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\testbeans\gui\TestFieldStringEditor.java",46
536,"'-tryline","@Test public void testRecovery() throws Exception {
  ConfigTestElement config=new ConfigTestElement();
  config.addProperty(new StringProperty(name,config));
  config.setRunningVersion(true);
  LoginConfig loginConfig=new LoginConfig();
  loginConfig.setUsername(user1);
  loginConfig.setPassword(pass1);
  assertTrue(config.getProperty(login) instanceof NullProperty);
  assertEquals(new NullProperty(login),config.getProperty(login));
  config.addProperty(new TestElementProperty(login,loginConfig));
  assertEquals(loginConfig.toString(),config.getPropertyAsString(login));
  config.recoverRunningVersion();
  assertTrue(config.getProperty(login) instanceof NullProperty);
  assertEquals(new NullProperty(login),config.getProperty(login));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\testelement\PackageTest.java",33
537,"'-tryline","@Test public void testArguments() throws Exception {
  Arguments args=new Arguments();
  args.addArgument(arg1,val1,=);
  TestElementProperty prop=new TestElementProperty(args,args);
  ConfigTestElement te=new ConfigTestElement();
  te.addProperty(prop);
  te.setRunningVersion(true);
  Arguments config=new Arguments();
  config.addArgument(config1,configValue,=);
  TestElementProperty configProp=new TestElementProperty(args,config);
  ConfigTestElement te2=new ConfigTestElement();
  te2.addProperty(configProp);
  te.addTestElement(te2);
  assertEquals(2,args.getArgumentCount());
  assertEquals(config1=configValue,args.getArgument(1).toString());
  te.recoverRunningVersion();
  te.addTestElement(te2);
  assertEquals(2,args.getArgumentCount());
  assertEquals(config1=configValue,args.getArgument(1).toString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\testelement\PackageTest.java",51
538,"'-tryline","@Test public void testStringProperty() throws Exception {
  StringProperty prop=new StringProperty(name,value);
  prop.setRunningVersion(true);
  prop.setObjectValue(new Value);
  assertEquals(new Value,prop.getStringValue());
  prop.recoverRunningVersion(null);
  assertEquals(value,prop.getStringValue());
  prop.setObjectValue(new Value);
  prop.setObjectValue(2nd Value);
  assertEquals(2nd Value,prop.getStringValue());
  prop.recoverRunningVersion(null);
  assertEquals(value,prop.getStringValue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\testelement\property\PackageTest.java",30
539,"'-tryline","@Test public void testElementProperty() throws Exception {
  LoginConfig config=new LoginConfig();
  config.setUsername(username);
  config.setPassword(password);
  TestElementProperty prop=new TestElementProperty(name,config);
  prop.setRunningVersion(true);
  config=new LoginConfig();
  config.setUsername(user2);
  config.setPassword(pass2);
  prop.setObjectValue(config);
  assertEquals(user2=pass2,prop.getStringValue());
  prop.recoverRunningVersion(null);
  assertEquals(username=password,prop.getStringValue());
  config=new LoginConfig();
  config.setUsername(user2);
  config.setPassword(pass2);
  prop.setObjectValue(config);
  config=new LoginConfig();
  config.setUsername(user3);
  config.setPassword(pass3);
  prop.setObjectValue(config);
  assertEquals(user3=pass3,prop.getStringValue());
  prop.recoverRunningVersion(null);
  assertEquals(username=password,prop.getStringValue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\testelement\property\PackageTest.java",45
540,"'-tryline","@Test public void testBooleanEquality() throws Exception {
  BooleanProperty jpn1=new BooleanProperty();
  BooleanProperty jpn2=new BooleanProperty();
  BooleanProperty jp1=new BooleanProperty(name1,true);
  BooleanProperty jp2=new BooleanProperty(name1,true);
  BooleanProperty jp3=new BooleanProperty(name2,true);
  BooleanProperty jp4=new BooleanProperty(name2,false);
  checkEquals(jpn1,jpn2);
  checkNotEquals(jpn1,jp1);
  checkNotEquals(jpn1,jp2);
  checkEquals(jp1,jp2);
  checkNotEquals(jp1,jp3);
  checkNotEquals(jp2,jp3);
  checkNotEquals(jp3,jp4);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\testelement\property\PackageTest.java",88
541,"'-tryline","@Test public void testDoubleEquality() throws Exception {
  DoubleProperty jpn1=new DoubleProperty();
  DoubleProperty jpn2=new DoubleProperty();
  DoubleProperty jp1=new DoubleProperty(name1,123.4);
  DoubleProperty jp2=new DoubleProperty(name1,123.4);
  DoubleProperty jp3=new DoubleProperty(name2,-123.4);
  DoubleProperty jp4=new DoubleProperty(name2,123.4);
  DoubleProperty jp5=new DoubleProperty(name2,Double.NEGATIVE_INFINITY);
  DoubleProperty jp6=new DoubleProperty(name2,Double.NEGATIVE_INFINITY);
  DoubleProperty jp7=new DoubleProperty(name2,Double.POSITIVE_INFINITY);
  DoubleProperty jp8=new DoubleProperty(name2,Double.POSITIVE_INFINITY);
  DoubleProperty jp9=new DoubleProperty(name2,Double.NaN);
  DoubleProperty jp10=new DoubleProperty(name2,Double.NaN);
  DoubleProperty jp11=new DoubleProperty(name1,Double.NaN);
  DoubleProperty jp12=new DoubleProperty(name1,Double.MIN_VALUE);
  DoubleProperty jp13=new DoubleProperty(name2,Double.MIN_VALUE);
  DoubleProperty jp14=new DoubleProperty(name2,Double.MIN_VALUE);
  DoubleProperty jp15=new DoubleProperty(name1,Double.MAX_VALUE);
  DoubleProperty jp16=new DoubleProperty(name2,Double.MAX_VALUE);
  DoubleProperty jp17=new DoubleProperty(name2,Double.MAX_VALUE);
  checkEquals(jpn1,jpn2);
  checkNotEquals(jpn1,jp1);
  checkNotEquals(jpn1,jp2);
  checkEquals(jp1,jp2);
  checkNotEquals(jp1,jp3);
  checkNotEquals(jp2,jp3);
  checkNotEquals(jp3,jp4);
  checkEquals(jp5,jp6);
  checkNotEquals(jp3,jp6);
  checkEquals(jp7,jp8);
  checkNotEquals(jp4,jp7);
  checkNotEquals(jp8,jp9);
  checkEquals(jp9,jp10);
  checkNotEquals(jp10,jp11);
  checkNotEquals(jp5,jp10);
  checkNotEquals(jp12,jp14);
  checkEquals(jp13,jp14);
  checkNotEquals(jp15,jp16);
  checkEquals(jp16,jp17);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\testelement\property\PackageTest.java",105
542,"'-tryline","@Test public void testFloatEquality() throws Exception {
  FloatProperty jp1=new FloatProperty(name1,123.4f);
  FloatProperty jp2=new FloatProperty(name1,123.4f);
  FloatProperty jp3=new FloatProperty(name2,-123.4f);
  FloatProperty jp4=new FloatProperty(name2,123.4f);
  FloatProperty jp5=new FloatProperty(name2,Float.NEGATIVE_INFINITY);
  FloatProperty jp6=new FloatProperty(name2,Float.NEGATIVE_INFINITY);
  FloatProperty jp7=new FloatProperty(name2,Float.POSITIVE_INFINITY);
  FloatProperty jp8=new FloatProperty(name2,Float.POSITIVE_INFINITY);
  FloatProperty jp9=new FloatProperty(name2,Float.NaN);
  FloatProperty jp10=new FloatProperty(name2,Float.NaN);
  FloatProperty jp11=new FloatProperty(name1,Float.NaN);
  FloatProperty jp12=new FloatProperty(name1,Float.MIN_VALUE);
  FloatProperty jp13=new FloatProperty(name2,Float.MIN_VALUE);
  FloatProperty jp14=new FloatProperty(name2,Float.MIN_VALUE);
  FloatProperty jp15=new FloatProperty(name1,Float.MAX_VALUE);
  FloatProperty jp16=new FloatProperty(name2,Float.MAX_VALUE);
  FloatProperty jp17=new FloatProperty(name2,Float.MAX_VALUE);
  checkEquals(jp1,jp2);
  checkNotEquals(jp1,jp3);
  checkNotEquals(jp2,jp3);
  checkNotEquals(jp3,jp4);
  checkEquals(jp5,jp6);
  checkNotEquals(jp3,jp6);
  checkEquals(jp7,jp8);
  checkNotEquals(jp4,jp7);
  checkNotEquals(jp8,jp9);
  checkEquals(jp9,jp10);
  checkNotEquals(jp10,jp11);
  checkNotEquals(jp5,jp10);
  checkNotEquals(jp12,jp14);
  checkEquals(jp13,jp14);
  checkNotEquals(jp15,jp16);
  checkEquals(jp16,jp17);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\testelement\property\PackageTest.java",147
543,"'-tryline","@Test public void testIntegerEquality() throws Exception {
  IntegerProperty jp1=new IntegerProperty(name1,123);
  IntegerProperty jp2=new IntegerProperty(name1,123);
  IntegerProperty jp3=new IntegerProperty(name2,-123);
  IntegerProperty jp4=new IntegerProperty(name2,123);
  IntegerProperty jp5=new IntegerProperty(name2,Integer.MIN_VALUE);
  IntegerProperty jp6=new IntegerProperty(name2,Integer.MIN_VALUE);
  IntegerProperty jp7=new IntegerProperty(name2,Integer.MAX_VALUE);
  IntegerProperty jp8=new IntegerProperty(name2,Integer.MAX_VALUE);
  IntegerProperty jp9=new IntegerProperty(name1,Integer.MIN_VALUE);
  IntegerProperty jp10=new IntegerProperty(name1,Integer.MAX_VALUE);
  checkEquals(jp1,jp2);
  checkNotEquals(jp1,jp3);
  checkNotEquals(jp2,jp3);
  checkNotEquals(jp3,jp4);
  checkEquals(jp5,jp6);
  checkNotEquals(jp3,jp6);
  checkEquals(jp7,jp8);
  checkNotEquals(jp4,jp7);
  checkNotEquals(jp9,jp5);
  checkNotEquals(jp10,jp7);
  checkNotEquals(jp9,jp10);
  try {
    new IntegerProperty(null);
    fail(Should have generated an Illegal Argument Exception);
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    new IntegerProperty(null,0);
    fail(Should have generated an Illegal Argument Exception);
  }
 catch (  IllegalArgumentException e) {
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\testelement\property\PackageTest.java",184
544,"'-tryline","@Test public void testLongEquality() throws Exception {
  LongProperty jp1=new LongProperty(name1,123);
  LongProperty jp2=new LongProperty(name1,123);
  LongProperty jp3=new LongProperty(name2,-123);
  LongProperty jp4=new LongProperty(name2,123);
  LongProperty jp5=new LongProperty(name2,Long.MIN_VALUE);
  LongProperty jp6=new LongProperty(name2,Long.MIN_VALUE);
  LongProperty jp7=new LongProperty(name2,Long.MAX_VALUE);
  LongProperty jp8=new LongProperty(name2,Long.MAX_VALUE);
  LongProperty jp9=new LongProperty(name1,Long.MIN_VALUE);
  LongProperty jp10=new LongProperty(name1,Long.MAX_VALUE);
  checkEquals(jp1,jp2);
  checkNotEquals(jp1,jp3);
  checkNotEquals(jp2,jp3);
  checkNotEquals(jp3,jp4);
  checkEquals(jp5,jp6);
  checkNotEquals(jp3,jp6);
  checkEquals(jp7,jp8);
  checkNotEquals(jp4,jp7);
  checkNotEquals(jp9,jp5);
  checkNotEquals(jp10,jp7);
  checkNotEquals(jp9,jp10);
  try {
    new LongProperty(null,0L);
    fail(Should have generated an Illegal Argument Exception);
  }
 catch (  IllegalArgumentException e) {
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\testelement\property\PackageTest.java",219
545,"'-tryline","@Test public void testMapEquality() throws Exception {
  try {
    new MapProperty(null,null);
    fail(Should have generated an Illegal Argument Exception);
  }
 catch (  IllegalArgumentException e) {
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\testelement\property\PackageTest.java",249
546,"'-tryline","@Test public void testNullEquality() throws Exception {
  NullProperty jpn1=new NullProperty();
  NullProperty jpn2=new NullProperty();
  try {
    new NullProperty(null);
    fail(Should have generated an Illegal Argument Exception);
  }
 catch (  IllegalArgumentException e) {
  }
  NullProperty jp1=new NullProperty(name1);
  NullProperty jp2=new NullProperty(name1);
  NullProperty jp3=new NullProperty(name2);
  NullProperty jp4=new NullProperty(name2);
  checkEquals(jpn1,jpn2);
  checkNotEquals(jpn1,jp1);
  checkEquals(jp1,jp2);
  checkNotEquals(jp1,jp3);
  checkNotEquals(jp2,jp3);
  checkEquals(jp3,jp4);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\testelement\property\PackageTest.java",258
547,"'-tryline","@Test public void testStringEquality() throws Exception {
  StringProperty jpn1=new StringProperty();
  StringProperty jpn2=new StringProperty();
  StringProperty jp1=new StringProperty(name1,value1);
  StringProperty jp2=new StringProperty(name1,value1);
  StringProperty jp3=new StringProperty(name2,value1);
  StringProperty jp4=new StringProperty(name2,value2);
  StringProperty jp5=new StringProperty(name1,null);
  StringProperty jp6=new StringProperty(name1,null);
  StringProperty jp7=new StringProperty(name2,null);
  checkEquals(jpn1,jpn2);
  checkNotEquals(jpn1,jp1);
  checkEquals(jp1,jp2);
  checkNotEquals(jp1,jp3);
  checkNotEquals(jp2,jp3);
  checkNotEquals(jp3,jp4);
  checkEquals(jp5,jp6);
  checkNotEquals(jp3,jp5);
  checkNotEquals(jp6,jp7);
  try {
    new StringProperty(null,);
    fail(Should have generated an Illegal Argument Exception);
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    new StringProperty(null,null);
    fail(Should have generated an Illegal Argument Exception);
  }
 catch (  IllegalArgumentException e) {
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\testelement\property\PackageTest.java",279
548,"'-tryline","@Test public void testAddingProperties() throws Exception {
  CollectionProperty coll=new CollectionProperty();
  coll.addItem(joe);
  coll.addProperty(new FunctionProperty());
  assertEquals(joe,coll.get(0).getStringValue());
  assertEquals(org.apache.jmeter.testelement.property.FunctionProperty,coll.get(1).getClass().getName());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\testelement\property\PackageTest.java",311
549,"'-tryline","@Test public void testConfigGathering() throws Exception {
  ListedHashTree testing=new ListedHashTree();
  GenericController controller=new GenericController();
  ConfigTestElement config1=new ConfigTestElement();
  config1.setName(config1);
  config1.setProperty(test.property,A test value);
  TestSampler sampler=new TestSampler();
  sampler.setName(sampler);
  testing.add(controller,config1);
  testing.add(controller,sampler);
  TestCompiler.initialize();
  TestCompiler compiler=new TestCompiler(testing);
  testing.traverse(compiler);
  sampler=(TestSampler)compiler.configureSampler(sampler).getSampler();
  assertEquals(A test value,sampler.getPropertyAsString(test.property));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\threads\TestTestCompiler.java",31
550,"'-tryline","@Override public void afterEach(ExtensionContext context) throws Exception {
  JMeterContextService.getContext().clear();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\JMeterContextExtension.java",57
551,"'-tryline","@Override public void beforeEach(ExtensionContext context) throws Exception {
  JMeterContext jMeterContext=JMeterContextService.getContext();
  jMeterContext.clear();
  jMeterContext.setVariables(new JMeterVariables());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\JMeterContextExtension.java",62
552,"'-tryline","@Test public void testGetScriptEngineJS() throws Exception {
  element.setScriptLanguage(JavaScript);
  assertThat(element.getScriptEngine().getFactory().getLanguageName(),CoreMatchers.containsString(Script));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\JSR223TestElementTest.java",31
553,"'-tryline","@Test public void testGetScriptEngineDefault() throws Exception {
  element.setScriptLanguage();
  assertThat(element.getScriptEngine().getFactory().getLanguageName(),CoreMatchers.is(Groovy));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\JSR223TestElementTest.java",38
554,"'-tryline","@Test public void testServer() throws Exception {
  BeanShellServer bshs=new BeanShellServer(9876,);
  assertNotNull(bshs);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\PackageTest.java",26
555,"'-tryline","@Test public void utilityClassTest() throws Exception {
  Constructor<SecurityProviderLoader> privateConstructor=SecurityProviderLoader.class.getDeclaredConstructor();
  privateConstructor.setAccessible(true);
  try {
    privateConstructor.newInstance();
  }
 catch (  InvocationTargetException e) {
    Assert.assertEquals(IllegalStateException.class,e.getCause().getClass());
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\SecurityProviderLoaderTest.java",44
556,"'-tryline","@Test public void testServer() throws Exception {
  BeanShellServer bshs=new BeanShellServer(9876,);
  assertNotNull(bshs);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\StringUtilitiesTest.java",27
557,"'-tryline","@Test public void testSub1() throws Exception {
  String input=http://jakarta.apache.org/jmeter/index.html;
  String pattern=jakarta.apache.org;
  String sub=${server};
  assertEquals(http://${server}/jmeter/index.html,StringUtilities.substitute(input,pattern,sub));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\StringUtilitiesTest.java",34
558,"'-tryline","@Test public void testSub2() throws Exception {
  String input=arg1=param1;param1;
  String pattern=param1;
  String sub=${value};
  assertEquals(arg1=${value};${value},StringUtilities.substitute(input,pattern,sub));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\StringUtilitiesTest.java",42
559,"'-tryline","@Test public void testSub3() throws Exception {
  String input=jakarta.apache.org;
  String pattern=jakarta.apache.org;
  String sub=${server};
  assertEquals(${server},StringUtilities.substitute(input,pattern,sub));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\StringUtilitiesTest.java",50
560,"'-tryline","@Test public void testSub4() throws Exception {
  String input=//a///b////c;
  String pattern=//;
  String sub=/;
  assertEquals(/a//b//c,StringUtilities.substitute(input,pattern,sub));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\StringUtilitiesTest.java",58
561,"'-tryline","@Test public void testGetResourceFileAsText() throws Exception {
  String sep=System.getProperty(line.separator);
  assertEquals(line one + sep + line two+ sep,JMeterUtils.getResourceFileAsText(resourcefile.txt));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\TestJMeterUtils.java",26
562,"'-tryline","@Test public void testGetResourceFileAsTextWithMisingResource() throws Exception {
  assertEquals(,JMeterUtils.getResourceFileAsText(not_existant_resourcefile.txt));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\TestJMeterUtils.java",32
563,"'-tryline","@Test public void testGesResStringDefaultWithNonExistantKey() throws Exception {
  assertEquals([res_key=noValidKey],JMeterUtils.getResString(noValidKey));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\TestJMeterUtils.java",37
564,"'-tryline","@Test public void testName() throws Exception {
  Functor f1=new Functor(getName);
  Functor f2=new Functor(getName);
  Functor f1a=new Functor(getName);
  Test1 t1=new Test1(t1);
  Test2 t2=new Test2(t2);
  Test1a t1a=new Test1a(aa);
  assertEquals(t1,f1.invoke(t1));
  try {
    f1.invoke(t2);
    fail(Should have generated error);
  }
 catch (  JMeterError e) {
  }
  assertEquals(t2,f2.invoke(t2));
  assertEquals(1a:aa.,f1a.invoke(t1a));
  try {
    f1a.invoke(t1);
    fail(Should have generated error);
  }
 catch (  JMeterError e) {
  }
  assertEquals(1a:aa.,f1.invoke(t1a));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jorphan\reflect\TestFunctor.java",95
565,"'-tryline","@Test public void testNameTypes() throws Exception {
  Functor f=new Functor(getString,new Class[]{String.class});
  Functor f2=new Functor(getString);
  Test1 t1=new Test1(t1);
  assertEquals(x1,f.invoke(t1,new String[]{x1}));
  try {
    assertEquals(x1,f.invoke(t1));
    fail(Should have generated an Exception);
  }
 catch (  JMeterError ok) {
  }
  assertEquals(x2,f2.invoke(t1,new String[]{x2}));
  try {
    assertEquals(x2,f2.invoke(t1));
    fail(Should have generated an Exception);
  }
 catch (  JMeterError ok) {
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jorphan\reflect\TestFunctor.java",122
566,"'-tryline","@Test public void testObjectName() throws Exception {
  Test1 t1=new Test1(t1);
  Test2 t2=new Test2(t2);
  Functor f1=new Functor(t1,getName);
  assertEquals(t1,f1.invoke(t1));
  assertEquals(t1,f1.invoke(t2));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jorphan\reflect\TestFunctor.java",141
567,"'-tryline","@Test public void testClass() throws Exception {
  Test1 t1=new Test1(t1);
  Test1 t1a=new Test1a(t1a);
  Test2 t2=new Test2(t2);
  Functor f1=new Functor(HasName.class,getName);
  assertEquals(t1,f1.invoke(t1));
  assertEquals(1a:t1a.,f1.invoke(t1a));
  assertEquals(t2,f1.invoke(t2));
  try {
    f1.invoke();
    fail(Should have failed);
  }
 catch (  IllegalStateException ok) {
  }
  Functor f2=new Functor(HasString.class,getString);
  assertEquals(xyz,f2.invoke(t2,new String[]{xyz}));
  try {
    f2.invoke(t1,new String[]{xyz});
    fail(Should have failed);
  }
 catch (  JMeterError ok) {
  }
  Functor f3=new Functor(t2,getString);
  assertEquals(xyz,f3.invoke(t2,new Object[]{xyz}));
  Properties p=new Properties();
  p.put(Name,Value);
  Functor fk=new Functor(Map.Entry.class,getKey);
  Functor fv=new Functor(Map.Entry.class,getValue);
  Object o=p.entrySet().iterator().next();
  assertEquals(Name,fk.invoke(o));
  assertEquals(Value,fv.invoke(o));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jorphan\reflect\TestFunctor.java",151
568,"'-tryline","@Test public void testBadParameters() throws Exception {
  try {
    new Functor(null);
    fail(should have generated IllegalArgumentException;);
  }
 catch (  IllegalArgumentException ok) {
  }
  try {
    new Functor(null,new Class[]{});
    fail(should have generated IllegalArgumentException;);
  }
 catch (  IllegalArgumentException ok) {
  }
  try {
    new Functor(null,new Object[]{});
    fail(should have generated IllegalArgumentException;);
  }
 catch (  IllegalArgumentException ok) {
  }
  try {
    new Functor(String.class,null);
    fail(should have generated IllegalArgumentException;);
  }
 catch (  IllegalArgumentException ok) {
  }
  try {
    new Functor(new Object(),null);
    fail(should have generated IllegalArgumentException;);
  }
 catch (  IllegalArgumentException ok) {
  }
  try {
    new Functor(new Object(),null,new Class[]{});
    fail(should have generated IllegalArgumentException;);
  }
 catch (  IllegalArgumentException ok) {
  }
  try {
    new Functor(new Object(),null,new Object[]{});
    fail(should have generated IllegalArgumentException;);
  }
 catch (  IllegalArgumentException ok) {
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jorphan\reflect\TestFunctor.java",186
569,"'-tryline","@Test public void testIllegalState() throws Exception {
  Functor f=new Functor(method);
  try {
    f.invoke();
    fail(should have generated IllegalStateException;);
  }
 catch (  IllegalStateException ok) {
  }
  try {
    f.invoke(new Object[]{});
    fail(should have generated IllegalStateException;);
  }
 catch (  IllegalStateException ok) {
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jorphan\reflect\TestFunctor.java",218
570,"'-tryline","@Override public void testRunFinished(Result result) throws Exception {
  Files.write(Paths.get(unit-test-perf.log),logLines);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jorphan\test\AllTests.java",293
571,"'-tryline","@Test public void test1() throws Exception {
  XMLBuffer xb=new XMLBuffer();
  xb.openTag(start);
  assertEquals(<start></start>\n,xb.toString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jorphan\TestXMLBuffer.java",29
572,"'-tryline","@Test public void test2() throws Exception {
  XMLBuffer xb=new XMLBuffer();
  xb.tag(start,now);
  assertEquals(<start>now</start>\n,xb.toString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jorphan\TestXMLBuffer.java",36
573,"'-tryline","@Test public void test3() throws Exception {
  XMLBuffer xb=new XMLBuffer();
  xb.openTag(abc);
  xb.closeTag(abc);
  assertEquals(<abc></abc>\n,xb.toString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jorphan\TestXMLBuffer.java",42
574,"'-tryline","@Test public void test4() throws Exception {
  XMLBuffer xb=new XMLBuffer();
  xb.openTag(abc);
  try {
    xb.closeTag(abcd);
    fail(Should have caused IllegalArgumentException);
  }
 catch (  IllegalArgumentException e) {
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jorphan\TestXMLBuffer.java",49
575,"'-tryline","@Test public void test() throws Exception {
  runSimpleTests(,zero);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\control\TestSwitchController.java",51
576,"'-tryline","@Test public void test0() throws Exception {
  runSimpleTests(0,zero);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\control\TestSwitchController.java",56
577,"'-tryline","@Test public void test1() throws Exception {
  runSimpleTests(1,one);
  runSimpleTests( 1 ,one);
  runSimpleTests(one,one);
  runSimpleTests(one ,one);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\control\TestSwitchController.java",61
578,"'-tryline","@Test public void test2() throws Exception {
  runSimpleTests(2,two);
  runSimpleTests(two,two);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\control\TestSwitchController.java",69
579,"'-tryline","@Test public void test3() throws Exception {
  runSimpleTests(3,three);
  runSimpleTests(three,three);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\control\TestSwitchController.java",75
580,"'-tryline","@Test public void test4() throws Exception {
  runSimpleTests(4,zero);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\control\TestSwitchController.java",81
581,"'-tryline","@Test public void testX() throws Exception {
  runSimpleTests(X,null);
  runSimpleTest2(X,one,Default);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\control\TestSwitchController.java",86
582,"'-tryline","private void runSimpleTests(String cond,String exp) throws Exception {
  runSimpleTest(cond,exp);
  runSimpleTest2(cond,exp,one);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\control\TestSwitchController.java",92
583,"'-tryline","private void runSimpleTest(String cond,String exp) throws Exception {
  GenericController controller=new GenericController();
  SwitchController switch_cont=new SwitchController();
  switch_cont.setSelection(cond);
  controller.addTestElement(new TestSampler(before));
  controller.addTestElement(switch_cont);
  switch_cont.addTestElement(new TestSampler(zero));
  switch_cont.addTestElement(new TestSampler(one));
  switch_cont.addTestElement(new TestSampler(two));
  switch_cont.addTestElement(new TestSampler(three));
  controller.addTestElement(new TestSampler(after));
  controller.initialize();
  for (int i=1; i <= 3; i++) {
    assertEquals(Loop  + i,before,nextName(controller));
    if (exp != null) {
      assertEquals(Loop  + i,exp,nextName(controller));
    }
    assertEquals(Loop  + i,after,nextName(controller));
    assertNull(nextName(controller));
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\control\TestSwitchController.java",108
584,"'-tryline","private void runSimpleTest2(String cond,String exp,String sub1Name) throws Exception {
  GenericController controller=new GenericController();
  GenericController sub_1=new GenericController();
  GenericController sub_2=new GenericController();
  SwitchController switch_cont=new SwitchController();
  switch_cont.setSelection(cond);
  switch_cont.addTestElement(new TestSampler(zero));
  switch_cont.addTestElement(sub_1);
  sub_1.addTestElement(new TestSampler(one));
  sub_1.setName(sub1Name);
  switch_cont.addTestElement(new TestSampler(two));
  switch_cont.addTestElement(sub_2);
  sub_2.addTestElement(new TestSampler(three));
  sub_2.setName(three);
  controller.addTestElement(new TestSampler(before));
  controller.addTestElement(switch_cont);
  controller.addTestElement(new TestSampler(after));
  controller.initialize();
  for (int i=1; i <= 3; i++) {
    assertEquals(Loop= + i,before,nextName(controller));
    if (exp != null) {
      assertEquals(Loop= + i,exp,nextName(controller));
    }
    assertEquals(Loop= + i,after,nextName(controller));
    assertNull(Loop= + i,nextName(controller));
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\control\TestSwitchController.java",150
585,"'-tryline","@Test public void testTest2() throws Exception {
  runTest2(,new String[]{zero});
  runTest2(0,new String[]{zero});
  runTest2(7,new String[]{zero});
  runTest2(5,new String[]{zero});
  runTest2(4,new String[]{six});
  runTest2(4 ,new String[]{six});
  runTest2(3,new String[]{five});
  runTest2(1,new String[]{one,two});
  runTest2(2,new String[]{three,four});
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\control\TestSwitchController.java",183
586,"'-tryline","private void runTest2(String cond,String[] exp) throws Exception {
  int loops=3;
  LoopController controller=new LoopController();
  controller.setLoops(loops);
  controller.setContinueForever(false);
  GenericController sub_1=new GenericController();
  GenericController sub_2=new GenericController();
  SwitchController switch_cont=new SwitchController();
  switch_cont.setSelection(cond);
  switch_cont.addTestElement(new TestSampler(zero));
  switch_cont.addTestElement(sub_1);
  sub_1.addTestElement(new TestSampler(one));
  sub_1.addTestElement(new TestSampler(two));
  switch_cont.addTestElement(sub_2);
  sub_2.addTestElement(new TestSampler(three));
  sub_2.addTestElement(new TestSampler(four));
  switch_cont.addTestElement(new TestSampler(five));
  switch_cont.addTestElement(new TestSampler(six));
  controller.addTestElement(new TestSampler(before));
  controller.addTestElement(switch_cont);
  controller.addTestElement(new TestSampler(after));
  controller.setRunningVersion(true);
  sub_1.setRunningVersion(true);
  sub_2.setRunningVersion(true);
  switch_cont.setRunningVersion(true);
  controller.initialize();
  for (int i=1; i <= 3; i++) {
    assertEquals(Loop: + i,before,nextName(controller));
    for (    String anExp : exp) {
      assertEquals(Loop: + i,anExp,nextName(controller));
    }
    assertEquals(Loop: + i,after,nextName(controller));
  }
  assertNull(Loops: + loops,nextName(controller));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\control\TestSwitchController.java",214
587,"'-tryline","@Test public void testFunction() throws Exception {
  JMeterContext jmctx=JMeterContextService.getContext();
  Map<String,String> variables=new HashMap<>();
  ReplaceStringWithFunctions transformer=new ReplaceStringWithFunctions(new CompoundVariable(),variables);
  jmctx.setVariables(new JMeterVariables());
  JMeterVariables jmvars=jmctx.getVariables();
  jmvars.put(VAR,100);
  StringProperty prop=new StringProperty(SwitchController.SWITCH_VALUE,${__counter(TRUE,VAR)});
  JMeterProperty newProp=transformer.transformValue(prop);
  newProp.setRunningVersion(true);
  GenericController controller=new GenericController();
  SwitchController switch_cont=new SwitchController();
  switch_cont.setProperty(newProp);
  controller.addTestElement(new TestSampler(before));
  controller.addTestElement(switch_cont);
  switch_cont.addTestElement(new TestSampler(0));
  switch_cont.addTestElement(new TestSampler(1));
  switch_cont.addTestElement(new TestSampler(2));
  switch_cont.addTestElement(new TestSampler(3));
  controller.addTestElement(new TestSampler(after));
  controller.initialize();
  assertEquals(100,jmvars.get(VAR));
  for (int i=1; i <= 3; i++) {
    assertEquals(Loop  + i,before,nextName(controller));
    assertEquals(Loop  + i, + i,nextName(controller));
    assertEquals(Loop  + i, + i,jmvars.get(VAR));
    assertEquals(Loop  + i,after,nextName(controller));
    assertNull(nextName(controller));
  }
  int i=4;
  assertEquals(Loop  + i,before,nextName(controller));
  assertEquals(Loop  + i,0,nextName(controller));
  assertEquals(Loop  + i, + i,jmvars.get(VAR));
  assertEquals(Loop  + i,after,nextName(controller));
  assertNull(nextName(controller));
  assertEquals(4,jmvars.get(VAR));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\control\TestSwitchController.java",259
588,"'-tryline","private static Test suiteFunctions() throws Exception {
  TestSuite suite=new TestSuite(Functions);
  for (  Object item : JMeterTest.getObjects(Function.class)) {
    if (item.getClass().equals(CompoundVariable.class)) {
      continue;
    }
    TestSuite ts=new TestSuite(item.getClass().getName());
    ts.addTest(new ComponentReferenceFunctionTest(runFunction,(Function)item));
    ts.addTest(new ComponentReferenceFunctionTest(runFunction2,(Function)item));
    suite.addTest(ts);
  }
  return suite;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\functions\ComponentReferenceFunctionTest.java",73
589,"'-tryline","public void createFunctionSet() throws Exception {
  funcTitles=new HashMap<>(20);
  String compref=../xdocs/usermanual/functions.xml;
  try (InputStream stream=new FileInputStream(findTestFile(compref))){
    Element body=getBodyFromXMLDocument(stream);
    Element section=(Element)body.getElementsByTagName(section).item(0);
    NodeList subSections=section.getElementsByTagName(subsection);
    for (int i=0; i < subSections.getLength(); i++) {
      NodeList components=((Element)subSections.item(i)).getElementsByTagName(component);
      for (int j=0; j < components.getLength(); j++) {
        org.w3c.dom.Element comp=(org.w3c.dom.Element)components.item(j);
        funcTitles.put(comp.getAttribute(name),Boolean.FALSE);
        String tag=comp.getAttribute(tag);
        if (!StringUtils.isEmpty(tag)) {
          funcTitles.put(tag,Boolean.FALSE);
        }
      }
    }
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\functions\ComponentReferenceFunctionTest.java",102
590,"'-tryline","public void checkFunctionSet() throws Exception {
  assertEquals(Should not have any names left over,0,JMeterTest.scanprintMap(funcTitles,Function));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\functions\ComponentReferenceFunctionTest.java",124
591,"'-tryline","public void runFunction() throws Exception {
  if (funcTitles.size() > 0) {
    String title=funcItem.getReferenceKey();
    boolean ct=funcTitles.containsKey(title);
    if (ct) {
      funcTitles.put(title,Boolean.TRUE);
    }
    if (!title.contains((ALPHA) && !title.contains((EXPERIMENTAL)) {
      String s=functions.xml needs ' + title + ' entry for + funcItem.getClass().getName();
      if (!ct) {
        log.warn(s);
      }
      assertTrue(s,ct);
    }
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\functions\ComponentReferenceFunctionTest.java",131
592,"'-tryline","public void runFunction2() throws Exception {
  for (  Object o : funcItem.getArgumentDesc()) {
    assertTrue(Description must be a String,o instanceof String);
    assertFalse(Description must not start with [refkey,((String)o).startsWith([refkey));
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\functions\ComponentReferenceFunctionTest.java",153
593,"'-tryline","public static Test suite() throws Exception {
  TestSuite suite=new TestSuite(ComponentReferenceFunctionTest);
  suite.addTest(new ComponentReferenceFunctionTest(createFunctionSet));
  suite.addTest(suiteFunctions());
  suite.addTest(new ComponentReferenceFunctionTest(checkFunctionSet));
  return suite;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\functions\ComponentReferenceFunctionTest.java",163
594,"'-tryline","public void checkTestFile() throws Exception {
  HashTree tree=null;
  try {
    tree=getTree(testFile);
  }
 catch (  Exception e) {
    fail(parent + :  + testFile.getName()+  caused + e);
  }
  assertTree(tree);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\gui\action\TestLoad.java",96
595,"'-tryline","private void assertTree(HashTree tree) throws Exception {
  assertNotNull(parent + :  + testFile.getName()+  caused null tree: ,tree);
  final Object object=tree.getArray()[0];
  final String name=testFile.getName();
  if (!(object instanceof org.apache.jmeter.testelement.TestPlan) && !notTestPlan.contains(name)) {
    fail(parent + :  + name+  tree should be TestPlan, but is + object.getClass().getName());
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\gui\action\TestLoad.java",106
596,"'-tryline","private HashTree getTree(File f) throws Exception {
  HashTree tree=SaveService.loadTree(f);
  return tree;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\gui\action\TestLoad.java",116
597,"'-tryline","public static Test suite() throws Exception {
  TestSuite suite=new TestSuite(JMeterTest);
  JMeterUtils.setLocale(TEST_LOCALE);
  Locale.setDefault(TEST_LOCALE);
  suite.addTest(new JMeterTest(readAliases));
  suite.addTest(new JMeterTest(createTitleSet));
  suite.addTest(new JMeterTest(createTagSet));
  suite.addTest(suiteGUIComponents());
  suite.addTest(suiteSerializableElements());
  suite.addTest(suiteBeanComponents());
  suite.addTest(new JMeterTest(checkGuiSet));
  suite.addTest(new JMeterTest(resetLocale));
  return suite;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\junit\JMeterTest.java",137
598,"'-tryline","public void createTitleSet() throws Exception {
  guiTitles=new HashMap<>(90);
  String compref=../xdocs/usermanual/component_reference.xml;
  try (InputStream stream=new FileInputStream(findTestFile(compref))){
    org.w3c.dom.Element body=getBodyFromXMLDocument(stream);
    NodeList sections=body.getElementsByTagName(section);
    for (int i=0; i < sections.getLength(); i++) {
      org.w3c.dom.Element section=(org.w3c.dom.Element)sections.item(i);
      NodeList components=section.getElementsByTagName(component);
      for (int j=0; j < components.getLength(); j++) {
        org.w3c.dom.Element comp=(org.w3c.dom.Element)components.item(j);
        String nm=comp.getAttribute(name);
        if (!nm.equals(SSL Manager)) {
          guiTitles.put(nm.replace(' ','_'),Boolean.FALSE);
        }
      }
    }
  }
   guiTitles.put(Example Sampler,Boolean.FALSE);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\junit\JMeterTest.java",166
599,"'-tryline","public void createTagSet() throws Exception {
  guiTags=new HashMap<>(90);
  String compref=../xdocs/usermanual/component_reference.xml;
  try (InputStream stream=new FileInputStream(findTestFile(compref))){
    org.w3c.dom.Element body=getBodyFromXMLDocument(stream);
    NodeList sections=body.getElementsByTagName(section);
    for (int i=0; i < sections.getLength(); i++) {
      org.w3c.dom.Element section=(org.w3c.dom.Element)sections.item(i);
      NodeList components=section.getElementsByTagName(component);
      for (int j=0; j < components.getLength(); j++) {
        org.w3c.dom.Element comp=(org.w3c.dom.Element)components.item(j);
        String tag=comp.getAttribute(tag);
        if (!StringUtils.isEmpty(tag)) {
          guiTags.put(tag,Boolean.FALSE);
        }
      }
    }
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\junit\JMeterTest.java",212
600,"'-tryline","public void checkGuiSet() throws Exception {
  guiTitles.remove(Example Sampler);
  guiTitles.remove(Sample_Result_Save_Configuration);
  assertEquals(Should not have any names left over, check name of components in EN (default) Locale,  + which must match name attribute of component, check java.awt.HeadlessException errors before, we are running with '-Djava.awt.headless= + System.getProperty(java.awt.headless) + ',0,scanprintMap(guiTitles,GUI));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\junit\JMeterTest.java",256
601,"'-tryline","private static Test suiteGUIComponents() throws Exception {
  TestSuite suite=new TestSuite(GuiComponents);
  for (  Object o : getObjects(JMeterGUIComponent.class)) {
    JMeterGUIComponent item=(JMeterGUIComponent)o;
    if (item instanceof JMeterTreeNode) {
      System.out.println(o.a.j.junit.JMeterTest INFO: JMeterGUIComponent: skipping all tests   + item.getClass().getName());
      continue;
    }
    if (item instanceof ObsoleteGui) {
      continue;
    }
    TestSuite ts=new TestSuite(item.getClass().getName());
    ts.addTest(new JMeterTest(GUIComponents1,item));
    if (item instanceof TestBeanGUI) {
      System.out.println(o.a.j.junit.JMeterTest INFO: JMeterGUIComponent: skipping some tests  + item.getClass().getName());
    }
 else {
      ts.addTest(new JMeterTest(GUIComponents2,item));
      ts.addTest(new JMeterTest(runGUITitle,item));
    }
    suite.addTest(ts);
  }
  return suite;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\junit\JMeterTest.java",269
602,"'-tryline","private static Test suiteBeanComponents() throws Exception {
  TestSuite suite=new TestSuite(BeanComponents);
  for (  Object o : getObjects(TestBean.class)) {
    Class<?> c=o.getClass();
    try {
      JMeterGUIComponent item=new TestBeanGUI(c);
      TestSuite ts=new TestSuite(item.getClass().getName());
      ts.addTest(new JMeterTest(GUIComponents2,item));
      ts.addTest(new JMeterTest(runGUITitle,item));
      suite.addTest(ts);
    }
 catch (    IllegalArgumentException e) {
      System.out.println(o.a.j.junit.JMeterTest Cannot create test for  + c.getName() +  + e);
      e.printStackTrace(System.out);
    }
  }
  return suite;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\junit\JMeterTest.java",297
603,"'-tryline","public void runGUITitle() throws Exception {
  if (guiTitles.size() > 0) {
    String title=guiItem.getDocAnchor();
    boolean ct=guiTitles.containsKey(title);
    if (ct) {
      guiTitles.put(title,Boolean.TRUE);
    }
    String name=guiItem.getClass().getName();
    if (title != null && title.length() > 0 && !title.toUpperCase(Locale.ENGLISH).contains((ALPHA) && !title.toUpperCase(Locale.ENGLISH).contains((BETA) && !title.toUpperCase(Locale.ENGLISH).contains((DEPRECATED) && !title.matches(Example\\d+) && !name.startsWith(org.apache.jmeter.examples.)) {
      String s=component_reference.xml needs ' + title + ' anchor for + name;
      if (!ct) {
        log.warn(s);
      }
      assertTrue(s,ct);
    }
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\junit\JMeterTest.java",318
604,"'-tryline","public void GUIComponents1() throws Exception {
  String name=guiItem.getClass().getName();
  assertEquals(Name should be same as static label for  + name,guiItem.getStaticLabel(),guiItem.getName());
  if (name.startsWith(org.apache.jmeter.examples.)) {
    return;
  }
  if (!name.endsWith(TestBeanGUI)) {
    try {
      String label=guiItem.getLabelResource();
      assertNotNull(Label should not be null for  + name,label);
      assertTrue(Label should not be empty for  + name,label.length() > 0);
      assertFalse(' + label + ' should be in resource file for + name,JMeterUtils.getResString(label).startsWith(JMeterUtils.RES_KEY_PFX));
    }
 catch (    UnsupportedOperationException uoe) {
      log.warn(Class has not yet implemented getLabelResource {},name);
    }
  }
  checkElementAlias(guiItem);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\junit\JMeterTest.java",346
605,"'-tryline","public void GUIComponents2() throws Exception {
  String name=guiItem.getClass().getName();
  TestElement el=guiItem.createTestElement();
  assertNotNull(name + .createTestElement should be non-null ,el);
  assertEquals(GUI-CLASS: Failed on  + name,name,el.getPropertyAsString(TestElement.GUI_CLASS));
  assertEquals(NAME: Failed on  + name,guiItem.getName(),el.getName());
  assertEquals(TEST-CLASS: Failed on  + name,el.getClass().getName(),el.getPropertyAsString(TestElement.TEST_CLASS));
  TestElement el2=guiItem.createTestElement();
  el.setName(hey, new name!:);
  el.setProperty(NOT,Shouldn't be here);
  if (!(guiItem instanceof UnsharedComponent)) {
    assertEquals(SHARED: Failed on  + name,,el2.getPropertyAsString(NOT));
  }
  log.debug(Saving element: {},el.getClass());
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  SaveService.saveElement(el,bos);
  ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());
  bos.close();
  el=(TestElement)SaveService.loadElement(bis);
  bis.close();
  assertNotNull(Load element failed on:  + name,el);
  guiItem.configure(el);
  assertEquals(CONFIGURE-TEST: Failed on  + name,el.getName(),guiItem.getName());
  guiItem.modifyTestElement(el2);
  assertEquals(Modify Test: Failed on  + name,hey, new name!:,el2.getName());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\junit\JMeterTest.java",370
606,"'-tryline","private static Test suiteSerializableElements() throws Exception {
  TestSuite suite=new TestSuite(SerializableElements);
  for (  Object o : getObjects(Serializable.class)) {
    Serializable serObj=(Serializable)o;
    if (serObj.getClass().getName().endsWith(_Stub)) {
      continue;
    }
    TestSuite ts=new TestSuite(serObj.getClass().getName());
    ts.addTest(new JMeterTest(runSerialTest,serObj));
    suite.addTest(ts);
  }
  return suite;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\junit\JMeterTest.java",405
607,"'-tryline","public void runSerialTest() throws Exception {
  if (!(serObj instanceof Component)) {
    try {
      ByteArrayOutputStream bytes=new ByteArrayOutputStream();
      ObjectOutputStream out=new ObjectOutputStream(bytes);
      out.writeObject(serObj);
      out.close();
      ObjectInputStream in=new ObjectInputStream(new ByteArrayInputStream(bytes.toByteArray()));
      Object readObject=in.readObject();
      in.close();
      assertEquals(deserializing class:  + serObj.getClass().getName(),serObj.getClass(),readObject.getClass());
    }
 catch (    Exception e) {
      fail(serialization of  + serObj.getClass().getName() +  failed: + e);
    }
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\junit\JMeterTest.java",422
608,"'-tryline","public void readAliases() throws Exception {
  nameMap=SaveService.loadProperties();
  assertNotNull(SaveService nameMap (saveservice.properties) should not be null,nameMap);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\junit\JMeterTest.java",441
609,"'-tryline","public static Collection<Object> getObjects(Class<?> extendsClass) throws Exception {
  String exName=extendsClass.getName();
  Object myThis=;
  Iterator<String> classes=ClassFinder.findClassesThatExtend(JMeterUtils.getSearchPaths(),new Class[]{extendsClass}).iterator();
  List<Object> objects=new LinkedList<>();
  String n=;
  boolean caughtError=true;
  Throwable caught=null;
  try {
    while (classes.hasNext()) {
      n=classes.next();
      if (n.endsWith(RemoteJMeterEngineImpl)) {
        continue;
      }
      if (n.endsWith(RemoteSampleListenerImpl)) {
        continue;
      }
      caught=instantiateClass(exName,myThis,objects,n,caught);
    }
    caughtError=false;
  }
  finally {
    if (caughtError) {
      System.out.println(Last class= + n);
      System.out.println(objects.size= + objects.size());
      System.out.println(Last error= + caught);
    }
  }
  if (objects.isEmpty()) {
    System.out.println(No classes found that extend  + exName + . Check the following:);
    System.out.println(Search paths are:);
    String[] ss=JMeterUtils.getSearchPaths();
    for (    String s : ss) {
      System.out.println(s);
    }
    if (!classPathShown) {
      System.out.println(Class path is:);
      String cp=System.getProperty(java.class.path);
      String[] classPathElements=JOrphanUtils.split(cp,java.io.File.pathSeparator);
      for (      String classPathElement : classPathElements) {
        System.out.println(classPathElement);
      }
      classPathShown=true;
    }
  }
  return objects;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\junit\JMeterTest.java",454
610,"'-tryline","private static Throwable instantiateClass(final String extendsClassName,final Object myThis,final List<Object> objects,final String className,final Throwable oldCaught) throws Exception {
  Throwable caught=oldCaught;
  try {
    Class<?> c=Class.forName(className);
    try {
      objects.add(c.getDeclaredConstructor().newInstance());
    }
 catch (    InstantiationException|NoSuchMethodException|IllegalAccessException|InvocationTargetException e) {
      caught=e;
      try {
        objects.add(c.getConstructor(new Class[]{Object.class}).newInstance(new Object[]{myThis}));
      }
 catch (      NoSuchMethodException f) {
        if (!Enum.class.isAssignableFrom(c)) {
          System.out.println(o.a.j.junit.JMeterTest WARN:  + extendsClassName + : NoSuchMethodException  + className+ , missing empty Constructor or Constructor with Object parameter);
        }
      }
    }
  }
 catch (  NoClassDefFoundError e) {
    System.out.println(o.a.j.junit.JMeterTest WARN:  + extendsClassName + : NoClassDefFoundError + className+ :+ e.getMessage());
    e.printStackTrace(System.out);
  }
catch (  IllegalAccessException e) {
    caught=e;
    System.out.println(o.a.j.junit.JMeterTest WARN:  + extendsClassName + : IllegalAccessException + className+ :+ e.getMessage());
    e.printStackTrace(System.out);
  }
catch (  HeadlessException|ExceptionInInitializerError e) {
    caught=e;
    System.out.println(o.a.j.junit.JMeterTest Error creating  + className +  + e.toString());
  }
catch (  Exception e) {
    caught=e;
    if (e instanceof RemoteException) {
      System.out.println(o.a.j.junit.JMeterTest WARN:  + Error creating  + className +  + e.toString());
    }
 else {
      throw new Exception(Error creating  + className,e);
    }
  }
  return caught;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\junit\JMeterTest.java",505
611,"'-tryline","@Test public void testUserProperties() throws Exception {
  Properties props=loadProps(new File(JMeterUtils.getJMeterBinDir(),user.properties));
  assertTrue(user.properties should not contain any enabled properties,props.isEmpty());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\resources\TestPropertiesFiles.java",34
612,"'-tryline","@Test public void testDefaultProperties() throws Exception {
  Properties jmeter=loadProps(new File(JMeterUtils.getJMeterBinDir(),jmeter.properties));
  Properties report=loadProps(new File(JMeterUtils.getJMeterBinDir(),reportgenerator.properties));
  Enumeration<?> jmeterNames=jmeter.propertyNames();
  while (jmeterNames.hasMoreElements()) {
    final Object key=jmeterNames.nextElement();
    assertFalse(reportgenerator should not contain the jmeter key  + key,report.containsKey(key));
  }
  Enumeration<?> reportNames=report.propertyNames();
  while (reportNames.hasMoreElements()) {
    final Object key=reportNames.nextElement();
    assertFalse(jmeter should not contain the reportgenerator key  + key,jmeter.containsKey(key));
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\resources\TestPropertiesFiles.java",41
613,"'-tryline","private static Properties loadProps(File file) throws Exception {
  Properties props=new Properties();
  try (FileInputStream inStream=new FileInputStream(file)){
    props.load(inStream);
  }
   return props;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\resources\TestPropertiesFiles.java",57
614,"'-tryline","@Test public void testLoadAndSave() throws Exception {
  boolean failed=false;
  for (  final String fileName : FILES) {
    final File testFile=findTestFile(testfiles/ + fileName);
    final File savedFile=findTestFile(testfiles/Saved + fileName);
    failed|=loadAndSave(testFile,fileName,true,savedFile);
  }
  for (  final String fileName : FILES_LINES) {
    final File testFile=findTestFile(testfiles/ + fileName);
    final File savedFile=findTestFile(testfiles/Saved + fileName);
    failed|=loadAndSave(testFile,fileName,false,savedFile);
  }
  if (failed) {
    fail(One or more failures detected);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\save\TestSaveService.java",100
615,"'-tryline","private boolean loadAndSave(File testFile,String fileName,boolean checkSize,File savedFile) throws Exception {
  boolean failed=false;
  final FileStats origStats=getFileStats(testFile);
  final FileStats savedStats=getFileStats(savedFile);
  ByteArrayOutputStream out=new ByteArrayOutputStream(1000000);
  try {
    HashTree tree=SaveService.loadTree(testFile);
    SaveService.saveTree(tree,out);
  }
  finally {
    out.close();
  }
  final FileStats compareStats=savedStats == FileStats.NO_STATS ? origStats : savedStats;
  final FileStats outputStats;
  try (ByteArrayInputStream ins=new ByteArrayInputStream(out.toByteArray());Reader insReader=new InputStreamReader(ins);BufferedReader bufferedReader=new BufferedReader(insReader)){
    outputStats=computeFileStats(bufferedReader);
  }
   if (checkSize && !compareStats.isSameSize(outputStats) || !compareStats.hasSameLinesCount(outputStats)) {
    failed=true;
    System.out.println();
    System.out.println(Loading file testfiles/ + fileName +  and + saving it back changes its size from + compareStats.size+  to + outputStats.size+ .);
    if (!origStats.hasSameLinesCount(outputStats)) {
      System.out.println(Number of lines changes from  + compareStats.lines +  to + outputStats.lines);
    }
    if (saveOut) {
      final File outFile=findTestFile(testfiles/ + fileName + .out);
      System.out.println(Write  + outFile);
      try (FileOutputStream outf=new FileOutputStream(outFile)){
        outf.write(out.toByteArray());
      }
       System.out.println(Wrote  + outFile);
    }
  }
  return failed;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\save\TestSaveService.java",120
616,"'-tryline","@Test public void testLoad() throws Exception {
  for (  String fileName : FILES_LOAD_ONLY) {
    File file=findTestFile(testfiles/ + fileName);
    try {
      HashTree tree=SaveService.loadTree(file);
      assertNotNull(tree);
    }
 catch (    IllegalArgumentException ex) {
      ex.addSuppressed(new Throwable(fileName= + file.getAbsolutePath()));
      throw ex;
    }
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\save\TestSaveService.java",202
617,"'-tryline","public static Test suite() throws Exception {
  TestSuite suite=new TestSuite(Bean Resource Test Suite);
  List<String> testBeanClassNames=ClassFinder.findClassesThatExtend(JMeterUtils.getSearchPaths(),new Class[]{TestBean.class});
  boolean errorDetected=false;
  JMeterUtils.setLocale(defaultLocale);
  String defaultLocaleId=defaultLocale.toString();
  for (  String className : testBeanClassNames) {
    Class<?> testBeanClass=Class.forName(className);
    ResourceBundle defaultBundle;
    try {
      defaultBundle=(ResourceBundle)Introspector.getBeanInfo(testBeanClass).getBeanDescriptor().getValue(GenericTestBeanCustomizer.RESOURCE_BUNDLE);
    }
 catch (    IntrospectionException e) {
      log.error(Can't get beanInfo for {},testBeanClass,e);
      throw new Error(e.toString(),e);
    }
    if (defaultBundle == null) {
      if (className.startsWith(org.apache.jmeter.examples.)) {
        log.info(No default bundle found for {},className);
        continue;
      }
      errorDetected=true;
      log.error(No default bundle found for {} using {},className,defaultLocale);
      continue;
    }
    suite.addTest(new PackageTest(testBeanClass,defaultLocale,defaultBundle));
    String[] languages=JMeterMenuBar.getLanguages();
    for (    String lang : languages) {
      final String[] language=lang.split(_);
      if (language.length == 1) {
        Locale locale=new Locale(language[0]);
        if (locale.toString().equals(defaultLocaleId)) {
          continue;
        }
        suite.addTest(new PackageTest(testBeanClass,locale,defaultBundle));
      }
 else       if (language.length == 2) {
        Locale locale=new Locale(language[0],language[1]);
        if (locale.toString().equals(defaultLocaleId)) {
          continue;
        }
        suite.addTest(new PackageTest(testBeanClass,locale,defaultBundle));
      }
    }
  }
  if (errorDetected) {
    suite.addTest(new PackageTest(errorDetected));
  }
  return suite;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\testbeans\gui\PackageTest.java",171
618,"'-tryline","public static Test suite() throws Exception {
  TestSuite suite=new TestSuite(TestElements);
  for (  Object o : JMeterTest.getObjects(TestElement.class)) {
    TestElement item=(TestElement)o;
    suite.addTest(new TestElementTest(runTestElement,item));
  }
  return suite;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\testelement\TestElementTest.java",52
619,"'-tryline","public void runTestElement() throws Exception {
  checkElementCloning(testItem);
  String name=testItem.getClass().getName();
  assertTrue(name +  must implement Serializable,testItem instanceof Serializable);
  if (name.startsWith(org.apache.jmeter.examples.)) {
    return;
  }
  if (name.equals(org.apache.jmeter.control.TransactionSampler)) {
    return;
  }
  checkElementAlias(testItem);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\testelement\TestElementTest.java",64
620,"'-tryline","private String getJMeterHome() throws Exception {
  JMeterTestUtils.setupJMeterHome();
  String path=JMeterUtils.getJMeterHome() + /lib;
  return Paths.get(path).toRealPath().toString();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jorphan\reflect\TestClassFinder.java",38
621,"'-tryline","@BeforeEach public void setUp() throws Exception {
  libDirs=new String[]{getJMeterHome()};
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jorphan\reflect\TestClassFinder.java",44
622,"'-tryline","@Test public void testFindClassesThatExtendStringArrayClassOfQArrayTrue() throws Exception {
  List<String> findClassesThatExtend=ClassFinder.findClassesThatExtend(libDirs,new Class<?>[]{Object.class},true);
  Assert.assertFalse(findClassesThatExtend.stream().filter(s -> s.contains($)).collect(Collectors.toList()).isEmpty());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jorphan\reflect\TestClassFinder.java",57
623,"'-tryline","@Test public void testFindClassesThatExtendStringArrayClassOfQArrayFalse() throws Exception {
  List<String> findClassesThatExtend=ClassFinder.findClassesThatExtend(libDirs,new Class<?>[]{Exception.class},false);
  Assert.assertTrue(findClassesThatExtend.stream().filter(s -> s.contains($)).collect(Collectors.toList()).isEmpty());
  MatcherAssert.assertThat(findClassesThatExtend,CoreMatchers.hasItem(LoggingException.class.getName()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jorphan\reflect\TestClassFinder.java",67
624,"'-tryline","@Test public void testFindClassesThatExtendStringArrayClassOfQArrayBooleanStringString() throws Exception {
  List<String> findClassesThatExtend=ClassFinder.findClassesThatExtend(libDirs,new Class<?>[]{Exception.class},false,org.apache.log,core);
  Assert.assertTrue(findClassesThatExtend.stream().filter(s -> s.contains(core)).collect(Collectors.toList()).isEmpty());
  Assert.assertFalse(findClassesThatExtend.isEmpty());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jorphan\reflect\TestClassFinder.java",78
625,"'-tryline","@Test public void testFindClassesThatExtendStringArrayClassOfQArrayBooleanStringStringTrue() throws Exception {
  List<String> annotatedClasses=ClassFinder.findClassesThatExtend(libDirs,new Class<?>[]{java.beans.Transient.class},false,null,null,true);
  Assert.assertFalse(annotatedClasses.isEmpty());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jorphan\reflect\TestClassFinder.java",91
626,"'-tryline","@Test public void testFindAnnotatedClasses() throws Exception {
  @SuppressWarnings(unchecked) List<String> annotatedClasses=ClassFinder.findAnnotatedClasses(libDirs,new Class[]{java.beans.Transient.class});
  Assert.assertFalse(annotatedClasses.isEmpty());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jorphan\reflect\TestClassFinder.java",103
627,"'-tryline","@Test public void testFindAnnotatedInnerClasses() throws Exception {
  @SuppressWarnings(unchecked) List<String> annotatedClasses=ClassFinder.findAnnotatedClasses(libDirs,new Class[]{java.lang.Deprecated.class},true);
  Assert.assertTrue(annotatedClasses.stream().anyMatch(s -> s.contains($)));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jorphan\reflect\TestClassFinder.java",112
628,"'-tryline","@Test @SuppressWarnings(deprecation) public void testSummaryReport() throws Exception {
  assertTrue(SummaryReport Functor,SummaryReport.testFunctors());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jorphan\TestFunctorUsers.java",35
629,"'-tryline","@Test public void testTableVisualizer() throws Exception {
  assertTrue(TableVisualizer Functor,TableVisualizer.testFunctors());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jorphan\TestFunctorUsers.java",41
630,"'-tryline","@Test public void testStatGraphVisualizer() throws Exception {
  assertTrue(StatGraphVisualizer Functor,StatGraphVisualizer.testFunctors());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jorphan\TestFunctorUsers.java",46
631,"'-tryline","@Test @SuppressWarnings(deprecation) public void testStatVisualizer() throws Exception {
  assertTrue(StatVisualizer Functor,StatVisualizer.testFunctors());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jorphan\TestFunctorUsers.java",51
632,"'-tryline","@Test public void testArgumentsPanel() throws Exception {
  assertTrue(ArgumentsPanel Functor,ArgumentsPanel.testFunctors());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jorphan\TestFunctorUsers.java",57
633,"'-tryline","@Test public void testHTTPArgumentsPanel() throws Exception {
  assertTrue(HTTPArgumentsPanel Functor,HTTPArgumentsPanel.testFunctors());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jorphan\TestFunctorUsers.java",62
634,"'-tryline","@Test public void testLDAPArgumentsPanel() throws Exception {
  assertTrue(LDAPArgumentsPanel Functor,LDAPArgumentsPanel.testFunctors());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jorphan\TestFunctorUsers.java",67
635,"'-tryline","private CSVRead createCsvRead(String fileName,String column) throws Exception {
  CSVRead cr=new CSVRead();
  cr.setParameters(FunctionTestHelper.makeParams(fileName,column));
  return cr;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\CSVReadFunctionTest.java",55
636,"'-tryline","@Test void concurrentRequestsToSameCsv() throws Exception {
  CSVRead a=createCsvRead(csvFilePath,1);
  CSVRead b=createCsvRead(csvFilePath,next);
  final Synchronizer sync=new Synchronizer();
synchronized (sync) {
    Future<Void> thread2=CompletableFuture.runAsync(() -> {
synchronized (sync) {
        try {
          eq(a,b3);
          eq(b,);
          sync.pass();
          eq(a,b1);
          eq(b,);
          eq(a,b2);
          sync.pass();
          eq(b,);
          eq(a,b4);
          sync.done();
        }
 catch (        Throwable e) {
          throw sync.failure(e,thread2);
        }
      }
    }
);
    eq(a,b1);
    eq(b,);
    eq(a,b2);
    sync.pass();
    eq(b,);
    eq(a,b4);
    eq(b,);
    sync.pass();
    eq(a,b3);
    eq(b,);
    sync.pass();
    thread2.get();
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\CSVReadFunctionTest.java",65
637,"'-tryline","@Test public void testCSVParamsFail() throws Exception {
  assertThrows(InvalidVariableException.class,() -> createCsvRead(null,null));
  assertThrows(InvalidVariableException.class,() -> createCsvRead(,null));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\CSVReadFunctionTest.java",119
638,"'-tryline","@Test public void testCSVNoFile() throws Exception {
  CSVRead cr1=createCsvRead(does/not-exist.csv,1);
  log.info(Expecting file not found);
  eq(cr1,);
  CSVRead cr2=createCsvRead(does/not-exist.csv,next);
  log.info(Expecting no entry for file);
  eq(cr2,);
  CSVRead cr3=createCsvRead(does/not-exist.csv,*ABC);
  log.info(Expecting file not found);
  eq(cr3,);
  CSVRead cr4=createCsvRead(*ABC,1);
  log.info(Expecting cannot open file);
  eq(cr4,);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\CSVReadFunctionTest.java",125
639,"'-tryline","@Test public void testCSValias() throws Exception {
  CSVRead cr1=createCsvRead(csvFilePath,*A);
  CSVRead cr2=createCsvRead(*A,1);
  CSVRead cr3=createCsvRead(*A,next);
  CSVRead cr4=createCsvRead(csvFilePath,*B);
  CSVRead cr5=createCsvRead(*B,2);
  CSVRead cr6=createCsvRead(*B,next);
  eq(cr1,);
  eq(cr2,b1);
  eq(cr4,);
  eq(cr5,c1);
  eq(cr3,);
  eq(cr2,b2);
  eq(cr5,c1);
  eq(cr6,);
  eq(cr5,c2);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\CSVReadFunctionTest.java",145
640,"'-tryline","@Test public void CSVBlankLine(@TempDir Path tmp) throws Exception {
  String fileName=Files.write(tmp.resolve(blank.csv),Arrays.asList(a1,b1,c1,d1,a2,b2,c2,d2,,,The previous line is blank, and should be treated as EOF)).toString();
  CSVRead csv1=createCsvRead(fileName,1);
  CSVRead csv2=createCsvRead(fileName,next);
  for (int i=1; i <= 2; i++) {
    eq(csv1,b1);
    eq(csv2,);
    eq(csv1,b2);
    eq(csv2,);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\CSVReadFunctionTest.java",167
641,"'-tryline","@Test public void CSVRun() throws Exception {
  CSVRead cr1=createCsvRead(csvFilePath,1);
  CSVRead cr2=createCsvRead(csvFilePath,2);
  CSVRead cr3=createCsvRead(csvFilePath,3);
  CSVRead cr4=createCsvRead(csvFilePath,next);
  CSVRead cr5=createCsvRead(,0);
  CSVRead cr6=createCsvRead(,next);
  eq(cr1,b1);
  eq(cr2,c1);
  eq(cr3,d1);
  eq(cr4,);
  eq(cr1,b2);
  eq(cr2,c2);
  eq(cr3,d2);
  eq(cr4,);
  eq(cr1,b3);
  eq(cr2,c3);
  eq(cr3,d3);
  eq(cr4,);
  eq(cr1,b4);
  eq(cr2,c4);
  eq(cr3,d4);
  eq(cr4,);
  eq(cr1,b1);
  eq(cr2,c1);
  eq(cr3,d1);
  eq(cr5,a1);
  eq(cr6,);
  eq(cr5,a2);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\CSVReadFunctionTest.java",188
642,"'-tryline","@Test public void evalTest1() throws Exception {
  EvalFunction eval=new EvalFunction();
  vars.put(query,select ${column} from ${table});
  vars.put(column,name);
  vars.put(table,customers);
  Collection<CompoundVariable> parms;
  String s;
  parms=makeParams(${query},null,null);
  eval.setParameters(parms);
  s=eval.execute(null,null);
  assertEquals(select name from customers,s);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\EvalFunctionTest.java",45
643,"'-tryline","@Test public void evalTest2() throws Exception {
  EvalVarFunction evalVar=new EvalVarFunction();
  vars.put(query,select ${column} from ${table});
  vars.put(column,name);
  vars.put(table,customers);
  Collection<CompoundVariable> parms;
  String s;
  parms=makeParams(query,null,null);
  evalVar.setParameters(parms);
  s=evalVar.execute(null,null);
  assertEquals(select name from customers,s);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\EvalFunctionTest.java",60
644,"'-tryline","private static BeanShell BSHFParams(String p1,String p2,String p3) throws Exception {
  BeanShell bsh=new BeanShell();
  bsh.setParameters(makeParams(p1,p2,p3));
  return bsh;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\PackageTest.java",48
645,"'-tryline","public static Test suite() throws Exception {
  TestSuite allsuites=new TestSuite(Function PackageTest);
  if (!BeanShellInterpreter.isInterpreterPresent()) {
    final String msg=BeanShell jar not present, tests ignored;
    log.warn(msg);
  }
 else {
    TestSuite bsh=new TestSuite(BeanShell);
    bsh.addTest(new PackageTest(BSH1));
    allsuites.addTest(bsh);
  }
  TestSuite xpath=new TestSuite(XPath);
  xpath.addTest(new PackageTest(XPathtestColumns));
  xpath.addTest(new PackageTest(XPathtestDefault));
  xpath.addTest(new PackageTest(XPathtestNull));
  xpath.addTest(new PackageTest(XPathtestrowNum));
  xpath.addTest(new PackageTest(XPathEmpty));
  xpath.addTest(new PackageTest(XPathFile));
  xpath.addTest(new PackageTest(XPathFile1));
  xpath.addTest(new PackageTest(XPathFile2));
  xpath.addTest(new PackageTest(XPathNoFile));
  allsuites.addTest(xpath);
  return allsuites;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\PackageTest.java",54
646,"'-tryline","public void BSH1() throws Exception {
  String fn=src/test/resources/org/apache/jmeter/functions/testfiles/BeanShellTest.bsh;
  try {
    BSHFParams(null,null,null);
    fail(Expected InvalidVariableException);
  }
 catch (  InvalidVariableException e) {
  }
  try {
    BSHFParams(,,);
    fail(Expected InvalidVariableException);
  }
 catch (  InvalidVariableException e) {
  }
  BeanShell bsh;
  try {
    bsh=BSHFParams(,,null);
    assertEquals(,bsh.execute());
  }
 catch (  InvalidVariableException e) {
    fail(BeanShell not present);
  }
  bsh=BSHFParams(1,null,null);
  assertEquals(1,bsh.execute());
  bsh=BSHFParams(1+1,VAR,null);
  assertEquals(2,bsh.execute());
  assertEquals(2,vars.get(VAR));
  bsh=BSHFParams(return threadName,null,null);
  assertEquals(Thread.currentThread().getName(),bsh.execute());
  bsh=BSHFParams(return log.getClass().getName(),null,null);
  assertEquals(log.getClass().getName(),bsh.execute());
  bsh=BSHFParams(source (\ + fn + \),null,null);
  assertEquals(9876,bsh.execute());
  bsh=BSHFParams(${SCR1},null,null);
  vars.put(SCR1,var1=11);
  assertEquals(11,bsh.execute());
  vars.put(SCR1,var2=22);
  assertEquals(22,bsh.execute());
  vars.put(SCR1,x=var1);
  assertEquals(11,bsh.execute());
  vars.put(SCR1,++x);
  assertEquals(12,bsh.execute());
  vars.put(VAR1,test);
  vars.put(SCR1,vars.get(\VAR1\));
  assertEquals(test,bsh.execute());
  JMeterUtils.getJMeterProperties().setProperty(BeanShell.INIT_FILE,fn);
  bsh=BSHFParams(${SCR2},null,null);
  vars.put(SCR2,getprop(\ + BeanShell.INIT_FILE + \));
  assertEquals(fn,bsh.execute());
  vars.put(SCR2,getprop(\avavaav\,\default\));
  assertEquals(default,bsh.execute());
  vars.put(SCR2,++i);
  assertEquals(1,bsh.execute());
  vars.put(SCR2,++i);
  assertEquals(2,bsh.execute());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\PackageTest.java",96
647,"'-tryline","public void XPathtestNull() throws Exception {
  try {
    new XPathFileContainer(nosuch.xml,/);
    fail(Should not find the file);
  }
 catch (  FileNotFoundException e) {
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\PackageTest.java",189
648,"'-tryline","public void XPathtestrowNum() throws Exception {
  XPathFileContainer f=new XPathFileContainer(getResourceFilePath(xpathfilecontainer.xml),/project/target/@name);
  assertNotNull(f);
  int myRow=f.nextRow();
  assertEquals(0,myRow);
  assertEquals(1,f.getNextRow());
  myRow=f.nextRow();
  assertEquals(1,myRow);
  assertEquals(2,f.getNextRow());
  myRow=f.nextRow();
  assertEquals(2,myRow);
  assertEquals(3,f.getNextRow());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\PackageTest.java",197
649,"'-tryline","public void XPathtestColumns() throws Exception {
  XPathFileContainer f=new XPathFileContainer(getResourceFilePath(xpathfilecontainer.xml),/project/target/@name);
  assertNotNull(f);
  assertTrue(Not empty,f.size() > 0);
  int last=0;
  for (int i=0; i < f.size(); i++) {
    last=f.nextRow();
    log.debug(found [ + i + ]+ f.getXPathString(last));
  }
  assertEquals(last + 1,f.size());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\PackageTest.java",214
650,"'-tryline","public void XPathtestDefault() throws Exception {
  XPathFileContainer f=new XPathFileContainer(getResourceFilePath(xpathfilecontainer.xml),/project/@default);
  assertNotNull(f);
  assertTrue(Not empty,f.size() > 0);
  assertEquals(install,f.getXPathString(0));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\PackageTest.java",227
651,"'-tryline","public void XPathEmpty() throws Exception {
  XPath xp=setupXPath(,);
  String val=xp.execute();
  assertEquals(,val);
  val=xp.execute();
  assertEquals(,val);
  val=xp.execute();
  assertEquals(,val);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\PackageTest.java",235
652,"'-tryline","public void XPathNoFile() throws Exception {
  XPath xp=setupXPath(no-such-file,);
  String val=xp.execute();
  assertEquals(,val);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\PackageTest.java",245
653,"'-tryline","public void XPathFile() throws Exception {
  XPath xp=setupXPath(testfiles/XPathTest2.xml,note/body);
  assertEquals(Don't forget me this weekend!,xp.execute());
  xp=setupXPath(testfiles/XPathTest2.xml,//note2);
  assertEquals(,xp.execute());
  xp=setupXPath(testfiles/XPathTest2.xml,//note/to);
  assertEquals(Tove,xp.execute());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\PackageTest.java",251
654,"'-tryline","public void XPathFile1() throws Exception {
  XPath xp=setupXPath(testfiles/XPathTest.xml,//user/@username);
  assertEquals(u1,xp.execute());
  assertEquals(u2,xp.execute());
  assertEquals(u3,xp.execute());
  assertEquals(u4,xp.execute());
  assertEquals(u5,xp.execute());
  assertEquals(u1,xp.execute());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\PackageTest.java",262
655,"'-tryline","public void XPathFile2() throws Exception {
  XPath xp1=setupXPath(testfiles/XPathTest.xml,//user/@username);
  XPath xp1a=setupXPath(testfiles/XPathTest.xml,//user/@username);
  XPath xp2=setupXPath(testfiles/XPathTest.xml,//user/@password);
  XPath xp2a=setupXPath(testfiles/XPathTest.xml,//user/@password);
  assertEquals(u1,xp1.execute());
  assertEquals(p1,xp2.execute());
  assertEquals(p2,xp2.execute());
  assertEquals(u2,xp1a.execute());
  assertEquals(u3,xp1.execute());
  assertEquals(u4,xp1.execute());
  assertEquals(p3,xp2a.execute());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\PackageTest.java",272
656,"'-tryline","private XPath setupXPath(String file,String expr) throws Exception {
  XPath xp=new XPath();
  xp.setParameters(makeParams(new Object[]{getResourceFilePath(file),expr}));
  return xp;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\PackageTest.java",287
657,"'-tryline","@Test public void randomTest1() throws Exception {
  Random r=new Random();
  Collection<CompoundVariable> parms=makeParams(0,10000000000,VAR);
  r.setParameters(parms);
  String s=r.execute(null,null);
  long l=Long.parseLong(s);
  assertTrue(l >= 0 && l <= 10000000000L);
  parms=makeParams(1,1,VAR);
  r.setParameters(parms);
  s=r.execute(null,null);
  l=Long.parseLong(s);
  assertEquals(1,l);
  String varValue=JMeterContextService.getContext().getVariables().get(VAR);
  assertEquals(1,varValue);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\RandomFunctionTest.java",49
658,"'-tryline","@Test public void randomStringTest1() throws Exception {
  RandomString r=new RandomString();
  Collection<CompoundVariable> parms=makeParams(10,abcdefghijklmnopqrstuvwxyz,VAR);
  r.setParameters(parms);
  String s=r.execute(null,null);
  Assert.assertNotNull(s);
  assertEquals(10,s.length());
  assertTrue(Random String contains unexpected character,stringOnlyContainsChars(s,abcdefghijklmnopqrstuvwxyz));
  String varValue=JMeterContextService.getContext().getVariables().get(VAR);
  assertEquals(s,varValue);
  parms=makeParams(5,,VAR2);
  r.setParameters(parms);
  s=r.execute(null,null);
  Assert.assertNotNull(s);
  assertEquals(5,s.length());
  varValue=JMeterContextService.getContext().getVariables().get(VAR2);
  assertEquals(s,varValue);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\RandomFunctionTest.java",67
659,"'-tryline","@Test public void splitTest1() throws Exception {
  String src=;
  try {
    splitParams(a,b,c,null,null);
    fail(Expected InvalidVariableException (wrong number of parameters));
  }
 catch (  InvalidVariableException e) {
  }
  src=a,b,c;
  SplitFunction split;
  split=splitParams(src,VAR1,null);
  assertEquals(src,split.execute());
  assertEquals(src,vars.get(VAR1));
  assertEquals(3,vars.get(VAR1_n));
  assertEquals(a,vars.get(VAR1_1));
  assertEquals(b,vars.get(VAR1_2));
  assertEquals(c,vars.get(VAR1_3));
  assertNull(vars.get(VAR1_4));
  split=splitParams(src,VAR1,);
  assertEquals(src,split.execute());
  assertEquals(src,vars.get(VAR1));
  assertEquals(3,vars.get(VAR1_n));
  assertEquals(a,vars.get(VAR1_1));
  assertEquals(b,vars.get(VAR1_2));
  assertEquals(c,vars.get(VAR1_3));
  assertNull(vars.get(VAR1_4));
  split=splitParams(src,VAR2,,);
  assertEquals(src,split.execute());
  assertEquals(src,vars.get(VAR2));
  assertEquals(3,vars.get(VAR2_n));
  assertEquals(a,vars.get(VAR2_1));
  assertEquals(b,vars.get(VAR2_2));
  assertEquals(c,vars.get(VAR2_3));
  assertNull(vars.get(VAR2_4));
  src=a|b|c;
  split=splitParams(src,VAR3,|);
  assertEquals(src,split.execute());
  assertEquals(src,vars.get(VAR3));
  assertEquals(3,vars.get(VAR3_n));
  assertEquals(a,vars.get(VAR3_1));
  assertEquals(b,vars.get(VAR3_2));
  assertEquals(c,vars.get(VAR3_3));
  assertNull(vars.get(VAR3_4));
  src=a|b||;
  split=splitParams(src,VAR4,|);
  assertEquals(src,split.execute());
  assertEquals(src,vars.get(VAR4));
  assertEquals(4,vars.get(VAR4_n));
  assertEquals(a,vars.get(VAR4_1));
  assertEquals(b,vars.get(VAR4_2));
  assertEquals(?,vars.get(VAR4_3));
  assertNull(vars.get(VAR4_5));
  src=a,,c;
  vars.put(VAR,src);
  split=splitParams(${VAR},VAR,null);
  assertEquals(src,split.execute());
  assertEquals(3,vars.get(VAR_n));
  assertEquals(a,vars.get(VAR_1));
  assertEquals(?,vars.get(VAR_2));
  assertEquals(c,vars.get(VAR_3));
  assertNull(vars.get(VAR_4));
  src=a,b;
  vars.put(VAR,src);
  split=splitParams(${VAR},VAR,null);
  assertEquals(src,split.execute());
  assertEquals(2,vars.get(VAR_n));
  assertEquals(a,vars.get(VAR_1));
  assertEquals(b,vars.get(VAR_2));
  assertNull(vars.get(VAR_3));
  src=a,,c,;
  vars.put(VAR,src);
  split=splitParams(${VAR},VAR5,null);
  assertEquals(src,split.execute());
  assertEquals(4,vars.get(VAR5_n));
  assertEquals(a,vars.get(VAR5_1));
  assertEquals(?,vars.get(VAR5_2));
  assertEquals(c,vars.get(VAR5_3));
  assertEquals(?,vars.get(VAR5_4));
  assertNull(vars.get(VAR5_5));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\SplitFunctionTest.java",47
660,"'-tryline","private static SplitFunction splitParams(String p1,String p2,String p3) throws Exception {
  SplitFunction split=new SplitFunction();
  Collection<CompoundVariable> parms=new LinkedList<>();
  parms.add(new CompoundVariable(p1));
  if (p2 != null) {
    parms.add(new CompoundVariable(p2));
  }
  if (p3 != null) {
    parms.add(new CompoundVariable(p3));
  }
  split.setParameters(parms);
  return split;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\SplitFunctionTest.java",138
661,"'-tryline","@Test public void SFFTest1() throws Exception {
  Files.write(dir.resolve(SFFTest2.txt),Arrays.asList(one,two,three,four,five));
  Files.write(dir.resolve(SFFTest3.txt),Arrays.asList(eins,zwei,drei,fier,fuenf));
  StringFromFile sff1=createSFF(' + dir.toString().replaceAll(','') + /SFFTest'#'.'txt,,1,3);
  try {
    assertEquals(uno,sff1.execute());
    assertEquals(dos,sff1.execute());
    assertEquals(tres,sff1.execute());
    assertEquals(cuatro,sff1.execute());
    assertEquals(cinco,sff1.execute());
    assertEquals(one,sff1.execute());
    assertEquals(two,sff1.execute());
    sff1.execute();
    sff1.execute();
    assertEquals(five,sff1.execute());
    assertEquals(eins,sff1.execute());
    sff1.execute();
    sff1.execute();
    sff1.execute();
    assertEquals(fuenf,sff1.execute());
    assertThrows(JMeterStopThreadException.class,sff1::execute);
  }
  finally {
    closeFile(sff1);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\StringFromFileFunctionTest.java",42
662,"'-tryline","@Test public void SFFTest2() throws Exception {
  StringFromFile sff=createSFF(dir.resolve(SFFTest1.txt),);
  try {
    assertEquals(uno,sff.execute());
    assertEquals(dos,sff.execute());
    assertEquals(tres,sff.execute());
    assertEquals(cuatro,sff.execute());
    assertEquals(cinco,sff.execute());
    assertEquals(uno,sff.execute());
    assertEquals(dos,sff.execute());
    assertEquals(tres,sff.execute());
    assertEquals(cuatro,sff.execute());
    assertEquals(cinco,sff.execute());
  }
  finally {
    closeFile(sff);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\StringFromFileFunctionTest.java",71
663,"'-tryline","@Test public void SFFTest3() throws Exception {
  StringFromFile sff=createSFF(dir.resolve(SFFTest1.txt),,,);
  try {
    assertEquals(uno,sff.execute());
    assertEquals(dos,sff.execute());
    assertEquals(tres,sff.execute());
    assertEquals(cuatro,sff.execute());
    assertEquals(cinco,sff.execute());
    assertEquals(uno,sff.execute());
    assertEquals(dos,sff.execute());
    assertEquals(tres,sff.execute());
    assertEquals(cuatro,sff.execute());
    assertEquals(cinco,sff.execute());
  }
  finally {
    closeFile(sff);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\StringFromFileFunctionTest.java",90
664,"'-tryline","@Test public void SFFTest4() throws Exception {
  StringFromFile sff=createSFF(dir.resolve(InvalidFileName.txt),,,);
  try {
    assertEquals(StringFromFile.ERR_IND,sff.execute());
    assertEquals(StringFromFile.ERR_IND,sff.execute());
  }
  finally {
    closeFile(sff);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\StringFromFileFunctionTest.java",109
665,"'-tryline","@Test public void SFFTest5() throws Exception {
  StringFromFile sff=createSFF(dir.resolve(SFFTest1.txt),,,2);
  try {
    assertEquals(uno,sff.execute());
    assertEquals(dos,sff.execute());
    assertEquals(tres,sff.execute());
    assertEquals(cuatro,sff.execute());
    assertEquals(cinco,sff.execute());
    assertEquals(uno,sff.execute());
    assertEquals(dos,sff.execute());
    assertEquals(tres,sff.execute());
    assertEquals(cuatro,sff.execute());
    assertEquals(cinco,sff.execute());
    assertThrows(JMeterStopThreadException.class,sff::execute);
  }
  finally {
    closeFile(sff);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\StringFromFileFunctionTest.java",121
666,"'-tryline","private StringFromFile createSFF(Object... params) throws Exception {
  StringFromFile sff=new StringFromFile();
  sff.setParameters(FunctionTestHelper.makeParams(params));
  return sff;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\StringFromFileFunctionTest.java",146
667,"'-tryline","@Test public void sumTest() throws Exception {
  String maxIntVal=Integer.toString(Integer.MAX_VALUE);
  String minIntVal=Integer.toString(Integer.MIN_VALUE);
  IntSum intSum=new IntSum();
  checkInvalidParameterCounts(intSum,2);
  checkSum(intSum,3,new String[]{1,2});
  checkSumNoVar(intSum,3,new String[]{1,2});
  checkSum(intSum,1,new String[]{-1,1,1,1,-2,1});
  checkSumNoVar(intSum,1,new String[]{-1,1,1,1,-2,1});
  checkSumNoVar(intSum,-1,new String[]{-1,1,1,1,-2,-1});
  checkSum(intSum,maxIntVal,new String[]{maxIntVal,0});
  checkSum(intSum,minIntVal,new String[]{maxIntVal,1});
  LongSum longSum=new LongSum();
  checkInvalidParameterCounts(longSum,2);
  checkSum(longSum,3,new String[]{1,2});
  checkSum(longSum,1,new String[]{-1,1,1,1,-1,0});
  checkSumNoVar(longSum,3,new String[]{1,2});
  checkSumNoVar(longSum,1,new String[]{-1,1,1,1,-1,0});
  checkSumNoVar(longSum,0,new String[]{-1,1,1,1,-1,-1});
  String maxIntVal_1=Long.toString(1 + (long)Integer.MAX_VALUE);
  checkSum(longSum,maxIntVal,new String[]{maxIntVal,0});
  checkSum(longSum,maxIntVal_1,new String[]{maxIntVal,1});
  String maxLongVal=Long.toString(Long.MAX_VALUE);
  String minLongVal=Long.toString(Long.MIN_VALUE);
  checkSum(longSum,maxLongVal,new String[]{maxLongVal,0});
  checkSum(longSum,minLongVal,new String[]{maxLongVal,1});
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\SumFunctionTest.java",46
668,"'-tryline","private void checkSum(AbstractFunction func,String value,String[] addends) throws Exception {
  Collection<CompoundVariable> parms=Arrays.stream(addends).map(CompoundVariable::new).collect(Collectors.toCollection(LinkedList::new));
  parms.add(new CompoundVariable(Result));
  func.setParameters(parms);
  assertEquals(value,func.execute(null,null));
  assertEquals(value,vars.getObject(Result));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\SumFunctionTest.java",78
669,"'-tryline","private void checkSumNoVar(AbstractFunction func,String value,String[] addends) throws Exception {
  Collection<CompoundVariable> parms=Arrays.stream(addends).map(CompoundVariable::new).collect(Collectors.toCollection(LinkedList::new));
  func.setParameters(parms);
  assertEquals(value,func.execute(null,null));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\SumFunctionTest.java",89
670,"'-tryline","@Test public void testParameterCountIsPropDefined() throws Exception {
  checkInvalidParameterCounts(changeCase,1,3);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestChangeCase.java",54
671,"'-tryline","@Test public void testChangeCase() throws Exception {
  String returnValue=execute(myUpperTest);
  assertEquals(MYUPPERTEST,returnValue);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestChangeCase.java",68
672,"'-tryline","@Test public void testChangeCaseLower() throws Exception {
  String returnValue=execute(myUpperTest,LOWER);
  assertEquals(myuppertest,returnValue);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestChangeCase.java",74
673,"'-tryline","@Test public void testChangeCaseWrongMode() throws Exception {
  String returnValue=execute(myUpperTest,Wrong);
  assertEquals(myUpperTest,returnValue);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestChangeCase.java",80
674,"'-tryline","@Test public void testChangeCaseCapitalize() throws Exception {
  String returnValue=execute(ab-CD eF,CAPITALIZE);
  assertEquals(Ab-CD eF,returnValue);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestChangeCase.java",86
675,"'-tryline","@Test public void testChangeCaseError() throws Exception {
  assertThrows(InvalidVariableException.class,() -> changeCase.setParameters(new LinkedList<>()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestChangeCase.java",92
676,"'-tryline","@Test public void testEmptyMode() throws Exception {
  String returnValue=execute(ab-CD eF,);
  assertEquals(AB-CD EF,returnValue);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestChangeCase.java",99
677,"'-tryline","@Test public void testChangeCaseWrongModeIgnore() throws Exception {
  String returnValue=execute(ab-CD eF,Wrong);
  assertEquals(ab-CD eF,returnValue);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestChangeCase.java",105
678,"'-tryline","@Test public void testParameterCount512() throws Exception {
  checkInvalidParameterCounts(dateConvert,3,4);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestDateTimeConvertFunction.java",62
679,"'-tryline","@Test public void testDateTimeConvert() throws Exception {
  params.add(new CompoundVariable(2017-01-02 21:00:21));
  params.add(new CompoundVariable(yyyy-MM-dd HH:mm:ss));
  params.add(new CompoundVariable(dd-MM-yyyy hh:mm));
  dateConvert.setParameters(params);
  String returnValue=dateConvert.execute(result,null);
  assertEquals(02-01-2017 09:00,returnValue);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestDateTimeConvertFunction.java",67
680,"'-tryline","@Test public void testDateTimeConvertEpochTime() throws Exception {
  TimeZone initialTZ=TimeZone.getDefault();
  TimeZone.setDefault(TimeZone.getTimeZone(GMT));
  params.add(new CompoundVariable(1526574881000));
  params.add(new CompoundVariable());
  params.add(new CompoundVariable(dd/MM/yyyy HH:mm));
  dateConvert.setParameters(params);
  String returnValue=dateConvert.execute(result,null);
  assertEquals(17/05/2018 16:34,returnValue);
  TimeZone.setDefault(initialTZ);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestDateTimeConvertFunction.java",77
681,"'-tryline","@Test public void testDateConvert() throws Exception {
  params.add(new CompoundVariable(2017-01-02));
  params.add(new CompoundVariable(yyyy-MM-dd));
  params.add(new CompoundVariable(dd-MM-yyyy));
  dateConvert.setParameters(params);
  String returnValue=dateConvert.execute(result,null);
  assertEquals(02-01-2017,returnValue);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestDateTimeConvertFunction.java",90
682,"'-tryline","@Test public void testDateConvertWithVariable() throws Exception {
  params.add(new CompoundVariable(2017-01-02));
  params.add(new CompoundVariable(yyyy-MM-dd));
  params.add(new CompoundVariable(dd-MM-yyyy));
  params.add(new CompoundVariable(varName));
  dateConvert.setParameters(params);
  dateConvert.execute(result,null);
  assertEquals(02-01-2017,vars.get(varName));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestDateTimeConvertFunction.java",100
683,"'-tryline","@Test public void testDateConvertError() throws Exception {
  params.add(new CompoundVariable(2017-01-02));
  params.add(new CompoundVariable(yyyy-MM-dd));
  assertThrows(InvalidVariableException.class,() -> dateConvert.setParameters(params));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestDateTimeConvertFunction.java",111
684,"'-tryline","@Test public void testDateConvertErrorFormat() throws Exception {
  params.add(new CompoundVariable(2017-01-02));
  params.add(new CompoundVariable(yyyy-MM-dd));
  params.add(new CompoundVariable(abcd));
  dateConvert.setParameters(params);
  assertEquals(dateConvert.execute(result,null),);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestDateTimeConvertFunction.java",120
685,"'-tryline","@Test public void testDateConvertDateError() throws Exception {
  params.add(new CompoundVariable(a2017-01-02));
  params.add(new CompoundVariable(yyyy-MM-dd));
  params.add(new CompoundVariable(dd-MM-yyyy HH:mm:ss));
  dateConvert.setParameters(params);
  assertEquals(dateConvert.execute(result,null),);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestDateTimeConvertFunction.java",129
686,"'-tryline","@Test public void testParameterCount512() throws Exception {
  checkInvalidParameterCounts(digest,2,5);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestDigestFunction.java",53
687,"'-tryline","@Test public void testSha512WithSalt() throws Exception {
  params.add(new CompoundVariable(SHA-512));
  params.add(new CompoundVariable(nofile));
  params.add(new CompoundVariable(salt));
  digest.setParameters(params);
  String returnValue=digest.execute(result,null);
  assertEquals(abc8c7a1c814c74d5882e527d21fabfccf480716df9d17bae73e5e767992d8a2a47033459a9ea91aca3186f75bfbe559419109bc44c1e6dfd618101fdc0beb1b,returnValue);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestDigestFunction.java",58
688,"'-tryline","@Test public void testSha512WithSaltAndSpace() throws Exception {
  params.add(new CompoundVariable(SHA-512));
  params.add(new CompoundVariable(nofile));
  params.add(new CompoundVariable(salt ));
  digest.setParameters(params);
  String returnValue=digest.execute(result,null);
  assertEquals(961451eb5870ded3fa484ad49fd1481ae3c6decdcc560200e70624a1d62ad0d1793edf3c8eccd0786bffab0b3e4421f54c7fd11a9e7461580352346d039b8e16,returnValue);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestDigestFunction.java",70
689,"'-tryline","@Test public void testSha512WithSaltAndSpaceInBoth() throws Exception {
  params.add(new CompoundVariable(SHA-512));
  params.add(new CompoundVariable(nofile ));
  params.add(new CompoundVariable(salt ));
  digest.setParameters(params);
  String returnValue=digest.execute(result,null);
  assertEquals(3968fd028934466fa095f6323c527148e87d7b74601d1db5f474748dd7c643b4f508e46beb29a405ec658a64c0f581461e99eca063414099af0b63dc890b5739,returnValue);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestDigestFunction.java",82
690,"'-tryline","@Test public void testSha1() throws Exception {
  params.add(new CompoundVariable(SHA-1));
  params.add(new CompoundVariable(nofile));
  digest.setParameters(params);
  String returnValue=digest.execute(result,null);
  assertEquals(4ea2ced10057872be25371cfe638d3b096c58f2f,returnValue);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestDigestFunction.java",94
691,"'-tryline","@Test public void testSha1Variable() throws Exception {
  params.add(new CompoundVariable(SHA-1));
  params.add(new CompoundVariable(nofile));
  params.add(new CompoundVariable());
  params.add(new CompoundVariable(true));
  params.add(new CompoundVariable(newVar));
  digest.setParameters(params);
  String returnValue=digest.execute(result,null);
  assertEquals(4EA2CED10057872BE25371CFE638D3B096C58F2F,returnValue);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestDigestFunction.java",103
692,"'-tryline","@Test public void testSha512Variable() throws Exception {
  params.add(new CompoundVariable(SHA-512));
  params.add(new CompoundVariable(nofile));
  params.add(new CompoundVariable());
  params.add(new CompoundVariable(true));
  params.add(new CompoundVariable(newVar));
  digest.setParameters(params);
  String returnValue=digest.execute(result,null);
  assertEquals(58DA94D45A97B35B31D7F76D2EBAC184BC4BDA512B966CDBE43FDE1CAE1CFAF89617082CA89928FB5DC1C75D60B93ADB5631F518F970CA6DCC196E1AFC678B8C,returnValue);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestDigestFunction.java",115
693,"'-tryline","@Test public void testSha512Error() throws Exception {
  params.add(new CompoundVariable(nofile));
  assertThrows(InvalidVariableException.class,() -> digest.setParameters(params));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestDigestFunction.java",129
694,"'-tryline","@Test public void testSha1Error() throws Exception {
  params.add(new CompoundVariable(SHA-1));
  assertThrows(InvalidVariableException.class,() -> digest.setParameters(params));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestDigestFunction.java",137
695,"'-tryline","@Test public void testParameterCount() throws Exception {
  checkInvalidParameterCounts(function,1,2);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestEscapeOroRegexpChars.java",55
696,"'-tryline","@Test public void testNOEscape() throws Exception {
  params.add(new CompoundVariable(toto1titi));
  function.setParameters(params);
  String ret=function.execute(result,null);
  assertEquals(toto1titi,ret);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestEscapeOroRegexpChars.java",60
697,"'-tryline","@Test public void testEscapeSpace() throws Exception {
  params.add(new CompoundVariable(toto1 titi));
  function.setParameters(params);
  String ret=function.execute(result,null);
  assertEquals(toto1\\ titi,ret);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestEscapeOroRegexpChars.java",68
698,"'-tryline","@Test public void testEscape() throws Exception {
  params.add(new CompoundVariable(toto(.+?)titi));
  function.setParameters(params);
  String ret=function.execute(result,null);
  assertEquals(toto\\(\\.\\+\\?\\)titi,ret);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestEscapeOroRegexpChars.java",76
699,"'-tryline","@Test public void testEscapeWithVars() throws Exception {
  params.add(new CompoundVariable(toto(.+?)titi));
  params.add(new CompoundVariable(exportedVar));
  function.setParameters(params);
  String ret=function.execute(result,null);
  assertEquals(toto\\(\\.\\+\\?\\)titi,ret);
  assertEquals(toto\\(\\.\\+\\?\\)titi,vars.get(exportedVar));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestEscapeOroRegexpChars.java",84
700,"'-tryline","@Test public void testEscape2() throws Exception {
  params.add(new CompoundVariable([^\].+?));
  function.setParameters(params);
  String ret=function.execute(result,null);
  assertEquals(\\[\\^\\\\\]\\.\\+\\?,ret);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestEscapeOroRegexpChars.java",94
701,"'-tryline","@Test public void testrowNum() throws Exception {
  FileRowColContainer f=new FileRowColContainer(findTestPath(testfiles/unit/TestFileRowColContainer.csv));
  assertNotNull(f);
  assertEquals(Expected 4 lines,4,f.getSize());
  assertEquals(0,f.nextRow());
  assertEquals(1,f.nextRow());
  assertEquals(2,f.nextRow());
  assertEquals(3,f.nextRow());
  assertEquals(0,f.nextRow());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestFileRowColContainer.java",59
702,"'-tryline","@Test public void testRowNumRelative() throws Exception {
  FileRowColContainer f=new FileRowColContainer(testfiles/unit/TestFileRowColContainer.csv);
  assertNotNull(f);
  assertEquals(Expected 4 lines,4,f.getSize());
  assertEquals(0,f.nextRow());
  assertEquals(1,f.nextRow());
  assertEquals(2,f.nextRow());
  assertEquals(3,f.nextRow());
  assertEquals(0,f.nextRow());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestFileRowColContainer.java",72
703,"'-tryline","@Test public void testColumns() throws Exception {
  FileRowColContainer f=new FileRowColContainer(findTestPath(testfiles/unit/TestFileRowColContainer.csv));
  assertNotNull(f);
  assertTrue(Not empty,f.getSize() > 0);
  int myRow=f.nextRow();
  assertEquals(0,myRow);
  assertEquals(a1,f.getColumn(myRow,0));
  assertEquals(d1,f.getColumn(myRow,3));
  try {
    f.getColumn(myRow,4);
    fail(Expected out of bounds);
  }
 catch (  IndexOutOfBoundsException e) {
  }
  myRow=f.nextRow();
  assertEquals(1,myRow);
  assertEquals(b2,f.getColumn(myRow,1));
  assertEquals(c2,f.getColumn(myRow,2));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestFileRowColContainer.java",85
704,"'-tryline","@Test public void testColumnsComma() throws Exception {
  FileRowColContainer f=new FileRowColContainer(findTestPath(testfiles/unit/TestFileRowColContainer.csv),,);
  assertNotNull(f);
  assertTrue(Not empty,f.getSize() > 0);
  int myRow=f.nextRow();
  assertEquals(0,myRow);
  assertEquals(a1,f.getColumn(myRow,0));
  assertEquals(d1,f.getColumn(myRow,3));
  try {
    f.getColumn(myRow,4);
    fail(Expected out of bounds);
  }
 catch (  IndexOutOfBoundsException e) {
  }
  myRow=f.nextRow();
  assertEquals(1,myRow);
  assertEquals(b2,f.getColumn(myRow,1));
  assertEquals(c2,f.getColumn(myRow,2));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestFileRowColContainer.java",107
705,"'-tryline","@Test public void testColumnsTab() throws Exception {
  FileRowColContainer f=new FileRowColContainer(findTestPath(testfiles/test.tsv),\t);
  assertNotNull(f);
  assertTrue(Not empty,f.getSize() > 0);
  int myRow=f.nextRow();
  assertEquals(0,myRow);
  assertEquals(a1,f.getColumn(myRow,0));
  assertEquals(d1,f.getColumn(myRow,3));
  try {
    f.getColumn(myRow,4);
    fail(Expected out of bounds);
  }
 catch (  IndexOutOfBoundsException e) {
  }
  myRow=f.nextRow();
  assertEquals(1,myRow);
  assertEquals(b2,f.getColumn(myRow,1));
  assertEquals(c2,f.getColumn(myRow,2));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestFileRowColContainer.java",129
706,"'-tryline","@Test public void testEmptyCols() throws Exception {
  FileRowColContainer f=new FileRowColContainer(findTestPath(testfiles/testempty.csv));
  assertNotNull(f);
  assertEquals(Expected 4 lines,4,f.getSize());
  int myRow=f.nextRow();
  assertEquals(0,myRow);
  assertEquals(,f.getColumn(myRow,0));
  assertEquals(d1,f.getColumn(myRow,3));
  myRow=f.nextRow();
  assertEquals(1,myRow);
  assertEquals(,f.getColumn(myRow,1));
  assertEquals(c2,f.getColumn(myRow,2));
  myRow=f.nextRow();
  assertEquals(2,myRow);
  assertEquals(b3,f.getColumn(myRow,1));
  assertEquals(,f.getColumn(myRow,2));
  myRow=f.nextRow();
  assertEquals(3,myRow);
  assertEquals(b4,f.getColumn(myRow,1));
  assertEquals(c4,f.getColumn(myRow,2));
  assertEquals(,f.getColumn(myRow,3));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestFileRowColContainer.java",151
707,"'-tryline","@Test public void testParameterCount() throws Exception {
  checkInvalidParameterCounts(function,1,3);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestFileToString.java",58
708,"'-tryline","@Test public void testReadError() throws Exception {
  params.add(new CompoundVariable(nofile));
  function.setParameters(params);
  String returnValue=function.execute(result,null);
  assertEquals(**ERR**,returnValue);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestFileToString.java",63
709,"'-tryline","@Test public void testRead() throws Exception {
  File file=new File(JMeterUtils.getJMeterBinDir(),jmeter.properties);
  params.add(new CompoundVariable(file.getAbsolutePath()));
  function.setParameters(params);
  String returnValue=function.execute(result,null);
  Assert.assertTrue(returnValue.indexOf(language=) > 0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestFileToString.java",71
710,"'-tryline","@Test public void testReadWithEncoding() throws Exception {
  File file=new File(JMeterUtils.getJMeterBinDir(),jmeter.properties);
  params.add(new CompoundVariable(file.getAbsolutePath()));
  params.add(new CompoundVariable(UTF-8));
  function.setParameters(params);
  String returnValue=function.execute(result,null);
  Assert.assertTrue(returnValue.indexOf(language=) > 0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestFileToString.java",80
711,"'-tryline","@Test public void testReadWithEncodingAndVar() throws Exception {
  File file=new File(JMeterUtils.getJMeterBinDir(),jmeter.properties);
  params.add(new CompoundVariable(file.getAbsolutePath()));
  params.add(new CompoundVariable(UTF-8));
  params.add(new CompoundVariable(MY_FILE_AS_TEXT));
  function.setParameters(params);
  String returnValue=function.execute(result,null);
  Assert.assertTrue(returnValue.indexOf(language=) > 0);
  Assert.assertTrue(vars.get(MY_FILE_AS_TEXT).indexOf(language=) > 0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestFileToString.java",90
712,"'-tryline","@Test public void testParameterCount() throws Exception {
  checkInvalidParameterCounts(function,1,2);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestGroovyFunction.java",64
713,"'-tryline","@Test public void testSum() throws Exception {
  params.add(new CompoundVariable(1+2+3));
  function.setParameters(params);
  String ret=function.execute(result,null);
  assertEquals(6,ret);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestGroovyFunction.java",69
714,"'-tryline","@Test public void testSumVar() throws Exception {
  params.add(new CompoundVariable(1+2+3));
  params.add(new CompoundVariable(TOTAL));
  function.setParameters(params);
  String ret=function.execute(result,null);
  assertEquals(6,ret);
  assertEquals(6,vars.get(TOTAL));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestGroovyFunction.java",77
715,"'-tryline","@Test public void testReplace1() throws Exception {
  params.add(new CompoundVariable(prev.getResponseDataAsString().replaceAll('T','t')));
  function.setParameters(params);
  String ret=function.execute(result,null);
  assertEquals(the quick brown fox,ret);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestGroovyFunction.java",87
716,"'-tryline","@Test public void testReplace2() throws Exception {
  vars.put(URL,/query.cgi?s1=1&amp;s2=2&amp;s3=3);
  params.add(new CompoundVariable(vars.get('URL').replaceAll('&amp;','&')));
  params.add(new CompoundVariable(URL));
  function.setParameters(params);
  String ret=function.execute(result,null);
  assertEquals(/query.cgi?s1=1&s2=2&s3=3,ret);
  assertEquals(ret,vars.getObject(URL));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestGroovyFunction.java",96
717,"'-tryline","@Test public void testFileLoading() throws Exception {
  JMeterUtils.setProperty(groovy.utilities,bin/utility.groovy);
  params.add(new CompoundVariable(factorial(10)));
  function.setParameters(params);
  String ret=function.execute(result,null);
  assertEquals(3628800,ret);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestGroovyFunction.java",107
718,"'-tryline","@Test public void testInvalidFileLoading() throws Exception {
  JMeterUtils.setProperty(groovy.utilities,bin/missing.groovy);
  params.add(new CompoundVariable(factorial(10)));
  Assertions.assertThrows(InvalidVariableException.class,() -> function.setParameters(params));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestGroovyFunction.java",116
719,"'-tryline","@Test public void testParameterCountIsPropDefined() throws Exception {
  checkInvalidParameterCounts(isPropDefined,1,1);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestIsPropDefined.java",56
720,"'-tryline","@Test public void testIsPropDefined() throws Exception {
  params.add(new CompoundVariable(file.encoding));
  isPropDefined.setParameters(params);
  String returnValue=isPropDefined.execute(result,null);
  assertEquals(true,returnValue);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestIsPropDefined.java",61
721,"'-tryline","@Test public void testIsPropNotDefined() throws Exception {
  params.add(new CompoundVariable(emptyProperty));
  isPropDefined.setParameters(params);
  String returnValue=isPropDefined.execute(result,null);
  assertEquals(false,returnValue);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestIsPropDefined.java",69
722,"'-tryline","@Test public void testIsPropNotDefinedOnlyVarDefined() throws Exception {
  vars.put(emptyProperty,emptyPropertyValue);
  params.add(new CompoundVariable(emptyProperty));
  isPropDefined.setParameters(params);
  String returnValue=isPropDefined.execute(result,null);
  assertEquals(false,returnValue);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestIsPropDefined.java",77
723,"'-tryline","@Test public void testParameterCountIsPropDefined() throws Exception {
  checkInvalidParameterCounts(isVarDefined,1,1);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestIsVarDefined.java",56
724,"'-tryline","@Test public void testIsVarNotDefinedOnlyPropDefined() throws Exception {
  params.add(new CompoundVariable(file.encoding));
  isVarDefined.setParameters(params);
  String returnValue=isVarDefined.execute(result,null);
  assertEquals(false,returnValue);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestIsVarDefined.java",61
725,"'-tryline","@Test public void testIsVarDefined() throws Exception {
  vars.put(varName,);
  params.add(new CompoundVariable(varName));
  isVarDefined.setParameters(params);
  String returnValue=isVarDefined.execute(result,null);
  assertEquals(true,returnValue);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestIsVarDefined.java",69
726,"'-tryline","@Test public void testIsVarNotDefined() throws Exception {
  params.add(new CompoundVariable(emptyProperty));
  isVarDefined.setParameters(params);
  String returnValue=isVarDefined.execute(result,null);
  assertEquals(false,returnValue);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestIsVarDefined.java",78
727,"'-tryline","@Test public void testIsVarDefinedError() throws Exception {
  Assertions.assertThrows(InvalidVariableException.class,() -> isVarDefined.setParameters(params));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestIsVarDefined.java",86
728,"'-tryline","@Test public void testNoVariablesDefined() throws Exception {
  jmctx.setVariables(null);
  params.add(new CompoundVariable(emptyProperty));
  isVarDefined.setParameters(params);
  String returnValue=isVarDefined.execute(result,null);
  assertEquals(false,returnValue);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestIsVarDefined.java",93
729,"'-tryline","@Test public void testParameterCount() throws Exception {
  checkInvalidParameterCounts(function,1,2);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestJavascriptFunction.java",62
730,"'-tryline","@Test public void testSum() throws Exception {
  params.add(new CompoundVariable(1+2+3));
  function.setParameters(params);
  String ret=function.execute(result,null);
  assertEquals(6,ret);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestJavascriptFunction.java",67
731,"'-tryline","@Test public void testSumVar() throws Exception {
  params.add(new CompoundVariable(1+2+3));
  params.add(new CompoundVariable(TOTAL));
  function.setParameters(params);
  String ret=function.execute(result,null);
  assertEquals(6,ret);
  assertEquals(6,vars.get(TOTAL));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestJavascriptFunction.java",75
732,"'-tryline","@Test public void testReplace1() throws Exception {
  params.add(new CompoundVariable(sampleResult.getResponseDataAsString().replaceAll('T','t')));
  function.setParameters(params);
  String ret=function.execute(result,null);
  assertEquals(the quick brown fox,ret);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestJavascriptFunction.java",85
733,"'-tryline","@Test public void testReplace2() throws Exception {
  vars.put(URL,/query.cgi?s1=1&amp;s2=2&amp;s3=3);
  params.add(new CompoundVariable(vars.get('URL').replaceAll('&amp;','&')));
  params.add(new CompoundVariable(URL));
  function.setParameters(params);
  String ret=function.execute(result,null);
  assertEquals(/query.cgi?s1=1&s2=2&s3=3,ret);
  assertEquals(ret,vars.getObject(URL));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestJavascriptFunction.java",94
734,"'-tryline","@Test public void testParameterCount() throws Exception {
  checkInvalidParameterCounts(function,1,2);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestJexl2Function.java",55
735,"'-tryline","@Test public void testSum() throws Exception {
  params.add(new CompoundVariable(1+2+3));
  function.setParameters(params);
  String ret=function.execute(result,null);
  assertEquals(6,ret);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestJexl2Function.java",60
736,"'-tryline","@Test public void testSumVar() throws Exception {
  params.add(new CompoundVariable(1+2+3));
  params.add(new CompoundVariable(TOTAL));
  function.setParameters(params);
  String ret=function.execute(result,null);
  assertEquals(6,ret);
  assertEquals(6,vars.get(TOTAL));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestJexl2Function.java",68
737,"'-tryline","@Test public void testReplace1() throws Exception {
  params.add(new CompoundVariable(sampleResult.getResponseDataAsString().replaceAll('T','t')));
  function.setParameters(params);
  String ret=function.execute(result,null);
  assertEquals(the quick brown fox,ret);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestJexl2Function.java",78
738,"'-tryline","@Test public void testReplace2() throws Exception {
  vars.put(URL,/query.cgi?s1=1&amp;s2=2&amp;s3=3);
  params.add(new CompoundVariable(vars.get('URL').replaceAll('&amp;','&')));
  params.add(new CompoundVariable(URL));
  function.setParameters(params);
  String ret=function.execute(result,null);
  assertEquals(/query.cgi?s1=1&s2=2&s3=3,ret);
  assertEquals(ret,vars.getObject(URL));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestJexl2Function.java",87
739,"'-tryline","@Test public void testSumWithVar() throws Exception {
  params.add(new CompoundVariable(var a = 1+2+3));
  function.setParameters(params);
  String ret=function.execute(result,null);
  assertEquals(6,ret);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestJexl2Function.java",98
740,"'-tryline","@Test public void testParameterCount() throws Exception {
  function=new MachineName();
  checkInvalidParameterCounts(function,0,1);
  function=new MachineIP();
  checkInvalidParameterCounts(function,0,1);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestMachineIPName.java",55
741,"'-tryline","@Test public void testMachineName() throws Exception {
  function=new MachineName();
  function.setParameters(params);
  String ret=function.execute(result,null);
  assertEquals(JMeterUtils.getLocalHostName(),ret);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestMachineIPName.java",64
742,"'-tryline","@Test public void testMachineNameWithVar() throws Exception {
  function=new MachineName();
  params.add(new CompoundVariable(HOST_NAME));
  function.setParameters(params);
  String ret=function.execute(result,null);
  assertEquals(JMeterUtils.getLocalHostName(),ret);
  assertEquals(JMeterUtils.getLocalHostName(),vars.get(HOST_NAME));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestMachineIPName.java",72
743,"'-tryline","@Test public void testMachineIP() throws Exception {
  function=new MachineIP();
  function.setParameters(params);
  String ret=function.execute(result,null);
  assertEquals(JMeterUtils.getLocalHostIP(),ret);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestMachineIPName.java",82
744,"'-tryline","@Test public void testMachineIPWithVar() throws Exception {
  function=new MachineIP();
  params.add(new CompoundVariable(HOST_IP));
  function.setParameters(params);
  String ret=function.execute(result,null);
  assertEquals(JMeterUtils.getLocalHostIP(),ret);
  assertEquals(JMeterUtils.getLocalHostIP(),vars.get(HOST_IP));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestMachineIPName.java",90
745,"'-tryline","@Test public void testParameterCount() throws Exception {
  checkInvalidParameterCounts(function,1,2);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestRandomFromMultipleVars.java",58
746,"'-tryline","@Test public void testExtractionFromMultipleVars() throws Exception {
  String existingVarName1=var1;
  String existingVarName2=var2;
  vars.put(existingVarName1 + _matchNr,1);
  vars.put(existingVarName1 + _1,var1_value);
  vars.put(existingVarName2 + _matchNr,2);
  vars.put(existingVarName2 + _1,var2_value1);
  vars.put(existingVarName2 + _2,var2_value2);
  params.add(new CompoundVariable(var1|var2));
  function.setParameters(params);
  String returnValue=function.execute(result,null);
  MatcherAssert.assertThat(returnValue,CoreMatchers.anyOf(CoreMatchers.is(var1_value),CoreMatchers.is(var2_value1),CoreMatchers.is(var2_value2)));
  Assert.assertNull(vars.get(outputVar));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestRandomFromMultipleVars.java",63
747,"'-tryline","@Test public void test1Extraction() throws Exception {
  String existingVarName=var1;
  vars.put(existingVarName + _matchNr,1);
  vars.put(existingVarName + _1,value1);
  params.add(new CompoundVariable(var1));
  function.setParameters(params);
  String returnValue=function.execute(result,null);
  assertEquals(value1,returnValue);
  Assert.assertNull(vars.get(outputVar));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestRandomFromMultipleVars.java",84
748,"'-tryline","@Test public void test1ExtractionWithOutputVar() throws Exception {
  String existingVarName=var1;
  vars.put(existingVarName + _matchNr,1);
  vars.put(existingVarName + _1,value1);
  params.add(new CompoundVariable(var1));
  params.add(new CompoundVariable(outputVar));
  function.setParameters(params);
  String returnValue=function.execute(result,null);
  assertEquals(value1,returnValue);
  assertEquals(value1,vars.get(outputVar));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestRandomFromMultipleVars.java",96
749,"'-tryline","@Test public void testVariableExtraction() throws Exception {
  params=new LinkedList<>();
  params.add(new CompoundVariable(<value field=\(pinposition\\d+)\>(\\d+)</value>));
  params.add(new CompoundVariable($2$));
  params.add(new CompoundVariable(2));
  variable.setParameters(params);
  String match=variable.execute(result,null);
  assertEquals(5,match);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestRegexFunction.java",66
750,"'-tryline","@Test public void testVariableExtraction1a() throws Exception {
  params=new LinkedList<>();
  params.add(new CompoundVariable(<value field=\(pinposition\\d+)\>(\\d+)</value>));
  params.add(new CompoundVariable($2$));
  params.add(new CompoundVariable(2));
  params.add(new CompoundVariable(-));
  params.add(new CompoundVariable(default));
  params.add(new CompoundVariable(OUTVAR));
  variable.setParameters(params);
  String match=variable.execute(result,null);
  assertEquals(3,vars.getObject(OUTVAR_matchNr));
  assertEquals(5,match);
  assertEquals(5,vars.getObject(OUTVAR));
  assertEquals(<value field=\pinposition2\>5</value>,vars.getObject(OUTVAR_g0));
  assertEquals(pinposition2,vars.getObject(OUTVAR_g1));
  assertEquals(5,vars.getObject(OUTVAR_g2));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestRegexFunction.java",78
751,"'-tryline","@Test public void testVariableExtraction1b() throws Exception {
  params=new LinkedList<>();
  params.add(new CompoundVariable(<value field=\(pinposition\\d+)\>(\\d+)</value>));
  params.add(new CompoundVariable($2$));
  params.add(new CompoundVariable(2));
  params.add(new CompoundVariable(-));
  params.add(new CompoundVariable(default));
  params.add(new CompoundVariable());
  variable.setParameters(params);
  String match=variable.execute(result,null);
  assertEquals(5,match);
  assertNull(vars.getObject(OUTVAR));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestRegexFunction.java",98
752,"'-tryline","@Test public void testVariableExtractionFromVariable() throws Exception {
  params=new LinkedList<>();
  params.add(new CompoundVariable((\\d+)\\s+(\\w+)));
  params.add(new CompoundVariable($2$));
  params.add(new CompoundVariable(1));
  params.add(new CompoundVariable(-));
  params.add(new CompoundVariable(default));
  params.add(new CompoundVariable(OUTVAR));
  params.add(new CompoundVariable(INPUT_VARIABLE_NAME));
  variable.setParameters(params);
  String match=variable.execute(result,null);
  assertEquals(1,vars.getObject(OUTVAR_matchNr));
  assertEquals(times,match);
  assertEquals(times,vars.getObject(OUTVAR));
  assertEquals(123 times,vars.getObject(OUTVAR_g0));
  assertEquals(123,vars.getObject(OUTVAR_g1));
  assertEquals(times,vars.getObject(OUTVAR_g2));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestRegexFunction.java",113
753,"'-tryline","@Test public void testVariableExtractionFromVariable2() throws Exception {
  params=new LinkedList<>();
  params.add(new CompoundVariable((\\d+)\\s+(\\w+)));
  params.add(new CompoundVariable($1$$2$));
  params.add(new CompoundVariable(1));
  params.add(new CompoundVariable(-));
  params.add(new CompoundVariable(default));
  params.add(new CompoundVariable(OUTVAR));
  params.add(new CompoundVariable(INPUT_VARIABLE_NAME));
  variable.setParameters(params);
  String match=variable.execute(result,null);
  assertEquals(1,vars.getObject(OUTVAR_matchNr));
  assertEquals(123times,match);
  assertEquals(123times,vars.getObject(OUTVAR));
  assertEquals(123 times,vars.getObject(OUTVAR_g0));
  assertEquals(123,vars.getObject(OUTVAR_g1));
  assertEquals(times,vars.getObject(OUTVAR_g2));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestRegexFunction.java",133
754,"'-tryline","@Test public void testVariableExtractionFromVariable3() throws Exception {
  params=new LinkedList<>();
  params.add(new CompoundVariable((\\d+)\\s+(\\w+)));
  params.add(new CompoundVariable(pre$2$post));
  params.add(new CompoundVariable(1));
  params.add(new CompoundVariable(-));
  params.add(new CompoundVariable(default));
  params.add(new CompoundVariable(OUTVAR));
  params.add(new CompoundVariable(INPUT_VARIABLE_NAME));
  variable.setParameters(params);
  String match=variable.execute(result,null);
  assertEquals(1,vars.getObject(OUTVAR_matchNr));
  assertEquals(pretimespost,match);
  assertEquals(pretimespost,vars.getObject(OUTVAR));
  assertEquals(123 times,vars.getObject(OUTVAR_g0));
  assertEquals(123,vars.getObject(OUTVAR_g1));
  assertEquals(times,vars.getObject(OUTVAR_g2));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestRegexFunction.java",153
755,"'-tryline","@Test public void testVariableExtractionFromVariable4() throws Exception {
  params=new LinkedList<>();
  params.add(new CompoundVariable((\\d+)\\s+(\\w+)));
  params.add(new CompoundVariable(pre$2$));
  params.add(new CompoundVariable(1));
  params.add(new CompoundVariable(-));
  params.add(new CompoundVariable(default));
  params.add(new CompoundVariable(OUTVAR));
  params.add(new CompoundVariable(INPUT_VARIABLE_NAME));
  variable.setParameters(params);
  String match=variable.execute(result,null);
  assertEquals(1,vars.getObject(OUTVAR_matchNr));
  assertEquals(pretimes,match);
  assertEquals(pretimes,vars.getObject(OUTVAR));
  assertEquals(123 times,vars.getObject(OUTVAR_g0));
  assertEquals(123,vars.getObject(OUTVAR_g1));
  assertEquals(times,vars.getObject(OUTVAR_g2));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestRegexFunction.java",173
756,"'-tryline","@Test public void testVariableExtractionFromVariable5() throws Exception {
  params=new LinkedList<>();
  params.add(new CompoundVariable((\\d+)\\s+(\\w+)));
  params.add(new CompoundVariable($2$post));
  params.add(new CompoundVariable(1));
  params.add(new CompoundVariable(-));
  params.add(new CompoundVariable(default));
  params.add(new CompoundVariable(OUTVAR));
  params.add(new CompoundVariable(INPUT_VARIABLE_NAME));
  variable.setParameters(params);
  String match=variable.execute(result,null);
  assertEquals(1,vars.getObject(OUTVAR_matchNr));
  assertEquals(timespost,match);
  assertEquals(timespost,vars.getObject(OUTVAR));
  assertEquals(123 times,vars.getObject(OUTVAR_g0));
  assertEquals(123,vars.getObject(OUTVAR_g1));
  assertEquals(times,vars.getObject(OUTVAR_g2));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestRegexFunction.java",193
757,"'-tryline","@Test public void testVariableExtractionFromVariable6() throws Exception {
  params=new LinkedList<>();
  params.add(new CompoundVariable((\\d+)\\s+(\\w+)));
  params.add(new CompoundVariable($2$$2$));
  params.add(new CompoundVariable(1));
  params.add(new CompoundVariable(-));
  params.add(new CompoundVariable(default));
  params.add(new CompoundVariable(OUTVAR));
  params.add(new CompoundVariable(INPUT_VARIABLE_NAME));
  variable.setParameters(params);
  String match=variable.execute(result,null);
  assertEquals(1,vars.getObject(OUTVAR_matchNr));
  assertEquals(timestimes,match);
  assertEquals(timestimes,vars.getObject(OUTVAR));
  assertEquals(123 times,vars.getObject(OUTVAR_g0));
  assertEquals(123,vars.getObject(OUTVAR_g1));
  assertEquals(times,vars.getObject(OUTVAR_g2));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestRegexFunction.java",213
758,"'-tryline","@Test public void testVariableExtractionFromVariable7() throws Exception {
  params=new LinkedList<>();
  params.add(new CompoundVariable((\\d+)\\s+(\\w+)));
  params.add(new CompoundVariable(pre$1$mid$2$post));
  params.add(new CompoundVariable(1));
  params.add(new CompoundVariable(-));
  params.add(new CompoundVariable(default));
  params.add(new CompoundVariable(OUTVAR));
  params.add(new CompoundVariable(INPUT_VARIABLE_NAME));
  variable.setParameters(params);
  String match=variable.execute(result,null);
  assertEquals(1,vars.getObject(OUTVAR_matchNr));
  assertEquals(pre123midtimespost,match);
  assertEquals(pre123midtimespost,vars.getObject(OUTVAR));
  assertEquals(123 times,vars.getObject(OUTVAR_g0));
  assertEquals(123,vars.getObject(OUTVAR_g1));
  assertEquals(times,vars.getObject(OUTVAR_g2));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestRegexFunction.java",233
759,"'-tryline","@Test public void testVariableExtractionFromVariable8() throws Exception {
  params=new LinkedList<>();
  params.add(new CompoundVariable((\\d+)\\s+(\\w+)));
  params.add(new CompoundVariable(pre$1$mid$2$));
  params.add(new CompoundVariable(1));
  params.add(new CompoundVariable(-));
  params.add(new CompoundVariable(default));
  params.add(new CompoundVariable(OUTVAR));
  params.add(new CompoundVariable(INPUT_VARIABLE_NAME));
  variable.setParameters(params);
  String match=variable.execute(result,null);
  assertEquals(1,vars.getObject(OUTVAR_matchNr));
  assertEquals(pre123midtimes,match);
  assertEquals(pre123midtimes,vars.getObject(OUTVAR));
  assertEquals(123 times,vars.getObject(OUTVAR_g0));
  assertEquals(123,vars.getObject(OUTVAR_g1));
  assertEquals(times,vars.getObject(OUTVAR_g2));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestRegexFunction.java",253
760,"'-tryline","@Test public void testVariableExtractionFromVariable9() throws Exception {
  params=new LinkedList<>();
  params.add(new CompoundVariable((\\d+)\\s+(\\w+)));
  params.add(new CompoundVariable($1$mid$2$post));
  params.add(new CompoundVariable(1));
  params.add(new CompoundVariable(-));
  params.add(new CompoundVariable(default));
  params.add(new CompoundVariable(OUTVAR));
  params.add(new CompoundVariable(INPUT_VARIABLE_NAME));
  variable.setParameters(params);
  String match=variable.execute(result,null);
  assertEquals(1,vars.getObject(OUTVAR_matchNr));
  assertEquals(123midtimespost,match);
  assertEquals(123midtimespost,vars.getObject(OUTVAR));
  assertEquals(123 times,vars.getObject(OUTVAR_g0));
  assertEquals(123,vars.getObject(OUTVAR_g1));
  assertEquals(times,vars.getObject(OUTVAR_g2));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestRegexFunction.java",273
761,"'-tryline","@Test public void testVariableExtraction2() throws Exception {
  params=new LinkedList<>();
  params.add(new CompoundVariable(<value field=\(pinposition\\d+)\>(\\d+)</value>));
  params.add(new CompoundVariable($1$));
  params.add(new CompoundVariable(3));
  variable.setParameters(params);
  String match=variable.execute(result,null);
  assertEquals(pinposition3,match);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestRegexFunction.java",293
762,"'-tryline","@Test public void testVariableExtraction5() throws Exception {
  params=new LinkedList<>();
  params.add(new CompoundVariable(<value field=\(pinposition\\d+)\>(\\d+)</value>));
  params.add(new CompoundVariable($1$));
  params.add(new CompoundVariable(ALL));
  params.add(new CompoundVariable(_));
  variable.setParameters(params);
  String match=variable.execute(result,null);
  assertEquals(pinposition1_pinposition2_pinposition3,match);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestRegexFunction.java",304
763,"'-tryline","@Test public void testVariableExtraction6() throws Exception {
  params=new LinkedList<>();
  params.add(new CompoundVariable(<value field=\(pinposition\\d+)\>(\\d+)</value>));
  params.add(new CompoundVariable($2$));
  params.add(new CompoundVariable(4));
  params.add(new CompoundVariable());
  params.add(new CompoundVariable(default));
  variable.setParameters(params);
  String match=variable.execute(result,null);
  assertEquals(default,match);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestRegexFunction.java",316
764,"'-tryline","@Test public void testComma() throws Exception {
  params=new LinkedList<>();
  params.add(new CompoundVariable(<value,? field=\(pinposition\\d+)\>(\\d+)</value>));
  params.add(new CompoundVariable($1$));
  params.add(new CompoundVariable(3));
  variable.setParameters(params);
  String match=variable.execute(result,null);
  assertEquals(pinposition3,match);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestRegexFunction.java",329
765,"'-tryline","@Test public void testVariableExtraction3() throws Exception {
  params=new LinkedList<>();
  params.add(new CompoundVariable(<value field=\(pinposition\\d+)\>(\\d+)</value>));
  params.add(new CompoundVariable(_$1$));
  params.add(new CompoundVariable(2));
  variable.setParameters(params);
  String match=variable.execute(result,null);
  assertEquals(_pinposition2,match);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestRegexFunction.java",340
766,"'-tryline","@Test public void testExtractionIndexTooHigh() throws Exception {
  params=new LinkedList<>();
  params.add(new CompoundVariable(<value field=\(pinposition\\d+)\>(\\d+)</value>));
  params.add(new CompoundVariable(_$1$));
  params.add(new CompoundVariable(10));
  params.add(new CompoundVariable());
  params.add(new CompoundVariable(No Value Found));
  variable.setParameters(params);
  String match=variable.execute(result,null);
  assertEquals(No Value Found,match);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestRegexFunction.java",351
767,"'-tryline","@Test public void testRandomExtraction() throws Exception {
  params=new LinkedList<>();
  params.add(new CompoundVariable(<company-xmlext-query-ret>(.+?)</company-xmlext-query-ret>));
  params.add(new CompoundVariable($1$));
  params.add(new CompoundVariable(RAND));
  params.add(new CompoundVariable());
  params.add(new CompoundVariable(No Value Found));
  variable.setParameters(params);
  String match=variable.execute(result,null);
  assertEquals(<row> + <value field=\RetCode\> + LIS_OK</value><value+  field=\RetCodeExtension\></value>+ <value field=\alias\></value><value+  field=\positioncount\></value>+ <value field=\invalidpincount\>0</value><value+  field=\pinposition1\>1</value><value+  field=\pinpositionvalue1\></value><value+  field=\pinposition2\>5</value><value+  field=\pinpositionvalue2\></value><value+  field=\pinposition3\>6</value><value+  field=\pinpositionvalue3\></value>+ </row>,match);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestRegexFunction.java",364
768,"'-tryline","@Test public void testExtractionIndexNotNumeric() throws Exception {
  params=new LinkedList<>();
  params.add(new CompoundVariable(<value field=\(pinposition\\d+)\>(\\d+)</value>));
  params.add(new CompoundVariable(_$1$));
  params.add(new CompoundVariable(0.333a));
  params.add(new CompoundVariable());
  params.add(new CompoundVariable(No Value Found));
  variable.setParameters(params);
  Assertions.assertThrows(Exception.class,() -> variable.execute(result,null));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestRegexFunction.java",383
769,"'-tryline","@Test public void testVariableExtraction4() throws Exception {
  params=new LinkedList<>();
  params.add(new CompoundVariable(<value field=\(pinposition\\d+)\>(\\d+)</value>));
  params.add(new CompoundVariable($2$, ));
  params.add(new CompoundVariable(.333));
  variable.setParameters(params);
  String match=variable.execute(result,null);
  assertEquals(1, ,match);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestRegexFunction.java",397
770,"'-tryline","@Test public void testDefaultValue() throws Exception {
  params=new LinkedList<>();
  params.add(new CompoundVariable(<value,, field=\(pinposition\\d+)\>(\\d+)</value>));
  params.add(new CompoundVariable($2$, ));
  params.add(new CompoundVariable(.333));
  params.add(new CompoundVariable());
  params.add(new CompoundVariable(No Value Found));
  variable.setParameters(params);
  String match=variable.execute(result,null);
  assertEquals(No Value Found,match);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestRegexFunction.java",408
771,"'-tryline","@Test public void testSamplerName() throws Exception {
  variable.setParameters(params);
  TestSampler sampler=new TestSampler(UnitTestSampler);
  value=variable.execute(result,sampler);
  assertEquals(UnitTestSampler,value);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestSamplerNameFunction.java",55
772,"'-tryline","@Test public void testSamplerNameWithVar() throws Exception {
  variable.setParameters(params);
  TestSampler sampler=new TestSampler(UnitTestSampler);
  variable.setParameters(FunctionTestHelper.makeParams(var1));
  value=variable.execute(result,sampler);
  assertEquals(UnitTestSampler,value);
  assertEquals(UnitTestSampler,vars.get(var1));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestSamplerNameFunction.java",63
773,"'-tryline","@Test public void testParameterCount() throws Exception {
  checkInvalidParameterCounts(function,2,3);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestSetProperty.java",58
774,"'-tryline","@Test public void testSetPropertyNoReturn() throws Exception {
  params.add(new CompoundVariable(prop1));
  params.add(new CompoundVariable(value1));
  function.setParameters(params);
  String returnValue=function.execute(result,null);
  assertEquals(value1,JMeterUtils.getProperty(prop1));
  assertEquals(,returnValue);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestSetProperty.java",63
775,"'-tryline","@Test public void testSetPropertyWithReturn() throws Exception {
  params.add(new CompoundVariable(prop1));
  params.add(new CompoundVariable(value1));
  params.add(new CompoundVariable(true));
  function.setParameters(params);
  String returnValue=function.execute(result,null);
  assertEquals(value1,JMeterUtils.getProperty(prop1));
  Assert.assertNull(returnValue);
  params.clear();
  params.add(new CompoundVariable(prop1));
  params.add(new CompoundVariable(value2));
  params.add(new CompoundVariable(true));
  function.setParameters(params);
  returnValue=function.execute(result,null);
  assertEquals(value2,JMeterUtils.getProperty(prop1));
  assertEquals(value1,returnValue);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestSetProperty.java",73
776,"'-tryline","@Test public void testUUIDParameterCount() throws Exception {
  AbstractFunction function=new Uuid();
  checkInvalidParameterCounts(function,0,0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestSimpleFunctions.java",59
777,"'-tryline","@Test public void testThreadNumberParameterCount() throws Exception {
  AbstractFunction function=new ThreadNumber();
  checkInvalidParameterCounts(function,0,0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestSimpleFunctions.java",65
778,"'-tryline","@Test public void testEscapeHtmlParameterCount() throws Exception {
  AbstractFunction function=new EscapeHtml();
  checkInvalidParameterCounts(function,1,1);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestSimpleFunctions.java",71
779,"'-tryline","@Test public void testUnEscapeHtmlParameterCount() throws Exception {
  AbstractFunction function=new UnEscapeHtml();
  checkInvalidParameterCounts(function,1,1);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestSimpleFunctions.java",77
780,"'-tryline","@Test public void testEscapeXmlParameterCount() throws Exception {
  AbstractFunction function=new EscapeXml();
  checkInvalidParameterCounts(function,1,1);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestSimpleFunctions.java",83
781,"'-tryline","@Test public void testUnEscapeParameterCount() throws Exception {
  AbstractFunction function=new UnEscape();
  checkInvalidParameterCounts(function,1,1);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestSimpleFunctions.java",89
782,"'-tryline","@Test public void testTestPlanParameterCount() throws Exception {
  AbstractFunction function=new TestPlanName();
  checkInvalidParameterCounts(function,0,0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestSimpleFunctions.java",95
783,"'-tryline","@Test public void testThreadNumber() throws Exception {
  AbstractFunction function=new ThreadNumber();
  function.setParameters(params);
  String ret=function.execute(result,null);
  assertEquals(1,ret);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestSimpleFunctions.java",101
784,"'-tryline","@Test public void testUuid() throws Exception {
  AbstractFunction function=new Uuid();
  function.setParameters(params);
  String ret=function.execute(result,null);
  UUID.fromString(ret);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestSimpleFunctions.java",109
785,"'-tryline","@Test public void testEscapeHtml() throws Exception {
  AbstractFunction function=new EscapeHtml();
  params.add(new CompoundVariable(\bread\ & \butter\));
  function.setParameters(params);
  String ret=function.execute(result,null);
  assertEquals(&quot;bread&quot; &amp; &quot;butter&quot;,ret);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestSimpleFunctions.java",117
786,"'-tryline","@Test public void testUnEscapeHtml() throws Exception {
  AbstractFunction function=new UnEscapeHtml();
  params.add(new CompoundVariable(&quot;bread&quot; &amp; &quot;butter&quot;));
  function.setParameters(params);
  String ret=function.execute(result,null);
  assertEquals(\bread\ & \butter\,ret);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestSimpleFunctions.java",126
787,"'-tryline","@Test public void testUnEscapeHtml2() throws Exception {
  AbstractFunction function=new UnEscapeHtml();
  params.add(new CompoundVariable(&lt;Fran&ccedil;ais&gt;));
  function.setParameters(params);
  String ret=function.execute(result,null);
  assertEquals(<FranÃ§ais>,ret);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestSimpleFunctions.java",135
788,"'-tryline","@Test public void testUnEscapeHtml3() throws Exception {
  AbstractFunction function=new UnEscapeHtml();
  params.add(new CompoundVariable(&gt;&zzzz;x));
  function.setParameters(params);
  String ret=function.execute(result,null);
  assertEquals(>&zzzz;x,ret);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestSimpleFunctions.java",144
789,"'-tryline","@Test public void testEscapeXml() throws Exception {
  AbstractFunction function=new EscapeXml();
  params.add(new CompoundVariable(\bread\ & <'butter'>));
  function.setParameters(params);
  String ret=function.execute(result,null);
  assertEquals(&quot;bread&quot; &amp; &lt;&apos;butter&apos;&gt;,ret);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestSimpleFunctions.java",153
790,"'-tryline","@Test public void testTestPlanName() throws Exception {
  AbstractFunction function=new TestPlanName();
  try {
    FileServer.getFileServer().setScriptName(Test);
    function.setParameters(params);
    String ret=function.execute(result,null);
    assertEquals(Test,ret);
  }
  finally {
    FileServer.getFileServer().setScriptName(null);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestSimpleFunctions.java",162
791,"'-tryline","@Test public void testThreadGroupName() throws Exception {
  AbstractFunctionByKey function=new ThreadGroupName();
  try {
    TestSampler httpRequest=new TestSampler();
    ThreadGroup threadGroup=new ThreadGroup();
    threadGroup.setName(ThreadGroup-1);
    JMeterContext context=JMeterContextService.getContext();
    context.setCurrentSampler(httpRequest);
    context.setThreadGroup(threadGroup);
    String ret=function.execute(result,httpRequest);
    assertEquals(ThreadGroup-1,ret);
  }
  finally {
    FileServer.getFileServer().setScriptName(null);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestSimpleFunctions.java",175
792,"'-tryline","@Test public void testThreadGroupNameBug63241() throws Exception {
  AbstractFunctionByKey function=new ThreadGroupName();
  try {
    TestSampler httpRequest=new TestSampler();
    JMeterContext context=JMeterContextService.getContext();
    context.setThreadGroup(null);
    context.setCurrentSampler(httpRequest);
    String ret=function.execute(result,httpRequest);
    assertEquals(,ret);
  }
  finally {
    FileServer.getFileServer().setScriptName(null);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestSimpleFunctions.java",192
793,"'-tryline","@Test public void testThreadGroupNameParameterCount() throws Exception {
  AbstractFunctionByKey function=new ThreadGroupName();
  checkInvalidParameterCounts(function,0,0);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestSimpleFunctions.java",208
794,"'-tryline","@Test public void testParameterCount() throws Exception {
  checkInvalidParameterCounts(function,2,4);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestStringtoFile.java",62
795,"'-tryline","@Test public void testWriteToFile(@TempDir Path tempDir) throws Exception {
  String tempAbsolutePath=tempDir.resolve(output.txt).toAbsolutePath().toString();
  function.setParameters(functionParams(tempAbsolutePath,STRING_TO_WRITE,true,ENCODING));
  String returnValue=function.execute(result,null);
  assertTrue(Boolean.parseBoolean(returnValue),This method 'Stringtofile' should have successfully run);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestStringtoFile.java",67
796,"'-tryline","@Test public void testWriteToFileWhenDirectoryDoesntExist() throws Exception {
  String pathname=Paths.get(/does/not.exist,FILENAME).toString();
  function.setParameters(functionParams(pathname,STRING_TO_WRITE,true,ENCODING));
  String returnValue=function.execute(result,null);
  assertFalse(Boolean.parseBoolean(returnValue),This method 'Stringtofile' should fail to run since directory does not exist);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestStringtoFile.java",76
797,"'-tryline","@Test public void testWriteToFileWhenDirectoryExist(@TempDir Path tempDir) throws Exception {
  String pathname=tempDir.resolve(FILENAME).toString();
  function.setParameters(functionParams(pathname,STRING_TO_WRITE,true,ENCODING));
  String returnValue=function.execute(result,null);
  assertTrue(Boolean.parseBoolean(returnValue),This method 'Stringtofile' should have successfully run if parent directory already exists);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestStringtoFile.java",85
798,"'-tryline","@Test public void testWriteToFileOptParamWayToWriteIsNull(@TempDir Path tempDir) throws Exception {
  String tempAbsolutePath=tempDir.resolve(output.txt).toAbsolutePath().toString();
  function.setParameters(functionParams(tempAbsolutePath,STRING_TO_WRITE));
  String returnValue=function.execute(result,null);
  assertTrue(Boolean.parseBoolean(returnValue),This method 'Stringtofile' should have successfully run with empty append);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestStringtoFile.java",94
799,"'-tryline","@Test public void testWriteToFileOptParamEncodingIsNull(@TempDir Path tempDir) throws Exception {
  String tempAbsolutePath=tempDir.resolve(output.txt).toAbsolutePath().toString();
  function.setParameters(functionParams(tempAbsolutePath,STRING_TO_WRITE,true));
  String returnValue=function.execute(result,null);
  assertTrue(Boolean.parseBoolean(returnValue),This method 'Stringtofile' should have successfully run with no charset);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestStringtoFile.java",103
800,"'-tryline","@Test public void testWriteToFileEncodingNotSupported(@TempDir Path tempDir) throws Exception {
  String tempAbsolutePath=tempDir.resolve(output.txt).toAbsolutePath().toString();
  function.setParameters(functionParams(tempAbsolutePath,STRING_TO_WRITE,true,UTF-20));
  String returnValue=function.execute(result,null);
  assertFalse(Boolean.parseBoolean(returnValue),This method 'Stringtofile' should have failed to run with wrong charset);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestStringtoFile.java",112
801,"'-tryline","@Test public void testWriteToFileEncodingNotLegal(@TempDir Path tempDir) throws Exception {
  String tempAbsolutePath=tempDir.resolve(output.txt).toAbsolutePath().toString();
  function.setParameters(functionParams(tempAbsolutePath,STRING_TO_WRITE,true,UTFÃ©Ã©));
  String returnValue=function.execute(result,null);
  assertFalse(Boolean.parseBoolean(returnValue),This method 'Stringtofile' should have failed to run with illegal chars in charset);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestStringtoFile.java",121
802,"'-tryline","@Test public void testWriteToFileIOException(@TempDir Path tempDir) throws Exception {
  File file=new File(tempDir.toAbsolutePath() + /output.txt);
  try {
    assertTrue(file.createNewFile() && file.setWritable(false),file +  should be set read-only);
    String tempAbsolutePath=file.getAbsolutePath();
    function.setParameters(functionParams(tempAbsolutePath,STRING_TO_WRITE,true,ENCODING));
    String returnValue=function.execute(result,null);
    assertFalse(Boolean.parseBoolean(returnValue),This method 'Stringtofile' should have failed to run with non writable folder);
  }
  finally {
    file.setWritable(true);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestStringtoFile.java",130
803,"'-tryline","@Test public void testWriteToFileRequiredFilePathIsNull() throws Exception {
  function.setParameters(functionParams(null,STRING_TO_WRITE,true,ENCODING));
  String returnValue=function.execute(result,null);
  assertFalse(Boolean.parseBoolean(returnValue),This method 'Stringtofile' should fail to run with null file);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestStringtoFile.java",145
804,"'-tryline","@Test public void testWriteToFileRequiredStringIsNull(@TempDir Path tempDir) throws Exception {
  String tempAbsolutePath=tempDir.resolve(output.txt).toAbsolutePath().toString();
  function.setParameters(functionParams(tempAbsolutePath,,true,ENCODING));
  String returnValue=function.execute(result,null);
  assertTrue(Boolean.parseBoolean(returnValue),This method 'Stringtofile' should succeed with empty String to write);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestStringtoFile.java",153
805,"'-tryline","@Test public void testOverwrite(@TempDir Path tempDir) throws Exception {
  Path file=tempDir.resolve(output.txt);
  String tempAbsolutePath=file.toAbsolutePath().toString();
  function.setParameters(functionParams(tempAbsolutePath,STRING_TO_WRITE,false,ENCODING));
  String returnValue=function.execute(result,null);
  assertTrue(Boolean.parseBoolean(returnValue),This method 'Stringtofile' should have successfully run);
  String res=new String(Files.readAllBytes(file),StandardCharsets.UTF_8).trim();
  assertEquals(test,res,The string should be 'test');
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestStringtoFile.java",162
806,"'-tryline","@Test public void testAppend(@TempDir Path tempDir) throws Exception {
  Path file=tempDir.resolve(output.txt);
  String tempAbsolutePath=file.toAbsolutePath().toString();
  function.setParameters(functionParams(tempAbsolutePath,STRING_TO_WRITE,true,ENCODING));
  assertTrue(Boolean.parseBoolean(function.execute(result,null)),First call to 'Stringtofile' should succeed);
  assertTrue(Boolean.parseBoolean(function.execute(result,null)),Second call to 'Stringtofile' should succeed);
  String res=new String(Files.readAllBytes(file),StandardCharsets.UTF_8).trim();
  assertEquals(testtest,res);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestStringtoFile.java",173
807,"'-tryline","@Test public void testLineBreak(@TempDir Path tempDir) throws Exception {
  Path file=tempDir.resolve(output.txt);
  String tempAbsolutePath=file.toAbsolutePath().toString();
  function.setParameters(functionParams(tempAbsolutePath,test\\\\ntest,true,ENCODING));
  function.execute();
  String res=new String(Files.readAllBytes(file),StandardCharsets.UTF_8).trim();
  assertEquals(test + System.lineSeparator() + test,res,When the user type '\n', ine break should be saved in file);
  assertTrue(res.contains(System.lineSeparator()),When the user type '\\n',line break should be saved in file);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestStringtoFile.java",196
808,"'-tryline","@Test public void testDefault() throws Exception {
  variable.setParameters(params);
  long before=System.currentTimeMillis();
  value=variable.execute(result,null);
  long now=Long.parseLong(value);
  long after=System.currentTimeMillis();
  assertTrue(now >= before && now <= after);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeFunction.java",58
809,"'-tryline","@Test public void testDefault1() throws Exception {
  params.add(new CompoundVariable());
  variable.setParameters(params);
  long before=System.currentTimeMillis();
  value=variable.execute(result,null);
  long now=Long.parseLong(value);
  long after=System.currentTimeMillis();
  assertTrue(now >= before && now <= after);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeFunction.java",68
810,"'-tryline","@Test public void testDefault2() throws Exception {
  params.add(new CompoundVariable());
  params.add(new CompoundVariable());
  variable.setParameters(params);
  long before=System.currentTimeMillis();
  value=variable.execute(result,null);
  long now=Long.parseLong(value);
  long after=System.currentTimeMillis();
  assertTrue(now >= before && now <= after);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeFunction.java",79
811,"'-tryline","@Test public void testDefaultNone() throws Exception {
  long before=System.currentTimeMillis();
  value=variable.execute(result,null);
  long now=Long.parseLong(value);
  long after=System.currentTimeMillis();
  assertTrue(now >= before && now <= after);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeFunction.java",91
812,"'-tryline","@Test public void testTooMany() throws Exception {
  params.add(new CompoundVariable(YMD));
  params.add(new CompoundVariable(NAME));
  params.add(new CompoundVariable(YMD));
  try {
    variable.setParameters(params);
    fail(Should have raised InvalidVariableException);
  }
 catch (  InvalidVariableException ignored) {
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeFunction.java",100
813,"'-tryline","@Test public void testYMD() throws Exception {
  params.add(new CompoundVariable(YMD));
  params.add(new CompoundVariable(NAME));
  variable.setParameters(params);
  value=variable.execute(result,null);
  assertEquals(8,value.length());
  assertEquals(value,vars.get(NAME));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeFunction.java",112
814,"'-tryline","@Test public void testYMDnoV() throws Exception {
  params.add(new CompoundVariable(YMD));
  variable.setParameters(params);
  value=variable.execute(result,null);
  assertEquals(8,value.length());
  assertNull(vars.get(NAME));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeFunction.java",122
815,"'-tryline","@Test public void testHMS() throws Exception {
  params.add(new CompoundVariable(HMS));
  variable.setParameters(params);
  value=variable.execute(result,null);
  assertEquals(6,value.length());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeFunction.java",131
816,"'-tryline","@Test public void testYMDHMS() throws Exception {
  params.add(new CompoundVariable(YMDHMS));
  variable.setParameters(params);
  value=variable.execute(result,null);
  assertEquals(15,value.length());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeFunction.java",139
817,"'-tryline","@Test public void testUSER1() throws Exception {
  params.add(new CompoundVariable(USER1));
  variable.setParameters(params);
  value=variable.execute(result,null);
  assertEquals(0,value.length());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeFunction.java",147
818,"'-tryline","@Test public void testUSER2() throws Exception {
  params.add(new CompoundVariable(USER2));
  variable.setParameters(params);
  value=variable.execute(result,null);
  assertEquals(0,value.length());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeFunction.java",155
819,"'-tryline","@Test public void testFixed() throws Exception {
  params.add(new CompoundVariable('Fixed text'));
  variable.setParameters(params);
  value=variable.execute(result,null);
  assertEquals(Fixed text,value);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeFunction.java",163
820,"'-tryline","@Test public void testMixed() throws Exception {
  params.add(new CompoundVariable(G));
  variable.setParameters(params);
  Locale locale=Locale.getDefault();
  Locale.setDefault(Locale.ENGLISH);
  value=variable.execute(result,null);
  Locale.setDefault(locale);
  assertEquals(AD,value);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeFunction.java",171
821,"'-tryline","@Test public void testDivisor() throws Exception {
  params.add(new CompoundVariable(/1000));
  variable.setParameters(params);
  long before=System.currentTimeMillis() / 1000;
  value=variable.execute(result,null);
  long now=Long.parseLong(value);
  long after=System.currentTimeMillis() / 1000;
  assertTrue(now >= before && now <= after);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeFunction.java",182
822,"'-tryline","@Test public void testDivisorNoMatch() throws Exception {
  params.add(new CompoundVariable(/1000 ));
  variable.setParameters(params);
  value=variable.execute(result,null);
  assertEquals(/1000 ,value);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeFunction.java",193
823,"'-tryline","@Test public void testParameterCount() throws Exception {
  checkInvalidParameterCounts(function,3,5);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeRandomDateFunction.java",58
824,"'-tryline","@Test public void testDefault() throws Exception {
  String endDate=2099-01-01;
  String formatDate=yyyy-dd-MM;
  DateTimeFormatter formatter=DateTimeFormatter.ofPattern(formatDate);
  Collection<CompoundVariable> params=makeParams(formatDate,,endDate,,);
  function.setParameters(params);
  value=function.execute(result,null);
  LocalDate result=LocalDate.parse(value,formatter);
  LocalDate now=LocalDate.now();
  LocalDate max=LocalDate.parse(endDate,formatter);
  assertTrue(now.isBefore(result) && result.isBefore(max));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeRandomDateFunction.java",63
825,"'-tryline","@Test public void testDefault2() throws Exception {
  String endDate=2099-01-01;
  Collection<CompoundVariable> params=makeParams(yyyy-dd-MM,,endDate,,);
  function.setParameters(params);
  value=function.execute(result,null);
  assertEquals(10,value.length());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeRandomDateFunction.java",77
826,"'-tryline","@Test public void testFormatDate() throws Exception {
  String endDate=01 01 2099;
  String formatDate=dd MM yyyy;
  DateTimeFormatter formatter=DateTimeFormatter.ofPattern(formatDate);
  Collection<CompoundVariable> params=makeParams(formatDate,,endDate,,);
  function.setParameters(params);
  value=function.execute(result,null);
  LocalDate result=LocalDate.parse(value,formatter);
  LocalDate now=LocalDate.now();
  LocalDate max=LocalDate.parse(endDate,formatter);
  assertTrue(now.isBefore(result) && result.isBefore(max));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeRandomDateFunction.java",86
827,"'-tryline","@Test public void testFormatDate2() throws Exception {
  String endDate=01012099;
  String formatDate=ddMMyyyy;
  Collection<CompoundVariable> params=makeParams(formatDate,,endDate,,);
  function.setParameters(params);
  value=function.execute(result,null);
  assertEquals(8,value.length());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeRandomDateFunction.java",100
828,"'-tryline","@Test public void testFormatDate3() throws Exception {
  String startDate=29 Aug 2111;
  String endDate=30 Aug 2111;
  String formatDate=dd MMM yyyy;
  String localeAsString=en_EN;
  Collection<CompoundVariable> params=makeParams(formatDate,startDate,endDate,localeAsString,);
  function.setParameters(params);
  value=function.execute(result,null);
  assertThat(value,is(equalTo(29 Aug 2111)));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeRandomDateFunction.java",110
829,"'-tryline","@Test public void testFrenchFormatDate() throws Exception {
  String startDate=29 mars 2111;
  String endDate=30 mars 2111;
  String formatDate=dd MMM yyyy;
  String localeAsString=fr_FR;
  Collection<CompoundVariable> params=makeParams(formatDate,startDate,endDate,localeAsString,);
  function.setParameters(params);
  value=function.execute(result,null);
  assertThat(value,is(equalTo(29 mars 2111)));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeRandomDateFunction.java",122
830,"'-tryline","@Test public void testEmptyFormatDate() throws Exception {
  String startDate=2111-03-29;
  String endDate=2111-03-30;
  String formatDate=;
  String localeAsString=en;
  Collection<CompoundVariable> params=makeParams(formatDate,startDate,endDate,localeAsString,);
  function.setParameters(params);
  value=function.execute(result,null);
  assertThat(value,is(equalTo(2111-03-29)));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeRandomDateFunction.java",134
831,"'-tryline","@Test public void testEndDateBeforeStartDate() throws Exception {
  String startDate=2111-03-29;
  String endDate=2011-03-30;
  String formatDate=;
  String localeAsString=en;
  Collection<CompoundVariable> params=makeParams(formatDate,startDate,endDate,localeAsString,);
  function.setParameters(params);
  value=function.execute(result,null);
  assertThat(value,is(equalTo()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeRandomDateFunction.java",146
832,"'-tryline","@Test public void testEndDateBeforeStartDateNullVariable() throws Exception {
  String startDate=2111-03-29;
  String endDate=2111-03-30;
  String formatDate=;
  String localeAsString=en;
  Collection<CompoundVariable> params=makeParams(formatDate,startDate,endDate,localeAsString,null);
  function.setParameters(params);
  value=function.execute(result,null);
  assertThat(value,is(equalTo(2111-03-29)));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeRandomDateFunction.java",158
833,"'-tryline","@Test public void testEndDateBeforeStartDateWithVariable() throws Exception {
  String startDate=2111-03-29;
  String endDate=2111-03-30;
  String formatDate=;
  String localeAsString=en;
  Collection<CompoundVariable> params=makeParams(formatDate,startDate,endDate,localeAsString,MY_VAR);
  function.setParameters(params);
  value=function.execute(result,null);
  assertThat(value,is(equalTo(2111-03-29)));
  assertThat(vars.get(MY_VAR),is(equalTo(2111-03-29)));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeRandomDateFunction.java",170
834,"'-tryline","@Test public void testInvalidFormat() throws Exception {
  String startDate=2111-03-29;
  String endDate=2011-03-30;
  String formatDate=abcd;
  String localeAsString=en;
  Collection<CompoundVariable> params=makeParams(formatDate,startDate,endDate,localeAsString,);
  function.setParameters(params);
  value=function.execute(result,null);
  assertThat(value,is(equalTo()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeRandomDateFunction.java",183
835,"'-tryline","@Test public void testInvalidStartDateFormat() throws Exception {
  String startDate=23-2111-03;
  String endDate=2011-03-30;
  String formatDate=abcd;
  String localeAsString=en;
  Collection<CompoundVariable> params=makeParams(formatDate,startDate,endDate,localeAsString,);
  function.setParameters(params);
  value=function.execute(result,null);
  assertThat(value,is(equalTo()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeRandomDateFunction.java",195
836,"'-tryline","@Test public void testInvalidEndDateFormat() throws Exception {
  String startDate=2011-03-30;
  String endDate=23-2111-03;
  String formatDate=abcd;
  String localeAsString=en;
  Collection<CompoundVariable> params=makeParams(formatDate,startDate,endDate,localeAsString,);
  function.setParameters(params);
  value=function.execute(result,null);
  assertThat(value,is(equalTo()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeRandomDateFunction.java",207
837,"'-tryline","@Test public void testDatePlusOneDay() throws Exception {
  Collection<CompoundVariable> params=makeParams(yyyy-dd-MM,2017-01-01,P1D,);
  function.setParameters(params);
  value=function.execute(result,null);
  assertThat(value,is(equalTo(2017-02-01)));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeShiftFunction.java",64
838,"'-tryline","@Test public void testDatePlusOneDayInVariable() throws Exception {
  Collection<CompoundVariable> params=makeParams(yyyy-dd-MM,2017-01-01,P1d,VAR);
  function.setParameters(params);
  function.execute(result,null);
  assertThat(vars.get(VAR),is(equalTo(2017-02-01)));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeShiftFunction.java",72
839,"'-tryline","@Test public void testDatePlusComplexPeriod() throws Exception {
  Collection<CompoundVariable> params=makeParams(yyyy-dd-MM HH:m,2017-01-01 12:00,P+32dT-1H-5m,VAR);
  function.setParameters(params);
  String value=function.execute(result,null);
  assertThat(value,is(equalTo(2017-02-02 10:55)));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeShiftFunction.java",80
840,"'-tryline","@Test public void testDefault() throws Exception {
  Collection<CompoundVariable> params=makeParams(,,,);
  function.setParameters(params);
  value=function.execute(result,null);
  long resultat=Long.parseLong(value);
  LocalDateTime nowFromFunction=LocalDateTime.ofInstant(Instant.ofEpochMilli(resultat),TimeZone.getDefault().toZoneId());
  assertThat(nowFromFunction,within(5,ChronoUnit.SECONDS,LocalDateTime.now()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeShiftFunction.java",88
841,"'-tryline","@Test public void testNowPlusOneDay() throws Exception {
  Collection<CompoundVariable> params=makeParams(yyyy-MM-dd,,P1d,);
  function.setParameters(params);
  value=function.execute(result,null);
  LocalDate tomorrow=LocalDate.now().plusDays(1);
  LocalDate tomorrowFromFunction=LocalDate.parse(value);
  assertThat(tomorrowFromFunction,sameDay(tomorrow));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeShiftFunction.java",99
842,"'-tryline","@Test public void testNowWithComplexPeriod() throws Exception {
  Collection<CompoundVariable> params=makeParams(yyyy-MM-dd'T'HH:mm:ss,,P10DT-1H-5M5S,);
  function.setParameters(params);
  value=function.execute(result,null);
  LocalDateTime futureDate=LocalDateTime.now().plusDays(10).plusHours(-1).plusMinutes(-5).plusSeconds(5);
  LocalDateTime futureDateFromFunction=LocalDateTime.parse(value);
  assertThat(futureDateFromFunction,within(1,ChronoUnit.SECONDS,futureDate));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeShiftFunction.java",109
843,"'-tryline","@Test public void testPotentialBugWithComplexPeriod() throws Exception {
  Collection<CompoundVariable> params=makeParams(yyyy-MM-dd'T'HH:mm:ss,2017-12-21T12:00:00,P10DT-1H-5M5S,);
  function.setParameters(params);
  value=function.execute(result,null);
  LocalDateTime futureDateFromFunction=LocalDateTime.parse(value);
  DateTimeFormatter dateFormat=DateTimeFormatter.ofPattern(yyyy-MM-dd' 'HH:mm:ss);
  LocalDateTime baseDate=LocalDateTime.parse(2017-12-21 12:00:00,dateFormat);
  LocalDateTime futureDate=baseDate.plusDays(10).plusHours(-1).plusMinutes(-5).plusSeconds(5);
  assertThat(futureDateFromFunction,within(1,ChronoUnit.SECONDS,futureDate));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeShiftFunction.java",119
844,"'-tryline","@Test void testShiftWithTimeZone() throws Exception {
  String pattern=yyyy-MM-dd'T'HH:mm:ss.SSSZ;
  String timeString=2017-12-21T12:00:00.000+0100;
  Collection<CompoundVariable> params=makeParams(pattern,timeString,P10DT-1H-5M5S,);
  function.setParameters(params);
  value=function.execute(result,null);
  ZonedDateTime futureDateFromFunction=ZonedDateTime.parse(value,DateTimeFormatter.ofPattern(pattern));
  DateTimeFormatter dateFormat=DateTimeFormatter.ofPattern(pattern);
  LocalDateTime baseDate=ZonedDateTime.parse(timeString,dateFormat).toLocalDateTime();
  LocalDateTime futureDate=baseDate.plusDays(10).plusHours(-1).plusMinutes(-5).plusSeconds(5);
  assertThat(futureDateFromFunction.toLocalDateTime(),within(1,ChronoUnit.SECONDS,futureDate));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeShiftFunction.java",132
845,"'-tryline","@Test public void testWrongAmountToAdd() throws Exception {
  Collection<CompoundVariable> params=makeParams(,,qefv1Psd,);
  function.setParameters(params);
  value=function.execute(result,null);
  long resultat=Long.parseLong(value);
  LocalDateTime nowFromFunction=LocalDateTime.ofInstant(Instant.ofEpochMilli(resultat),TimeZone.getDefault().toZoneId());
  assertThat(nowFromFunction,within(5,ChronoUnit.SECONDS,LocalDateTime.now()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeShiftFunction.java",152
846,"'-tryline","@Test public void testWrongFormatDate() throws Exception {
  Collection<CompoundVariable> params=makeParams(hjfdjyra:fd,,P1D,);
  function.setParameters(params);
  value=function.execute(result,null);
  assertThat(value,is(equalTo()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeShiftFunction.java",164
847,"'-tryline","@Test public void testRandomPeriod() throws Exception {
  Random r=new Random();
  int randomInt=r.ints(1,60).limit(1).findFirst().getAsInt();
  vars.put(random,String.valueOf(randomInt));
  Collection<CompoundVariable> params=makeParams(yyyy-MM-dd'T'HH:mm:ss,,PT${random}M,);
  function.setParameters(params);
  value=function.execute(result,null);
  LocalDateTime randomFutureDate=LocalDateTime.parse(value);
  LocalDateTime checkFutureDate=LocalDateTime.now().plusMinutes(randomInt);
  assertThat(randomFutureDate,within(5,ChronoUnit.SECONDS,checkFutureDate));
  randomInt=r.ints(1,60).limit(1).findFirst().getAsInt();
  vars.put(random,String.valueOf(randomInt));
  value=function.execute(result,null);
  randomFutureDate=LocalDateTime.parse(value);
  checkFutureDate=LocalDateTime.now().plusMinutes(randomInt);
  assertThat(randomFutureDate,within(5,ChronoUnit.SECONDS,checkFutureDate));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeShiftFunction.java",172
848,"'-tryline","@Test public void testNowPlusOneDayWithLocale() throws Exception {
  Collection<CompoundVariable> params=makeParams(yyyy-MMMM-dd,2017-juillet-01,P1D,fr_FR,);
  function.setParameters(params);
  value=function.execute(result,null);
  assertThat(value,is(equalTo(2017-juillet-02)));
  params=makeParams(yyyy-MMMM-dd,2017-July-01,P1D,en_EN,);
  function.setParameters(params);
  value=function.execute(result,null);
  assertThat(value,is(equalTo(2017-July-02)));
  params=makeParams(yyyy-MMMM-dd,2017-julio-01,P1D,es_ES,);
  function.setParameters(params);
  value=function.execute(result,null);
  assertThat(value,is(equalTo(2017-julio-02)));
  params=makeParams(yyyy-MMMM-dd,2017-Juli-01,P1D,de_DE,);
  function.setParameters(params);
  value=function.execute(result,null);
  assertThat(value,is(equalTo(2017-Juli-02)));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestTimeShiftFunction.java",191
849,"'-tryline","@Test public void testParameterCount() throws Exception {
  AbstractFunction function=new UrlEncode();
  checkInvalidParameterCounts(function,1,1);
  function=new UrlDecode();
  checkInvalidParameterCounts(function,1,1);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestUrlEncodeDecode.java",53
850,"'-tryline","@Test public void testUrlEncode() throws Exception {
  AbstractFunction function=new UrlEncode();
  params.add(new CompoundVariable(Veni, vidi, vici ?));
  function.setParameters(params);
  String returnValue=function.execute(result,null);
  assertEquals(Veni%2C+vidi%2C+vici+%3F,returnValue);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestUrlEncodeDecode.java",62
851,"'-tryline","@Test public void testUrlDecode() throws Exception {
  AbstractFunction function=new UrlDecode();
  params.add(new CompoundVariable(Veni%2C+vidi%2C+vici+%3F));
  function.setParameters(params);
  String returnValue=function.execute(result,null);
  assertEquals(Veni, vidi, vici ?,returnValue);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestUrlEncodeDecode.java",71
852,"'-tryline","@Test public void variableTest1() throws Exception {
  Variable r=new Variable();
  vars.put(A_1,a1);
  vars.put(A_2,a2);
  vars.put(one,1);
  vars.put(two,2);
  vars.put(V,A);
  Collection<CompoundVariable> parms;
  String s;
  parms=makeParams(V,null,null);
  r.setParameters(parms);
  s=r.execute(null,null);
  assertEquals(A,s);
  parms=makeParams(V,DEFAULT,null);
  r.setParameters(parms);
  s=r.execute(null,null);
  assertEquals(A,s);
  parms=makeParams(EMPTY,DEFAULT,null);
  r.setParameters(parms);
  s=r.execute(null,null);
  assertEquals(DEFAULT,s);
  parms=makeParams(X,null,null);
  r.setParameters(parms);
  s=r.execute(null,null);
  assertEquals(X,s);
  parms=makeParams(A${X},null,null);
  r.setParameters(parms);
  s=r.execute(null,null);
  assertEquals(A${X},s);
  parms=makeParams(A_1,null,null);
  r.setParameters(parms);
  s=r.execute(null,null);
  assertEquals(a1,s);
  parms=makeParams(A_2,null,null);
  r.setParameters(parms);
  s=r.execute(null,null);
  assertEquals(a2,s);
  parms=makeParams(A_${two},null,null);
  r.setParameters(parms);
  s=r.execute(null,null);
  assertEquals(a2,s);
  parms=makeParams(${V}_${one},null,null);
  r.setParameters(parms);
  s=r.execute(null,null);
  assertEquals(a1,s);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\VariableTest.java",45
853,"'-tryline","private static XPath createXPath(String file,String expr) throws Exception {
  Collection<CompoundVariable> parms=new ArrayList<>();
  parms.add(new CompoundVariable(ResourceLocator.getResource(XPathConcurrencyTest.class,file)));
  parms.add(new CompoundVariable(expr));
  XPath xp=new XPath();
  xp.setParameters(parms);
  return xp;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\XPathConcurrencyTest.java",39
854,"'-tryline","@ParameterizedTest @ValueSource(strings={SAME_OBJECTS,SAME_OBJECTS,DIFFERENT_OBJECTS,DIFFERENT_OBJECTS,SAME_OBJECTS,DIFFERENT_OBJECTS}) public void concurrentRequestsToSameXPath(ReferenceEquality referenceEquality) throws Exception {
  Assumptions.assumeTrue(TEST_INDEX.incrementAndGet() == 1,Second execution of concurrentRequestsToSameXPath is known to fail);
  XPath a=createXPath(testfiles/XPathTest.xml,//user/@username);
  XPath b;
  if (referenceEquality == ReferenceEquality.SAME_OBJECTS) {
    b=a;
  }
 else {
    b=createXPath(testfiles/XPathTest.xml,//user/@username);
  }
  Synchronizer sync=new Synchronizer();
synchronized (sync) {
    Future<Void> thread2=CompletableFuture.runAsync(() -> {
synchronized (sync) {
        try {
          assertEquals(u3,b.execute());
          assertEquals(u4,b.execute());
          sync.pass();
          assertEquals(u1,b.execute());
          sync.pass();
          assertEquals(u3,b.execute());
          sync.done();
        }
 catch (        Throwable e) {
          throw sync.failure(e,thread2);
        }
      }
    }
);
    assertEquals(u1,a.execute());
    assertEquals(u2,a.execute());
    sync.pass();
    assertEquals(u5,a.execute());
    sync.pass();
    assertEquals(u2,a.execute());
    sync.pass();
    thread2.get();
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\XPathConcurrencyTest.java",50
855,"'-tryline","/** 
 * Initialise the dumper, and report if there is a problem. This is optional, as the dump methods will initialise if necessary.
 * @throws Exception if there is a problem finding the heapDump MXBean
 */
public static void init() throws Exception {
  Exception e=getInstance().exception;
  if (e != null) {
    throw e;
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\util\HeapDumper.java",78
856,"'-tryline","/** 
 * Dumps the heap to the outputFile file in the same format as the hprof heap dump. <p> Calls the dumpHeap() method of the HotSpotDiagnostic MXBean, if available. <p> See <a href=http://docs.oracle.com/javase/7/docs/jre/api/management/extension/com/sun/management/HotSpotDiagnosticMXBean.html> HotSpotDiagnosticMXBean </a>
 * @param fileName name of the heap dump file. Must be creatable, i.e. must not exist.
 * @param live if true, dump only the live objects
 * @throws Exception if the MXBean cannot be found, or if there is a problem during invocation
 */
public static void dumpHeap(String fileName,boolean live) throws Exception {
  getInstance().dumpHeap0(fileName,live);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\util\HeapDumper.java",91
857,"'-tryline","/** 
 * Dumps live objects from the heap to the outputFile file in the same format as the hprof heap dump. <p>
 * @see #dumpHeap(String,boolean)
 * @param fileName name of the heap dump file. Must be creatable, i.e. must not exist.
 * @throws Exception if the MXBean cannot be found, or if there is a problem during invocation
 */
public static void dumpHeap(String fileName) throws Exception {
  dumpHeap(fileName,true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\util\HeapDumper.java",108
858,"'-tryline","/** 
 * Dumps live objects from the heap to the outputFile file in the same format as the hprof heap dump. <p> Creates the dump using the file name: dump_yyyyMMdd_hhmmss_SSS.hprof The dump is created in the current directory. <p>
 * @see #dumpHeap(boolean)
 * @return the name of the dump file that was created
 * @throws Exception if the MXBean cannot be found, or if there is a problem during invocation
 */
public static String dumpHeap() throws Exception {
  return dumpHeap(true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\util\HeapDumper.java",119
859,"'-tryline","/** 
 * Dumps objects from the heap to the outputFile file in the same format as the hprof heap dump. <p> Creates the dump using the file name: dump_yyyyMMdd_hhmmss_SSS.hprof The dump is created in the current directory. <p>
 * @see #dumpHeap(String,boolean)
 * @param live true id only live objects are to be dumped.
 * @return the name of the dump file that was created
 * @throws Exception if the MXBean cannot be found, or if there is a problem during invocation
 */
public static String dumpHeap(boolean live) throws Exception {
  return dumpHeap(new File(.),live);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\util\HeapDumper.java",133
860,"'-tryline","/** 
 * Dumps objects from the heap to the outputFile file in the same format as the hprof heap dump. The dump is created in the specified directory. <p> Creates the dump using the file name: dump_yyyyMMdd_hhmmss_SSS.hprof <p>
 * @see #dumpHeap(String,boolean)
 * @param basedir File object for the target base directory.
 * @param live true id only live objects are to be dumped.
 * @return the name of the dump file that was created
 * @throws Exception if the MXBean cannot be found, or if there is a problem during invocation
 */
@SuppressWarnings(JdkObsolete) public static String dumpHeap(File basedir,boolean live) throws Exception {
  SimpleDateFormat timestampFormat=new SimpleDateFormat(yyyyMMdd_hhmmss_SSS);
  String stamp=timestampFormat.format(new Date());
  File temp=new File(basedir,dump_ + stamp + .hprof);
  final String path=temp.getPath();
  dumpHeap(path,live);
  return path;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\util\HeapDumper.java",149
861,"'-tryline","/** 
 * Perform the dump using the dumpHeap method.
 * @param fileName the file to use
 * @param live true to dump only live objects
 * @throws Exception if the MXBean cannot be found, or if there is a problem during invocation
 */
private void dumpHeap0(String fileName,boolean live) throws Exception {
  try {
    if (exception == null) {
      server.invoke(hotspotDiagnosticBean,dumpHeap,new Object[]{fileName,live},new String[]{java.lang.String,boolean});
    }
 else {
      throw exception;
    }
  }
 catch (  RuntimeMBeanException e) {
    Throwable f=e.getCause();
    if (f instanceof Exception) {
      throw (Exception)f;
    }
    throw e;
  }
catch (  MBeanException e) {
    Throwable f=e.getCause();
    if (f instanceof Exception) {
      throw (Exception)f;
    }
    throw e;
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\util\HeapDumper.java",172
862,"'-tryline","/** 
 * Returns name of file containing thread dump.
 * @return Name of file containing thread dump
 * @throws Exception if file cannot be written
 */
public static String threadDump() throws Exception {
  return threadDump(new File(.));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\util\ThreadDumper.java",44
863,"'-tryline","/** 
 * Returns name of file containing thread dump.
 * @param basedir {@link File} Base directory
 * @return Name of file containing thread dump
 * @throws Exception  if file cannot we written
 */
@SuppressWarnings(JdkObsolete) public static String threadDump(File basedir) throws Exception {
  SimpleDateFormat timestampFormat=new SimpleDateFormat(yyyyMMdd_hhmmss_SSS);
  String stamp=timestampFormat.format(new Date());
  File temp=new File(basedir,thread_dump_ + stamp + .log);
  final String path=temp.getPath();
  try (FileOutputStream fos=new FileOutputStream(temp);OutputStreamWriter outputStreamWriter=new OutputStreamWriter(fos,StandardCharsets.UTF_8);BufferedWriter bufferedWriter=new BufferedWriter(outputStreamWriter)){
    writeThreadDump(bufferedWriter);
  }
   return path;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\util\ThreadDumper.java",53
864,"'-tryline","@Test public void testCombinations() throws Exception {
  check(new String[]{},);
  check(new String[]{--none,-0},-0 -0);
  check(new String[]{--one=a,--one,A,-1b,-1=c,-1,d},-1=[a] -1=[A] -1=[b] -1=[c] -1=[d]);
  check(new String[]{-2n=v,-2,N=V},-2=[n, v] -2=[N, V]);
  check(new String[]{--two=n=v,--two,N=V},-2=[n, v] -2=[N, V]);
  check(new String[]{-?,A,-?=B,-?C,-?},-? [A] -?=[B] -?=[C] -?);
  check(new String[]{--optional=A,--optional,B,--optional},-?=[A] -? [B] -?);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\test\java\org\apache\commons\cli\avalon\ClutilTestCase.java",890
865,"'-tryline","@Test public void testAdd1() throws Exception {
  Collection<String> treePath=Arrays.asList(new String[]{1,2,3,4});
  HashTree tree=new HashTree();
  log.debug(treePath = {},treePath);
  tree.add(treePath,value);
  log.debug(Now treePath = {}, tree = {},treePath,tree);
  assertEquals(1,tree.list(treePath).size());
  assertEquals(value,tree.getArray(treePath)[0]);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\test\java\org\apache\jorphan\collections\PackageTest.java",37
866,"'-tryline","@Test public void testEqualsAndHashCode1() throws Exception {
  HashTree tree1=new HashTree(abcd);
  HashTree tree2=new HashTree(abcd);
  HashTree tree3=new HashTree(abcde);
  HashTree tree4=new HashTree(abcde);
  assertTrue(tree1.equals(tree1));
  assertTrue(tree1.equals(tree2));
  assertTrue(tree2.equals(tree1));
  assertTrue(tree2.equals(tree2));
  assertEquals(tree1.hashCode(),tree2.hashCode());
  assertTrue(tree3.equals(tree3));
  assertTrue(tree3.equals(tree4));
  assertTrue(tree4.equals(tree3));
  assertTrue(tree4.equals(tree4));
  assertEquals(tree3.hashCode(),tree4.hashCode());
  assertNotSame(tree1,tree2);
  assertNotSame(tree1,tree3);
  assertNotSame(tree1,tree4);
  assertNotSame(tree2,tree3);
  assertNotSame(tree2,tree4);
  assertFalse(tree1.equals(tree3));
  assertFalse(tree1.equals(tree4));
  assertFalse(tree2.equals(tree3));
  assertFalse(tree2.equals(tree4));
  assertNotNull(tree1);
  assertNotNull(tree2);
  tree1.add(abcd,tree3);
  assertFalse(tree1.equals(tree2));
  assertFalse(tree2.equals(tree1));
  if (tree1.hashCode() == tree2.hashCode()) {
    System.out.println(WARN: unequal HashTrees should not have equal hashCodes);
  }
  tree2.add(abcd,tree4);
  assertTrue(tree1.equals(tree2));
  assertTrue(tree2.equals(tree1));
  assertEquals(tree1.hashCode(),tree2.hashCode());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\test\java\org\apache\jorphan\collections\PackageTest.java",48
867,"'-tryline","@Test public void testAddObjectAndTree() throws Exception {
  ListedHashTree tree=new ListedHashTree(key);
  ListedHashTree newTree=new ListedHashTree(value);
  tree.add(key,newTree);
  assertEquals(tree.list().size(),1);
  assertEquals(key,tree.getArray()[0]);
  assertEquals(1,tree.getTree(key).list().size());
  assertEquals(0,tree.getTree(key).getTree(value).size());
  assertEquals(tree.getTree(key).getArray()[0],value);
  assertNotNull(tree.getTree(key).get(value));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\test\java\org\apache\jorphan\collections\PackageTest.java",95
868,"'-tryline","@Test public void testEqualsAndHashCode2() throws Exception {
  ListedHashTree tree1=new ListedHashTree(abcd);
  ListedHashTree tree2=new ListedHashTree(abcd);
  ListedHashTree tree3=new ListedHashTree(abcde);
  ListedHashTree tree4=new ListedHashTree(abcde);
  assertTrue(tree1.equals(tree1));
  assertTrue(tree1.equals(tree2));
  assertTrue(tree2.equals(tree1));
  assertTrue(tree2.equals(tree2));
  assertEquals(tree1.hashCode(),tree2.hashCode());
  assertTrue(tree3.equals(tree3));
  assertTrue(tree3.equals(tree4));
  assertTrue(tree4.equals(tree3));
  assertTrue(tree4.equals(tree4));
  assertEquals(tree3.hashCode(),tree4.hashCode());
  assertNotSame(tree1,tree2);
  assertNotSame(tree1,tree3);
  assertFalse(tree1.equals(tree3));
  assertFalse(tree3.equals(tree1));
  assertFalse(tree1.equals(tree4));
  assertFalse(tree4.equals(tree1));
  assertFalse(tree2.equals(tree3));
  assertFalse(tree3.equals(tree2));
  assertFalse(tree2.equals(tree4));
  assertFalse(tree4.equals(tree2));
  tree1.add(abcd,tree3);
  assertFalse(tree1.equals(tree2));
  assertFalse(tree2.equals(tree1));
  tree2.add(abcd,tree4);
  assertTrue(tree1.equals(tree2));
  assertTrue(tree2.equals(tree1));
  assertEquals(tree1.hashCode(),tree2.hashCode());
  tree1.add(a1);
  tree1.add(a2);
  tree2.add(a2);
  tree2.add(a1);
  assertFalse(tree1.equals(tree2));
  assertFalse(tree2.equals(tree1));
  if (tree1.hashCode() == tree2.hashCode()) {
    System.out.println(WARN: unequal ListedHashTrees should not have equal hashcodes);
  }
  tree4.add(abcdef);
  assertFalse(tree3.equals(tree4));
  assertFalse(tree4.equals(tree3));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\test\java\org\apache\jorphan\collections\PackageTest.java",108
869,"'-tryline","@Test public void testSearch() throws Exception {
  ListedHashTree tree=new ListedHashTree();
  SearchByClass<Integer> searcher=new SearchByClass<>(Integer.class);
  String one=one;
  String two=two;
  Integer o=1;
  tree.add(one,o);
  tree.getTree(one).add(o,two);
  tree.traverse(searcher);
  assertEquals(1,searcher.getSearchResults().size());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\test\java\org\apache\jorphan\collections\PackageTest.java",165
870,"'-tryline","@Test public void testCheckKeytool() throws Exception {
  SystemCommand sc=new SystemCommand(null,null);
  List<String> arguments=new ArrayList<>();
  arguments.add(xyzqwas);
  Assertions.assertThrows(IOException.class,() -> {
    int status=sc.run(arguments);
    if (status == 0 || status == 1) {
      fail(Missing executable should produce exit code of 0 or 1. Actual code is  + status);
    }
  }
);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\test\java\org\apache\jorphan\exec\TestKeyToolUtils.java",54
871,"'-tryline","@Test public void testIPBasedCert() throws Exception {
  KeyToolUtils.generateHostCert(keystore,password,10.1.2.3,validity);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\test\java\org\apache\jorphan\exec\TestKeyToolUtils.java",67
872,"'-tryline","@Test public void testDNSNameBasedCert() throws Exception {
  KeyToolUtils.generateHostCert(keystore,password,www.example.invalid,validity);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\test\java\org\apache\jorphan\exec\TestKeyToolUtils.java",72
873,"'-tryline","@Test public void testPercentagePoint() throws Exception {
  long[] values=new long[]{10L,9L,5L,6L,1L,3L,8L,2L,7L,4L};
  for (  long l : values) {
    calc.addValue(l);
  }
  assertEquals(10,calc.getCount());
  assertEquals(9,calc.getPercentPoint(0.8999999).intValue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\test\java\org\apache\jorphan\math\TestStatCalculator.java",39
874,"'-tryline","@Test @Disabled public void testPercentagePointBug() throws Exception {
  long[] values=new long[]{10L,9L,5L,6L,1L,3L,8L,2L,7L,4L};
  DescriptiveStatistics statistics=new DescriptiveStatistics();
  for (  long l : values) {
    calc.addValue(l);
    statistics.addValue(l);
  }
  assertEquals(9,calc.getPercentPoint(0.8999999).intValue());
  assertEquals(Math.round(statistics.getPercentile(90)),calc.getPercentPoint(0.9).intValue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\test\java\org\apache\jorphan\math\TestStatCalculator.java",51
875,"'-tryline","@Test public void testInvoke() throws Exception {
  Dummy dummy=new Dummy();
  ClassTools.invoke(dummy,callMe);
  assertTrue(dummy.wasCalled());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\test\java\org\apache\jorphan\reflect\TestClassTools.java",51
876,"'-tryline","@Test public void testSplitStringStringTrueTruncate() throws Exception {
  assertThat(JOrphanUtils.split(a;,b;,;,;,d;,e;,;,f,;,,true),CoreMatchers.equalTo(new String[]{a,b,d,e,f}));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\test\java\org\apache\jorphan\util\TestJorphanUtils.java",129
877,"'-tryline","@Test public void testSplitStringStringFalseTruncate() throws Exception {
  assertThat(JOrphanUtils.split(a;,b;,;,;,d;,e;,;,f,;,,false),CoreMatchers.equalTo(new String[]{a,b,,,d,e,,f}));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\test\java\org\apache\jorphan\util\TestJorphanUtils.java",135
878,"'-tryline","@Test public void testSplitStringStringTrueDoubledSplitChar() throws Exception {
  assertThat(JOrphanUtils.split(a;;b;;;;;;d;;e;;;;f,;;,true),CoreMatchers.equalTo(new String[]{a,b,d,e,f}));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\test\java\org\apache\jorphan\util\TestJorphanUtils.java",141
879,"'-tryline","@Test public void testSplitStringStringFalseDoubledSplitChar() throws Exception {
  assertThat(JOrphanUtils.split(a;;b;;;;;;d;;e;;;;f,;;,false),CoreMatchers.equalTo(new String[]{a,b,,,d,e,,f}));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\test\java\org\apache\jorphan\util\TestJorphanUtils.java",147
880,"'-tryline","@Test public void testGetByteArraySlice() throws Exception {
  Assert.assertArrayEquals(new byte[]{1,2},JOrphanUtils.getByteArraySlice(new byte[]{0,1,2,3},1,2));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\test\java\org\apache\jorphan\util\TestJorphanUtils.java",254
881,"'-tryline","@Test public void testbaToByte() throws Exception {
  assertEqualsArray(new byte[]{},JOrphanUtils.baToHexBytes(new byte[]{}));
  assertEqualsArray(new byte[]{'0','0'},JOrphanUtils.baToHexBytes(new byte[]{0}));
  assertEqualsArray(0f107f8081ff.getBytes(StandardCharsets.UTF_8),JOrphanUtils.baToHexBytes(new byte[]{15,16,127,-128,-127,-1}));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\test\java\org\apache\jorphan\util\TestJorphanUtils.java",274
882,"'-tryline","@Override public int replace(String regex,String replaceBy,boolean caseSensitive) throws Exception {
  final CollectionProperty hdrs=getHeaders();
  int totalReplaced=0;
  for (int i=0; i < hdrs.size(); i++) {
    final JMeterProperty hdr=hdrs.get(i);
    Header head=(Header)hdr.getObjectValue();
    totalReplaced+=JOrphanUtils.replaceValue(regex,replaceBy,caseSensitive,head.getValue(),head::setValue);
  }
  return totalReplaced;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\control\HeaderManager.java",305
883,"'-tryline","@Override public URLCollection load(Triple<String,URL,Charset> triple) throws Exception {
  final String cssContent=triple.getLeft();
  final URL baseUrl=triple.getMiddle();
  final Charset charset=triple.getRight();
  final CSSReaderSettings readerSettings=new CSSReaderSettings().setBrowserCompliantMode(true).setFallbackCharset(charset).setCSSVersion(ECSSVersion.CSS30).setCustomErrorHandler(new LoggingCSSParseErrorHandler()).setUseSourceLocation(false).setCustomExceptionHandler(new CSSParseExceptionCallback(baseUrl));
  if (IGNORE_ALL_CSS_ERRORS) {
    readerSettings.setInterpretErrorHandler(new DoNothingCSSInterpretErrorHandler());
  }
  final CascadingStyleSheet aCSS=CSSReader.readFromStringReader(cssContent,readerSettings);
  final URLCollection urls=new URLCollection(new ArrayList<>());
  if (aCSS == null) {
    LOG.warn(Failed parsing CSS: {}, got null CascadingStyleSheet,baseUrl);
    return urls;
  }
  CSSVisitor.visitCSSUrl(aCSS,new DefaultCSSUrlVisitor(){
    @Override public void onImport(    CSSImportRule rule){
      final String location=rule.getLocationString();
      if (!StringUtils.isEmpty(location)) {
        urls.addURL(location,baseUrl);
      }
    }
    @Override public void onUrlDeclaration(    final ICSSTopLevelRule aTopLevelRule,    final CSSDeclaration aDeclaration,    final CSSExpressionMemberTermURI aURITerm){
    }
  }
);
  return urls;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\parser\CssParserCacheLoader.java",51
884,"'-tryline","/** 
 * @see org.apache.jmeter.protocol.http.proxy.SamplerCreator#createAndPopulateSampler(org.apache.jmeter.protocol.http.proxy.HttpRequestHdr,java.util.Map,java.util.Map)
 */
@Override public HTTPSamplerBase createAndPopulateSampler(HttpRequestHdr request,Map<String,String> pageEncodings,Map<String,String> formEncodings) throws Exception {
  HTTPSamplerBase sampler=createSampler(request,pageEncodings,formEncodings);
  populateSampler(sampler,request,pageEncodings,formEncodings);
  return sampler;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\AbstractSamplerCreator.java",148
885,"'-tryline","/** 
 * @see org.apache.jmeter.protocol.http.proxy.SamplerCreator#populateSampler(org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase,org.apache.jmeter.protocol.http.proxy.HttpRequestHdr,java.util.Map,java.util.Map)
 */
@Override public final void populateSampler(HTTPSamplerBase sampler,HttpRequestHdr request,Map<String,String> pageEncodings,Map<String,String> formEncodings) throws Exception {
  computeFromHeader(sampler,request,pageEncodings,formEncodings);
  computeFromPostBody(sampler,request);
  if (log.isDebugEnabled()) {
    log.debug(sampler path = {},sampler.getPath());
  }
  Arguments arguments=sampler.getArguments();
  if (arguments.getArgumentCount() == 1 && arguments.getArgument(0).getName().length() == 0) {
    sampler.setPostBodyRaw(true);
  }
  if (request.isDetectGraphQLRequest()) {
    detectAndModifySamplerOnGraphQLRequest(sampler,request);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\DefaultSamplerCreator.java",114
886,"'-tryline","/** 
 * Compute sampler information from Request Header
 * @param sampler {@link HTTPSamplerBase}
 * @param request {@link HttpRequestHdr}
 * @param pageEncodings Map of page encodings
 * @param formEncodings Map of form encodings
 * @throws Exception when something fails
 */
protected void computeFromHeader(HTTPSamplerBase sampler,HttpRequestHdr request,Map<String,String> pageEncodings,Map<String,String> formEncodings) throws Exception {
  computeDomain(sampler,request);
  computeMethod(sampler,request);
  computePort(sampler,request);
  computeProtocol(sampler,request);
  computeContentEncoding(sampler,request,pageEncodings,formEncodings);
  computePath(sampler,request);
  computeSamplerName(sampler,request);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\DefaultSamplerCreator.java",174
887,"'-tryline","/** 
 * Compute sampler information from Request Header
 * @param sampler {@link HTTPSamplerBase}
 * @param request {@link HttpRequestHdr}
 * @throws Exception when something fails
 */
protected void computeFromPostBody(HTTPSamplerBase sampler,HttpRequestHdr request) throws Exception {
  if (!HTTPConstants.CONNECT.equals(request.getMethod()) && !HTTPConstants.GET.equals(request.getMethod())) {
    final String contentType=request.getContentType();
    MultipartUrlConfig urlConfig=request.getMultipartConfig(contentType);
    String contentEncoding=sampler.getContentEncoding();
    String postData=null;
    if (log.isDebugEnabled()) {
      if (!StringUtils.isEmpty(contentEncoding)) {
        log.debug(Using encoding {} for request body,contentEncoding);
      }
 else {
        log.debug(No encoding found, using JRE default encoding for request body);
      }
    }
    if (!StringUtils.isEmpty(contentEncoding)) {
      postData=new String(request.getRawPostData(),contentEncoding);
    }
 else {
      postData=new String(request.getRawPostData(),PostWriter.ENCODING);
    }
    if (urlConfig != null) {
      urlConfig.parseArguments(postData);
      sampler.setDoMultipart(true);
      request.getHeaderManager().removeHeaderNamed(HttpRequestHdr.CONTENT_TYPE);
      request.getHeaderManager().removeHeaderNamed(HttpRequestHdr.CONTENT_LENGTH);
      sampler.setArguments(urlConfig.getArguments());
      sampler.setHTTPFiles(urlConfig.getHTTPFileArgs().asArray());
      sampler.setDoBrowserCompatibleMultipart(true);
    }
 else     if (postData.trim().startsWith(<?) || HTTPConstants.PUT.equals(sampler.getMethod()) || isPotentialXml(postData)|| isPotentialJson(postData)) {
      sampler.addNonEncodedArgument(,postData,);
    }
 else     if (contentType == null || (contentType.startsWith(HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED) && !isBinaryContent(contentType))) {
      sampler.parseArguments(postData.trim(),contentEncoding);
    }
 else     if (postData.length() > 0) {
      if (isBinaryContent(contentType)) {
        try {
          File tempDir=new File(getBinaryDirectory());
          File out=File.createTempFile(request.getMethod(),getBinaryFileSuffix(),tempDir);
          FileUtils.writeByteArrayToFile(out,request.getRawPostData());
          HTTPFileArg[] files={new HTTPFileArg(out.getPath(),,contentType)};
          sampler.setHTTPFiles(files);
        }
 catch (        IOException e) {
          log.warn(Could not create binary file: {},e);
        }
      }
 else {
        sampler.addNonEncodedArgument(,postData,);
      }
    }
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\DefaultSamplerCreator.java",201
888,"'-tryline","/** 
 * Populate sampler from request
 * @param sampler {@link HTTPSamplerBase}
 * @param request {@link HttpRequestHdr}
 * @param pageEncodings Map of page encodings
 * @param formEncodings Map of form encodings
 * @throws Exception when something fails
 */
void populateSampler(HTTPSamplerBase sampler,HttpRequestHdr request,Map<String,String> pageEncodings,Map<String,String> formEncodings) throws Exception ;
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\SamplerCreator.java",47
889,"'-tryline","/** 
 * Default implementation calls: <ol> <li> {@link SamplerCreator}{@link #createSampler(HttpRequestHdr,Map,Map)}</li> <li> {@link SamplerCreator}{@link #populateSampler(HTTPSamplerBase,HttpRequestHdr,Map,Map)}</li> </ol>
 * @param request {@link HttpRequestHdr}
 * @param pageEncodings Map of page encodings
 * @param formEncodings Map of form encodings
 * @return {@link HTTPSamplerBase}
 * @throws Exception when something fails
 * @since 2.9
 */
HTTPSamplerBase createAndPopulateSampler(HttpRequestHdr request,Map<String,String> pageEncodings,Map<String,String> formEncodings) throws Exception ;
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\SamplerCreator.java",69
890,"'-tryline","public abstract void setVersion(String name,String value) throws Exception ;
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HttpClientDefaultParameters.java",49
891,"'-tryline","/** 
 * Replace by replaceBy in path and body (arguments) properties
 */
@Override public int replace(String regex,String replaceBy,boolean caseSensitive) throws Exception {
  int totalReplaced=0;
  for (  JMeterProperty jMeterProperty : getArguments()) {
    HTTPArgument arg=(HTTPArgument)jMeterProperty.getObjectValue();
    totalReplaced+=JOrphanUtils.replaceValue(regex,replaceBy,caseSensitive,arg.getValue(),arg::setValue);
  }
  totalReplaced+=JOrphanUtils.replaceValue(regex,replaceBy,caseSensitive,getPath(),this::setPath);
  totalReplaced+=JOrphanUtils.replaceValue(regex,replaceBy,caseSensitive,getDomain(),this::setDomain);
  for (  String key : Arrays.asList(PORT,PROTOCOL)) {
    totalReplaced+=JOrphanUtils.replaceValue(regex,replaceBy,caseSensitive,getPropertyAsString(key),s -> setProperty(key,s));
  }
  return totalReplaced;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPSamplerBase.java",2174
892,"'-tryline","@Override public List<String> getSearchableTokens() throws Exception {
  List<String> list=new ArrayList<>(super.getSearchableTokens());
  list.add(getQueryString());
  list.add(getCookies());
  list.add(getUrlAsString());
  return list;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPSampleResult.java",267
893,"'-tryline","/** 
 * @param url String Url to escape
 * @return String cleaned up url
 * @throws Exception when given <code>url</code> leads to a malformed URL or URI
 */
public static String escapeIllegalURLCharacters(String url) throws Exception {
  String decodeUrl=URLDecoder.decode(url,StandardCharsets.UTF_8.name());
  URL urlString=new URL(decodeUrl);
  URI uri=new URI(urlString.getProtocol(),urlString.getUserInfo(),urlString.getHost(),urlString.getPort(),urlString.getPath(),urlString.getQuery(),urlString.getRef());
  return uri.toString();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\util\ConversionUtils.java",127
894,"'-tryline","@Test public void testReadCurlCommandsFromFile(@TempDir Path tempDir) throws Exception {
  String cmdLine=curl 'http://jmeter.apache.org/' --max-redirs 'b' + System.lineSeparator() + curl 'http://jmeter.apache.org/' --include --keepalive-time '20';
  String tempPath=writeToTempFile(tempDir,cmdLine);
  ParseCurlCommandAction p=new ParseCurlCommandAction();
  List<String> commands=p.readFromFile(tempPath);
  assertTrue(commands.contains(curl 'http://jmeter.apache.org/' --max-redirs 'b'),Curl commands should be saved in list);
  assertTrue(commands.contains(curl 'http://jmeter.apache.org/' --include --keepalive-time '20'),Curl commands should be saved in list);
  assertEquals(2,commands.size());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\gui\action\ParseCurlCommandActionTest.java",112
895,"'-tryline","@Test public void testCreateProxyServer() throws Exception {
  ParseCurlCommandAction p=new ParseCurlCommandAction();
  HTTPSamplerProxy httpSampler=(HTTPSamplerProxy)HTTPSamplerFactory.newInstance(HTTPSamplerFactory.DEFAULT_CLASSNAME);
  httpSampler.setProperty(TestElement.GUI_CLASS,HttpTestSampleGui.class.getName());
  httpSampler.setProperty(TestElement.NAME,HTTP Request);
  BasicCurlParser basicCurlParser=new BasicCurlParser();
  Request request=basicCurlParser.parse(curl 'http://jmeter.apache.org/' -x 'https://aa:bb@example.com:8042');
  Method method=getMethodFor(createProxyServer,Request.class,HTTPSamplerProxy.class);
  method.invoke(p,request,httpSampler);
  assertEquals(example.com,httpSampler.getProxyHost(),proxy host should be set in httpsampler);
  assertEquals(aa,httpSampler.getProxyUser(),proxy user should be set in httpsampler);
  assertEquals(bb,httpSampler.getProxyPass(),proxy pass should be set in httpsampler);
  assertEquals(https,httpSampler.getProxyScheme(),proxy scheme should be set in httpsampler);
  assertEquals(example.com,httpSampler.getProxyHost(),proxy host should be set in httpsampler);
  assertEquals(8042,httpSampler.getProxyPortInt(),The command line should be parsed in turn);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\gui\action\ParseCurlCommandActionTest.java",177
896,"'-tryline","@Test public void testCreateSampler(@TempDir Path tempDir) throws Exception {
  ParseCurlCommandAction p=new ParseCurlCommandAction();
  BasicCurlParser basicCurlParser=new BasicCurlParser();
  Request request=basicCurlParser.parse(curl 'http://jmeter.apache.org:8443/' -x 'https://aa:bb@example.com:8042');
  Method method=getMethodFor(createSampler,Request.class,String.class);
  HTTPSamplerProxy httpSampler=(HTTPSamplerProxy)method.invoke(p,request,);
  assertEquals(https,httpSampler.getProxyScheme(),proxy scheme should be set in httpsampler);
  assertEquals(example.com,httpSampler.getProxyHost(),proxy host should be set in httpsampler);
  assertEquals(8042,httpSampler.getProxyPortInt(),The command line should be parsed in turn);
  assertEquals(/,httpSampler.getPath(),path should be set in httpsampler);
  assertEquals(jmeter.apache.org,httpSampler.getDomain(),domain should be set in httpsampler);
  assertEquals(8443,httpSampler.getPort(),port should be set in httpsampler);
  assertEquals(GET,httpSampler.getMethod(),method should be set in httpsampler);
  request=basicCurlParser.parse(curl 'http://jmeter.apache.org/' --data 'name=test');
  request.setInterfaceName(interface_name);
  httpSampler=(HTTPSamplerProxy)method.invoke(p,request,);
  assertEquals(POST,httpSampler.getMethod());
  assertEquals(name=test,httpSampler.getArguments().getArgument(0).toString());
  request=basicCurlParser.parse(curl 'http://jmeter.apache.org/' -F 'test=name;type=text/foo' -F 'test1=name1');
  httpSampler=(HTTPSamplerProxy)method.invoke(p,request,);
  Arguments samplerArguments=httpSampler.getArguments();
  assertEquals(POST,httpSampler.getMethod(),method should be set in httpsampler);
  assertEquals(test,samplerArguments.getArgument(0).getName(),form name should be set in httpsampler);
  assertEquals(name,samplerArguments.getArgument(0).getValue(),form value should be set in httpsampler);
  assertEquals(test1,samplerArguments.getArgument(1).getName(),form name should be set in httpsampler);
  assertEquals(name1,samplerArguments.getArgument(1).getValue(),form value should be set in httpsampler);
  String filePath=tempDir.resolve(test.txt).toAbsolutePath().toString();
  request=basicCurlParser.parse(curl 'http://jmeter.apache.org/' -F 'c=@ + filePath + ;type=text/foo' -F 'c1=@+ filePath+ ');
  httpSampler=(HTTPSamplerProxy)method.invoke(p,request,);
  assertEquals(c,httpSampler.getHTTPFiles()[0].getParamName(),form name should be set in httpsampler);
  assertEquals(filePath,httpSampler.getHTTPFiles()[0].getPath(),form name should be set in httpsampler);
  assertEquals(c1,httpSampler.getHTTPFiles()[1].getParamName(),form name should be set in httpsampler);
  request=basicCurlParser.parse(curl 'http://jmeter.apache.org/' --form-string 'c=@test.txt;type=text/foo');
  httpSampler=(HTTPSamplerProxy)method.invoke(p,request,);
  assertEquals(c,httpSampler.getArguments().getArgument(0).getName());
  assertEquals(@test.txt;type=text/foo,httpSampler.getArguments().getArgument(0).getValue());
  request=basicCurlParser.parse(curl -X PUT \https://www.example.com:123/12345?param1=value1&param2=value2\ -H  \accept: */*\ -H  \X-XSRF-TOKEN: 1234\);
  httpSampler=(HTTPSamplerProxy)method.invoke(p,request,);
  assertEquals(new URL(https://www.example.com:123/12345?param1=value1&param2=value2),httpSampler.getUrl());
  assertEquals(123,httpSampler.getPort());
  assertEquals(www.example.com,httpSampler.getDomain());
  assertEquals(/12345?param1=value1&param2=value2,httpSampler.getPath());
  assertEquals(PUT,httpSampler.getMethod());
  assertEquals(new Header(accept,*/*),httpSampler.getHeaderManager().getHeader(0));
  assertEquals(new Header(X-XSRF-TOKEN,1234),httpSampler.getHeaderManager().getHeader(1));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\gui\action\ParseCurlCommandActionTest.java",196
897,"'-tryline","@Test public void testDataFormException() throws Exception {
  ParseCurlCommandAction p=new ParseCurlCommandAction();
  HTTPSamplerProxy httpSampler=(HTTPSamplerProxy)HTTPSamplerFactory.newInstance(HTTPSamplerFactory.DEFAULT_CLASSNAME);
  httpSampler.setProperty(TestElement.GUI_CLASS,HttpTestSampleGui.class.getName());
  httpSampler.setProperty(TestElement.NAME,HTTP Request);
  BasicCurlParser basicCurlParser=new BasicCurlParser();
  Request request=basicCurlParser.parse(curl 'http://jmeter.apache.org/' -F 'test=name' --data 'fname=a&lname=b');
  Method method=getMethodFor(setFormData,Request.class,HTTPSamplerProxy.class);
  try {
    method.invoke(p,request,httpSampler);
    throw new IllegalStateException(Should have thrown InvocationTargetException);
  }
 catch (  InvocationTargetException|IllegalAccessException e) {
    assertEquals(--form and --data can't appear in the same command,e.getCause().getMessage());
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\gui\action\ParseCurlCommandActionTest.java",258
898,"'-tryline","@Test public void testCreateHttpRequest() throws Exception {
  ParseCurlCommandAction p=new ParseCurlCommandAction();
  BasicCurlParser basicCurlParser=new BasicCurlParser();
  ThreadGroup threadGroup=new ThreadGroup();
  TestPlan testPlan=new TestPlan();
  HashTree tree=new HashTree();
  HashTree testPlanHT=tree.add(testPlan);
  HashTree threadGroupHT=testPlanHT.add(threadGroup);
  Request request=basicCurlParser.parse(curl 'http://jmeter.apache.org/'  -E '<CA certificate>');
  Method method=getMethodFor(createHttpRequest,Request.class,HashTree.class,String.class);
  HTTPSamplerProxy httpSampler=(HTTPSamplerProxy)method.invoke(p,request,threadGroupHT,comment);
  assertEquals(/,httpSampler.getPath(),path should be set in httpsampler);
  assertEquals(jmeter.apache.org,httpSampler.getDomain(),domain should be set in httpsampler);
  assertEquals(80,httpSampler.getPort(),port should be 80 in httpsampler);
  assertEquals(GET,httpSampler.getMethod(),method should be set in httpsampler);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\gui\action\ParseCurlCommandActionTest.java",277
899,"'-tryline","@Test public void testCreateHttpRequestWithQuotedFilenameAsData() throws Exception {
  ParseCurlCommandAction p=new ParseCurlCommandAction();
  BasicCurlParser basicCurlParser=new BasicCurlParser();
  ThreadGroup threadGroup=new ThreadGroup();
  TestPlan testPlan=new TestPlan();
  HashTree tree=new HashTree();
  HashTree testPlanHT=tree.add(testPlan);
  HashTree threadGroupHT=testPlanHT.add(threadGroup);
  Request request=basicCurlParser.parse(curl 'http://jmeter.apache.org/' -X POST --form 'pic=@\/some/file.jpg\');
  Method method=getMethodFor(createHttpRequest,Request.class,HashTree.class,String.class);
  HTTPSamplerProxy httpSampler=(HTTPSamplerProxy)method.invoke(p,request,threadGroupHT,comment);
  assertEquals(/,httpSampler.getPath(),path should be set in httpsampler);
  assertEquals(jmeter.apache.org,httpSampler.getDomain(),domain should be set in httpsampler);
  assertEquals(80,httpSampler.getPort(),port should be 80 in httpsampler);
  assertEquals(POST,httpSampler.getMethod(),method should be set in httpsampler);
  HTTPFileArg fileArg=httpSampler.getHTTPFiles()[0];
  assertEquals(pic,fileArg.getParamName());
  assertEquals(/some/file.jpg,fileArg.getPath());
  assertEquals(image/jpeg,fileArg.getMimeType());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\gui\action\ParseCurlCommandActionTest.java",295
900,"'-tryline","@Test public void testConfigureTimeout() throws Exception {
  ParseCurlCommandAction p=new ParseCurlCommandAction();
  BasicCurlParser basicCurlParser=new BasicCurlParser();
  Request request=basicCurlParser.parse(curl 'http://jmeter.apache.org/'  -m '20'  --connect-timeout '1');
  HTTPSamplerProxy httpSampler=(HTTPSamplerProxy)HTTPSamplerFactory.newInstance(HTTPSamplerFactory.DEFAULT_CLASSNAME);
  httpSampler.setProperty(TestElement.GUI_CLASS,HttpTestSampleGui.class.getName());
  httpSampler.setProperty(TestElement.NAME,HTTP Request);
  Method method=getMethodFor(configureTimeout,Request.class,HTTPSamplerProxy.class);
  method.invoke(p,request,httpSampler);
  assertEquals(1000,httpSampler.getConnectTimeout());
  assertEquals(19000,httpSampler.getResponseTimeout());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\gui\action\ParseCurlCommandActionTest.java",317
901,"'-tryline","@Test public void testCreateHeaderManager() throws Exception {
  ParseCurlCommandAction p=new ParseCurlCommandAction();
  BasicCurlParser basicCurlParser=new BasicCurlParser();
  Request request=basicCurlParser.parse(curl 'http://jmeter.apache.org/' -H 'Content-Type: application/x-www-form-urlencoded' --compressed);
  Method method=getMethodFor(createHeaderManager,Request.class);
  HeaderManager headerManager=(HeaderManager)method.invoke(p,request);
  assertEquals(Content-Type,headerManager.get(0).getName());
  assertEquals(application/x-www-form-urlencoded,headerManager.get(0).getValue());
  assertEquals(Accept-Encoding,headerManager.get(1).getName());
  assertEquals(gzip, deflate,headerManager.get(1).getValue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\gui\action\ParseCurlCommandActionTest.java",332
902,"'-tryline","@Test public void testCreateAuthManager() throws Exception {
  ParseCurlCommandAction p=new ParseCurlCommandAction();
  AuthManager authManager=new AuthManager();
  BasicCurlParser basicCurlParser=new BasicCurlParser();
  Request request=basicCurlParser.parse(curl 'http://jmeter.apache.org/' -u 'user:passwd');
  Method method=getMethodFor(createAuthManager,Request.class,AuthManager.class);
  method.invoke(p,request,authManager);
  assertEquals(user,authManager.get(0).getUser());
  assertEquals(passwd,authManager.get(0).getPass());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\gui\action\ParseCurlCommandActionTest.java",347
903,"'-tryline","@Test public void testCanAddAuthManagerInHttpRequest() throws Exception {
  ParseCurlCommandAction p=new ParseCurlCommandAction();
  AuthManager authManager=new AuthManager();
  Authorization authorization=new Authorization();
  authorization.setPass(passwd);
  authorization.setUser(user);
  authorization.setURL(http://jmeter.apache.org/);
  authorization.setMechanism(Mechanism.BASIC);
  authManager.addAuth(authorization);
  BasicCurlParser basicCurlParser=new BasicCurlParser();
  Request request=basicCurlParser.parse(curl 'http://jmeter.apache.org/' -u 'user:passwd');
  Method method=getMethodFor(canAddAuthManagerInHttpRequest,Request.class,AuthManager.class);
  assertFalse((boolean)method.invoke(p,request,authManager),When AuthManager contains this authorization, shouldn't add a AuthManager in Http Request);
  request=basicCurlParser.parse(curl 'http://jmeter.apache.org/' -u 'user1:passwd1');
  assertTrue((boolean)method.invoke(p,request,authManager),When AuthManager contains this url, but the username or password isn't the same, + should add a AuthManager in Http Request);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\gui\action\ParseCurlCommandActionTest.java",359
904,"'-tryline","@Test public void testCanUpdateAuthManagerInThreadGroupt() throws Exception {
  ParseCurlCommandAction p=new ParseCurlCommandAction();
  AuthManager authManager=new AuthManager();
  Authorization authorization=new Authorization();
  authorization.setPass(passwd);
  authorization.setUser(user);
  authorization.setURL(http://jmeter.apache.org/);
  authorization.setMechanism(Mechanism.BASIC);
  authManager.addAuth(authorization);
  BasicCurlParser basicCurlParser=new BasicCurlParser();
  Request request=basicCurlParser.parse(curl 'http://jmeter.apache.org/' -u 'user:passwd');
  Method method=getMethodFor(canUpdateAuthManagerInThreadGroup,Request.class,AuthManager.class);
  assertFalse((boolean)method.invoke(p,request,authManager),When AuthManager contains this url, shouldn't add a AuthManager in ThreadGroup);
  request=basicCurlParser.parse(curl 'http://jmeter.apache.fr/' -u 'user:passwd');
  assertTrue((boolean)method.invoke(p,request,authManager),The AuthManager doesn't contain this url , should add a AuthManager in ThreadGroup);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\gui\action\ParseCurlCommandActionTest.java",380
905,"'-tryline","@Test public void testCreateCookieManager(@TempDir Path tempDir) throws Exception {
  ParseCurlCommandAction p=new ParseCurlCommandAction();
  CookieManager cookieManager=new CookieManager();
  BasicCurlParser basicCurlParser=new BasicCurlParser();
  Request request=basicCurlParser.parse(curl 'http://jmeter.apache.org/' -b 'name=Tom');
  Method method=getMethodFor(createCookieManager,CookieManager.class,Request.class);
  method.invoke(p,cookieManager,request);
  assertEquals(jmeter.apache.org,cookieManager.get(0).getDomain(),the domain of cookie should be set in cookieManager);
  assertEquals(/,cookieManager.get(0).getPath(),the path of cookie should be set in cookieManager);
  assertEquals(name,cookieManager.get(0).getName(),the name of cookie should be set in cookieManager);
  assertEquals(Tom,cookieManager.get(0).getValue(),the password of cookie should be set in cookieManager);
  cookieManager=new CookieManager();
  String filepath=tempDir.resolve(test.txt).toAbsolutePath().toString();
  assertTrue(tempDir.resolve(test.txt).toFile().createNewFile());
  request=basicCurlParser.parse(curl 'http://jmeter.apache.org/' -b ' + filepath + ');
  method.invoke(p,cookieManager,request);
  request=basicCurlParser.parse(curl 'http://jmeter.apache.org/' -b 'test1.txt');
  try {
    method.invoke(p,cookieManager,request);
  }
 catch (  IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {
    Throwable cause=e.getCause();
    if (cause instanceof IllegalArgumentException) {
      assertTrue(cause.getMessage().contains(File test1.txt doesn't exist));
    }
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\gui\action\ParseCurlCommandActionTest.java",400
906,"'-tryline","@Test public void testCreateCookieManagerHeader() throws Exception {
  ParseCurlCommandAction p=new ParseCurlCommandAction();
  CookieManager cookieManager=new CookieManager();
  BasicCurlParser basicCurlParser=new BasicCurlParser();
  Request request=basicCurlParser.parse(curl 'http://jmeter.apache.org/' -H 'cookie: PHPSESSID=testphpsessid;a=b' --compressed);
  Field f=ParseCurlCommandAction.class.getDeclaredField(uploadCookiesCheckBox);
  f.setAccessible(true);
  JCheckBox uploadCookiesCheckBox=new JCheckBox(JMeterUtils.getResString(curl_add_cookie_header_to_cookiemanager),true);
  f.set(p,uploadCookiesCheckBox);
  Method method=getMethodFor(createCookieManager,CookieManager.class,Request.class);
  method.invoke(p,cookieManager,request);
  assertEquals(jmeter.apache.org,cookieManager.get(0).getDomain(),the domain of cookie should be set in cookieManager);
  assertEquals(/,cookieManager.get(0).getPath(),the path of cookie should be set in cookieManager);
  assertEquals(a,cookieManager.get(0).getName(),the name of cookie should be set in cookieManager);
  assertEquals(b,cookieManager.get(0).getValue(),the password of cookie should be set in cookieManager);
  uploadCookiesCheckBox=new JCheckBox(JMeterUtils.getResString(curl_add_cookie_header_to_cookiemanager),false);
  f.set(p,uploadCookiesCheckBox);
  cookieManager=new CookieManager();
  method.invoke(p,cookieManager,request);
  assertEquals(0,cookieManager.getCookies().size(),When doesn't choose to upload cookies from header, + the cookie shouldn't be set in cookieManager);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\gui\action\ParseCurlCommandActionTest.java",430
907,"'-tryline","@Test public void testDnsServer() throws Exception {
  ParseCurlCommandAction p=new ParseCurlCommandAction();
  DNSCacheManager dnsCacheManager=new DNSCacheManager();
  BasicCurlParser basicCurlParser=new BasicCurlParser();
  Request request=basicCurlParser.parse(curl 'http://jmeter.apache.org/' --dns-servers '0.0.0.0');
  Method method=getMethodFor(createDnsServer,Request.class,DNSCacheManager.class);
  method.invoke(p,request,dnsCacheManager);
  assertEquals(0.0.0.0,dnsCacheManager.getServers().get(0).getStringValue(),the dns server should be set in DNSCacheManager);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\gui\action\ParseCurlCommandActionTest.java",458
908,"'-tryline","@Test public void testCanAddDnsServerInHttpRequest() throws Exception {
  ParseCurlCommandAction p=new ParseCurlCommandAction();
  DNSCacheManager dnsCacheManager=new DNSCacheManager();
  dnsCacheManager.addServer(0.0.0.0);
  BasicCurlParser basicCurlParser=new BasicCurlParser();
  Request request=basicCurlParser.parse(curl 'http://jmeter.apache.org/' --dns-servers '0.0.0.0');
  Method method=getMethodFor(canAddDnsServerInHttpRequest,Request.class,DNSCacheManager.class);
  assertFalse((boolean)method.invoke(p,request,dnsCacheManager),When the Dns servers are  the same, shouldn't add the DnsCacheManager in Http Request);
  request=basicCurlParser.parse(curl 'http://jmeter.apache.org/' --dns-servers '1.1.1.1');
  assertTrue((boolean)method.invoke(p,request,dnsCacheManager),When the Dns servers aren't the same, should add the DnsCacheManager in Http Request);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\gui\action\ParseCurlCommandActionTest.java",470
909,"'-tryline","@Test public void testCreateDnsResolver() throws Exception {
  ParseCurlCommandAction p=new ParseCurlCommandAction();
  DNSCacheManager dnsCacheManager=new DNSCacheManager();
  BasicCurlParser basicCurlParser=new BasicCurlParser();
  Request request=basicCurlParser.parse(curl 'http://jmeter.apache.org/'  --resolve 'moonagic.com:443:127.0.0.2');
  Method method=getMethodFor(createDnsResolver,Request.class,DNSCacheManager.class);
  method.invoke(p,request,dnsCacheManager);
  assertEquals(StaticHost(moonagic.com, 127.0.0.2),dnsCacheManager.getHosts().get(0).getStringValue());
  request=basicCurlParser.parse(curl 'http://jmeter.apache.org/'  --resolve 'moonagic.com:9090:127.0.0.2');
  method.invoke(p,request,dnsCacheManager);
  assertEquals(StaticHost(moonagic.com, 127.0.0.2),dnsCacheManager.getHosts().get(0).getStringValue(),the dns resolver should be set in DNSCacheManager);
  assertTrue(dnsCacheManager.getComment().contains(Custom DNS resolver doesn't support port),the dns resolver should be set in DNSCacheManager);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\gui\action\ParseCurlCommandActionTest.java",485
910,"'-tryline","@Test public void testCanAddDnsResolverInHttpRequest() throws Exception {
  ParseCurlCommandAction p=new ParseCurlCommandAction();
  BasicCurlParser basicCurlParser=new BasicCurlParser();
  DNSCacheManager dnsCacheManager=new DNSCacheManager();
  dnsCacheManager.addHost(moonagic.com,127.0.0.2);
  Request request=basicCurlParser.parse(curl 'http://jmeter.apache.org/'  --resolve 'moonagic.com:443:127.0.0.2');
  Method method=getMethodFor(canAddDnsResolverInHttpRequest,Request.class,DNSCacheManager.class);
  dnsCacheManager=new DNSCacheManager();
  dnsCacheManager.addHost(moonagic.com,127.0.0.2);
  method.invoke(p,request,dnsCacheManager);
  assertFalse((boolean)method.invoke(p,request,dnsCacheManager),When the Dns servers are the same, shouldn't add the DnsCacheManager in Http Request);
  request=basicCurlParser.parse(curl 'http://jmeter.apache.org/'  --resolve 'moonagic.com:9090:127.0.0.1');
  method.invoke(p,request,dnsCacheManager);
  assertTrue((boolean)method.invoke(p,request,dnsCacheManager),When the Dns servers aren't the same, should add the DnsCacheManager in Http Request);
  dnsCacheManager=new DNSCacheManager();
  dnsCacheManager.addHost(moonagic.com,127.0.0.1);
  dnsCacheManager.addHost(moonagic.com,127.0.0.2);
  method.invoke(p,request,dnsCacheManager);
  assertTrue((boolean)method.invoke(p,request,dnsCacheManager),When the Dns servers aren't the same, should add the DnsCacheManager in Http Request);
  request=basicCurlParser.parse(curl 'http://jmeter.apache.org/'  --resolve 'moonagic.com:9090:127.0.0.1');
  method.invoke(p,request,dnsCacheManager);
  assertTrue((boolean)method.invoke(p,request,dnsCacheManager),When the Dns servers aren't the same, should add the DnsCacheManager in Http Request);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\gui\action\ParseCurlCommandActionTest.java",503
911,"'-tryline","@Test public void testCloneSampler() throws Exception {
  HTTPSamplerBase sampler=(HTTPSamplerBase)gui.createTestElement();
  sampler.addArgument(param,value);
  HTTPSamplerBase clonedSampler=(HTTPSamplerBase)sampler.clone();
  clonedSampler.setRunningVersion(true);
  sampler.getArguments().getArgument(0).setValue(new value);
  assertEquals(Sampler didn't clone correctly,new value,sampler.getArguments().getArgument(0).getValue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\gui\TestHttpTestSampleGui.java",38
912,"'-tryline","@Test public void testHttp() throws Exception {
  assertTrue(AuthManager.isSupportedProtocol(new URL(http:)));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestAuthManager.java",35
913,"'-tryline","@Test public void testHttps() throws Exception {
  assertTrue(AuthManager.isSupportedProtocol(new URL(https:)));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestAuthManager.java",40
914,"'-tryline","@Test public void testFile() throws Exception {
  AuthManager am=new AuthManager();
  CollectionProperty ao=am.getAuthObjects();
  assertEquals(0,ao.size());
  am.addFile(findTestPath(testfiles/TestAuth.txt));
  assertEquals(9,ao.size());
  Authorization at;
  at=am.getAuthForURL(new URL(http://a.b.c/));
  assertEquals(login,at.getUser());
  assertEquals(password,at.getPass());
  at=am.getAuthForURL(new URL(http://a.b.c:80/));
  assertEquals(login,at.getUser());
  assertEquals(password,at.getPass());
  at=am.getAuthForURL(new URL(http://a.b.c:443/));
  assertNull(at);
  at=am.getAuthForURL(new URL(http://a.b.c/1));
  assertEquals(login1,at.getUser());
  assertEquals(password1,at.getPass());
  assertEquals(,at.getDomain());
  assertEquals(,at.getRealm());
  at=am.getAuthForURL(new URL(http://d.e.f/));
  assertEquals(user,at.getUser());
  assertEquals(pass,at.getPass());
  assertEquals(domain,at.getDomain());
  assertEquals(realm,at.getRealm());
  at=am.getAuthForURL(new URL(https://j.k.l/));
  assertEquals(jkl,at.getUser());
  assertEquals(pass,at.getPass());
  at=am.getAuthForURL(new URL(https://j.k.l:443/));
  assertEquals(jkl,at.getUser());
  assertEquals(pass,at.getPass());
  at=am.getAuthForURL(new URL(https://l.m.n/));
  assertEquals(lmn443,at.getUser());
  assertEquals(pass,at.getPass());
  at=am.getAuthForURL(new URL(https://l.m.n:443/));
  assertEquals(lmn443,at.getUser());
  assertEquals(pass,at.getPass());
  at=am.getAuthForURL(new URL(https://l.m.n:8443/));
  assertEquals(lmn8443,at.getUser());
  assertEquals(pass,at.getPass());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestAuthManager.java",45
915,"'-tryline","public void setUp() throws Exception {
  this.cacheManager=new CacheManager();
  this.currentTimeInGMT=makeDate(new Date());
  this.url=new URL(LOCAL_HOST);
  this.sampleResultOK=getSampleResultWithSpecifiedResponseCode(200);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",59
916,"'-tryline","public void tearDown() throws Exception {
  this.url=null;
  this.cacheManager=null;
  this.currentTimeInGMT=null;
  this.sampleResultOK=null;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",67
917,"'-tryline","protected abstract void cacheResult(HTTPSampleResult result) throws Exception ;
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",78
918,"'-tryline","protected abstract void cacheResult(HTTPSampleResult sampleResultOK,boolean hasCachingHeaders) throws Exception ;
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",80
919,"'-tryline","@Test public void testExpiresBug59962() throws Exception {
  this.cacheManager.setUseExpires(true);
  this.cacheManager.testIterationStart(null);
  assertNoSuchEntry();
  long start=System.currentTimeMillis();
  setExpires(makeDate(new Date(start + 2000)));
  cacheResultWithGivenCode(304);
  assertValidEntry();
  sleepTill(start + 2010);
  assertInvalidEntry();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",103
920,"'-tryline","@Test public void testExpires() throws Exception {
  this.cacheManager.setUseExpires(true);
  this.cacheManager.testIterationStart(null);
  assertNoSuchEntry();
  long start=System.currentTimeMillis();
  setExpires(makeDate(new Date(start + 2000)));
  cacheResult(sampleResultOK);
  assertValidEntry();
  sleepTill(start + 2010);
  assertInvalidEntry();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",116
921,"'-tryline","@Test public void testNoExpires() throws Exception {
  this.cacheManager.setUseExpires(false);
  this.cacheManager.testIterationStart(null);
  assertNoSuchEntry();
  setExpires(makeDate(new Date(System.currentTimeMillis() + 2000)));
  cacheResult(sampleResultOK);
  assertInvalidEntry();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",129
922,"'-tryline","@Test public void testCacheControl() throws Exception {
  this.cacheManager.setUseExpires(true);
  this.cacheManager.testIterationStart(null);
  assertNoSuchEntry();
  long start=System.currentTimeMillis();
  setExpires(makeDate(new Date(start)));
  setCacheControl(public, max-age=1);
  cacheResult(sampleResultOK);
  assertValidEntry();
  sleepTill(start + 2010);
  assertInvalidEntry();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",139
923,"'-tryline","@Test public void testCacheVarySomething() throws Exception {
  String varyHeader=Something;
  testCacheVary(varyHeader,new Header[]{new Header(varyHeader,value)},new Header[]{new Header(varyHeader,something completely different)});
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",153
924,"'-tryline","@Test public void testCacheVaryAcceptEncoding() throws Exception {
  String varyHeader=Accept-Encoding;
  testCacheVary(varyHeader,new Header[]{new Header(varyHeader,value)},new Header[]{new Header(varyHeader,something completely different)});
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",161
925,"'-tryline","@Test public void testCacheMultiValueVaryHeaders() throws Exception {
  String varyHeader=Accept-Encoding;
  testCacheVary(varyHeader,new Header[]{new Header(varyHeader,value),new Header(varyHeader,another value)},new Header[]{new Header(varyHeader,something completely different)});
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",169
926,"'-tryline","@Test public void testCacheMultipleVaryHeaders() throws Exception {
  String varyHeaderOne=Accept-Encoding;
  String varyHeaderTwo=Something;
  testCacheVary(varyHeaderOne + , + varyHeaderTwo,new Header[]{new Header(varyHeaderOne,first value),new Header(varyHeaderTwo,another value)},new Header[]{new Header(varyHeaderOne,first)});
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",179
927,"'-tryline","@Test public void testCacheMultipleMultiVaryHeaders() throws Exception {
  String varyHeaderOne=Accept-Encoding;
  String varyHeaderTwo=Something;
  testCacheVary(varyHeaderOne + , + varyHeaderTwo,new Header[]{new Header(varyHeaderOne,first value),new Header(varyHeaderOne,second value),new Header(varyHeaderTwo,another value)},new Header[]{new Header(varyHeaderOne,first value),new Header(varyHeaderOne,another value)});
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",190
928,"'-tryline","@SuppressWarnings(deprecation) private void testCacheVary(String vary,Header[] origHeaders,Header[] differentHeaders) throws Exception {
  this.cacheManager.setUseExpires(true);
  this.cacheManager.testIterationStart(null);
  assertNull(getThreadCacheEntry(LOCAL_HOST),Should not find entry);
  assertFalse(this.cacheManager.inCache(url,origHeaders),Should not find valid entry);
  setExpires(makeDate(new Date(System.currentTimeMillis())));
  setCacheControl(public, max-age=5);
  sampleResultOK.setRequestHeaders(asString(origHeaders));
  this.vary=vary;
  cacheResult(sampleResultOK);
  assertNotNull(getThreadCacheEntry(LOCAL_HOST).getVaryHeader(),Should find entry with vary header);
  assertFalse(this.cacheManager.inCache(url),Should not find valid entry without headers);
  assertTrue(this.cacheManager.inCache(url,origHeaders),Should find valid entry with headers);
  assertFalse(this.cacheManager.inCache(url,differentHeaders),Should not find valid entry with different header);
  this.vary=null;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",210
929,"'-tryline","@Test public void testCacheHEAD() throws Exception {
  this.cacheManager.setUseExpires(true);
  this.cacheManager.testIterationStart(null);
  assertNoSuchEntry();
  setExpires(makeDate(new Date(System.currentTimeMillis())));
  setCacheControl(public, max-age=5);
  HTTPSampleResult sampleResultHEAD=getSampleResultWithSpecifiedResponseCode(200);
  sampleResultHEAD.setHTTPMethod(HEAD);
  cacheResult(sampleResultHEAD);
  assertNoSuchEntry();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",228
930,"'-tryline","@Test public void testPrivateCache() throws Exception {
  this.cacheManager.setUseExpires(true);
  this.cacheManager.testIterationStart(null);
  assertNoSuchEntry();
  long start=System.currentTimeMillis();
  setExpires(makeDate(new Date(start)));
  setCacheControl(private, max-age=1);
  cacheResult(sampleResultOK);
  assertValidEntry();
  sleepTill(start + 2020);
  assertInvalidEntry();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",241
931,"'-tryline","@Test public void testNoCacheControlNoMaxAgeNoExpire() throws Exception {
  this.cacheManager.setUseExpires(true);
  this.cacheManager.testIterationStart(null);
  assertNoSuchEntry();
  long start=System.currentTimeMillis();
  long age=30 * 1000;
  setLastModified(makeDate(new Date(start - age)));
  cacheResult(sampleResultOK);
  assertValidEntry();
  sleepTill(start + age / 10 + 1010);
  assertInvalidEntry();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",255
932,"'-tryline","@Test public void testPrivateCacheNoMaxAgeNoExpire() throws Exception {
  this.cacheManager.setUseExpires(true);
  this.cacheManager.testIterationStart(null);
  assertNoSuchEntry();
  setCacheControl(private);
  long start=System.currentTimeMillis();
  long age=30 * 1000;
  setLastModified(makeDate(new Date(start - age)));
  cacheResult(sampleResultOK);
  assertValidEntry();
  sleepTill(start + age / 10 + 1010);
  assertInvalidEntry();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",274
933,"'-tryline","@Test public void testPrivateCacheExpireNoMaxAge() throws Exception {
  this.cacheManager.setUseExpires(true);
  this.cacheManager.testIterationStart(null);
  assertNoSuchEntry();
  long start=System.currentTimeMillis();
  setExpires(makeDate(new Date(start + 2000)));
  setCacheControl(private);
  cacheResult(sampleResultOK);
  assertValidEntry();
  sleepTill(start + 2010);
  assertInvalidEntry();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",293
934,"'-tryline","@Test public void testNoCache() throws Exception {
  this.cacheManager.setUseExpires(true);
  this.cacheManager.testIterationStart(null);
  assertNoSuchEntry();
  setCacheControl(no-cache);
  cacheResult(sampleResultOK);
  assertInvalidEntry();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",307
935,"'-tryline","@Test public void testNoStore() throws Exception {
  this.cacheManager.setUseExpires(true);
  this.cacheManager.testIterationStart(null);
  assertNoSuchEntry();
  setCacheControl(no-store);
  cacheResult(sampleResultOK);
  assertNoSuchEntry();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",317
936,"'-tryline","@Test public void testNoCachingHeadersBug64915() throws Exception {
  this.cacheManager.setUseExpires(true);
  this.cacheManager.testIterationStart(null);
  assertNoSuchEntry();
  cacheResult(sampleResultOK,false);
  assertNoSuchEntry();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",327
937,"'-tryline","@Test public void testCacheHttpClientBug51932() throws Exception {
  this.cacheManager.setUseExpires(true);
  this.cacheManager.testIterationStart(null);
  assertNoSuchEntry();
  long start=System.currentTimeMillis();
  setExpires(makeDate(new Date(start)));
  setCacheControl(public, max-age=1, no-transform);
  cacheResult(sampleResultOK);
  assertValidEntry();
  sleepTill(start + 2010);
  assertInvalidEntry();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",337
938,"'-tryline","@SuppressWarnings(deprecation) private void assertInvalidEntry() throws Exception {
  CacheEntry cachedEntry=getThreadCacheEntry(LOCAL_HOST);
  assertNotNull(getThreadCacheEntry(LOCAL_HOST),Should find entry);
  assertFalse(this.cacheManager.inCache(url),Should not find valid entry. Found:  + cachedEntry +  at + System.currentTimeMillis());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",351
939,"'-tryline","@SuppressWarnings(deprecation) private void assertValidEntry() throws Exception {
  assertNotNull(getThreadCacheEntry(LOCAL_HOST),Should find entry);
  assertTrue(this.cacheManager.inCache(url),Should find valid entry);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",358
940,"'-tryline","@SuppressWarnings(deprecation) private void assertNoSuchEntry() throws Exception {
  assertNull(getThreadCacheEntry(LOCAL_HOST),Should not find entry);
  assertFalse(this.cacheManager.inCache(url),Should not find valid entry);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",364
941,"'-tryline","@Test public void testGetClearEachIteration() throws Exception {
  assertFalse(this.cacheManager.getClearEachIteration(),Should default not to clear after each iteration.);
  this.cacheManager.setClearEachIteration(true);
  assertTrue(this.cacheManager.getClearEachIteration(),Should be settable to clear after each iteration.);
  this.cacheManager.setClearEachIteration(false);
  assertFalse(this.cacheManager.getClearEachIteration(),Should be settable not to clear after each iteration.);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",370
942,"'-tryline","private void cacheResultWithGivenCode(String responseCode) throws Exception {
  HTTPSampleResult sampleResult=getSampleResultWithSpecifiedResponseCode(responseCode);
  cacheResult(sampleResult);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",379
943,"'-tryline","@Test public void testSaveDetailsWithEmptySampleResultGivesNoCacheEntry() throws Exception {
  cacheResultWithGivenCode();
  assertTrue(getThreadCache().isEmpty(),Saving details with empty SampleResult should not make cache entry.);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",384
944,"'-tryline","@Test public void testSaveDetailsHttpMethodWithSampleResultWithResponseCode200GivesCacheEntry() throws Exception {
  cacheResultWithGivenCode(200);
  CacheManager.CacheEntry cacheEntry=getThreadCacheEntry(LOCAL_HOST);
  assertNotNull(cacheEntry,Saving SampleResult with HttpMethod & 200 response should make cache entry.);
  assertEquals(EXPECTED_ETAG,cacheEntry.getEtag());
  assertEquals(this.currentTimeInGMT,cacheEntry.getLastModified());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",390
945,"'-tryline","@Test public void testSaveDetailsHttpMethodWithSampleResultWithResponseCode404GivesNoCacheEntry() throws Exception {
  cacheResultWithGivenCode(404);
  assertNull(getThreadCacheEntry(LOCAL_HOST),Saving SampleResult with HttpMethod & 404 response should not make cache entry.);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",399
946,"'-tryline","@Test public void testSetHeadersHttpMethodWithSampleResultWithResponseCode200GivesCacheEntry() throws Exception {
  addRequestHeader(HTTPConstants.IF_MODIFIED_SINCE,this.currentTimeInGMT);
  addRequestHeader(HTTPConstants.ETAG,EXPECTED_ETAG);
  cacheResultWithGivenCode(200);
  setRequestHeaders();
  checkRequestHeader(HTTPConstants.IF_NONE_MATCH,EXPECTED_ETAG);
  checkRequestHeader(HTTPConstants.IF_MODIFIED_SINCE,this.currentTimeInGMT);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",405
947,"'-tryline","@Test public void testSetHeadersHttpMethodWithSampleResultWithResponseCode404GivesNoCacheEntry() throws Exception {
  cacheResultWithGivenCode(404);
  setRequestHeaders();
  assertNull(getThreadCacheEntry(LOCAL_HOST),Saving SampleResult with HttpMethod & 404 response should not make cache entry.);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",415
948,"'-tryline","@Test public void testClearCache() throws Exception {
  assertTrue(getThreadCache().isEmpty(),ThreadCache should be empty initially.);
  cacheResultWithGivenCode(200);
  assertFalse(getThreadCache().isEmpty(),ThreadCache should be populated after saving details for HttpMethod with SampleResult with response code 200.);
  this.cacheManager.clear();
  assertTrue(getThreadCache().isEmpty(),ThreadCache should be emptied by call to clear.);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",422
949,"'-tryline","private Map<String,CacheManager.CacheEntry> getThreadCache() throws Exception {
  Field threadLocalfield=CacheManager.class.getDeclaredField(threadCache);
  threadLocalfield.setAccessible(true);
  @SuppressWarnings(unchecked) ThreadLocal<Map<String,CacheManager.CacheEntry>> threadLocal=(ThreadLocal<Map<String,CacheManager.CacheEntry>>)threadLocalfield.get(this.cacheManager);
  return threadLocal.get();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",441
950,"'-tryline","protected CacheManager.CacheEntry getThreadCacheEntry(String url) throws Exception {
  return getThreadCache().get(url);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerBase.java",450
951,"'-tryline","@Override @BeforeEach public void setUp() throws Exception {
  super.setUp();
  this.httpMethod=new HttpPostStub();
  this.httpResponse=new HttpResponseStub();
  this.httpMethod.setURI(this.url.toURI());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerHC4.java",213
952,"'-tryline","@Override @AfterEach public void tearDown() throws Exception {
  this.httpMethod=null;
  this.httpResponse=null;
  super.tearDown();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerHC4.java",222
953,"'-tryline","@Test @SuppressWarnings(deprecation) public void testBug61321() throws Exception {
  this.cacheManager.setUseExpires(false);
  this.cacheManager.testIterationStart(null);
  assertNull(getThreadCacheEntry(LOCAL_HOST),Should not find entry);
  assertFalse(this.cacheManager.inCache(url),Should not find valid entry);
  cacheResult(sampleResultOK);
  assertNotNull(getThreadCacheEntry(LOCAL_HOST),Should find entry);
  assertFalse(this.cacheManager.inCache(url),Should find valid entry);
  cacheManager.setHeaders(url,httpMethod);
  checkIfModifiedSinceHeader(httpMethod);
  this.httpMethod=new HttpPostStub();
  sampleResultOK=getSampleResultWithSpecifiedResponseCode(304);
  setLastModified(null);
  cacheResult(sampleResultOK);
  assertNotNull(getThreadCacheEntry(LOCAL_HOST),Should find entry);
  assertFalse(this.cacheManager.inCache(url),Should not find valid entry);
  cacheManager.setHeaders(url,httpMethod);
  checkIfModifiedSinceHeader(httpMethod);
  this.httpMethod=new HttpPostStub();
  sampleResultOK=getSampleResultWithSpecifiedResponseCode(304);
  setLastModified(null);
  cacheResult(sampleResultOK);
  assertNotNull(getThreadCacheEntry(LOCAL_HOST),Should find entry);
  assertFalse(this.cacheManager.inCache(url),Should not find valid entry);
  cacheManager.setHeaders(url,httpMethod);
  checkIfModifiedSinceHeader(httpMethod);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerHC4.java",278
954,"'-tryline","@BeforeEach public void setUp() throws Exception {
  this.cacheManager=new CacheManager();
  this.currentTimeInGMT=makeDate(new Date());
  this.url=new URL(LOCAL_HOST);
  this.sampleResultOK=getSampleResultWithSpecifiedResponseCode(200);
  this.httpMethod=new HttpPostStub();
  this.httpResponse=new HttpResponseStub();
  this.httpMethod.setURI(this.url.toURI());
  jmctx=JMeterContextService.getContext();
  jmvars=new JMeterVariables();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerThreadIteration.java",246
955,"'-tryline","@AfterEach public void tearDown() throws Exception {
  this.url=null;
  this.httpMethod=null;
  this.httpResponse=null;
  this.cacheManager=new CacheManager();
  this.currentTimeInGMT=null;
  this.sampleResultOK=null;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerThreadIteration.java",259
956,"'-tryline","private Map<String,CacheManager.CacheEntry> getThreadCache() throws Exception {
  Field threadLocalfield=CacheManager.class.getDeclaredField(threadCache);
  threadLocalfield.setAccessible(true);
  @SuppressWarnings(unchecked) ThreadLocal<Map<String,CacheManager.CacheEntry>> threadLocal=(ThreadLocal<Map<String,CacheManager.CacheEntry>>)threadLocalfield.get(this.cacheManager);
  return threadLocal.get();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerThreadIteration.java",294
957,"'-tryline","protected CacheManager.CacheEntry getThreadCacheEntry(String url) throws Exception {
  return getThreadCache().get(url);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerThreadIteration.java",303
958,"'-tryline","@Test public void testCacheControlCleared() throws Exception {
  this.cacheManager.setUseExpires(true);
  this.cacheManager.testIterationStart(null);
  assertNull(Should not find entry,getThreadCacheEntry(LOCAL_HOST));
  Header[] headers=new Header[1];
  assertFalse(Should not find valid entry,this.cacheManager.inCache(url,headers));
  long start=System.currentTimeMillis();
  setExpires(makeDate(new Date(start)));
  setCacheControl(public, max-age=1);
  cacheResult(sampleResultOK);
  assertNotNull(Before iternation, should find entry,getThreadCacheEntry(LOCAL_HOST));
  assertTrue(Before iternation, should find valid entry,this.cacheManager.inCache(url,headers));
  this.cacheManager.setClearEachIteration(true);
  this.cacheManager.testIterationStart(null);
  assertNull(After iterantion, should not find entry,getThreadCacheEntry(LOCAL_HOST));
  assertFalse(After iterantion, should not find valid entry,this.cacheManager.inCache(url,headers));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerThreadIteration.java",306
959,"'-tryline","@Test public void testCacheManagerWhenThreadIterationIsANewUser() throws Exception {
  jmvars.putObject(SAME_USER,false);
  jmctx.setVariables(jmvars);
  this.cacheManager.setUseExpires(true);
  this.cacheManager.testIterationStart(null);
  assertNull(Should not find entry,getThreadCacheEntry(LOCAL_HOST));
  Header[] headers=new Header[1];
  assertFalse(Should not find valid entry,this.cacheManager.inCache(url,headers));
  long start=System.currentTimeMillis();
  setExpires(makeDate(new Date(start)));
  setCacheControl(public, max-age=1);
  cacheResult(sampleResultOK);
  this.cacheManager.setThreadContext(jmctx);
  this.cacheManager.setControlledByThread(true);
  assertNotNull(Before iternation, should find entry,getThreadCacheEntry(LOCAL_HOST));
  assertTrue(Before iternation, should find valid entry,this.cacheManager.inCache(url,headers));
  this.cacheManager.testIterationStart(null);
  assertNull(After iterantion, should not find entry,getThreadCacheEntry(LOCAL_HOST));
  assertFalse(After iterantion, should not find valid entry,this.cacheManager.inCache(url,headers));
  jmvars.putObject(SAME_USER,true);
  jmctx.setVariables(jmvars);
  this.cacheManager.setThreadContext(jmctx);
  start=System.currentTimeMillis();
  setExpires(makeDate(new Date(start)));
  setCacheControl(public, max-age=1);
  cacheResult(sampleResultOK);
  assertNotNull(Before iternation, should find entry,getThreadCacheEntry(LOCAL_HOST));
  assertTrue(Before iternation, should find valid entry,this.cacheManager.inCache(url,headers));
  this.cacheManager.setControlledByThread(false);
  this.cacheManager.setClearEachIteration(true);
  this.cacheManager.testIterationStart(null);
  assertNull(After iterantion, should not find entry,getThreadCacheEntry(LOCAL_HOST));
  assertFalse(After iterantion, should not find valid entry,this.cacheManager.inCache(url,headers));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerThreadIteration.java",349
960,"'-tryline","@Test public void testCacheManagerWhenThreadIterationIsSameUser() throws Exception {
  jmvars.putObject(SAME_USER,true);
  jmctx.setVariables(jmvars);
  this.cacheManager.setUseExpires(true);
  this.cacheManager.testIterationStart(null);
  assertNull(Should not find entry,getThreadCacheEntry(LOCAL_HOST));
  Header[] headers=new Header[1];
  assertFalse(Should not find valid entry,this.cacheManager.inCache(url,headers));
  long start=System.currentTimeMillis();
  setExpires(makeDate(new Date(start)));
  setCacheControl(public, max-age=1);
  cacheResult(sampleResultOK);
  this.cacheManager.setThreadContext(jmctx);
  this.cacheManager.setControlledByThread(true);
  assertNotNull(Before iteration, should find entry,getThreadCacheEntry(LOCAL_HOST));
  assertTrue(Before iteration, should find valid entry,this.cacheManager.inCache(url,headers));
  this.cacheManager.testIterationStart(null);
  assertNotNull(After iteration, should find entry,getThreadCacheEntry(LOCAL_HOST));
  assertTrue(After iteration, should find valid entry,this.cacheManager.inCache(url,headers));
  jmvars.putObject(SAME_USER,false);
  jmctx.setVariables(jmvars);
  this.cacheManager.setThreadContext(jmctx);
  start=System.currentTimeMillis();
  setExpires(makeDate(new Date(start)));
  setCacheControl(public, max-age=1);
  cacheResult(sampleResultOK);
  assertNotNull(Before iteration, should find entry,getThreadCacheEntry(LOCAL_HOST));
  assertTrue(Before iteration, should find valid entry,this.cacheManager.inCache(url,headers));
  this.cacheManager.setControlledByThread(false);
  this.cacheManager.setClearEachIteration(false);
  this.cacheManager.testIterationStart(null);
  assertNotNull(After iteration, should find entry,getThreadCacheEntry(LOCAL_HOST));
  assertTrue(After iteration, should find valid entry,this.cacheManager.inCache(url,headers));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerThreadIteration.java",388
961,"'-tryline","@Override protected void cacheResult(HTTPSampleResult result) throws Exception {
  cacheResult(result,true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerUrlConnection.java",31
962,"'-tryline","@Override protected void cacheResult(HTTPSampleResult result,boolean hasCachingHeaders) throws Exception {
  ((URLConnectionStub)this.urlConnection).setCachingHeaders(hasCachingHeaders);
  this.cacheManager.saveDetails(this.urlConnection,result);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerUrlConnection.java",36
963,"'-tryline","@Override @BeforeEach public void setUp() throws Exception {
  super.setUp();
  this.urlConnection=new URLConnectionStub(this.url.openConnection());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerUrlConnectionBase.java",92
964,"'-tryline","@Override @AfterEach public void tearDown() throws Exception {
  this.urlConnection=null;
  super.tearDown();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerUrlConnectionBase.java",99
965,"'-tryline","@BeforeEach public void setUp() throws Exception {
  jmctx=JMeterContextService.getContext();
  man=new CookieManager();
  man.setImplementation(HC4CookieHandler.class.getName());
  man.setCookiePolicy(HC4CookieHandler.DEFAULT_POLICY_NAME);
  man.setThreadContext(jmctx);
  man.testStarted();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",50
966,"'-tryline","@Test public void testRemoveCookie() throws Exception {
  man.setThreadContext(jmctx);
  Cookie c=new Cookie(id,me,127.0.0.1,/,false,0);
  man.add(c);
  assertEquals(1,man.getCookieCount());
  Cookie d=new Cookie(id,,127.0.0.1,/,false,0);
  man.add(d);
  assertEquals(0,man.getCookieCount());
  man.add(c);
  man.add(c);
  assertEquals(1,man.getCookieCount());
  Cookie e=new Cookie(id,me2,127.0.0.1,/,false,0);
  man.add(e);
  assertEquals(1,man.getCookieCount());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",61
967,"'-tryline","@Test public void testSendCookie() throws Exception {
  man.add(new Cookie(id,value,jakarta.apache.org,/,false,9999999999L));
  HTTPSamplerBase sampler=new HTTPNullSampler();
  sampler.setDomain(jakarta.apache.org);
  sampler.setPath(/index.html);
  sampler.setMethod(HTTPConstants.GET);
  assertNotNull(man.getCookieHeaderForURL(sampler.getUrl()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",79
968,"'-tryline","@Test public void testSendCookie2() throws Exception {
  man.add(new Cookie(id,value,.apache.org,/,false,9999999999L));
  HTTPSamplerBase sampler=new HTTPNullSampler();
  sampler.setDomain(jakarta.apache.org);
  sampler.setPath(/index.html);
  sampler.setMethod(HTTPConstants.GET);
  assertNotNull(man.getCookieHeaderForURL(sampler.getUrl()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",89
969,"'-tryline","/** 
 * Test that the cookie domain field is actually handled as browsers do (i.e.: host X matches domain .X):
 */
@Test public void testDomainHandling() throws Exception {
  URL url=new URL(http://jakarta.apache.org/);
  man.addCookieFromHeader(test=1;domain=.jakarta.apache.org,url);
  assertNotNull(man.getCookieHeaderForURL(url));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",100
970,"'-tryline","@Test public void testAddCookieFromHeaderWithWildcard() throws Exception {
  URL url=new URL(https://subdomain.bt.com/page);
  String headerLine=SMTRYNO=1; path=/; domain=.bt.com;
  man.addCookieFromHeader(headerLine,url);
  Assert.assertEquals(1,man.getCookieCount());
  HC4CookieHandler cookieHandler=(HC4CookieHandler)man.getCookieHandler();
  List<org.apache.http.cookie.Cookie> cookies=cookieHandler.getCookiesForUrl(man.getCookies(),url,CookieManager.ALLOW_VARIABLE_COOKIES);
  for (  org.apache.http.cookie.Cookie cookie : cookies) {
    Assert.assertEquals(bt.com,cookie.getDomain());
    Assert.assertTrue(((BasicClientCookie)cookie).containsAttribute(ClientCookie.DOMAIN_ATTR));
  }
  URL urlMainDomain=new URL(https://www.bt.com/page);
  cookies=cookieHandler.getCookiesForUrl(man.getCookies(),urlMainDomain,CookieManager.ALLOW_VARIABLE_COOKIES);
  Assert.assertEquals(1,cookies.size());
  for (  org.apache.http.cookie.Cookie cookie : cookies) {
    Assert.assertEquals(bt.com,cookie.getDomain());
    Assert.assertTrue(((BasicClientCookie)cookie).containsAttribute(ClientCookie.DOMAIN_ATTR));
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",111
971,"'-tryline","@Test public void testAddCookieFromHeaderWithNoWildcard() throws Exception {
  URL url=new URL(https://subdomain.bt.com/page);
  String headerLine=SMTRYNO=1; path=/;
  man.addCookieFromHeader(headerLine,url);
  Assert.assertEquals(1,man.getCookieCount());
  HC4CookieHandler cookieHandler=(HC4CookieHandler)man.getCookieHandler();
  List<org.apache.http.cookie.Cookie> cookies=cookieHandler.getCookiesForUrl(man.getCookies(),url,CookieManager.ALLOW_VARIABLE_COOKIES);
  Assert.assertEquals(1,cookies.size());
  for (  org.apache.http.cookie.Cookie cookie : cookies) {
    Assert.assertEquals(subdomain.bt.com,cookie.getDomain());
    Assert.assertFalse(((BasicClientCookie)cookie).containsAttribute(ClientCookie.DOMAIN_ATTR));
  }
  URL urlMainDomain=new URL(https://www.bt.com/page);
  cookies=cookieHandler.getCookiesForUrl(man.getCookies(),urlMainDomain,CookieManager.ALLOW_VARIABLE_COOKIES);
  Assert.assertEquals(0,cookies.size());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",141
972,"'-tryline","@Test public void testAddCookieFromHeaderWithWildcard2() throws Exception {
  URL url=new URL(https://www.bt.com/page);
  String headerLine=SMTRYNO=1; path=/; domain=.bt.com;
  man.addCookieFromHeader(headerLine,url);
  Assert.assertEquals(1,man.getCookieCount());
  HC4CookieHandler cookieHandler=(HC4CookieHandler)man.getCookieHandler();
  URL urlSubDomain=new URL(https://subdomain.bt.com/page);
  List<org.apache.http.cookie.Cookie> cookies=cookieHandler.getCookiesForUrl(man.getCookies(),urlSubDomain,CookieManager.ALLOW_VARIABLE_COOKIES);
  Assert.assertEquals(1,cookies.size());
  for (  org.apache.http.cookie.Cookie cookie : cookies) {
    Assert.assertEquals(bt.com,cookie.getDomain());
    Assert.assertTrue(((BasicClientCookie)cookie).containsAttribute(ClientCookie.DOMAIN_ATTR));
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",166
973,"'-tryline","@Test public void testBug56358() throws Exception {
  URL url=new URL(http://remote.com:10008/get/cookie);
  String headerLine=test=value;Max-age=120;path=/;Version=1;
  man.setCookiePolicy(CookieSpecs.STANDARD);
  man.addCookieFromHeader(headerLine,url);
  Assert.assertEquals(1,man.getCookieCount());
  HC4CookieHandler cookieHandler=(HC4CookieHandler)man.getCookieHandler();
  URL urlSameDomainDifferentPort=new URL(http://remote.com:10001/test/me);
  List<org.apache.http.cookie.Cookie> cookies=cookieHandler.getCookiesForUrl(man.getCookies(),urlSameDomainDifferentPort,CookieManager.ALLOW_VARIABLE_COOKIES);
  Assert.assertEquals(1,cookies.size());
  for (  org.apache.http.cookie.Cookie cookie : cookies) {
    Assert.assertEquals(remote.com,cookie.getDomain());
    Assert.assertEquals(test,cookie.getName());
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",187
974,"'-tryline","@Test public void testCrossDomainHandling() throws Exception {
  URL url=new URL(http://jakarta.apache.org/);
  assertEquals(0,man.getCookieCount());
  man.addCookieFromHeader(test=2;domain=.hc.apache.org,url);
  assertEquals(0,man.getCookieCount());
  man.addCookieFromHeader(test=1;domain=.jakarta.apache.org,url);
  assertEquals(1,man.getCookieCount());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",209
975,"'-tryline","/** 
 * Test that we won't be tricked by similar host names (this was a past bug, although it never got reported in the bug database):
 */
@Test public void testSimilarHostNames() throws Exception {
  URL url=new URL(http://ache.org/);
  man.addCookieFromHeader(test=1,url);
  url=new URL(http://jakarta.apache.org/);
  assertNull(man.getCookieHeaderForURL(url));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",219
976,"'-tryline","@Test public void testSessionCookie() throws Exception {
  URL url=new URL(http://a.b.c/);
  man.addCookieFromHeader(test=1,url);
  String s=man.getCookieHeaderForURL(url);
  assertNotNull(s);
  assertEquals(test=1,s);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",232
977,"'-tryline","@Test public void testCookieWithEquals() throws Exception {
  URL url=new URL(http://a.b.c/);
  man.addCookieFromHeader(NSCP_USER_LOGIN1_NEW=SHA=xxxxx,url);
  String s=man.getCookieHeaderForURL(url);
  assertNotNull(s);
  assertEquals(NSCP_USER_LOGIN1_NEW=SHA=xxxxx,s);
  Cookie c=man.get(0);
  assertEquals(NSCP_USER_LOGIN1_NEW,c.getName());
  assertEquals(SHA=xxxxx,c.getValue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",242
978,"'-tryline","@Test public void testOldCookie() throws Exception {
  URL url=new URL(http://a.b.c/);
  man.addCookieFromHeader(test=1; expires=Mon, 01-Jan-1990 00:00:00 GMT,url);
  String s=man.getCookieHeaderForURL(url);
  assertNull(s);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",255
979,"'-tryline","@Test public void testNewCookie() throws Exception {
  URL url=new URL(http://a.b.c/);
  man.addCookieFromHeader(test=1; expires=Mon, 01-Jan-2990 00:00:00 GMT,url);
  assertEquals(1,man.getCookieCount());
  String s=man.getCookieHeaderForURL(url);
  assertNotNull(s);
  assertEquals(test=1,s);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",264
980,"'-tryline","@Test public void testHttpOnlyCookie() throws Exception {
  URL url=new URL(http://a.b.c/);
  man.addCookieFromHeader(mySASession=s%3AcafPSGf6UJguyhddGFFeLdHBy9CYbzIS.NhYyA26LGTAVoLxhCQUK%2F2Bs34MW5kGHmErKzG6r3XI; Path=/; +  Expires=Tue, 07 Feb 2990 09:13:14 GMT; HttpOnly,url);
  assertEquals(1,man.getCookieCount());
  String s=man.getCookieHeaderForURL(url);
  assertNotNull(s);
  assertEquals(mySASession=s%3AcafPSGf6UJguyhddGFFeLdHBy9CYbzIS.NhYyA26LGTAVoLxhCQUK%2F2Bs34MW5kGHmErKzG6r3XI,s);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",275
981,"'-tryline","@Test public void testSecureCookieWithHttp() throws Exception {
  URL url=new URL(http://a.b.c/);
  man.addCookieFromHeader(mySASession=s%3AcafPSGf6UJguyhddGFFeLdHBy9CYbzIS.NhYyA26LGTAVoLxhCQUK%2F2Bs34MW5kGHmErKzG6r3XI; Path=/; +  Expires=Tue, 07 Feb 2990 09:13:14 GMT; HttpOnly; secure,url);
  assertEquals(1,man.getCookieCount());
  String s=man.getCookieHeaderForURL(url);
  assertNull(s);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",289
982,"'-tryline","@Test public void testSecureCookieWithHttps() throws Exception {
  URL url=new URL(https://a.b.c/);
  man.addCookieFromHeader(mySASession=s%3AcafPSGf6UJguyhddGFFeLdHBy9CYbzIS.NhYyA26LGTAVoLxhCQUK%2F2Bs34MW5kGHmErKzG6r3XI; Path=/; +  Expires=Tue, 07 Feb 2990 09:13:14 GMT; HttpOnly; secure,url);
  assertEquals(1,man.getCookieCount());
  String s=man.getCookieHeaderForURL(url);
  assertNotNull(s);
  assertEquals(mySASession=s%3AcafPSGf6UJguyhddGFFeLdHBy9CYbzIS.NhYyA26LGTAVoLxhCQUK%2F2Bs34MW5kGHmErKzG6r3XI,s);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",302
983,"'-tryline","@Test public void testCookies1() throws Exception {
  man.setCookiePolicy(CookieSpecs.DEFAULT);
  man.testStarted();
  URL url=new URL(http://a.b.c.d/testCookies1);
  man.addCookieFromHeader(test1=1; comment=\how,now\, test2=2; version=1,url);
  assertEquals(2,man.getCookieCount());
  String s=man.getCookieHeaderForURL(url);
  assertNotNull(s);
  assertEquals(test1=1; test2=2,s);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",316
984,"'-tryline","@Test public void testCookies2() throws Exception {
  URL url=new URL(https://a.b.c.d/testCookies2);
  man.addCookieFromHeader(test1=1;secure, test2=2;secure,url);
  assertEquals(1,man.getCookieCount());
  String s=man.getCookieHeaderForURL(url);
  assertNotNull(s);
  assertEquals(test1=1,s);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",328
985,"'-tryline","@Test public void testCookies3() throws Exception {
  man.setCookiePolicy(CookieSpecs.DEFAULT);
  man.testStarted();
  URL url=new URL(https://a.b.c.d/testCookies2);
  man.addCookieFromHeader(test1=1;secure, test2=2;secure; version=1,url);
  assertEquals(2,man.getCookieCount());
  String s=man.getCookieHeaderForURL(url);
  assertNotNull(s);
  assertEquals(test1=1; test2=2,s);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",343
986,"'-tryline","@Test public void testDuplicateCookie() throws Exception {
  URL url=new URL(http://a.b.c/);
  man.addCookieFromHeader(test=1,url);
  String s=man.getCookieHeaderForURL(url);
  assertNotNull(s);
  assertEquals(test=1,s);
  man.addCookieFromHeader(test=2,url);
  s=man.getCookieHeaderForURL(url);
  assertNotNull(s);
  assertEquals(test=2,s);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",356
987,"'-tryline","@Test public void testDuplicateCookie2() throws Exception {
  URL url=new URL(http://a.b.c/);
  man.addCookieFromHeader(test=1,url);
  man.addCookieFromHeader(test2=a,url);
  String s=man.getCookieHeaderForURL(url);
  assertNotNull(s);
  assertEquals(test=1; test2=a,s);
  man.addCookieFromHeader(test=2,url);
  man.addCookieFromHeader(test3=b,url);
  s=man.getCookieHeaderForURL(url);
  assertNotNull(s);
  assertEquals(test2=a; test=2; test3=b,s);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",369
988,"'-tryline","/** 
 * Tests missing cookie path for a trivial URL fetch from the domain Note that this fails prior to a fix for BUG 38256
 */
@Test public void testMissingPath0() throws Exception {
  URL url=new URL(http://d.e.f/goo.html);
  man.addCookieFromHeader(test=moo,url);
  String s=man.getCookieHeaderForURL(new URL(http://d.e.f/));
  assertNotNull(s);
  assertEquals(test=moo,s);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",386
989,"'-tryline","/** 
 * Tests missing cookie path for a non-trivial URL fetch from the domain.  Note that this fails prior to a fix for BUG 38256
 */
@Test public void testMissingPath1() throws Exception {
  URL url=new URL(http://d.e.f/moo.html);
  man.addCookieFromHeader(test=moo,url);
  String s=man.getCookieHeaderForURL(new URL(http://d.e.f/goo.html));
  assertNotNull(s);
  assertEquals(test=moo,s);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",399
990,"'-tryline","/** 
 * Tests explicit root path with a trivial URL fetch from the domain
 */
@Test public void testRootPath0() throws Exception {
  URL url=new URL(http://d.e.f/goo.html);
  man.addCookieFromHeader(test=moo;path=/,url);
  String s=man.getCookieHeaderForURL(new URL(http://d.e.f/));
  assertNotNull(s);
  assertEquals(test=moo,s);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",412
991,"'-tryline","/** 
 * Tests explicit root path with a non-trivial URL fetch from the domain
 */
@Test public void testRootPath1() throws Exception {
  URL url=new URL(http://d.e.f/moo.html);
  man.addCookieFromHeader(test=moo;path=/,url);
  String s=man.getCookieHeaderForURL(new URL(http://d.e.f/goo.html));
  assertNotNull(s);
  assertEquals(test=moo,s);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",424
992,"'-tryline","@Test public void testCookieMatching() throws Exception {
  URL url=new URL(http://a.b.c:8080/TopDir/fred.jsp);
  man.addCookieFromHeader(ID=abcd; Path=/TopDir,url);
  String s=man.getCookieHeaderForURL(url);
  assertNotNull(s);
  assertEquals(ID=abcd,s);
  url=new URL(http://a.b.c:8080/other.jsp);
  s=man.getCookieHeaderForURL(url);
  assertNull(s);
  url=new URL(http://a.b.c:8080/TopDir/suub/another.jsp);
  s=man.getCookieHeaderForURL(url);
  assertNotNull(s);
  url=new URL(http://a.b.c:8080/TopDir);
  s=man.getCookieHeaderForURL(url);
  assertNotNull(s);
  url=new URL(http://a.b.d/);
  s=man.getCookieHeaderForURL(url);
  assertNull(s);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",437
993,"'-tryline","@Test public void testCookieOrdering1() throws Exception {
  URL url=new URL(http://order.now/sub1/moo.html);
  man.addCookieFromHeader(test1=moo1;path=/,url);
  man.addCookieFromHeader(test2=moo2;path=/sub1,url);
  man.addCookieFromHeader(test2=moo3;path=/,url);
  assertEquals(3,man.getCookieCount());
  String s=man.getCookieHeaderForURL(url);
  assertNotNull(s);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",462
994,"'-tryline","@Test public void testCookieOrdering2() throws Exception {
  URL url=new URL(http://order.now/sub1/moo.html);
  man.addCookieFromHeader(test1=moo1;,url);
  man.addCookieFromHeader(test2=moo2;path=/sub1,url);
  man.addCookieFromHeader(test2=moo3;path=/,url);
  assertEquals(3,man.getCookieCount());
  assertEquals(/sub1,man.get(0).getPath());
  assertEquals(/sub1,man.get(1).getPath());
  assertEquals(/,man.get(2).getPath());
  String s=man.getCookieHeaderForURL(url);
  assertNotNull(s);
  HC4CookieHandler cookieHandler=(HC4CookieHandler)man.getCookieHandler();
  List<org.apache.http.cookie.Cookie> c=cookieHandler.getCookiesForUrl(man.getCookies(),url,CookieManager.ALLOW_VARIABLE_COOKIES);
  assertEquals(/sub1,c.get(0).getPath());
  assertFalse(((BasicClientCookie)c.get(0)).containsAttribute(ClientCookie.PATH_ATTR));
  assertEquals(/sub1,c.get(1).getPath());
  assertTrue(((BasicClientCookie)c.get(1)).containsAttribute(ClientCookie.PATH_ATTR));
  assertEquals(/,c.get(2).getPath());
  assertEquals(test1=moo1; test2=moo2; test2=moo3,s);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",479
995,"'-tryline","@SuppressWarnings(deprecation) @Test public void testCookiePolicy2109() throws Exception {
  man.setCookiePolicy(org.apache.http.client.params.CookiePolicy.RFC_2109);
  man.testStarted();
  URL url=new URL(http://order.now/sub1/moo.html);
  man.addCookieFromHeader(test1=moo1;,url);
  man.addCookieFromHeader(test2=moo2;path=/sub1,url);
  man.addCookieFromHeader(test2=moo3;path=/,url);
  assertEquals(3,man.getCookieCount());
  assertEquals(/sub1,man.get(0).getPath());
  assertEquals(/sub1,man.get(1).getPath());
  assertEquals(/,man.get(2).getPath());
  String s=man.getCookieHeaderForURL(url);
  assertNotNull(s);
  HC4CookieHandler cookieHandler=(HC4CookieHandler)man.getCookieHandler();
  List<org.apache.http.cookie.Cookie> c=cookieHandler.getCookiesForUrl(man.getCookies(),url,CookieManager.ALLOW_VARIABLE_COOKIES);
  assertEquals(/sub1,c.get(0).getPath());
  assertFalse(((BasicClientCookie)c.get(0)).containsAttribute(ClientCookie.PATH_ATTR));
  assertEquals(/sub1,c.get(1).getPath());
  assertTrue(((BasicClientCookie)c.get(1)).containsAttribute(ClientCookie.PATH_ATTR));
  assertEquals(/,c.get(2).getPath());
  assertTrue(((BasicClientCookie)c.get(2)).containsAttribute(ClientCookie.PATH_ATTR));
  assertEquals($Version=0; test1=moo1; test2=moo2; $Path=/sub1; test2=moo3; $Path=/,s);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",503
996,"'-tryline","@Test public void testCookiePolicyNetscape() throws Exception {
  man.setCookiePolicy(CookieSpecs.NETSCAPE);
  man.testStarted();
  URL url=new URL(http://www.order.now/sub1/moo.html);
  man.addCookieFromHeader(test1=moo1;,url);
  man.addCookieFromHeader(test2=moo2;path=/sub1,url);
  man.addCookieFromHeader(test2=moo3;path=/,url);
  assertEquals(3,man.getCookieCount());
  assertEquals(/sub1,man.get(0).getPath());
  assertEquals(/sub1,man.get(1).getPath());
  assertEquals(/,man.get(2).getPath());
  String s=man.getCookieHeaderForURL(url);
  assertNotNull(s);
  HC4CookieHandler cookieHandler=(HC4CookieHandler)man.getCookieHandler();
  List<org.apache.http.cookie.Cookie> c=cookieHandler.getCookiesForUrl(man.getCookies(),url,CookieManager.ALLOW_VARIABLE_COOKIES);
  assertEquals(/sub1,c.get(0).getPath());
  assertFalse(((BasicClientCookie)c.get(0)).containsAttribute(ClientCookie.PATH_ATTR));
  assertEquals(/sub1,c.get(1).getPath());
  assertTrue(((BasicClientCookie)c.get(1)).containsAttribute(ClientCookie.PATH_ATTR));
  assertEquals(/,c.get(2).getPath());
  assertTrue(((BasicClientCookie)c.get(2)).containsAttribute(ClientCookie.PATH_ATTR));
  assertEquals(test1=moo1; test2=moo2; test2=moo3,s);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",531
997,"'-tryline","@Test public void testCookiePolicyIgnore() throws Exception {
  man.setCookiePolicy(CookieSpecs.IGNORE_COOKIES);
  man.testStarted();
  URL url=new URL(http://order.now/sub1/moo.html);
  man.addCookieFromHeader(test1=moo1;,url);
  man.addCookieFromHeader(test2=moo2;path=/sub1,url);
  man.addCookieFromHeader(test2=moo3;path=/,url);
  assertEquals(0,man.getCookieCount());
  Cookie cc;
  cc=new Cookie(test1,moo1,null,/sub1,false,0,false,false);
  man.add(cc);
  cc=new Cookie(test2,moo2,null,/sub1,false,0,true,false);
  man.add(cc);
  cc=new Cookie(test3,moo3,null,/,false,0,false,false);
  man.add(cc);
  assertEquals(3,man.getCookieCount());
  assertEquals(/sub1,man.get(0).getPath());
  assertEquals(/sub1,man.get(1).getPath());
  assertEquals(/,man.get(2).getPath());
  String s=man.getCookieHeaderForURL(url);
  assertNull(s);
  HC4CookieHandler cookieHandler=(HC4CookieHandler)man.getCookieHandler();
  List<org.apache.http.cookie.Cookie> c=cookieHandler.getCookiesForUrl(man.getCookies(),url,CookieManager.ALLOW_VARIABLE_COOKIES);
  assertNotNull(c);
  assertEquals(0,c.size());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",559
998,"'-tryline","@Test public void testLoad() throws Exception {
  assertEquals(0,man.getCookieCount());
  man.addFile(findTestPath(testfiles/cookies.txt));
  assertEquals(3,man.getCookieCount());
  int num=0;
  assertEquals(name,man.get(num).getName());
  assertEquals(value,man.get(num).getValue());
  assertEquals(path,man.get(num).getPath());
  assertEquals(domain,man.get(num).getDomain());
  assertTrue(man.get(num).getSecure());
  assertEquals(num,man.get(num).getExpires());
  num++;
  assertEquals(name2,man.get(num).getName());
  assertEquals(value2,man.get(num).getValue());
  assertEquals(/,man.get(num).getPath());
  assertEquals(,man.get(num).getDomain());
  assertFalse(man.get(num).getSecure());
  assertEquals(0,man.get(num).getExpires());
  num++;
  assertEquals(a,man.get(num).getName());
  assertEquals(b,man.get(num).getValue());
  assertEquals(d,man.get(num).getPath());
  assertEquals(c,man.get(num).getDomain());
  assertTrue(man.get(num).getSecure());
  assertEquals(0,man.get(num).getExpires());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHC4CookieManager.java",594
999,"'-tryline","@Override protected void setUp() throws Exception {
  httpServer=startHttpMirror(HTTP_SERVER_PORT);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHTTPMirrorThread.java",58
1000,"'-tryline","@Override protected void tearDown() throws Exception {
  httpServer.stopServer();
  httpServer=null;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHTTPMirrorThread.java",63
1001,"'-tryline","/** 
 * Utility method to handle starting the HttpMirrorServer for testing. Also used by TestHTTPSamplersAgainstHttpMirrorServer
 * @param port port on which the mirror should be started
 * @return newly created http mirror server
 * @throws Exception if something fails
 */
public static HttpMirrorServer startHttpMirror(int port) throws Exception {
  HttpMirrorServer server;
  server=new HttpMirrorServer(port);
  server.start();
  Exception e;
  for (int i=0; i < 10; i++) {
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException ignored) {
    }
    e=server.getException();
    if (e != null) {
      throw new Exception(Could not start mirror server on port:  + port + . + e);
    }
    if (server.isAlive()) {
      break;
    }
  }
  if (!server.isAlive()) {
    throw new Exception(Could not start mirror server on port:  + port);
  }
  return server;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHTTPMirrorThread.java",72
1002,"'-tryline","public void testGetRequest() throws Exception {
  Socket clientSocket=new Socket(localhost,HTTP_SERVER_PORT);
  OutputStream outputStream=clientSocket.getOutputStream();
  InputStream inputStream=clientSocket.getInputStream();
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  bos.write(GET / HTTP 1.1.getBytes(ISO_8859_1));
  bos.write(CRLF);
  bos.write(Host: localhost.getBytes(ISO_8859_1));
  bos.write(CRLF);
  bos.write(CRLF);
  bos.close();
  outputStream.write(bos.toByteArray());
  ByteArrayOutputStream response=new ByteArrayOutputStream();
  byte[] buffer=new byte[1024];
  int length;
  while ((length=inputStream.read(buffer)) != -1) {
    response.write(buffer,0,length);
  }
  response.close();
  byte[] mirroredResponse=getMirroredResponse(response.toByteArray());
  checkArraysHaveSameContent(bos.toByteArray(),mirroredResponse);
  outputStream.close();
  inputStream.close();
  clientSocket.close();
  clientSocket=new Socket(localhost,HTTP_SERVER_PORT);
  outputStream=clientSocket.getOutputStream();
  inputStream=clientSocket.getInputStream();
  bos=new ByteArrayOutputStream();
  bos.write(GET / HTTP 1.1.getBytes(ISO_8859_1));
  bos.write(CRLF);
  bos.close();
  byte[] firstChunk=bos.toByteArray();
  outputStream.write(firstChunk);
  Thread.sleep(200);
  bos=new ByteArrayOutputStream();
  bos.write(Host: localhost.getBytes(ISO_8859_1));
  bos.write(CRLF);
  bos.write(CRLF);
  bos.close();
  byte[] secondChunk=bos.toByteArray();
  outputStream.write(secondChunk);
  response=new ByteArrayOutputStream();
  buffer=new byte[1024];
  while ((length=inputStream.read(buffer)) != -1) {
    response.write(buffer,0,length);
  }
  response.close();
  mirroredResponse=getMirroredResponse(response.toByteArray());
  bos=new ByteArrayOutputStream();
  bos.write(firstChunk);
  bos.write(secondChunk);
  bos.close();
  checkArraysHaveSameContent(bos.toByteArray(),mirroredResponse);
  outputStream.close();
  inputStream.close();
  clientSocket.close();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHTTPMirrorThread.java",107
1003,"'-tryline","public void testPostRequest() throws Exception {
  Socket clientSocket=new Socket(localhost,HTTP_SERVER_PORT);
  OutputStream outputStream=clientSocket.getOutputStream();
  InputStream inputStream=clientSocket.getInputStream();
  StringBuilder postBodyBuffer=new StringBuilder();
  for (int i=0; i < 1000; i++) {
    postBodyBuffer.append(abc);
  }
  byte[] postBody=postBodyBuffer.toString().getBytes(ISO_8859_1);
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  bos.write(GET / HTTP 1.1.getBytes(ISO_8859_1));
  bos.write(CRLF);
  bos.write(Host: localhost.getBytes(ISO_8859_1));
  bos.write(CRLF);
  bos.write((Content-type: text/plain; charset= + ISO_8859_1).getBytes(ISO_8859_1));
  bos.write(CRLF);
  bos.write((Content-length:  + postBody.length).getBytes(ISO_8859_1));
  bos.write(CRLF);
  bos.write(CRLF);
  bos.write(postBody);
  bos.close();
  outputStream.write(bos.toByteArray());
  ByteArrayOutputStream response=new ByteArrayOutputStream();
  byte[] buffer=new byte[1024];
  int length;
  while ((length=inputStream.read(buffer)) != -1) {
    response.write(buffer,0,length);
  }
  response.close();
  byte[] mirroredResponse=getMirroredResponse(response.toByteArray());
  checkArraysHaveSameContent(bos.toByteArray(),mirroredResponse);
  outputStream.close();
  inputStream.close();
  clientSocket.close();
  clientSocket=new Socket(localhost,HTTP_SERVER_PORT);
  outputStream=clientSocket.getOutputStream();
  inputStream=clientSocket.getInputStream();
  bos=new ByteArrayOutputStream();
  bos.write(GET / HTTP 1.1.getBytes(ISO_8859_1));
  bos.write(CRLF);
  bos.write(Host: localhost.getBytes(ISO_8859_1));
  bos.write(CRLF);
  bos.write((Content-type: text/plain; charset= + ISO_8859_1).getBytes(ISO_8859_1));
  bos.write(CRLF);
  bos.write((Content-length:  + postBody.length).getBytes(ISO_8859_1));
  bos.write(CRLF);
  bos.write(CRLF);
  bos.close();
  bos.close();
  byte[] firstChunk=bos.toByteArray();
  outputStream.write(firstChunk);
  Thread.sleep(200);
  byte[] secondChunk=postBody;
  outputStream.write(secondChunk);
  response=new ByteArrayOutputStream();
  buffer=new byte[1024];
  while ((length=inputStream.read(buffer)) != -1) {
    response.write(buffer,0,length);
  }
  response.close();
  mirroredResponse=getMirroredResponse(response.toByteArray());
  bos=new ByteArrayOutputStream();
  bos.write(firstChunk);
  bos.write(secondChunk);
  bos.close();
  checkArraysHaveSameContent(bos.toByteArray(),mirroredResponse);
  outputStream.close();
  inputStream.close();
  clientSocket.close();
  clientSocket=new Socket(localhost,HTTP_SERVER_PORT);
  outputStream=clientSocket.getOutputStream();
  inputStream=clientSocket.getInputStream();
  postBodyBuffer=new StringBuilder();
  for (int i=0; i < 1000; i++) {
    postBodyBuffer.append(\u0364\u00c5\u2052);
  }
  postBody=postBodyBuffer.toString().getBytes(UTF_8);
  bos=new ByteArrayOutputStream();
  bos.write(GET / HTTP 1.1.getBytes(ISO_8859_1));
  bos.write(CRLF);
  bos.write(Host: localhost.getBytes(ISO_8859_1));
  bos.write(CRLF);
  bos.write((Content-type: text/plain; charset= + UTF_8).getBytes(ISO_8859_1));
  bos.write(CRLF);
  bos.write((Content-length:  + postBody.length).getBytes(ISO_8859_1));
  bos.write(CRLF);
  bos.write(CRLF);
  bos.close();
  bos.close();
  firstChunk=bos.toByteArray();
  outputStream.write(firstChunk);
  Thread.sleep(200);
  secondChunk=postBody;
  outputStream.write(secondChunk);
  response=new ByteArrayOutputStream();
  buffer=new byte[1024];
  while ((length=inputStream.read(buffer)) != -1) {
    response.write(buffer,0,length);
  }
  response.close();
  mirroredResponse=getMirroredResponse(response.toByteArray());
  bos=new ByteArrayOutputStream();
  bos.write(firstChunk);
  bos.write(secondChunk);
  bos.close();
  checkArraysHaveSameContent(bos.toByteArray(),mirroredResponse);
  outputStream.close();
  inputStream.close();
  clientSocket.close();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHTTPMirrorThread.java",186
1004,"'-tryline","public void testStatus() throws Exception {
  URL url=new URL(http,localhost,HTTP_SERVER_PORT,/);
  HttpURLConnection conn=(HttpURLConnection)url.openConnection();
  conn.addRequestProperty(X-ResponseStatus,302 Temporary Redirect);
  conn.connect();
  assertEquals(302,conn.getResponseCode());
  assertEquals(Temporary Redirect,conn.getResponseMessage());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHTTPMirrorThread.java",340
1005,"'-tryline","public void testQueryStatus() throws Exception {
  URL url=new URI(http,null,localhost,HTTP_SERVER_PORT,/path,status=303 See Other,null).toURL();
  HttpURLConnection conn=(HttpURLConnection)url.openConnection();
  conn.connect();
  assertEquals(303,conn.getResponseCode());
  assertEquals(See Other,conn.getResponseMessage());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHTTPMirrorThread.java",349
1006,"'-tryline","public void testQueryRedirect() throws Exception {
  URL url=new URI(http,null,localhost,HTTP_SERVER_PORT,/path,redirect=/a/b/c/d?q,null).toURL();
  HttpURLConnection conn=(HttpURLConnection)url.openConnection();
  conn.setInstanceFollowRedirects(false);
  conn.connect();
  assertEquals(302,conn.getResponseCode());
  assertEquals(Temporary Redirect,conn.getResponseMessage());
  assertEquals(/a/b/c/d?q,conn.getHeaderField(Location));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHTTPMirrorThread.java",357
1007,"'-tryline","public void testHeaders() throws Exception {
  URL url=new URL(http,localhost,HTTP_SERVER_PORT,/);
  HttpURLConnection conn=(HttpURLConnection)url.openConnection();
  conn.addRequestProperty(X-SetHeaders,Location: /abcd|X-Dummy: none);
  conn.connect();
  assertEquals(200,conn.getResponseCode());
  assertEquals(OK,conn.getResponseMessage());
  assertEquals(/abcd,conn.getHeaderField(Location));
  assertEquals(none,conn.getHeaderField(X-Dummy));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHTTPMirrorThread.java",367
1008,"'-tryline","public void testResponseLength() throws Exception {
  URL url=new URL(http,localhost,HTTP_SERVER_PORT,/);
  HttpURLConnection conn=(HttpURLConnection)url.openConnection();
  conn.addRequestProperty(X-ResponseLength,10);
  conn.connect();
  final InputStream inputStream=conn.getInputStream();
  assertEquals(10,IOUtils.toByteArray(inputStream).length);
  inputStream.close();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHTTPMirrorThread.java",378
1009,"'-tryline","public void testCookie() throws Exception {
  URL url=new URL(http,localhost,HTTP_SERVER_PORT,/);
  HttpURLConnection conn=(HttpURLConnection)url.openConnection();
  conn.addRequestProperty(X-SetCookie,four=2*2);
  conn.connect();
  assertEquals(four=2*2,conn.getHeaderField(Set-Cookie));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHTTPMirrorThread.java",388
1010,"'-tryline","public void testSleep() throws Exception {
  URL url=new URL(http,localhost,HTTP_SERVER_PORT,/);
  HttpURLConnection conn=(HttpURLConnection)url.openConnection();
  conn.addRequestProperty(X-Sleep,200);
  long now=System.nanoTime();
  conn.connect();
  final InputStream inputStream=conn.getInputStream();
  while (inputStream.read() != -1) {
  }
  inputStream.close();
  final long elapsed=(System.nanoTime() - now) / 200000L;
  assertTrue(Expected > 180  + elapsed,elapsed >= 180);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHTTPMirrorThread.java",396
1011,"'-tryline","private void testProcessingHTMLFile(String HTMLFileName) throws Exception {
  File file=findTestFile(testfiles/load_bug_list.jmx);
  HTTPSamplerBase config=(HTTPSamplerBase)SaveService.loadTree(file).getArray()[0];
  config.setRunningVersion(true);
  HTTPSampleResult result=new HTTPSampleResult();
  file=findTestFile(testfiles/Load_JMeter_Page.jmx);
  HTTPSamplerBase context=(HTTPSamplerBase)SaveService.loadTree(file).getArray()[0];
  jmctx.setCurrentSampler(context);
  jmctx.setCurrentSampler(config);
  result.setResponseData(new TextFile(findTestFile(HTMLFileName)).getText(),null);
  result.setSampleLabel(context.toString());
  result.setSamplerData(context.toString());
  result.setURL(new URL(http://bz.apache.org/fakepage.html));
  jmctx.setPreviousResult(result);
  AnchorModifier modifier=new AnchorModifier();
  modifier.setThreadContext(jmctx);
  modifier.process();
  assertEquals(http://bz.apache.org/bugzilla/buglist.cgi? + bug_status=NEW&bug_status=ASSIGNED&bug_status=REOPENED + &email1=&emailtype1=substring&emailassigned_to1=1+ &email2=&emailtype2=substring&emailreporter2=1+ &bugidtype=include&bug_id=&changedin=&votes=+ &chfieldfrom=&chfieldto=Now&chfieldvalue=+ &product=JMeter&short_desc=&short_desc_type=substring+ &long_desc=&long_desc_type=substring&bug_file_loc=+ &bug_file_loc_type=substring&keywords=+ &keywords_type=anywords+ &field0-0-0=noop&type0-0-0=noop&value0-0-0=+ &cmdtype=doit&order=Reuse+same+sort+as+last+time,config.toString());
  config.recoverRunningVersion();
  assertEquals(http://bz.apache.org/bugzilla/buglist.cgi? + bug_status=.*&bug_status=.*&bug_status=.*&email1= + &emailtype1=substring&emailassigned_to1=1&email2=+ &emailtype2=substring&emailreporter2=1+ &bugidtype=include&bug_id=&changedin=&votes=+ &chfieldfrom=&chfieldto=Now&chfieldvalue=+ &product=JMeter&short_desc=&short_desc_type=substring+ &long_desc=&long_desc_type=substring&bug_file_loc=+ &bug_file_loc_type=substring&keywords=+ &keywords_type=anywords&field0-0-0=noop+ &type0-0-0=noop&value0-0-0=&cmdtype=doit+ &order=Reuse+same+sort+as+last+time,config.toString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestAnchorModifier.java",54
1012,"'-tryline","@Test public void testModifySampler() throws Exception {
  testProcessingHTMLFile(testfiles/jmeter_home_page.html);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestAnchorModifier.java",91
1013,"'-tryline","@Test public void testModifySamplerWithRelativeLink() throws Exception {
  testProcessingHTMLFile(testfiles/jmeter_home_page_with_relative_links.html);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestAnchorModifier.java",96
1014,"'-tryline","@Test public void testModifySamplerWithBaseHRef() throws Exception {
  testProcessingHTMLFile(testfiles/jmeter_home_page_with_base_href.html);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestAnchorModifier.java",101
1015,"'-tryline","@Test public void testNullResult() throws Exception {
  jmctx.setCurrentSampler(makeContext(http://www.apache.org/subdir/previous.html));
  jmctx.setPreviousResult(null);
  parser.process();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestAnchorModifier.java",113
1016,"'-tryline","@Test public void testWrongResultClass() throws Exception {
  jmctx.setCurrentSampler(makeContext(http://www.apache.org/subdir/previous.html));
  jmctx.setPreviousResult(new SampleResult());
  parser.process();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestAnchorModifier.java",120
1017,"'-tryline","@Test public void testSimpleParse() throws Exception {
  HTTPSamplerBase config=makeUrlConfig(.*/index\\.html);
  HTTPSamplerBase context=makeContext(http://www.apache.org/subdir/previous.html);
  String responseText=<html><head><title>Test page</title></head><body> + <a href=\index.html\>Goto index page</a></body></html>;
  HTTPSampleResult result=new HTTPSampleResult();
  jmctx.setCurrentSampler(context);
  jmctx.setCurrentSampler(config);
  result.setResponseData(responseText,null);
  result.setSampleLabel(context.toString());
  result.setSamplerData(context.toString());
  result.setURL(context.getUrl());
  jmctx.setPreviousResult(result);
  parser.process();
  assertEquals(http://www.apache.org/subdir/index.html,config.getUrl().toString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestAnchorModifier.java",127
1018,"'-tryline","@Test public void testSimpleParse1() throws Exception {
  HTTPSamplerBase config=makeUrlConfig(.*/index\\.html);
  config.setProtocol(HTTPConstants.PROTOCOL_HTTPS);
  config.setPort(HTTPConstants.DEFAULT_HTTPS_PORT);
  HTTPSamplerBase context=makeContext(https://www.apache.org/subdir/previous.html);
  String responseText=<html><head><title>Test page</title></head><body> + <a href=\index.html\>Goto index page</a></body></html>;
  HTTPSampleResult result=new HTTPSampleResult();
  jmctx.setCurrentSampler(context);
  jmctx.setCurrentSampler(config);
  result.setResponseData(responseText,null);
  result.setSampleLabel(context.toString());
  result.setSamplerData(context.toString());
  result.setURL(context.getUrl());
  jmctx.setPreviousResult(result);
  parser.process();
  assertEquals(https://www.apache.org/subdir/index.html,config.getUrl().toString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestAnchorModifier.java",146
1019,"'-tryline","@Test public void testSimpleParse2() throws Exception {
  HTTPSamplerBase config=makeUrlConfig(/index\\.html);
  HTTPSamplerBase context=makeContext(http://www.apache.org/subdir/previous.html);
  String responseText=<html><head><title>Test page</title></head><body> + <a href=\/index.html\>Goto index page</a> + hfdfjiudfjdfjkjfkdjf+ <b>bold text</b><a href=lowerdir/index.html>lower</a>+ </body></html>;
  HTTPSampleResult result=new HTTPSampleResult();
  result.setResponseData(responseText,null);
  result.setSampleLabel(context.toString());
  result.setURL(context.getUrl());
  jmctx.setCurrentSampler(context);
  jmctx.setCurrentSampler(config);
  jmctx.setPreviousResult(result);
  parser.process();
  String newUrl=config.getUrl().toString();
  assertTrue(http://www.apache.org/index.html.equals(newUrl) || http://www.apache.org/subdir/lowerdir/index.html.equals(newUrl));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestAnchorModifier.java",166
1020,"'-tryline","@Test public void testSimpleParse3() throws Exception {
  HTTPSamplerBase config=makeUrlConfig(.*index.*);
  config.getArguments().addArgument(param1,value1);
  HTTPSamplerBase context=makeContext(http://www.apache.org/subdir/previous.html);
  String responseText=<html><head><title>Test page</title></head><body> + <a href=\/home/index.html?param1=value1\> + Goto index page</a></body></html>;
  HTTPSampleResult result=new HTTPSampleResult();
  result.setResponseData(responseText,null);
  result.setSampleLabel(context.toString());
  result.setURL(context.getUrl());
  jmctx.setCurrentSampler(context);
  jmctx.setCurrentSampler(config);
  jmctx.setPreviousResult(result);
  parser.process();
  String newUrl=config.getUrl().toString();
  assertEquals(http://www.apache.org/home/index.html?param1=value1,newUrl);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestAnchorModifier.java",186
1021,"'-tryline","@Test public void testSimpleParse4() throws Exception {
  HTTPSamplerBase config=makeUrlConfig(/subdir/index\\..*);
  HTTPSamplerBase context=makeContext(http://www.apache.org/subdir/previous.html);
  String responseText=<html><head><title>Test page</title></head><body> + <A HREF=\index.html\>Goto index page</A></body></html>;
  HTTPSampleResult result=new HTTPSampleResult();
  result.setResponseData(responseText,null);
  result.setSampleLabel(context.toString());
  result.setURL(context.getUrl());
  jmctx.setCurrentSampler(context);
  jmctx.setCurrentSampler(config);
  jmctx.setPreviousResult(result);
  parser.process();
  String newUrl=config.getUrl().toString();
  assertEquals(http://www.apache.org/subdir/index.html,newUrl);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestAnchorModifier.java",205
1022,"'-tryline","@Test public void testSimpleParse5() throws Exception {
  HTTPSamplerBase config=makeUrlConfig(/subdir/index\\.h.*);
  HTTPSamplerBase context=makeContext(http://www.apache.org/subdir/one/previous.html);
  String responseText=<html><head><title>Test page</title></head><body> + <a href=\../index.html\>Goto index page</a></body></html>;
  HTTPSampleResult result=new HTTPSampleResult();
  result.setResponseData(responseText,null);
  result.setSampleLabel(context.toString());
  result.setURL(context.getUrl());
  jmctx.setCurrentSampler(context);
  jmctx.setCurrentSampler(config);
  jmctx.setPreviousResult(result);
  parser.process();
  String newUrl=config.getUrl().toString();
  assertEquals(http://www.apache.org/subdir/index.html,newUrl);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestAnchorModifier.java",223
1023,"'-tryline","@Test public void testFailSimpleParse1() throws Exception {
  HTTPSamplerBase config=makeUrlConfig(.*index.*?param2=.+1);
  HTTPSamplerBase context=makeContext(http://www.apache.org/subdir/previous.html);
  String responseText=<html><head><title>Test page</title></head><body> + <a href=\/home/index.html?param1=value1\> + Goto index page</a></body></html>;
  HTTPSampleResult result=new HTTPSampleResult();
  String newUrl=config.getUrl().toString();
  result.setResponseData(responseText,null);
  result.setSampleLabel(context.toString());
  result.setURL(context.getUrl());
  jmctx.setCurrentSampler(context);
  jmctx.setCurrentSampler(config);
  jmctx.setPreviousResult(result);
  parser.process();
  assertEquals(newUrl,config.getUrl().toString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestAnchorModifier.java",241
1024,"'-tryline","@Test public void testFailSimpleParse3() throws Exception {
  HTTPSamplerBase config=makeUrlConfig(/home/index.html);
  HTTPSamplerBase context=makeContext(http://www.apache.org/subdir/previous.html);
  String responseText=<html><head><title>Test page</title></head><body> + <a href=\/home/index.html?param1=value1\> + Goto index page</a></body></html>;
  HTTPSampleResult result=new HTTPSampleResult();
  String newUrl=config.getUrl().toString();
  result.setResponseData(responseText,null);
  result.setSampleLabel(context.toString());
  result.setURL(context.getUrl());
  jmctx.setCurrentSampler(context);
  jmctx.setCurrentSampler(config);
  jmctx.setPreviousResult(result);
  parser.process();
  assertEquals(newUrl + ?param1=value1,config.getUrl().toString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestAnchorModifier.java",259
1025,"'-tryline","@Test public void testFailSimpleParse2() throws Exception {
  HTTPSamplerBase config=makeUrlConfig(.*login\\.html);
  HTTPSamplerBase context=makeContext(http://www.apache.org/subdir/previous.html);
  String responseText=<html><head><title>Test page</title></head><body> + <a href=\/home/index.html?param1=value1\> + Goto index page</a></body></html>;
  HTTPSampleResult result=new HTTPSampleResult();
  result.setResponseData(responseText,null);
  result.setSampleLabel(context.toString());
  result.setURL(context.getUrl());
  jmctx.setCurrentSampler(context);
  jmctx.setPreviousResult(result);
  parser.process();
  String newUrl=config.getUrl().toString();
  assertNotEquals(http://www.apache.org/home/index.html?param1=value1,newUrl);
  assertEquals(config.getUrl().toString(),newUrl);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestAnchorModifier.java",277
1026,"'-tryline","@Test public void testSimpleFormParse() throws Exception {
  HTTPSamplerBase config=makeUrlConfig(.*index.html);
  config.addArgument(test,g.*);
  config.setMethod(HTTPConstants.POST);
  HTTPSamplerBase context=makeContext(http://www.apache.org/subdir/previous.html);
  String responseText=<html><head><title>Test page</title></head><body> + <form action=\index.html\ method=\POST\> + <input type=\checkbox\ name=\test\+  value=\goto\>Goto index page</form></body></html>;
  HTTPSampleResult result=new HTTPSampleResult();
  result.setResponseData(responseText,null);
  result.setSampleLabel(context.toString());
  result.setURL(context.getUrl());
  jmctx.setCurrentSampler(context);
  jmctx.setCurrentSampler(config);
  jmctx.setPreviousResult(result);
  parser.process();
  assertEquals(http://www.apache.org/subdir/index.html,config.getUrl().toString());
  assertEquals(test=goto,config.getQueryString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestAnchorModifier.java",295
1027,"'-tryline","@Test public void testBadCharParse() throws Exception {
  HTTPSamplerBase config=makeUrlConfig(.*index.html);
  config.addArgument(te$st,g.*);
  config.setMethod(HTTPConstants.POST);
  HTTPSamplerBase context=makeContext(http://www.apache.org/subdir/previous.html);
  String responseText=<html><head><title>Test page</title></head><body> + <form action=\index.html\ method=\POST\> + <input type=\checkbox\ name=\te$st\+  value=\goto\>Goto index page</form></body></html>;
  HTTPSampleResult result=new HTTPSampleResult();
  result.setResponseData(responseText,null);
  result.setSampleLabel(context.toString());
  result.setURL(context.getUrl());
  jmctx.setCurrentSampler(context);
  jmctx.setCurrentSampler(config);
  jmctx.setPreviousResult(result);
  parser.process();
  assertEquals(http://www.apache.org/subdir/index.html,config.getUrl().toString());
  assertEquals(te%24st=goto,config.getQueryString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestAnchorModifier.java",316
1028,"'-tryline","@Test public void testSpecialCharParse() throws Exception {
  String specialChars=-_.!~*'()%25;
  String htmlEncodedFixture=URLEncoder.encode(specialChars,StandardCharsets.UTF_8.name());
  HTTPSamplerBase config=makeUrlConfig(.*index.html);
  config.addArgument(test,.*);
  config.setMethod(HTTPConstants.POST);
  HTTPSamplerBase context=makeContext(http://www.apache.org/subdir/previous.html);
  String responseText=<html><head><title>Test page</title></head><body> + <form action=\index.html\ method=\POST\> + <input type=\hidden\ name=\test\+  value=\ + htmlEncodedFixture + \>Goto index page</form></body></html>;
  HTTPSampleResult result=new HTTPSampleResult();
  result.setResponseData(responseText,null);
  result.setSampleLabel(context.toString());
  result.setURL(context.getUrl());
  jmctx.setCurrentSampler(context);
  jmctx.setCurrentSampler(config);
  jmctx.setPreviousResult(result);
  parser.process();
  assertEquals(http://www.apache.org/subdir/index.html,config.getUrl().toString());
  assertEquals(test= + htmlEncodedFixture,config.getQueryString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestAnchorModifier.java",337
1029,"'-tryline","@Test public void testNonHTTPSampler() throws Exception {
  Sampler sampler=new NullSampler();
  response=new SampleResult();
  context.setCurrentSampler(sampler);
  context.setPreviousResult(response);
  mod.process();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestURLRewritingModifier.java",49
1030,"'-tryline","@Test public void testGrabSessionId() throws Exception {
  String html=location: http://server.com/index.html + ?session_id=jfdkjdkf%20jddkfdfjkdjfdf%22;;
  response=new SampleResult();
  response.setResponseData(html,null);
  mod.setArgumentName(session_id);
  HTTPSamplerBase sampler=createSampler();
  sampler.addArgument(session_id,adfasdfdsafasdfasd);
  context.setCurrentSampler(sampler);
  context.setPreviousResult(response);
  mod.process();
  Arguments args=sampler.getArguments();
  assertEquals(jfdkjdkf jddkfdfjkdjfdf\,((Argument)args.getArguments().get(0).getObjectValue()).getValue());
  assertEquals(http://server.com/index.html? + session_id=jfdkjdkf+jddkfdfjkdjfdf%22,sampler.toString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestURLRewritingModifier.java",58
1031,"'-tryline","@Test public void testGrabSessionId2() throws Exception {
  String html=<a href=\http://server.com/index.html? + session_id=jfdkjdkfjddkfdfjkdjfdf\>;
  response=new SampleResult();
  response.setResponseData(html,null);
  mod.setArgumentName(session_id);
  HTTPSamplerBase sampler=createSampler();
  context.setCurrentSampler(sampler);
  context.setPreviousResult(response);
  mod.process();
  Arguments args=sampler.getArguments();
  assertEquals(jfdkjdkfjddkfdfjkdjfdf,((Argument)args.getArguments().get(0).getObjectValue()).getValue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestURLRewritingModifier.java",75
1032,"'-tryline","@Test public void testGrabSessionId3() throws Exception {
  String html=href='index.html?session_id=jfdkjdkfjddkfdfjkdjfdf';
  response=new SampleResult();
  response.setResponseData(html,null);
  mod.setArgumentName(session_id);
  HTTPSamplerBase sampler=createSampler();
  context.setCurrentSampler(sampler);
  context.setPreviousResult(response);
  mod.process();
  Arguments args=sampler.getArguments();
  assertEquals(jfdkjdkfjddkfdfjkdjfdf,((Argument)args.getArguments().get(0).getObjectValue()).getValue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestURLRewritingModifier.java",98
1033,"'-tryline","@Test public void testGrabSessionId6() throws Exception {
  String html=location: http://server.com/index.html + ?session_id=bonjour+monsieur;
  response=new SampleResult();
  response.setResponseData(html,null);
  mod.setArgumentName(session_id);
  HTTPSamplerBase sampler=createSampler();
  sampler.addArgument(session_id,adfasdfdsafasdfasd);
  context.setCurrentSampler(sampler);
  context.setPreviousResult(response);
  mod.process();
  Arguments args=sampler.getArguments();
  assertEquals(bonjour monsieur,((Argument)args.getArguments().get(0).getObjectValue()).getValue());
  assertEquals(http://server.com/index.html? + session_id=bonjour+monsieur,sampler.toString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestURLRewritingModifier.java",112
1034,"'-tryline","@Test public void testGrabSessionId7() throws Exception {
  String html=location: http://server.com/index.html + ?session_id=bonjour+monsieur;
  response=new SampleResult();
  response.setResponseData(html,null);
  mod.setArgumentName(session_id);
  mod.setEncode(true);
  HTTPSamplerBase sampler=createSampler();
  sampler.addArgument(session_id,adfasdfdsafasdfasd);
  context.setCurrentSampler(sampler);
  context.setPreviousResult(response);
  mod.process();
  Arguments args=sampler.getArguments();
  assertEquals(bonjour+monsieur,((Argument)args.getArguments().get(0).getObjectValue()).getValue());
  assertEquals(http://server.com/index.html? + session_id=bonjour%2Bmonsieur,sampler.toString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestURLRewritingModifier.java",129
1035,"'-tryline","@Test public void testGrabSessionIdFromXMLNonPatExtension() throws Exception {
  String html=<url>/some/path;jsessionid=123456789</url>;
  response=new SampleResult();
  response.setResponseData(html,null);
  mod.setArgumentName(jsessionid);
  HTTPSamplerBase sampler=createSampler();
  context.setCurrentSampler(sampler);
  context.setPreviousResult(response);
  mod.process();
  Arguments args=sampler.getArguments();
  assertEquals(123456789,((Argument)args.getArguments().get(0).getObjectValue()).getValue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestURLRewritingModifier.java",147
1036,"'-tryline","@Test public void testGrabSessionIdFromXMLPatExtension() throws Exception {
  String html=<url>/some/path;jsessionid=123456789</url>;
  response=new SampleResult();
  response.setResponseData(html,null);
  mod.setArgumentName(jsessionid);
  mod.setPathExtension(true);
  HTTPSamplerBase sampler=createSampler();
  context.setCurrentSampler(sampler);
  context.setPreviousResult(response);
  mod.process();
  assertEquals(index.html;jsessionid=123456789,sampler.getPath());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestURLRewritingModifier.java",161
1037,"'-tryline","@Test public void testBug61314() throws Exception {
  String html=<url>/some/path;jsessionid=123456789</url>;
  response=new SampleResult();
  response.setResponseData(html,null);
  mod.setArgumentName(jsessionid);
  mod.setPathExtension(true);
  HTTPSamplerBase sampler=createSampler();
  sampler.setPath(/urlRewrite/index;jsessionid=657CF77A86183868CF30AC36321394B7);
  context.setCurrentSampler(sampler);
  context.setPreviousResult(response);
  mod.process();
  assertEquals(/urlRewrite/index;jsessionid=123456789,sampler.getPath());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestURLRewritingModifier.java",175
1038,"'-tryline","@Test public void testBug61314WithQuestionMark() throws Exception {
  String html=<url>/some/path;jsessionid=123456789</url>;
  response=new SampleResult();
  response.setResponseData(html,null);
  mod.setArgumentName(jsessionid);
  mod.setPathExtension(true);
  HTTPSamplerBase sampler=createSampler();
  sampler.setPath(/urlRewrite/index;jsessionid=657CF77A86183868CF30AC36321394B7?toto=titi);
  context.setCurrentSampler(sampler);
  context.setPreviousResult(response);
  mod.process();
  assertEquals(/urlRewrite/index;jsessionid=123456789,sampler.getPath());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestURLRewritingModifier.java",191
1039,"'-tryline","@Test public void testGrabSessionIdEndedInTab() throws Exception {
  String html=href='index.html?session_id=jfdkjdkfjddkfdfjkdjfdf\t;
  response=new SampleResult();
  response.setResponseData(html,null);
  mod.setArgumentName(session_id);
  HTTPSamplerBase sampler=createSampler();
  context.setCurrentSampler(sampler);
  context.setPreviousResult(response);
  mod.process();
  Arguments args=sampler.getArguments();
  assertEquals(jfdkjdkfjddkfdfjkdjfdf,((Argument)args.getArguments().get(0).getObjectValue()).getValue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestURLRewritingModifier.java",207
1040,"'-tryline","@Test public void testGrabSessionId4() throws Exception {
  String html=href='index.html;%24sid%24KQNq3AAADQZoEQAxlkX8uQV5bjqVBPbT';
  response=new SampleResult();
  response.setResponseData(html,null);
  mod.setArgumentName(%24sid%24);
  mod.setPathExtension(true);
  mod.setPathExtensionNoEquals(true);
  HTTPSamplerBase sampler=createSampler();
  context.setCurrentSampler(sampler);
  context.setPreviousResult(response);
  mod.process();
  assertEquals(index.html;%24sid%24KQNq3AAADQZoEQAxlkX8uQV5bjqVBPbT,sampler.getPath());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestURLRewritingModifier.java",221
1041,"'-tryline","@Test public void testGrabSessionId5() throws Exception {
  String html=location: http://server.com/index.html + ?session[33]=jfdkjdkf%20jddkfdfjkdjfdf%22;;
  response=new SampleResult();
  response.setResponseData(html,null);
  mod.setArgumentName(session[33]);
  HTTPSamplerBase sampler=createSampler();
  sampler.addArgument(session[33],adfasdfdsafasdfasd);
  context.setCurrentSampler(sampler);
  context.setPreviousResult(response);
  mod.process();
  Arguments args=sampler.getArguments();
  assertEquals(jfdkjdkf jddkfdfjkdjfdf\,((Argument)args.getArguments().get(0).getObjectValue()).getValue());
  assertEquals(http://server.com/index.html?session%5B33%5D=jfdkjdkf+jddkfdfjkdjfdf%22,sampler.toString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestURLRewritingModifier.java",236
1042,"'-tryline","@Test public void testGrabSessionIdFromForm() throws Exception {
  String[] html=new String[]{<input name=\sid\ value=\myId\>,<input name='sid' value='myId'>,<input value=\myId\ NAME='sid'>,<input VALUE='myId' name=\sid\>,<input blah blah value=\myId\ yoda yoda NAME='sid'>,<input type=\HIDDEN\ name=\sid\      value=\myId\>,<input type=\HIDDEN\ name=\sid\\tvalue=\myId\>};
  for (int i=0; i < html.length; i++) {
    response=new SampleResult();
    response.setResponseData(html[i],null);
    URLRewritingModifier newMod=new URLRewritingModifier();
    newMod.setThreadContext(context);
    newMod.setArgumentName(sid);
    newMod.setPathExtension(false);
    HTTPSamplerBase sampler=createSampler();
    context.setCurrentSampler(sampler);
    context.setPreviousResult(response);
    newMod.process();
    Arguments args=sampler.getArguments();
    assertEquals(For case i= + i,myId,((Argument)args.getArguments().get(0).getObjectValue()).getValue());
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestURLRewritingModifier.java",254
1043,"'-tryline","@Test public void testGrabSessionIdURLinJSON() throws Exception {
  String html=<a href=\#\ onclick=\$(\'frame\').src=\'/index?param1=bla&sessionid=xyzxyzxyz\\';
  response=new SampleResult();
  response.setResponseData(html,null);
  mod.setArgumentName(sessionid);
  HTTPSamplerBase sampler=createSampler();
  sampler.addArgument(sessionid,xyzxyzxyz);
  context.setCurrentSampler(sampler);
  context.setPreviousResult(response);
  mod.process();
  Arguments args=sampler.getArguments();
  assertEquals(xyzxyzxyz,((Argument)args.getArguments().get(0).getObjectValue()).getValue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestURLRewritingModifier.java",282
1044,"'-tryline","@Test public void testCache() throws Exception {
  String[] html=new String[]{<input name=\sid\ value=\myId\>,<html></html>};
  URLRewritingModifier newMod=new URLRewritingModifier();
  newMod.setShouldCache(true);
  newMod.setThreadContext(context);
  newMod.setArgumentName(sid);
  newMod.setPathExtension(false);
  for (int i=0; i < html.length; i++) {
    response=new SampleResult();
    response.setResponseData(html[i],null);
    HTTPSamplerBase sampler=createSampler();
    context.setCurrentSampler(sampler);
    context.setPreviousResult(response);
    newMod.process();
    Arguments args=sampler.getArguments();
    assertEquals(For case i= + i,myId,((Argument)args.getArguments().get(0).getObjectValue()).getValue());
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestURLRewritingModifier.java",299
1045,"'-tryline","@Test public void testNoCache() throws Exception {
  String[] html=new String[]{<input name=\sid\ value=\myId\>,myId,<html></html>,};
  URLRewritingModifier newMod=new URLRewritingModifier();
  newMod.setThreadContext(context);
  newMod.setArgumentName(sid);
  newMod.setPathExtension(false);
  newMod.setShouldCache(false);
  for (int i=0; i < html.length / 2; i++) {
    response=new SampleResult();
    response.setResponseData(html[i * 2],null);
    HTTPSamplerBase sampler=createSampler();
    context.setCurrentSampler(sampler);
    context.setPreviousResult(response);
    newMod.process();
    Arguments args=sampler.getArguments();
    assertEquals(For case i= + i,html[i * 2 + 1],((Argument)args.getArguments().get(0).getObjectValue()).getValue());
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestURLRewritingModifier.java",323
1046,"'-tryline","@Test public void testReusableCache() throws Exception {
  assertSame(BaseParser.getParser(ReusableParser.class.getCanonicalName()),BaseParser.getParser(ReusableParser.class.getCanonicalName()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\TestBaseParser.java",27
1047,"'-tryline","@Test public void testNotReusableCache() throws Exception {
  assertNotSame(BaseParser.getParser(NotReusableParser.class.getCanonicalName()),BaseParser.getParser(NotReusableParser.class.getCanonicalName()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\TestBaseParser.java",34
1048,"'-tryline","@Test public void testGetEmbeddedResourceURLsStringByteArrayURLURLCollectionString() throws Exception {
  final ArrayList<URLString> c=new ArrayList<>();
  parser.getEmbeddedResourceURLs(Mozilla,html.getBytes(StandardCharsets.UTF_8),new URL(http://example.org),new URLCollection(c),StandardCharsets.UTF_8.name());
  List<String> urlNames=c.stream().map(u -> u.toString()).collect(Collectors.toList());
  assertThat(String.format(Parse with %s the page %s to get %s,parser.getClass().getSimpleName(),html,links),urlNames,CoreMatchers.is(CoreMatchers.equalTo(links)));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\TestBug60842HtmlParser.java",129
1049,"'-tryline","@Test public void testGetEmbeddedResourceURLsNoUrls() throws Exception {
  CssParser nonIgnoreParser=new CssParser();
  List<URL> result=extractUrls(nonIgnoreParser,..);
  assertThat(result,is(empty()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\TestCssParser.java",46
1050,"'-tryline","@Test public void testGetEmbeddedResourceURLsnOneUrl() throws Exception {
  List<URL> result=extractUrls(@import url(http://example.com/abc.css););
  assertThat(result,is(not(empty())));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\TestCssParser.java",53
1051,"'-tryline","@Test public void testExtractUrlsFromBrokenData() throws Exception {
  List<URL> result=extractUrls(CSS_IN_ERROR);
  assertThat(result,is(empty()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\TestCssParser.java",59
1052,"'-tryline","public void testParserProperty() throws Exception {
  Properties p=JMeterUtils.getJMeterProperties();
  if (p == null) {
    p=JMeterUtils.getProperties(jmeter.properties);
  }
  p.setProperty(HTMLParser.PARSER_CLASSNAME,parserName);
  BaseParser.getParser(p.getProperty(HTMLParser.PARSER_CLASSNAME));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\TestHTMLParser.java",293
1053,"'-tryline","public void testDefaultParser() throws Exception {
  BaseParser.getParser(JMeterUtils.getPropDefault(HTMLParser.PARSER_CLASSNAME,HTMLParser.DEFAULT_PARSER));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\TestHTMLParser.java",302
1054,"'-tryline","public void testParserDefault() throws Exception {
  BaseParser.getParser(HTMLParser.DEFAULT_PARSER);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\TestHTMLParser.java",306
1055,"'-tryline","public void testParserMissing() throws Exception {
  try {
    BaseParser.getParser(no.such.parser);
    fail(Should not have been able to create the parser);
  }
 catch (  LinkExtractorParseException e) {
    if (!(e.getCause() instanceof ClassNotFoundException)) {
      throw e;
    }
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\TestHTMLParser.java",310
1056,"'-tryline","public void testNotParser() throws Exception {
  try {
    HTMLParser.getParser(java.lang.String);
    fail(Should not have been able to create the parser);
  }
 catch (  LinkExtractorParseException e) {
    if (e.getCause() instanceof ClassCastException) {
      return;
    }
    throw e;
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\TestHTMLParser.java",321
1057,"'-tryline","public void testNotCreatable() throws Exception {
  try {
    HTMLParser.getParser(TestClass.class.getName());
    fail(Should not have been able to create the parser);
  }
 catch (  LinkExtractorParseException e) {
    if (e.getCause() instanceof ReflectiveOperationException) {
      return;
    }
    throw e;
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\TestHTMLParser.java",333
1058,"'-tryline","public void testNotCreatableStatic() throws Exception {
  try {
    HTMLParser.getParser(StaticTestClass.class.getName());
    fail(Should not have been able to create the parser);
  }
 catch (  LinkExtractorParseException e) {
    if (e.getCause() instanceof ClassCastException) {
      return;
    }
    if (e.getCause() instanceof IllegalAccessException) {
      return;
    }
    throw e;
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\TestHTMLParser.java",345
1059,"'-tryline","public void testParserSet() throws Exception {
  HTMLParser p=(HTMLParser)BaseParser.getParser(parserName);
  filetest(p,TESTS[testNumber].fileName,TESTS[testNumber].baseURL,TESTS[testNumber].expectedSet,null,false,TESTS[testNumber].userAgent);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\TestHTMLParser.java",360
1060,"'-tryline","public void testParserList() throws Exception {
  HTMLParser p=(HTMLParser)BaseParser.getParser(parserName);
  filetest(p,TESTS[testNumber].fileName,TESTS[testNumber].baseURL,TESTS[testNumber].expectedList,new Vector<URLString>(),true,TESTS[testNumber].userAgent);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\TestHTMLParser.java",366
1061,"'-tryline","public void testSpecificParserList() throws Exception {
  HTMLParser p=(HTMLParser)BaseParser.getParser(parserName);
  filetest(p,SPECIFIC_PARSER_TESTS[testNumber].fileName,SPECIFIC_PARSER_TESTS[testNumber].baseURL,SPECIFIC_PARSER_TESTS[testNumber].expectedList,new ArrayList<URLString>(),true,SPECIFIC_PARSER_TESTS[testNumber].userAgent);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\TestHTMLParser.java",372
1062,"'-tryline","private static void filetest(HTMLParser p,String file,String url,String resultFile,Collection<URLString> c,boolean orderMatters,String userAgent) throws Exception {
  String parserName=p.getClass().getName().substring(org.apache.jmeter.protocol.http.parser..length());
  String fname=file.substring(file.indexOf('/') + 1);
  log.debug(file   {},file);
  byte[] buffer=IOUtils.toByteArray(getInputStream(file));
  Iterator<URL> result;
  if (c == null) {
    result=p.getEmbeddedResourceURLs(userAgent,buffer,new URL(url),System.getProperty(file.encoding));
  }
 else {
    result=p.getEmbeddedResourceURLs(userAgent,buffer,new URL(url),c,System.getProperty(file.encoding));
  }
  Iterator<String> expected;
  if (orderMatters) {
    expected=getFile(resultFile).iterator();
  }
 else {
    expected=new TreeSet<>(getFile(resultFile)).iterator();
    TreeSet<URL> temp=new TreeSet<>(new Comparator<Object>(){
      @Override public int compare(      Object o1,      Object o2){
        return o1.toString().compareTo(o2.toString());
      }
    }
);
    while (result.hasNext()) {
      temp.add(result.next());
    }
    result=temp.iterator();
  }
  while (expected.hasNext()) {
    Object next=expected.next();
    assertTrue(userAgent + :: + fname+ ::+ parserName+ ::Expecting another result + next,result.hasNext());
    try {
      assertEquals(userAgent + :: + fname+ ::+ parserName+ (next),next,result.next().toString());
    }
 catch (    ClassCastException e) {
      fail(userAgent + :: + fname+ ::+ parserName+ ::Expected URL, but got + e.toString());
    }
  }
  assertFalse(userAgent + :: + fname+ ::+ parserName+ ::Should have reached the end of the results,result.hasNext());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\TestHTMLParser.java",382
1063,"'-tryline","private static List<String> getFile(String file) throws Exception {
  if (file == null || file.isEmpty()) {
    return Collections.emptyList();
  }
  try (InputStream is=getInputStream(file);Reader fr=new InputStreamReader(is,StandardCharsets.UTF_8);BufferedReader br=new BufferedReader(fr)){
    return br.lines().collect(Collectors.toList());
  }
 }
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\TestHTMLParser.java",431
1064,"'-tryline","@Test public void testGetParser() throws Exception {
  HtmlParsingUtils.getParser();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\TestHtmlParsingUtils.java",36
1065,"'-tryline","@Test public void testGetDom() throws Exception {
  HtmlParsingUtils.getDOM(<HTML></HTML>);
  HtmlParsingUtils.getDOM();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\TestHtmlParsingUtils.java",41
1066,"'-tryline","@Test public void testIsArgumentMatched() throws Exception {
  Argument arg=new Argument();
  Argument argp=new Argument();
  assertTrue(HtmlParsingUtils.isArgumentMatched(arg,argp));
  arg=new Argument(test,abcd);
  argp=new Argument(test,a.*d);
  assertTrue(HtmlParsingUtils.isArgumentMatched(arg,argp));
  arg=new Argument(test,abcd);
  argp=new Argument(test,a.*e);
  assertFalse(HtmlParsingUtils.isArgumentMatched(arg,argp));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\TestHtmlParsingUtils.java",47
1067,"'-tryline","@Test public void testIsAnchorMatched() throws Exception {
  HTTPSamplerBase target=new HTTPNullSampler();
  HTTPSamplerBase pattern=new HTTPNullSampler();
  assertTrue(HtmlParsingUtils.isAnchorMatched(target,pattern));
  target.setProtocol(http:);
  assertFalse(HtmlParsingUtils.isAnchorMatched(target,pattern));
  pattern.setProtocol(.*);
  assertTrue(HtmlParsingUtils.isAnchorMatched(target,pattern));
  target.setDomain(a.b.c);
  assertTrue(HtmlParsingUtils.isAnchorMatched(target,pattern));
  pattern.setDomain(.*);
  assertTrue(HtmlParsingUtils.isAnchorMatched(target,pattern));
  target.setPath(/abc);
  assertFalse(HtmlParsingUtils.isAnchorMatched(target,pattern));
  pattern.setPath(.*);
  assertTrue(HtmlParsingUtils.isAnchorMatched(target,pattern));
  target.addArgument(param2,value2,=);
  assertTrue(HtmlParsingUtils.isAnchorMatched(target,pattern));
  pattern.addArgument(param1,.*,=);
  assertFalse(HtmlParsingUtils.isAnchorMatched(target,pattern));
  target.addArgument(param1,value1,=);
  assertTrue(HtmlParsingUtils.isAnchorMatched(target,pattern));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\TestHtmlParsingUtils.java",62
1068,"'-tryline","@Test public void testisEqualOrMatches() throws Exception {
  assertTrue(HtmlParsingUtils.isEqualOrMatches(http:,http:));
  assertFalse(HtmlParsingUtils.isEqualOrMatches(http:,htTp:));
  assertTrue(HtmlParsingUtils.isEqualOrMatches(http:,ht+p:));
  assertFalse(HtmlParsingUtils.isEqualOrMatches(ht+p:,http:));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\TestHtmlParsingUtils.java",97
1069,"'-tryline","@Test public void testisEqualOrMatchesCaseBlind() throws Exception {
  assertTrue(HtmlParsingUtils.isEqualOrMatchesCaseBlind(http:,http:));
  assertTrue(HtmlParsingUtils.isEqualOrMatchesCaseBlind(http:,htTp:));
  assertTrue(HtmlParsingUtils.isEqualOrMatches(http:,ht+p:));
  assertFalse(HtmlParsingUtils.isEqualOrMatches(ht+p:,http:));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\TestHtmlParsingUtils.java",105
1070,"'-tryline","@Test public void testRepeatedArguments() throws Exception {
  String url=http://localhost/matrix.html;
  String contentEncoding=UTF-8;
  String testGetRequest=GET  + url + ?update=yes&d=1&d=2&d=&d=&d=&d=&d=&d=1&d=2&d=1&d=&d= + HTTP/1.0\r\n\r\n;
  HTTPSamplerBase s=getSamplerForRequest(url,testGetRequest,contentEncoding);
  assertEquals(HTTPConstants.GET,s.getMethod());
  assertEquals(contentEncoding,s.getContentEncoding());
  Arguments arguments=s.getArguments();
  assertEquals(13,arguments.getArgumentCount());
  checkArgument((HTTPArgument)arguments.getArgument(0),update,yes,yes,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(1),d,1,1,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(2),d,2,2,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(3),d,,,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(4),d,,,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(5),d,,,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(6),d,,,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(7),d,,,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(8),d,1,1,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(9),d,2,2,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(10),d,1,1,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(11),d,,,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(12),d,,,contentEncoding,false);
  contentEncoding=UTF-8;
  String postBody=update=yes&d=1&d=2&d=&d=&d=&d=&d=&d=1&d=2&d=1&d=&d=;
  String testPostRequest=POST  + url +  HTTP/1.0\n+ Content-type: + HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED+ \r\n+ Content-length: + getBodyLength(postBody,contentEncoding)+ \r\n+ \r\n+ postBody;
  s=getSamplerForRequest(url,testPostRequest,contentEncoding);
  assertEquals(HTTPConstants.POST,s.getMethod());
  assertFalse(s.getDoMultipart());
  assertEquals(contentEncoding,s.getContentEncoding());
  arguments=s.getArguments();
  assertEquals(13,arguments.getArgumentCount());
  checkArgument((HTTPArgument)arguments.getArgument(0),update,yes,yes,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(1),d,1,1,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(2),d,2,2,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(3),d,,,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(4),d,,,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(5),d,,,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(6),d,,,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(7),d,,,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(8),d,1,1,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(9),d,2,2,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(10),d,1,1,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(11),d,,,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(12),d,,,contentEncoding,false);
  contentEncoding=UTF-8;
  postBody=update=yes&d=1&d=2&d=&d=&d=&d=&d=&d=1&d=2&d=1&d=\uc385&d=;
  testPostRequest=POST  + url +  HTTP/1.1\r\n+ Content-type: text/plain\r\n+ Content-length: + getBodyLength(postBody,contentEncoding)+ \r\n+ \r\n+ postBody;
  s=getSamplerForRequest(url,testPostRequest,contentEncoding);
  assertEquals(HTTPConstants.POST,s.getMethod());
  assertFalse(s.getDoMultipart());
  assertEquals(contentEncoding,s.getContentEncoding());
  arguments=s.getArguments();
  assertEquals(1,arguments.getArgumentCount());
  checkArgument((HTTPArgument)arguments.getArgument(0),,postBody,postBody,contentEncoding,false);
  contentEncoding=UTF-8;
  postBody=update=yes&d=1&d=2&d=&d=&d=&d=&d=&d=1&d=2&d=1&d=\uc385&d=;
  testPostRequest=POST  + url +  HTTP/1.1\r\n+ Content-type: text/plain; charset=+ contentEncoding+ \r\n+ Content-length: + getBodyLength(postBody,contentEncoding)+ \r\n+ \r\n+ postBody;
  s=getSamplerForRequest(null,testPostRequest,contentEncoding);
  assertEquals(HTTPConstants.POST,s.getMethod());
  assertFalse(s.getDoMultipart());
  assertEquals(contentEncoding,s.getContentEncoding());
  arguments=s.getArguments();
  assertEquals(1,arguments.getArgumentCount());
  checkArgument((HTTPArgument)arguments.getArgument(0),,postBody,postBody,contentEncoding,false);
  contentEncoding=UTF-8;
  url=http://vmdal-hqqa9/retalixhq/GG_Implementation/ScreenEntity/ScreenEntityHTTP.aspx?Action=Save&ET=Vendor&TT=Single&Sid=1347280336092;
  postBody=<Action UIStatus=\2\><Vendor Id=\9292\ HOST_ID=\0\ VENDOR=\9292\ TERMS_TYPE=\No Terms\ TERMS=\0 %\ +  AUTO_PRICE=\Use System Default\ VM_VENDOR_TYPE=\DSD Vendor\ ITEM_FORMAT=\PLU\ COST_ENTRY_SORT=\UPC/EAN\ +  VM_REPORT_SORT=\UPC/EAN\ VM_ORDER_SORT=\UPC/EAN\ VM_RECEIVING_SORT=\UPC/EAN\ VM_MAX_BACK_ORDERS=\99\+  MAX_OPEN_DAYS=\99\ PAY_BASED_ON=\System Cost\ ORDER_COST_DATE=\Use System Rule\ VM_CONSIDER_FREE=\False\+  VM_SHOW_DETAIL=\False\ VM_UPDATE_COST=\No\ RD_USE_VENDOR_CC=\False\ BLIND_RECEIVING=\Default\+  EXCLUDE_RECEIVED_COST=\False\ PRINT_ITEM_ADJ=\False\ PRINT_OVERALL_ADJ=\False\ PRINT_TAX_DETAIL=\False\+  BLOCK_PRICE_VIEW=\False\ DELIVERY_STATUS=\No Delivery\ AUTO_RECEIVE=\False\ TARGET_GM_FLAG=\%\+  MINIMUM_GM_FLAG=\%\ MARGIN_TYPE=\Gross Margin\ HOLD_REGULAR=\Default\ HOLD_SPECIALS=\Default\+  TRUSTING_VENDOR=\False\ AUTO_ACCEPT=\All\ EARLY_RCPT_AFFECTS=\All Costs\ SBT_ELIGIBLE=\Not eligible\+  SBT_REPORTING_DAY=\Monday\ AUTO_BALANCE_FLAG=\$\ DAX_MANAGED=\False\ CHANGE_ID=\QA\ CHANGE_SOURCE=\Manual Change\+  ORIGINAL_SOURCE=\Manual Change\ RECORD_STATUS=\Add\ RECORD_STATUS_DATE=\9/7/2012 8:34:58 AM\ VENDOR_NAME=\test\+  UIStatus=\2\/></Action>;
  testPostRequest=POST  + url +  HTTP/1.1\r\n+ x-requested-with: XMLHttpRequest+ \r\n+ Accept-Language: en-us+ \r\n+ Referer: http://vmdal-hqqa9/retalixhq/GG_Implementation/ScreenEntity/ScreenEntityPage.aspx?ET=Vendor&TT=Single&+ WM=2&UID=9292&Sid=1347280331908&UITH=Blue&MUID=window_0+ \r\n+ Accept: */*+ \r\n+ Content-Type: application/x-www-form-urlencoded+ \r\n+ Accept-Encoding: gzip, deflate+ \r\n+ User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729;+  .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; Tablet PC 2.0)+ \r\n+ Host: vmdal-hqqa9+ \r\n+ Content-Length: + getBodyLength(postBody,contentEncoding)+ \r\n+ Proxy-Connection: Keep-Alive+ \r\n+ Pragma: no-cache+ \r\n+ Cookie: RHQ=sid=5aaeb66c-e174-4f4c-9928-83cffcc62150+ \r\n+ \r\n+ postBody;
  s=getSamplerForRequest(null,testPostRequest,contentEncoding);
  assertEquals(HTTPConstants.POST,s.getMethod());
  assertFalse(s.getDoMultipart());
  arguments=s.getArguments();
  assertEquals(1,arguments.getArgumentCount());
  checkArgument((HTTPArgument)arguments.getArgument(0),,postBody,postBody,contentEncoding,false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\proxy\TestHttpRequestHdr.java",46
1071,"'-tryline","@Test public void testEncodedArguments() throws Exception {
  String url=http://localhost/matrix.html;
  testEncodedArguments(url);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\proxy\TestHttpRequestHdr.java",193
1072,"'-tryline","@Test public void testEncodedArgumentsIPv6() throws Exception {
  String url=http://[::1]:8080/matrix.html;
  testEncodedArguments(url);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\proxy\TestHttpRequestHdr.java",200
1073,"'-tryline","private void testEncodedArguments(String url) throws Exception {
  String contentEncoding=;
  String queryString=abc%3FSPACE=a+b&space=a%20b&query=What%3F;
  String testGetRequest=GET  + url + ?+ queryString+  HTTP/1.1\r\n\r\n;
  HTTPSamplerBase s=getSamplerForRequest(null,testGetRequest,null);
  assertEquals(HTTPConstants.GET,s.getMethod());
  assertEquals(queryString,s.getQueryString());
  assertEquals(contentEncoding,s.getContentEncoding());
  Arguments arguments=s.getArguments();
  assertEquals(3,arguments.getArgumentCount());
  checkArgument((HTTPArgument)arguments.getArgument(0),abc%3FSPACE,a+b,a+b,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(1),space,a%20b,a%20b,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(2),query,What%3F,What%3F,contentEncoding,false);
  contentEncoding=UTF-8;
  queryString=abc%3FSPACE=a+b&space=a%20b&query=What%3F;
  testGetRequest=GET  + url + ?+ queryString+  HTTP/1.1\r\n\r\n;
  s=getSamplerForRequest(url,testGetRequest,contentEncoding);
  assertEquals(HTTPConstants.GET,s.getMethod());
  String expectedQueryString=abc%3FSPACE=a+b&space=a+b&query=What%3F;
  assertEquals(expectedQueryString,s.getQueryString());
  assertEquals(contentEncoding,s.getContentEncoding());
  arguments=s.getArguments();
  assertEquals(3,arguments.getArgumentCount());
  checkArgument((HTTPArgument)arguments.getArgument(0),abc?SPACE,a b,a+b,contentEncoding,true);
  checkArgument((HTTPArgument)arguments.getArgument(1),space,a b,a+b,contentEncoding,true);
  checkArgument((HTTPArgument)arguments.getArgument(2),query,What?,What%3F,contentEncoding,true);
  contentEncoding=;
  String postBody=abc%3FSPACE=a+b&space=a%20b&query=What%3F;
  String testPostRequest=POST  + url +  HTTP/1.1\r\n+ Content-type: + HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED+ \r\n+ Content-length: + getBodyLength(postBody,contentEncoding)+ \r\n+ \r\n+ postBody;
  s=getSamplerForRequest(null,testPostRequest,null);
  assertEquals(HTTPConstants.POST,s.getMethod());
  assertEquals(queryString,s.getQueryString());
  assertEquals(contentEncoding,s.getContentEncoding());
  assertFalse(s.getDoMultipart());
  arguments=s.getArguments();
  assertEquals(3,arguments.getArgumentCount());
  checkArgument((HTTPArgument)arguments.getArgument(0),abc%3FSPACE,a+b,a+b,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(1),space,a%20b,a%20b,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(2),query,What%3F,What%3F,contentEncoding,false);
  contentEncoding=UTF-8;
  postBody=abc?SPACE=a+b&space=a%20b&query=What?;
  testPostRequest=POST  + url +  HTTP/1.1\n+ Content-type: + HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED+ \r\n+ Content-length: + getBodyLength(postBody,contentEncoding)+ \r\n+ \r\n+ postBody;
  s=getSamplerForRequest(url,testPostRequest,contentEncoding);
  assertEquals(HTTPConstants.POST,s.getMethod());
  expectedQueryString=abc%3FSPACE=a+b&space=a+b&query=What%3F;
  assertEquals(expectedQueryString,s.getQueryString());
  assertEquals(contentEncoding,s.getContentEncoding());
  assertFalse(s.getDoMultipart());
  arguments=s.getArguments();
  assertEquals(3,arguments.getArgumentCount());
  checkArgument((HTTPArgument)arguments.getArgument(0),abc?SPACE,a b,a+b,contentEncoding,true);
  checkArgument((HTTPArgument)arguments.getArgument(1),space,a b,a+b,contentEncoding,true);
  checkArgument((HTTPArgument)arguments.getArgument(2),query,What?,What%3F,contentEncoding,true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\proxy\TestHttpRequestHdr.java",206
1074,"'-tryline","@Test public void testGetRequestEncodings() throws Exception {
  testGetRequestEncodings(http://localhost/matrix.html);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\proxy\TestHttpRequestHdr.java",296
1075,"'-tryline","@Test public void testGetRequestEncodingsIPv6() throws Exception {
  testGetRequestEncodings(http://[::1]:8080/matrix.html);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\proxy\TestHttpRequestHdr.java",301
1076,"'-tryline","private void testGetRequestEncodings(String url) throws Exception {
  String contentEncoding=;
  String param1Value=yes;
  String param2Value=0+5 -\u00c5\uc385%C3%85;
  String param2ValueEncoded=URLEncoder.encode(param2Value,UTF-8);
  String testGetRequest=GET  + url + ?param1=+ param1Value+ &param2=+ param2ValueEncoded+  + HTTP/1.1\r\n\r\n;
  HTTPSamplerBase s=getSamplerForRequest(null,testGetRequest,null);
  assertEquals(HTTPConstants.GET,s.getMethod());
  assertEquals(contentEncoding,s.getContentEncoding());
  Arguments arguments=s.getArguments();
  assertEquals(2,arguments.getArgumentCount());
  checkArgument((HTTPArgument)arguments.getArgument(0),param1,param1Value,param1Value,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(1),param2,param2ValueEncoded,param2ValueEncoded,contentEncoding,false);
  contentEncoding=UTF-8;
  param1Value=yes;
  param2Value=0+5 -\u007c\u2aa1\u266a\u0153\u20a1\u0115\u0364\u00c5\u2052\uc385%C3%85;
  param2ValueEncoded=URLEncoder.encode(param2Value,contentEncoding);
  testGetRequest=GET  + url + ?param1=+ param1Value+ &param2=+ param2ValueEncoded+  + HTTP/1.1\r\n\r\n;
  s=getSamplerForRequest(url,testGetRequest,contentEncoding);
  assertEquals(HTTPConstants.GET,s.getMethod());
  assertEquals(contentEncoding,s.getContentEncoding());
  arguments=s.getArguments();
  assertEquals(2,arguments.getArgumentCount());
  checkArgument((HTTPArgument)arguments.getArgument(0),param1,param1Value,param1Value,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(1),param2,param2Value,param2ValueEncoded,contentEncoding,true);
  contentEncoding=ISO-8859-1;
  param1Value=yes;
  param2Value=0+5 -\u00c5%C3%85;
  param2ValueEncoded=URLEncoder.encode(param2Value,contentEncoding);
  testGetRequest=GET  + url + ?param1=+ param1Value+ &param2=+ param2ValueEncoded+  + HTTP/1.1\r\n\r\n;
  s=getSamplerForRequest(url,testGetRequest,contentEncoding);
  assertEquals(HTTPConstants.GET,s.getMethod());
  assertEquals(contentEncoding,s.getContentEncoding());
  arguments=s.getArguments();
  assertEquals(2,arguments.getArgumentCount());
  checkArgument((HTTPArgument)arguments.getArgument(0),param1,param1Value,param1Value,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(1),param2,param2Value,param2ValueEncoded,contentEncoding,true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\proxy\TestHttpRequestHdr.java",306
1077,"'-tryline","@Test public void testPostRequestEncodings() throws Exception {
  String url=http://localhost/matrix.html;
  String contentEncoding=;
  String param1Value=yes;
  String param2Value=0+5 -\u00c5%C3%85;
  String param2ValueEncoded=URLEncoder.encode(param2Value,UTF-8);
  String postBody=param1= + param1Value + &param2=+ param2ValueEncoded+ \r\n;
  String testPostRequest=POST  + url +  HTTP/1.1\r\n+ Content-type: + HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED+ \r\n+ Content-length: + getBodyLength(postBody,contentEncoding)+ \r\n+ \r\n+ postBody;
  HTTPSamplerBase s=getSamplerForRequest(null,testPostRequest,null);
  assertEquals(HTTPConstants.POST,s.getMethod());
  assertEquals(contentEncoding,s.getContentEncoding());
  Arguments arguments=s.getArguments();
  assertEquals(2,arguments.getArgumentCount());
  checkArgument((HTTPArgument)arguments.getArgument(0),param1,param1Value,param1Value,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(1),param2,param2ValueEncoded,param2ValueEncoded,contentEncoding,false);
  contentEncoding=UTF-8;
  param1Value=yes;
  param2Value=0+5 -\u007c\u2aa1\u266a\u0153\u20a1\u0115\u0364\u00c5\u2052\uc385%C3%85;
  param2ValueEncoded=URLEncoder.encode(param2Value,contentEncoding);
  postBody=param1= + param1Value + &param2=+ param2ValueEncoded+ \r\n;
  testPostRequest=POST  + url +  HTTP/1.1\r\n+ Content-type: + HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED+ \r\n+ Content-length: + getBodyLength(postBody,contentEncoding)+ \r\n+ \r\n+ postBody;
  s=getSamplerForRequest(url,testPostRequest,contentEncoding);
  assertEquals(HTTPConstants.POST,s.getMethod());
  assertEquals(contentEncoding,s.getContentEncoding());
  arguments=s.getArguments();
  assertEquals(2,arguments.getArgumentCount());
  checkArgument((HTTPArgument)arguments.getArgument(0),param1,param1Value,param1Value,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(1),param2,param2Value,param2ValueEncoded,contentEncoding,true);
  contentEncoding=ISO-8859-1;
  param1Value=yes;
  param2Value=0+5 -\u00c5%C3%85;
  param2ValueEncoded=URLEncoder.encode(param2Value,contentEncoding);
  postBody=param1= + param1Value + &param2=+ param2ValueEncoded+ \r\n;
  testPostRequest=POST  + url +  HTTP/1.1\r\n+ Content-type: + HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED+ \r\n+ Content-length: + getBodyLength(postBody,contentEncoding)+ \r\n+ \r\n+ postBody;
  s=getSamplerForRequest(url,testPostRequest,contentEncoding);
  assertEquals(HTTPConstants.POST,s.getMethod());
  assertEquals(contentEncoding,s.getContentEncoding());
  arguments=s.getArguments();
  assertEquals(2,arguments.getArgumentCount());
  checkArgument((HTTPArgument)arguments.getArgument(0),param1,param1Value,param1Value,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(1),param2,param2Value,param2ValueEncoded,contentEncoding,true);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\proxy\TestHttpRequestHdr.java",365
1078,"'-tryline","@Test public void testPostMultipartFormData() throws Exception {
  String url=http://localhost/matrix.html;
  String contentEncoding=UTF-8;
  String boundary=xf8SqlDNvmn6mFYwrioJaeUR2_Z4cLRXOSmB;
  String endOfLine=\r\n;
  String titleValue=mytitle;
  String descriptionValue=mydescription;
  String postBody=createMultipartFormBody(titleValue,descriptionValue,contentEncoding,true,boundary,endOfLine);
  String testPostRequest=createMultipartFormRequest(url,postBody,contentEncoding,boundary,endOfLine);
  HTTPSamplerBase s=getSamplerForRequest(url,testPostRequest,contentEncoding);
  assertEquals(HTTPConstants.POST,s.getMethod());
  assertEquals(contentEncoding,s.getContentEncoding());
  assertTrue(s.getDoMultipart());
  Arguments arguments=s.getArguments();
  assertEquals(2,arguments.getArgumentCount());
  checkArgument((HTTPArgument)arguments.getArgument(0),title,titleValue,titleValue,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(1),description,descriptionValue,descriptionValue,contentEncoding,false);
  endOfLine=\r\n;
  titleValue=mytitle;
  descriptionValue=mydescription;
  postBody=createMultipartFormBody(titleValue,descriptionValue,contentEncoding,true,boundary,endOfLine);
  testPostRequest=createMultipartFormRequest(url,postBody,contentEncoding,boundary,endOfLine);
  s=getSamplerForRequest(url,testPostRequest,contentEncoding);
  assertEquals(HTTPConstants.POST,s.getMethod());
  assertEquals(contentEncoding,s.getContentEncoding());
  assertTrue(s.getDoMultipart());
  arguments=s.getArguments();
  assertEquals(2,arguments.getArgumentCount());
  checkArgument((HTTPArgument)arguments.getArgument(0),title,titleValue,titleValue,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(1),description,descriptionValue,descriptionValue,contentEncoding,false);
  endOfLine=\n;
  titleValue=mytitle;
  descriptionValue=mydescription;
  postBody=createMultipartFormBody(titleValue,descriptionValue,contentEncoding,true,boundary,endOfLine);
  testPostRequest=createMultipartFormRequest(url,postBody,contentEncoding,boundary,endOfLine);
  s=getSamplerForRequest(url,testPostRequest,contentEncoding);
  assertEquals(HTTPConstants.POST,s.getMethod());
  assertEquals(contentEncoding,s.getContentEncoding());
  assertTrue(s.getDoMultipart());
  arguments=s.getArguments();
  assertEquals(2,arguments.getArgumentCount());
  checkArgument((HTTPArgument)arguments.getArgument(0),title,titleValue,titleValue,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(1),description,descriptionValue,descriptionValue,contentEncoding,false);
  endOfLine=\r\n;
  titleValue=/wEPDwULLTE2MzM2OTA0NTYPZBYCAgMPZ/rA+8DZ2dnZ2dnZ2d/GNDar6OshPwdJc=;
  descriptionValue=mydescription;
  postBody=createMultipartFormBody(titleValue,descriptionValue,contentEncoding,true,boundary,endOfLine);
  testPostRequest=createMultipartFormRequest(url,postBody,contentEncoding,boundary,endOfLine);
  s=getSamplerForRequest(url,testPostRequest,contentEncoding);
  assertEquals(HTTPConstants.POST,s.getMethod());
  assertEquals(contentEncoding,s.getContentEncoding());
  assertTrue(s.getDoMultipart());
  arguments=s.getArguments();
  assertEquals(2,arguments.getArgumentCount());
  checkArgument((HTTPArgument)arguments.getArgument(0),title,titleValue,titleValue,contentEncoding,false);
  checkArgument((HTTPArgument)arguments.getArgument(1),description,descriptionValue,descriptionValue,contentEncoding,false);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\proxy\TestHttpRequestHdr.java",441
1079,"'-tryline","@Test public void testParse1() throws Exception {
  HttpRequestHdr req=new HttpRequestHdr();
  ByteArrayInputStream bis=null;
  bis=new ByteArrayInputStream(GET xxx HTTP/1.0\r\nname:value \r\n.getBytes(ISO-8859-1));
  req.parse(bis);
  bis.close();
  HeaderManager mgr=req.getHeaderManager();
  Header header;
  mgr.getHeaders();
  header=mgr.getHeader(0);
  assertEquals(name,header.getName());
  assertEquals(value,header.getValue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\proxy\TestHttpRequestHdr.java",525
1080,"'-tryline","@Test public void testParse2() throws Exception {
  HttpRequestHdr req=new HttpRequestHdr();
  ByteArrayInputStream bis=null;
  bis=new ByteArrayInputStream(GET xxx HTTP/1.0\r\nname:           value \r\n.getBytes(ISO-8859-1));
  req.parse(bis);
  bis.close();
  HeaderManager mgr=req.getHeaderManager();
  Header header;
  mgr.getHeaders();
  header=mgr.getHeader(0);
  assertEquals(name,header.getName());
  assertEquals(value,header.getValue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\proxy\TestHttpRequestHdr.java",541
1081,"'-tryline","@Test public void testPostMultipartFileUpload() throws Exception {
  String url=http://localhost/matrix.html;
  String contentEncoding=UTF-8;
  String boundary=xf8SqlDNvmn6mFYwrioJaeUR2_Z4cLRXOSmB;
  String endOfLine=\r\n;
  String fileFieldValue=test_file;
  String fileName=somefilename.txt;
  String mimeType=text/plain;
  String fileContent=somedummycontent\n\ndfgdfg\r\nfgdgdg\nContent-type:dfsfsfds;
  String postBody=createMultipartFileUploadBody(fileFieldValue,fileName,mimeType,fileContent,boundary,endOfLine);
  String testPostRequest=createMultipartFormRequest(url,postBody,contentEncoding,boundary,endOfLine);
  HTTPSamplerBase s=getSamplerForRequest(url,testPostRequest,contentEncoding);
  assertEquals(HTTPConstants.POST,s.getMethod());
  assertEquals(contentEncoding,s.getContentEncoding());
  assertEquals(,s.getQueryString());
  assertTrue(s.getDoMultipart());
  Arguments arguments=s.getArguments();
  assertEquals(0,arguments.getArgumentCount());
  HTTPFileArg hfa=s.getHTTPFiles()[0];
  assertEquals(fileFieldValue,hfa.getParamName());
  assertEquals(fileName,hfa.getPath());
  assertEquals(mimeType,hfa.getMimeType());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\proxy\TestHttpRequestHdr.java",556
1082,"'-tryline","private HTTPSamplerBase getSamplerForRequest(String url,String request,String contentEncoding) throws Exception {
  HttpRequestHdr req=new HttpRequestHdr();
  ByteArrayInputStream bis=null;
  if (contentEncoding != null) {
    bis=new ByteArrayInputStream(request.getBytes(contentEncoding));
  }
 else {
    bis=new ByteArrayInputStream(request.getBytes(ISO-8859-1));
  }
  req.parse(bis);
  bis.close();
  Map<String,String> pageEncodings=Collections.synchronizedMap(new HashMap<String,String>());
  Map<String,String> formEncodings=Collections.synchronizedMap(new HashMap<String,String>());
  if (url != null && contentEncoding != null) {
    pageEncodings.put(url,contentEncoding);
  }
  SamplerCreatorFactory creatorFactory=new SamplerCreatorFactory();
  SamplerCreator creator=creatorFactory.getSamplerCreator(req,pageEncodings,formEncodings);
  HTTPSamplerBase sampler=creator.createSampler(req,pageEncodings,formEncodings);
  creator.populateSampler(sampler,req,pageEncodings,formEncodings);
  return sampler;
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\proxy\TestHttpRequestHdr.java",636
1083,"'-tryline","@Test public void testFilter1() throws Exception {
  sampler.setDomain(jakarta.org);
  sampler.setPath(index.jsp);
  assertTrue(Should find jakarta.org/index.jsp,control.filterUrl(sampler));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\proxy\TestProxyControl.java",42
1084,"'-tryline","@Test public void testFilter2() throws Exception {
  sampler.setPath(index.jsp);
  sampler.setDomain(www.apache.org);
  assertFalse(Should not match www.apache.org,control.filterUrl(sampler));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\proxy\TestProxyControl.java",49
1085,"'-tryline","@Test public void testFilter3() throws Exception {
  sampler.setPath(header.gif);
  sampler.setDomain(jakarta.org);
  assertFalse(Should not match header.gif,control.filterUrl(sampler));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\proxy\TestProxyControl.java",56
1086,"'-tryline","@Test public void testContentTypeNoFilters() throws Exception {
  SampleResult result=new SampleResult();
  control.setContentTypeInclude(null);
  control.setContentTypeExclude(null);
  result.setContentType(null);
  assertTrue(Should allow if no content-type present,control.filterContentType(result));
  result.setContentType(text/html; charset=utf-8);
  assertTrue(Should allow text/html,control.filterContentType(result));
  result.setContentType(image/png);
  assertTrue(Should allow image/png,control.filterContentType(result));
  control.setContentTypeInclude();
  control.setContentTypeExclude();
  result.setContentType(null);
  assertTrue(Should allow if no content-type present,control.filterContentType(result));
  result.setContentType(text/html; charset=utf-8);
  assertTrue(Should allow text/html,control.filterContentType(result));
  result.setContentType(image/png);
  assertTrue(Should allow image/png,control.filterContentType(result));
  control.setContentTypeInclude( );
  control.setContentTypeExclude( );
  result.setContentType(null);
  assertTrue(Should allow if no content-type present,control.filterContentType(result));
  result.setContentType(text/html; charset=utf-8);
  assertFalse(Should not allow text/html,control.filterContentType(result));
  result.setContentType(image/png);
  assertFalse(Should not allow image/png,control.filterContentType(result));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\proxy\TestProxyControl.java",63
1087,"'-tryline","@Test public void testContentTypeInclude() throws Exception {
  SampleResult result=new SampleResult();
  control.setContentTypeInclude(text/html|text/ascii);
  result.setContentType(null);
  assertTrue(Should allow if no content-type present,control.filterContentType(result));
  result.setContentType(text/html; charset=utf-8);
  assertTrue(Should allow text/html,control.filterContentType(result));
  result.setContentType(text/css);
  assertFalse(Should not allow text/css,control.filterContentType(result));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\proxy\TestProxyControl.java",100
1088,"'-tryline","@Test public void testContentTypeExclude() throws Exception {
  SampleResult result=new SampleResult();
  control.setContentTypeExclude(text/css);
  result.setContentType(null);
  assertTrue(Should allow if no content-type present,control.filterContentType(result));
  result.setContentType(text/html; charset=utf-8);
  assertTrue(Should allow text/html,control.filterContentType(result));
  result.setContentType(text/css);
  assertFalse(Should not allow text/css,control.filterContentType(result));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\proxy\TestProxyControl.java",113
1089,"'-tryline","@Test public void testContentTypeIncludeAndExclude() throws Exception {
  SampleResult result=new SampleResult();
  control.setContentTypeInclude(text/html|text/ascii);
  control.setContentTypeExclude(text/css);
  result.setContentType(null);
  assertTrue(Should allow if no content-type present,control.filterContentType(result));
  result.setContentType(text/html; charset=utf-8);
  assertTrue(Should allow text/html,control.filterContentType(result));
  result.setContentType(text/css);
  assertFalse(Should not allow text/css,control.filterContentType(result));
  result.setContentType(image/png);
  assertFalse(Should not allow image/png,control.filterContentType(result));
  control.setContentTypeInclude(null);
  control.setContentTypeExclude(image/.*);
  result.setContentType(null);
  assertTrue(Should allow if no content-type present,control.filterContentType(result));
  result.setContentType(text/html; charset=utf-8);
  assertTrue(Should allow text/html,control.filterContentType(result));
  result.setContentType(text/css);
  assertTrue(Should allow text/css,control.filterContentType(result));
  result.setContentType(image/png);
  assertFalse(Should not allow image/png,control.filterContentType(result));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\proxy\TestProxyControl.java",126
1090,"'-tryline","@Test public void testConfiguring() throws Exception {
  HTTPSamplerBase sampler=(HTTPSamplerBase)new HttpTestSampleGui().createTestElement();
  configure(sampler);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\PackageTest.java",34
1091,"'-tryline","private void configure(HTTPSamplerBase sampler) throws Exception {
  sampler.addArgument(arg1,val1);
  ConfigTestElement config=(ConfigTestElement)new HttpDefaultsGui().createTestElement();
  ((Arguments)config.getProperty(HTTPSamplerBase.ARGUMENTS).getObjectValue()).addArgument(new HTTPArgument(config1,configValue));
  config.setRunningVersion(true);
  sampler.setRunningVersion(true);
  sampler.setRunningVersion(true);
  sampler.addTestElement(config);
  assertEquals(config1=configValue,sampler.getArguments().getArgument(1).toString());
  sampler.recoverRunningVersion();
  config.recoverRunningVersion();
  assertEquals(1,sampler.getArguments().getArgumentCount());
  sampler.addTestElement(config);
  assertEquals(config1=configValue,sampler.getArguments().getArgument(1).toString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\PackageTest.java",40
1092,"'-tryline","@BeforeEach public void setUp() throws Exception {
  establishConnection();
  sampler=new HTTPSampler();
  postWriter=new PostWriter();
  TEST_FILE_CONTENT=foo content &?=01234+56789-\u007c\u2aa1\u266a\u0153\u20a1\u0115\u0364\u00c5\u2052.getBytes(UTF_8);
  temporaryFile=File.createTempFile(foo,txt);
  OutputStream output=null;
  try {
    output=new FileOutputStream(temporaryFile);
    output.write(TEST_FILE_CONTENT);
    output.flush();
  }
  finally {
    JOrphanUtils.closeQuietly(output);
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\PostWriterTest.java",64
1093,"'-tryline","@AfterEach public void tearDown() throws Exception {
  if (!temporaryFile.delete()) {
    fail(Could not delete file: + temporaryFile.getAbsolutePath());
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\PostWriterTest.java",86
1094,"'-tryline","@Test public void testSetHeadersWithNoParams() throws Exception {
  URLConnection uc=new NullURLConnection();
  HTTPSampler sampler=new HTTPSampler();
  sampler.setHTTPFiles(new HTTPFileArg[]{new HTTPFileArg(file1,,mime1)});
  PutWriter pw=new PutWriter();
  pw.setHeaders(uc,sampler);
  assertEquals(mime1,uc.getRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\PutWriterTest.java",32
1095,"'-tryline","@Test public void testSetHeadersWithParams() throws Exception {
  URLConnection uc=new NullURLConnection();
  HTTPSampler sampler=new HTTPSampler();
  sampler.setHTTPFiles(new HTTPFileArg[]{new HTTPFileArg(file2,param2,mime2)});
  Arguments arguments=new Arguments();
  arguments.addArgument(new HTTPArgument(,parameter with no name));
  sampler.setArguments(arguments);
  PutWriter pw=new PutWriter();
  pw.setHeaders(uc,sampler);
  assertEquals(mime2,uc.getRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\PutWriterTest.java",44
1096,"'-tryline","@Test void testParameterWithMimeTypeWithCharset() throws Exception {
  HTTPSamplerBase sampler=(HTTPSamplerBase)new HttpTestSampleGui().createTestElement();
  sampler.setThreadContext(jmctx);
  sampler.setDoMultipart(true);
  HttpEntityEnclosingRequestBase post=new HttpPost();
  HTTPArgument argument=new HTTPArgument(upload,some data);
  argument.setContentType(text/html; charset=utf-8);
  sampler.getArguments().addArgument(argument);
  HTTPHC4Impl hc=new HTTPHC4Impl(sampler);
  String requestData=hc.setupHttpEntityEnclosingRequestData(post);
  assertTrue(requestData.contains(charset=utf-8));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPHC4Impl.java",51
1097,"'-tryline","@Test void testFileargWithMimeTypeWithCharset() throws Exception {
  HTTPSamplerBase sampler=(HTTPSamplerBase)new HttpTestSampleGui().createTestElement();
  sampler.setThreadContext(jmctx);
  sampler.setDoMultipart(true);
  HttpEntityEnclosingRequestBase post=new HttpPost();
  HTTPFileArg fileArg=new HTTPFileArg();
  fileArg.setMimeType(text/html; charset=utf-8);
  fileArg.setName(somefile.html);
  fileArg.setParamName(upload);
  File dummyFile=File.createTempFile(somefile,.html);
  dummyFile.deleteOnExit();
  fileArg.setPath(dummyFile.getAbsolutePath());
  sampler.setHTTPFiles(Collections.singletonList(fileArg).toArray(new HTTPFileArg[1]));
  HTTPHC4Impl hc=new HTTPHC4Impl(sampler);
  String requestData=hc.setupHttpEntityEnclosingRequestData(post);
  assertTrue(requestData.contains(charset=utf-8));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPHC4Impl.java",65
1098,"'-tryline","@Test public void testArgumentWithoutEquals() throws Exception {
  HTTPSamplerBase sampler=new HTTPNullSampler();
  sampler.setProtocol(http);
  sampler.setMethod(HTTPConstants.GET);
  sampler.setPath(/index.html?pear);
  sampler.setDomain(www.apache.org);
  assertEquals(http://www.apache.org/index.html?pear,sampler.getUrl().toString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplers.java",110
1099,"'-tryline","@Test public void testMakingUrl() throws Exception {
  HTTPSamplerBase config=new HTTPNullSampler();
  config.setProtocol(http);
  config.setMethod(HTTPConstants.GET);
  config.addArgument(param1,value1);
  config.setPath(/index.html);
  config.setDomain(www.apache.org);
  assertEquals(http://www.apache.org/index.html?param1=value1,config.getUrl().toString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplers.java",120
1100,"'-tryline","@Test public void testRedirect() throws Exception {
  HTTPSamplerBase config=new HTTPNullSampler();
  config.setProtocol(http);
  config.setMethod(HTTPConstants.GET);
  config.setDomain(192.168.0.1);
  HTTPSampleResult res=new HTTPSampleResult();
  res.sampleStart();
  res.setURL(config.getUrl());
  res.setResponseCode(301);
  res.sampleEnd();
  res.setRedirectLocation(./);
  config.followRedirects(res,0);
  assertEquals(http://192.168.0.1/,config.getUrl().toString());
  res.setRedirectLocation(.);
  config.followRedirects(res,0);
  assertEquals(http://192.168.0.1/,config.getUrl().toString());
  res.setRedirectLocation(../);
  config.followRedirects(res,0);
  assertEquals(http://192.168.0.1/,config.getUrl().toString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplers.java",131
1101,"'-tryline","@Test public void testMakingUrl2() throws Exception {
  HTTPSamplerBase config=new HTTPNullSampler();
  config.setProtocol(http);
  config.setMethod(HTTPConstants.GET);
  config.addArgument(param1,value1);
  config.setPath(/index.html?p1=p2);
  config.setDomain(192.168.0.1);
  assertEquals(http://192.168.0.1/index.html?param1=value1&p1=p2,config.getUrl().toString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplers.java",156
1102,"'-tryline","@Test public void testMakingUrl3() throws Exception {
  HTTPSamplerBase config=new HTTPNullSampler();
  config.setProtocol(http);
  config.setMethod(HTTPConstants.POST);
  config.addArgument(param1,value1);
  config.setPath(/index.html?p1=p2);
  config.setDomain(192.168.0.1);
  assertEquals(http://192.168.0.1/index.html?p1=p2,config.getUrl().toString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplers.java",167
1103,"'-tryline","@Test public void testMakingUrl4() throws Exception {
  HTTPSamplerBase config=new HTTPNullSampler();
  config.setProtocol(http);
  config.setMethod(HTTPConstants.GET);
  config.addArgument(param1,value1,=);
  config.setPath(/index.html);
  config.setDomain(192.168.0.1);
  assertEquals(http://192.168.0.1/index.html?param1=value1,config.getUrl().toString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplers.java",181
1104,"'-tryline","@Test public void testMakingUrl5() throws Exception {
  HTTPSamplerBase config=new HTTPNullSampler();
  config.setProtocol(http);
  config.setMethod(HTTPConstants.GET);
  config.addArgument(param1,,=);
  config.setPath(/index.html);
  config.setDomain(192.168.0.1);
  assertEquals(http://192.168.0.1/index.html?param1=,config.getUrl().toString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplers.java",192
1105,"'-tryline","@Test public void testMakingUrl6() throws Exception {
  HTTPSamplerBase config=new HTTPNullSampler();
  config.setProtocol(http);
  config.setMethod(HTTPConstants.GET);
  config.addArgument(param1,,);
  config.setPath(/index.html);
  config.setDomain(192.168.0.1);
  assertEquals(http://192.168.0.1/index.html?param1,config.getUrl().toString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplers.java",203
1106,"'-tryline","@Test public void testMakingUrl7() throws Exception {
  HTTPSamplerBase config=new HTTPNullSampler();
  config.setProtocol(http);
  config.setMethod(HTTPConstants.GET);
  config.parseArguments(param1=value1);
  config.setPath(/index.html);
  config.setDomain(192.168.0.1);
  assertEquals(http://192.168.0.1/index.html?param1=value1,config.getUrl().toString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplers.java",217
1107,"'-tryline","@Test public void testMakingUrl8() throws Exception {
  HTTPSamplerBase config=new HTTPNullSampler();
  config.setProtocol(http);
  config.setMethod(HTTPConstants.GET);
  config.parseArguments(param1=);
  config.setPath(/index.html);
  config.setDomain(192.168.0.1);
  assertEquals(http://192.168.0.1/index.html?param1=,config.getUrl().toString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplers.java",228
1108,"'-tryline","@Test public void testMakingUrl9() throws Exception {
  HTTPSamplerBase config=new HTTPNullSampler();
  config.setProtocol(http);
  config.setMethod(HTTPConstants.GET);
  config.parseArguments(param1);
  config.setPath(/index.html);
  config.setDomain(192.168.0.1);
  assertEquals(http://192.168.0.1/index.html?param1,config.getUrl().toString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplers.java",239
1109,"'-tryline","@Test public void testMakingUrl10() throws Exception {
  HTTPSamplerBase config=new HTTPNullSampler();
  config.setProtocol(http);
  config.setMethod(HTTPConstants.GET);
  config.parseArguments();
  config.setPath(/index.html);
  config.setDomain(192.168.0.1);
  assertEquals(http://192.168.0.1/index.html,config.getUrl().toString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplers.java",250
1110,"'-tryline","@Override protected void setUp() throws Exception {
  httpServer=TestHTTPMirrorThread.startHttpMirror(MIRROR_PORT);
  TEST_FILE_CONTENT=some foo content &?=01234+56789-\u007c\u2aa1\u266a\u0153\u20a1\u0115\u0364\u00c5\u2052\uc385%C3%85.getBytes(StandardCharsets.UTF_8);
  temporaryFile=File.createTempFile(TestHTTPSamplersAgainstHttpMirrorServer,tmp);
  OutputStream output=new FileOutputStream(temporaryFile);
  output.write(TEST_FILE_CONTENT);
  output.flush();
  output.close();
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",110
1111,"'-tryline","public void itemised_testPostRequest_UrlEncoded() throws Exception {
  testPostRequest_UrlEncoded(HTTP_SAMPLER,ISO_8859_1,item);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",138
1112,"'-tryline","public void itemised_testPostRequest_UrlEncoded3() throws Exception {
  testPostRequest_UrlEncoded(HTTP_SAMPLER3,US_ASCII,item);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",142
1113,"'-tryline","public void testPostRequest_FormMultipart_0() throws Exception {
  testPostRequest_FormMultipart(HTTP_SAMPLER,ISO_8859_1);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",146
1114,"'-tryline","public void testPostRequest_FormMultipart3() throws Exception {
  testPostRequest_FormMultipart(HTTP_SAMPLER3,US_ASCII);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",150
1115,"'-tryline","public void testPostRequest_FileUpload() throws Exception {
  testPostRequest_FileUpload(HTTP_SAMPLER,ISO_8859_1);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",155
1116,"'-tryline","public void testPostRequest_FileUpload3() throws Exception {
  testPostRequest_FileUpload(HTTP_SAMPLER3,US_ASCII);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",159
1117,"'-tryline","public void testPostRequest_BodyFromParameterValues() throws Exception {
  testPostRequest_BodyFromParameterValues(HTTP_SAMPLER,ISO_8859_1);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",164
1118,"'-tryline","public void testPostRequest_BodyFromParameterValues3() throws Exception {
  testPostRequest_BodyFromParameterValues(HTTP_SAMPLER3,US_ASCII);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",168
1119,"'-tryline","public void testGetRequest() throws Exception {
  testGetRequest(HTTP_SAMPLER);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",172
1120,"'-tryline","public void testGetRequest3() throws Exception {
  testGetRequest(HTTP_SAMPLER3);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",176
1121,"'-tryline","public void itemised_testGetRequest_Parameters() throws Exception {
  testGetRequest_Parameters(HTTP_SAMPLER,item);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",180
1122,"'-tryline","public void itemised_testGetRequest_Parameters3() throws Exception {
  testGetRequest_Parameters(HTTP_SAMPLER3,item);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",184
1123,"'-tryline","public void testPutRequest_BodyFromParameterValues3() throws Exception {
  testPutRequest_BodyFromParameterValues(HTTP_SAMPLER3,US_ASCII);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",188
1124,"'-tryline","private void testPutRequest_BodyFromParameterValues(int samplerType,String samplerDefaultEncoding) throws Exception {
  final String titleField=titleKey;
  String titleValue=mytitle;
  final String descriptionField=descriptionKey;
  String descriptionValue=mydescription;
  HTTPSamplerBase sampler=createHttpSampler(samplerType);
  String contentEncoding=;
  setupUrl(sampler,contentEncoding);
  sampler.setMethod(HTTPConstants.PUT);
  setupFormData(sampler,false,titleField,titleValue,descriptionField,descriptionValue);
  ((HTTPArgument)sampler.getArguments().getArgument(0)).setAlwaysEncoded(false);
  ((HTTPArgument)sampler.getArguments().getArgument(1)).setAlwaysEncoded(false);
  HTTPSampleResult res=executeSampler(sampler);
  String expectedPostBody=titleField + = + titleValue+ &+ descriptionField+ =+ descriptionValue;
  checkPostRequestBody(sampler,res,samplerDefaultEncoding,contentEncoding,expectedPostBody,HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",192
1125,"'-tryline","private void testPostRequest_UrlEncoded(int samplerType,String samplerDefaultEncoding,int test) throws Exception {
  String titleField=title;
  String titleValue=mytitle;
  String descriptionField=description;
  String descriptionValue=mydescription;
  HTTPSamplerBase sampler=createHttpSampler(samplerType);
  HTTPSampleResult res;
  String contentEncoding;
switch (test) {
case 0:
    contentEncoding=;
  setupUrl(sampler,contentEncoding);
setupFormData(sampler,false,titleField,titleValue,descriptionField,descriptionValue);
res=executeSampler(sampler);
checkPostRequestUrlEncoded(sampler,res,samplerDefaultEncoding,contentEncoding,titleField,titleValue,descriptionField,descriptionValue,false);
break;
case 1:
contentEncoding=ISO_8859_1;
setupUrl(sampler,contentEncoding);
setupFormData(sampler,false,titleField,titleValue,descriptionField,descriptionValue);
res=executeSampler(sampler);
checkPostRequestUrlEncoded(sampler,res,samplerDefaultEncoding,contentEncoding,titleField,titleValue,descriptionField,descriptionValue,false);
break;
case 2:
contentEncoding=UTF-8;
titleValue=mytitle2\u0153\u20a1\u0115\u00c5;
descriptionValue=mydescription2\u0153\u20a1\u0115\u00c5;
setupUrl(sampler,contentEncoding);
setupFormData(sampler,false,titleField,titleValue,descriptionField,descriptionValue);
res=executeSampler(sampler);
checkPostRequestUrlEncoded(sampler,res,samplerDefaultEncoding,contentEncoding,titleField,titleValue,descriptionField,descriptionValue,false);
break;
case 3:
contentEncoding=UTF-8;
titleValue=mytitle3/=;
descriptionValue=mydescription3   /\\;
setupUrl(sampler,contentEncoding);
setupFormData(sampler,false,titleField,titleValue,descriptionField,descriptionValue);
res=executeSampler(sampler);
checkPostRequestUrlEncoded(sampler,res,samplerDefaultEncoding,contentEncoding,titleField,titleValue,descriptionField,descriptionValue,false);
break;
case 4:
contentEncoding=UTF-8;
titleValue=mytitle4%2F%3D;
descriptionValue=mydescription4+++%2F%5C;
setupUrl(sampler,contentEncoding);
setupFormData(sampler,true,titleField,titleValue,descriptionField,descriptionValue);
res=executeSampler(sampler);
checkPostRequestUrlEncoded(sampler,res,samplerDefaultEncoding,contentEncoding,titleField,titleValue,descriptionField,descriptionValue,true);
break;
case 5:
contentEncoding=UTF-8;
titleValue=/wEPDwULLTE2MzM2OTA0NTYPZBYCAgMPZ/rA+8DZ2dnZ2dnZ2d/GNDar6OshPwdJc=;
descriptionValue=mydescription5;
setupUrl(sampler,contentEncoding);
setupFormData(sampler,false,titleField,titleValue,descriptionField,descriptionValue);
res=executeSampler(sampler);
checkPostRequestUrlEncoded(sampler,res,samplerDefaultEncoding,contentEncoding,titleField,titleValue,descriptionField,descriptionValue,false);
break;
case 6:
contentEncoding=UTF-8;
titleValue=%2FwEPDwULLTE2MzM2OTA0NTYPZBYCAgMPZ%2FrA%2B8DZ2dnZ2dnZ2d%2FGNDar6OshPwdJc%3D;
descriptionValue=mydescription6;
setupUrl(sampler,contentEncoding);
setupFormData(sampler,false,titleField,titleValue,descriptionField,descriptionValue);
((HTTPArgument)sampler.getArguments().getArgument(0)).setAlwaysEncoded(false);
((HTTPArgument)sampler.getArguments().getArgument(1)).setAlwaysEncoded(false);
res=executeSampler(sampler);
assertFalse(((HTTPArgument)sampler.getArguments().getArgument(0)).isAlwaysEncoded());
assertFalse(((HTTPArgument)sampler.getArguments().getArgument(1)).isAlwaysEncoded());
checkPostRequestUrlEncoded(sampler,res,samplerDefaultEncoding,contentEncoding,titleField,titleValue,descriptionField,descriptionValue,true);
break;
case 7:
JMeterUtils.setLocale(Locale.ENGLISH);
TestPlan testPlan=new TestPlan();
JMeterVariables vars=new JMeterVariables();
vars.put(title_prefix,a test\u00c5);
vars.put(description_suffix,the_end);
JMeterContextService.getContext().setVariables(vars);
JMeterContextService.getContext().setSamplingStarted(true);
ValueReplacer replacer=new ValueReplacer();
replacer.setUserDefinedVariables(testPlan.getUserDefinedVariables());
contentEncoding=UTF-8;
titleValue=${title_prefix}mytitle7\u0153\u20a1\u0115\u00c5;
descriptionValue=mydescription7\u0153\u20a1\u0115\u00c5${description_suffix};
setupUrl(sampler,contentEncoding);
setupFormData(sampler,false,titleField,titleValue,descriptionField,descriptionValue);
replacer.replaceValues(sampler);
res=executeSampler(sampler);
String expectedTitleValue=a test\u00c5mytitle7\u0153\u20a1\u0115\u00c5;
String expectedDescriptionValue=mydescription7\u0153\u20a1\u0115\u00c5the_end;
checkPostRequestUrlEncoded(sampler,res,samplerDefaultEncoding,contentEncoding,titleField,expectedTitleValue,descriptionField,expectedDescriptionValue,false);
break;
case 8:
break;
case 9:
break;
case 10:
break;
default :
fail(Unexpected switch value:  + test);
}
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",214
1126,"'-tryline","private void testPostRequest_FormMultipart(int samplerType,String samplerDefaultEncoding) throws Exception {
  String titleField=title;
  String titleValue=mytitle;
  String descriptionField=description;
  String descriptionValue=mydescription;
  HTTPSamplerBase sampler=createHttpSampler(samplerType);
  String contentEncoding=;
  setupUrl(sampler,contentEncoding);
  setupFormData(sampler,false,titleField,titleValue,descriptionField,descriptionValue);
  sampler.setDoMultipart(true);
  HTTPSampleResult res=executeSampler(sampler);
  checkPostRequestFormMultipart(sampler,res,samplerDefaultEncoding,contentEncoding,titleField,titleValue,descriptionField,descriptionValue);
  sampler=createHttpSampler(samplerType);
  contentEncoding=ISO_8859_1;
  setupUrl(sampler,contentEncoding);
  setupFormData(sampler,false,titleField,titleValue,descriptionField,descriptionValue);
  sampler.setDoMultipart(true);
  res=executeSampler(sampler);
  checkPostRequestFormMultipart(sampler,res,samplerDefaultEncoding,contentEncoding,titleField,titleValue,descriptionField,descriptionValue);
  sampler=createHttpSampler(samplerType);
  contentEncoding=UTF-8;
  titleValue=mytitle\u0153\u20a1\u0115\u00c5;
  descriptionValue=mydescription\u0153\u20a1\u0115\u00c5;
  setupUrl(sampler,contentEncoding);
  setupFormData(sampler,false,titleField,titleValue,descriptionField,descriptionValue);
  sampler.setDoMultipart(true);
  res=executeSampler(sampler);
  checkPostRequestFormMultipart(sampler,res,samplerDefaultEncoding,contentEncoding,titleField,titleValue,descriptionField,descriptionValue);
  sampler=createHttpSampler(samplerType);
  contentEncoding=UTF-8;
  titleValue=mytitle/=;
  descriptionValue=mydescription   /\\;
  setupUrl(sampler,contentEncoding);
  setupFormData(sampler,false,titleField,titleValue,descriptionField,descriptionValue);
  sampler.setDoMultipart(true);
  res=executeSampler(sampler);
  checkPostRequestFormMultipart(sampler,res,samplerDefaultEncoding,contentEncoding,titleField,titleValue,descriptionField,descriptionValue);
  sampler=createHttpSampler(samplerType);
  contentEncoding=UTF-8;
  titleValue=mytitle%2F%3D;
  descriptionValue=mydescription+++%2F%5C;
  setupUrl(sampler,contentEncoding);
  setupFormData(sampler,true,titleField,titleValue,descriptionField,descriptionValue);
  sampler.setDoMultipart(true);
  res=executeSampler(sampler);
  String expectedTitleValue=mytitle/=;
  String expectedDescriptionValue=mydescription   /\\;
  checkPostRequestFormMultipart(sampler,res,samplerDefaultEncoding,contentEncoding,titleField,expectedTitleValue,descriptionField,expectedDescriptionValue);
  sampler=createHttpSampler(samplerType);
  contentEncoding=UTF-8;
  titleValue=/wEPDwULLTE2MzM2OTA0NTYPZBYCAgMPZ/rA+8DZ2dnZ2dnZ2d/GNDar6OshPwdJc=;
  descriptionValue=mydescription;
  setupUrl(sampler,contentEncoding);
  setupFormData(sampler,false,titleField,titleValue,descriptionField,descriptionValue);
  sampler.setDoMultipart(true);
  res=executeSampler(sampler);
  checkPostRequestFormMultipart(sampler,res,samplerDefaultEncoding,contentEncoding,titleField,titleValue,descriptionField,descriptionValue);
  JMeterUtils.setLocale(Locale.ENGLISH);
  TestPlan testPlan=new TestPlan();
  JMeterVariables vars=new JMeterVariables();
  vars.put(title_prefix,a test\u00c5);
  vars.put(description_suffix,the_end);
  JMeterContextService.getContext().setVariables(vars);
  JMeterContextService.getContext().setSamplingStarted(true);
  ValueReplacer replacer=new ValueReplacer();
  replacer.setUserDefinedVariables(testPlan.getUserDefinedVariables());
  sampler=createHttpSampler(samplerType);
  contentEncoding=UTF-8;
  titleValue=${title_prefix}mytitle\u0153\u20a1\u0115\u00c5;
  descriptionValue=mydescription\u0153\u20a1\u0115\u00c5${description_suffix};
  setupUrl(sampler,contentEncoding);
  setupFormData(sampler,false,titleField,titleValue,descriptionField,descriptionValue);
  sampler.setDoMultipart(true);
  replacer.replaceValues(sampler);
  res=executeSampler(sampler);
  expectedTitleValue=a test\u00c5mytitle\u0153\u20a1\u0115\u00c5;
  expectedDescriptionValue=mydescription\u0153\u20a1\u0115\u00c5the_end;
  checkPostRequestFormMultipart(sampler,res,samplerDefaultEncoding,contentEncoding,titleField,expectedTitleValue,descriptionField,expectedDescriptionValue);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",348
1127,"'-tryline","private void testPostRequest_FileUpload(int samplerType,String samplerDefaultEncoding) throws Exception {
  String titleField=title;
  String titleValue=mytitle;
  String descriptionField=description;
  String descriptionValue=mydescription;
  String fileField=file1;
  String fileMimeType=CONTENT_TYPE_TEXT_PLAIN;
  HTTPSamplerBase sampler=createHttpSampler(samplerType);
  String contentEncoding=;
  setupUrl(sampler,contentEncoding);
  setupFileUploadData(sampler,false,titleField,titleValue,descriptionField,descriptionValue,fileField,temporaryFile,fileMimeType);
  HTTPSampleResult res=executeSampler(sampler);
  checkPostRequestFileUpload(sampler,res,samplerDefaultEncoding,contentEncoding,titleField,titleValue,descriptionField,descriptionValue,fileField,temporaryFile,fileMimeType,TEST_FILE_CONTENT);
  sampler=createHttpSampler(samplerType);
  contentEncoding=ISO_8859_1;
  setupUrl(sampler,contentEncoding);
  setupFileUploadData(sampler,false,titleField,titleValue,descriptionField,descriptionValue,fileField,temporaryFile,fileMimeType);
  res=executeSampler(sampler);
  checkPostRequestFileUpload(sampler,res,samplerDefaultEncoding,contentEncoding,titleField,titleValue,descriptionField,descriptionValue,fileField,temporaryFile,fileMimeType,TEST_FILE_CONTENT);
  sampler=createHttpSampler(samplerType);
  contentEncoding=UTF-8;
  titleValue=mytitle\u0153\u20a1\u0115\u00c5;
  descriptionValue=mydescription\u0153\u20a1\u0115\u00c5;
  setupUrl(sampler,contentEncoding);
  setupFileUploadData(sampler,false,titleField,titleValue,descriptionField,descriptionValue,fileField,temporaryFile,fileMimeType);
  res=executeSampler(sampler);
  checkPostRequestFileUpload(sampler,res,samplerDefaultEncoding,contentEncoding,titleField,titleValue,descriptionField,descriptionValue,fileField,temporaryFile,fileMimeType,TEST_FILE_CONTENT);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",460
1128,"'-tryline","private void testPostRequest_BodyFromParameterValues(int samplerType,String samplerDefaultEncoding) throws Exception {
  final String titleField=;
  String titleValue=mytitle;
  final String descriptionField=;
  String descriptionValue=mydescription;
  HTTPSamplerBase sampler=createHttpSampler(samplerType);
  setupUrl(sampler,);
  setupFormData(sampler,false,titleField,titleValue,descriptionField,descriptionValue);
  ((HTTPArgument)sampler.getArguments().getArgument(0)).setAlwaysEncoded(false);
  ((HTTPArgument)sampler.getArguments().getArgument(1)).setAlwaysEncoded(false);
  HTTPSampleResult res=executeSampler(sampler);
  String expectedPostBody=titleValue + descriptionValue;
  checkPostRequestBody(sampler,res,samplerDefaultEncoding,,expectedPostBody,CONTENT_TYPE_TEXT_PLAIN);
  sampler=createHttpSampler(samplerType);
  String contentEncoding=ISO_8859_1;
  setupUrl(sampler,contentEncoding);
  setupFormData(sampler,false,titleField,titleValue,descriptionField,descriptionValue);
  ((HTTPArgument)sampler.getArguments().getArgument(0)).setAlwaysEncoded(false);
  ((HTTPArgument)sampler.getArguments().getArgument(1)).setAlwaysEncoded(false);
  res=executeSampler(sampler);
  expectedPostBody=titleValue + descriptionValue;
  checkPostRequestBody(sampler,res,samplerDefaultEncoding,contentEncoding,expectedPostBody,CONTENT_TYPE_TEXT_PLAIN);
  sampler=createHttpSampler(samplerType);
  contentEncoding=UTF-8;
  titleValue=mytitle\u0153\u20a1\u0115\u00c5;
  descriptionValue=mydescription\u0153\u20a1\u0115\u00c5;
  setupUrl(sampler,contentEncoding);
  setupFormData(sampler,false,titleField,titleValue,descriptionField,descriptionValue);
  ((HTTPArgument)sampler.getArguments().getArgument(0)).setAlwaysEncoded(false);
  ((HTTPArgument)sampler.getArguments().getArgument(1)).setAlwaysEncoded(false);
  res=executeSampler(sampler);
  expectedPostBody=titleValue + descriptionValue;
  checkPostRequestBody(sampler,res,samplerDefaultEncoding,contentEncoding,expectedPostBody,CONTENT_TYPE_TEXT_PLAIN);
  sampler=createHttpSampler(samplerType);
  contentEncoding=UTF-8;
  titleValue=mytitle/=;
  descriptionValue=mydescription   /\\;
  setupUrl(sampler,contentEncoding);
  setupFormData(sampler,false,titleField,titleValue,descriptionField,descriptionValue);
  ((HTTPArgument)sampler.getArguments().getArgument(0)).setAlwaysEncoded(false);
  ((HTTPArgument)sampler.getArguments().getArgument(1)).setAlwaysEncoded(false);
  res=executeSampler(sampler);
  expectedPostBody=titleValue + descriptionValue;
  checkPostRequestBody(sampler,res,samplerDefaultEncoding,contentEncoding,expectedPostBody,CONTENT_TYPE_TEXT_PLAIN);
  sampler=createHttpSampler(samplerType);
  contentEncoding=UTF-8;
  titleValue=mytitle/=;
  descriptionValue=mydescription   /\\;
  setupUrl(sampler,contentEncoding);
  setupFormData(sampler,true,titleField,titleValue,descriptionField,descriptionValue);
  res=executeSampler(sampler);
  expectedPostBody=URLEncoder.encode(titleValue + descriptionValue,contentEncoding);
  checkPostRequestBody(sampler,res,samplerDefaultEncoding,contentEncoding,expectedPostBody,CONTENT_TYPE_TEXT_PLAIN);
  sampler=createHttpSampler(samplerType);
  contentEncoding=UTF-8;
  titleValue=mytitle%2F%3D;
  descriptionValue=mydescription+++%2F%5C;
  setupUrl(sampler,contentEncoding);
  setupFormData(sampler,false,titleField,titleValue,descriptionField,descriptionValue);
  ((HTTPArgument)sampler.getArguments().getArgument(0)).setAlwaysEncoded(false);
  ((HTTPArgument)sampler.getArguments().getArgument(1)).setAlwaysEncoded(false);
  res=executeSampler(sampler);
  expectedPostBody=titleValue + descriptionValue;
  checkPostRequestBody(sampler,res,samplerDefaultEncoding,contentEncoding,expectedPostBody,CONTENT_TYPE_TEXT_PLAIN);
  sampler=createHttpSampler(samplerType);
  contentEncoding=UTF-8;
  titleValue=mytitle%2F%3D;
  descriptionValue=mydescription+++%2F%5C;
  setupUrl(sampler,contentEncoding);
  setupFormData(sampler,true,titleField,titleValue,descriptionField,descriptionValue);
  res=executeSampler(sampler);
  expectedPostBody=titleValue + descriptionValue;
  checkPostRequestBody(sampler,res,samplerDefaultEncoding,contentEncoding,expectedPostBody,CONTENT_TYPE_TEXT_PLAIN);
  sampler=createHttpSampler(samplerType);
  contentEncoding=UTF-8;
  titleValue=/wEPDwULLTE2MzM2OTA0NTYPZBYCAgMPZ/rA+8DZ2dnZ2dnZ2d/GNDar6OshPwdJc=;
  descriptionValue=mydescription;
  setupUrl(sampler,contentEncoding);
  setupFormData(sampler,false,titleField,titleValue,descriptionField,descriptionValue);
  ((HTTPArgument)sampler.getArguments().getArgument(0)).setAlwaysEncoded(false);
  ((HTTPArgument)sampler.getArguments().getArgument(1)).setAlwaysEncoded(false);
  res=executeSampler(sampler);
  expectedPostBody=titleValue + descriptionValue;
  checkPostRequestBody(sampler,res,samplerDefaultEncoding,contentEncoding,expectedPostBody,CONTENT_TYPE_TEXT_PLAIN);
  sampler=createHttpSampler(samplerType);
  contentEncoding=UTF-8;
  titleValue=mytitle++;
  descriptionValue=mydescription+;
  setupUrl(sampler,contentEncoding);
  setupFormData(sampler,false,titleField,titleValue,descriptionField,descriptionValue);
  ((HTTPArgument)sampler.getArguments().getArgument(0)).setAlwaysEncoded(false);
  ((HTTPArgument)sampler.getArguments().getArgument(1)).setAlwaysEncoded(false);
  res=executeSampler(sampler);
  expectedPostBody=titleValue + descriptionValue;
  checkPostRequestBody(sampler,res,samplerDefaultEncoding,contentEncoding,expectedPostBody,CONTENT_TYPE_TEXT_PLAIN);
  JMeterUtils.setLocale(Locale.ENGLISH);
  TestPlan testPlan=new TestPlan();
  JMeterVariables vars=new JMeterVariables();
  vars.put(title_prefix,a test\u00c5);
  vars.put(description_suffix,the_end);
  JMeterContextService.getContext().setVariables(vars);
  JMeterContextService.getContext().setSamplingStarted(true);
  ValueReplacer replacer=new ValueReplacer();
  replacer.setUserDefinedVariables(testPlan.getUserDefinedVariables());
  sampler=createHttpSampler(samplerType);
  contentEncoding=UTF-8;
  titleValue=${title_prefix}mytitle\u0153\u20a1\u0115\u00c5;
  descriptionValue=mydescription\u0153\u20a1\u0115\u00c5${description_suffix};
  setupUrl(sampler,contentEncoding);
  setupFormData(sampler,false,titleField,titleValue,descriptionField,descriptionValue);
  ((HTTPArgument)sampler.getArguments().getArgument(0)).setAlwaysEncoded(false);
  ((HTTPArgument)sampler.getArguments().getArgument(1)).setAlwaysEncoded(false);
  replacer.replaceValues(sampler);
  res=executeSampler(sampler);
  String expectedTitleValue=a test\u00c5mytitle\u0153\u20a1\u0115\u00c5;
  String expectedDescriptionValue=mydescription\u0153\u20a1\u0115\u00c5the_end;
  expectedPostBody=expectedTitleValue + expectedDescriptionValue;
  checkPostRequestBody(sampler,res,samplerDefaultEncoding,contentEncoding,expectedPostBody,CONTENT_TYPE_TEXT_PLAIN);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",510
1129,"'-tryline","private void testGetRequest(int samplerType) throws Exception {
  HTTPSamplerBase sampler=createHttpSampler(samplerType);
  String contentEncoding=;
  setupUrl(sampler,contentEncoding);
  sampler.setMethod(HTTPConstants.GET);
  HTTPSampleResult res=executeSampler(sampler);
  checkGetRequest(sampler,res);
  sampler=createHttpSampler(samplerType);
  contentEncoding=ISO_8859_1;
  setupUrl(sampler,contentEncoding);
  sampler.setMethod(HTTPConstants.GET);
  res=executeSampler(sampler);
  checkGetRequest(sampler,res);
  sampler=createHttpSampler(samplerType);
  contentEncoding=UTF-8;
  setupUrl(sampler,contentEncoding);
  sampler.setMethod(HTTPConstants.GET);
  res=executeSampler(sampler);
  checkGetRequest(sampler,res);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",661
1130,"'-tryline","private void testGetRequest_Parameters(int samplerType,int test) throws Exception {
  String titleField=title;
  String titleValue=mytitle;
  String descriptionField=description;
  String descriptionValue=mydescription;
  HTTPSamplerBase sampler=createHttpSampler(samplerType);
  String contentEncoding;
  HTTPSampleResult res;
  URL executedUrl;
switch (test) {
case 0:
    contentEncoding=;
  setupUrl(sampler,contentEncoding);
sampler.setMethod(HTTPConstants.GET);
setupFormData(sampler,false,titleField,titleValue,descriptionField,descriptionValue);
res=executeSampler(sampler);
sampler.setRunningVersion(true);
executedUrl=sampler.getUrl();
sampler.setRunningVersion(false);
checkGetRequest_Parameters(sampler,res,contentEncoding,executedUrl,titleField,titleValue,descriptionField,descriptionValue,false);
break;
case 1:
sampler=createHttpSampler(samplerType);
contentEncoding=ISO_8859_1;
titleValue=mytitle1\uc385;
descriptionValue=mydescription1\uc385;
setupUrl(sampler,contentEncoding);
sampler.setMethod(HTTPConstants.GET);
setupFormData(sampler,false,titleField,titleValue,descriptionField,descriptionValue);
res=executeSampler(sampler);
sampler.setRunningVersion(true);
executedUrl=sampler.getUrl();
sampler.setRunningVersion(false);
checkGetRequest_Parameters(sampler,res,contentEncoding,executedUrl,titleField,titleValue,descriptionField,descriptionValue,false);
break;
case 2:
sampler=createHttpSampler(samplerType);
contentEncoding=UTF-8;
titleValue=mytitle2\u0153\u20a1\u0115\u00c5;
descriptionValue=mydescription2\u0153\u20a1\u0115\u00c5;
setupUrl(sampler,contentEncoding);
sampler.setMethod(HTTPConstants.GET);
setupFormData(sampler,false,titleField,titleValue,descriptionField,descriptionValue);
res=executeSampler(sampler);
sampler.setRunningVersion(true);
executedUrl=sampler.getUrl();
sampler.setRunningVersion(false);
checkGetRequest_Parameters(sampler,res,contentEncoding,executedUrl,titleField,titleValue,descriptionField,descriptionValue,false);
break;
case 3:
sampler=createHttpSampler(samplerType);
contentEncoding=UTF-8;
titleValue=mytitle3\u0153+\u20a1 \u0115&yes\u00c5;
descriptionValue=mydescription3 \u0153 \u20a1 \u0115 \u00c5;
setupUrl(sampler,contentEncoding);
sampler.setMethod(HTTPConstants.GET);
setupFormData(sampler,false,titleField,titleValue,descriptionField,descriptionValue);
res=executeSampler(sampler);
sampler.setRunningVersion(true);
executedUrl=sampler.getUrl();
sampler.setRunningVersion(false);
checkGetRequest_Parameters(sampler,res,contentEncoding,executedUrl,titleField,titleValue,descriptionField,descriptionValue,false);
break;
case 4:
sampler=createHttpSampler(samplerType);
contentEncoding=UTF-8;
titleValue=mytitle4%2F%3D;
descriptionValue=mydescription4+++%2F%5C;
setupUrl(sampler,contentEncoding);
sampler.setMethod(HTTPConstants.GET);
setupFormData(sampler,true,titleField,titleValue,descriptionField,descriptionValue);
res=executeSampler(sampler);
sampler.setRunningVersion(true);
executedUrl=sampler.getUrl();
sampler.setRunningVersion(false);
checkGetRequest_Parameters(sampler,res,contentEncoding,executedUrl,titleField,titleValue,descriptionField,descriptionValue,true);
break;
case 5:
JMeterUtils.setLocale(Locale.ENGLISH);
TestPlan testPlan=new TestPlan();
JMeterVariables vars=new JMeterVariables();
vars.put(title_prefix,a test\u00c5);
vars.put(description_suffix,the_end);
JMeterContextService.getContext().setVariables(vars);
JMeterContextService.getContext().setSamplingStarted(true);
ValueReplacer replacer=new ValueReplacer();
replacer.setUserDefinedVariables(testPlan.getUserDefinedVariables());
sampler=createHttpSampler(samplerType);
contentEncoding=UTF-8;
titleValue=${title_prefix}mytitle5\u0153\u20a1\u0115\u00c5;
descriptionValue=mydescription5\u0153\u20a1\u0115\u00c5${description_suffix};
setupUrl(sampler,contentEncoding);
sampler.setMethod(HTTPConstants.GET);
setupFormData(sampler,false,titleField,titleValue,descriptionField,descriptionValue);
replacer.replaceValues(sampler);
res=executeSampler(sampler);
String expectedTitleValue=a test\u00c5mytitle5\u0153\u20a1\u0115\u00c5;
String expectedDescriptionValue=mydescription5\u0153\u20a1\u0115\u00c5the_end;
sampler.setRunningVersion(true);
executedUrl=sampler.getUrl();
sampler.setRunningVersion(false);
checkGetRequest_Parameters(sampler,res,contentEncoding,executedUrl,titleField,expectedTitleValue,descriptionField,expectedDescriptionValue,false);
break;
case 6:
break;
case 7:
break;
case 8:
break;
case 9:
break;
case 10:
break;
default :
fail(Unexpected switch value:  + test);
}
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",688
1131,"'-tryline","@Test public void testIsFiltered() throws Exception {
  Map<String,CookieManager> cm=new ConcurrentHashMap<>();
  Set<CookieManager> inUse=Collections.synchronizedSet(new HashSet<CookieManager>());
  SessionFilter filter=new SessionFilter(cm,inUse);
  HTTPSampler sampler=new HTTPSampler();
  filter.isFiltered(1.2.3.4 ...,sampler);
  assertSame(cm.get(1.2.3.4),sampler.getCookieManager());
  assertTrue(inUse.contains(sampler.getCookieManager()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\util\accesslog\TestSessionFilter.java",65
1132,"'-tryline","@Test public void testConstruct() throws Exception {
  TCLogParser tcp;
  tcp=new TCLogParser();
  assertNull(Should not have set the filename,tcp.FILENAME);
  String file=testfiles/access.log;
  tcp=new TCLogParser(file);
  assertEquals(Filename should have been saved,file,tcp.FILENAME);
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\util\accesslog\TestTCLogParser.java",36
1133,"'-tryline","@Test public void testcleanURL() throws Exception {
  String res=tclp.cleanURL(URL1);
  assertEquals(/addrbook/,res);
  assertNull(tclp.stripFile(res,new HTTPNullSampler()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\util\accesslog\TestTCLogParser.java",47
1134,"'-tryline","@Test public void testcheckURL() throws Exception {
  assertFalse(URL does not have a query,tclp.checkURL(URL1));
  assertTrue(URL is a query,tclp.checkURL(URL2));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\util\accesslog\TestTCLogParser.java",54
1135,"'-tryline","@Test public void testHEAD() throws Exception {
  String res=tclp.cleanURL(TEST3);
  assertEquals(/addrbook/,res);
  assertNull(tclp.stripFile(res,new HTTPNullSampler()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\util\accesslog\TestTCLogParser.java",60
1136,"'-tryline","@ParameterizedTest @ValueSource(strings={application/json,application/json;charset=utf-8,application/json; charset=utf-8}) void testIsGraphQLContentType(String contentType) throws Exception {
  assertTrue(GraphQLRequestParamUtils.isGraphQLContentType(contentType));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\util\TestGraphQLRequestParamUtils.java",82
1137,"'-tryline","@Test void testToPostBodyString() throws Exception {
  assertEquals(EXPECTED_POST_BODY,GraphQLRequestParamUtils.toPostBodyString(params));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\util\TestGraphQLRequestParamUtils.java",100
1138,"'-tryline","@Test void testQueryToGetParamValue() throws Exception {
  assertEquals(EXPECTED_QUERY_GET_PARAM_VALUE,GraphQLRequestParamUtils.queryToGetParamValue(params.getQuery()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\util\TestGraphQLRequestParamUtils.java",105
1139,"'-tryline","@Test void testVariablesToGetParamValue() throws Exception {
  assertEquals(EXPECTED_VARIABLES_GET_PARAM_VALUE,GraphQLRequestParamUtils.variablesToGetParamValue(params.getVariables()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\util\TestGraphQLRequestParamUtils.java",110
1140,"'-tryline","@Test void testToGraphQLRequestParamsWithPostData() throws Exception {
  GraphQLRequestParams params=GraphQLRequestParamUtils.toGraphQLRequestParams(EXPECTED_POST_BODY.getBytes(StandardCharsets.UTF_8),null);
  assertNull(params.getOperationName());
  assertEquals(QUERY.trim(),params.getQuery());
  assertEquals(EXPECTED_VARIABLES_GET_PARAM_VALUE,params.getVariables());
  params=GraphQLRequestParamUtils.toGraphQLRequestParams({\operationName\:\op1\,\variables\:{\id\:123},\query\:\query { droid { id }}\}.getBytes(StandardCharsets.UTF_8),null);
  assertEquals(op1,params.getOperationName());
  assertEquals(query { droid { id }},params.getQuery());
  assertEquals({\id\:123},params.getVariables());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\util\TestGraphQLRequestParamUtils.java",116
1141,"'-tryline","@Test void testToGraphQLRequestParamsWithHttpArguments() throws Exception {
  Arguments args=new Arguments();
  args.addArgument(new HTTPArgument(query,query { droid { id }},=,false));
  GraphQLRequestParams params=GraphQLRequestParamUtils.toGraphQLRequestParams(args,null);
  assertNull(params.getOperationName());
  assertEquals(query { droid { id }},params.getQuery());
  assertNull(params.getVariables());
  args=new Arguments();
  args.addArgument(new HTTPArgument(operationName,op1,=,false));
  args.addArgument(new HTTPArgument(query,query { droid { id }},=,false));
  args.addArgument(new HTTPArgument(variables,{\id\:123},=,false));
  params=GraphQLRequestParamUtils.toGraphQLRequestParams(args,null);
  assertEquals(op1,params.getOperationName());
  assertEquals(query { droid { id }},params.getQuery());
  assertEquals({\id\:123},params.getVariables());
  args=new Arguments();
  args.addArgument(new HTTPArgument(query,query+%7B+droid+%7B+id+%7D%7D,=,true));
  params=GraphQLRequestParamUtils.toGraphQLRequestParams(args,null);
  assertNull(params.getOperationName());
  assertEquals(query { droid { id }},params.getQuery());
  assertNull(params.getVariables());
  args=new Arguments();
  args.addArgument(new HTTPArgument(query,query%20%7B%20droid%20%7B%20id%20%7D%7D,=,true));
  params=GraphQLRequestParamUtils.toGraphQLRequestParams(args,null);
  assertNull(params.getOperationName());
  assertEquals(query { droid { id }},params.getQuery());
  assertNull(params.getVariables());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\util\TestGraphQLRequestParamUtils.java",155
1142,"'-tryline","@Test public void testCloning() throws Exception {
  HTTPArgument arg=new HTTPArgument(name.?,value_ here);
  assertEquals(name.?,arg.getName());
  assertEquals(value_ here,arg.getValue());
  assertEquals(name.%3F,arg.getEncodedName());
  assertEquals(value_+here,arg.getEncodedValue());
  HTTPArgument clone=(HTTPArgument)arg.clone();
  assertEquals(name.%3F,clone.getEncodedName());
  assertEquals(value_+here,clone.getEncodedValue());
  assertEquals(name.?,clone.getName());
  assertEquals(value_ here,clone.getValue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\util\TestHTTPArgument.java",28
1143,"'-tryline","@Test public void testConversion() throws Exception {
  Arguments args=new Arguments();
  args.addArgument(name.?,value_ here);
  args.addArgument(name$of property,value_.+);
  HTTPArgument.convertArgumentsToHTTP(args);
  CollectionProperty argList=args.getArguments();
  HTTPArgument httpArg=(HTTPArgument)argList.get(0).getObjectValue();
  assertEquals(name.%3F,httpArg.getEncodedName());
  assertEquals(value_+here,httpArg.getEncodedValue());
  httpArg=(HTTPArgument)argList.get(1).getObjectValue();
  assertEquals(name%24of+property,httpArg.getEncodedName());
  assertEquals(value_.%2B,httpArg.getEncodedValue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\util\TestHTTPArgument.java",42
1144,"'-tryline","@Test public void testEncoding() throws Exception {
  HTTPArgument arg;
  arg=new HTTPArgument(name.?,value_ here,false);
  assertEquals(name.?,arg.getName());
  assertEquals(value_ here,arg.getValue());
  assertEquals(name.%3F,arg.getEncodedName());
  assertEquals(value_+here,arg.getEncodedValue());
  arg.setAlwaysEncoded(false);
  assertEquals(name.?,arg.getEncodedName());
  assertEquals(value_ here,arg.getEncodedValue());
  arg=new HTTPArgument(name.?,value_ here,true);
  assertEquals(name.?,arg.getName());
  assertEquals(value_ here,arg.getValue());
  assertEquals(name.%3F,arg.getEncodedName());
  assertEquals(value_+here,arg.getEncodedValue());
  arg.setAlwaysEncoded(false);
  assertEquals(name.?,arg.getEncodedName());
  assertEquals(value_ here,arg.getEncodedValue());
  arg=new HTTPArgument(name.%3F,value_+here,true);
  assertEquals(name.?,arg.getName());
  assertEquals(value_ here,arg.getValue());
  assertEquals(name.%3F,arg.getEncodedName());
  assertEquals(value_+here,arg.getEncodedValue());
  arg.setAlwaysEncoded(false);
  assertEquals(name.?,arg.getEncodedName());
  assertEquals(value_ here,arg.getEncodedValue());
  arg=new HTTPArgument(,\00\01\07,,false);
  arg.setAlwaysEncoded(false);
  assertEquals(,arg.getEncodedName());
  assertEquals(\00\01\07,arg.getEncodedValue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\util\TestHTTPArgument.java",57
1145,"'-tryline","@Test public void testConstructors() throws Exception {
  HTTPFileArg file=new HTTPFileArg();
  assertEquals(no parameter failure,,file.getPath());
  assertEquals(no parameter failure,,file.getParamName());
  assertEquals(no parameter failure,,file.getMimeType());
  file=new HTTPFileArg(path);
  assertEquals(single parameter failure,path,file.getPath());
  assertEquals(single parameter failure,,file.getParamName());
  assertEquals(single parameter failure,application/octet-stream,file.getMimeType());
  file=new HTTPFileArg(path,param,mimetype);
  assertEquals(three parameter failure,path,file.getPath());
  assertEquals(three parameter failure,param,file.getParamName());
  assertEquals(three parameter failure,mimetype,file.getMimeType());
  HTTPFileArg file2=new HTTPFileArg(file);
  assertEquals(copy constructor failure,path,file2.getPath());
  assertEquals(copy constructor failure,param,file2.getParamName());
  assertEquals(copy constructor failure,mimetype,file2.getMimeType());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\util\TestHTTPFileArg.java",26
1146,"'-tryline","@Test public void testGettersSetters() throws Exception {
  HTTPFileArg file=new HTTPFileArg();
  assertEquals(,file.getPath());
  assertEquals(,file.getParamName());
  assertEquals(,file.getMimeType());
  file.setPath(path);
  file.setParamName(param);
  file.setMimeType(mimetype);
  file.setHeader(header);
  assertEquals(path,file.getPath());
  assertEquals(param,file.getParamName());
  assertEquals(mimetype,file.getMimeType());
  assertEquals(header,file.getHeader());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\util\TestHTTPFileArg.java",46
1147,"'-tryline","@Test public void testToString() throws Exception {
  HTTPFileArg file=new HTTPFileArg(path1,param1,mimetype1);
  assertEquals(path:'path1'|param:'param1'|mimetype:'mimetype1',file.toString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\util\TestHTTPFileArg.java",62
1148,"'-tryline","@Test public void testConstructors() throws Exception {
  HTTPFileArgs files=new HTTPFileArgs();
  assertEquals(0,files.getHTTPFileArgCount());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\util\TestHTTPFileArgs.java",30
1149,"'-tryline","@Test public void testAdding() throws Exception {
  HTTPFileArgs files=new HTTPFileArgs();
  assertEquals(0,files.getHTTPFileArgCount());
  files.addHTTPFileArg(hede);
  assertEquals(1,files.getHTTPFileArgCount());
  assertEquals(hede,((HTTPFileArg)files.iterator().next().getObjectValue()).getPath());
  HTTPFileArg file=new HTTPFileArg(hodo);
  files.addHTTPFileArg(file);
  assertEquals(2,files.getHTTPFileArgCount());
  PropertyIterator iter=files.iterator();
  assertEquals(hede,((HTTPFileArg)iter.next().getObjectValue()).getPath());
  assertEquals(hodo,((HTTPFileArg)iter.next().getObjectValue()).getPath());
  files.addEmptyHTTPFileArg();
  assertEquals(3,files.getHTTPFileArgCount());
  iter=files.iterator();
  assertEquals(hede,((HTTPFileArg)iter.next().getObjectValue()).getPath());
  assertEquals(hodo,((HTTPFileArg)iter.next().getObjectValue()).getPath());
  assertEquals(,((HTTPFileArg)iter.next().getObjectValue()).getPath());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\util\TestHTTPFileArgs.java",36
1150,"'-tryline","@Test public void testSetHTTPFileArgs() throws Exception {
  List<HTTPFileArg> newHTTPFileArgs=new LinkedList<>();
  newHTTPFileArgs.add(new HTTPFileArg(hede));
  HTTPFileArgs files=new HTTPFileArgs();
  files.setHTTPFileArgs(newHTTPFileArgs);
  assertEquals(1,files.getHTTPFileArgCount());
  assertEquals(hede,((HTTPFileArg)files.iterator().next().getObjectValue()).getPath());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\util\TestHTTPFileArgs.java",57
1151,"'-tryline","@Test public void testRemoving() throws Exception {
  HTTPFileArgs files=new HTTPFileArgs();
  assertEquals(0,files.getHTTPFileArgCount());
  files.addHTTPFileArg(hede);
  assertEquals(1,files.getHTTPFileArgCount());
  files.clear();
  assertEquals(0,files.getHTTPFileArgCount());
  files.addHTTPFileArg(file1);
  files.addHTTPFileArg(file2);
  files.addHTTPFileArg(file3);
  HTTPFileArg file=new HTTPFileArg(file4);
  files.addHTTPFileArg(file);
  files.addHTTPFileArg(file5);
  files.addHTTPFileArg(file6);
  assertEquals(6,files.getHTTPFileArgCount());
  files.removeHTTPFileArg(file3);
  assertEquals(5,files.getHTTPFileArgCount());
  PropertyIterator iter=files.iterator();
  assertEquals(file1,((HTTPFileArg)iter.next().getObjectValue()).getPath());
  assertEquals(file2,((HTTPFileArg)iter.next().getObjectValue()).getPath());
  assertEquals(file4,((HTTPFileArg)iter.next().getObjectValue()).getPath());
  assertEquals(file5,((HTTPFileArg)iter.next().getObjectValue()).getPath());
  assertEquals(file6,((HTTPFileArg)iter.next().getObjectValue()).getPath());
  files.removeHTTPFileArg(file);
  assertEquals(4,files.getHTTPFileArgCount());
  iter=files.iterator();
  assertEquals(file1,((HTTPFileArg)iter.next().getObjectValue()).getPath());
  assertEquals(file2,((HTTPFileArg)iter.next().getObjectValue()).getPath());
  assertEquals(file5,((HTTPFileArg)iter.next().getObjectValue()).getPath());
  assertEquals(file6,((HTTPFileArg)iter.next().getObjectValue()).getPath());
  files.removeHTTPFileArg(new HTTPFileArg(file5));
  assertEquals(3,files.getHTTPFileArgCount());
  iter=files.iterator();
  assertEquals(file1,((HTTPFileArg)iter.next().getObjectValue()).getPath());
  assertEquals(file2,((HTTPFileArg)iter.next().getObjectValue()).getPath());
  assertEquals(file6,((HTTPFileArg)iter.next().getObjectValue()).getPath());
  files.removeHTTPFileArg(1);
  assertEquals(2,files.getHTTPFileArgCount());
  iter=files.iterator();
  assertEquals(file1,((HTTPFileArg)iter.next().getObjectValue()).getPath());
  assertEquals(file6,((HTTPFileArg)iter.next().getObjectValue()).getPath());
  files.removeAllHTTPFileArgs();
  assertEquals(0,files.getHTTPFileArgCount());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\util\TestHTTPFileArgs.java",67
1152,"'-tryline","@Test public void testToString() throws Exception {
  HTTPFileArgs files=new HTTPFileArgs();
  files.addHTTPFileArg(file1);
  files.addHTTPFileArg(file2.jpg);
  files.addHTTPFileArg(file3.jar);
  assertEquals(path:'file1'|param:''|mimetype:'application/octet-stream'\n + path:'file2.jpg'|param:''|mimetype:'image/jpeg'\n + path:'file3.jar'|param:''|mimetype:'application/java-archive',files.toString());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\util\TestHTTPFileArgs.java",113
1153,"'-tryline","@Test public void testReplace() throws Exception {
  HeaderManager headerManager=new HeaderManager();
  headerManager.add(new Header(Referer,https://jmeter.apache.org/changes.html));
  headerManager.add(new Header(JSESSIONID,AZAZDZDAFEFZEVZEZEVZEVZEVZZ));
  int numberOfReplacements=headerManager.replace(jmeter.apache.org,${host},true);
  assertEquals(1,numberOfReplacements);
  assertEquals(Referer,headerManager.getHeader(0).getName());
  assertEquals(JSESSIONID,headerManager.getHeader(1).getName());
  assertEquals(https://${host}/changes.html,headerManager.getHeader(0).getValue());
  assertEquals(AZAZDZDAFEFZEVZEZEVZEVZEVZZ,headerManager.getHeader(1).getValue());
  headerManager=new HeaderManager();
  headerManager.add(new Header(Referer,https://JMeter.apache.org/changes.html));
  headerManager.add(new Header(JSESSIONID,AZAZDZDAFEFZEVZEZEVZEVZEVZZ));
  numberOfReplacements=headerManager.replace(jmeter.apache.org,${host},false);
  assertEquals(1,numberOfReplacements);
  assertEquals(Referer,headerManager.getHeader(0).getName());
  assertEquals(JSESSIONID,headerManager.getHeader(1).getName());
  assertEquals(https://${host}/changes.html,headerManager.getHeader(0).getValue());
  assertEquals(AZAZDZDAFEFZEVZEZEVZEVZEVZZ,headerManager.getHeader(1).getValue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\testelement\TestHeaderManager.java",29
1154,"'-tryline","@Test public void testReplaceNoMatch() throws Exception {
  HeaderManager headerManager=new HeaderManager();
  headerManager.add(new Header(Referer,https://jmeter.apache.org/changes.html));
  headerManager.add(new Header(JSESSIONID,AZAZDZDAFEFZEVZEZEVZEVZEVZZ));
  int numberOfReplacements=headerManager.replace(JMeter.apache.org,${host},true);
  assertEquals(0,numberOfReplacements);
  assertEquals(Referer,headerManager.getHeader(0).getName());
  assertEquals(JSESSIONID,headerManager.getHeader(1).getName());
  assertEquals(https://jmeter.apache.org/changes.html,headerManager.getHeader(0).getValue());
  assertEquals(AZAZDZDAFEFZEVZEZEVZEVZEVZZ,headerManager.getHeader(1).getValue());
  headerManager=new HeaderManager();
  headerManager.add(new Header(Referer,https://jmeter.apache.org/changes.html));
  headerManager.add(new Header(JSESSIONID,AZAZDZDAFEFZEVZEZEVZEVZEVZZ));
  numberOfReplacements=headerManager.replace(JMeterx.apache.org,${host},false);
  assertEquals(0,numberOfReplacements);
  assertEquals(Referer,headerManager.getHeader(0).getName());
  assertEquals(JSESSIONID,headerManager.getHeader(1).getName());
  assertEquals(https://jmeter.apache.org/changes.html,headerManager.getHeader(0).getValue());
  assertEquals(AZAZDZDAFEFZEVZEZEVZEVZEVZZ,headerManager.getHeader(1).getValue());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\testelement\TestHeaderManager.java",56
1155,"'-tryline","/** 
 * Test that adding an argument to the table results in an appropriate TestElement being created.
 */
@Test public void testLDAPArgumentCreation() throws Exception {
  LDAPArgumentsPanel gui=new LDAPArgumentsPanel();
  gui.tableModel.addRow(new LDAPArgument());
  gui.tableModel.setValueAt(howdy,0,0);
  gui.tableModel.addRow(new LDAPArgument());
  gui.tableModel.setValueAt(doody,0,1);
  assertEquals(=,((LDAPArgument)((LDAPArguments)gui.createTestElement()).getArguments().get(0).getObjectValue()).getMetaData());
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\ldap\src\test\java\org\apache\jmeter\protocol\ldap\config\gui\PackageTest.java",26
1156,"'-tryline","/** 
 * Evaluate a script on the database
 * @param db database connection to use
 * @param script script to evaluate on the database
 * @return result of evaluation on the database
 * @throws Exception when evaluation on the database fails
 */
public Object evaluate(DB db,String script) throws Exception {
  if (log.isDebugEnabled()) {
    log.debug(database:  + db.getName() + , script: + script);
  }
  db.requestStart();
  try {
    db.requestEnsureConnection();
    Object result=db.eval(script);
    if (log.isDebugEnabled()) {
      log.debug(Result :  + result);
    }
    return result;
  }
  finally {
    db.requestDone();
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mongodb\src\main\java\org\apache\jmeter\protocol\mongodb\sampler\MongoScriptRunner.java",36
1157,"'-tryline","@Test public void testHexStringToByteArray() throws Exception {
  byte[] ba;
  ba=BinaryTCPClientImpl.hexStringToByteArray();
  assertEquals(0,ba.length);
  ba=BinaryTCPClientImpl.hexStringToByteArray(00);
  assertEquals(1,ba.length);
  assertEquals(0,ba[0]);
  ba=BinaryTCPClientImpl.hexStringToByteArray(0f107F8081ff);
  assertEquals(6,ba.length);
  assertEquals(15,ba[0]);
  assertEquals(16,ba[1]);
  assertEquals(127,ba[2]);
  assertEquals(-128,ba[3]);
  assertEquals(-127,ba[4]);
  assertEquals(-1,ba[5]);
  try {
    ba=BinaryTCPClientImpl.hexStringToByteArray(0f107f8081ff1);
    fail(Expected IllegalArgumentException);
  }
 catch (  IllegalArgumentException expected) {
  }
  try {
    BinaryTCPClientImpl.hexStringToByteArray(0f107xxf8081ff);
    fail(Expected IllegalArgumentException);
  }
 catch (  IllegalArgumentException expected) {
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\tcp\src\test\java\org\apache\jmeter\protocol\tcp\sampler\BinaryTCPClientImplTest.java",33
1158,"'-tryline","@Test public void testLoopBack() throws Exception {
  assertEquals(0f107f8081ff,JOrphanUtils.baToHexString(BinaryTCPClientImpl.hexStringToByteArray(0f107f8081ff)));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\tcp\src\test\java\org\apache\jmeter\protocol\tcp\sampler\BinaryTCPClientImplTest.java",65
1159,"'-tryline","@Test public void testRoundTrip() throws Exception {
  BinaryTCPClientImpl bi=new BinaryTCPClientImpl();
  InputStream is=null;
  try {
    bi.write(null,is);
    fail(Expected UnsupportedOperationException);
  }
 catch (  UnsupportedOperationException expected) {
  }
  ByteArrayOutputStream os=new ByteArrayOutputStream();
  bi.write(os,3132333435);
  os.close();
  assertEquals(12345,os.toString(ISO-8859-1));
  ByteArrayInputStream bis=new ByteArrayInputStream(os.toByteArray());
  assertEquals(3132333435,bi.read(bis,new SampleResult()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\tcp\src\test\java\org\apache\jmeter\protocol\tcp\sampler\BinaryTCPClientImplTest.java",70
1160,"'-tryline","@Test public void testError() throws Exception {
  ByteArrayOutputStream os=null;
  ByteArrayInputStream is=null;
  LengthPrefixedBinaryTCPClientImpl lp=new LengthPrefixedBinaryTCPClientImpl();
  try {
    lp.write(os,is);
    fail(Expected java.lang.UnsupportedOperationException);
  }
 catch (  java.lang.UnsupportedOperationException expected) {
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\tcp\src\test\java\org\apache\jmeter\protocol\tcp\sampler\LengthPrefixedBinaryTCPClientImplTest.java",31
1161,"'-tryline","@Test public void testValid() throws Exception {
  ByteArrayOutputStream os=new ByteArrayOutputStream();
  LengthPrefixedBinaryTCPClientImpl lp=new LengthPrefixedBinaryTCPClientImpl();
  final String DATA=31323334353637;
  lp.write(os,DATA);
  os.close();
  final byte[] byteArray=os.toByteArray();
  assertEquals(2 + DATA.length() / 2,byteArray.length);
  ByteArrayInputStream is=new ByteArrayInputStream(byteArray);
  assertEquals(DATA,lp.read(is,new SampleResult()));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\tcp\src\test\java\org\apache\jmeter\protocol\tcp\sampler\LengthPrefixedBinaryTCPClientImplTest.java",43
1162,"'-tryline","@Test public void testIntToByteArray() throws Exception {
  byte[] ba;
  int len=2;
  ba=TCPClientDecorator.intToByteArray(0,len);
  assertEquals(len,ba.length);
  assertEquals(0,ba[0]);
  assertEquals(0,ba[1]);
  ba=TCPClientDecorator.intToByteArray(15,len);
  assertEquals(len,ba.length);
  assertEquals(0,ba[0]);
  assertEquals(15,ba[1]);
  ba=TCPClientDecorator.intToByteArray(255,len);
  assertEquals(len,ba.length);
  assertEquals(0,ba[0]);
  assertEquals(-1,ba[1]);
  ba=TCPClientDecorator.intToByteArray(256,len);
  assertEquals(len,ba.length);
  assertEquals(1,ba[0]);
  assertEquals(0,ba[1]);
  ba=TCPClientDecorator.intToByteArray(-1,len);
  assertEquals(len,ba.length);
  assertEquals(-1,ba[0]);
  assertEquals(-1,ba[1]);
  ba=TCPClientDecorator.intToByteArray(Short.MAX_VALUE,len);
  assertEquals(len,ba.length);
  assertEquals(127,ba[0]);
  assertEquals(-1,ba[1]);
  ba=TCPClientDecorator.intToByteArray(Short.MIN_VALUE,len);
  assertEquals(len,ba.length);
  assertEquals(-128,ba[0]);
  assertEquals(0,ba[1]);
  try {
    ba=TCPClientDecorator.intToByteArray(Short.MIN_VALUE - 1,len);
    fail();
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    ba=TCPClientDecorator.intToByteArray(Short.MAX_VALUE + 1,len);
    fail();
  }
 catch (  IllegalArgumentException iae) {
  }
  len=4;
  ba=TCPClientDecorator.intToByteArray(0,len);
  assertEquals(len,ba.length);
  assertEquals(0,ba[0]);
  assertEquals(0,ba[1]);
  assertEquals(0,ba[2]);
  assertEquals(0,ba[3]);
  ba=TCPClientDecorator.intToByteArray(15,len);
  assertEquals(len,ba.length);
  assertEquals(0,ba[0]);
  assertEquals(0,ba[1]);
  assertEquals(0,ba[2]);
  assertEquals(15,ba[3]);
  ba=TCPClientDecorator.intToByteArray(255,len);
  assertEquals(len,ba.length);
  assertEquals(0,ba[0]);
  assertEquals(0,ba[1]);
  assertEquals(0,ba[2]);
  assertEquals(-1,ba[3]);
  ba=TCPClientDecorator.intToByteArray(-1,len);
  assertEquals(len,ba.length);
  assertEquals(-1,ba[0]);
  assertEquals(-1,ba[1]);
  assertEquals(-1,ba[2]);
  assertEquals(-1,ba[3]);
  ba=TCPClientDecorator.intToByteArray(256,len);
  assertEquals(len,ba.length);
  assertEquals(0,ba[0]);
  assertEquals(0,ba[1]);
  assertEquals(1,ba[2]);
  assertEquals(0,ba[3]);
  ba=TCPClientDecorator.intToByteArray(65535,len);
  assertEquals(len,ba.length);
  assertEquals(0,ba[0]);
  assertEquals(0,ba[1]);
  assertEquals(-1,ba[2]);
  assertEquals(-1,ba[3]);
  ba=TCPClientDecorator.intToByteArray(65536,len);
  assertEquals(len,ba.length);
  assertEquals(0,ba[0]);
  assertEquals(1,ba[1]);
  assertEquals(0,ba[2]);
  assertEquals(0,ba[3]);
  ba=TCPClientDecorator.intToByteArray(Integer.MIN_VALUE,len);
  assertEquals(len,ba.length);
  assertEquals(-128,ba[0]);
  assertEquals(0,ba[1]);
  assertEquals(0,ba[2]);
  assertEquals(0,ba[3]);
  ba=TCPClientDecorator.intToByteArray(Integer.MAX_VALUE,len);
  assertEquals(len,ba.length);
  assertEquals(127,ba[0]);
  assertEquals(-1,ba[1]);
  assertEquals(-1,ba[2]);
  assertEquals(-1,ba[3]);
  try {
    ba=TCPClientDecorator.intToByteArray(0,0);
    fail();
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    ba=TCPClientDecorator.intToByteArray(0,1);
    fail();
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    ba=TCPClientDecorator.intToByteArray(0,3);
    fail();
  }
 catch (  IllegalArgumentException iae) {
  }
  try {
    TCPClientDecorator.intToByteArray(0,5);
    fail(Expected IllegalArgumentException);
  }
 catch (  IllegalArgumentException iae) {
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\tcp\src\test\java\org\apache\jmeter\protocol\tcp\sampler\TCPClientDecoratorTest.java",27
1163,"'-tryline","@Test public void testByteArrayToInt() throws Exception {
  byte[] ba;
  ba=new byte[]{0,0};
  assertEquals(0,TCPClientDecorator.byteArrayToInt(ba));
  ba=new byte[]{0,15};
  assertEquals(15,TCPClientDecorator.byteArrayToInt(ba));
  ba=new byte[]{0,-1};
  assertEquals(255,TCPClientDecorator.byteArrayToInt(ba));
  ba=new byte[]{1,0};
  assertEquals(256,TCPClientDecorator.byteArrayToInt(ba));
  ba=new byte[]{-1,-1};
  assertEquals(-1,TCPClientDecorator.byteArrayToInt(ba));
  ba=new byte[]{0,0,-1,-1};
  assertEquals(65535,TCPClientDecorator.byteArrayToInt(ba));
  ba=new byte[]{0,1,0,0};
  assertEquals(65536,TCPClientDecorator.byteArrayToInt(ba));
  ba=new byte[]{0,0,0,0};
  assertEquals(0,TCPClientDecorator.byteArrayToInt(ba));
  ba=new byte[]{-128,0,0,0};
  assertEquals(Integer.MIN_VALUE,TCPClientDecorator.byteArrayToInt(ba));
  ba=new byte[]{127,-1,-1,-1};
  assertEquals(Integer.MAX_VALUE,TCPClientDecorator.byteArrayToInt(ba));
  try {
    TCPClientDecorator.byteArrayToInt(null);
    fail(Expected IllegalArgumentException);
  }
 catch (  IllegalArgumentException expected) {
  }
  try {
    TCPClientDecorator.byteArrayToInt(new byte[]{});
    fail(Expected IllegalArgumentException);
  }
 catch (  IllegalArgumentException expected) {
  }
  try {
    TCPClientDecorator.byteArrayToInt(new byte[]{0});
    fail(Expected IllegalArgumentException);
  }
 catch (  IllegalArgumentException expected) {
  }
  try {
    TCPClientDecorator.byteArrayToInt(new byte[]{0,0,0});
    fail(Expected IllegalArgumentException);
  }
 catch (  IllegalArgumentException expected) {
  }
  try {
    TCPClientDecorator.byteArrayToInt(new byte[]{0,0,0});
    fail(Expected IllegalArgumentException);
  }
 catch (  IllegalArgumentException expected) {
  }
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\tcp\src\test\java\org\apache\jmeter\protocol\tcp\sampler\TCPClientDecoratorTest.java",167
1164,"'-tryline","@Test public void testLoopBack() throws Exception {
  assertEquals(Short.MIN_VALUE,TCPClientDecorator.byteArrayToInt(TCPClientDecorator.intToByteArray(Short.MIN_VALUE,2)));
  assertEquals(Short.MAX_VALUE,TCPClientDecorator.byteArrayToInt(TCPClientDecorator.intToByteArray(Short.MAX_VALUE,2)));
  assertEquals(Integer.MIN_VALUE,TCPClientDecorator.byteArrayToInt(TCPClientDecorator.intToByteArray(Integer.MIN_VALUE,4)));
  assertEquals(Integer.MAX_VALUE,TCPClientDecorator.byteArrayToInt(TCPClientDecorator.intToByteArray(Integer.MAX_VALUE,4)));
}
","java.lang.Exception","C:\Users\pavan\Downloads\jmeter-master\src\protocol\tcp\src\test\java\org\apache\jmeter\protocol\tcp\sampler\TCPClientDecoratorTest.java",238
1165,"'-tryline","private FileStats getFileStats(File testFile) throws IOException, FileNotFoundException {
  if (testFile == null || !testFile.exists()) {
    return FileStats.NO_STATS;
  }
  try (FileReader fileReader=new FileReader(testFile);BufferedReader bufferedReader=new BufferedReader(fileReader)){
    return computeFileStats(bufferedReader);
  }
 }
","java.io.FileNotFoundException","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\save\TestSaveService.java",173
1166,"'-tryline","public FileRowColContainer(String file,String delim) throws IOException, FileNotFoundException {
  log.debug(FRCC({},{}),file,delim);
  fileName=file;
  delimiter=delim;
  nextRow=0;
  fileData=new ArrayList<>();
  load();
}
","java.io.FileNotFoundException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\FileRowColContainer.java",57
1167,"'-tryline","public FileRowColContainer(String file) throws IOException, FileNotFoundException {
  log.debug(FRCC({})[{}],file,DELIMITER);
  fileName=file;
  delimiter=DELIMITER;
  nextRow=0;
  fileData=new ArrayList<>();
  load();
}
","java.io.FileNotFoundException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\FileRowColContainer.java",66
1168,"'-tryline","private void load() throws IOException, FileNotFoundException {
  try (BufferedReader myBread=Files.newBufferedReader(FileServer.getFileServer().getResolvedFile(fileName).toPath(),Charset.defaultCharset())){
    String line=myBread.readLine();
    while (line != null && line.length() > 0) {
      fileData.add(splitLine(line,delimiter));
      line=myBread.readLine();
    }
  }
 catch (  IOException e) {
    fileData.clear();
    log.warn(e.toString());
    throw e;
  }
}
","java.io.FileNotFoundException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\FileRowColContainer.java",75
1169,"'-tryline","private static FileRowColContainer getFile(String file,String alias) throws FileNotFoundException, IOException {
  FileRowColContainer frcc;
  if ((frcc=fileContainers.get(alias)) == null) {
    frcc=new FileRowColContainer(file);
    fileContainers.put(alias,frcc);
    log.info(Saved {} as {} delimiter=<{}>,file,alias,frcc.getDelimiter());
    if (defaultFile.length() == 0) {
      defaultFile=file;
    }
  }
  return frcc;
}
","java.io.FileNotFoundException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\FileWrapper.java",104
1170,"'-tryline","public XPathFileContainer(String file,String xpath) throws FileNotFoundException, IOException, ParserConfigurationException, SAXException, TransformerException {
  log.debug(XPath({}) xpath {},file,xpath);
  fileName=file;
  nextRow=0;
  nodeList=load(xpath);
}
","java.io.FileNotFoundException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\XPathFileContainer.java",57
1171,"'-tryline","private NodeList load(String xpath) throws IOException, FileNotFoundException, ParserConfigurationException, SAXException, TransformerException {
  NodeList nl=null;
  try (FileInputStream fis=new FileInputStream(fileName);BufferedInputStream bis=new BufferedInputStream(fis)){
    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
    factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
    DocumentBuilder builder=factory.newDocumentBuilder();
    nl=XPathUtil.selectNodeList(builder.parse(bis),xpath);
    if (log.isDebugEnabled()) {
      log.debug(found {},nl.getLength());
    }
  }
 catch (  TransformerException|SAXException|ParserConfigurationException|IOException e) {
    log.warn(e.toString());
    throw e;
  }
  return nl;
}
","java.io.FileNotFoundException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\XPathFileContainer.java",65
1172,"'-tryline","private static InputStream checkIn(String stdin) throws FileNotFoundException {
  String in=JOrphanUtils.nullifyIfEmptyTrimmed(stdin);
  if (in == null) {
    return null;
  }
 else {
    return new FileInputStream(in);
  }
}
","java.io.FileNotFoundException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\exec\SystemCommand.java",79
1173,"'-tryline","private static RemoteJMeterEngine getEngine(String hostAndPort) throws RemoteException, NotBoundException {
  final String name=RemoteJMeterEngineImpl.JMETER_ENGINE_RMI_NAME;
  String host=hostAndPort;
  int port=RmiUtils.DEFAULT_RMI_PORT;
  int indexOfSeparator=hostAndPort.indexOf(':');
  if (indexOfSeparator >= 0) {
    host=hostAndPort.substring(0,indexOfSeparator);
    String portAsString=hostAndPort.substring(indexOfSeparator + 1);
    port=Integer.parseInt(portAsString);
  }
  Registry registry=LocateRegistry.getRegistry(host,port,RmiUtils.createClientSocketFactory());
  Remote remobj=registry.lookup(name);
  if (remobj instanceof RemoteJMeterEngine) {
    final RemoteJMeterEngine rje=(RemoteJMeterEngine)remobj;
    if (remobj instanceof RemoteObject) {
      RemoteObject robj=(RemoteObject)remobj;
      System.out.println(Using remote object:  + robj.getRef().remoteToString());
    }
    return rje;
  }
  throw new RemoteException(Could not find  + name);
}
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\ClientJMeterEngine.java",56
1174,"'-tryline","public ClientJMeterEngine(String hostAndPort) throws NotBoundException, RemoteException {
  this.remote=getEngine(hostAndPort);
  this.hostAndPort=hostAndPort;
}
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\ClientJMeterEngine.java",83
1175,"'-tryline","/** 
 * A factory method that might be overridden for unit testing
 * @param address address for engine
 * @return engine instance
 * @throws RemoteException if registry can't be contacted
 * @throws NotBoundException when name for address can't be found
 */
protected JMeterEngine createEngine(String address) throws RemoteException, NotBoundException {
  return new ClientJMeterEngine(address);
}
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\DistributedRunner.java",234
1176,"'-tryline","void rconfigure(HashTree testTree,String host,File jmxBase,String scriptName) throws RemoteException ;
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\RemoteJMeterEngine.java",31
1177,"'-tryline","void rrunTest() throws RemoteException, JMeterEngineException ;
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\RemoteJMeterEngine.java",33
1178,"'-tryline","void rstopTest(boolean now) throws RemoteException ;
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\RemoteJMeterEngine.java",35
1179,"'-tryline","void rreset() throws RemoteException ;
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\RemoteJMeterEngine.java",37
1180,"'-tryline","void rsetProperties(HashMap<String,String> p) throws RemoteException ;
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\RemoteJMeterEngine.java",39
1181,"'-tryline","void rexit() throws RemoteException ;
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\RemoteJMeterEngine.java",41
1182,"'-tryline","private RemoteJMeterEngineImpl(int localPort,int rmiRegistryPort) throws RemoteException {
  super(localPort,RmiUtils.createClientSocketFactory(),RmiUtils.createServerSocketFactory());
  this.rmiRegistryPort=rmiRegistryPort;
  System.out.println(Created remote object:  + this.getRef().remoteToString());
}
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\RemoteJMeterEngineImpl.java",66
1183,"'-tryline","public static void startServer(int rmiRegistryPort) throws RemoteException {
  RemoteJMeterEngineImpl engine=new RemoteJMeterEngineImpl(RmiUtils.DEFAULT_LOCAL_PORT,rmiRegistryPort);
  engine.init();
}
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\RemoteJMeterEngineImpl.java",73
1184,"'-tryline","private void init() throws RemoteException {
  log.info(Starting backing engine on {},this.rmiRegistryPort);
  InetAddress localHost=RmiUtils.getRmiHost();
  if (localHost.isSiteLocalAddress()) {
    log.info(IP address is a site-local address; this may cause problems with remote access.\n + \tCan be overridden by defining the system property 'java.rmi.server.hostname' - see jmeter-server script file);
  }
  log.debug(This = {},this);
  Registry reg=null;
  if (CREATE_SERVER) {
    log.info(Creating RMI registry (server.rmi.create=true));
    try {
      reg=LocateRegistry.createRegistry(this.rmiRegistryPort,RmiUtils.createClientSocketFactory(),RmiUtils.createServerSocketFactory());
      log.debug(Created registry: {},reg);
    }
 catch (    RemoteException e) {
      String msg=Problem creating registry:  + e;
      log.warn(msg);
      System.err.println(msg);
      System.err.println(Continuing...);
    }
  }
  try {
    if (reg == null) {
      log.debug(Locating registry);
      reg=LocateRegistry.getRegistry(RmiUtils.getRmiHost().getHostName(),this.rmiRegistryPort,RmiUtils.createClientSocketFactory());
    }
    log.debug(About to rebind registry: {},reg);
    reg.rebind(JMETER_ENGINE_RMI_NAME,this);
    log.info(Bound to RMI registry on port {},this.rmiRegistryPort);
  }
 catch (  Exception ex) {
    log.error(rmiregistry needs to be running to start JMeter in server mode. {},ex.toString());
    throw new RemoteException(Cannot start. See server log file.,ex);
  }
}
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\RemoteJMeterEngineImpl.java",81
1185,"'-tryline","/** 
 * Adds a feature to the ThreadGroup attribute of the RemoteJMeterEngineImpl object.
 * @param testTree the feature to be added to the ThreadGroup attribute
 * @param hostAndPort Host and Port
 * @param jmxBase JMX base
 * @param scriptName Name of script
 */
@Override public void rconfigure(HashTree testTree,String hostAndPort,File jmxBase,String scriptName) throws RemoteException {
  log.info(Creating JMeter engine on host {} base '{}',hostAndPort,jmxBase);
  try {
    if (log.isInfoEnabled()) {
      log.info(Remote client host: {},getClientHost());
    }
  }
 catch (  ServerNotActiveException e) {
  }
synchronized (LOCK) {
    if (backingEngine != null && backingEngine.isActive()) {
      log.warn(Engine is busy - cannot create JMeter engine);
      throw new IllegalStateException(Engine is busy - please try later);
    }
    ownerThread=Thread.currentThread();
    JMeterUtils.setProperty(JMeterUtils.THREAD_GROUP_DISTRIBUTED_PREFIX_PROPERTY_NAME,hostAndPort);
    backingEngine=new StandardJMeterEngine(hostAndPort);
    backingEngine.configure(testTree);
  }
  FileServer.getFileServer().setScriptName(scriptName);
  FileServer.getFileServer().setBase(jmxBase);
}
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\RemoteJMeterEngineImpl.java",123
1186,"'-tryline","@Override public void rrunTest() throws RemoteException, JMeterEngineException {
  log.info(Running test);
  checkOwner(runTest);
  backingEngine.runTest();
}
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\RemoteJMeterEngineImpl.java",157
1187,"'-tryline","@Override public void rreset() throws RemoteException {
  if (backingEngine != null) {
    log.info(Reset);
    checkOwner(reset);
    backingEngine.reset();
  }
 else {
    log.warn(Backing engine is null, ignoring reset);
  }
}
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\RemoteJMeterEngineImpl.java",164
1188,"'-tryline","@Override public void rstopTest(boolean now) throws RemoteException {
  if (now) {
    log.info(Stopping test ...);
  }
 else {
    log.info(Shutting test ...);
  }
  backingEngine.stopTest(now);
  log.info(... stopped);
}
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\RemoteJMeterEngineImpl.java",176
1189,"'-tryline","@Override public void rexit() throws RemoteException {
  log.info(Exiting);
  Thread et=new Thread(() -> {
    log.info(Stopping the backing engine);
    backingEngine.exit();
  }
);
  et.setDaemon(false);
  Registry reg=LocateRegistry.getRegistry(RmiUtils.getRmiHost().getHostName(),this.rmiRegistryPort,RmiUtils.createClientSocketFactory());
  try {
    reg.unbind(JMETER_ENGINE_RMI_NAME);
  }
 catch (  NotBoundException e) {
    log.warn({} is not bound,JMETER_ENGINE_RMI_NAME,e);
  }
  log.info(Unbound from registry);
  try {
    UnicastRemoteObject.unexportObject(this,false);
  }
 catch (  NoSuchObjectException e) {
    log.warn({} not longer exists,this,e);
  }
  log.info(Unexported RemoteJMeterEngineImpl);
  JMeterUtils.helpGC();
  et.start();
}
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\RemoteJMeterEngineImpl.java",191
1190,"'-tryline","@Override public void rsetProperties(HashMap<String,String> map) throws RemoteException {
  checkOwner(setProperties);
  if (remotelySetProperties != null) {
    Properties jmeterProperties=JMeterUtils.getJMeterProperties();
    log.info(Cleaning previously set properties: {},remotelySetProperties);
    for (    Object key : remotelySetProperties.keySet()) {
      jmeterProperties.remove(key);
    }
  }
  Properties props=new Properties();
  props.putAll(map);
  backingEngine.setProperties(props);
  this.remotelySetProperties=props;
}
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\RemoteJMeterEngineImpl.java",222
1191,"'-tryline","public static RMIServerSocketFactory createServerSocketFactory() throws RemoteException {
  if (SSL_DISABLED) {
    log.info(Disabling SSL for RMI as server.rmi.ssl.disable is set to 'true');
    return null;
  }
  if (StringUtils.isBlank(KEYSTORE_FILE)) {
    Validate.validState(SSL_DISABLED,No keystore for RMI over SSL specified. Set 'server.rmi.ssl.disable' to true, if this is intentional.);
    return new RMIServerSocketFactoryImpl(getRmiHost());
  }
  SSLRMIServerSocketFactory factory=new SSLRMIServerSocketFactory(getRmiHost());
  factory.setAlias(KEYSTORE_ALIAS);
  factory.setNeedClientAuth(true);
  factory.setKeystore(KEYSTORE_FILE,KEYSTORE_TYPE,KEYSTORE_PASSWORD);
  factory.setTruststore(TRUSTSTORE_FILE,TRUSTSTORE_TYPE,TRUSTSTORE_PASSWORD);
  return factory;
}
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\rmi\RmiUtils.java",102
1192,"'-tryline","/** 
 * @return the configure address for usage by RMI
 * @throws RemoteException when no valid address can be found
 */
public static InetAddress getRmiHost() throws RemoteException {
  InetAddress localHost=null;
  String host=System.getProperties().getProperty(java.rmi.server.hostname);
  try {
    if (host == null) {
      log.info(System property 'java.rmi.server.hostname' is not defined, using localHost address);
      localHost=InetAddress.getLocalHost();
    }
 else {
      log.info(Resolving by name the value of System property 'java.rmi.server.hostname': {},host);
      localHost=InetAddress.getByName(host);
    }
  }
 catch (  UnknownHostException e) {
    throw new RemoteException(Cannot start. Unable to get local host IP address.,e);
  }
  if (log.isInfoEnabled()) {
    log.info(Local IP address={},localHost.getHostAddress());
  }
  if (host == null && localHost.isLoopbackAddress()) {
    String hostName=localHost.getHostName();
    throw new RemoteException(Cannot start.  + hostName +  is a loopback address.);
  }
  return localHost;
}
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\rmi\RmiUtils.java",120
1193,"'-tryline","void testStarted() throws RemoteException ;
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\samplers\RemoteSampleListener.java",30
1194,"'-tryline","void testStarted(String host) throws RemoteException ;
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\samplers\RemoteSampleListener.java",32
1195,"'-tryline","void testEnded() throws RemoteException ;
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\samplers\RemoteSampleListener.java",34
1196,"'-tryline","void testEnded(String host) throws RemoteException ;
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\samplers\RemoteSampleListener.java",36
1197,"'-tryline","/** 
 * This method is called remotely and fires a list of samples events received locally. The function is to reduce network load when using remote testing.
 * @param samples the list of sample events to be fired locally.
 * @throws RemoteException when calling the remote method fails
 */
void processBatch(List<SampleEvent> samples) throws RemoteException ;
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\samplers\RemoteSampleListener.java",38
1198,"'-tryline","/** 
 * A sample has started and stopped.
 * @param e the event with data about the completed sample
 * @throws RemoteException when calling the remote method fails
 */
void sampleOccurred(SampleEvent e) throws RemoteException ;
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\samplers\RemoteSampleListener.java",49
1199,"'-tryline","/** 
 * A sample has started.
 * @param e the event with data about the started sample
 * @throws RemoteException when calling the remote method fails
 */
void sampleStarted(SampleEvent e) throws RemoteException ;
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\samplers\RemoteSampleListener.java",58
1200,"'-tryline","/** 
 * A sample has stopped.
 * @param e the event with data about the stopped sample
 * @throws RemoteException when calling the remote method fails
 */
void sampleStopped(SampleEvent e) throws RemoteException ;
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\samplers\RemoteSampleListener.java",67
1201,"'-tryline","public RemoteSampleListenerImpl(Object listener) throws RemoteException {
  super(DEFAULT_LOCAL_PORT,RmiUtils.createClientSocketFactory(),RmiUtils.createServerSocketFactory());
  if (listener instanceof TestStateListener) {
    testListener=(TestStateListener)listener;
  }
 else {
    testListener=null;
  }
  if (listener instanceof SampleListener) {
    sampleListener=(SampleListener)listener;
  }
 else {
    sampleListener=null;
  }
}
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\samplers\RemoteSampleListenerImpl.java",42
1202,"'-tryline","private void sendBatch() throws RemoteException {
  if (!sampleStore.isEmpty()) {
    listener.processBatch(sampleStore);
    sampleStore.clear();
    sampleTable.clear();
    sampleCount=0;
  }
}
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\samplers\StatisticalSampleSender.java",190
1203,"'-tryline","/** 
 * @see org.apache.jmeter.testelement.ThreadListener#threadStarted()
 * @throws RemoteException when remote calling of the method fails
 */
void threadStarted() throws RemoteException ;
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\threads\RemoteThreadsListener.java",28
1204,"'-tryline","/** 
 * @see org.apache.jmeter.testelement.ThreadListener#threadFinished()
 * @throws RemoteException when remote calling of the method fails
 */
void threadFinished() throws RemoteException ;
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\threads\RemoteThreadsListener.java",34
1205,"'-tryline","/** 
 * @throws RemoteException if failed to export object
 */
public RemoteThreadsListenerImpl() throws RemoteException {
  super(DEFAULT_LOCAL_PORT,RmiUtils.createClientSocketFactory(),RmiUtils.createServerSocketFactory());
  try {
    List<String> listClasses=ClassFinder.findClassesThatExtend(JMeterUtils.getSearchPaths(),new Class[]{RemoteThreadsLifeCycleListener.class});
    for (    String strClassName : listClasses) {
      try {
        log.debug(Loading class: {},strClassName);
        Class<?> commandClass=Class.forName(strClassName);
        if (!Modifier.isAbstract(commandClass.getModifiers())) {
          log.debug(Instantiating: {},commandClass);
          RemoteThreadsLifeCycleListener listener=(RemoteThreadsLifeCycleListener)commandClass.getDeclaredConstructor().newInstance();
          listeners.add(listener);
        }
      }
 catch (      Exception e) {
        log.error(Exception registering {} with implementation: {},RemoteThreadsLifeCycleListener.class,strClassName,e);
      }
    }
  }
 catch (  IOException e) {
    log.error(Exception finding implementations of {},RemoteThreadsLifeCycleListener.class,e);
  }
}
","java.rmi.RemoteException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\threads\RemoteThreadsListenerImpl.java",54
1206,"'-tryline","/** 
 * Register a GUI class so that it can later be retrieved via {@link #getGUI(Class)}. The key should match the fully-qualified class name for the class used as the parameter when retrieving the GUI.
 * @param key the name which can be used to retrieve this GUI later
 * @param guiClass the class object for the GUI component
 * @param testClass the class of the objects edited by this GUI
 * @throws InstantiationException if an instance of the GUI class can not be instantiated
 * @throws IllegalAccessException if access rights do not permit an instance of the GUI class to be created
 * @throws NoSuchMethodException when no constructor can be found on the given  {@code guiClass}
 * @throws InvocationTargetException when the called constructor throws an exception
 */
public static void registerGUI(String key,Class<?> guiClass,Class<?> testClass) throws InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {
  JMeterGUIComponent gui;
  if (guiClass == TestBeanGUI.class) {
    gui=new TestBeanGUI(testClass);
  }
 else {
    gui=(JMeterGUIComponent)guiClass.getDeclaredConstructor().newInstance();
  }
  GUI_MAP.put(key,gui);
}
","java.lang.reflect.InvocationTargetException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\GUIFactory.java",143
1207,"'-tryline","private boolean getSaveState(String methodName) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
  Method method=SampleSaveConfiguration.class.getMethod(methodName);
  return (Boolean)method.invoke(saveConfig);
}
","java.lang.reflect.InvocationTargetException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\SavePropertyDialog.java",139
1208,"'-tryline","/** 
 * Register converter.
 * @param key
 * @param jmxsaver
 * @param useMapper
 * @throws InstantiationException
 * @throws IllegalAccessException
 * @throws InvocationTargetException
 * @throws NoSuchMethodException
 * @throws ClassNotFoundException
 */
private static void registerConverter(String key,XStream jmxsaver,boolean useMapper) throws InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException, ClassNotFoundException {
  final Class<? extends Converter> clazz=Class.forName(key).asSubclass(Converter.class);
  if (useMapper) {
    jmxsaver.registerConverter(clazz.getConstructor(Mapper.class).newInstance(jmxsaver.getMapper()));
  }
 else {
    jmxsaver.registerConverter(clazz.getDeclaredConstructor().newInstance());
  }
}
","java.lang.reflect.InvocationTargetException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\save\SaveService.java",267
1209,"'-tryline","private static Provider tryConstructorWithString(Class<Provider> providerClass,final String config) throws InstantiationException, IllegalAccessException, InvocationTargetException {
  try {
    Constructor<Provider> constructor=providerClass.getConstructor(String.class);
    return constructor.newInstance(config);
  }
 catch (  NoSuchMethodException e) {
    log.warn(Security Provider {} has no constructor with a single String argument - try to use default constructor.,providerClass);
  }
  return null;
}
","java.lang.reflect.InvocationTargetException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SecurityProviderLoader.java",81
1210,"'-tryline","/** 
 * @throws IntrospectionException when introspection fails while creating a dummy PropertyDescriptor
 * @deprecated Only for use by test cases
 */
@Deprecated public FileEditor() throws IntrospectionException {
  this(new PropertyDescriptor(dummy,null,null));
}
","java.beans.IntrospectionException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\testbeans\gui\FileEditor.java",61
1211,"'-tryline","/** 
 * Create a publisher using either the jndi.properties file or the provided parameters. Uses a static destination and persistent messages(for backward compatibility)
 * @param useProps true if a jndi.properties file is to be used
 * @param initialContextFactory the (ignored if useProps is true)
 * @param providerUrl (ignored if useProps is true)
 * @param connfactory name of the object factory to look up in context
 * @param destinationName name of the destination to use
 * @param useAuth (ignored if useProps is true)
 * @param securityPrincipal (ignored if useProps is true)
 * @param securityCredentials (ignored if useProps is true)
 * @throws JMSException if the context could not be initialised, or there was some other error
 * @throws NamingException when creation of the publisher fails
 */
public Publisher(boolean useProps,String initialContextFactory,String providerUrl,String connfactory,String destinationName,boolean useAuth,String securityPrincipal,String securityCredentials) throws JMSException, NamingException {
  this(useProps,initialContextFactory,providerUrl,connfactory,destinationName,useAuth,securityPrincipal,securityCredentials,true);
}
","org.apache.jmeter.protocol.jms.client.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\client\Publisher.java",55
1212,"'-tryline","/** 
 * Create a publisher using either the jndi.properties file or the provided parameters
 * @param useProps true if a jndi.properties file is to be used
 * @param initialContextFactory the (ignored if useProps is true)
 * @param providerUrl (ignored if useProps is true)
 * @param connfactory name of the object factory to lookup in context
 * @param destinationName name of the destination to use
 * @param useAuth (ignored if useProps is true)
 * @param securityPrincipal (ignored if useProps is true)
 * @param securityCredentials (ignored if useProps is true)
 * @param staticDestination true if the destination is not to change between loops
 * @throws JMSException if the context could not be initialised, or there was some other error
 * @throws NamingException when creation of the publisher fails
 */
public Publisher(boolean useProps,String initialContextFactory,String providerUrl,String connfactory,String destinationName,boolean useAuth,String securityPrincipal,String securityCredentials,boolean staticDestination) throws JMSException, NamingException {
  super();
  boolean initSuccess=false;
  try {
    ctx=InitialContextFactory.getContext(useProps,initialContextFactory,providerUrl,useAuth,securityPrincipal,securityCredentials);
    connection=Utils.getConnection(ctx,connfactory);
    session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
    staticDest=staticDestination;
    if (staticDest) {
      Destination dest=Utils.lookupDestination(ctx,destinationName);
      producer=session.createProducer(dest);
    }
 else {
      producer=session.createProducer(null);
    }
    initSuccess=true;
  }
  finally {
    if (!initSuccess) {
      close();
    }
  }
}
","org.apache.jmeter.protocol.jms.client.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\client\Publisher.java",91
1213,"'-tryline","public Message publish(String text,String destinationName,Map<String,Object> properties,int deliveryMode,int priority,long expiration) throws JMSException, NamingException {
  TextMessage msg=session.createTextMessage(text);
  return setPropertiesAndSend(destinationName,properties,msg,deliveryMode,priority,expiration);
}
","org.apache.jmeter.protocol.jms.client.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\client\Publisher.java",145
1214,"'-tryline","public Message publish(Serializable contents,String destinationName,Map<String,Object> properties,int deliveryMode,int priority,long expiration) throws JMSException, NamingException {
  ObjectMessage msg=session.createObjectMessage(contents);
  return setPropertiesAndSend(destinationName,properties,msg,deliveryMode,priority,expiration);
}
","org.apache.jmeter.protocol.jms.client.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\client\Publisher.java",151
1215,"'-tryline","public Message publish(byte[] bytes,String destinationName,Map<String,Object> properties,int deliveryMode,int priority,long expiration) throws JMSException, NamingException {
  BytesMessage msg=session.createBytesMessage();
  msg.writeBytes(bytes);
  return setPropertiesAndSend(destinationName,properties,msg,deliveryMode,priority,expiration);
}
","org.apache.jmeter.protocol.jms.client.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\client\Publisher.java",157
1216,"'-tryline","public MapMessage publish(Map<String,Object> map,String destinationName,Map<String,Object> properties,int deliveryMode,int priority,long expiration) throws JMSException, NamingException {
  MapMessage msg=session.createMapMessage();
  for (  Map.Entry<String,Object> me : map.entrySet()) {
    msg.setObject(me.getKey(),me.getValue());
  }
  return (MapMessage)setPropertiesAndSend(destinationName,properties,msg,deliveryMode,priority,expiration);
}
","org.apache.jmeter.protocol.jms.client.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\client\Publisher.java",164
1217,"'-tryline","/** 
 * @param destinationName
 * @param properties {@code Map<String, String>}
 * @param msg Message
 * @param deliveryMode
 * @param priority
 * @param expiration
 * @return Message
 * @throws JMSException
 * @throws NamingException
 */
private Message setPropertiesAndSend(String destinationName,Map<String,Object> properties,Message msg,int deliveryMode,int priority,long expiration) throws JMSException, NamingException {
  Utils.addJMSProperties(msg,properties);
  if (staticDest || destinationName == null) {
    producer.send(msg,deliveryMode,priority,expiration);
  }
 else {
    Destination dest=Utils.lookupDestination(ctx,destinationName);
    producer.send(dest,msg,deliveryMode,priority,expiration);
  }
  return msg;
}
","org.apache.jmeter.protocol.jms.client.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\client\Publisher.java",174
1218,"'-tryline","/** 
 * Constructor takes the necessary JNDI related parameters to create a connection and prepare to begin receiving messages. <br> The caller must then invoke  {@link #start()} to enable message reception.
 * @param useProps if <code>true</code>, use <em>jndi.properties</em> instead of <code>initialContextFactory</code>, <code>providerUrl</code>, <code>securityPrincipal</code>, <code>securityCredentials</code>
 * @param initialContextFactory name of the initial context factory (will be ignored if <code>useProps</code> is <code>true</code>)
 * @param providerUrl url of the provider (will be ignored if <code>useProps</code> is <code>true</code>)
 * @param connfactory name of the object factory to look up in context
 * @param destinationName name of the destination
 * @param durableSubscriptionId id for a durable subscription (if empty or <code>null</code> no durable subscription will be done)
 * @param clientId client id to use (may be empty or <code>null</code>)
 * @param jmsSelector Message Selector
 * @param useAuth flag whether auth should be used (will be ignored if <code>useProps</code> is <code>true</code>)
 * @param securityPrincipal name of the principal to use for auth (will be ignored if <code>useProps</code> is <code>true</code>)
 * @param securityCredentials credentials for the principal (will be ignored if <code>useProps</code> is <code>true</code>)
 * @throws JMSException if could not create context or other problem occurred.
 * @throws NamingException when lookup of context or destination fails
 */
public ReceiveSubscriber(boolean useProps,String initialContextFactory,String providerUrl,String connfactory,String destinationName,String durableSubscriptionId,String clientId,String jmsSelector,boolean useAuth,String securityPrincipal,String securityCredentials) throws NamingException, JMSException {
  this(0,useProps,initialContextFactory,providerUrl,connfactory,destinationName,durableSubscriptionId,clientId,jmsSelector,useAuth,securityPrincipal,securityCredentials,false);
}
","org.apache.jmeter.protocol.jms.client.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\client\ReceiveSubscriber.java",69
1219,"'-tryline","/** 
 * Constructor takes the necessary JNDI related parameters to create a connection and create an onMessageListener to prepare to begin receiving messages. <br> The caller must then invoke  {@link #start()} to enable message reception.
 * @param queueSize maximum queue size, where a <code>queueSize</code> &lt;=0 means no limit
 * @param useProps if <code>true</code>, use <em>jndi.properties</em> instead of <code>initialContextFactory</code>, <code>providerUrl</code>, <code>securityPrincipal</code>, <code>securityCredentials</code>
 * @param initialContextFactory name of the initial context factory (will be ignored if <code>useProps</code> is <code>true</code>)
 * @param providerUrl url of the provider (will be ignored if <code>useProps</code> is <code>true</code>)
 * @param connfactory name of the object factory to look up in context
 * @param destinationName name of the destination
 * @param durableSubscriptionId id for a durable subscription (if empty or <code>null</code> no durable subscription will be done)
 * @param clientId client id to use (may be empty or <code>null</code>)
 * @param jmsSelector Message Selector
 * @param useAuth flag whether auth should be used (will be ignored if <code>useProps</code> is <code>true</code>)
 * @param securityPrincipal name of the principal to use for auth (will be ignored if <code>useProps</code> is <code>true</code>)
 * @param securityCredentials credentials for the principal (will be ignored if <code>useProps</code> is <code>true</code>)
 * @throws JMSException if could not create context or other problem occurred.
 * @throws NamingException when lookup of context or destination fails
 */
public ReceiveSubscriber(int queueSize,boolean useProps,String initialContextFactory,String providerUrl,String connfactory,String destinationName,String durableSubscriptionId,String clientId,String jmsSelector,boolean useAuth,String securityPrincipal,String securityCredentials) throws NamingException, JMSException {
  this(queueSize,useProps,initialContextFactory,providerUrl,connfactory,destinationName,durableSubscriptionId,clientId,jmsSelector,useAuth,securityPrincipal,securityCredentials,true);
}
","org.apache.jmeter.protocol.jms.client.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\client\ReceiveSubscriber.java",120
1220,"'-tryline","/** 
 * Constructor takes the necessary JNDI related parameters to create a connection and create an onMessageListener to prepare to begin receiving messages. <br/> The caller must then invoke  {@link #start()} to enable message reception.
 * @param queueSize maximum queue, where a queueSize &lt;=0 means no limit
 * @param useProps if <code>true</code>, use <em>jndi.properties</em> instead of <code>initialContextFactory</code>, <code>providerUrl</code>, <code>securityPrincipal</code>, <code>securityCredentials</code>
 * @param initialContextFactory name of the initial context factory (will be ignored if <code>useProps</code> is <code>true</code>)
 * @param providerUrl url of the provider (will be ignored if <code>useProps</code> is <code>true</code>)
 * @param connfactory name of the object factory to look up in context
 * @param destinationName name of the destination
 * @param durableSubscriptionId id for a durable subscription (if empty or <code>null</code> no durable subscription will be done)
 * @param clientId client id to use (may be empty or <code>null</code>)
 * @param jmsSelector Message Selector
 * @param useAuth flag whether auth should be used (will be ignored if <code>useProps</code> is <code>true</code>)
 * @param securityPrincipal name of the principal to use for auth (will be ignored if <code>useProps</code> is <code>true</code>)
 * @param securityCredentials credentials for the principal (will be ignored if <code>useProps</code> is <code>true</code>)
 * @param useMessageListener if <code>true</code> create an onMessageListener to prepare to begin receiving messages, otherwise queue will be <code>null</code>
 * @throws JMSException if could not create context or other problem occurred.
 * @throws NamingException when lookup of context or destination fails
 */
private ReceiveSubscriber(int queueSize,boolean useProps,String initialContextFactory,String providerUrl,String connfactory,String destinationName,String durableSubscriptionId,String clientId,String jmsSelector,boolean useAuth,String securityPrincipal,String securityCredentials,boolean useMessageListener) throws NamingException, JMSException {
  boolean initSuccess=false;
  try {
    Context ctx=InitialContextFactory.getContext(useProps,initialContextFactory,providerUrl,useAuth,securityPrincipal,securityCredentials);
    connection=Utils.getConnection(ctx,connfactory);
    if (!isEmpty(clientId)) {
      connection.setClientID(clientId);
    }
    session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
    Destination dest=Utils.lookupDestination(ctx,destinationName);
    subscriber=createSubscriber(session,dest,durableSubscriptionId,jmsSelector);
    if (useMessageListener) {
      if (queueSize <= 0) {
        queue=new LinkedBlockingQueue<>();
      }
 else {
        queue=new LinkedBlockingQueue<>(queueSize);
      }
      subscriber.setMessageListener(this);
    }
 else {
      queue=null;
    }
    log.debug(<init> complete);
    initSuccess=true;
  }
  finally {
    if (!initSuccess) {
      close();
    }
  }
}
","org.apache.jmeter.protocol.jms.client.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\client\ReceiveSubscriber.java",176
1221,"'-tryline","/** 
 * Return a simple MessageConsumer or a TopicSubscriber (as a durable subscription)
 * @param session JMS session
 * @param destination JMS destination, can be either topic or queue
 * @param durableSubscriptionId If neither empty nor null, this means that a durable subscription will be used
 * @param jmsSelector JMS Selector
 * @return the message consumer
 * @throws JMSException
 */
private MessageConsumer createSubscriber(Session session,Destination destination,String durableSubscriptionId,String jmsSelector) throws JMSException {
  if (isEmpty(durableSubscriptionId)) {
    if (isEmpty(jmsSelector)) {
      return session.createConsumer(destination);
    }
 else {
      return session.createConsumer(destination,jmsSelector);
    }
  }
 else {
    if (isEmpty(jmsSelector)) {
      return session.createDurableSubscriber((Topic)destination,durableSubscriptionId);
    }
 else {
      return session.createDurableSubscriber((Topic)destination,durableSubscriptionId,jmsSelector,false);
    }
  }
}
","org.apache.jmeter.protocol.jms.client.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\client\ReceiveSubscriber.java",259
1222,"'-tryline","/** 
 * Calls Connection.start() to begin receiving inbound messages.
 * @throws JMSException when starting the context fails
 */
public void start() throws JMSException {
  log.debug(start());
  connection.start();
  connectionStarted=true;
}
","org.apache.jmeter.protocol.jms.client.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\client\ReceiveSubscriber.java",290
1223,"'-tryline","/** 
 * Calls Connection.stop() to stop receiving inbound messages.
 * @throws JMSException when stopping the context fails
 */
public void stop() throws JMSException {
  log.debug(stop());
  connection.stop();
  connectionStarted=false;
}
","org.apache.jmeter.protocol.jms.client.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\client\ReceiveSubscriber.java",300
1224,"'-tryline","/** 
 * Get the next message or <code>null</code>. <p> Never blocks for longer than the specified timeout.
 * @param timeout in milliseconds
 * @return the next message or <code>null</code>
 * @throws JMSException when receiving the message fails
 */
public Message getMessage(long timeout) throws JMSException {
  Message message=null;
  if (queue != null) {
    try {
      if (timeout < 10) {
        message=queue.poll();
      }
 else {
        message=queue.poll(timeout,TimeUnit.MILLISECONDS);
      }
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
    return message;
  }
  if (timeout < 10) {
    message=subscriber.receiveNoWait();
  }
 else {
    message=subscriber.receive(timeout);
  }
  return message;
}
","org.apache.jmeter.protocol.jms.client.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\client\ReceiveSubscriber.java",310
1225,"'-tryline","@Override public void process(HttpRequest request,HttpContext context) throws HttpException, IOException {
  HttpClientContext localContext=HttpClientContext.adapt(context);
  AuthManager authManager=(AuthManager)localContext.getAttribute(CONTEXT_ATTRIBUTE_AUTH_MANAGER);
  if (authManager == null) {
    Credentials credentials=null;
    HttpClientKey key=(HttpClientKey)localContext.getAttribute(CONTEXT_ATTRIBUTE_CLIENT_KEY);
    AuthScope authScope=null;
    CredentialsProvider credentialsProvider=localContext.getCredentialsProvider();
    if (key.hasProxy && !StringUtils.isEmpty(key.proxyUser)) {
      authScope=new AuthScope(key.proxyHost,key.proxyPort);
      credentials=credentialsProvider.getCredentials(authScope);
    }
    credentialsProvider.clear();
    if (credentials != null) {
      credentialsProvider.setCredentials(authScope,credentials);
    }
    return;
  }
  URI requestURI=null;
  if (request instanceof HttpUriRequest) {
    requestURI=((HttpUriRequest)request).getURI();
  }
 else {
    try {
      requestURI=new URI(request.getRequestLine().getUri());
    }
 catch (    final URISyntaxException ignore) {
    }
  }
  if (requestURI != null) {
    HttpHost targetHost=(HttpHost)context.getAttribute(HttpCoreContext.HTTP_TARGET_HOST);
    URL url;
    if (requestURI.isAbsolute()) {
      url=requestURI.toURL();
    }
 else {
      url=new URL(targetHost.getSchemeName(),targetHost.getHostName(),targetHost.getPort(),requestURI.getPath());
    }
    Authorization authorization=authManager.getAuthForURL(url);
    CredentialsProvider credentialsProvider=localContext.getCredentialsProvider();
    if (authorization != null) {
      AuthCache authCache=localContext.getAuthCache();
      if (authCache == null) {
        authCache=new BasicAuthCache();
        localContext.setAuthCache(authCache);
      }
      authManager.setupCredentials(authorization,url,localContext,credentialsProvider,LOCALHOST);
      AuthState authState=(AuthState)context.getAttribute(HttpClientContext.TARGET_AUTH_STATE);
      if (authState.getAuthScheme() == null) {
        AuthScope authScope=new AuthScope(targetHost.getHostName(),targetHost.getPort(),authorization.getRealm(),targetHost.getSchemeName());
        Credentials creds=credentialsProvider.getCredentials(authScope);
        if (creds != null) {
          fillAuthCache(targetHost,authorization,authCache,authScope);
        }
      }
    }
 else {
      credentialsProvider.clear();
    }
  }
}
","org.apache.http.HttpException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPHC4Impl.java",286
1226,"'-tryline","@Override protected HttpResponse doSendRequest(final HttpRequest request,final HttpClientConnection conn,final HttpContext context) throws IOException, HttpException {
  HttpResponse response=super.doSendRequest(request,conn,context);
  HttpConnectionMetrics metrics=conn.getMetrics();
  long sentBytesCount=metrics.getSentBytesCount();
  context.setAttribute(CONTEXT_ATTRIBUTE_SENT_BYTES,metrics.getSentBytesCount());
  context.setAttribute(CONTEXT_ATTRIBUTE_METRICS,metrics);
  log.debug(Sent {} bytes,sentBytesCount);
  metrics.reset();
  return response;
}
","org.apache.http.HttpException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPHC4Impl.java",453
1227,"'-tryline","@Override public void process(HttpResponse response,HttpContext context) throws HttpException, IOException {
  ArrayList<Header[]> headersToSave=null;
  final HttpEntity entity=response.getEntity();
  final HttpClientContext clientContext=HttpClientContext.adapt(context);
  final RequestConfig requestConfig=clientContext.getRequestConfig();
  if (requestConfig.isContentCompressionEnabled() && entity != null && entity.getContentLength() != 0) {
    final Header ceheader=entity.getContentEncoding();
    if (ceheader != null) {
      headersToSave=new ArrayList<>(3);
      for (      String name : HEADERS_TO_SAVE) {
        Header[] hdr=response.getHeaders(name);
        headersToSave.add(hdr);
      }
    }
  }
  super.process(response,clientContext);
  if (headersToSave != null) {
    for (    Header[] headers : headersToSave) {
      for (      Header headerToRestore : headers) {
        if (response.containsHeader(headerToRestore.getName())) {
          break;
        }
        response.addHeader(headerToRestore);
      }
    }
  }
}
","org.apache.http.HttpException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPHC4Impl.java",483
1228,"'-tryline","@Override public void warning(SAXParseException exception) throws SAXException {
  logger.warn(Exception parsing document, message:{},exception.getMessage());
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\assertions\LogErrorHandler.java",32
1229,"'-tryline","@Override public void error(SAXParseException exception) throws SAXException {
  logger.error(Exception parsing document, message:{},exception.getMessage());
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\assertions\LogErrorHandler.java",37
1230,"'-tryline","@Override public void fatalError(SAXParseException exception) throws SAXException {
  logger.error(Fatal Exception parsing document, message:{},exception.getMessage());
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\assertions\LogErrorHandler.java",42
1231,"'-tryline","/** 
 * Converts (X)HTML response to DOM object Tree. This version cares of charset of response.
 * @param unicodeData
 * @return the parsed document
 */
private Document parseResponse(String unicodeData) throws IOException, ParserConfigurationException, SAXException, TidyException {
  byte[] utf8data=unicodeData.getBytes(StandardCharsets.UTF_8);
  ByteArrayInputStream in=new ByteArrayInputStream(utf8data);
  boolean isXML=JOrphanUtils.isXML(utf8data);
  return XPathUtil.makeDocument(in,false,false,useNameSpace(),isTolerant(),isQuiet(),showWarnings(),reportErrors(),isXML,isDownloadDTDs());
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\extractor\XPathExtractor.java",288
1232,"'-tryline","/** 
 * Converts (X)HTML response to DOM object Tree. This version cares of charset of response.
 * @param unicodeData
 * @param extractor
 * @return Document
 */
private Document parseResponse(String unicodeData,XPathExtractor extractor) throws IOException, ParserConfigurationException, SAXException, TidyException {
  byte[] utf8data=unicodeData.getBytes(StandardCharsets.UTF_8);
  ByteArrayInputStream in=new ByteArrayInputStream(utf8data);
  boolean isXML=JOrphanUtils.isXML(utf8data);
  return XPathUtil.makeDocument(in,false,false,extractor.useNameSpace(),extractor.isTolerant(),extractor.isQuiet(),extractor.showWarnings(),extractor.reportErrors(),isXML,extractor.isDownloadDTDs());
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\RenderAsXPath.java",152
1233,"'-tryline","public XMLDefaultMutableTreeNode(Node root) throws SAXException {
  super(root.getNodeName());
  initAttributeNode(root,this);
  initRoot(root);
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\XMLDefaultMutableTreeNode.java",52
1234,"'-tryline","/** 
 * init root
 * @param xmlRoot
 * @throws SAXException
 */
private void initRoot(Node xmlRoot) throws SAXException {
  NodeList childNodes=xmlRoot.getChildNodes();
  for (int i=0; i < childNodes.getLength(); i++) {
    Node childNode=childNodes.item(i);
    initNode(childNode,this);
  }
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\XMLDefaultMutableTreeNode.java",65
1235,"'-tryline","/** 
 * init node
 * @param node
 * @param mTreeNode
 * @throws SAXException
 */
private void initNode(Node node,XMLDefaultMutableTreeNode mTreeNode) throws SAXException {
switch (node.getNodeType()) {
case Node.ELEMENT_NODE:
    initElementNode(node,mTreeNode);
  break;
case Node.TEXT_NODE:
initTextNode((Text)node,mTreeNode);
break;
case Node.CDATA_SECTION_NODE:
initCDATASectionNode((CDATASection)node,mTreeNode);
break;
case Node.COMMENT_NODE:
initCommentNode((Comment)node,mTreeNode);
break;
default :
break;
}
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\XMLDefaultMutableTreeNode.java",81
1236,"'-tryline","/** 
 * init element node
 * @param node
 * @param mTreeNode
 * @throws SAXException
 */
private void initElementNode(Node node,DefaultMutableTreeNode mTreeNode) throws SAXException {
  String nodeName=node.getNodeName();
  NodeList childNodes=node.getChildNodes();
  XMLDefaultMutableTreeNode childTreeNode=new XMLDefaultMutableTreeNode(nodeName,node);
  mTreeNode.add(childTreeNode);
  initAttributeNode(node,childTreeNode);
  for (int i=0; i < childNodes.getLength(); i++) {
    Node childNode=childNodes.item(i);
    initNode(childNode,childTreeNode);
  }
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\XMLDefaultMutableTreeNode.java",114
1237,"'-tryline","/** 
 * init attribute node
 * @param node
 * @param mTreeNode
 * @throws SAXException
 */
private void initAttributeNode(Node node,DefaultMutableTreeNode mTreeNode) throws SAXException {
  NamedNodeMap nm=node.getAttributes();
  for (int i=0; i < nm.getLength(); i++) {
    Attr nmNode=(Attr)nm.item(i);
    String value=nmNode.getName() +  = \ + nmNode.getValue()+ \;
    XMLDefaultMutableTreeNode attributeNode=new XMLDefaultMutableTreeNode(value,nmNode);
    mTreeNode.add(attributeNode);
  }
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\XMLDefaultMutableTreeNode.java",136
1238,"'-tryline","/** 
 * init comment Node
 * @param node
 * @param mTreeNode
 * @throws SAXException
 */
private void initCommentNode(Comment node,DefaultMutableTreeNode mTreeNode) throws SAXException {
  String data=node.getData();
  if (data != null && data.length() > 0) {
    String value=<!-- + node.getData() + -->;
    XMLDefaultMutableTreeNode commentNode=new XMLDefaultMutableTreeNode(value,node);
    mTreeNode.add(commentNode);
  }
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\XMLDefaultMutableTreeNode.java",154
1239,"'-tryline","/** 
 * init CDATASection Node
 * @param node
 * @param mTreeNode
 * @throws SAXException
 */
private void initCDATASectionNode(CDATASection node,DefaultMutableTreeNode mTreeNode) throws SAXException {
  String data=node.getData();
  if (data != null && data.length() > 0) {
    String value=<!-[CDATA + node.getData() + ]]>;
    XMLDefaultMutableTreeNode commentNode=new XMLDefaultMutableTreeNode(value,node);
    mTreeNode.add(commentNode);
  }
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\XMLDefaultMutableTreeNode.java",170
1240,"'-tryline","/** 
 * init the TextNode
 * @param node
 * @param mTreeNode
 * @throws SAXException
 */
private void initTextNode(Text node,DefaultMutableTreeNode mTreeNode) throws SAXException {
  String text=node.getNodeValue().trim();
  if (text != null && text.length() > 0) {
    XMLDefaultMutableTreeNode textNode=new XMLDefaultMutableTreeNode(text,node);
    mTreeNode.add(textNode);
  }
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\XMLDefaultMutableTreeNode.java",186
1241,"'-tryline","@Test public void testInvalidTemplateXml() throws IOException, SAXException, ParserConfigurationException {
  try {
    File templateFile=getFileFromResource(invalidTemplates.xml);
    TemplateManager.getInstance().parseTemplateFile(templateFile);
  }
 catch (  SAXParseException ex) {
    assertTrue(Exception did not contains expected message, got: + ex.getMessage(),ex.getMessage().contains(Element type \key\ must be declared.));
  }
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\gui\action\template\TestTemplateManager.java",108
1242,"'-tryline","@Override public void error(SAXParseException ex) throws SAXException {
  throw ex;
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\action\template\TemplateManager.java",134
1243,"'-tryline","@Override public void fatalError(SAXParseException ex) throws SAXException {
  throw ex;
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\action\template\TemplateManager.java",139
1244,"'-tryline","@Override public void warning(SAXParseException ex) throws SAXException {
  logger.warn(Warning parsing file {},file,ex);
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\action\template\TemplateManager.java",144
1245,"'-tryline","@Override public InputSource resolveEntity(String publicId,String systemId) throws SAXException, IOException {
  if (systemId.endsWith(templates.dtd)) {
    return new InputSource(TemplateManager.class.getResourceAsStream(/org/apache/jmeter/gui/action/template/templates.dtd));
  }
 else {
    return null;
  }
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\action\template\TemplateManager.java",155
1246,"'-tryline","public Map<String,Template> parseTemplateFile(File file) throws IOException, SAXException, ParserConfigurationException {
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  dbf.setValidating(true);
  dbf.setNamespaceAware(true);
  dbf.setFeature(http://xml.org/sax/features/external-general-entities,false);
  dbf.setFeature(http://xml.org/sax/features/external-parameter-entities,false);
  dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
  DocumentBuilder bd=dbf.newDocumentBuilder();
  bd.setEntityResolver(new DefaultEntityResolver());
  LoggingErrorHandler errorHandler=new LoggingErrorHandler(log,file);
  bd.setErrorHandler(errorHandler);
  Document document=bd.parse(file);
  document.getDocumentElement().normalize();
  Map<String,Template> templates=new TreeMap<>();
  NodeList templateNodes=document.getElementsByTagName(template);
  for (int i=0; i < templateNodes.getLength(); i++) {
    Node node=templateNodes.item(i);
    parseTemplateNode(templates,node);
  }
  return templates;
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\action\template\TemplateManager.java",165
1247,"'-tryline","/** 
 * Utility function to get new Document
 * @param stream - Document Input stream
 * @param validate - Validate Document (not Tidy)
 * @param whitespace - Element Whitespace (not Tidy)
 * @param namespace - Is Namespace aware. (not Tidy)
 * @param tolerant - Is tolerant - i.e. use the Tidy parser
 * @param quiet - set Tidy quiet
 * @param showWarnings - set Tidy warnings
 * @param reportErrors - throw TidyException if Tidy detects an error
 * @param isXml - is document already XML (Tidy only)
 * @param downloadDTDs - if true, try to download external DTDs
 * @return document
 * @throws ParserConfigurationException when no {@link DocumentBuilder} can be constructed for the wanted configuration
 * @throws SAXException if parsing fails
 * @throws IOException if an I/O error occurs while parsing
 * @throws TidyException if a ParseError is detected and <code>report_errors</code> is <code>true</code>
 */
public static Document makeDocument(InputStream stream,boolean validate,boolean whitespace,boolean namespace,boolean tolerant,boolean quiet,boolean showWarnings,boolean reportErrors,boolean isXml,boolean downloadDTDs) throws ParserConfigurationException, SAXException, IOException, TidyException {
  return makeDocument(stream,validate,whitespace,namespace,tolerant,quiet,showWarnings,reportErrors,isXml,downloadDTDs,null);
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\XPathUtil.java",154
1248,"'-tryline","/** 
 * Utility function to get new Document
 * @param stream - Document Input stream
 * @param validate - Validate Document (not Tidy)
 * @param whitespace - Element Whitespace (not Tidy)
 * @param namespace - Is Namespace aware. (not Tidy)
 * @param tolerant - Is tolerant - i.e. use the Tidy parser
 * @param quiet - set Tidy quiet
 * @param showWarnings - set Tidy warnings
 * @param report_errors - throw TidyException if Tidy detects an error
 * @param isXml - is document already XML (Tidy only)
 * @param downloadDTDs - if true, try to download external DTDs
 * @param tidyOut OutputStream for Tidy pretty-printing
 * @return document
 * @throws ParserConfigurationException if {@link DocumentBuilder} can not be created for the wanted configuration
 * @throws SAXException if parsing fails
 * @throws IOException if I/O error occurs while parsing
 * @throws TidyException if a ParseError is detected and <code>report_errors</code> is <code>true</code>
 */
public static Document makeDocument(InputStream stream,boolean validate,boolean whitespace,boolean namespace,boolean tolerant,boolean quiet,boolean showWarnings,boolean report_errors,boolean isXml,boolean downloadDTDs,OutputStream tidyOut) throws ParserConfigurationException, SAXException, IOException, TidyException {
  Document doc;
  if (tolerant) {
    doc=tidyDoc(stream,quiet,showWarnings,report_errors,isXml,tidyOut);
  }
 else {
    doc=makeDocumentBuilder(validate,whitespace,namespace,downloadDTDs).parse(stream);
  }
  return doc;
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\XPathUtil.java",180
1249,"'-tryline","@Override public void warning(SAXParseException ex) throws SAXException {
  if (log.isInfoEnabled()) {
    log.info(Type={}. {},type,ex.toString());
  }
  if (val && !tol) {
    throw new SAXException(ex);
  }
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\XPathUtil.java",277
1250,"'-tryline","@Override public void error(SAXParseException ex) throws SAXException {
  if (log.isWarnEnabled()) {
    log.warn(Type={}. {},type,ex.toString());
  }
  if (val && !tol) {
    throw new SAXException(ex);
  }
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\XPathUtil.java",287
1251,"'-tryline","@Override public void fatalError(SAXParseException ex) throws SAXException {
  log.error(Type={}. {},type,ex.toString());
  if (val && !tol) {
    throw new SAXException(ex);
  }
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\XPathUtil.java",297
1252,"'-tryline","@Test public void testMakeDocument() throws ParserConfigurationException, SAXException, IOException, TidyException {
  String responseData=<book><page>one</page><page>two</page><empty></empty><a><b></b></a></book>;
  Document testDoc=XPathUtil.makeDocument(new ByteArrayInputStream(responseData.getBytes(StandardCharsets.UTF_8)),false,false,false,false,false,false,false,false,false);
  AssertionResult res=new AssertionResult(test);
  String xpathquery=/book;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,false);
  assertFalse(Should not be an error,res.isError());
  assertFalse(Should not be a failure,res.isFailure());
  xpathquery=/book/error;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,false);
  assertFalse(Should not be an error,res.isError());
  assertTrue(Should be a failure,res.isFailure());
  xpathquery=count(/book/page)=2;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,false);
  assertFalse(Should not be an error,res.isError());
  assertFalse(Should not be a failure,res.isFailure());
  xpathquery=count(/book/page)=1;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,false);
  assertFalse(Should not be an error,res.isError());
  assertTrue(Should be a failure,res.isFailure());
  xpathquery=///book;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,false);
  assertTrue(Should be an error,res.isError());
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\XPathUtilTest.java",173
1253,"'-tryline","@Test public void testMakeDocumentIsnegated() throws ParserConfigurationException, SAXException, IOException, TidyException {
  String responseData=<book><preface>zero</preface><page>one</page><page>two</page><empty></empty><a><b></b></a></book>;
  Document testDoc=XPathUtil.makeDocument(new ByteArrayInputStream(responseData.getBytes(StandardCharsets.UTF_8)),false,false,false,false,false,false,false,false,false);
  AssertionResult res=new AssertionResult(test);
  String xpathquery=/book/error;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,true);
  assertFalse(Should not be an error,res.isError());
  assertFalse(Should not be a failure,res.isFailure());
  xpathquery=/book/preface;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,true);
  assertFalse(Should not be an error,res.isError());
  assertTrue(Should be a failure,res.isFailure());
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,true);
  assertFalse(Should not be an error,res.isError());
  assertTrue(Should be a failure,res.isFailure());
  xpathquery=count(/book/page)=1;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,true);
  assertFalse(Should not be an error,res.isError());
  assertFalse(Should not be a failure,res.isFailure());
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\XPathUtilTest.java",201
1254,"'-tryline","@Test public void testPutValuesForXPathInList() throws ParserConfigurationException, SAXException, IOException, TidyException, TransformerException {
  String responseData=<book><page>one</page><page>two</page><empty></empty><a><b></b></a></book>;
  Document testDoc=XPathUtil.makeDocument(new ByteArrayInputStream(responseData.getBytes(StandardCharsets.UTF_8)),false,false,false,false,false,false,false,false,false);
  String xpathquery=/book/page;
  List<String> matchs=new ArrayList<>();
  XPathUtil.putValuesForXPathInList(testDoc,xpathquery,matchs,true);
  assertEquals(<page>one</page>,matchs.get(0));
  assertEquals(<page>two</page>,matchs.get(1));
  matchs=new ArrayList<>();
  XPathUtil.putValuesForXPathInList(testDoc,xpathquery,matchs,false);
  assertEquals(one,matchs.get(0));
  assertEquals(two,matchs.get(1));
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\XPathUtilTest.java",263
1255,"'-tryline","private Element getBodyFromXMLDocument(InputStream stream) throws ParserConfigurationException, SAXException, IOException {
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  dbf.setIgnoringElementContentWhitespace(true);
  dbf.setIgnoringComments(true);
  DocumentBuilder db=dbf.newDocumentBuilder();
  Document doc=db.parse(new InputSource(stream));
  org.w3c.dom.Element root=doc.getDocumentElement();
  org.w3c.dom.Element body=(org.w3c.dom.Element)root.getElementsByTagName(body).item(0);
  return body;
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\functions\ComponentReferenceFunctionTest.java",87
1256,"'-tryline","/** 
 * @return
 * @throws ParserConfigurationException
 * @throws IOException
 * @throws SAXException
 * @throws FileNotFoundException
 */
private Element getBodyFromXMLDocument(InputStream stream) throws ParserConfigurationException, SAXException, IOException {
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  dbf.setIgnoringElementContentWhitespace(true);
  dbf.setIgnoringComments(true);
  DocumentBuilder db=dbf.newDocumentBuilder();
  Document doc=db.parse(new InputSource(stream));
  org.w3c.dom.Element root=doc.getDocumentElement();
  org.w3c.dom.Element body=(org.w3c.dom.Element)root.getElementsByTagName(body).item(0);
  return body;
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\junit\JMeterTest.java",190
1257,"'-tryline","public XPathFileContainer(String file,String xpath) throws FileNotFoundException, IOException, ParserConfigurationException, SAXException, TransformerException {
  log.debug(XPath({}) xpath {},file,xpath);
  fileName=file;
  nextRow=0;
  nodeList=load(xpath);
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\XPathFileContainer.java",57
1258,"'-tryline","private NodeList load(String xpath) throws IOException, FileNotFoundException, ParserConfigurationException, SAXException, TransformerException {
  NodeList nl=null;
  try (FileInputStream fis=new FileInputStream(fileName);BufferedInputStream bis=new BufferedInputStream(fis)){
    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
    factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
    DocumentBuilder builder=factory.newDocumentBuilder();
    nl=XPathUtil.selectNodeList(builder.parse(bis),xpath);
    if (log.isDebugEnabled()) {
      log.debug(found {},nl.getLength());
    }
  }
 catch (  TransformerException|SAXException|ParserConfigurationException|IOException e) {
    log.warn(e.toString());
    throw e;
  }
  return nl;
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\XPathFileContainer.java",65
1259,"'-tryline","/** 
 * Returns a node representing a whole xml given an xml document.
 * @param text an xml document (as a byte array)
 * @return a node representing a whole xml
 * @throws SAXException indicates an error parsing the xml document
 */
private static Node getDOM(byte[] text,String encoding) throws SAXException {
  log.debug(Start : getDOM);
  Node node=getTidyParser(encoding).parseDOM(new ByteArrayInputStream(text),null);
  if (log.isDebugEnabled()) {
    log.debug(node : {},node);
  }
  log.debug(End   : getDOM);
  return node;
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\parser\JTidyHTMLParser.java",232
1260,"'-tryline","@Override public void error(SAXParseException e) throws SAXException {
  this.errorDetected=true;
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\DefaultSamplerCreator.java",333
1261,"'-tryline","@Override public void fatalError(SAXParseException e) throws SAXException {
  this.errorDetected=true;
}
","org.xml.sax.SAXException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\DefaultSamplerCreator.java",341
1262,"'-tryline","private static String checksum(Properties nameMap) throws NoSuchAlgorithmException {
  MessageDigest md=MessageDigest.getInstance(SHA-1);
  nameMap.entrySet().stream().sorted(Comparator.comparing((  Map.Entry<Object,Object> e) -> e.getKey().toString()).thenComparing(e -> e.getValue().toString())).forEachOrdered(e -> {
    md.update(e.getKey().toString().getBytes(StandardCharsets.UTF_8));
    md.update(e.getValue().toString().getBytes(StandardCharsets.UTF_8));
  }
);
  return JOrphanUtils.baToHexString(md.digest());
}
","java.security.NoSuchAlgorithmException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\save\SaveService.java",203
1263,"'-tryline","/** 
 * Process the input stream and try to read the keys from the store
 * @param is    {@link InputStream} from which the store should be loaded
 * @param pword the password used to check the integrity of the store
 * @throws IOException               if there is a problem decoding or reading the store. A badpassword might be the cause for this, or an empty store
 * @throws CertificateException      if any of the certificated in the store can not be loaded
 * @throws NoSuchAlgorithmException  if the algorithm to check the integrity of the store can notbe found
 * @throws KeyStoreException         if the store has not been initialized (should not happenhere)
 * @throws UnrecoverableKeyException if the key can not be recovered from the store (should nothappen here, either)
 */
@SuppressWarnings(JdkObsolete) public void load(InputStream is,String pword) throws NoSuchAlgorithmException, CertificateException, IOException, KeyStoreException, UnrecoverableKeyException {
  char[] pw=toCharArrayOrNull(pword);
  store.load(is,pw);
  List<String> aliasesList=new ArrayList<>();
  this.privateKeyByAlias=new HashMap<>();
  this.certsByAlias=new HashMap<>();
  PrivateKey privateKey=null;
  int index=0;
  Enumeration<String> aliases=store.aliases();
  while (aliases.hasMoreElements()) {
    String alias=aliases.nextElement();
    if (!store.isKeyEntry(alias)) {
      continue;
    }
    if (isIndexInConfiguredRange(index)) {
      privateKey=Objects.requireNonNull((PrivateKey)store.getKey(alias,pw),No key found for alias:  + alias);
      Certificate[] chain=Objects.requireNonNull(store.getCertificateChain(alias),No certificate chain found for alias + alias);
      aliasesList.add(alias);
      privateKeyByAlias.put(alias,privateKey);
      certsByAlias.put(alias,toX509Certificates(chain));
    }
    index++;
  }
  if (is != null) {
    Objects.requireNonNull(privateKey,No key(s) found);
    if (endIndex != -1 && index <= endIndex - startIndex && log.isWarnEnabled()) {
      log.warn(Did not find as much aliases as configured in indexes Start={}, end={}, found={},startIndex,endIndex,certsByAlias.size());
    }
  }
  this.names=aliasesList.toArray(new String[aliasesList.size()]);
}
","java.security.NoSuchAlgorithmException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\keystore\JmeterKeyStore.java",90
1264,"'-tryline","private void retryLoadKeys(File initStore,boolean allowEmptyPassword) throws NoSuchAlgorithmException, CertificateException, IOException, KeyStoreException, UnrecoverableKeyException {
  for (int i=0; i < 3; i++) {
    String password=getPassword();
    if (!allowEmptyPassword) {
      Validate.notNull(password,Password for keystore must not be null);
    }
    try {
      if (initStore == null) {
        this.keyStore.load(null,password);
      }
 else {
        try (InputStream fis=new FileInputStream(initStore)){
          this.keyStore.load(fis,password);
        }
       }
      return;
    }
 catch (    IOException e) {
      log.debug(Could not load keystore. Wrong password for keystore?,e);
    }
    this.defaultpw=null;
  }
}
","java.security.NoSuchAlgorithmException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SSLManager.java",169
1265,"'-tryline","@BeforeEach public void setUp() throws UnsupportedEncodingException {
  jmctx=JMeterContextService.getContext();
  extractor=new XPath2Extractor();
  extractor.setThreadContext(jmctx);
  extractor.setRefName(VAL_NAME);
  extractor.setDefaultValue(Default);
  result=new SampleResult();
  data=<book><preface title='Intro'>zero</preface><page>one</page><page>two</page><empty></empty><a><b></b></a></book>;
  result.setResponseData(data.getBytes(UTF-8));
  vars=new JMeterVariables();
  jmctx.setVariables(vars);
  jmctx.setPreviousResult(result);
}
","java.io.UnsupportedEncodingException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\extractor\TestXPath2Extractor.java",42
1266,"'-tryline","@BeforeEach public void setUp() throws UnsupportedEncodingException {
  jmctx=JMeterContextService.getContext();
  extractor=new XPathExtractor();
  extractor.setThreadContext(jmctx);
  extractor.setRefName(VAL_NAME);
  extractor.setDefaultValue(Default);
  result=new SampleResult();
  data=<book><preface title='Intro'>zero</preface><page>one</page><page>two</page><empty></empty><a><b></b></a></book>;
  result.setResponseData(data.getBytes(UTF-8));
  vars=new JMeterVariables();
  jmctx.setVariables(vars);
  jmctx.setPreviousResult(result);
}
","java.io.UnsupportedEncodingException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\extractor\TestXPathExtractor.java",48
1267,"'-tryline","/** 
 * Embed an array of bytes as a string with <code>encoding</code> in a xml-cdata section
 * @param chars bytes to be encoded and embedded
 * @param encoding the encoding to be used
 * @return the encoded string embedded in a xml-cdata section
 * @throws UnsupportedEncodingException when the bytes can not be encoded using <code>encoding</code>
 */
public static String cdata(byte[] chars,String encoding) throws UnsupportedEncodingException {
  return <![CDATA[ + new String(chars,encoding) + ]]>;
}
","java.io.UnsupportedEncodingException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\save\converters\ConversionHelp.java",124
1268,"'-tryline","/** 
 * Create UrlEncodedFormEntity from parameters
 * @param contentEncoding Content encoding may be null or empty
 * @return {@link UrlEncodedFormEntity}
 * @throws UnsupportedEncodingException
 */
private UrlEncodedFormEntity createUrlEncodedFormEntity(final String contentEncoding) throws UnsupportedEncodingException {
  PropertyIterator args=getArguments().iterator();
  List<NameValuePair> nvps=new ArrayList<>();
  String urlContentEncoding=contentEncoding;
  if (urlContentEncoding == null || urlContentEncoding.length() == 0) {
    urlContentEncoding=EncoderCache.URL_ARGUMENT_ENCODING;
  }
  while (args.hasNext()) {
    HTTPArgument arg=(HTTPArgument)args.next().getObjectValue();
    String parameterName=arg.getName();
    if (arg.isSkippable(parameterName)) {
      continue;
    }
    String parameterValue=arg.getValue();
    if (!arg.isAlwaysEncoded()) {
      parameterName=URLDecoder.decode(parameterName,urlContentEncoding);
      parameterValue=URLDecoder.decode(parameterValue,urlContentEncoding);
    }
    nvps.add(new BasicNameValuePair(parameterName,parameterValue));
  }
  return new UrlEncodedFormEntity(nvps,urlContentEncoding);
}
","java.io.UnsupportedEncodingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPHC4Impl.java",1777
1269,"'-tryline","private void write(OutputStream out,String value) throws UnsupportedEncodingException, IOException {
  out.write(value.getBytes(ENCODING));
}
","java.io.UnsupportedEncodingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\PostWriter.java",440
1270,"'-tryline","private void writeln(OutputStream out,String value) throws UnsupportedEncodingException, IOException {
  out.write(value.getBytes(ENCODING));
  out.write(CRLF);
}
","java.io.UnsupportedEncodingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\PostWriter.java",447
1271,"'-tryline","/** 
 * Get the specified value URL encoded using the specified encoding
 * @param k the value to encode
 * @param contentEncoding the encoding to use when URL encoding
 * @return the value URL encoded using the specified encoding
 * @throws UnsupportedEncodingException if the specified encoding is not supported
 */
public String getEncoded(String k,String contentEncoding) throws UnsupportedEncodingException {
  String cacheKey=k + contentEncoding;
  Object encodedValue=cache.getElement(cacheKey);
  if (encodedValue != null) {
    return (String)encodedValue;
  }
  encodedValue=URLEncoder.encode(k,contentEncoding);
  cache.addElement(cacheKey,encodedValue);
  return (String)encodedValue;
}
","java.io.UnsupportedEncodingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\util\EncoderCache.java",55
1272,"'-tryline","/** 
 * Parse  {@code postData} and convert it to a {@link GraphQLRequestParams} object if it is a valid GraphQL post data.
 * @param postData post data
 * @param contentEncoding content encoding
 * @return a converted {@link GraphQLRequestParams} object form the {@code postData}
 * @throws IllegalArgumentException if {@code postData} is not a GraphQL post JSON data or not a valid JSON
 * @throws JsonProcessingException if it fails to serialize a parsed JSON object to string
 * @throws UnsupportedEncodingException if it fails to decode parameter value
 */
public static GraphQLRequestParams toGraphQLRequestParams(byte[] postData,final String contentEncoding) throws JsonProcessingException, UnsupportedEncodingException {
  final String encoding=StringUtils.isNotEmpty(contentEncoding) ? contentEncoding : EncoderCache.URL_ARGUMENT_ENCODING;
  final ObjectMapper mapper=new ObjectMapper();
  ObjectNode data;
  try (InputStreamReader reader=new InputStreamReader(new ByteArrayInputStream(postData),encoding)){
    data=mapper.readValue(reader,ObjectNode.class);
  }
 catch (  IOException e) {
    throw new IllegalArgumentException(Invalid json data:  + e.getLocalizedMessage());
  }
  String operationName=null;
  String query;
  String variables=null;
  final JsonNode operationNameNode=data.has(OPERATION_NAME_FIELD) ? data.get(OPERATION_NAME_FIELD) : null;
  if (operationNameNode != null) {
    operationName=getJsonNodeTextContent(operationNameNode,true);
  }
  if (!data.has(QUERY_FIELD)) {
    throw new IllegalArgumentException(Not a valid GraphQL query.);
  }
  final JsonNode queryNode=data.get(QUERY_FIELD);
  query=getJsonNodeTextContent(queryNode,false);
  final String trimmedQuery=StringUtils.trim(query);
  if (!StringUtils.startsWith(trimmedQuery,QUERY_FIELD) && !StringUtils.startsWith(trimmedQuery,mutation)) {
    throw new IllegalArgumentException(Not a valid GraphQL query.);
  }
  final JsonNode variablesNode=data.has(VARIABLES_FIELD) ? data.get(VARIABLES_FIELD) : null;
  if (variablesNode != null) {
    final JsonNodeType nodeType=variablesNode.getNodeType();
    if (nodeType != JsonNodeType.NULL) {
      if (nodeType == JsonNodeType.OBJECT) {
        variables=mapper.writeValueAsString(variablesNode);
      }
 else {
        throw new IllegalArgumentException(Not a valid object node for GraphQL variables.);
      }
    }
  }
  return new GraphQLRequestParams(operationName,query,variables);
}
","java.io.UnsupportedEncodingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\util\GraphQLRequestParamUtils.java",134
1273,"'-tryline","/** 
 * Parse  {@code arguments} and convert it to a {@link GraphQLRequestParams} object if it has valid GraphQL HTTP arguments.
 * @param arguments arguments
 * @param contentEncoding content encoding
 * @return a converted {@link GraphQLRequestParams} object form the {@code arguments}
 * @throws IllegalArgumentException if {@code arguments} does not contain valid GraphQL request arguments
 * @throws UnsupportedEncodingException if it fails to decode parameter value
 */
public static GraphQLRequestParams toGraphQLRequestParams(final Arguments arguments,final String contentEncoding) throws UnsupportedEncodingException {
  final String encoding=StringUtils.defaultIfEmpty(contentEncoding,EncoderCache.URL_ARGUMENT_ENCODING);
  String operationName=null;
  String query=null;
  String variables=null;
  for (  JMeterProperty prop : arguments) {
    final Argument arg=(Argument)prop.getObjectValue();
    if (!(arg instanceof HTTPArgument)) {
      continue;
    }
    final String name=arg.getName();
    final String metadata=arg.getMetaData();
    final String value=StringUtils.trimToNull(arg.getValue());
    if (=.equals(metadata) && value != null) {
      final boolean alwaysEncoded=((HTTPArgument)arg).isAlwaysEncoded();
      if (OPERATION_NAME_FIELD.equals(name)) {
        operationName=encodedField(value,encoding,alwaysEncoded);
      }
 else       if (QUERY_FIELD.equals(name)) {
        query=encodedField(value,encoding,alwaysEncoded);
      }
 else       if (VARIABLES_FIELD.equals(name)) {
        variables=encodedField(value,encoding,alwaysEncoded);
      }
    }
  }
  if (isNoQueryOrMutation(query)) {
    throw new IllegalArgumentException(Not a valid GraphQL query.);
  }
  if (isNoJsonObject(variables)) {
    throw new IllegalArgumentException(Not a valid object node for GraphQL variables.);
  }
  return new GraphQLRequestParams(operationName,query,variables);
}
","java.io.UnsupportedEncodingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\util\GraphQLRequestParamUtils.java",191
1274,"'-tryline","private static String encodedField(final String value,final String encoding,final boolean isEncoded) throws UnsupportedEncodingException {
  if (isEncoded) {
    return value;
  }
  return URLDecoder.decode(value,encoding);
}
","java.io.UnsupportedEncodingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\util\GraphQLRequestParamUtils.java",241
1275,"'-tryline","/** 
 * Get the argument value encoded in the specified encoding
 * @param contentEncoding the encoding to use when encoding the argument value
 * @return the argument value encoded in the specified encoding
 * @throws UnsupportedEncodingException of the encoding is not supported
 */
public String getEncodedValue(String contentEncoding) throws UnsupportedEncodingException {
  if (isAlwaysEncoded()) {
    return cache.getEncoded(getValue(),contentEncoding);
  }
 else {
    return getValue();
  }
}
","java.io.UnsupportedEncodingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\util\HTTPArgument.java",238
1276,"'-tryline","/** 
 * Check that the two byte arrays have identical content
 */
private void checkArraysHaveSameContent(byte[] expected,byte[] actual) throws UnsupportedEncodingException {
  if (expected != null && actual != null) {
    if (expected.length != actual.length) {
      System.out.println(>>>>>>>>>>>>>>>>>>>> (expected) : length  + expected.length);
      System.out.println(new String(expected,UTF-8));
      System.out.println(==================== (actual) : length  + actual.length);
      System.out.println(new String(actual,UTF-8));
      System.out.println(<<<<<<<<<<<<<<<<<<<<);
      fail(arrays have different length, expected is  + expected.length + , actual is + actual.length);
    }
 else {
      for (int i=0; i < expected.length; i++) {
        if (expected[i] != actual[i]) {
          System.out.println(>>>>>>>>>>>>>>>>>>>> (expected) : length  + expected.length);
          System.out.println(new String(expected,0,i + 1,ISO_8859_1));
          System.out.println(==================== (actual) : length  + actual.length);
          System.out.println(new String(actual,0,i + 1,ISO_8859_1));
          System.out.println(<<<<<<<<<<<<<<<<<<<<);
          fail(byte at position  + i +  is different, expected is + expected[i]+ , actual is + actual[i]);
        }
      }
    }
  }
 else {
    fail(expected or actual byte arrays were null);
  }
}
","java.io.UnsupportedEncodingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestHTTPMirrorThread.java",411
1277,"'-tryline","/** 
 * Check that the two byte arrays have identical content
 */
private void checkArraysHaveSameContent(byte[] expected,byte[] actual) throws UnsupportedEncodingException {
  if (expected != null && actual != null) {
    if (expected.length != actual.length) {
      System.out.println(new String(expected,UTF_8));
      System.out.println(--------------------);
      System.out.println(new String(actual,UTF_8));
      System.out.println(====================);
      fail(arrays have different length, expected is  + expected.length + , actual is + actual.length);
    }
 else {
      for (int i=0; i < expected.length; i++) {
        if (expected[i] != actual[i]) {
          System.out.println(new String(expected,0,i + 1,UTF_8));
          System.out.println(--------------------);
          System.out.println(new String(actual,0,i + 1,UTF_8));
          System.out.println(====================);
          fail(byte at position  + i +  is different, expected is + expected[i]+ , actual is + actual[i]);
        }
      }
    }
  }
 else {
    fail(expected or actual byte arrays were null);
  }
}
","java.io.UnsupportedEncodingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\PostWriterTest.java",831
1278,"'-tryline","/** 
 * Check that the two byte arrays have identical content 
 */
private void checkArraysHaveSameContent(byte[] expected,byte[] actual,String encoding,HTTPSampleResult res) throws UnsupportedEncodingException {
  if (expected != null && actual != null) {
    if (expected.length != actual.length) {
      System.out.println(\n>>>>>>>>>>>>>>>>>>>> expected:);
      System.out.println(new String(expected,encoding));
      System.out.println(==================== actual:);
      System.out.println(new String(actual,encoding));
      System.out.println(<<<<<<<<<<<<<<<<<<<<);
      if (res != null) {
        System.out.println(URL= + res.getUrlAsString());
      }
      fail(arrays have different length, expected is  + expected.length + , actual is + actual.length);
    }
 else {
      for (int i=0; i < expected.length; i++) {
        if (expected[i] != actual[i]) {
          System.out.println(\n>>>>>>>>>>>>>>>>>>>> expected:);
          System.out.println(new String(expected,0,i + 1,encoding));
          System.out.println(==================== actual:);
          System.out.println(new String(actual,0,i + 1,encoding));
          System.out.println(<<<<<<<<<<<<<<<<<<<<);
          if (res != null) {
            System.out.println(URL= + res.getUrlAsString());
          }
          fail(byte at position  + i +  is different, expected is + expected[i]+ , actual is + actual[i]);
        }
      }
    }
  }
 else {
    if (res != null) {
      System.out.println(URL= + res.getUrlAsString());
    }
    fail(expected or actual byte arrays were null);
  }
}
","java.io.UnsupportedEncodingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",1287
1279,"'-tryline","@ParameterizedTest @ValueSource(strings={,{}}) void testInvalidJsonData(String postDataAsString) throws JsonProcessingException, UnsupportedEncodingException {
  byte[] postData=postDataAsString.getBytes(StandardCharsets.UTF_8);
  assertThrows(IllegalArgumentException.class,() -> {
    GraphQLRequestParamUtils.toGraphQLRequestParams(postData,null);
  }
);
}
","java.io.UnsupportedEncodingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\util\TestGraphQLRequestParamUtils.java",133
1280,"'-tryline","@ParameterizedTest @ValueSource(strings={{\query\:\select * from emp\},{\operationName\:{\id\:123},\query\:\query { droid { id }}\},{\variables\:\r2d2\,\query\:\query { droid { id }}\}}) void testInvalidGraphQueryParam(String postDataAsString) throws JsonProcessingException, UnsupportedEncodingException {
  byte[] postData=postDataAsString.getBytes(StandardCharsets.UTF_8);
  assertThrows(IllegalArgumentException.class,() -> {
    GraphQLRequestParamUtils.toGraphQLRequestParams(postData,null);
  }
);
}
","java.io.UnsupportedEncodingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\util\TestGraphQLRequestParamUtils.java",143
1281,"'-tryline","@Test void testMissingParams() throws UnsupportedEncodingException {
  Arguments args=new Arguments();
  assertThrows(IllegalArgumentException.class,() -> GraphQLRequestParamUtils.toGraphQLRequestParams(args,null));
}
","java.io.UnsupportedEncodingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\util\TestGraphQLRequestParamUtils.java",188
1282,"'-tryline","@Test void testInvalidQueryParam() throws UnsupportedEncodingException {
  Arguments args=new Arguments();
  args.addArgument(new HTTPArgument(query,select * from emp,=,false));
  assertThrows(IllegalArgumentException.class,() -> GraphQLRequestParamUtils.toGraphQLRequestParams(args,null));
}
","java.io.UnsupportedEncodingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\util\TestGraphQLRequestParamUtils.java",195
1283,"'-tryline","@Test void testInvalidQueryParamVariables() throws UnsupportedEncodingException {
  Arguments args=new Arguments();
  args.addArgument(new HTTPArgument(query,query { droid { id }},=,false));
  args.addArgument(new HTTPArgument(variables,r2d2,=,false));
  assertThrows(IllegalArgumentException.class,() -> GraphQLRequestParamUtils.toGraphQLRequestParams(args,null));
}
","java.io.UnsupportedEncodingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\util\TestGraphQLRequestParamUtils.java",203
1284,"'-tryline","private String resultSetsToString(PreparedStatement pstmt,boolean result,int[] out) throws SQLException, UnsupportedEncodingException {
  StringBuilder sb=new StringBuilder();
  int updateCount=0;
  boolean currentResult=result;
  if (!currentResult) {
    updateCount=pstmt.getUpdateCount();
  }
  do {
    if (currentResult) {
      ResultSet rs=null;
      try {
        rs=pstmt.getResultSet();
        sb.append(getStringFromResultSet(rs)).append(\n);
      }
  finally {
        close(rs);
      }
    }
 else {
      sb.append(updateCount).append( updates.\n);
    }
    currentResult=pstmt.getMoreResults();
    if (!currentResult) {
      updateCount=pstmt.getUpdateCount();
    }
  }
 while (currentResult || (updateCount != -1));
  if (out != null && pstmt instanceof CallableStatement) {
    List<Object> outputValues=new ArrayList<>();
    CallableStatement cs=(CallableStatement)pstmt;
    sb.append(Output variables by position:\n);
    for (int i=0; i < out.length; i++) {
      if (out[i] != java.sql.Types.NULL) {
        Object o=cs.getObject(i + 1);
        outputValues.add(o);
        sb.append([);
        sb.append(i + 1);
        sb.append(] );
        sb.append(o);
        if (o instanceof java.sql.ResultSet && RS_COUNT_RECORDS.equals(resultSetHandler)) {
          sb.append( ).append(countRows((ResultSet)o)).append( rows);
        }
        sb.append(\n);
      }
    }
    String[] varnames=getVariableNames().split(COMMA);
    if (varnames.length > 0) {
      JMeterVariables jmvars=getThreadContext().getVariables();
      for (int i=0; i < varnames.length && i < outputValues.size(); i++) {
        String name=varnames[i].trim();
        if (name.length() > 0) {
          Object o=outputValues.get(i);
          if (o instanceof java.sql.ResultSet) {
            putIntoVar(jmvars,name,(java.sql.ResultSet)o);
          }
 else           if (o instanceof java.sql.Clob) {
            putIntoVar(jmvars,name,(java.sql.Clob)o);
          }
 else           if (o instanceof java.sql.Blob) {
            putIntoVar(jmvars,name,(java.sql.Blob)o);
          }
 else {
            jmvars.put(name,o == null ? null : o.toString());
          }
        }
      }
    }
  }
  return sb.toString();
}
","java.io.UnsupportedEncodingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jdbc\src\main\java\org\apache\jmeter\protocol\jdbc\AbstractJDBCTestElement.java",240
1285,"'-tryline","/** 
 * Gets a Data object from a ResultSet.
 * @param rs ResultSet passed in from a database query
 * @return a Data object
 * @throws java.sql.SQLException
 * @throws UnsupportedEncodingException
 */
private String getStringFromResultSet(ResultSet rs) throws SQLException, UnsupportedEncodingException {
  ResultSetMetaData meta=rs.getMetaData();
  StringBuilder sb=new StringBuilder();
  int numColumns=meta.getColumnCount();
  for (int i=1; i <= numColumns; i++) {
    sb.append(meta.getColumnLabel(i));
    if (i == numColumns) {
      sb.append('\n');
    }
 else {
      sb.append('\t');
    }
  }
  JMeterVariables jmvars=getThreadContext().getVariables();
  String[] varNames=getVariableNames().split(COMMA);
  String currentResultVariable=getResultVariable().trim();
  List<Map<String,Object>> results=null;
  if (!currentResultVariable.isEmpty()) {
    results=new ArrayList<>();
    jmvars.putObject(currentResultVariable,results);
  }
  int currentIterationIndex=0;
  int resultSetMaxRows=getIntegerResultSetMaxRows();
  if (resultSetMaxRows < 0) {
    while (rs.next()) {
      currentIterationIndex=processRow(rs,meta,sb,numColumns,jmvars,varNames,results,currentIterationIndex);
    }
  }
 else {
    while (currentIterationIndex < resultSetMaxRows && rs.next()) {
      currentIterationIndex=processRow(rs,meta,sb,numColumns,jmvars,varNames,results,currentIterationIndex);
    }
  }
  for (  String varName : varNames) {
    String name=varName.trim();
    if (name.length() > 0 && jmvars != null) {
      final String varCount=name + _#;
      String prevCount=jmvars.get(varCount);
      if (prevCount != null) {
        int prev=Integer.parseInt(prevCount);
        for (int n=currentIterationIndex + 1; n <= prev; n++) {
          jmvars.remove(name + UNDERSCORE + n);
        }
      }
      jmvars.put(varCount,Integer.toString(currentIterationIndex));
    }
  }
  return sb.toString();
}
","java.io.UnsupportedEncodingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jdbc\src\main\java\org\apache\jmeter\protocol\jdbc\AbstractJDBCTestElement.java",521
1286,"'-tryline","private int processRow(ResultSet rs,ResultSetMetaData meta,StringBuilder sb,int numColumns,JMeterVariables jmvars,String[] varNames,List<Map<String,Object>> results,int currentIterationIndex) throws SQLException, UnsupportedEncodingException {
  Map<String,Object> row=null;
  currentIterationIndex++;
  for (int i=1; i <= numColumns; i++) {
    Object o=rs.getObject(i);
    if (results != null) {
      if (row == null) {
        row=new HashMap<>(numColumns);
        results.add(row);
      }
      row.put(meta.getColumnLabel(i),o);
    }
    if (o instanceof byte[]) {
      o=new String((byte[])o,ENCODING);
    }
    sb.append(o);
    if (i == numColumns) {
      sb.append('\n');
    }
 else {
      sb.append('\t');
    }
    if (i <= varNames.length) {
      String name=varNames[i - 1].trim();
      if (name.length() > 0) {
        jmvars.put(name + UNDERSCORE + currentIterationIndex,o == null ? null : o.toString());
      }
    }
  }
  return currentIterationIndex;
}
","java.io.UnsupportedEncodingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jdbc\src\main\java\org\apache\jmeter\protocol\jdbc\AbstractJDBCTestElement.java",585
1287,"'-tryline","@ParameterizedTest @ValueSource(strings={UTF-8,Cp1252}) public void testGetContent(String encoding) throws UnsupportedEncodingException, IOException {
  String value=Ã©Ã¨â‚¬;
  byte[] expected=value.getBytes(encoding);
  String filename=writeFile(encoding,expected);
  byte[] actual=render.getContent(filename);
  assertArrayEquals(expected,actual,value:  + value);
}
","java.io.UnsupportedEncodingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\test\java\org\apache\jmeter\protocol\jms\sampler\render\BinaryMessageRendererTest.java",53
1288,"'-tryline","@ParameterizedTest @ValueSource(strings={UTF-8,Cp1252}) public void testGetContent(String encoding) throws UnsupportedEncodingException, IOException {
  String value=Ã©Ã¨â‚¬;
  byte[] expected=value.getBytes(encoding);
  String filename=writeFile(encoding,expected);
  String actual=render.getContent(new FileKey(filename,encoding));
  assertEquals(value,actual);
}
","java.io.UnsupportedEncodingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\test\java\org\apache\jmeter\protocol\jms\sampler\render\TextMessageRendererTest.java",40
1289,"'-tryline","@Override public void runTest() throws Throwable {
  if (testLocale == null) {
    super.runTest();
    return;
  }
  if (bundle == defaultBundle) {
    checkAllNecessaryKeysPresent();
  }
 else {
    checkNoInventedKeys();
  }
}
","java.lang.Throwable","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\testbeans\gui\PackageTest.java",110
1290,"'-tryline","/** 
 * Ensures that the <code>dispose</code> method of this MenuScroller is called when there are no more references to it.
 * @see MenuScroller#dispose()
 */
@Override @SuppressWarnings(deprecation) public void finalize() throws Throwable {
  dispose();
  super.finalize();
}
","java.lang.Throwable","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\gui\MenuScroller.java",517
1291,"'-tryline","@Override protected void runTest() throws Throwable {
  try {
    long start=System.currentTimeMillis();
    method.invoke(testObject,(Object[])null);
    if (expectedException != None.class) {
      throw new AssertionFailedError(No error was generated for a test case which specifies an error.);
    }
    if (timeout > 0) {
      long elapsed=System.currentTimeMillis() - start;
      if (elapsed > timeout) {
        throw new AssertionFailedError(Test took longer than the specified timeout.);
      }
    }
  }
 catch (  InvocationTargetException e) {
    Throwable thrown=e.getCause();
    if (thrown == null) {
      throw e;
    }
    if (expectedException == None.class) {
      if (thrown instanceof AssertionError && !(thrown instanceof AssertionFailedError)) {
        AssertionFailedError afe=new AssertionFailedError(thrown.toString());
        afe.setStackTrace(thrown.getStackTrace());
        throw afe;
      }
      throw thrown;
    }
    if (!expectedException.isAssignableFrom(thrown.getClass())) {
      throw new AssertionFailedError(The wrong exception was thrown from the test case);
    }
  }
}
","java.lang.Throwable","C:\Users\pavan\Downloads\jmeter-master\src\protocol\junit\src\main\java\org\apache\jmeter\protocol\java\sampler\JUnitSampler.java",592
1292,"'-tryline","/** 
 * Extract value from Document d by XPath query.
 * @param d the document
 * @param query the query to execute
 * @param matchStrings list of matched strings (may include nulls)
 * @param matchNumber int Match Number
 * @throws TransformerException
 */
private void getValuesForXPath(Document d,String query,List<String> matchStrings,int matchNumber) throws TransformerException {
  XPathUtil.putValuesForXPathInList(d,query,matchStrings,getFragment(),matchNumber);
}
","javax.xml.transform.TransformerException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\extractor\XPathExtractor.java",312
1293,"'-tryline","/** 
 * Extract NodeList using expression
 * @param document {@link Document}
 * @param xPathExpression XPath expression
 * @return {@link NodeList}
 * @throws TransformerException when the internally used xpath engine fails
 */
public static NodeList selectNodeList(Document document,String xPathExpression) throws TransformerException {
  XObject xObject=XPathAPI.eval(document,xPathExpression,getPrefixResolver(document));
  return xObject.nodelist();
}
","javax.xml.transform.TransformerException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\XPathUtil.java",340
1294,"'-tryline","/** 
 * Put in matchStrings results of evaluation
 * @param document XML document
 * @param xPathQuery XPath Query
 * @param matchStrings List of strings that will be filled
 * @param fragment return fragment
 * @throws TransformerException when the internally used xpath engine fails
 */
public static void putValuesForXPathInList(Document document,String xPathQuery,List<String> matchStrings,boolean fragment) throws TransformerException {
  putValuesForXPathInList(document,xPathQuery,matchStrings,fragment,-1);
}
","javax.xml.transform.TransformerException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\XPathUtil.java",352
1295,"'-tryline","/** 
 * Put in matchStrings results of evaluation
 * @param document XML document
 * @param xPathQuery XPath Query
 * @param matchStrings List of strings that will be filled
 * @param fragment return fragment
 * @param matchNumber match number
 * @throws TransformerException when the internally used xpath engine fails
 */
public static void putValuesForXPathInList(Document document,String xPathQuery,List<String> matchStrings,boolean fragment,int matchNumber) throws TransformerException {
  String val=null;
  XObject xObject=XPathAPI.eval(document,xPathQuery,getPrefixResolver(document));
  final int objectType=xObject.getType();
  if (objectType == XObject.CLASS_NODESET) {
    NodeList matches=xObject.nodelist();
    int length=matches.getLength();
    int indexToMatch=matchNumber;
    if (matchNumber == 0 && length > 0) {
      indexToMatch=JMeterUtils.getRandomInt(length) + 1;
    }
    for (int i=0; i < length; i++) {
      Node match=matches.item(i);
      if (indexToMatch >= 0 && indexToMatch != (i + 1)) {
        continue;
      }
      if (match instanceof Element) {
        if (fragment) {
          val=getNodeContent(match);
        }
 else {
          val=getValueForNode(match);
        }
      }
 else {
        val=match.getNodeValue();
      }
      matchStrings.add(val);
    }
  }
 else   if (objectType == XObject.CLASS_NULL || objectType == XObject.CLASS_UNKNOWN || objectType == XObject.CLASS_UNRESOLVEDVARIABLE) {
    if (log.isWarnEnabled()) {
      log.warn(Unexpected object type: {} returned for: {},xObject.getTypeString(),xPathQuery);
    }
  }
 else {
    val=xObject.toString();
    matchStrings.add(val);
  }
}
","javax.xml.transform.TransformerException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\XPathUtil.java",366
1296,"'-tryline","/** 
 * Validate xpathString is a valid XPath expression
 * @param document XML Document
 * @param xpathString XPATH String
 * @throws TransformerException if expression fails to evaluate
 */
public static void validateXPath(Document document,String xpathString) throws TransformerException {
  if (XPathAPI.eval(document,xpathString,getPrefixResolver(document)) == null) {
    throw new IllegalArgumentException(xpath eval of ' + xpathString + ' was null);
  }
}
","javax.xml.transform.TransformerException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\XPathUtil.java",569
1297,"'-tryline","/** 
 * Validate xpathString is a valid XPath expression
 * @param document XML Document
 * @param xpathString XPATH String
 * @param namespaces Space separated set of prefix=namespace
 * @throws TransformerException if expression fails to evaluate
 */
public static void validateXPath2(Document document,String xpathString,String namespaces) throws TransformerException {
  if (XPathAPI.eval(document,xpathString,getPrefixResolverForXPath2(document,namespaces)) == null) {
    throw new IllegalArgumentException(xpath eval of ' + xpathString + ' was null);
  }
}
","javax.xml.transform.TransformerException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\XPathUtil.java",594
1298,"'-tryline","@Test public void testPutValuesForXPathInList() throws ParserConfigurationException, SAXException, IOException, TidyException, TransformerException {
  String responseData=<book><page>one</page><page>two</page><empty></empty><a><b></b></a></book>;
  Document testDoc=XPathUtil.makeDocument(new ByteArrayInputStream(responseData.getBytes(StandardCharsets.UTF_8)),false,false,false,false,false,false,false,false,false);
  String xpathquery=/book/page;
  List<String> matchs=new ArrayList<>();
  XPathUtil.putValuesForXPathInList(testDoc,xpathquery,matchs,true);
  assertEquals(<page>one</page>,matchs.get(0));
  assertEquals(<page>two</page>,matchs.get(1));
  matchs=new ArrayList<>();
  XPathUtil.putValuesForXPathInList(testDoc,xpathquery,matchs,false);
  assertEquals(one,matchs.get(0));
  assertEquals(two,matchs.get(1));
}
","javax.xml.transform.TransformerException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\XPathUtilTest.java",263
1299,"'-tryline","public XPathFileContainer(String file,String xpath) throws FileNotFoundException, IOException, ParserConfigurationException, SAXException, TransformerException {
  log.debug(XPath({}) xpath {},file,xpath);
  fileName=file;
  nextRow=0;
  nodeList=load(xpath);
}
","javax.xml.transform.TransformerException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\XPathFileContainer.java",57
1300,"'-tryline","private NodeList load(String xpath) throws IOException, FileNotFoundException, ParserConfigurationException, SAXException, TransformerException {
  NodeList nl=null;
  try (FileInputStream fis=new FileInputStream(fileName);BufferedInputStream bis=new BufferedInputStream(fis)){
    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
    factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
    DocumentBuilder builder=factory.newDocumentBuilder();
    nl=XPathUtil.selectNodeList(builder.parse(bis),xpath);
    if (log.isDebugEnabled()) {
      log.debug(found {},nl.getLength());
    }
  }
 catch (  TransformerException|SAXException|ParserConfigurationException|IOException e) {
    log.warn(e.toString());
    throw e;
  }
  return nl;
}
","javax.xml.transform.TransformerException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\XPathFileContainer.java",65
1301,"'-tryline","/** 
 * Get a compiled expression from the pattern cache (READ_ONLY).
 * @param expression regular expression to be looked up
 * @return compiled pattern
 * @throws MalformedCachePatternException (Runtime)This should be caught for expressions that may vary (e.g. user input)
 */
public static Pattern getPattern(String expression) throws MalformedCachePatternException {
  return getPattern(expression,Perl5Compiler.READ_ONLY_MASK);
}
","org.apache.oro.text.MalformedCachePatternException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\JMeterUtils.java",259
1302,"'-tryline","/** 
 * Get a compiled expression from the pattern cache.
 * @param expression RE
 * @param options e.g. {@link Perl5Compiler#READ_ONLY_MASK READ_ONLY_MASK}
 * @return compiled pattern
 * @throws MalformedCachePatternException (Runtime)This should be caught for expressions that may vary (e.g. user input)
 */
public static Pattern getPattern(String expression,int options) throws MalformedCachePatternException {
  return LazyPatternCacheHolder.INSTANCE.getPattern(expression,options);
}
","org.apache.oro.text.MalformedCachePatternException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\JMeterUtils.java",273
1303,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override public Message sendAndReceive(Message request,int deliveryMode,int priority,long expiration) throws JMSException {
  String id=request.getJMSCorrelationID();
  if (id == null && !useReqMsgIdAsCorrelId) {
    throw new IllegalArgumentException(Correlation id is null. Set the JMSCorrelationID header.);
  }
  final CountDownLatch countDownLatch=new CountDownLatch(1);
  final MessageAdmin admin=MessageAdmin.getAdmin();
  if (useReqMsgIdAsCorrelId) {
synchronized (admin) {
      producer.send(request,deliveryMode,priority,expiration);
      id=request.getJMSMessageID();
      admin.putRequest(id,request,countDownLatch);
    }
  }
 else {
    admin.putRequest(id,request,countDownLatch);
    producer.send(request,deliveryMode,priority,expiration);
  }
  try {
    log.debug({} will wait for reply {} started on {},Thread.currentThread().getName(),id,System.currentTimeMillis());
    if (timeout == 0) {
      log.debug(Waiting infinitely for message);
      countDownLatch.await();
    }
 else {
      if (!countDownLatch.await(timeout,TimeUnit.MILLISECONDS)) {
        log.debug(Timeout {} ms reached before getting a reply message,timeout);
      }
    }
    log.debug({} done waiting for {} on {} ended on {},Thread.currentThread().getName(),id,request,System.currentTimeMillis());
  }
 catch (  InterruptedException e) {
    log.warn(Interrupt exception caught,e);
    Thread.currentThread().interrupt();
  }
  return admin.get(id);
}
","org.apache.jmeter.protocol.jms.sampler.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\sampler\FixedQueueExecutor.java",64
1304,"'-tryline","@Override public void close() throws JMSException {
}
","org.apache.jmeter.protocol.jms.sampler.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\sampler\FixedQueueExecutor.java",114
1305,"'-tryline","private void handleBrowse(SampleResult res) throws JMSException {
  LOGGER.debug(isBrowseOnly);
  StringBuilder sb=new StringBuilder(75);
  res.setSuccessful(true);
  sb.append(Browse message on Send Queue ).append(sendQueue.getQueueName()).append(: ).append(browseQueueDetails(sendQueue,res));
  res.setResponseData(sb.toString(),res.getDataEncodingWithDefault());
  res.setResponseCodeOK();
}
","org.apache.jmeter.protocol.jms.sampler.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\sampler\JMSSampler.java",219
1306,"'-tryline","private void handleClearQueue(SampleResult res) throws JMSException {
  LOGGER.debug(isClearQueue);
  StringBuilder sb=new StringBuilder(75);
  res.setSuccessful(true);
  sb.append(Clear messages on Send Queue ).append(sendQueue.getQueueName()).append(: ).append(clearQueue(sendQueue,res));
  res.setResponseData(sb.toString(),res.getDataEncodingWithDefault());
  res.setResponseCodeOK();
}
","org.apache.jmeter.protocol.jms.sampler.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\sampler\JMSSampler.java",230
1307,"'-tryline","private void handleOneWay(SampleResult res) throws JMSException {
  LOGGER.debug(isOneWay);
  TextMessage msg=createMessage();
  int deliveryMode=isNonPersistent() ? DeliveryMode.NON_PERSISTENT : DeliveryMode.PERSISTENT;
  producer.send(msg,deliveryMode,Integer.parseInt(getPriority()),Long.parseLong(getExpiration()));
  res.setRequestHeaders(Utils.messageProperties(msg));
  res.setResponseOK();
  res.setResponseData(Oneway request has no response data,null);
}
","org.apache.jmeter.protocol.jms.sampler.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\sampler\JMSSampler.java",241
1308,"'-tryline","private void handleRequestResponse(SampleResult res) throws JMSException {
  TextMessage msg=createMessage();
  if (!useTemporyQueue()) {
    LOGGER.debug(NO TEMP QUEUE);
    msg.setJMSReplyTo(receiveQueue);
  }
  LOGGER.debug(Create temp message);
  Message replyMsg=executor.sendAndReceive(msg,isNonPersistent() ? DeliveryMode.NON_PERSISTENT : DeliveryMode.PERSISTENT,Integer.parseInt(getPriority()),Long.parseLong(getExpiration()));
  res.setRequestHeaders(Utils.messageProperties(msg));
  if (replyMsg == null) {
    res.setResponseMessage(No reply message received);
  }
 else {
    if (replyMsg instanceof TextMessage) {
      res.setResponseData(((TextMessage)replyMsg).getText(),null);
    }
 else {
      res.setResponseData(replyMsg.toString(),null);
    }
    res.setResponseHeaders(Utils.messageProperties(replyMsg));
    res.setResponseOK();
  }
}
","org.apache.jmeter.protocol.jms.sampler.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\sampler\JMSSampler.java",295
1309,"'-tryline","private TextMessage createMessage() throws JMSException {
  if (session == null) {
    throw new IllegalStateException(Session may not be null while creating message);
  }
  TextMessage msg=session.createTextMessage();
  msg.setText(getContent());
  addJMSProperties(msg);
  return msg;
}
","org.apache.jmeter.protocol.jms.sampler.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\sampler\JMSSampler.java",465
1310,"'-tryline","private void addJMSProperties(TextMessage msg) throws JMSException {
  Utils.addJMSProperties(msg,getJMSProperties().getJmsPropertysAsMap());
}
","org.apache.jmeter.protocol.jms.sampler.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\sampler\JMSSampler.java",475
1311,"'-tryline","/** 
 * initialize the Publisher client.
 * @throws JMSException
 * @throws NamingException
 */
private void initClient() throws JMSException, NamingException {
  configureIsReconnectErrorCode();
  publisher=new Publisher(getUseJNDIPropertiesAsBoolean(),getJNDIInitialContextFactory(),getProviderUrl(),getConnectionFactory(),getDestination(),isUseAuth(),getUsername(),getPassword(),isDestinationStatic());
  ClientPool.addClient(publisher);
  log.debug(PublisherSampler.initClient called);
}
","org.apache.jmeter.protocol.jms.sampler.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\sampler\PublisherSampler.java",173
1312,"'-tryline","/** 
 * Sends and receives a message.
 * @param request the message to send
 * @param deliveryMode the delivery mode to use
 * @param priority the priority for this message
 * @param expiration messages lifetime in ms
 * @return the received message or <code>null</code>
 * @throws JMSException in case of an exception from the messaging system
 */
Message sendAndReceive(Message request,int deliveryMode,int priority,long expiration) throws JMSException ;
","org.apache.jmeter.protocol.jms.sampler.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\sampler\QueueExecutor.java",28
1313,"'-tryline","/** 
 * Close the resources
 * @throws JMSException in case of an exception from the messaging system
 */
void close() throws JMSException ;
","org.apache.jmeter.protocol.jms.sampler.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\sampler\QueueExecutor.java",44
1314,"'-tryline","/** 
 * Constructor
 * @param factory
 * @param receiveQueue Receive Queue
 * @param principal Username
 * @param credentials Password
 * @param useResMsgIdAsCorrelId
 * @param jmsSelector JMS Selector
 * @throws JMSException
 */
private Receiver(ConnectionFactory factory,Destination receiveQueue,String principal,String credentials,boolean useResMsgIdAsCorrelId,String jmsSelector) throws JMSException {
  if (null != principal && null != credentials) {
    log.info(creating receiver WITH authorisation credentials. UseResMsgId={},useResMsgIdAsCorrelId);
    conn=factory.createConnection(principal,credentials);
  }
 else {
    log.info(creating receiver without authorisation credentials. UseResMsgId={},useResMsgIdAsCorrelId);
    conn=factory.createConnection();
  }
  session=conn.createSession(false,Session.AUTO_ACKNOWLEDGE);
  log.debug(Receiver - ctor. Creating consumer with JMS Selector:{},jmsSelector);
  if (StringUtils.isEmpty(jmsSelector)) {
    consumer=session.createConsumer(receiveQueue);
  }
 else {
    consumer=session.createConsumer(receiveQueue,jmsSelector);
  }
  this.useResMsgIdAsCorrelId=useResMsgIdAsCorrelId;
  log.debug(Receiver - ctor. Starting connection now);
  conn.start();
  log.info(Receiver - ctor. Connection to messaging system established);
}
","org.apache.jmeter.protocol.jms.sampler.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\sampler\Receiver.java",51
1315,"'-tryline","/** 
 * Create a receiver to process responses.
 * @param factory connection factory to use
 * @param receiveQueue name of the receiving queue
 * @param principal user name to use for connecting to the queue
 * @param credentials credentials to use for connecting to the queue
 * @param useResMsgIdAsCorrelId <code>true</code> if should use JMSMessageId, <code>false</code> if should use JMSCorrelationId
 * @param jmsSelector JMS selector
 * @return the Receiver which will process the responses
 * @throws JMSException when creating the receiver fails
 */
public static Receiver createReceiver(ConnectionFactory factory,Destination receiveQueue,String principal,String credentials,boolean useResMsgIdAsCorrelId,String jmsSelector) throws JMSException {
  Receiver receiver=new Receiver(factory,receiveQueue,principal,credentials,useResMsgIdAsCorrelId,jmsSelector);
  Thread thread=new Thread(receiver,Thread.currentThread().getName() + -JMS-Receiver);
  thread.start();
  return receiver;
}
","org.apache.jmeter.protocol.jms.sampler.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\sampler\Receiver.java",83
1316,"'-tryline","/** 
 * Create the OnMessageSubscriber client and set the sampler as the message listener.
 * @throws JMSException
 * @throws NamingException
 */
private void initListenerClient() throws JMSException, NamingException {
  SUBSCRIBER=new ReceiveSubscriber(0,getUseJNDIPropertiesAsBoolean(),getJNDIInitialContextFactory(),getProviderUrl(),getConnectionFactory(),getDestination(),getDurableSubscriptionId(),getClientId(),getJmsSelector(),isUseAuth(),getUsername(),getPassword());
  log.debug(SubscriberSampler.initListenerClient called);
}
","org.apache.jmeter.protocol.jms.sampler.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\sampler\SubscriberSampler.java",109
1317,"'-tryline","/** 
 * Create the ReceiveSubscriber client for the sampler.
 * @throws NamingException
 * @throws JMSException
 */
private void initReceiveClient() throws NamingException, JMSException {
  SUBSCRIBER=new ReceiveSubscriber(getUseJNDIPropertiesAsBoolean(),getJNDIInitialContextFactory(),getProviderUrl(),getConnectionFactory(),getDestination(),getDurableSubscriptionId(),getClientId(),getJmsSelector(),isUseAuth(),getUsername(),getPassword());
  log.debug(SubscriberSampler.initReceiveClient called);
}
","org.apache.jmeter.protocol.jms.sampler.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\sampler\SubscriberSampler.java",123
1318,"'-tryline","/** 
 * Constructor.
 * @param session the session to use to send the message
 * @param destination the queue to send the message on
 * @param timeoutMs Timeout in millis
 * @throws JMSException when internally used  {@link QueueRequestor} can not beconstructed with <code>session</code> and <code>destination</code>
 */
public TemporaryQueueExecutor(QueueSession session,Queue destination,int timeoutMs) throws JMSException {
  requestor=new TimeoutEnabledQueueRequestor(session,destination);
  this.timeout=timeoutMs;
}
","org.apache.jmeter.protocol.jms.sampler.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\sampler\TemporaryQueueExecutor.java",40
1319,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override public Message sendAndReceive(Message request,int deliveryMode,int priority,long expiration) throws JMSException {
  LOGGER.debug(Sending message and waiting for response in Temporary queue with timeout {} ms (0==infinite),timeout);
  return requestor.request(request,timeout);
}
","org.apache.jmeter.protocol.jms.sampler.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\sampler\TemporaryQueueExecutor.java",58
1320,"'-tryline","@Override public void close() throws JMSException {
  requestor.close();
}
","org.apache.jmeter.protocol.jms.sampler.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\sampler\TemporaryQueueExecutor.java",71
1321,"'-tryline","/** 
 * Constructor for the <code>TimeoutEnabledQueueRequestor</code> class. <P> This implementation assumes the session parameter to be non-transacted, with a delivery mode of either <code>AUTO_ACKNOWLEDGE</code> or <code>DUPS_OK_ACKNOWLEDGE</code>.
 * @param session the <code>QueueSession</code> the queue belongs to, session will not be closed by {@link TimeoutEnabledQueueRequestor}
 * @param queue the queue to perform the request/reply call on
 * @exception JMSException if the JMS provider fails to create the <code>TimeoutEnabledQueueRequestor</code> due to some internal error.
 * @exception InvalidDestinationException if an invalid queue is specified.
 */
public TimeoutEnabledQueueRequestor(Session session,Queue queue) throws JMSException {
  tempQueue=session.createTemporaryQueue();
  sender=session.createProducer(queue);
  receiver=session.createConsumer(tempQueue);
}
","org.apache.jmeter.protocol.jms.sampler.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\sampler\TimeoutEnabledQueueRequestor.java",51
1322,"'-tryline","/** 
 * Sends a request and waits for a reply. The temporary queue is used for the <code>JMSReplyTo</code> destination, and only one reply per request is expected. The method blocks indefinitely until a message arrives!
 * @param message the message to send
 * @return the reply message
 * @exception JMSException if the JMS provider fails to complete the request due to some internal error.
 */
public Message request(Message message) throws JMSException {
  return request(message,0);
}
","org.apache.jmeter.protocol.jms.sampler.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\sampler\TimeoutEnabledQueueRequestor.java",75
1323,"'-tryline","/** 
 * Sends a request and waits for a reply. The temporary queue is used for the <code>JMSReplyTo</code> destination, and only one reply per request is expected. The client waits/blocks for the reply until the timeout is reached.
 * @param message the message to send
 * @param timeout time to wait for a reply on temporary queue. If you specify no arguments or an argument of 0, the method blocks indefinitely until a message arrives
 * @return the reply message
 * @exception JMSException if the JMS provider fails to complete the request due to some internal error.
 */
public Message request(Message message,long timeout) throws JMSException {
  message.setJMSReplyTo(tempQueue);
  sender.send(message);
  return receiver.receive(timeout);
}
","org.apache.jmeter.protocol.jms.sampler.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\sampler\TimeoutEnabledQueueRequestor.java",92
1324,"'-tryline","/** 
 * Closes the <code>TimeoutEnabledQueueRequestor</code> and its session. <P> Since a provider may allocate some resources on behalf of a <code>TimeoutEnabledQueueRequestor</code> outside the Java virtual machine, clients should close them when they are not needed. Relying on garbage collection to eventually reclaim these resources may not be timely enough. <P> This method closes the <code>Session</code> object passed to the <code>TimeoutEnabledQueueRequestor</code> constructor.
 * @exception JMSException if the JMS provider fails to close the <code>TimeoutEnabledQueueRequestor</code> due to some internal error.
 */
public void close() throws JMSException {
  String queueName=tempQueue.getQueueName();
  try {
    sender.close();
  }
 catch (  Exception ex) {
    logger.error(Error closing sender,ex);
  }
  try {
    receiver.close();
  }
 catch (  Exception ex) {
    logger.error(Error closing receiver,ex);
  }
  try {
    tempQueue.delete();
  }
 catch (  Exception ex) {
    logger.error(Error deleting tempQueue {},queueName,ex);
  }
}
","org.apache.jmeter.protocol.jms.sampler.JMSException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\main\java\org\apache\jmeter\protocol\jms\sampler\TimeoutEnabledQueueRequestor.java",117
1325,"'-tryline","private static AssertionResult verifySignature(SMIMEAssertionTestElement testElement,SMIMESignedParser s,String name) throws CMSException {
  AssertionResult res=new AssertionResult(name);
  try {
    Store<?> certs=s.getCertificates();
    SignerInformationStore signers=s.getSignerInfos();
    Iterator<?> signerIt=signers.getSigners().iterator();
    if (signerIt.hasNext()) {
      SignerInformation signer=(SignerInformation)signerIt.next();
      Iterator<?> certIt=certs.getMatches(signer.getSID()).iterator();
      if (certIt.hasNext()) {
        X509CertificateHolder cert=(X509CertificateHolder)certIt.next();
        if (testElement.isVerifySignature()) {
          verifySignature(signer,res,cert);
        }
        if (testElement.isSignerCheckConstraints()) {
          StringBuilder failureMessage=new StringBuilder();
          checkSerial(testElement,res,cert,failureMessage);
          checkEmail(testElement,res,cert,failureMessage);
          checkSubject(testElement,res,cert,failureMessage);
          checkIssuer(testElement,res,cert,failureMessage);
          if (failureMessage.length() > 0) {
            res.setFailureMessage(failureMessage.toString());
          }
        }
        if (testElement.isSignerCheckByFile()) {
          checkSignerByFile(testElement,res,cert);
        }
      }
 else {
        res.setFailure(true);
        res.setFailureMessage(No signer certificate found in signature);
      }
    }
    if (signerIt.hasNext()) {
      log.warn(SMIME message contains multiple signers! Checking multiple signers is not supported.);
    }
  }
 catch (  GeneralSecurityException e) {
    log.error(e.getMessage(),e);
    res.setError(true);
    res.setFailureMessage(e.getMessage());
  }
  return res;
}
","org.bouncycastle.cms.CMSException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\assertions\SMIMEAssertion.java",148
1326,"'-tryline","private static void verifySignature(SignerInformation signer,AssertionResult res,X509CertificateHolder cert) throws CertificateException, CMSException {
  SignerInformationVerifier verifier=null;
  try {
    verifier=new JcaSimpleSignerInfoVerifierBuilder().setProvider(BC).build(cert);
  }
 catch (  OperatorCreationException e) {
    log.error(Can't create a provider.,e);
  }
  if (verifier == null || !signer.verify(verifier)) {
    res.setFailure(true);
    res.setFailureMessage(Signature is invalid);
  }
}
","org.bouncycastle.cms.CMSException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\assertions\SMIMEAssertion.java",208
1327,"'-tryline","private BackendListenerClient createBackendListenerClient(String newClassName) throws ReflectiveOperationException {
  return Class.forName(newClassName,true,Thread.currentThread().getContextClassLoader()).asSubclass(BackendListenerClient.class).getDeclaredConstructor().newInstance();
}
","java.lang.ReflectiveOperationException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\backend\BackendListenerGui.java",237
1328,"'-tryline","/** 
 * @param guiPackage {@link GuiPackage}
 * @param parentNode {@link JMeterTreeNode}
 * @return array of {@link JMeterTreeNode}
 * @throws ReflectiveOperationException when class instantiation for {@value #DEFAULT_IMPLEMENTATION} fails
 * @throws IllegalUserActionException when {@link ThinkTimeCreator#createThinkTime(GuiPackage,JMeterTreeNode)} throws this
 */
private JMeterTreeNode[] createThinkTime(GuiPackage guiPackage,JMeterTreeNode parentNode) throws ReflectiveOperationException, IllegalUserActionException {
  Class<?> clazz=Class.forName(DEFAULT_IMPLEMENTATION);
  ThinkTimeCreator thinkTimeCreator=(ThinkTimeCreator)clazz.getDeclaredConstructor().newInstance();
  return thinkTimeCreator.createThinkTime(guiPackage,parentNode);
}
","java.lang.ReflectiveOperationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\action\AddThinkTimeBetweenEachStep.java",129
1329,"'-tryline","/** 
 * Get an instance of the specified JMeterGUIComponent class. If an instance of the GUI class has previously been created and it is not marked as an {@link UnsharedComponent}, that shared instance will be returned. Otherwise, a new instance of the component will be created, and shared components will be cached for future retrieval.
 * @param guiClass the fully qualified class name of the GUI component. This class must implement JMeterGUIComponent.
 * @param testClass the fully qualified class name of the test elements edited by this GUI component. This class must implement TestElement.
 * @return an instance of the specified class
 * @throws InstantiationException if an instance of the object cannot be created
 * @throws IllegalAccessException if access rights do not allow the default constructor to be called
 * @throws ReflectiveOperationException when construction of guiClass fails
 */
private JMeterGUIComponent getGuiFromCache(Class<?> guiClass,Class<?> testClass) throws ReflectiveOperationException {
  JMeterGUIComponent comp;
  if (guiClass == TestBeanGUI.class) {
    comp=testBeanGUIs.get(testClass);
    if (comp == null) {
      comp=new TestBeanGUI(testClass);
      testBeanGUIs.put(testClass,comp);
    }
  }
 else {
    comp=guis.get(guiClass);
    if (comp == null) {
      comp=(JMeterGUIComponent)guiClass.getDeclaredConstructor().newInstance();
      if (!(comp instanceof UnsharedComponent)) {
        guis.put(guiClass,comp);
      }
    }
  }
  updateUi(comp);
  return comp;
}
","java.lang.ReflectiveOperationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\GuiPackage.java",390
1330,"'-tryline","@Override public boolean getKeepAlive() throws SocketException {
  return sslSock.getKeepAlive();
}
","java.net.SocketException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSSLSocket.java",194
1331,"'-tryline","@Override public boolean getOOBInline() throws SocketException {
  return sslSock.getOOBInline();
}
","java.net.SocketException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSSLSocket.java",214
1332,"'-tryline","@Override public synchronized int getReceiveBufferSize() throws SocketException {
  return sslSock.getReceiveBufferSize();
}
","java.net.SocketException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSSLSocket.java",224
1333,"'-tryline","@Override public boolean getReuseAddress() throws SocketException {
  return sslSock.getReuseAddress();
}
","java.net.SocketException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSSLSocket.java",234
1334,"'-tryline","@Override public synchronized int getSendBufferSize() throws SocketException {
  return sslSock.getSendBufferSize();
}
","java.net.SocketException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSSLSocket.java",239
1335,"'-tryline","@Override public int getSoLinger() throws SocketException {
  return sslSock.getSoLinger();
}
","java.net.SocketException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSSLSocket.java",244
1336,"'-tryline","@Override public synchronized int getSoTimeout() throws SocketException {
  return sslSock.getSoTimeout();
}
","java.net.SocketException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSSLSocket.java",249
1337,"'-tryline","@Override public boolean getTcpNoDelay() throws SocketException {
  return sslSock.getTcpNoDelay();
}
","java.net.SocketException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSSLSocket.java",254
1338,"'-tryline","@Override public int getTrafficClass() throws SocketException {
  return sslSock.getTrafficClass();
}
","java.net.SocketException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSSLSocket.java",259
1339,"'-tryline","@Override public void setKeepAlive(boolean on) throws SocketException {
  sslSock.setKeepAlive(on);
}
","java.net.SocketException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSSLSocket.java",294
1340,"'-tryline","@Override public void setOOBInline(boolean on) throws SocketException {
  sslSock.setOOBInline(on);
}
","java.net.SocketException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSSLSocket.java",299
1341,"'-tryline","@Override public synchronized void setReceiveBufferSize(int size) throws SocketException {
  sslSock.setReceiveBufferSize(size);
}
","java.net.SocketException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSSLSocket.java",304
1342,"'-tryline","@Override public void setReuseAddress(boolean on) throws SocketException {
  sslSock.setReuseAddress(on);
}
","java.net.SocketException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSSLSocket.java",309
1343,"'-tryline","@Override public synchronized void setSendBufferSize(int size) throws SocketException {
  sslSock.setSendBufferSize(size);
}
","java.net.SocketException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSSLSocket.java",314
1344,"'-tryline","@Override public void setSoLinger(boolean on,int linger) throws SocketException {
  sslSock.setSoLinger(on,linger);
}
","java.net.SocketException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSSLSocket.java",319
1345,"'-tryline","@Override public synchronized void setSoTimeout(int timeout) throws SocketException {
  sslSock.setSoTimeout(timeout);
}
","java.net.SocketException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSSLSocket.java",324
1346,"'-tryline","@Override public void setTcpNoDelay(boolean on) throws SocketException {
  sslSock.setTcpNoDelay(on);
}
","java.net.SocketException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSSLSocket.java",329
1347,"'-tryline","@Override public void setTrafficClass(int tc) throws SocketException {
  sslSock.setTrafficClass(tc);
}
","java.net.SocketException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSSLSocket.java",334
1348,"'-tryline","private String guessExternalIPv4Interface() throws SocketException {
  return Collections.list(NetworkInterface.getNetworkInterfaces()).stream().map(n -> Collections.list(n.getInetAddresses())).flatMap(ArrayList<InetAddress>::stream).filter(i -> !i.isLoopbackAddress()).filter(i -> i.getAddress().length == 4).map(InetAddress::getHostAddress).findFirst().orElse(NO DEVICE);
}
","java.net.SocketException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\engine\LocalHostTest.java",60
1349,"'-tryline","/** 
 * Gets the IP source address (IP spoofing) if one has been provided.
 * @return the IP source address to use (or <code>null</code>, if none provided or the device address could not be found)
 * @throws UnknownHostException if the hostname/ip for {@link #getIpSource()} could not be resolved or not interface was found for it
 * @throws SocketException if an I/O error occurs
 */
protected InetAddress getIpSourceAddress() throws UnknownHostException, SocketException {
  final String ipSource=getIpSource();
  if (ipSource.trim().length() > 0) {
    Class<? extends InetAddress> ipClass=null;
    final SourceType sourceType=HTTPSamplerBase.SourceType.values()[testElement.getIpSourceType()];
switch (sourceType) {
case DEVICE:
      ipClass=InetAddress.class;
    break;
case DEVICE_IPV4:
  ipClass=Inet4Address.class;
break;
case DEVICE_IPV6:
ipClass=Inet6Address.class;
break;
case HOSTNAME:
default :
return InetAddress.getByName(ipSource);
}
NetworkInterface net=NetworkInterface.getByName(ipSource);
if (net != null) {
for (InterfaceAddress ia : net.getInterfaceAddresses()) {
final InetAddress inetAddr=ia.getAddress();
if (ipClass.isInstance(inetAddr)) {
return inetAddr;
}
}
throw new UnknownHostException(Interface  + ipSource +  does not have address of type + ipClass.getSimpleName());
}
throw new UnknownHostException(Cannot find interface  + ipSource);
}
return null;
}
","java.net.SocketException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPAbstractImpl.java",226
1350,"'-tryline","public static Iterable<Arguments> implementationsAndIps() throws SocketException {
  List<Arguments> res=new ArrayList<>();
  InetAddress local4=null;
  InetAddress local6=null;
  List<InetAddress> localIps=Collections.list(NetworkInterface.getNetworkInterfaces()).stream().filter(networkInterface -> {
    try {
      return networkInterface.isLoopback();
    }
 catch (    SocketException e) {
      return false;
    }
  }
).flatMap(ni -> ni.getInterfaceAddresses().stream()).map(InterfaceAddress::getAddress).collect(Collectors.toList());
  Collections.shuffle(localIps);
  for (  InetAddress localIp : localIps) {
    if (local4 == null && localIp instanceof Inet4Address) {
      local4=localIp;
    }
 else     if (local6 == null && localIp instanceof Inet6Address) {
      local6=localIp;
    }
  }
  InetAddress finalLocal4=local4;
  InetAddress finalLocal6=local6;
  localIps.sort(Comparator.comparing(InetAddress::toString));
  for (  String impl : HTTPSamplerFactory.getImplementations()) {
    for (    String targetHost : new String[]{127.0.0.1,[::1],localhost}) {
      if (localhost.equals(targetHost)) {
        continue;
      }
      localIps.forEach(localIp -> {
        if (finalLocal4 != null) {
          res.add(arguments(impl,targetHost,finalLocal4));
        }
        if (finalLocal6 != null) {
          res.add(arguments(impl,targetHost,finalLocal6));
        }
      }
);
    }
  }
  return res;
}
","java.net.SocketException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\ParallelResourcesAndIpSource.java",72
1351,"'-tryline","/** 
 * Process a given freemarker template and put its result in a new folder.
 * @param template file that contains the freemarker template to process
 * @param outputFile {@link File} created from template
 * @param templateConfig Configuration of the template
 * @param data to inject in the template
 * @throws IOException if an I/O exception occurs during writing to the writer
 * @throws TemplateException if an exception occurs during template processing
 */
public static void processTemplate(File template,File outputFile,Configuration templateConfig,Map<String,String> data) throws IOException, TemplateException {
  templateConfig.setDirectoryForTemplateLoading(template.getParentFile());
  freemarker.template.Template temp=templateConfig.getTemplate(template.getName());
  try (FileOutputStream stream=new FileOutputStream(outputFile);Writer writer=new OutputStreamWriter(stream,StandardCharsets.UTF_8);BufferedWriter bufferedWriter=new BufferedWriter(writer)){
    temp.process(data,bufferedWriter);
  }
 }
","org.apache.jmeter.util.TemplateException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\TemplateUtil.java",61
1352,"'-tryline","/** 
 * Execute the test element.
 * @param conn a {@link Connection}
 * @return the result of the execute command
 * @throws SQLException if a database error occurs
 * @throws IOException when I/O error occurs
 * @throws UnsupportedOperationException if the user provided incorrect query type
 */
protected byte[] execute(Connection conn) throws SQLException, IOException, UnsupportedOperationException {
  return execute(conn,new SampleResult());
}
","java.sql.SQLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jdbc\src\main\java\org\apache\jmeter\protocol\jdbc\AbstractJDBCTestElement.java",140
1353,"'-tryline","/** 
 * Execute the test element. Use the sample given as argument to set time to first byte in the latency field of the SampleResult.
 * @param conn a {@link Connection}
 * @param sample a {@link SampleResult} to save the latency
 * @return the result of the execute command
 * @throws SQLException if a database error occurs
 * @throws IOException when I/O error occurs
 * @throws UnsupportedOperationException if the user provided incorrect query type
 */
protected byte[] execute(Connection conn,SampleResult sample) throws SQLException, IOException, UnsupportedOperationException {
  log.debug(executing jdbc:{},getQuery());
  String currentQueryType=getQueryType();
  if (SELECT.equals(currentQueryType)) {
    try (Statement stmt=conn.createStatement()){
      setQueryTimeout(stmt,getIntegerQueryTimeout());
      ResultSet rs=null;
      try {
        rs=stmt.executeQuery(getQuery());
        sample.latencyEnd();
        return getStringFromResultSet(rs).getBytes(ENCODING);
      }
  finally {
        close(rs);
      }
    }
   }
 else   if (CALLABLE.equals(currentQueryType)) {
    try (CallableStatement cstmt=getCallableStatement(conn)){
      int[] out=setArguments(cstmt);
      boolean hasResultSet=cstmt.execute();
      sample.latencyEnd();
      String sb=resultSetsToString(cstmt,hasResultSet,out);
      return sb.getBytes(ENCODING);
    }
   }
 else   if (UPDATE.equals(currentQueryType)) {
    try (Statement stmt=conn.createStatement()){
      setQueryTimeout(stmt,getIntegerQueryTimeout());
      stmt.executeUpdate(getQuery());
      sample.latencyEnd();
      int updateCount=stmt.getUpdateCount();
      String results=updateCount +  updates;
      return results.getBytes(ENCODING);
    }
   }
 else   if (PREPARED_SELECT.equals(currentQueryType)) {
    try (PreparedStatement pstmt=getPreparedStatement(conn)){
      setArguments(pstmt);
      ResultSet rs=null;
      try {
        rs=pstmt.executeQuery();
        sample.latencyEnd();
        return getStringFromResultSet(rs).getBytes(ENCODING);
      }
  finally {
        close(rs);
      }
    }
   }
 else   if (PREPARED_UPDATE.equals(currentQueryType)) {
    try (PreparedStatement pstmt=getPreparedStatement(conn)){
      setArguments(pstmt);
      pstmt.executeUpdate();
      sample.latencyEnd();
      String sb=resultSetsToString(pstmt,false,null);
      return sb.getBytes(ENCODING);
    }
   }
 else   if (ROLLBACK.equals(currentQueryType)) {
    conn.rollback();
    sample.latencyEnd();
    return ROLLBACK.getBytes(ENCODING);
  }
 else   if (COMMIT.equals(currentQueryType)) {
    conn.commit();
    sample.latencyEnd();
    return COMMIT.getBytes(ENCODING);
  }
 else   if (AUTOCOMMIT_FALSE.equals(currentQueryType)) {
    conn.setAutoCommit(false);
    sample.latencyEnd();
    return AUTOCOMMIT_FALSE.getBytes(ENCODING);
  }
 else   if (AUTOCOMMIT_TRUE.equals(currentQueryType)) {
    conn.setAutoCommit(true);
    sample.latencyEnd();
    return AUTOCOMMIT_TRUE.getBytes(ENCODING);
  }
 else {
    throw new UnsupportedOperationException(Unexpected query type:  + currentQueryType);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jdbc\src\main\java\org\apache\jmeter\protocol\jdbc\AbstractJDBCTestElement.java",153
1354,"'-tryline","private String resultSetsToString(PreparedStatement pstmt,boolean result,int[] out) throws SQLException, UnsupportedEncodingException {
  StringBuilder sb=new StringBuilder();
  int updateCount=0;
  boolean currentResult=result;
  if (!currentResult) {
    updateCount=pstmt.getUpdateCount();
  }
  do {
    if (currentResult) {
      ResultSet rs=null;
      try {
        rs=pstmt.getResultSet();
        sb.append(getStringFromResultSet(rs)).append(\n);
      }
  finally {
        close(rs);
      }
    }
 else {
      sb.append(updateCount).append( updates.\n);
    }
    currentResult=pstmt.getMoreResults();
    if (!currentResult) {
      updateCount=pstmt.getUpdateCount();
    }
  }
 while (currentResult || (updateCount != -1));
  if (out != null && pstmt instanceof CallableStatement) {
    List<Object> outputValues=new ArrayList<>();
    CallableStatement cs=(CallableStatement)pstmt;
    sb.append(Output variables by position:\n);
    for (int i=0; i < out.length; i++) {
      if (out[i] != java.sql.Types.NULL) {
        Object o=cs.getObject(i + 1);
        outputValues.add(o);
        sb.append([);
        sb.append(i + 1);
        sb.append(] );
        sb.append(o);
        if (o instanceof java.sql.ResultSet && RS_COUNT_RECORDS.equals(resultSetHandler)) {
          sb.append( ).append(countRows((ResultSet)o)).append( rows);
        }
        sb.append(\n);
      }
    }
    String[] varnames=getVariableNames().split(COMMA);
    if (varnames.length > 0) {
      JMeterVariables jmvars=getThreadContext().getVariables();
      for (int i=0; i < varnames.length && i < outputValues.size(); i++) {
        String name=varnames[i].trim();
        if (name.length() > 0) {
          Object o=outputValues.get(i);
          if (o instanceof java.sql.ResultSet) {
            putIntoVar(jmvars,name,(java.sql.ResultSet)o);
          }
 else           if (o instanceof java.sql.Clob) {
            putIntoVar(jmvars,name,(java.sql.Clob)o);
          }
 else           if (o instanceof java.sql.Blob) {
            putIntoVar(jmvars,name,(java.sql.Blob)o);
          }
 else {
            jmvars.put(name,o == null ? null : o.toString());
          }
        }
      }
    }
  }
  return sb.toString();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jdbc\src\main\java\org\apache\jmeter\protocol\jdbc\AbstractJDBCTestElement.java",240
1355,"'-tryline","private void putIntoVar(final JMeterVariables jmvars,final String name,final ResultSet resultSet) throws SQLException {
  if (RS_STORE_AS_OBJECT.equals(resultSetHandler)) {
    jmvars.putObject(name,resultSet);
  }
 else   if (RS_COUNT_RECORDS.equals(resultSetHandler)) {
    jmvars.put(name,resultSet.toString() +   + countRows(resultSet)+  rows);
  }
 else {
    jmvars.put(name,resultSet.toString());
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jdbc\src\main\java\org\apache\jmeter\protocol\jdbc\AbstractJDBCTestElement.java",306
1356,"'-tryline","private void putIntoVar(final JMeterVariables jmvars,final String name,final Clob clob) throws SQLException {
  try {
    if (clob.length() > MAX_RETAIN_SIZE) {
      try (Reader reader=clob.getCharacterStream(0,MAX_RETAIN_SIZE)){
        jmvars.put(name,IOUtils.toString(reader) + <result cut off, it is too big>);
      }
     }
 else {
      try (Reader reader=clob.getCharacterStream()){
        jmvars.put(name,IOUtils.toString(reader));
      }
     }
  }
 catch (  IOException e) {
    log.warn(Could not read CLOB into {},name,e);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jdbc\src\main\java\org\apache\jmeter\protocol\jdbc\AbstractJDBCTestElement.java",318
1357,"'-tryline","private void putIntoVar(final JMeterVariables jmvars,final String name,final Blob blob) throws SQLException {
  if (RS_STORE_AS_OBJECT.equals(resultSetHandler)) {
    try {
      long length=Math.max(blob.length(),MAX_RETAIN_SIZE);
      jmvars.putObject(name,IOUtils.toByteArray(blob.getBinaryStream(0,length)));
    }
 catch (    IOException e) {
      log.warn(Could not read BLOB into {} as object.,name,e);
    }
  }
 else   if (RS_COUNT_RECORDS.equals(resultSetHandler)) {
    jmvars.put(name,blob.length() +  bytes);
  }
 else {
    try {
      long length=Math.max(blob.length(),MAX_RETAIN_SIZE);
      try (InputStream is=blob.getBinaryStream(0,length)){
        jmvars.put(name,IOUtils.toString(is,ENCODING));
      }
     }
 catch (    IOException e) {
      log.warn(Can't convert BLOB to String using {},ENCODING,e);
    }
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jdbc\src\main\java\org\apache\jmeter\protocol\jdbc\AbstractJDBCTestElement.java",338
1358,"'-tryline","/** 
 * Count rows in result set
 * @param resultSet {@link ResultSet}
 * @return number of rows in resultSet
 * @throws SQLException
 */
private int countRows(ResultSet resultSet) throws SQLException {
  int resultSetMaxRows=getIntegerResultSetMaxRows();
  if (resultSetMaxRows >= 0) {
    resultSet.absolute(resultSetMaxRows);
    if (!resultSet.isAfterLast()) {
      return resultSet.getRow();
    }
  }
  return resultSet.last() ? resultSet.getRow() : 0;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jdbc\src\main\java\org\apache\jmeter\protocol\jdbc\AbstractJDBCTestElement.java",362
1359,"'-tryline","private int[] setArguments(PreparedStatement pstmt) throws SQLException, IOException {
  if (getQueryArguments().trim().length() == 0) {
    return new int[]{};
  }
  String[] arguments=CSVSaveService.csvSplitString(getQueryArguments(),COMMA_CHAR);
  String[] argumentsTypes=getQueryArgumentsTypes().split(COMMA);
  if (arguments.length != argumentsTypes.length) {
    throw new SQLException(number of arguments ( + arguments.length + ) and number of types (+ argumentsTypes.length+ ) are not equal);
  }
  int[] outputs=new int[arguments.length];
  for (int i=0; i < arguments.length; i++) {
    String argument=arguments[i];
    String argumentType=argumentsTypes[i];
    String[] arg=argumentType.split( );
    String inputOutput=;
    if (arg.length > 1) {
      argumentType=arg[1];
      inputOutput=arg[0];
    }
    int targetSqlType=getJdbcType(argumentType);
    try {
      if (!OUT.equalsIgnoreCase(inputOutput)) {
        if (argument.equals(NULL_MARKER)) {
          pstmt.setNull(i + 1,targetSqlType);
        }
 else {
          setArgument(pstmt,argument,targetSqlType,i + 1);
        }
      }
      if (OUT.equalsIgnoreCase(inputOutput) || INOUT.equalsIgnoreCase(inputOutput)) {
        CallableStatement cs=(CallableStatement)pstmt;
        cs.registerOutParameter(i + 1,targetSqlType);
        outputs[i]=targetSqlType;
      }
 else {
        outputs[i]=java.sql.Types.NULL;
      }
    }
 catch (    NullPointerException e) {
      throw new SQLException(Could not set argument no:  + (i + 1) +  - missing parameter marker?,e);
    }
  }
  return outputs;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jdbc\src\main\java\org\apache\jmeter\protocol\jdbc\AbstractJDBCTestElement.java",379
1360,"'-tryline","private void setArgument(PreparedStatement pstmt,String argument,int targetSqlType,int index) throws SQLException {
switch (targetSqlType) {
case Types.INTEGER:
    pstmt.setInt(index,Integer.parseInt(argument));
  break;
case Types.DECIMAL:
case Types.NUMERIC:
pstmt.setBigDecimal(index,new BigDecimal(argument));
break;
case Types.DOUBLE:
case Types.FLOAT:
pstmt.setDouble(index,Double.parseDouble(argument));
break;
case Types.CHAR:
case Types.LONGVARCHAR:
case Types.VARCHAR:
pstmt.setString(index,argument);
break;
case Types.BIT:
case Types.BOOLEAN:
pstmt.setBoolean(index,Boolean.parseBoolean(argument));
break;
case Types.BIGINT:
pstmt.setLong(index,Long.parseLong(argument));
break;
case Types.DATE:
pstmt.setDate(index,Date.valueOf(argument));
break;
case Types.REAL:
pstmt.setFloat(index,Float.parseFloat(argument));
break;
case Types.TINYINT:
pstmt.setByte(index,Byte.parseByte(argument));
break;
case Types.SMALLINT:
pstmt.setShort(index,Short.parseShort(argument));
break;
case Types.TIMESTAMP:
pstmt.setTimestamp(index,Timestamp.valueOf(argument));
break;
case Types.TIME:
pstmt.setTime(index,Time.valueOf(argument));
break;
case Types.BINARY:
case Types.VARBINARY:
case Types.LONGVARBINARY:
pstmt.setBytes(index,argument.getBytes(StandardCharsets.UTF_8));
break;
case Types.NULL:
pstmt.setNull(index,targetSqlType);
break;
default :
pstmt.setObject(index,argument,targetSqlType);
}
}
","java.sql.SQLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jdbc\src\main\java\org\apache\jmeter\protocol\jdbc\AbstractJDBCTestElement.java",421
1361,"'-tryline","private static int getJdbcType(String jdbcType) throws SQLException {
  Integer entry=mapJdbcNameToInt.get(jdbcType.toLowerCase(java.util.Locale.ENGLISH));
  if (entry == null) {
    try {
      entry=Integer.decode(jdbcType);
    }
 catch (    NumberFormatException e) {
      throw new SQLException(Invalid data type:  + jdbcType,e);
    }
  }
  return entry;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jdbc\src\main\java\org\apache\jmeter\protocol\jdbc\AbstractJDBCTestElement.java",478
1362,"'-tryline","private CallableStatement getCallableStatement(Connection conn) throws SQLException {
  return (CallableStatement)getPreparedStatement(conn,true);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jdbc\src\main\java\org\apache\jmeter\protocol\jdbc\AbstractJDBCTestElement.java",491
1363,"'-tryline","private PreparedStatement getPreparedStatement(Connection conn) throws SQLException {
  return getPreparedStatement(conn,false);
}
","java.sql.SQLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jdbc\src\main\java\org\apache\jmeter\protocol\jdbc\AbstractJDBCTestElement.java",495
1364,"'-tryline","private PreparedStatement getPreparedStatement(Connection conn,boolean callable) throws SQLException {
  PreparedStatement pstmt;
  if (callable) {
    pstmt=conn.prepareCall(getQuery());
  }
 else {
    pstmt=conn.prepareStatement(getQuery());
  }
  setQueryTimeout(pstmt,getIntegerQueryTimeout());
  return pstmt;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jdbc\src\main\java\org\apache\jmeter\protocol\jdbc\AbstractJDBCTestElement.java",499
1365,"'-tryline","/** 
 * @param stmt {@link Statement} Statement for which we want to set timeout
 * @param timeout int timeout value in seconds, if < 0 setQueryTimeout will not be called
 * @throws SQLException
 */
private static void setQueryTimeout(Statement stmt,int timeout) throws SQLException {
  if (timeout >= 0) {
    stmt.setQueryTimeout(timeout);
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jdbc\src\main\java\org\apache\jmeter\protocol\jdbc\AbstractJDBCTestElement.java",510
1366,"'-tryline","/** 
 * Gets a Data object from a ResultSet.
 * @param rs ResultSet passed in from a database query
 * @return a Data object
 * @throws java.sql.SQLException
 * @throws UnsupportedEncodingException
 */
private String getStringFromResultSet(ResultSet rs) throws SQLException, UnsupportedEncodingException {
  ResultSetMetaData meta=rs.getMetaData();
  StringBuilder sb=new StringBuilder();
  int numColumns=meta.getColumnCount();
  for (int i=1; i <= numColumns; i++) {
    sb.append(meta.getColumnLabel(i));
    if (i == numColumns) {
      sb.append('\n');
    }
 else {
      sb.append('\t');
    }
  }
  JMeterVariables jmvars=getThreadContext().getVariables();
  String[] varNames=getVariableNames().split(COMMA);
  String currentResultVariable=getResultVariable().trim();
  List<Map<String,Object>> results=null;
  if (!currentResultVariable.isEmpty()) {
    results=new ArrayList<>();
    jmvars.putObject(currentResultVariable,results);
  }
  int currentIterationIndex=0;
  int resultSetMaxRows=getIntegerResultSetMaxRows();
  if (resultSetMaxRows < 0) {
    while (rs.next()) {
      currentIterationIndex=processRow(rs,meta,sb,numColumns,jmvars,varNames,results,currentIterationIndex);
    }
  }
 else {
    while (currentIterationIndex < resultSetMaxRows && rs.next()) {
      currentIterationIndex=processRow(rs,meta,sb,numColumns,jmvars,varNames,results,currentIterationIndex);
    }
  }
  for (  String varName : varNames) {
    String name=varName.trim();
    if (name.length() > 0 && jmvars != null) {
      final String varCount=name + _#;
      String prevCount=jmvars.get(varCount);
      if (prevCount != null) {
        int prev=Integer.parseInt(prevCount);
        for (int n=currentIterationIndex + 1; n <= prev; n++) {
          jmvars.remove(name + UNDERSCORE + n);
        }
      }
      jmvars.put(varCount,Integer.toString(currentIterationIndex));
    }
  }
  return sb.toString();
}
","java.sql.SQLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jdbc\src\main\java\org\apache\jmeter\protocol\jdbc\AbstractJDBCTestElement.java",521
1367,"'-tryline","private int processRow(ResultSet rs,ResultSetMetaData meta,StringBuilder sb,int numColumns,JMeterVariables jmvars,String[] varNames,List<Map<String,Object>> results,int currentIterationIndex) throws SQLException, UnsupportedEncodingException {
  Map<String,Object> row=null;
  currentIterationIndex++;
  for (int i=1; i <= numColumns; i++) {
    Object o=rs.getObject(i);
    if (results != null) {
      if (row == null) {
        row=new HashMap<>(numColumns);
        results.add(row);
      }
      row.put(meta.getColumnLabel(i),o);
    }
    if (o instanceof byte[]) {
      o=new String((byte[])o,ENCODING);
    }
    sb.append(o);
    if (i == numColumns) {
      sb.append('\n');
    }
 else {
      sb.append('\t');
    }
    if (i <= varNames.length) {
      String name=varNames[i - 1].trim();
      if (name.length() > 0) {
        jmvars.put(name + UNDERSCORE + currentIterationIndex,o == null ? null : o.toString());
      }
    }
  }
  return currentIterationIndex;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jdbc\src\main\java\org\apache\jmeter\protocol\jdbc\AbstractJDBCTestElement.java",585
1368,"'-tryline","/** 
 * Gets a textual description about the pools configuration.
 * @param poolName Pool name
 * @return Connection information on {@code poolName} or a short message,when the JMeter object specified by  {@code poolName} is not apool
 * @throws SQLException when an error occurs, while gathering information about the connection
 */
public static String getConnectionInfo(String poolName) throws SQLException {
  Object poolObject=JMeterContextService.getContext().getVariables().getObject(poolName);
  if (poolObject instanceof DataSourceComponentImpl) {
    DataSourceComponentImpl pool=(DataSourceComponentImpl)poolObject;
    return pool.getConnectionInfo();
  }
 else {
    return Object: + poolName +  is not of expected type '+ DataSourceComponentImpl.class.getName()+ ';
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jdbc\src\main\java\org\apache\jmeter\protocol\jdbc\config\DataSourceElement.java",151
1369,"'-tryline","/** 
 * Utility routine to get the connection from the pool.<br> Purpose: <ul> <li>allows JDBCSampler to be entirely independent of the pooling classes </li> <li>allows the pool storage mechanism to be changed if necessary</li> </ul>
 * @param poolName name of the pool to get a connection from
 * @return a possible cached connection from the pool
 * @throws SQLException when an error occurs while getting the connection from the pool
 */
public static Connection getConnection(String poolName) throws SQLException {
  Object poolObject=JMeterContextService.getContext().getVariables().getObject(poolName);
  if (poolObject == null) {
    throw new SQLException(No pool found named: ' + poolName + ', ensure Variable Name matches Variable Name of JDBC Connection Configuration);
  }
 else {
    if (poolObject instanceof DataSourceComponentImpl) {
      DataSourceComponentImpl pool=(DataSourceComponentImpl)poolObject;
      return pool.getConnection();
    }
 else {
      String errorMsg=Found object stored under variable:' + poolName + ' with class:+ poolObject.getClass().getName()+  and value: '+ poolObject+  but it's not a DataSourceComponent, check you're not already using this name as another variable;
      log.error(errorMsg);
      throw new SQLException(errorMsg);
    }
  }
}
","java.sql.SQLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jdbc\src\main\java\org\apache\jmeter\protocol\jdbc\config\DataSourceElement.java",174
1370,"'-tryline","/** 
 * @return Connection
 * @throws SQLException if database access error occurred
 */
public Connection getConnection() throws SQLException {
  BasicDataSource dsc=getConfiguredDataSource();
  Connection conn=dsc.getConnection();
  int isolation=DataSourceElementBeanInfo.getTransactionIsolationMode(getTransactionIsolation());
  if (isolation >= 0 && conn.getTransactionIsolation() != isolation) {
    try {
      conn.setTransactionIsolation(isolation);
      log.debug(Setting transaction isolation: {}@{},isolation,System.identityHashCode(dsc));
    }
 catch (    SQLException ex) {
      log.error(Could not set transaction isolation: {}@{},isolation,System.identityHashCode(dsc),ex);
    }
  }
  return conn;
}
","java.sql.SQLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jdbc\src\main\java\org\apache\jmeter\protocol\jdbc\config\DataSourceElement.java",356
1371,"'-tryline","protected <T>T getPropertyFromConfig(SubConfiguration cfg,String property,T defaultValue,Class<T> clazz) throws ExportException {
  try {
    return cfg.getProperty(property,defaultValue,clazz);
  }
 catch (  ConfigurationException ex) {
    throw new ExportException(String.format(Wrong property \%s\ in \%s\ export configuration,property,getName()),ex);
  }
}
","org.apache.jmeter.report.dashboard.ExportException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\report\dashboard\AbstractDataExporter.java",120
1372,"'-tryline","/** 
 * Export data from the specified context using the given configuration.
 * @param context the context (must not be  {@code null})
 * @param file the file which from samples come (must not be  {@code null})
 * @param configuration the configuration (must not be  {@code null})
 * @throws ExportException the export exception
 */
void export(SampleContext context,File file,ReportGeneratorConfiguration configuration) throws ExportException ;
","org.apache.jmeter.report.dashboard.ExportException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\report\dashboard\DataExporter.java",48
1373,"'-tryline","/** 
 * @see DataExporter#export(SampleContext,File,ReportGeneratorConfiguration)
 */
@Override public void export(SampleContext context,File file,ReportGeneratorConfiguration configuration) throws ExportException {
  Validate.notNull(context,MUST_NOT_BE_NULL,context);
  Validate.notNull(file,MUST_NOT_BE_NULL,file);
  Validate.notNull(configuration,MUST_NOT_BE_NULL,configuration);
  log.debug(Start template processing);
  DataContext dataContext=new DataContext();
  final ExporterConfiguration exportCfg=configuration.getExportConfigurations().get(getName());
  File templateDirectory=getPropertyFromConfig(exportCfg,TEMPLATE_DIR,new File(JMeterUtils.getJMeterBinDir(),TEMPLATE_DIR_NAME_DEFAULT),File.class);
  if (!templateDirectory.isDirectory()) {
    String message=String.format(\%s\ is not a valid template directory,templateDirectory.getAbsolutePath());
    log.error(message);
    throw new ExportException(message);
  }
  File outputDir=getPropertyFromConfig(exportCfg,OUTPUT_DIR,new File(JMeterUtils.getJMeterBinDir(),OUTPUT_DIR_NAME_DEFAULT),File.class);
  String globallyDefinedOutputDir=JMeterUtils.getProperty(JMeter.JMETER_REPORT_OUTPUT_DIR_PROPERTY);
  if (!StringUtils.isEmpty(globallyDefinedOutputDir)) {
    outputDir=new File(globallyDefinedOutputDir);
  }
  JOrphanUtils.canSafelyWriteToFolder(outputDir,this::htmlReportFileFilter);
  if (log.isInfoEnabled()) {
    log.info(Will generate dashboard in folder: {},outputDir.getAbsolutePath());
  }
  final boolean filtersOnlySampleSeries=exportCfg.filtersOnlySampleSeries();
  addToContext(DATA_CTX_FILTERS_ONLY_SAMPLE_SERIES,filtersOnlySampleSeries,dataContext);
  final String seriesFilter=exportCfg.getSeriesFilter();
  Pattern filterPattern=null;
  if (StringUtils.isNotBlank(seriesFilter)) {
    try {
      filterPattern=Pattern.compile(seriesFilter);
    }
 catch (    PatternSyntaxException ex) {
      log.error(Invalid series filter: '{}', {},seriesFilter,ex.getDescription());
    }
  }
  addToContext(DATA_CTX_SERIES_FILTER,seriesFilter,dataContext);
  final boolean showControllerSeriesOnly=exportCfg.showControllerSeriesOnly();
  addToContext(DATA_CTX_SHOW_CONTROLLERS_ONLY,showControllerSeriesOnly,dataContext);
  JsonizerVisitor jsonizer=new JsonizerVisitor();
  Map<String,Object> storedData=context.getData();
  addResultToContext(ReportGenerator.BEGIN_DATE_CONSUMER_NAME,storedData,dataContext,jsonizer);
  addResultToContext(ReportGenerator.END_DATE_CONSUMER_NAME,storedData,dataContext,jsonizer);
  addResultToContext(ReportGenerator.APDEX_SUMMARY_CONSUMER_NAME,storedData,dataContext,jsonizer);
  addResultToContext(ReportGenerator.ERRORS_SUMMARY_CONSUMER_NAME,storedData,dataContext,jsonizer);
  addResultToContext(ReportGenerator.REQUESTS_SUMMARY_CONSUMER_NAME,storedData,dataContext,jsonizer);
  addResultToContext(ReportGenerator.STATISTICS_SUMMARY_CONSUMER_NAME,storedData,dataContext,jsonizer);
  addResultToContext(ReportGenerator.TOP5_ERRORS_BY_SAMPLER_CONSUMER_NAME,storedData,dataContext,jsonizer);
  ExtraOptionsResultCustomizer customizer=new ExtraOptionsResultCustomizer();
  EmptyGraphChecker checker=new EmptyGraphChecker(filtersOnlySampleSeries,showControllerSeriesOnly,filterPattern);
  Map<String,GraphConfiguration> mapConfiguration=new HashMap<>();
  DataContext customGraphs=new DataContext();
  for (  Map.Entry<String,GraphConfiguration> graphEntry : configuration.getGraphConfigurations().entrySet()) {
    final String graphId=graphEntry.getKey();
    final GraphConfiguration graphConfiguration=graphEntry.getValue();
    customizer.setExtraOptions(exportCfg.getGraphExtraConfigurations().get(graphId));
    checker.setExcludesControllers(graphConfiguration.excludesControllers());
    checker.setGraphId(graphId);
    mapConfiguration.put(graphId,graphConfiguration);
    if (graphId.startsWith(CUSTOM_GRAPH_PREFIX)) {
      addResultToContext(graphId,storedData,customGraphs,jsonizer,customizer,checker);
    }
 else {
      addResultToContext(graphId,storedData,dataContext,jsonizer,customizer,checker);
    }
  }
  dataContext.put(graphConfigurations,mapConfiguration);
  dataContext.put(customsGraphsData,customGraphs);
  long oldTimestamp=formatTimestamp(ReportGenerator.BEGIN_DATE_CONSUMER_NAME,dataContext);
  formatTimestamp(ReportGenerator.END_DATE_CONSUMER_NAME,dataContext);
  TimeZone timezone=TimeZone.getDefault();
  addToContext(DATA_CTX_TIMEZONE_OFFSET,timezone.getOffset(oldTimestamp),dataContext);
  if (StringUtils.isNotEmpty(configuration.getReportTitle())) {
    dataContext.put(DATA_CTX_REPORT_TITLE,StringEscapeUtils.escapeHtml4(configuration.getReportTitle()));
  }
  addToContext(DATA_CTX_TESTFILE,file.getName(),dataContext);
  addToContext(DATA_CTX_OVERALL_FILTER,configuration.getSampleFilter(),dataContext);
  Configuration templateCfg=new Configuration(Configuration.VERSION_2_3_30);
  try {
    templateCfg.setDirectoryForTemplateLoading(templateDirectory);
    templateCfg.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
    if (log.isInfoEnabled()) {
      log.info(Report will be generated in: {}, creating folder structure,outputDir.getAbsolutePath());
    }
    FileUtils.forceMkdir(outputDir);
    TemplateVisitor visitor=new TemplateVisitor(templateDirectory.toPath(),outputDir.toPath(),templateCfg,dataContext);
    Files.walkFileTree(templateDirectory.toPath(),visitor);
  }
 catch (  IOException ex) {
    throw new ExportException(Unable to process template files.,ex);
  }
  log.debug(End of template processing);
}
","org.apache.jmeter.report.dashboard.ExportException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\report\dashboard\HtmlTemplateExporter.java",286
1374,"'-tryline","@Override public void export(SampleContext context,File file,ReportGeneratorConfiguration reportGeneratorConfiguration) throws ExportException {
  Object data=context.getData().get(ReportGenerator.STATISTICS_SUMMARY_CONSUMER_NAME);
  if (data instanceof MapResultData) {
    LOGGER.info(Found data for consumer {}Â in context,ReportGenerator.STATISTICS_SUMMARY_CONSUMER_NAME);
    MapResultData result=(MapResultData)data;
    Map<String,SamplingStatistic> statistics=new HashMap<>();
    MapResultData overallData=(MapResultData)result.getResult(overall);
    LOGGER.info(Creating statistics for overall);
    createStatistic(statistics,overallData);
    ListResultData itemsData=(ListResultData)result.getResult(items);
    LOGGER.info(Creating statistics for other transactions);
    itemsData.forEach(r -> createStatistic(statistics,(MapResultData)r));
    LOGGER.info(Checking output folder);
    File outputDir=checkAndGetOutputFolder(reportGeneratorConfiguration);
    File outputFile=new File(outputDir,OUTPUT_FILENAME);
    LOGGER.info(Writing statistics JSON to {},outputFile);
    try (Writer fileWriter=Files.newBufferedWriter(outputFile.toPath())){
      OBJECT_WRITER.writeValue(fileWriter,statistics);
    }
 catch (    IOException e) {
      throw new ExportException(Error generating JSON statistics file to  + outputFile +  for + statistics,e);
    }
  }
}
","org.apache.jmeter.report.dashboard.ExportException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\report\dashboard\JsonExporter.java",62
1375,"'-tryline","/** 
 * Check folder and return output folder.
 * @param reportGeneratorConfiguration {@link ReportGeneratorConfiguration}
 * @return {@link File} output folder
 * @throws ExportException
 */
private File checkAndGetOutputFolder(ReportGeneratorConfiguration reportGeneratorConfiguration) throws ExportException {
  final ExporterConfiguration exportCfg=reportGeneratorConfiguration.getExportConfigurations().get(getName());
  File outputDir=getPropertyFromConfig(exportCfg,HtmlTemplateExporter.OUTPUT_DIR,new File(JMeterUtils.getJMeterBinDir(),HtmlTemplateExporter.OUTPUT_DIR_NAME_DEFAULT),File.class);
  String globallyDefinedOutputDir=JMeterUtils.getProperty(JMeter.JMETER_REPORT_OUTPUT_DIR_PROPERTY);
  if (!StringUtils.isEmpty(globallyDefinedOutputDir)) {
    outputDir=new File(globallyDefinedOutputDir);
  }
  JOrphanUtils.canSafelyWriteToFolder(outputDir,JSON_FILE_FILTER);
  try {
    FileUtils.forceMkdir(outputDir);
  }
 catch (  IOException ex) {
    throw new ExportException(Error creating output folder  + outputDir.getAbsolutePath(),ex);
  }
  return outputDir;
}
","org.apache.jmeter.report.dashboard.ExportException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\report\dashboard\JsonExporter.java",91
1376,"'-tryline","/** 
 * Extract value from String responseData by XPath query.
 * @param query the query to execute
 * @param matchStrings list of matched strings (may include nulls)
 * @param matchNumber int Match Number
 * @param responseData String that contains the entire Document
 * @throws SaxonApiException
 * @throws FactoryConfigurationError
 */
private void getValuesForXPath(String query,List<String> matchStrings,int matchNumber,String responseData) throws SaxonApiException, FactoryConfigurationError {
  XPathUtil.putValuesForXPathInListUsingSaxon(responseData,query,matchStrings,getFragment(),matchNumber,getNamespaces());
}
","net.sf.saxon.s9api.SaxonApiException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\extractor\XPath2Extractor.java",216
1377,"'-tryline","public static void putValuesForXPathInListUsingSaxon(String xmlFile,String xPathQuery,List<String> matchStrings,boolean fragment,int matchNumber,String namespaces) throws SaxonApiException, FactoryConfigurationError {
  final ImmutablePair<String,String> key=ImmutablePair.of(xPathQuery,namespaces);
  XPathExecutable xPathExecutable;
  if (StringUtils.isNotEmpty(xPathQuery)) {
    xPathExecutable=XPATH_CACHE.get(key);
  }
 else {
    log.warn(Error : {},JMeterUtils.getResString(xpath2_extractor_empty_query));
    return;
  }
  try (StringReader reader=new StringReader(xmlFile)){
    net.sf.saxon.s9api.DocumentBuilder builder=PROCESSOR.newDocumentBuilder();
    XdmNode xdmNode=builder.build(new SAXSource(new InputSource(reader)));
    if (xPathExecutable != null) {
      XPathSelector selector=null;
      try {
        selector=xPathExecutable.load();
        selector.setContextItem(xdmNode);
        XdmValue nodes=selector.evaluate();
        int length=nodes.size();
        int indexToMatch=matchNumber;
        if (matchNumber < 0) {
          for (          XdmItem item : nodes) {
            if (fragment) {
              matchStrings.add(item.toString());
            }
 else {
              matchStrings.add(item.getStringValue());
            }
          }
        }
 else {
          if (indexToMatch <= length) {
            if (matchNumber == 0 && length > 0) {
              indexToMatch=JMeterUtils.getRandomInt(length) + 1;
            }
            XdmItem item=nodes.itemAt(indexToMatch - 1);
            matchStrings.add(fragment ? item.toString() : item.getStringValue());
          }
 else {
            if (log.isWarnEnabled()) {
              log.warn(Error : {}{},JMeterUtils.getResString(xpath2_extractor_match_number_failure),indexToMatch);
            }
          }
        }
      }
  finally {
        if (selector != null) {
          try {
            selector.getUnderlyingXPathContext().setContextItem(null);
          }
 catch (          Exception e) {
          }
        }
      }
    }
  }
 }
","net.sf.saxon.s9api.SaxonApiException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\XPathUtil.java",415
1378,"'-tryline","/** 
 * @param result The result of xpath2 assertion
 * @param xmlFile XML data
 * @param xPathQuery XPath Query
 * @param namespaces Space separated set of prefix=namespace
 * @param isNegated invert result
 * @throws SaxonApiException when the parser has problems with the given xml or xpath query
 * @throws FactoryConfigurationError when the parser can not be instantiated
 */
public static void computeAssertionResultUsingSaxon(AssertionResult result,String xmlFile,String xPathQuery,String namespaces,Boolean isNegated) throws SaxonApiException, FactoryConfigurationError {
  final ImmutablePair<String,String> key=ImmutablePair.of(xPathQuery,namespaces);
  XPathExecutable xPathExecutable;
  if (StringUtils.isNotEmpty(xPathQuery)) {
    xPathExecutable=XPATH_CACHE.get(key);
  }
 else {
    log.warn(Error : {},JMeterUtils.getResString(xpath2_extractor_empty_query));
    return;
  }
  try (StringReader reader=new StringReader(xmlFile)){
    net.sf.saxon.s9api.DocumentBuilder builder=PROCESSOR.newDocumentBuilder();
    XdmNode xdmNode=builder.build(new SAXSource(new InputSource(reader)));
    if (xPathExecutable != null) {
      XPathSelector selector=null;
      try {
        Document doc;
        doc=XPathUtil.makeDocumentBuilder(false,false,false,false).newDocument();
        XObject xObject=XPathAPI.eval(doc,xPathQuery,getPrefixResolverForXPath2(doc,namespaces));
        selector=xPathExecutable.load();
        selector.setContextItem(xdmNode);
        XdmValue nodes=selector.evaluate();
        boolean resultOfEval=true;
        int length=nodes.size();
        if (length == 0) {
          resultOfEval=false;
        }
 else         if (xObject.getType() == XObject.CLASS_BOOLEAN) {
          resultOfEval=Boolean.parseBoolean(nodes.itemAt(0).getStringValue());
        }
        result.setFailure(isNegated ? resultOfEval : !resultOfEval);
        result.setFailureMessage(isNegated ? Nodes Matched for  + xPathQuery : No Nodes Matched for  + xPathQuery);
      }
 catch (      ParserConfigurationException|TransformerException e) {
        result.setError(true);
        result.setFailureMessage(Exception:  + e.getMessage() +  for:+ xPathQuery);
      }
 finally {
        if (selector != null) {
          try {
            selector.getUnderlyingXPathContext().setContextItem(null);
          }
 catch (          Exception e) {
            result.setError(true);
            result.setFailureMessage(Exception:  + e.getMessage() +  for:+ xPathQuery);
          }
        }
      }
    }
  }
 }
","net.sf.saxon.s9api.SaxonApiException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\XPathUtil.java",664
1379,"'-tryline","@Test public void testBug63033() throws SaxonApiException {
  Processor p=new Processor(false);
  XPathCompiler c=p.newXPathCompiler();
  c.declareNamespace(age,http://www.w3.org/2003/01/geo/wgs84_pos#);
  String xPathQuery=//Employees/Employee[1]/age:ag;
  XPathExecutable e=c.compile(xPathQuery);
  XPathSelector selector=e.load();
  selector.setContextItem(p.newDocumentBuilder().build(new StreamSource(new StringReader(xmlDoc))));
  XdmValue nodes=selector.evaluate();
  XdmItem item=nodes.itemAt(0);
  assertEquals(<age:ag xmlns:age=\http://www.w3.org/2003/01/geo/wgs84_pos#\>29</age:ag>,item.toString());
}
","net.sf.saxon.s9api.SaxonApiException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\XPathUtilTest.java",58
1380,"'-tryline","@Test public void testputValuesForXPathInListUsingSaxon() throws SaxonApiException, FactoryConfigurationError {
  String xPathQuery=//Employees/Employee/role;
  ArrayList<String> matchStrings=new ArrayList<String>();
  boolean fragment=false;
  String namespaces=age=http://www.w3.org/2003/01/geo/wgs84_pos#;
  int matchNumber=3;
  XPathUtil.putValuesForXPathInListUsingSaxon(xmlDoc,xPathQuery,matchStrings,fragment,matchNumber,namespaces);
  assertEquals(Manager,matchStrings.get(0));
  matchNumber=0;
  xPathQuery=//Employees/Employee[1]/age:ag;
  fragment=true;
  matchStrings.clear();
  XPathUtil.putValuesForXPathInListUsingSaxon(xmlDoc,xPathQuery,matchStrings,fragment,matchNumber,namespaces);
  assertEquals(<age:ag xmlns:age=\http://www.w3.org/2003/01/geo/wgs84_pos#\>29</age:ag>,matchStrings.get(0));
  assertEquals(1,matchStrings.size());
  matchNumber=-1;
  xPathQuery=//Employees/Employee/age:ag;
  matchStrings.clear();
  XPathUtil.putValuesForXPathInListUsingSaxon(xmlDoc,xPathQuery,matchStrings,fragment,matchNumber,namespaces);
  assertEquals(<age:ag xmlns:age=\http://www.w3.org/2003/01/geo/wgs84_pos#\>29</age:ag>,matchStrings.get(0));
  assertEquals(4,matchStrings.size());
  fragment=false;
  matchStrings.clear();
  XPathUtil.putValuesForXPathInListUsingSaxon(xmlDoc,xPathQuery,matchStrings,fragment,matchNumber,namespaces);
  assertEquals(29,matchStrings.get(0));
  assertEquals(4,matchStrings.size());
  matchStrings.clear();
  xPathQuery=regtsgwsdfstgsdf;
  XPathUtil.putValuesForXPathInListUsingSaxon(xmlDoc,xPathQuery,matchStrings,fragment,matchNumber,namespaces);
  assertEquals(new ArrayList<String>(),matchStrings);
  assertEquals(0,matchStrings.size());
  matchStrings.clear();
  xPathQuery=//Employees/Employee[1]/age:ag;
  matchNumber=555;
  XPathUtil.putValuesForXPathInListUsingSaxon(xmlDoc,xPathQuery,matchStrings,fragment,matchNumber,namespaces);
  assertEquals(new ArrayList<String>(),matchStrings);
  assertEquals(0,matchStrings.size());
}
","net.sf.saxon.s9api.SaxonApiException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\XPathUtilTest.java",72
1381,"'-tryline","@Test public void testComputeAssertionResultUsingSaxon() throws SaxonApiException, FactoryConfigurationError {
  AssertionResult res=new AssertionResult(test);
  String responseData=<book><page>one</page><page>two</page><empty></empty><a><b></b></a></book>;
  String xpathquery=/book;
  XPathUtil.computeAssertionResultUsingSaxon(res,responseData,xpathquery,,false);
  assertFalse(Should not be an error,res.isError());
  assertFalse(Should not be a failure,res.isFailure());
  xpathquery=/b;
  XPathUtil.computeAssertionResultUsingSaxon(res,responseData,xpathquery,,false);
  assertFalse(Should not be an error,res.isError());
  assertTrue(Should be a failure,res.isFailure());
  xpathquery=count(//page)=2;
  XPathUtil.computeAssertionResultUsingSaxon(res,responseData,xpathquery,,false);
  assertFalse(Should not be an error,res.isError());
  assertFalse(Should not be a failure,res.isFailure());
  xpathquery=count(//page)=3;
  XPathUtil.computeAssertionResultUsingSaxon(res,responseData,xpathquery,,false);
  assertFalse(Should not be an error,res.isError());
  assertTrue(Should be a failure,res.isFailure());
}
","net.sf.saxon.s9api.SaxonApiException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\XPathUtilTest.java",237
1382,"'-tryline","/** 
 * Process the input stream and try to read the keys from the store
 * @param is    {@link InputStream} from which the store should be loaded
 * @param pword the password used to check the integrity of the store
 * @throws IOException               if there is a problem decoding or reading the store. A badpassword might be the cause for this, or an empty store
 * @throws CertificateException      if any of the certificated in the store can not be loaded
 * @throws NoSuchAlgorithmException  if the algorithm to check the integrity of the store can notbe found
 * @throws KeyStoreException         if the store has not been initialized (should not happenhere)
 * @throws UnrecoverableKeyException if the key can not be recovered from the store (should nothappen here, either)
 */
@SuppressWarnings(JdkObsolete) public void load(InputStream is,String pword) throws NoSuchAlgorithmException, CertificateException, IOException, KeyStoreException, UnrecoverableKeyException {
  char[] pw=toCharArrayOrNull(pword);
  store.load(is,pw);
  List<String> aliasesList=new ArrayList<>();
  this.privateKeyByAlias=new HashMap<>();
  this.certsByAlias=new HashMap<>();
  PrivateKey privateKey=null;
  int index=0;
  Enumeration<String> aliases=store.aliases();
  while (aliases.hasMoreElements()) {
    String alias=aliases.nextElement();
    if (!store.isKeyEntry(alias)) {
      continue;
    }
    if (isIndexInConfiguredRange(index)) {
      privateKey=Objects.requireNonNull((PrivateKey)store.getKey(alias,pw),No key found for alias:  + alias);
      Certificate[] chain=Objects.requireNonNull(store.getCertificateChain(alias),No certificate chain found for alias + alias);
      aliasesList.add(alias);
      privateKeyByAlias.put(alias,privateKey);
      certsByAlias.put(alias,toX509Certificates(chain));
    }
    index++;
  }
  if (is != null) {
    Objects.requireNonNull(privateKey,No key(s) found);
    if (endIndex != -1 && index <= endIndex - startIndex && log.isWarnEnabled()) {
      log.warn(Did not find as much aliases as configured in indexes Start={}, end={}, found={},startIndex,endIndex,certsByAlias.size());
    }
  }
  this.names=aliasesList.toArray(new String[aliasesList.size()]);
}
","java.security.UnrecoverableKeyException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\keystore\JmeterKeyStore.java",90
1383,"'-tryline","private void retryLoadKeys(File initStore,boolean allowEmptyPassword) throws NoSuchAlgorithmException, CertificateException, IOException, KeyStoreException, UnrecoverableKeyException {
  for (int i=0; i < 3; i++) {
    String password=getPassword();
    if (!allowEmptyPassword) {
      Validate.notNull(password,Password for keystore must not be null);
    }
    try {
      if (initStore == null) {
        this.keyStore.load(null,password);
      }
 else {
        try (InputStream fis=new FileInputStream(initStore)){
          this.keyStore.load(fis,password);
        }
       }
      return;
    }
 catch (    IOException e) {
      log.debug(Could not load keystore. Wrong password for keystore?,e);
    }
    this.defaultpw=null;
  }
}
","java.security.UnrecoverableKeyException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SSLManager.java",169
1384,"'-tryline","public void setParameters(String parameters) throws InvalidVariableException {
  this.rawParameters=parameters;
  if (parameters == null || parameters.length() == 0) {
    return;
  }
  compiledComponents=functionParser.compileString(parameters);
  if (compiledComponents.size() > 1 || !(compiledComponents.get(0) instanceof String)) {
    hasFunction=true;
  }
  permanentResults=null;
  isDynamic=false;
  for (  Object item : compiledComponents) {
    if (item instanceof Function || item instanceof SimpleVariable) {
      isDynamic=true;
      break;
    }
  }
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\util\CompoundVariable.java",177
1385,"'-tryline","static Object getNamedFunction(String functionName) throws InvalidVariableException {
  if (functions.containsKey(functionName)) {
    try {
      return functions.get(functionName).getDeclaredConstructor().newInstance();
    }
 catch (    Exception e) {
      log.error(Exception occurred while instantiating a function: {},functionName,e);
      throw new InvalidVariableException(e);
    }
  }
  return new SimpleVariable(functionName);
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\util\CompoundVariable.java",197
1386,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\util\CompoundVariable.java",231
1387,"'-tryline","/** 
 * Compile a general string into a list of elements for a CompoundVariable. Calls  {@link #makeFunction(StringReader)} if it detects an unescaped ${.Removes escapes from '$', ',' and '\'.
 * @param value string containing the function / variable references (if any)
 * @return list of Strings or Objects representing functions
 * @throws InvalidVariableException when evaluation of variables fail
 */
ArrayList<Object> compileString(String value) throws InvalidVariableException {
  StringReader reader=new StringReader(value);
  ArrayList<Object> result=new ArrayList<>();
  StringBuilder buffer=new StringBuilder();
  char previous=' ';
  char[] current=new char[1];
  try {
    while (reader.read(current) == 1) {
      if (current[0] == '\\') {
        previous=current[0];
        if (reader.read(current) == 0) {
          break;
        }
        if (current[0] != '$' && current[0] != ',' && current[0] != '\\') {
          buffer.append(previous);
        }
        previous=' ';
        buffer.append(current[0]);
      }
 else       if (current[0] == '{' && previous == '$') {
        buffer.deleteCharAt(buffer.length() - 1);
        if (buffer.length() > 0) {
          result.add(buffer.toString());
          buffer.setLength(0);
        }
        result.add(makeFunction(reader));
        previous=' ';
      }
 else {
        buffer.append(current[0]);
        previous=current[0];
      }
    }
    if (buffer.length() > 0) {
      result.add(buffer.toString());
    }
  }
 catch (  IOException e) {
    log.error(Error parsing function: {},value,e);
    result.clear();
    result.add(value);
  }
  if (result.isEmpty()) {
    result.add();
  }
  return result;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\util\FunctionParser.java",40
1388,"'-tryline","/** 
 * Compile a string into a function or SimpleVariable. Called by  {@link #compileString(String)} when that has detected ${.Calls  {@link CompoundVariable#getNamedFunction(String)} if it detects:'(' - start of parameter list '}' - end of function call
 * @param reader points to input after the ${
 * @return the function or variable object (or a String)
 * @throws InvalidVariableException when evaluation of variables fail
 */
Object makeFunction(StringReader reader) throws InvalidVariableException {
  char[] current=new char[1];
  char previous=' ';
  StringBuilder buffer=new StringBuilder();
  Object function;
  try {
    while (reader.read(current) == 1) {
      if (current[0] == '\\') {
        if (reader.read(current) == 0) {
          break;
        }
        previous=' ';
        buffer.append(current[0]);
      }
 else       if (current[0] == '(' && previous != ' ') {
        String funcName=buffer.toString();
        function=CompoundVariable.getNamedFunction(funcName.trim());
        if (function instanceof Function) {
          ((Function)function).setParameters(parseParams(reader));
          if (firstNonSpace(reader,'#') != '}') {
            reader.reset();
            char[] cb=new char[100];
            int nbRead=reader.read(cb);
            throw new InvalidVariableException(Expected } after  + funcName +  function call in + new String(cb,0,nbRead));
          }
          if (function instanceof TestStateListener) {
            StandardJMeterEngine.register((TestStateListener)function);
          }
          return function;
        }
 else {
          buffer.append(current[0]);
        }
      }
 else       if (current[0] == '}') {
        function=CompoundVariable.getNamedFunction(buffer.toString());
        if (function instanceof Function) {
          ((Function)function).setParameters(new ArrayList<>());
        }
        buffer.setLength(0);
        return function;
      }
 else {
        buffer.append(current[0]);
        previous=current[0];
      }
    }
  }
 catch (  IOException e) {
    log.error(Error parsing function: {},buffer,e);
    return null;
  }
  log.warn(Probably an invalid function string: {},buffer);
  return buffer.toString();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\util\FunctionParser.java",100
1389,"'-tryline","/** 
 * Compile a String into a list of parameters, each made into a CompoundVariable. Parses strings of the following form: <ul> <li>text)</li> <li>text,text)</li> <li></li> </ul>
 * @param reader a StringReader pointing to the current input location, just after (
 * @return a list of CompoundVariable elements
 * @throws InvalidVariableException when evaluation of variables fail
 */
ArrayList<CompoundVariable> parseParams(StringReader reader) throws InvalidVariableException {
  ArrayList<CompoundVariable> result=new ArrayList<>();
  StringBuilder buffer=new StringBuilder();
  char[] current=new char[1];
  char previous=' ';
  int functionRecursion=0;
  int parenRecursion=0;
  try {
    while (reader.read(current) == 1) {
      if (current[0] == '\\') {
        buffer.append(current[0]);
        if (reader.read(current) == 0) {
          break;
        }
        previous=' ';
        buffer.append(current[0]);
      }
 else       if (current[0] == ',' && functionRecursion == 0) {
        CompoundVariable param=new CompoundVariable();
        param.setParameters(buffer.toString());
        buffer.setLength(0);
        result.add(param);
      }
 else       if (current[0] == ')' && functionRecursion == 0 && parenRecursion == 0) {
        if (buffer.length() == 0 && result.isEmpty()) {
          return result;
        }
        CompoundVariable param=new CompoundVariable();
        param.setParameters(buffer.toString());
        buffer.setLength(0);
        result.add(param);
        return result;
      }
 else       if (current[0] == '{' && previous == '$') {
        buffer.append(current[0]);
        previous=current[0];
        functionRecursion++;
      }
 else       if (current[0] == '}' && functionRecursion > 0) {
        buffer.append(current[0]);
        previous=current[0];
        functionRecursion--;
      }
 else       if (current[0] == ')' && functionRecursion == 0 && parenRecursion > 0) {
        buffer.append(current[0]);
        previous=current[0];
        parenRecursion--;
      }
 else       if (current[0] == '(' && functionRecursion == 0) {
        buffer.append(current[0]);
        previous=current[0];
        parenRecursion++;
      }
 else {
        buffer.append(current[0]);
        previous=current[0];
      }
    }
  }
 catch (  IOException e) {
    log.error(Error parsing function: {},buffer,e);
  }
  log.warn(Probably an invalid function string: {},buffer);
  CompoundVariable var=new CompoundVariable();
  var.setParameters(buffer.toString());
  result.add(var);
  return result;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\util\FunctionParser.java",175
1390,"'-tryline","@Override public JMeterProperty transformValue(JMeterProperty prop) throws InvalidVariableException {
  PatternMatcher pm=JMeterUtils.getMatcher();
  PatternCompiler compiler=new Perl5Compiler();
  String input=prop.getStringValue();
  if (input == null) {
    return prop;
  }
  for (  Map.Entry<String,String> entry : getVariables().entrySet()) {
    String key=entry.getKey();
    String value=entry.getValue();
    if (regexMatch) {
      try {
        Pattern pattern=compiler.compile(constructPattern(value));
        input=Util.substitute(pm,pattern,new StringSubstitution(FUNCTION_REF_PREFIX + key + FUNCTION_REF_SUFFIX),input,Util.SUBSTITUTE_ALL);
      }
 catch (      MalformedPatternException e) {
        log.warn(Malformed pattern: {},value);
      }
    }
 else {
      input=StringUtilities.substitute(input,value,FUNCTION_REF_PREFIX + key + FUNCTION_REF_SUFFIX);
    }
  }
  return new StringProperty(prop.getName(),input);
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\util\ReplaceFunctionsWithStrings.java",67
1391,"'-tryline","@Override public JMeterProperty transformValue(JMeterProperty prop) throws InvalidVariableException {
  JMeterProperty newValue=prop;
  getMasterFunction().clear();
  getMasterFunction().setParameters(prop.getStringValue());
  if (getMasterFunction().hasFunction()) {
    newValue=new FunctionProperty(prop.getName(),getMasterFunction().getFunction());
  }
  return newValue;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\util\ReplaceStringWithFunctions.java",38
1392,"'-tryline","@Override public JMeterProperty transformValue(JMeterProperty prop) throws InvalidVariableException {
  String input=prop.getStringValue();
  for (  Map.Entry<String,String> entry : getVariables().entrySet()) {
    String key=entry.getKey();
    String value=entry.getValue();
    input=StringUtilities.substitute(input,${ + key + },value);
  }
  return new StringProperty(prop.getName(),input);
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\util\UndoVariableReplacement.java",38
1393,"'-tryline","/** 
 * Replaces TestElement StringProperties containing functions with their Function properties equivalent, example: ${__time()}_${__threadNum()}_${__machineName()} will become a FunctionProperty of a CompoundVariable containing  3 functions
 * @param el {@link TestElement} in which the values should be replaced
 * @throws InvalidVariableException when transforming of the variables goes awry andthe used transformer throws an  {@link InvalidVariableException}
 */
public void replaceValues(TestElement el) throws InvalidVariableException {
  Collection<JMeterProperty> newProps=replaceValues(el.propertyIterator(),new ReplaceStringWithFunctions(masterFunction,variables));
  setProperties(el,newProps);
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\util\ValueReplacer.java",70
1394,"'-tryline","/** 
 * Transforms strings into variable references
 * @param el {@link TestElement} in which the we will look for strings, that can be replaced by variable references
 * @throws InvalidVariableException  when transforming of the strings goes awry andthe used transformer throws an  {@link InvalidVariableException}
 */
public void reverseReplace(TestElement el) throws InvalidVariableException {
  Collection<JMeterProperty> newProps=replaceValues(el.propertyIterator(),new ReplaceFunctionsWithStrings(masterFunction,variables));
  setProperties(el,newProps);
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\util\ValueReplacer.java",91
1395,"'-tryline","/** 
 * Transforms strings into variable references using regexp matching if regexMatch is <code>true</code>
 * @param el {@link TestElement} in which the we will look for strings, that can be replaced by variable references
 * @param regexMatch when <code>true</code> variable substitution will be done in regexp matching mode
 * @throws InvalidVariableException  when transforming of the strings goes awry andthe used transformer throws an  {@link InvalidVariableException}
 */
public void reverseReplace(TestElement el,boolean regexMatch) throws InvalidVariableException {
  Collection<JMeterProperty> newProps=replaceValues(el.propertyIterator(),new ReplaceFunctionsWithStrings(masterFunction,variables,regexMatch));
  setProperties(el,newProps);
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\util\ValueReplacer.java",103
1396,"'-tryline","/** 
 * Replaces ${key} by value extracted from variables if any
 * @param el {@link TestElement} in which values should be replaced
 * @throws InvalidVariableException when transforming of the variables goes awry andthe used transformer throws an  {@link InvalidVariableException}
 */
public void undoReverseReplace(TestElement el) throws InvalidVariableException {
  Collection<JMeterProperty> newProps=replaceValues(el.propertyIterator(),new UndoVariableReplacement(masterFunction,variables));
  setProperties(el,newProps);
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\util\ValueReplacer.java",116
1397,"'-tryline","/** 
 * Replaces a  {@link StringProperty} containing functions with their Function properties equivalent.<p>For example: <code>${__time()}_${__threadNum()}_${__machineName()}</code> will become a {@link org.apache.jmeter.testelement.property.FunctionProperty} ofa  {@link CompoundVariable} containing three functions
 * @param iter the {@link PropertyIterator} over all properties, in which the values should be replaced
 * @param transform the {@link ValueTransformer}, that should do transformation
 * @return a new {@link Collection} with all the transformed {@link JMeterProperty}s
 * @throws InvalidVariableException when <code>transform</code> throws an {@link InvalidVariableException} while transforming a value
 */
private Collection<JMeterProperty> replaceValues(PropertyIterator iter,ValueTransformer transform) throws InvalidVariableException {
  List<JMeterProperty> props=new ArrayList<>();
  while (iter.hasNext()) {
    JMeterProperty val=iter.next();
    if (log.isDebugEnabled()) {
      log.debug(About to replace in property of type: {}: {},val.getClass(),val);
    }
    if (val instanceof StringProperty) {
      if (!val.getName().equals(TestElement.GUI_CLASS) && !val.getName().equals(TestElement.TEST_CLASS)) {
        val=transform.transformValue(val);
        log.debug(Replacement result: {},val);
      }
    }
 else     if (val instanceof NumberProperty) {
      val=transform.transformValue(val);
      log.debug(Replacement result: {},val);
    }
 else     if (val instanceof MultiProperty) {
      MultiProperty multiVal=(MultiProperty)val;
      Collection<JMeterProperty> newValues=replaceValues(multiVal.iterator(),transform);
      multiVal.clear();
      for (      JMeterProperty jmp : newValues) {
        multiVal.addProperty(jmp);
      }
      log.debug(Replacement result: {},multiVal);
    }
 else {
      log.debug(Won't replace {},val);
    }
    props.add(val);
  }
  return props;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\util\ValueReplacer.java",147
1398,"'-tryline","/** 
 * Transform the given property and return the new version.
 * @param property Property to be transformed
 * @return the transformed property
 * @throws InvalidVariableException if something went wrong while computing variables or functions
 */
JMeterProperty transformValue(JMeterProperty property) throws InvalidVariableException ;
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\util\ValueTransformer.java",26
1399,"'-tryline","/** 
 * <p><b> N.B. execute() should be synchronized if function is operating with non-thread-safe objects (e.g. operates with files). </b></p> JMeter ensures setParameters() happens-before execute(): setParameters is executed in main thread, and worker threads are started after that.
 * @see Function#execute(SampleResult,Sampler)
 */
@Override abstract public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException ;
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\functions\AbstractFunction.java",35
1400,"'-tryline","public String execute() throws InvalidVariableException {
  JMeterContext context=JMeterContextService.getContext();
  SampleResult previousResult=context.getPreviousResult();
  Sampler currentSampler=context.getCurrentSampler();
  return execute(previousResult,currentSampler);
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\functions\AbstractFunction.java",47
1401,"'-tryline","/** 
 * Note: This is always called even if no parameters are provided (versions of JMeter after 2.3.1)
 * @see Function#setParameters(Collection)
 */
@Override abstract public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException ;
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\functions\AbstractFunction.java",54
1402,"'-tryline","/** 
 * Utility method to check parameter counts.
 * @param parameters collection of parameters
 * @param min minimum number of parameters allowed
 * @param max maximum number of parameters allowed
 * @throws InvalidVariableException if the number of parameters is incorrect
 */
protected void checkParameterCount(Collection<CompoundVariable> parameters,int min,int max) throws InvalidVariableException {
  int num=parameters.size();
  if ((num > max) || (num < min)) {
    throw new InvalidVariableException(getReferenceKey() +  called with wrong number of parameters. Actual:  + num+ (min == max ? . Expected:  + min + . : . Expected: >=  + min +  and <= + max));
  }
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\functions\AbstractFunction.java",78
1403,"'-tryline","/** 
 * Utility method to check parameter counts.
 * @param parameters collection of parameters
 * @param count number of parameters expected
 * @throws InvalidVariableException if the number of parameters is incorrect
 */
protected void checkParameterCount(Collection<CompoundVariable> parameters,int count) throws InvalidVariableException {
  int num=parameters.size();
  if (num != count) {
    throw new InvalidVariableException(getReferenceKey() +  called with wrong number of parameters. Actual:  + num+ . Expected: + count+ .);
  }
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\functions\AbstractFunction.java",104
1404,"'-tryline","/** 
 * Utility method to check parameter counts.
 * @param parameters collection of parameters
 * @param minimum number of parameters expected
 * @throws InvalidVariableException if the number of parameters is incorrect
 */
protected void checkMinParameterCount(Collection<CompoundVariable> parameters,int minimum) throws InvalidVariableException {
  int num=parameters.size();
  if (num < minimum) {
    throw new InvalidVariableException(getReferenceKey() +  called with wrong number of parameters. Actual:  + num+ . Expected at least: + minimum+ .);
  }
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\functions\AbstractFunction.java",124
1405,"'-tryline","/** 
 * Given the previous SampleResult and the current Sampler, return a string to use as a replacement value for the function call. Assume setParameter was previously called. This method must be threadsafe - multiple threads will be using the same object.
 * @param previousResult The previous {@link SampleResult}
 * @param currentSampler The current {@link Sampler}
 * @return The replacement value, which was generated by the function
 * @throws InvalidVariableException - when the variables for the function call can't be evaluated
 */
String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException ;
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\functions\Function.java",31
1406,"'-tryline","/** 
 * A collection of the parameters used to configure your function. Each parameter is a CompoundVariable and can be resolved by calling the execute() method of the CompoundVariable (which should be done at execution.)
 * @param parameters The parameters for the function call
 * @throws InvalidVariableException - when the variables for the function call can't be evaluated
 */
void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException ;
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\functions\Function.java",45
1407,"'-tryline","public void setParameters(Collection<CompoundVariable> parameters,Integer min,Integer max) throws InvalidVariableException {
  checkParameterCount(parameters,min,max);
  values=parameters.toArray();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\AbstractFunctionByKey.java",43
1408,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,parametersCount);
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\AbstractFunctionByKey.java",59
1409,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String value=compute();
  if (values.length >= 1) {
    JMeterVariables vars=getVariables();
    if (vars != null) {
      String varName=((CompoundVariable)values[0]).execute().trim();
      if (varName.length() > 0) {
        vars.put(varName,value);
      }
    }
  }
  return value;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\AbstractHostIPName.java",43
1410,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,0,1);
  values=parameters.toArray();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\AbstractHostIPName.java",70
1411,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public synchronized String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  if (bshInterpreter == null) {
    throw new InvalidVariableException(BeanShell not found);
  }
  JMeterContext jmctx=JMeterContextService.getContext();
  JMeterVariables vars=jmctx.getVariables();
  String script=((CompoundVariable)values[0]).execute();
  String varName=;
  if (values.length > 1) {
    varName=((CompoundVariable)values[1]).execute().trim();
  }
  String resultStr=;
  try {
    if (currentSampler != null) {
      bshInterpreter.set(Sampler,currentSampler);
    }
    if (previousResult != null) {
      bshInterpreter.set(SampleResult,previousResult);
    }
    bshInterpreter.set(ctx,jmctx);
    bshInterpreter.set(vars,vars);
    bshInterpreter.set(props,JMeterUtils.getJMeterProperties());
    bshInterpreter.set(threadName,Thread.currentThread().getName());
    Object bshOut=bshInterpreter.eval(script);
    if (bshOut != null) {
      resultStr=bshOut.toString();
    }
    if (vars != null && varName.length() > 0) {
      vars.put(varName,resultStr);
    }
  }
 catch (  Exception ex) {
    log.warn(Error running BSH script,ex);
  }
  log.debug(__Beanshell({},{})={},script,varName,resultStr);
  return resultStr;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\BeanShell.java",61
1412,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,1,2);
  values=parameters.toArray();
  try {
    bshInterpreter=new BeanShellInterpreter(JMeterUtils.getProperty(INIT_FILE),log);
  }
 catch (  ClassNotFoundException e) {
    throw new InvalidVariableException(BeanShell not found,e);
  }
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\BeanShell.java",123
1413,"'-tryline","@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String originalString=values[0].execute();
  String mode=null;
  if (values.length > 1) {
    mode=values[1].execute();
  }
  if (StringUtils.isEmpty(mode)) {
    mode=ChangeCaseMode.UPPER.getName();
  }
  String targetString=changeCase(originalString,mode);
  addVariableValue(targetString,values,2);
  return targetString;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\ChangeCase.java",63
1414,"'-tryline","@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,MIN_PARAMETER_COUNT,MAX_PARAMETER_COUNT);
  values=parameters.toArray(new CompoundVariable[parameters.size()]);
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\ChangeCase.java",102
1415,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  StringBuilder sb=new StringBuilder(values.length);
  for (  Object val : values) {
    String numberString=((CompoundVariable)val).execute().trim();
    try {
      long value=Long.decode(numberString);
      char ch=(char)value;
      sb.append(ch);
    }
 catch (    NumberFormatException e) {
      log.warn(Could not parse {} : {},numberString,e.toString());
    }
  }
  return sb.toString();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\CharFunction.java",52
1416,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkMinParameterCount(parameters,1);
  values=parameters.toArray();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\CharFunction.java",72
1417,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String myValue=;
  String fileName=((org.apache.jmeter.engine.util.CompoundVariable)values[0]).execute();
  String columnOrNext=((org.apache.jmeter.engine.util.CompoundVariable)values[1]).execute();
  log.debug(execute ({}, {})   ,fileName,columnOrNext);
  if (columnOrNext.startsWith(*)) {
    FileWrapper.open(fileName,columnOrNext);
    return ;
  }
  if (columnOrNext.equals(next()) || columnOrNext.equals(next)) {
    FileWrapper.endRow(fileName);
    return ;
  }
  try {
    int columnIndex=Integer.parseInt(columnOrNext);
    myValue=FileWrapper.getColumn(fileName,columnIndex);
  }
 catch (  NumberFormatException e) {
    log.warn({} - can't parse column number: {} {},Thread.currentThread().getName(),columnOrNext,e.toString());
  }
catch (  IndexOutOfBoundsException e) {
    log.warn({} - invalid column number: {} at row {} {},Thread.currentThread().getName(),columnOrNext,FileWrapper.getCurrentRow(fileName),e.toString());
  }
  log.debug(execute value: {},myValue);
  return myValue;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\CSVRead.java",73
1418,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  if (log.isDebugEnabled()) {
    log.debug(setParameter - Collection.size={},parameters.size());
  }
  values=parameters.toArray();
  if (log.isDebugEnabled()) {
    for (int i=0; i < parameters.size(); i++) {
      log.debug(i: {},((CompoundVariable)values[i]).execute());
    }
  }
  checkParameterCount(parameters,2);
  FileWrapper.clearAll();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\CSVRead.java",140
1419,"'-tryline","@Override @SuppressWarnings(JdkObsolete) public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String dateString=values[0].execute();
  String sourceDateFormat=values[1].execute();
  String targetDateFormat=values[2].execute();
  try {
    SimpleDateFormat targetDateFormatter=new SimpleDateFormat(targetDateFormat);
    String newDate;
    if (sourceDateFormat != null && sourceDateFormat.length() > 0) {
      SimpleDateFormat sourceDateFormatter=new SimpleDateFormat(sourceDateFormat);
      newDate=targetDateFormatter.format(sourceDateFormatter.parse(dateString));
    }
 else {
      newDate=targetDateFormatter.format(new Date(Long.parseLong(dateString)));
    }
    addVariableValue(newDate,values,3);
    return newDate;
  }
 catch (  Exception e) {
    log.error(Error calling {} function with value {}, source format {}, target format {}, ,KEY,dateString,sourceDateFormat,targetDateFormat,e);
  }
  return ;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\DateTimeConvertFunction.java",64
1420,"'-tryline","@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,MIN_PARAMETER_COUNT,MAX_PARAMETER_COUNT);
  values=parameters.toArray(new CompoundVariable[parameters.size()]);
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\DateTimeConvertFunction.java",89
1421,"'-tryline","@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String digestAlgorithm=values[0].execute();
  String stringToEncode=values[1].execute();
  String salt=values.length > 2 ? values[2].execute() : null;
  String encodedString=null;
  try {
    MessageDigest md=MessageDigest.getInstance(digestAlgorithm);
    md.update(stringToEncode.getBytes(StandardCharsets.UTF_8));
    if (StringUtils.isNotEmpty(salt)) {
      md.update(salt.getBytes(StandardCharsets.UTF_8));
    }
    byte[] bytes=md.digest();
    encodedString=uppercase(Hex.encodeHexString(bytes),values,3);
    addVariableValue(encodedString,values,4);
  }
 catch (  NoSuchAlgorithmException e) {
    log.error(Error calling {} function with value {}, digest algorithm {}, salt {}, ,KEY,stringToEncode,digestAlgorithm,salt,e);
  }
  return encodedString;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\DigestEncodeFunction.java",71
1422,"'-tryline","@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,MIN_PARAMETER_COUNT,MAX_PARAMETER_COUNT);
  values=parameters.toArray(new CompoundVariable[parameters.size()]);
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\DigestEncodeFunction.java",108
1423,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String rawString=((CompoundVariable)values[0]).execute();
  return StringEscapeUtils.escapeHtml4(rawString);
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\EscapeHtml.java",64
1424,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,1);
  values=parameters.toArray();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\EscapeHtml.java",74
1425,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String valueToEscape=values[0].execute();
  String varName=;
  if (values.length >= PARAM_NAME) {
    varName=values[PARAM_NAME - 1].execute().trim();
  }
  String escapedValue=Perl5Compiler.quotemeta(valueToEscape);
  if (varName.length() > 0) {
    JMeterVariables vars=getVariables();
    if (vars != null) {
      vars.put(varName,escapedValue);
    }
  }
  if (log.isDebugEnabled()) {
    log.debug({} name:{} value:{},Thread.currentThread().getName(),varName,escapedValue);
  }
  return escapedValue;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\EscapeOroRegexpChars.java",64
1426,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,MIN_PARAM_COUNT,MAX_PARAM_COUNT);
  values=parameters.toArray(new CompoundVariable[parameters.size()]);
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\EscapeOroRegexpChars.java",92
1427,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String rawString=((CompoundVariable)values[0]).execute();
  return StringEscapeUtils.escapeXml10(rawString);
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\EscapeXml.java",61
1428,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,1);
  values=parameters.toArray();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\EscapeXml.java",71
1429,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String parameter=((CompoundVariable)values[0]).execute();
  CompoundVariable cv=new CompoundVariable(parameter);
  return cv.execute();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\EvalFunction.java",56
1430,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,MIN_PARAMETER_COUNT,MAX_PARAMETER_COUNT);
  values=parameters.toArray();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\EvalFunction.java",65
1431,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String variableName=((CompoundVariable)values[0]).execute();
  final JMeterVariables vars=getVariables();
  if (vars == null) {
    log.error(Variables have not yet been defined);
    return **ERROR - see log file**;
  }
  String variableValue=vars.get(variableName);
  CompoundVariable cv=new CompoundVariable(variableValue);
  return cv.execute();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\EvalVarFunction.java",61
1432,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,MIN_PARAMETER_COUNT,MAX_PARAMETER_COUNT);
  values=parameters.toArray();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\EvalVarFunction.java",76
1433,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String fileName=((CompoundVariable)values[0]).execute();
  String encoding=null;
  if (values.length >= ENCODING) {
    encoding=((CompoundVariable)values[ENCODING - 1]).execute().trim();
    if (encoding.length() <= 0) {
      encoding=null;
    }
  }
  String myName=;
  if (values.length >= PARAM_NAME) {
    myName=((CompoundVariable)values[PARAM_NAME - 1]).execute().trim();
  }
  String myValue=ERR_IND;
  try {
    File file=new File(fileName);
    if (file.exists() && file.canRead()) {
      myValue=FileUtils.readFileToString(new File(fileName),encoding);
    }
 else {
      log.warn(Could not read open: {} ,fileName);
    }
  }
 catch (  IOException e) {
    log.warn(Could not read file: {} {},fileName,e.getMessage(),e);
  }
  if (myName.length() > 0) {
    JMeterVariables vars=getVariables();
    if (vars != null) {
      vars.put(myName,myValue);
    }
  }
  if (log.isDebugEnabled()) {
    log.debug({} name: {} value: {},Thread.currentThread().getName(),myName,myValue);
  }
  return myValue;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\FileToString.java",81
1434,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,MIN_PARAM_COUNT,MAX_PARAM_COUNT);
  values=parameters.toArray();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\FileToString.java",129
1435,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public synchronized String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  Bindings bindings=scriptEngine.createBindings();
  populateBindings(bindings);
  String script=((CompoundVariable)values[0]).execute();
  String varName=;
  if (values.length > 1) {
    varName=((CompoundVariable)values[1]).execute().trim();
  }
  String resultStr=;
  try {
    if (currentSampler != null) {
      bindings.put(sampler,currentSampler);
    }
    if (previousResult != null) {
      bindings.put(prev,previousResult);
    }
    bindings.put(log,log);
    bindings.put(threadName,Thread.currentThread().getName());
    JMeterContext jmctx=JMeterContextService.getContext();
    bindings.put(ctx,jmctx);
    JMeterVariables vars=jmctx.getVariables();
    bindings.put(vars,vars);
    Properties props=JMeterUtils.getJMeterProperties();
    bindings.put(props,props);
    bindings.put(OUT,System.out);
    Object out=scriptEngine.eval(script,bindings);
    if (out != null) {
      resultStr=out.toString();
    }
    if (varName.length() > 0 && vars != null) {
      vars.put(varName,resultStr);
    }
  }
 catch (  Exception ex) {
    log.warn(Error running groovy script,ex);
  }
  log.debug(__groovy({},{})={},script,varName,resultStr);
  return resultStr;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\Groovy.java",81
1436,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,1,2);
  values=parameters.toArray();
  scriptEngine=JSR223TestElement.getInstance().getEngineByName(GROOVY_ENGINE_NAME);
  String fileName=JMeterUtils.getProperty(INIT_FILE);
  if (!StringUtils.isEmpty(fileName)) {
    File file=new File(fileName);
    if (!(file.exists() && file.canRead())) {
      File oldFile=file;
      file=new File(JMeterUtils.getJMeterHome(),fileName);
      if (!(file.exists() && file.canRead())) {
        throw new InvalidVariableException(Cannot read file, neither from: + oldFile.getAbsolutePath() + , nor from:+ file.getAbsolutePath()+ , check property '+ INIT_FILE+ ');
      }
    }
    try (Reader reader=Files.newBufferedReader(file.toPath(),Charset.defaultCharset())){
      Bindings bindings=scriptEngine.createBindings();
      bindings.put(log,log);
      scriptEngine.eval(reader,bindings);
    }
 catch (    Exception ex) {
      throw new InvalidVariableException(Failed loading script: + file.getAbsolutePath(),ex);
    }
  }
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\Groovy.java",136
1437,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  JMeterVariables vars=getVariables();
  int sum=0;
  String varName=((CompoundVariable)values[values.length - 1]).execute().trim();
  for (int i=0; i < values.length - 1; i++) {
    sum+=Integer.parseInt(((CompoundVariable)values[i]).execute());
  }
  try {
    sum+=Integer.parseInt(varName);
    varName=null;
  }
 catch (  NumberFormatException ignored) {
  }
  String totalString=Integer.toString(sum);
  if (vars != null && varName != null) {
    vars.put(varName.trim(),totalString);
  }
  return totalString;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\IntSum.java",55
1438,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkMinParameterCount(parameters,2);
  values=parameters.toArray();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\IntSum.java",87
1439,"'-tryline","@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String propertyName=values[0].execute();
  String propertyValue=JMeterUtils.getProperty(propertyName);
  return Boolean.toString(propertyValue != null);
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\IsPropDefined.java",48
1440,"'-tryline","@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,MIN_PARAMETER_COUNT,MAX_PARAMETER_COUNT);
  values=parameters.toArray(new CompoundVariable[parameters.size()]);
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\IsPropDefined.java",56
1441,"'-tryline","@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String variableName=values[0].execute();
  JMeterVariables jMeterVariables=getVariables();
  if (jMeterVariables != null) {
    String variableValue=jMeterVariables.get(variableName);
    return Boolean.toString(variableValue != null);
  }
 else {
    return Boolean.FALSE.toString();
  }
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\IsVarDefined.java",49
1442,"'-tryline","@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,MIN_PARAMETER_COUNT,MAX_PARAMETER_COUNT);
  values=parameters.toArray(new CompoundVariable[parameters.size()]);
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\IsVarDefined.java",62
1443,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  JMeterVariables vars=getVariables();
  boolean perThread=Boolean.parseBoolean(((CompoundVariable)variables[0]).execute());
  String varName=;
  if (variables.length >= 2) {
    varName=((CompoundVariable)variables[1]).execute().trim();
  }
  String counterString=;
  if (perThread) {
    counterString=String.valueOf(perThreadInt.get().addAndGet(1));
  }
 else {
    counterString=String.valueOf(globalCounter.addAndGet(1));
  }
  if (vars != null && varName.length() > 0) {
    vars.put(varName,counterString);
  }
  return counterString;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\IterationCounter.java",54
1444,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,1,2);
  variables=parameters.toArray();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\IterationCounter.java",83
1445,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  JMeterContext jmctx=JMeterContextService.getContext();
  JMeterVariables vars=jmctx.getVariables();
  String script=((CompoundVariable)values[0]).execute();
  String varName=values.length < 2 ? null : ((CompoundVariable)values[1]).execute().trim();
  String resultStr=;
  if (useRhinoEngine) {
    resultStr=executeWithRhino(previousResult,currentSampler,jmctx,vars,script,varName);
  }
 else {
    resultStr=executeWithNashorn(previousResult,currentSampler,jmctx,vars,script,varName);
  }
  return resultStr;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\JavaScript.java",85
1446,"'-tryline","/** 
 * @param previousResult {@link SampleResult}
 * @param currentSampler {@link Sampler}
 * @param jmctx {@link JMeterContext}
 * @param vars {@link JMeterVariables}
 * @param script Javascript code
 * @param varName variable name
 * @return result as String
 * @throws InvalidVariableException
 */
private String executeWithNashorn(SampleResult previousResult,Sampler currentSampler,JMeterContext jmctx,JMeterVariables vars,String script,String varName) throws InvalidVariableException {
  String resultStr=null;
  try {
    ScriptContext newContext=new SimpleScriptContext();
    ScriptEngine engine=getInstance().getEngineByName(JavaScript.NASHORN_ENGINE_NAME);
    Bindings bindings=engine.createBindings();
    bindings.put(log,log);
    bindings.put(ctx,jmctx);
    bindings.put(vars,vars);
    bindings.put(props,JMeterUtils.getJMeterProperties());
    bindings.put(threadName,Thread.currentThread().getName());
    bindings.put(sampler,currentSampler);
    bindings.put(sampleResult,previousResult);
    newContext.setBindings(bindings,ScriptContext.ENGINE_SCOPE);
    Object result=engine.eval(script,newContext);
    resultStr=result.toString();
    if (varName != null && vars != null) {
      vars.put(varName,resultStr);
    }
  }
 catch (  Exception e) {
    log.error(Error processing Javascript: [{}],script,e);
    throw new InvalidVariableException(Error processing Javascript: [ + script + ],e);
  }
  return resultStr;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\JavaScript.java",110
1447,"'-tryline","/** 
 * @param previousResult {@link SampleResult}
 * @param currentSampler {@link Sampler}
 * @param jmctx {@link JMeterContext}
 * @param vars {@link JMeterVariables}
 * @param script Javascript code
 * @param varName variable name
 * @return result as String
 * @throws InvalidVariableException
 */
private String executeWithRhino(SampleResult previousResult,Sampler currentSampler,JMeterContext jmctx,JMeterVariables vars,String script,String varName) throws InvalidVariableException {
  Context cx=Context.enter();
  String resultStr=null;
  try {
    Scriptable scope=cx.initStandardObjects(null);
    scope.put(log,scope,log);
    scope.put(ctx,scope,jmctx);
    scope.put(vars,scope,vars);
    scope.put(props,scope,JMeterUtils.getJMeterProperties());
    scope.put(threadName,scope,Thread.currentThread().getName());
    scope.put(sampler,scope,currentSampler);
    scope.put(sampleResult,scope,previousResult);
    Object result=cx.evaluateString(scope,script,<cmd>,1,null);
    resultStr=Context.toString(result);
    if (varName != null && vars != null) {
      vars.put(varName,resultStr);
    }
  }
 catch (  RhinoException e) {
    log.error(Error processing Javascript: [{}],script,e);
    throw new InvalidVariableException(Error processing Javascript: [ + script + ],e);
  }
 finally {
    Context.exit();
  }
  return resultStr;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\JavaScript.java",153
1448,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,1,2);
  values=parameters.toArray();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\JavaScript.java",198
1449,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String str=;
  CompoundVariable var=(CompoundVariable)values[0];
  String exp=var.execute();
  String varName=;
  if (values.length > 1) {
    varName=((CompoundVariable)values[1]).execute().trim();
  }
  JMeterContext jmctx=JMeterContextService.getContext();
  JMeterVariables vars=jmctx.getVariables();
  try {
    JexlContext jc=new MapContext();
    jc.set(log,log);
    jc.set(ctx,jmctx);
    jc.set(vars,vars);
    jc.set(props,JMeterUtils.getJMeterProperties());
    jc.set(threadName,Thread.currentThread().getName());
    jc.set(sampler,currentSampler);
    jc.set(sampleResult,previousResult);
    jc.set(OUT,System.out);
    Script e=getJexlEngine().createScript(exp);
    Object o=e.execute(jc);
    if (o != null) {
      str=o.toString();
    }
    if (vars != null && varName.length() > 0) {
      vars.put(varName,str);
    }
  }
 catch (  Exception e) {
    log.error(An error occurred while evaluating the expression \ + exp + \\n,e);
  }
  return str;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\Jexl2Function.java",62
1450,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,1,2);
  values=parameters.toArray();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\Jexl2Function.java",141
1451,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String str=;
  CompoundVariable var=(CompoundVariable)values[0];
  String exp=var.execute();
  String varName=;
  if (values.length > 1) {
    varName=((CompoundVariable)values[1]).execute().trim();
  }
  JMeterContext jmctx=JMeterContextService.getContext();
  JMeterVariables vars=jmctx.getVariables();
  try {
    JexlContext jc=new MapContext();
    jc.set(log,log);
    jc.set(ctx,jmctx);
    jc.set(vars,vars);
    jc.set(props,JMeterUtils.getJMeterProperties());
    jc.set(threadName,Thread.currentThread().getName());
    jc.set(sampler,currentSampler);
    jc.set(sampleResult,previousResult);
    jc.set(OUT,System.out);
    JexlScript e=threadLocalJexl.get().createScript(exp);
    Object o=e.execute(jc);
    if (o != null) {
      str=o.toString();
    }
    if (vars != null && varName.length() > 0) {
      vars.put(varName,str);
    }
  }
 catch (  Exception e) {
    log.error(An error occurred while evaluating the expression \{}\\n,exp,e);
  }
  return str;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\Jexl3Function.java",64
1452,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,1,2);
  values=parameters.toArray();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\Jexl3Function.java",137
1453,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String stringToLog=((CompoundVariable)values[0]).execute();
  String priorityString;
  if (values.length > 1) {
    priorityString=((CompoundVariable)values[1]).execute();
    if (priorityString.length() == 0) {
      priorityString=DEFAULT_PRIORITY;
    }
  }
 else {
    priorityString=DEFAULT_PRIORITY;
  }
  Throwable t=null;
  if (values.length > 2) {
    String value=((CompoundVariable)values[2]).execute();
    if (value.length() > 0) {
      t=new Throwable(value);
    }
  }
  String comment=;
  if (values.length > 3) {
    comment=((CompoundVariable)values[3]).execute();
  }
  logDetails(log,stringToLog,priorityString,t,comment);
  return stringToLog;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\LogFunction.java",75
1454,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,MIN_PARAMETER_COUNT,MAX_PARAMETER_COUNT);
  values=parameters.toArray();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\LogFunction.java",184
1455,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String stringToLog=((CompoundVariable)values[0]).execute();
  String priorityString;
  if (values.length > 1) {
    priorityString=((CompoundVariable)values[1]).execute();
    if (priorityString.length() == 0) {
      priorityString=DEFAULT_PRIORITY;
    }
  }
 else {
    priorityString=DEFAULT_PRIORITY;
  }
  Throwable t=null;
  if (values.length > 2) {
    t=new Throwable(((CompoundVariable)values[2]).execute());
  }
  LogFunction.logDetails(log,stringToLog,priorityString,t,);
  return ;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\LogFunction2.java",70
1456,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,MIN_PARAMETER_COUNT,MAX_PARAMETER_COUNT);
  values=parameters.toArray();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\LogFunction2.java",97
1457,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  JMeterVariables vars=getVariables();
  long sum=0;
  String varName=((CompoundVariable)values[values.length - 1]).execute().trim();
  for (int i=0; i < values.length - 1; i++) {
    sum+=Long.parseLong(((CompoundVariable)values[i]).execute());
  }
  try {
    sum+=Long.parseLong(varName);
    varName=null;
  }
 catch (  NumberFormatException ignored) {
  }
  String totalString=Long.toString(sum);
  if (vars != null && varName != null && varName.length() > 0) {
    vars.put(varName,totalString);
  }
  return totalString;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\LongSum.java",55
1458,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkMinParameterCount(parameters,2);
  values=parameters.toArray();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\LongSum.java",87
1459,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String propertyName=((CompoundVariable)values[0]).execute();
  String propertyDefault=propertyName;
  if (values.length > 2) {
    propertyDefault=((CompoundVariable)values[2]).execute();
  }
  String propertyValue=JMeterUtils.getPropDefault(propertyName,propertyDefault);
  if (values.length > 1) {
    String variableName=((CompoundVariable)values[1]).execute();
    if (variableName.length() > 0) {
      final JMeterVariables variables=getVariables();
      if (variables != null) {
        variables.put(variableName,propertyValue);
      }
    }
  }
  return propertyValue;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\Property.java",65
1460,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,MIN_PARAMETER_COUNT,MAX_PARAMETER_COUNT);
  values=parameters.toArray();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\Property.java",88
1461,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String propertyName=((CompoundVariable)values[0]).execute();
  String propertyDefault=1;
  if (values.length > 1) {
    propertyDefault=((CompoundVariable)values[1]).execute();
  }
  String propertyValue=JMeterUtils.getPropDefault(propertyName,propertyDefault);
  return propertyValue;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\Property2.java",69
1462,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,MIN_PARAMETER_COUNT,MAX_PARAMETER_COUNT);
  values=parameters.toArray();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\Property2.java",86
1463,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  long min=Long.parseLong(minimum.execute().trim());
  long max=Long.parseLong(maximum.execute().trim());
  long rand=ThreadLocalRandom.current().nextLong(min,max + 1);
  String randString=Long.toString(rand);
  if (varName != null) {
    JMeterVariables vars=getVariables();
    final String varTrim=varName.execute().trim();
    if (vars != null && varTrim.length() > 0) {
      vars.put(varTrim,randString);
    }
  }
  return randString;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\Random.java",57
1464,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,2,3);
  Object[] values=parameters.toArray();
  minimum=(CompoundVariable)values[0];
  maximum=(CompoundVariable)values[1];
  if (values.length > 2) {
    varName=(CompoundVariable)values[2];
  }
 else {
    varName=null;
  }
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\Random.java",82
1465,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  DateTimeFormatter formatter;
  if (values.length > 3) {
    String localeAsString=values[3].execute().trim();
    if (!localeAsString.trim().isEmpty()) {
      locale=LocaleUtils.toLocale(localeAsString);
    }
  }
  String format=values[0].execute().trim();
  if (!StringUtils.isEmpty(format)) {
    try {
      LocaleFormatObject lfo=new LocaleFormatObject(format,locale);
      formatter=dateRandomFormatterCache.get(lfo,key -> createFormatter((LocaleFormatObject)key));
    }
 catch (    IllegalArgumentException ex) {
      log.error(Format date pattern '{}' is invalid (see https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html),format,ex);
      return ;
    }
  }
 else {
    try {
      LocaleFormatObject lfo=new LocaleFormatObject(yyyy-MM-dd,locale);
      formatter=dateRandomFormatterCache.get(lfo,key -> createFormatter((LocaleFormatObject)key));
    }
 catch (    IllegalArgumentException ex) {
      log.error(Format date pattern '{}' is invalid (see https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html),format,ex);
      return ;
    }
  }
  String dateStart=values[1].execute().trim();
  long localStartDate=0;
  if (!dateStart.isEmpty()) {
    try {
      localStartDate=LocalDate.parse(dateStart,formatter).toEpochDay();
    }
 catch (    DateTimeParseException|NumberFormatException ex) {
      log.error(Failed to parse Start Date '{}',dateStart,ex);
    }
  }
 else {
    try {
      localStartDate=LocalDate.now(systemDefaultZoneID).toEpochDay();
    }
 catch (    DateTimeParseException|NumberFormatException ex) {
      log.error(Failed to create current date '{}',dateStart,ex);
    }
  }
  long localEndDate=0;
  String dateEnd=values[2].execute().trim();
  try {
    localEndDate=LocalDate.parse(dateEnd,formatter).toEpochDay();
  }
 catch (  DateTimeParseException|NumberFormatException ex) {
    log.error(Failed to parse End date '{}',dateEnd,ex);
  }
  String dateString=;
  if (localEndDate < localStartDate) {
    log.error(End Date '{}' must be greater than Start Date '{}',dateEnd,dateStart);
  }
 else {
    long randomDay=ThreadLocalRandom.current().nextLong(localStartDate,localEndDate);
    try {
      dateString=LocalDate.ofEpochDay(randomDay).format(formatter);
    }
 catch (    DateTimeParseException|NumberFormatException ex) {
      log.error(Failed to generate random date '{}',randomDay,ex);
    }
    addVariableValue(dateString,values,4);
  }
  return dateString;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\RandomDate.java",132
1466,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,MIN_PARAMETER_COUNT,MAX_PARAMETER_COUNT);
  values=parameters.toArray(new CompoundVariable[parameters.size()]);
  if (dateRandomFormatterCache == null) {
    dateRandomFormatterCache=Caffeine.newBuilder().maximumSize(100).build();
  }
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\RandomDate.java",215
1467,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String variablesNamesSplitBySeparatorValue=variablesNamesSplitBySeparator.execute().trim();
  JMeterVariables vars=getVariables();
  String outputValue=;
  String separator=;
  if (vars != null) {
    List<String> results=new ArrayList<>();
    String[] variables=variablesNamesSplitBySeparatorValue.split(SEPARATOR);
    for (    String currentVarName : variables) {
      if (!StringUtils.isEmpty(currentVarName)) {
        extractVariableValuesToList(currentVarName,vars,results);
      }
    }
    if (!results.isEmpty()) {
      int randomIndex=ThreadLocalRandom.current().nextInt(0,results.size());
      outputValue=results.get(randomIndex);
    }
 else {
      if (log.isDebugEnabled()) {
        log.debug(RandomFromMultiResult didn't find <var>_matchNr in variables :'{}' using separator:'{}', will return empty value,variablesNamesSplitBySeparatorValue,separator);
      }
    }
    if (varName != null) {
      final String varTrim=varName.execute().trim();
      if (!varTrim.isEmpty()) {
        vars.put(varTrim,outputValue);
      }
    }
  }
  return outputValue;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\RandomFromMultipleVars.java",65
1468,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,1,2);
  Object[] values=parameters.toArray();
  variablesNamesSplitBySeparator=(CompoundVariable)values[0];
  if (values.length > 1) {
    varName=(CompoundVariable)values[1];
  }
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\RandomFromMultipleVars.java",130
1469,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  int length=Integer.parseInt(values[0].execute());
  String charsToUse=null;
  if (values.length >= CHARS) {
    charsToUse=values[CHARS - 1].execute().trim();
    if (charsToUse.length() <= 0) {
      charsToUse=null;
    }
  }
  String myName=;
  if (values.length >= PARAM_NAME) {
    myName=values[PARAM_NAME - 1].execute().trim();
  }
  String myValue=null;
  if (StringUtils.isEmpty(charsToUse)) {
    myValue=RandomStringUtils.random(length);
  }
 else {
    myValue=RandomStringUtils.random(length,charsToUse);
  }
  if (myName.length() > 0) {
    JMeterVariables vars=getVariables();
    if (vars != null) {
      vars.put(myName,myValue);
    }
  }
  if (log.isDebugEnabled()) {
    log.debug({} name:{} value:{},Thread.currentThread().getName(),myName,myValue);
  }
  return myValue;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\RandomString.java",69
1470,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,MIN_PARAM_COUNT,MAX_PARAM_COUNT);
  values=parameters.toArray(new CompoundVariable[parameters.size()]);
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\RandomString.java",110
1471,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String valueIndex=;
  String defaultValue=;
  String between=;
  String name=;
  String inputVariable=;
  Pattern searchPattern;
  Object[] tmplt;
  try {
    searchPattern=JMeterUtils.getPatternCache().getPattern(((CompoundVariable)values[0]).execute(),Perl5Compiler.READ_ONLY_MASK);
    tmplt=generateTemplate(((CompoundVariable)values[1]).execute());
    if (values.length > 2) {
      valueIndex=((CompoundVariable)values[2]).execute();
    }
    if (valueIndex.length() == 0) {
      valueIndex=1;
    }
    if (values.length > 3) {
      between=((CompoundVariable)values[3]).execute();
    }
    if (values.length > 4) {
      String dv=((CompoundVariable)values[4]).execute();
      if (dv.length() != 0) {
        defaultValue=dv;
      }
    }
    if (values.length > 5) {
      name=((CompoundVariable)values[5]).execute();
    }
    if (values.length > 6) {
      inputVariable=((CompoundVariable)values[6]).execute();
    }
  }
 catch (  MalformedCachePatternException e) {
    log.error(Malformed cache pattern:{},values[0],e);
    throw new InvalidVariableException(Malformed cache pattern: + values[0],e);
  }
  JMeterVariables vars=getVariables();
  if (vars == null) {
    return defaultValue;
  }
  if (name.length() > 0) {
    vars.put(name,defaultValue);
  }
  String textToMatch=null;
  if (inputVariable.length() > 0) {
    textToMatch=vars.get(inputVariable);
  }
 else   if (previousResult != null) {
    textToMatch=previousResult.getResponseDataAsString();
  }
  if (textToMatch == null || textToMatch.length() == 0) {
    return defaultValue;
  }
  List<MatchResult> collectAllMatches=new ArrayList<>();
  try {
    PatternMatcher matcher=JMeterUtils.getMatcher();
    PatternMatcherInput input=new PatternMatcherInput(textToMatch);
    while (matcher.contains(input,searchPattern)) {
      MatchResult match=matcher.getMatch();
      if (match != null) {
        collectAllMatches.add(match);
      }
    }
  }
  finally {
    if (name.length() > 0) {
      vars.put(name + _matchNr,Integer.toString(collectAllMatches.size()));
    }
  }
  if (collectAllMatches.isEmpty()) {
    return defaultValue;
  }
  if (valueIndex.equals(ALL)) {
    StringBuilder value=new StringBuilder();
    Iterator<MatchResult> it=collectAllMatches.iterator();
    boolean first=true;
    while (it.hasNext()) {
      if (!first) {
        value.append(between);
      }
 else {
        first=false;
      }
      value.append(generateResult(it.next(),name,tmplt,vars));
    }
    return value.toString();
  }
 else   if (valueIndex.equals(RAND)) {
    MatchResult result=collectAllMatches.get(ThreadLocalRandom.current().nextInt(collectAllMatches.size()));
    return generateResult(result,name,tmplt,vars);
  }
 else {
    try {
      int index=Integer.parseInt(valueIndex) - 1;
      if (index >= collectAllMatches.size()) {
        return defaultValue;
      }
      MatchResult result=collectAllMatches.get(index);
      return generateResult(result,name,tmplt,vars);
    }
 catch (    NumberFormatException e) {
      float ratio=Float.parseFloat(valueIndex);
      MatchResult result=collectAllMatches.get((int)(collectAllMatches.size() * ratio + .5) - 1);
      return generateResult(result,name,tmplt,vars);
    }
  }
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\RegexFunction.java",83
1472,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,MIN_PARAMETER_COUNT,MAX_PARAMETER_COUNT);
  values=parameters.toArray();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\RegexFunction.java",240
1473,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String name=;
  if (currentSampler != null) {
    name=currentSampler.getName();
  }
  if (values.length > 0) {
    JMeterVariables vars=getVariables();
    if (vars != null) {
      String varName=((CompoundVariable)values[0]).execute().trim();
      if (varName.length() > 0) {
        vars.put(varName,name);
      }
    }
  }
  return name;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\SamplerName.java",46
1474,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,0,1);
  values=parameters.toArray();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\SamplerName.java",66
1475,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String propertyName=((CompoundVariable)values[0]).execute();
  String propertyValue=((CompoundVariable)values[1]).execute();
  boolean returnValue=false;
  if (values.length > 2) {
    returnValue=((CompoundVariable)values[2]).execute().equalsIgnoreCase(true);
  }
  if (returnValue) {
    return (String)JMeterUtils.setProperty(propertyName,propertyValue);
  }
 else {
    JMeterUtils.setProperty(propertyName,propertyValue);
    return ;
  }
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\SetProperty.java",64
1476,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,MIN_PARAMETER_COUNT,MAX_PARAMETER_COUNT);
  values=parameters.toArray();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\SetProperty.java",85
1477,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  JMeterVariables vars=getVariables();
  String stringToSplit=((CompoundVariable)values[0]).execute();
  String varNamePrefix=((CompoundVariable)values[1]).execute().trim();
  String splitString=,;
  if (values.length > 2) {
    String newSplitString=((CompoundVariable)values[2]).execute();
    splitString=newSplitString.length() > 0 ? newSplitString : splitString;
  }
  log.debug(Split {} using {} into {},stringToSplit,splitString,varNamePrefix);
  String[] parts=JOrphanUtils.split(stringToSplit,splitString,?);
  vars.put(varNamePrefix,stringToSplit);
  vars.put(varNamePrefix + _n,Integer.toString(parts.length));
  for (int i=1; i <= parts.length; i++) {
    if (log.isDebugEnabled()) {
      log.debug(parts[i - 1]);
    }
    vars.put(varNamePrefix + _ + i,parts[i - 1]);
  }
  vars.remove(varNamePrefix + _ + (parts.length + 1));
  return stringToSplit;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\SplitFunction.java",79
1478,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,MIN_PARAMETER_COUNT,MAX_PARAMETER_COUNT);
  values=parameters.toArray();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\SplitFunction.java",109
1479,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public synchronized String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String myValue=ERR_IND;
  String myName=StringFromFile_;
  if (values.length >= PARAM_NAME) {
    myName=((CompoundVariable)values[PARAM_NAME - 1]).execute().trim();
  }
  if (firstTime) {
    openFile();
    firstTime=false;
  }
  if (null != myBread) {
    try {
      String line=myBread.readLine();
      if (line == null) {
        String tn=Thread.currentThread().getName();
        log.info({} EOF on  file {},tn,fileName);
        closeFile();
        openFile();
        if (myBread != null) {
          line=myBread.readLine();
        }
 else {
          line=ERR_IND;
          if (myEnd != COUNT_UNUSED) {
            log.info({} Detected end of sequence.,tn);
            throw new JMeterStopThreadException(End of sequence);
          }
        }
      }
      myValue=line;
    }
 catch (    IOException e) {
      String tn=Thread.currentThread().getName();
      log.error({} error reading file {},tn,e.toString());
    }
  }
 else {
    if (myEnd != COUNT_UNUSED) {
      if (log.isInfoEnabled()) {
        log.info({} Detected end of sequence.,Thread.currentThread().getName());
      }
      throw new JMeterStopThreadException(End of sequence);
    }
  }
  if (myName.length() > 0) {
    JMeterVariables vars=getVariables();
    if (vars != null) {
      vars.put(myName,myValue);
    }
  }
  if (log.isDebugEnabled()) {
    log.debug({} name:{} value:{},Thread.currentThread().getName(),myName,myValue);
  }
  return myValue;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\StringFromFile.java",221
1480,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  log.debug({}::StringFromFile.setParameters(),this);
  checkParameterCount(parameters,MIN_PARAM_COUNT,MAX_PARAM_COUNT);
  values=parameters.toArray();
  StringBuilder sb=new StringBuilder(40);
  sb.append(setParameters();
  for (int i=0; i < values.length; i++) {
    if (i > 0) {
      sb.append(',');
    }
    sb.append(((CompoundVariable)values[i]).getRawParameters());
  }
  sb.append(')');
  log.info({},sb);
  firstTime=true;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\StringFromFile.java",289
1481,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  boolean executionResult;
  try {
    executionResult=this.writeToFile();
  }
 catch (  UnsupportedCharsetException ue) {
    executionResult=false;
    log.error(The encoding of file is not supported,ue);
  }
catch (  IllegalCharsetNameException ie) {
    executionResult=false;
    log.error(The encoding of file contains illegal characters,ie);
  }
catch (  IOException e) {
    executionResult=false;
    log.error(IOException occurred,e);
  }
  return String.valueOf(executionResult);
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\StringToFile.java",120
1482,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,2,4);
  values=parameters.toArray();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\StringToFile.java",139
1483,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String scriptName=FileServer.getFileServer().getScriptName();
  if (scriptName == null) {
    scriptName=Save Test plan before calling  + KEY +  function;
  }
  return scriptName;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\TestPlanName.java",46
1484,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,0);
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\TestPlanName.java",57
1485,"'-tryline","@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  JMeterContext context;
  if (currentSampler != null) {
    context=currentSampler.getThreadContext();
  }
 else {
    context=JMeterContextService.getContext();
  }
  AbstractThreadGroup threadGroup=context.getThreadGroup();
  if (threadGroup != null) {
    return threadGroup.getName();
  }
 else {
    return ;
  }
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\ThreadGroupName.java",43
1486,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String threadName=Thread.currentThread().getName();
  return threadName.substring(threadName.lastIndexOf('-') + 1);
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\ThreadNumber.java",38
1487,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,0,0);
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\ThreadNumber.java",45
1488,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override @SuppressWarnings(JdkObsolete) public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String datetime;
  if (format.length() == 0) {
    datetime=Long.toString(System.currentTimeMillis());
  }
 else {
    String fmt=aliases.get(format);
    if (fmt == null) {
      fmt=format;
    }
    if (DIVISOR_PATTERN.matcher(fmt).matches()) {
      long div=Long.parseLong(fmt.substring(1));
      datetime=Long.toString(System.currentTimeMillis() / div);
    }
 else {
      SimpleDateFormat df=new SimpleDateFormat(fmt);
      datetime=df.format(new Date());
    }
  }
  if (variable.length() > 0) {
    JMeterVariables vars=getVariables();
    if (vars != null) {
      vars.put(variable,datetime);
    }
  }
  return datetime;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\TimeFunction.java",78
1489,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,0,2);
  Object[] values=parameters.toArray();
  int count=values.length;
  if (count > 0) {
    format=((CompoundVariable)values[0]).execute();
  }
  if (count > 1) {
    variable=((CompoundVariable)values[1]).execute().trim();
  }
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\TimeFunction.java",109
1490,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String amountToShift=amountToShiftCompound.execute().trim();
  String dateToShift=dateToShiftCompound.execute().trim();
  ZonedDateTime zonedDateTimeToShift=ZonedDateTime.now(systemDefaultZoneID);
  DateTimeFormatter formatter=null;
  if (!StringUtils.isEmpty(format)) {
    try {
      LocaleFormatObject lfo=new LocaleFormatObject(format,locale);
      formatter=dateTimeFormatterCache.get(lfo,this::createFormatter);
    }
 catch (    IllegalArgumentException ex) {
      log.error(Format date pattern '{}' is invalid  + (see https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html),format,ex);
      return ;
    }
  }
  if (!dateToShift.isEmpty()) {
    try {
      if (formatter != null) {
        zonedDateTimeToShift=ZonedDateTime.parse(dateToShift,formatter);
      }
 else {
        zonedDateTimeToShift=ZonedDateTime.ofInstant(Instant.ofEpochMilli(Long.parseLong(dateToShift)),systemDefaultZoneID);
      }
    }
 catch (    DateTimeParseException|NumberFormatException ex) {
      log.error(Failed to parse the date '{}' to shift with formatter '{}',dateToShift,formatter,ex);
    }
  }
  if (!StringUtils.isEmpty(amountToShift)) {
    try {
      Duration duration=Duration.parse(amountToShift);
      zonedDateTimeToShift=zonedDateTimeToShift.plus(duration);
    }
 catch (    DateTimeParseException ex) {
      log.error(Failed to parse the amount duration '{}' to shift  + (see https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html#parse-java.lang.CharSequence-) ,amountToShift,ex);
    }
  }
  String dateString;
  if (formatter != null) {
    dateString=zonedDateTimeToShift.format(formatter);
  }
 else {
    dateString=String.valueOf(zonedDateTimeToShift.toInstant().toEpochMilli());
  }
  if (!StringUtils.isEmpty(variableName)) {
    JMeterVariables vars=getVariables();
    if (vars != null) {
      vars.put(variableName,dateString);
    }
  }
  return dateString;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\TimeShift.java",138
1491,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,4,5);
  Object[] values=parameters.toArray();
  format=((CompoundVariable)values[0]).execute().trim();
  dateToShiftCompound=(CompoundVariable)values[1];
  amountToShiftCompound=(CompoundVariable)values[2];
  if (values.length == 4) {
    variableName=((CompoundVariable)values[3]).execute().trim();
  }
 else {
    String localeAsString=((CompoundVariable)values[3]).execute().trim();
    if (!localeAsString.trim().isEmpty()) {
      locale=LocaleUtils.toLocale(localeAsString);
    }
    variableName=((CompoundVariable)values[4]).execute().trim();
  }
  if (dateTimeFormatterCache == null) {
    dateTimeFormatterCache=Caffeine.newBuilder().maximumSize(100).build();
  }
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\TimeShift.java",219
1492,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String rawString=((CompoundVariable)values[0]).execute();
  return StringEscapeUtils.unescapeJava(rawString);
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\UnEscape.java",54
1493,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,1);
  values=parameters.toArray();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\UnEscape.java",64
1494,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String escapedString=((CompoundVariable)values[0]).execute();
  return StringEscapeUtils.unescapeHtml4(escapedString);
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\UnEscapeHtml.java",60
1495,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,1);
  values=parameters.toArray();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\UnEscapeHtml.java",70
1496,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String decodeString=;
  try {
    String rawString=((CompoundVariable)values[0]).execute();
    decodeString=URLDecoder.decode(rawString,CHARSET_ENCODING);
  }
 catch (  UnsupportedEncodingException uee) {
    return null;
  }
  return decodeString;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\UrlDecode.java",55
1497,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,1);
  values=parameters.toArray();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\UrlDecode.java",69
1498,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String decodeString=;
  try {
    String encodedString=((CompoundVariable)values[0]).execute();
    decodeString=URLEncoder.encode(encodedString,CHARSET_ENCODING);
  }
 catch (  UnsupportedEncodingException uee) {
    return null;
  }
  return decodeString;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\UrlEncode.java",55
1499,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,1);
  values=parameters.toArray();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\UrlEncode.java",69
1500,"'-tryline","@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  return UUID.randomUUID().toString();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\Uuid.java",48
1501,"'-tryline","@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,0,0);
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\Uuid.java",53
1502,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String variableName=((CompoundVariable)values[0]).execute();
  String variableDefault=variableName;
  if (values.length > 1) {
    variableDefault=((CompoundVariable)values[1]).execute();
  }
  String variableValue=getVariables().get(variableName);
  return variableValue == null ? variableDefault : variableValue;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\Variable.java",63
1503,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  checkParameterCount(parameters,MIN_PARAMETER_COUNT,MAX_PARAMETER_COUNT);
  values=parameters.toArray();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\Variable.java",75
1504,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public synchronized String execute(SampleResult previousResult,Sampler currentSampler) throws InvalidVariableException {
  String fileName=((CompoundVariable)values[0]).execute();
  String xpathString=((CompoundVariable)values[1]).execute();
  log.debug(execute ({} {}),fileName,xpathString);
  String myValue=XPathWrapper.getXPathString(fileName,xpathString);
  log.debug(execute value: {},myValue);
  return myValue;
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\XPath.java",65
1505,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
  if (log.isDebugEnabled()) {
    log.debug(setParameter - Collection.size={},Integer.toString(parameters.size()));
  }
  values=parameters.toArray();
  if (log.isDebugEnabled()) {
    for (int i=0; i < parameters.size(); i++) {
      log.debug(i:{},((CompoundVariable)values[i]).execute());
    }
  }
  checkParameterCount(parameters,2);
  XPathWrapper.clearAll();
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\XPath.java",93
1506,"'-tryline","private void eq(CSVRead a,String expected) throws InvalidVariableException {
  assertEquals(expected,a.execute(null,null));
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\CSVReadFunctionTest.java",61
1507,"'-tryline","private String execute(String... params) throws InvalidVariableException {
  List<CompoundVariable> testParams=Arrays.stream(params).map(CompoundVariable::new).collect(Collectors.toList());
  changeCase.setParameters(testParams);
  return changeCase.execute(result,null);
}
","org.apache.jmeter.functions.InvalidVariableException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\TestChangeCase.java",59
1508,"'-tryline","/** 
 * Execute the test element.
 * @param conn a {@link Connection}
 * @return the result of the execute command
 * @throws SQLException if a database error occurs
 * @throws IOException when I/O error occurs
 * @throws UnsupportedOperationException if the user provided incorrect query type
 */
protected byte[] execute(Connection conn) throws SQLException, IOException, UnsupportedOperationException {
  return execute(conn,new SampleResult());
}
","java.lang.UnsupportedOperationException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jdbc\src\main\java\org\apache\jmeter\protocol\jdbc\AbstractJDBCTestElement.java",140
1509,"'-tryline","/** 
 * Execute the test element. Use the sample given as argument to set time to first byte in the latency field of the SampleResult.
 * @param conn a {@link Connection}
 * @param sample a {@link SampleResult} to save the latency
 * @return the result of the execute command
 * @throws SQLException if a database error occurs
 * @throws IOException when I/O error occurs
 * @throws UnsupportedOperationException if the user provided incorrect query type
 */
protected byte[] execute(Connection conn,SampleResult sample) throws SQLException, IOException, UnsupportedOperationException {
  log.debug(executing jdbc:{},getQuery());
  String currentQueryType=getQueryType();
  if (SELECT.equals(currentQueryType)) {
    try (Statement stmt=conn.createStatement()){
      setQueryTimeout(stmt,getIntegerQueryTimeout());
      ResultSet rs=null;
      try {
        rs=stmt.executeQuery(getQuery());
        sample.latencyEnd();
        return getStringFromResultSet(rs).getBytes(ENCODING);
      }
  finally {
        close(rs);
      }
    }
   }
 else   if (CALLABLE.equals(currentQueryType)) {
    try (CallableStatement cstmt=getCallableStatement(conn)){
      int[] out=setArguments(cstmt);
      boolean hasResultSet=cstmt.execute();
      sample.latencyEnd();
      String sb=resultSetsToString(cstmt,hasResultSet,out);
      return sb.getBytes(ENCODING);
    }
   }
 else   if (UPDATE.equals(currentQueryType)) {
    try (Statement stmt=conn.createStatement()){
      setQueryTimeout(stmt,getIntegerQueryTimeout());
      stmt.executeUpdate(getQuery());
      sample.latencyEnd();
      int updateCount=stmt.getUpdateCount();
      String results=updateCount +  updates;
      return results.getBytes(ENCODING);
    }
   }
 else   if (PREPARED_SELECT.equals(currentQueryType)) {
    try (PreparedStatement pstmt=getPreparedStatement(conn)){
      setArguments(pstmt);
      ResultSet rs=null;
      try {
        rs=pstmt.executeQuery();
        sample.latencyEnd();
        return getStringFromResultSet(rs).getBytes(ENCODING);
      }
  finally {
        close(rs);
      }
    }
   }
 else   if (PREPARED_UPDATE.equals(currentQueryType)) {
    try (PreparedStatement pstmt=getPreparedStatement(conn)){
      setArguments(pstmt);
      pstmt.executeUpdate();
      sample.latencyEnd();
      String sb=resultSetsToString(pstmt,false,null);
      return sb.getBytes(ENCODING);
    }
   }
 else   if (ROLLBACK.equals(currentQueryType)) {
    conn.rollback();
    sample.latencyEnd();
    return ROLLBACK.getBytes(ENCODING);
  }
 else   if (COMMIT.equals(currentQueryType)) {
    conn.commit();
    sample.latencyEnd();
    return COMMIT.getBytes(ENCODING);
  }
 else   if (AUTOCOMMIT_FALSE.equals(currentQueryType)) {
    conn.setAutoCommit(false);
    sample.latencyEnd();
    return AUTOCOMMIT_FALSE.getBytes(ENCODING);
  }
 else   if (AUTOCOMMIT_TRUE.equals(currentQueryType)) {
    conn.setAutoCommit(true);
    sample.latencyEnd();
    return AUTOCOMMIT_TRUE.getBytes(ENCODING);
  }
 else {
    throw new UnsupportedOperationException(Unexpected query type:  + currentQueryType);
  }
}
","java.lang.UnsupportedOperationException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jdbc\src\main\java\org\apache\jmeter\protocol\jdbc\AbstractJDBCTestElement.java",153
1510,"'-tryline","@BeforeEach public void setUp() throws MalformedURLException {
  JMeterContext jmctx=JMeterContextService.getContext();
  assertion=new ResponseAssertion();
  assertion.setThreadContext(jmctx);
  sample=new SampleResult();
  JMeterVariables vars=new JMeterVariables();
  jmctx.setVariables(vars);
  jmctx.setPreviousResult(sample);
  sample.setResponseData(response Data\nline 2\n\nEOF,null);
  sample.setURL(new URL(http://localhost/Sampler/Data/));
  sample.setResponseCode(401);
  sample.setResponseHeaders(X-Header: abcd);
  sample.setRequestHeaders(X-reqHeader: cdef);
}
","java.net.MalformedURLException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\ResponseAssertionTest.java",47
1511,"'-tryline","private void updateClassLoader() throws MalformedURLException {
  updatePath(search_paths,;,true);
  updatePath(user.classpath,File.pathSeparator,true);
  updatePath(plugin_dependency_paths,;,false);
}
","java.net.MalformedURLException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\JMeter.java",632
1512,"'-tryline","private void updatePath(String property,String sep,boolean cp) throws MalformedURLException {
  String userpath=JMeterUtils.getPropDefault(property,);
  if (userpath.length() <= 0) {
    return;
  }
  log.info({}={},property,userpath);
  StringTokenizer tok=new StringTokenizer(userpath,sep);
  while (tok.hasMoreTokens()) {
    String path=tok.nextToken();
    File f=new File(path);
    if (!f.canRead() && !f.isDirectory()) {
      log.warn(Can't read {},path);
    }
 else {
      if (cp) {
        log.info(Adding to classpath and loader: {},path);
        NewDriver.addPath(path);
      }
 else {
        log.info(Adding to loader: {},path);
        NewDriver.addURL(path);
      }
    }
  }
}
","java.net.MalformedURLException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\JMeter.java",638
1513,"'-tryline","@Test public void testSample() throws MalformedURLException {
  final String RESULT=1,2,3,4,5,6,7,true,,8,9,10,11,https://jmeter.apache.org,12,13,14;
  SampleResult result=new SampleResult();
  result.setSaveConfig(new SampleSaveConfiguration());
  result.setStampAndTime(1,2);
  result.setSampleLabel(3);
  result.setResponseCode(4);
  result.setResponseMessage(5);
  result.setThreadName(6);
  result.setDataType(7);
  result.setSuccessful(true);
  result.setBytes(8L);
  result.setURL(new URL(https://jmeter.apache.org));
  result.setSentBytes(9);
  result.setGroupThreads(10);
  result.setAllThreads(11);
  result.setLatency(12);
  result.setIdleTime(13);
  result.setConnectTime(14);
  assertEquals(Result text has changed,RESULT,CSVSaveService.resultToDelimitedString(new SampleEvent(result,)));
}
","java.net.MalformedURLException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\save\TestCSVSaveService.java",164
1514,"'-tryline","/** 
 * Add a URL to the loader classpath only; does not update the system classpath.
 * @param path to be added.
 * @throws MalformedURLException when <code>path</code> points to an invalid url
 */
public static void addURL(String path) throws MalformedURLException {
  File furl=new File(path);
  loader.addURL(furl.toURI().toURL());
  File[] jars=listJars(furl);
  for (  File jar : jars) {
    loader.addURL(jar.toURI().toURL());
  }
}
","java.net.MalformedURLException","C:\Users\pavan\Downloads\jmeter-master\src\launcher\src\main\java\org\apache\jmeter\NewDriver.java",165
1515,"'-tryline","/** 
 * Add a directory or jar to the loader and system classpaths.
 * @param path to add to the loader and system classpath
 * @throws MalformedURLException if <code>path</code> can not be transformed to a valid {@link URL}
 */
public static void addPath(String path) throws MalformedURLException {
  File file=new File(path);
  if (file.isDirectory() && !path.endsWith(/)) {
    file=new File(path + /);
  }
  loader.addURL(file.toURI().toURL());
  StringBuilder sb=new StringBuilder(System.getProperty(JAVA_CLASS_PATH));
  sb.append(CLASSPATH_SEPARATOR);
  sb.append(path);
  File[] jars=listJars(file);
  for (  File jar : jars) {
    loader.addURL(jar.toURI().toURL());
    sb.append(CLASSPATH_SEPARATOR);
    sb.append(jar.getPath());
  }
  System.setProperty(JAVA_CLASS_PATH,sb.toString());
}
","java.net.MalformedURLException","C:\Users\pavan\Downloads\jmeter-master\src\launcher\src\main\java\org\apache\jmeter\NewDriver.java",191
1516,"'-tryline","private void createTestPlan(ActionEvent e,Request request,String statusText) throws MalformedURLException, IllegalUserActionException {
  ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(),e.getID(),ActionNames.CLOSE));
  GuiPackage guiPackage=GuiPackage.getInstance();
  guiPackage.clearTestPlan();
  FileServer.getFileServer().setScriptName(null);
  ThreadGroup threadGroup=new ThreadGroup();
  threadGroup.setProperty(TestElement.GUI_CLASS,ThreadGroupGui.class.getName());
  threadGroup.setProperty(TestElement.NAME,Thread Group);
  threadGroup.setProperty(AbstractThreadGroup.NUM_THREADS,${__P(threads,10)});
  threadGroup.setProperty(ThreadGroup.RAMP_TIME,${__P(rampup,30)});
  threadGroup.setScheduler(true);
  threadGroup.setProperty(ThreadGroup.DURATION,${__P(duration,3600)});
  threadGroup.setDelay(5);
  LoopController loopCtrl=new LoopController();
  loopCtrl.setProperty(LoopController.LOOPS,${__P(iterations,-1)});
  loopCtrl.setContinueForever(false);
  threadGroup.setSamplerController(loopCtrl);
  TestPlan testPlan=new TestPlan();
  testPlan.setProperty(TestElement.NAME,Test Plan);
  testPlan.setProperty(TestElement.GUI_CLASS,TestPlanGui.class.getName());
  testPlan.setComment(You can run me using: jmeter -Jthreads=<Number of threads> -Jrampup=<rampup in seconds> -Jduration=<duration in seconds>  + -Jiterations=<Number of iterations, -1 means infinite> -e -o <report output folder>);
  HashTree tree=new HashTree();
  HashTree testPlanHT=tree.add(testPlan);
  HashTree threadGroupHT=testPlanHT.add(threadGroup);
  createHttpRequest(request,threadGroupHT,statusText);
  if (!request.getAuthorization().getUser().isEmpty()) {
    AuthManager authManager=new AuthManager();
    createAuthManager(request,authManager);
    threadGroupHT.add(authManager);
  }
  if (!request.getDnsServers().isEmpty()) {
    DNSCacheManager dnsCacheManager=new DNSCacheManager();
    createDnsServer(request,dnsCacheManager);
    threadGroupHT.add(dnsCacheManager);
  }
  if (request.getDnsResolver() != null) {
    DNSCacheManager dnsCacheManager=new DNSCacheManager();
    createDnsResolver(request,dnsCacheManager);
    threadGroupHT.add(dnsCacheManager);
  }
  CookieManager cookieManager=new CookieManager();
  createCookieManager(cookieManager,request);
  threadGroupHT.add(cookieManager);
  ResultCollector resultCollector=new ResultCollector();
  resultCollector.setProperty(TestElement.NAME,View Results Tree);
  resultCollector.setProperty(TestElement.GUI_CLASS,ViewResultsFullVisualizer.class.getName());
  tree.add(tree.getArray()[0],resultCollector);
  final HashTree newTree=guiPackage.addSubTree(tree);
  guiPackage.updateCurrentGui();
  guiPackage.getMainFrame().getTree().setSelectionPath(new TreePath(((JMeterTreeNode)newTree.getArray()[0]).getPath()));
  final HashTree subTree=guiPackage.getCurrentSubTree();
  ActionEvent actionEvent=new ActionEvent(subTree.get(subTree.getArray()[subTree.size() - 1]),e.getID(),ActionNames.SUB_TREE_LOADED);
  ActionRouter.getInstance().actionPerformed(actionEvent);
  ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(),e.getID(),ActionNames.EXPAND_ALL));
}
","java.net.MalformedURLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\gui\action\ParseCurlCommandAction.java",213
1517,"'-tryline","private HTTPSamplerProxy createHttpRequest(Request request,HashTree parentHT,String commentText) throws MalformedURLException {
  HTTPSamplerProxy httpSampler=createSampler(request,commentText);
  HashTree samplerHT=parentHT.add(httpSampler);
  samplerHT.add(httpSampler.getHeaderManager());
  if (CERT.equals(request.getCaCert())) {
    samplerHT.add(httpSampler.getKeystoreConfig());
  }
  return httpSampler;
}
","java.net.MalformedURLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\gui\action\ParseCurlCommandAction.java",276
1518,"'-tryline","/** 
 * @param request    {@link Request}
 * @param commentText
 * @return {@link HTTPSamplerProxy}
 * @throws MalformedURLException
 */
private HTTPSamplerProxy createSampler(Request request,String commentText) throws MalformedURLException {
  HTTPSamplerProxy httpSampler=(HTTPSamplerProxy)HTTPSamplerFactory.newInstance(HTTPSamplerFactory.DEFAULT_CLASSNAME);
  httpSampler.setProperty(TestElement.GUI_CLASS,HttpTestSampleGui.class.getName());
  httpSampler.setProperty(TestElement.NAME,HTTP Request);
  if (!commentText.isEmpty()) {
    httpSampler.setProperty(TestElement.COMMENTS,commentText);
  }
 else {
    httpSampler.setProperty(TestElement.COMMENTS,getDefaultComment());
  }
  URL url=new URL(request.getUrl());
  httpSampler.setProtocol(url.getProtocol());
  if (url.getPort() != -1) {
    httpSampler.setPort(url.getPort());
  }
  String path=url.getPath();
  if (StringUtils.isNotEmpty(url.getQuery())) {
    path+=? + url.getQuery();
  }
  httpSampler.setPath(path);
  httpSampler.setDomain(url.getHost());
  httpSampler.setUseKeepAlive(request.isKeepAlive());
  httpSampler.setFollowRedirects(true);
  httpSampler.setMethod(request.getMethod());
  HeaderManager headerManager=createHeaderManager(request);
  httpSampler.addTestElement(headerManager);
  configureTimeout(request,httpSampler);
  createProxyServer(request,httpSampler);
  if (request.getInterfaceName() != null) {
    httpSampler.setIpSourceType(1);
    httpSampler.setIpSource(request.getInterfaceName());
  }
  if (!GET.equals(request.getMethod()) && request.getPostData() != null) {
    Arguments arguments=new Arguments();
    httpSampler.setArguments(arguments);
    httpSampler.addNonEncodedArgument(,request.getPostData(),);
  }
  if (!request.getFormData().isEmpty() || !request.getFormStringData().isEmpty()) {
    setFormData(request,httpSampler);
    httpSampler.setDoMultipart(true);
  }
  if (CERT.equals(request.getCaCert())) {
    KeystoreConfig keystoreConfig=createKeystoreConfiguration();
    httpSampler.addTestElement(keystoreConfig);
  }
  return httpSampler;
}
","java.net.MalformedURLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\gui\action\ParseCurlCommandAction.java",286
1519,"'-tryline","private void addToTestPlan(final JMeterTreeNode currentNode,Request request,String statusText) throws MalformedURLException {
  final HTTPSamplerProxy sampler=createSampler(request,statusText);
  JMeterTreeModel treeModel=GuiPackage.getInstance().getTreeModel();
  JMeterUtils.runSafe(true,() -> {
    try {
      boolean canAddAuthManagerInHttpRequest=false;
      boolean canAddDnsServer=false;
      boolean canAddDnsResolver=false;
      if (!request.getAuthorization().getUser().isEmpty()) {
        JMeterTreeNode jMeterTreeNodeAuth=findFirstNodeOfType(AuthManager.class);
        if (jMeterTreeNodeAuth == null) {
          AuthManager authManager=new AuthManager();
          createAuthManager(request,authManager);
          treeModel.addComponent(authManager,currentNode);
        }
 else {
          AuthManager authManager=(AuthManager)jMeterTreeNodeAuth.getTestElement();
          if (canUpdateAuthManagerInThreadGroup(request,authManager)) {
            createAuthManager(request,authManager);
          }
 else {
            canAddAuthManagerInHttpRequest=canAddAuthManagerInHttpRequest(request,authManager);
          }
        }
      }
      if (!request.getDnsServers().isEmpty()) {
        DNSCacheManager dnsCacheManager=findNodeOfTypeDnsCacheManagerByType(false);
        if (dnsCacheManager == null) {
          dnsCacheManager=new DNSCacheManager();
          createDnsServer(request,dnsCacheManager);
          treeModel.addComponent(dnsCacheManager,currentNode);
        }
 else {
          canAddDnsServer=canAddDnsServerInHttpRequest(request,dnsCacheManager);
        }
      }
      if (request.getDnsResolver() != null) {
        DNSCacheManager dnsCacheManager=findNodeOfTypeDnsCacheManagerByType(true);
        if (dnsCacheManager == null) {
          dnsCacheManager=new DNSCacheManager();
          createDnsResolver(request,dnsCacheManager);
          treeModel.addComponent(dnsCacheManager,currentNode);
        }
 else {
          canAddDnsResolver=canAddDnsResolverInHttpRequest(request,dnsCacheManager);
        }
      }
      if (!request.getCookies(request.getUrl()).isEmpty() || !request.getFilepathCookie().isEmpty() || (!request.getCookieInHeaders(request.getUrl()).isEmpty() && uploadCookiesCheckBox.isSelected())) {
        JMeterTreeNode jMeterTreeNodeCookie=findFirstNodeOfType(CookieManager.class);
        if (jMeterTreeNodeCookie == null) {
          CookieManager cookieManager=new CookieManager();
          createCookieManager(cookieManager,request);
          treeModel.addComponent(cookieManager,currentNode);
        }
 else {
          CookieManager cookieManager=(CookieManager)jMeterTreeNodeCookie.getTestElement();
          createCookieManager(cookieManager,request);
        }
      }
      HeaderManager headerManager=sampler.getHeaderManager();
      KeystoreConfig keystoreConfig=sampler.getKeystoreConfig();
      final JMeterTreeNode newNode=treeModel.addComponent(sampler,currentNode);
      treeModel.addComponent(headerManager,newNode);
      if (CERT.equals(request.getCaCert())) {
        treeModel.addComponent(keystoreConfig,newNode);
      }
      if (canAddAuthManagerInHttpRequest) {
        AuthManager authManager=new AuthManager();
        createAuthManager(request,authManager);
        treeModel.addComponent(authManager,newNode);
      }
      if (canAddDnsServer) {
        DNSCacheManager dnsCacheManager=new DNSCacheManager();
        createDnsServer(request,dnsCacheManager);
        treeModel.addComponent(dnsCacheManager,newNode);
      }
      if (canAddDnsResolver) {
        DNSCacheManager dnsCacheManager=new DNSCacheManager();
        createDnsResolver(request,dnsCacheManager);
        treeModel.addComponent(dnsCacheManager,newNode);
      }
    }
 catch (    IllegalUserActionException ex) {
      LOGGER.error(Error placing sampler,ex);
      JMeterUtils.reportErrorToUser(ex.getMessage());
    }
  }
);
}
","java.net.MalformedURLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\gui\action\ParseCurlCommandAction.java",705
1520,"'-tryline","/** 
 * Create a new Sampler based on an HREF string plus a contextual URL object. Given that an HREF string might be of three possible forms, some processing is required.
 * @param parsedUrlString the url from the href
 * @param context the context in which the href was found. This is used to extract url information that might be missing in <code>parsedUrlString</code>
 * @return sampler with filled in information about the fully parsed url
 * @throws MalformedURLException when the given url (<code>parsedUrlString</code> plus <code>context</code> is malformed)
 */
public static HTTPSamplerBase createUrlFromAnchor(String parsedUrlString,URL context) throws MalformedURLException {
  if (log.isDebugEnabled()) {
    log.debug(Creating URL from Anchor: {}, base: {},parsedUrlString,context);
  }
  URL url=ConversionUtils.makeRelativeURL(context,parsedUrlString);
  HTTPSamplerBase sampler=HTTPSamplerFactory.newInstance();
  sampler.setDomain(url.getHost());
  sampler.setProtocol(url.getProtocol());
  sampler.setPort(url.getPort());
  sampler.setPath(url.getPath());
  sampler.parseArguments(url.getQuery());
  return sampler;
}
","java.net.MalformedURLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\parser\HtmlParsingUtils.java",248
1521,"'-tryline","private static HTTPSamplerBase createFormUrlConfig(Node tempNode,URL context) throws MalformedURLException {
  NamedNodeMap atts=tempNode.getAttributes();
  if (atts.getNamedItem(action) == null) {
    throw new MalformedURLException();
  }
  String action=atts.getNamedItem(action).getNodeValue();
  return createUrlFromAnchor(action,context);
}
","java.net.MalformedURLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\parser\HtmlParsingUtils.java",370
1522,"'-tryline","/** 
 * Compute content encoding
 * @param sampler {@link HTTPSamplerBase}
 * @param request {@link HttpRequestHdr}
 * @param pageEncodings Map of page encodings
 * @param formEncodings Map of form encodings
 * @throws MalformedURLException when no {@link URL} could be built from<code>sampler</code> and <code>request</code>
 */
protected void computeContentEncoding(HTTPSamplerBase sampler,HttpRequestHdr request,Map<String,String> pageEncodings,Map<String,String> formEncodings) throws MalformedURLException {
  URL pageUrl;
  if (sampler.isProtocolDefaultPort()) {
    pageUrl=new URL(sampler.getProtocol(),sampler.getDomain(),request.getPath());
  }
 else {
    pageUrl=new URL(sampler.getProtocol(),sampler.getDomain(),sampler.getPort(),request.getPath());
  }
  String urlWithoutQuery=request.getUrlWithoutQuery(pageUrl);
  String contentEncoding=computeContentEncoding(request,pageEncodings,formEncodings,urlWithoutQuery);
  if (!StringUtils.isEmpty(contentEncoding)) {
    sampler.setContentEncoding(contentEncoding);
  }
}
","java.net.MalformedURLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\DefaultSamplerCreator.java",424
1523,"'-tryline","/** 
 * Get the URL, built from its component parts. <p> As a special case, if the path starts with http[s]://, then the path is assumed to be the entire URL. </p>
 * @return The URL to be requested by this sampler.
 * @throws MalformedURLException if url is malformed
 */
public URL getUrl() throws MalformedURLException {
  String path=this.getPath();
  if (path.startsWith(HTTP_PREFIX) || path.startsWith(HTTPS_PREFIX)) {
    return new URL(path);
  }
  String domain=getDomain();
  String protocol=getProtocol();
  String method=getMethod();
  StringBuilder pathAndQuery=new StringBuilder(100);
  if (PROTOCOL_FILE.equalsIgnoreCase(protocol)) {
    domain=null;
  }
 else {
    if (!path.startsWith(/)) {
      pathAndQuery.append('/');
    }
  }
  pathAndQuery.append(path);
  if (HTTPConstants.GET.equals(method) || HTTPConstants.DELETE.equals(method) || HTTPConstants.OPTIONS.equals(method)) {
    String queryString=getQueryString(getContentEncoding());
    if (queryString.length() > 0) {
      if (path.contains(QRY_PFX)) {
        pathAndQuery.append(QRY_SEP);
      }
 else {
        pathAndQuery.append(QRY_PFX);
      }
      pathAndQuery.append(queryString);
    }
  }
  if (isProtocolDefaultPort()) {
    return new URL(protocol,domain,pathAndQuery.toString());
  }
  return new URL(protocol,domain,getPort(),pathAndQuery.toString());
}
","java.net.MalformedURLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPSamplerBase.java",1067
1524,"'-tryline","/** 
 * Generate an absolute URL from a possibly relative location, allowing for extraneous leading ../ segments. The Java  {@link URL#URL(URL,String)} constructor does not remove these.
 * @param baseURL the base URL which is used to resolve missing protocol/host in the location
 * @param location the location, possibly with extraneous leading ../
 * @return URL with extraneous ../ removed
 * @throws MalformedURLException when the given <code>URL</code> is malformed
 * @see <a href=https://bz.apache.org/bugzilla/show_bug.cgi?id=46690>Bug 46690 - handling of 302 redirects with invalid relative paths</a>
 */
public static URL makeRelativeURL(URL baseURL,String location) throws MalformedURLException {
  URL initial=new URL(baseURL,location);
  if (!location.startsWith(../)) {
    return initial;
  }
  String path=initial.getPath();
  Matcher m=MAKE_RELATIVE_PATTERN.matcher(path);
  if (m.lookingAt()) {
    String prefix=m.group(1);
    if (location.startsWith(prefix)) {
      return new URL(baseURL,location.substring(prefix.length()));
    }
  }
  return initial;
}
","java.net.MalformedURLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\util\ConversionUtils.java",98
1525,"'-tryline","private HTTPSamplerBase makeContext(String url) throws MalformedURLException {
  URL u=new URL(url);
  HTTPSamplerBase context=new HTTPNullSampler();
  context.setDomain(u.getHost());
  context.setPath(u.getPath());
  context.setPort(u.getPort());
  context.setProtocol(u.getProtocol());
  context.parseArguments(u.getQuery());
  return context;
}
","java.net.MalformedURLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\modifier\TestAnchorModifier.java",363
1526,"'-tryline","private List<URL> extractUrls(String css) throws LinkExtractorParseException, MalformedURLException {
  return extractUrls(parser,css);
}
","java.net.MalformedURLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\TestCssParser.java",70
1527,"'-tryline","private List<URL> extractUrls(CssParser parser,String css) throws LinkExtractorParseException, MalformedURLException {
  List<URL> result=IteratorUtils.toList(parser.getEmbeddedResourceURLs(Mozilla,css.getBytes(StandardCharsets.UTF_8),new URL(http://example.org/),StandardCharsets.UTF_8.displayName()));
  return result;
}
","java.net.MalformedURLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\TestCssParser.java",75
1528,"'-tryline","public NullURLConnection() throws MalformedURLException {
  this(new URL(http://localhost));
}
","java.net.MalformedURLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\NullURLConnection.java",34
1529,"'-tryline","private void establishConnection() throws MalformedURLException {
  connection=new StubURLConnection(http://fake_url/test);
}
","java.net.MalformedURLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\PostWriterTest.java",651
1530,"'-tryline","public StubURLConnection(String url) throws MalformedURLException {
  super(new URL(url));
}
","java.net.MalformedURLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\PostWriterTest.java",903
1531,"'-tryline","@ParameterizedTest @MethodSource(mockServerParams) public void mockServer(String httpImpl,ClientGzip clientGzip,ServerGzip serverGzip) throws MalformedURLException {
  WireMockServer server=createServer(c -> c.gzipDisabled(serverGzip == ServerGzip.NOT_SUPPORTED));
  server.start();
  try {
    HTTPSamplerBase http=HTTPSamplerFactory.newInstance(httpImpl);
    String expectedResponse=Hello, ä¸ˆ, \uD83D\uDE03, and à¤¨à¤¿;
    HeaderManager hm=new HeaderManager();
    if (clientGzip == ClientGzip.REQUESTED) {
      hm.add(new Header(Accept-Encoding,gzip));
    }
    hm.add(new Header(Content-Encoding,utf-8));
    http.setHeaderManager(hm);
    MappingBuilder mappingBuilder=WireMock.get(/gzip);
    if (clientGzip == ClientGzip.REQUESTED) {
      mappingBuilder=mappingBuilder.withHeader(Accept-Encoding,WireMock.equalTo(gzip));
    }
    server.stubFor(mappingBuilder.willReturn(WireMock.aResponse().withBody(expectedResponse).withHeader(Content-Type,text/plain;charset=utf-8)));
    HTTPSampleResult res=http.sample(new URL(server.url(/gzip)),GET,false,1);
    Assertions.assertAll(() -> {
      Matcher<String> matcher;
      if (clientGzip == ClientGzip.NOT_REQUESTED || serverGzip == ServerGzip.NOT_SUPPORTED) {
        matcher=Matchers.not(Matchers.containsStringIgnoringCase(Content-Encoding:));
      }
 else {
        matcher=Matchers.containsStringIgnoringCase(Content-Encoding: gzip);
      }
      MatcherAssert.assertThat(getResponseHeaders,res.getResponseHeaders(),matcher);
    }
,() -> {
      Assertions.assertEquals(expectedResponse,res.getResponseDataAsString(),response body);
    }
);
  }
  finally {
    server.stop();
  }
}
","java.net.MalformedURLException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestDecompression.java",64
1532,"'-tryline","@Override public boolean supportsParameter(ParameterContext parameterContext,ExtensionContext extensionContext) throws ParameterResolutionException {
  Class<?> parameterType=parameterContext.getParameter().getType();
  return parameterType == JMeterContext.class || parameterType == JMeterVariables.class;
}
","org.junit.jupiter.api.extension.ParameterResolutionException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\JMeterContextExtension.java",37
1533,"'-tryline","@Override public Object resolveParameter(ParameterContext parameterContext,ExtensionContext extensionContext) throws ParameterResolutionException {
  Class<?> parameterType=parameterContext.getParameter().getType();
  JMeterContext jMeterContext=JMeterContextService.getContext();
  if (parameterType == JMeterContext.class) {
    return jMeterContext;
  }
  if (parameterType == JMeterVariables.class) {
    return jMeterContext.getVariables();
  }
  throw new IllegalArgumentException(parameterContext.toString());
}
","org.junit.jupiter.api.extension.ParameterResolutionException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\JMeterContextExtension.java",44
1534,"'-tryline","@Override public boolean supportsParameter(ParameterContext parameterContext,ExtensionContext extensionContext) throws ParameterResolutionException {
  return parameterContext.getParameter().getType() == WireMockServer.class;
}
","org.junit.jupiter.api.extension.ParameterResolutionException","C:\Users\pavan\Downloads\jmeter-master\src\testkit-wiremock\src\main\java\org\apache\jmeter\wiremock\WireMockExtension.java",43
1535,"'-tryline","@Override public Object resolveParameter(ParameterContext parameterContext,ExtensionContext extensionContext) throws ParameterResolutionException {
  return getServer(extensionContext);
}
","org.junit.jupiter.api.extension.ParameterResolutionException","C:\Users\pavan\Downloads\jmeter-master\src\testkit-wiremock\src\main\java\org\apache\jmeter\wiremock\WireMockExtension.java",48
1536,"'-tryline","/** 
 * Factory method of parsers. Instances might get cached, when {@link LinkExtractorParser#isReusable()} on the newly created instanceequals  {@code true}.
 * @param parserClassName name of the class that should be used to create new parsers
 * @return a possibly cached instance of the wanted{@link LinkExtractorParser}
 * @throws LinkExtractorParseException when a new instance could not be instantiated
 */
public static LinkExtractorParser getParser(String parserClassName) throws LinkExtractorParseException {
  LinkExtractorParser parser=PARSERS.get(parserClassName);
  if (parser != null) {
    LOG.debug(Fetched {},parserClassName);
    return parser;
  }
  try {
    Object clazz=Class.forName(parserClassName).getDeclaredConstructor().newInstance();
    if (clazz instanceof LinkExtractorParser) {
      parser=(LinkExtractorParser)clazz;
    }
 else {
      throw new LinkExtractorParseException(new ClassCastException(parserClassName));
    }
  }
 catch (  IllegalArgumentException|ReflectiveOperationException|SecurityException e) {
    throw new LinkExtractorParseException(e);
  }
  LOG.info(Created {},parserClassName);
  if (parser.isReusable()) {
    LinkExtractorParser currentParser=PARSERS.putIfAbsent(parserClassName,parser);
    if (currentParser != null) {
      return currentParser;
    }
  }
  return parser;
}
","org.apache.jmeter.protocol.http.parser.LinkExtractorParseException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\parser\BaseParser.java",42
1537,"'-tryline","/** 
 * @see org.apache.jmeter.protocol.http.parser.LinkExtractorParser#getEmbeddedResourceURLs(java.lang.String,byte[],java.net.URL,java.lang.String)
 */
@Override public Iterator<URL> getEmbeddedResourceURLs(String userAgent,byte[] data,final URL baseUrl,String encoding) throws LinkExtractorParseException {
  try {
    final String cssContent=new String(data,encoding);
    final Charset charset=Charset.forName(encoding);
    final Triple<String,URL,Charset> triple=ImmutableTriple.of(cssContent,baseUrl,charset);
    final URLCollection urlCollection=orDefault(CSS_URL_CACHE.get(triple),EMPTY_URL_COLLECTION);
    if (LOG.isDebugEnabled()) {
      LOG.debug(Parsed: {}, got: {},baseUrl,StringUtils.join(urlCollection,,));
    }
    return urlCollection.iterator();
  }
 catch (  Exception e) {
    throw new LinkExtractorParseException(e);
  }
}
","org.apache.jmeter.protocol.http.parser.LinkExtractorParseException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\parser\CssParser.java",53
1538,"'-tryline","/** 
 * Get the URLs for all the resources that a browser would automatically download following the download of the content, that is: images, stylesheets, javascript files, applets, etc... <p> URLs should not appear twice in the returned iterator. <p> Malformed URLs can be reported to the caller by having the Iterator return the corresponding RL String. Overall problems parsing the html should be reported by throwing an HTMLParseException.
 * @param userAgent User Agent
 * @param responseData Response data
 * @param baseUrl Base URL from which the HTML code was obtained
 * @param encoding Charset
 * @return an Iterator for the resource URLs
 * @throws LinkExtractorParseException when extracting the links fails
 */
Iterator<URL> getEmbeddedResourceURLs(String userAgent,byte[] responseData,URL baseUrl,String encoding) throws LinkExtractorParseException ;
","org.apache.jmeter.protocol.http.parser.LinkExtractorParseException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\parser\LinkExtractorParser.java",29
1539,"'-tryline","/** 
 * Gets parser from  {@link HTTPSampleResult#getMediaType()}. Returns null if no parser defined for it
 * @param res {@link HTTPSampleResult}
 * @return {@link LinkExtractorParser}
 * @throws LinkExtractorParseException
 */
private LinkExtractorParser getParser(HTTPSampleResult res) throws LinkExtractorParseException {
  String parserClassName=PARSERS_FOR_CONTENT_TYPE.get(res.getMediaType());
  if (!StringUtils.isEmpty(parserClassName)) {
    return BaseParser.getParser(parserClassName);
  }
  return null;
}
","org.apache.jmeter.protocol.http.parser.LinkExtractorParseException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPSamplerBase.java",1499
1540,"'-tryline","@Override public Iterator<URL> getEmbeddedResourceURLs(String userAgent,byte[] responseData,URL baseUrl,String encoding) throws LinkExtractorParseException {
  throw new NotImplementedException(Test class);
}
","org.apache.jmeter.protocol.http.parser.LinkExtractorParseException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\NotReusableParser.java",31
1541,"'-tryline","@Override public Iterator<URL> getEmbeddedResourceURLs(String userAgent,byte[] responseData,URL baseUrl,String encoding) throws LinkExtractorParseException {
  throw new NotImplementedException(Test class);
}
","org.apache.jmeter.protocol.http.parser.LinkExtractorParseException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\ReusableParser.java",31
1542,"'-tryline","private List<URL> extractUrls(String css) throws LinkExtractorParseException, MalformedURLException {
  return extractUrls(parser,css);
}
","org.apache.jmeter.protocol.http.parser.LinkExtractorParseException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\TestCssParser.java",70
1543,"'-tryline","private List<URL> extractUrls(CssParser parser,String css) throws LinkExtractorParseException, MalformedURLException {
  List<URL> result=IteratorUtils.toList(parser.getEmbeddedResourceURLs(Mozilla,css.getBytes(StandardCharsets.UTF_8),new URL(http://example.org/),StandardCharsets.UTF_8.displayName()));
  return result;
}
","org.apache.jmeter.protocol.http.parser.LinkExtractorParseException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\parser\TestCssParser.java",75
1544,"'-tryline","private static void sendLine(String line,OutputStream outPipe) throws IOException {
  outPipe.write(line.getBytes(StandardCharsets.UTF_8));
  outPipe.flush();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\bshclient\src\main\java\org\apache\jmeter\util\BeanShellClient.java",82
1545,"'-tryline","public List<String> splitJson(JsonNode jsonNode) throws IOException {
  List<String> splittedJsonElements=new ArrayList<>();
  if (jsonNode.isArray()) {
    for (    JsonNode element : (ArrayNode)jsonNode) {
      splittedJsonElements.add(writeJsonNode(OBJECT_MAPPER,element));
    }
  }
 else {
    splittedJsonElements.add(writeJsonNode(OBJECT_MAPPER,jsonNode));
  }
  return splittedJsonElements;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\extractor\json\jmespath\JMESPathExtractor.java",169
1546,"'-tryline","/** 
 * Converts (X)HTML response to DOM object Tree. This version cares of charset of response.
 * @param unicodeData
 * @return the parsed document
 */
private Document parseResponse(String unicodeData) throws IOException, ParserConfigurationException, SAXException, TidyException {
  byte[] utf8data=unicodeData.getBytes(StandardCharsets.UTF_8);
  ByteArrayInputStream in=new ByteArrayInputStream(utf8data);
  boolean isXML=JOrphanUtils.isXML(utf8data);
  return XPathUtil.makeDocument(in,false,false,useNameSpace(),isTolerant(),isQuiet(),showWarnings(),reportErrors(),isXML,isDownloadDTDs());
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\extractor\XPathExtractor.java",288
1547,"'-tryline","public SocketOutputStream(InetSocketAddress inetSocketAddress) throws IOException {
  this(new Socket(inetSocketAddress.getAddress(),inetSocketAddress.getPort()));
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\backend\graphite\SocketOutputStream.java",33
1548,"'-tryline","public SocketOutputStream(Socket socket) throws IOException {
  super(socket.getOutputStream());
  this.socket=socket;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\backend\graphite\SocketOutputStream.java",37
1549,"'-tryline","private void indent(Appendable out) throws IOException {
  out.append('\n');
  out.append(StringUtils.repeat(indentString,level));
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\RenderAsJSON.java",97
1550,"'-tryline","@Override public void objectStart(Appendable out) throws IOException {
  super.objectStart(out);
  level++;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\RenderAsJSON.java",102
1551,"'-tryline","@Override public void objectStop(Appendable out) throws IOException {
  level--;
  indent(out);
  super.objectStop(out);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\RenderAsJSON.java",108
1552,"'-tryline","@Override public void objectNext(Appendable out) throws IOException {
  super.objectNext(out);
  indent(out);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\RenderAsJSON.java",115
1553,"'-tryline","@Override public void objectEndOfKey(Appendable out) throws IOException {
  super.objectEndOfKey(out);
  out.append(' ');
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\RenderAsJSON.java",121
1554,"'-tryline","@Override public void objectFirstStart(Appendable out) throws IOException {
  indent(out);
  super.objectFirstStart(out);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\RenderAsJSON.java",127
1555,"'-tryline","@Override public void arrayfirstObject(Appendable out) throws IOException {
  indent(out);
  super.arrayfirstObject(out);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\RenderAsJSON.java",133
1556,"'-tryline","@Override public void arrayNextElm(Appendable out) throws IOException {
  super.arrayNextElm(out);
  indent(out);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\RenderAsJSON.java",139
1557,"'-tryline","@Override public void arrayStart(Appendable out) throws IOException {
  super.arrayStart(out);
  level++;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\RenderAsJSON.java",145
1558,"'-tryline","@Override public void arrayStop(Appendable out) throws IOException {
  level--;
  indent(out);
  super.arrayStop(out);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\RenderAsJSON.java",151
1559,"'-tryline","/** 
 * Converts (X)HTML response to DOM object Tree. This version cares of charset of response.
 * @param unicodeData
 * @param extractor
 * @return Document
 */
private Document parseResponse(String unicodeData,XPathExtractor extractor) throws IOException, ParserConfigurationException, SAXException, TidyException {
  byte[] utf8data=unicodeData.getBytes(StandardCharsets.UTF_8);
  ByteArrayInputStream in=new ByteArrayInputStream(utf8data);
  boolean isXML=JOrphanUtils.isXML(utf8data);
  return XPathUtil.makeDocument(in,false,false,extractor.useNameSpace(),extractor.isTolerant(),extractor.isQuiet(),extractor.showWarnings(),extractor.reportErrors(),isXML,extractor.isDownloadDTDs());
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\RenderAsXPath.java",152
1560,"'-tryline","@BeforeEach public void setUp() throws MessagingException, IOException {
  Session mailSession=Session.getDefaultInstance(new Properties());
  msg=new MimeMessage(mailSession,this.getClass().getResourceAsStream(signed_email.eml));
  parent=new SampleResult();
  parent.sampleStart();
  parent.addSubResult(createChildSample());
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\SMIMEAssertionTest.java",98
1561,"'-tryline","private SampleResult createChildSample() throws MessagingException, IOException {
  SampleResult child=new SampleResult();
  child.setSampleLabel(Message  + msg.getMessageNumber());
  child.setContentType(msg.getContentType());
  child.setEncodingAndType(msg.getContentType());
  ByteArrayOutputStream outbuf=new ByteArrayOutputStream();
  msg.writeTo(outbuf);
  child.setResponseData(outbuf.toByteArray());
  child.setDataType(SampleResult.TEXT);
  child.setResponseOK();
  return child;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\SMIMEAssertionTest.java",184
1562,"'-tryline","private ByteArrayOutputStream readBA(String name) throws IOException {
  BufferedInputStream bis=new BufferedInputStream(new FileInputStream(findTestFile(name)));
  ByteArrayOutputStream baos=new ByteArrayOutputStream(1000);
  int len=0;
  byte[] data=new byte[512];
  while ((len=bis.read(data)) >= 0) {
    baos.write(data,0,len);
  }
  bis.close();
  return baos;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XMLSchemaAssertionTest.java",54
1563,"'-tryline","private byte[] readFile(String name) throws IOException {
  return readBA(name).toByteArray();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XMLSchemaAssertionTest.java",66
1564,"'-tryline","private ByteArrayOutputStream readBA(String name) throws IOException {
  BufferedInputStream bis=new BufferedInputStream(new FileInputStream(findTestFile(name)));
  ByteArrayOutputStream baos=new ByteArrayOutputStream(1000);
  int len=0;
  byte[] data=new byte[512];
  while ((len=bis.read(data)) >= 0) {
    baos.write(data,0,len);
  }
  bis.close();
  return baos;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPathAssertionTest.java",70
1565,"'-tryline","private byte[] readFile(String name) throws IOException {
  return readBA(name).toByteArray();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPathAssertionTest.java",82
1566,"'-tryline","@AfterEach public void tearDown() throws IOException {
  FileServer.getFileServer().closeFiles();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\config\TestCVSDataSet.java",49
1567,"'-tryline","@Test public void testInvalidTemplateXml() throws IOException, SAXException, ParserConfigurationException {
  try {
    File templateFile=getFileFromResource(invalidTemplates.xml);
    TemplateManager.getInstance().parseTemplateFile(templateFile);
  }
 catch (  SAXParseException ex) {
    assertTrue(Exception did not contains expected message, got: + ex.getMessage(),ex.getMessage().contains(Element type \key\ must be declared.));
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\gui\action\template\TestTemplateManager.java",108
1568,"'-tryline","@Override public void write(int b) throws IOException {
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\DistributedRunner.java",271
1569,"'-tryline","private char firstNonSpace(StringReader reader,char defaultResult) throws IOException {
  char[] current=new char[1];
  while (reader.read(current) == 1) {
    if (!Character.isSpaceChar(current[0])) {
      return current[0];
    }
  }
  return defaultResult;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\engine\util\FunctionParser.java",165
1570,"'-tryline","private static List<String> findClassesThatExtend(String className,String excluding,String[] searchPath) throws IOException, ClassNotFoundException {
  return ClassFinder.findClassesThatExtend(searchPath,new Class[]{Class.forName(className)},false,null,excluding,false);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\action\ActionRouter.java",312
1571,"'-tryline","@Override public InputSource resolveEntity(String publicId,String systemId) throws SAXException, IOException {
  if (systemId.endsWith(templates.dtd)) {
    return new InputSource(TemplateManager.class.getResourceAsStream(/org/apache/jmeter/gui/action/template/templates.dtd));
  }
 else {
    return null;
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\action\template\TemplateManager.java",155
1572,"'-tryline","public Map<String,Template> parseTemplateFile(File file) throws IOException, SAXException, ParserConfigurationException {
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  dbf.setValidating(true);
  dbf.setNamespaceAware(true);
  dbf.setFeature(http://xml.org/sax/features/external-general-entities,false);
  dbf.setFeature(http://xml.org/sax/features/external-parameter-entities,false);
  dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
  DocumentBuilder bd=dbf.newDocumentBuilder();
  bd.setEntityResolver(new DefaultEntityResolver());
  LoggingErrorHandler errorHandler=new LoggingErrorHandler(log,file);
  bd.setErrorHandler(errorHandler);
  Document document=bd.parse(file);
  document.getDocumentElement().normalize();
  Map<String,Template> templates=new TreeMap<>();
  NodeList templateNodes=document.getElementsByTagName(template);
  for (int i=0; i < templateNodes.getLength(); i++) {
    Node node=templateNodes.item(i);
    parseTemplateNode(templates,node);
  }
  return templates;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\action\template\TemplateManager.java",165
1573,"'-tryline","public boolean openJmxFilesFromDragAndDrop(Transferable tr) throws UnsupportedFlavorException, IOException {
  @SuppressWarnings(unchecked) List<File> files=(List<File>)tr.getTransferData(DataFlavor.javaFileListFlavor);
  if (files.isEmpty()) {
    return false;
  }
  File file=files.get(0);
  if (!file.getName().endsWith(.jmx)) {
    if (log.isWarnEnabled()) {
      log.warn(Importing file, {}, from DnD failed because file extension does not end with .jmx,file.getName());
    }
    return false;
  }
  ActionEvent fakeEvent=new ActionEvent(this,ActionEvent.ACTION_PERFORMED,ActionNames.OPEN);
  LoadDraggedFile.loadProject(fakeEvent,file);
  return true;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\MainFrame.java",839
1574,"'-tryline","@Override public FileVisitResult preVisitDirectory(Path file,BasicFileAttributes attrs) throws IOException {
  Path newDir=target.resolve(source.relativize(file));
  try {
    Files.copy(file,newDir);
  }
 catch (  FileAlreadyExistsException ex) {
    LOGGER.info(Copying folder from '{}' to '{}', got message:  + {}, found non empty folder with following content {}, will be ignored,file,newDir,ex.getMessage(),newDir.toFile().listFiles());
  }
  return FileVisitResult.CONTINUE;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\report\dashboard\TemplateVisitor.java",84
1575,"'-tryline","@Override public FileVisitResult visitFile(Path file,BasicFileAttributes attrs) throws IOException {
  String extension=FilenameUtils.getExtension(file.toString());
  if (TEMPLATED_FILE_EXT.equalsIgnoreCase(extension)) {
    String templatePath=source.relativize(file).toString();
    Template template=configuration.getTemplate(templatePath);
    Path newPath=target.resolve(FilenameUtils.removeExtension(templatePath));
    try (FileOutputStream stream=new FileOutputStream(newPath.toString());Writer writer=new OutputStreamWriter(stream,StandardCharsets.UTF_8);BufferedWriter bufferedWriter=new BufferedWriter(writer)){
      template.process(data,bufferedWriter);
    }
 catch (    TemplateException ex) {
      throw new IOException(ex);
    }
  }
 else {
    Path newFile=target.resolve(source.relativize(file));
    Files.copy(file,newFile,StandardCopyOption.REPLACE_EXISTING);
  }
  return FileVisitResult.CONTINUE;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\report\dashboard\TemplateVisitor.java",105
1576,"'-tryline","private static PrintWriter getFileWriter(final String pFilename,SampleSaveConfiguration saveConfig) throws IOException {
  if (pFilename == null || pFilename.length() == 0) {
    return null;
  }
  if (log.isDebugEnabled()) {
    log.debug(Getting file: {} in thread {},pFilename,Thread.currentThread().getName());
  }
  String filename=FileServer.resolveBaseRelativeName(pFilename);
  filename=new File(filename).getCanonicalPath();
  FileEntry fe=files.get(filename);
  PrintWriter writer=null;
  boolean trimmed=true;
  if (fe == null) {
    if (saveConfig.saveAsXml()) {
      trimmed=trimLastLine(filename);
    }
 else {
      trimmed=new File(filename).exists();
    }
    File pdir=new File(filename).getParentFile();
    if (pdir != null) {
      if (pdir.mkdirs()) {
        if (log.isInfoEnabled()) {
          log.info(Folder at {} was created,pdir.getAbsolutePath());
        }
      }
      if (!pdir.exists()) {
        log.warn(Error creating directories for {},pdir);
      }
    }
    writer=new PrintWriter(new OutputStreamWriter(new BufferedOutputStream(new FileOutputStream(filename,trimmed)),SaveService.getFileEncoding(StandardCharsets.UTF_8.name())),SAVING_AUTOFLUSH);
    if (log.isDebugEnabled()) {
      log.debug(Opened file: {} in thread {},filename,Thread.currentThread().getName());
    }
    files.put(filename,new FileEntry(writer,saveConfig));
  }
 else {
    writer=fe.pw;
  }
  if (!trimmed) {
    log.debug(Writing header to file: {},filename);
    writeFileStart(writer,saveConfig);
  }
  return writer;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\reporters\ResultCollector.java",439
1577,"'-tryline","/** 
 * Creates a server socket that listens on localAddress:port
 * @param port to use for the RMI server socket
 * @see java.rmi.server.RMIServerSocketFactory#createServerSocket(int)
 */
@Override public ServerSocket createServerSocket(int port) throws IOException {
  return ServerSocketFactory.getDefault().createServerSocket(port,0,localAddress);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\rmi\RMIServerSocketFactoryImpl.java",42
1578,"'-tryline","@Override public Socket createSocket(String host,int port) throws IOException {
  char[] passphrase=null;
  if (keyStorePassword != null) {
    passphrase=keyStorePassword.toCharArray();
  }
  KeyStore keyStore=null;
  if (keyStoreLocation != null) {
    keyStore=loadStore(keyStoreLocation,passphrase,keyStoreType);
  }
  KeyStore trustStore;
  if (trustStoreLocation != null) {
    trustStore=loadStore(trustStoreLocation,trustStorePassword.toCharArray(),trustStoreType);
  }
 else {
    trustStore=keyStore;
  }
  if (alias == null) {
    throw new IOException(SSL certificate alias cannot be null; MUST be set for SSLServerSocketFactory!);
  }
  KeyManagerFactory kmf;
  SSLContext ctx;
  try {
    kmf=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
    kmf.init(keyStore,passphrase);
    ctx=SSLContext.getInstance(TLS);
    TrustManagerFactory tmf=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
    tmf.init(trustStore);
    ctx.init(AliasKeyManager.wrap(kmf.getKeyManagers(),alias),tmf.getTrustManagers(),null);
  }
 catch (  GeneralSecurityException e) {
    throw new IOException(e);
  }
  SSLSocketFactory factory=ctx.getSocketFactory();
  if (factory == null) {
    throw new IOException(Unable to obtain SSLSocketFactory for provided KeyStore);
  }
  return factory.createSocket(host,port);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\rmi\SSLRMIClientSocketFactory.java",72
1579,"'-tryline","private KeyStore loadStore(String location,char[] passphrase,String type) throws IOException {
  try {
    KeyStore store=KeyStore.getInstance(type);
    try (FileInputStream fis=new FileInputStream(location)){
      store.load(fis,passphrase);
    }
     return store;
  }
 catch (  NoSuchAlgorithmException|CertificateException|KeyStoreException e) {
    throw new IOException(Can't load  + location +  as type + type,e);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\rmi\SSLRMIClientSocketFactory.java",120
1580,"'-tryline","@Override public ServerSocket createServerSocket(int port) throws IOException {
  char[] passphrase=null;
  if (keyStorePassword != null) {
    passphrase=keyStorePassword.toCharArray();
  }
  KeyStore keyStore=null;
  if (keyStoreLocation != null) {
    keyStore=loadStore(keyStoreLocation,passphrase,keyStoreType);
  }
  KeyStore trustStore;
  if (trustStoreLocation != null) {
    trustStore=loadStore(trustStoreLocation,trustStorePassword.toCharArray(),trustStoreType);
  }
 else {
    trustStore=keyStore;
  }
  if (alias == null) {
    throw new IOException(SSL certificate alias cannot be null; MUST be set for SSLServerSocketFactory!);
  }
  SSLContext ctx;
  try {
    KeyManagerFactory kmf=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
    kmf.init(keyStore,passphrase);
    TrustManagerFactory tmf=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
    tmf.init(trustStore);
    ctx=SSLContext.getInstance(TLS);
    ctx.init(AliasKeyManager.wrap(kmf.getKeyManagers(),alias),tmf.getTrustManagers(),null);
  }
 catch (  GeneralSecurityException e) {
    throw new IOException(e);
  }
  SSLServerSocketFactory factory=ctx.getServerSocketFactory();
  if (factory == null) {
    throw new IOException(Unable to obtain SSLServerSocketFactory for provided KeyStore);
  }
  SSLServerSocket socket;
  try {
    socket=(SSLServerSocket)factory.createServerSocket(port,0,localAddress);
  }
 catch (  BindException e) {
    throw new IOException(Could not bind to  + localAddress +  using port + port,e);
  }
  socket.setNeedClientAuth(clientAuth);
  LOGGER.info(Created SSLSocket: {},socket);
  return socket;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\rmi\SSLRMIServerSocketFactory.java",90
1581,"'-tryline","private KeyStore loadStore(String location,char[] passphrase,String type) throws IOException {
  try (FileInputStream fileInputStream=new FileInputStream(location)){
    KeyStore store=KeyStore.getInstance(type);
    store.load(fileInputStream,passphrase);
    return store;
  }
 catch (  NoSuchAlgorithmException|CertificateException|KeyStoreException e) {
    throw new IOException(e);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\rmi\SSLRMIServerSocketFactory.java",145
1582,"'-tryline","/** 
 * Read Samples from a file; handles quoted strings.
 * @param filename input file
 * @param visualizer where to send the results
 * @param resultCollector the parent collector
 * @throws IOException when the file referenced by <code>filename</code> can't be read correctly
 */
public static void processSamples(String filename,Visualizer visualizer,ResultCollector resultCollector) throws IOException {
  final boolean errorsOnly=resultCollector.isErrorLogging();
  final boolean successOnly=resultCollector.isSuccessOnlyLogging();
  try (InputStream inStream=new FileInputStream(filename);Reader inReader=new InputStreamReader(inStream,SaveService.getFileEncoding(StandardCharsets.UTF_8.name()));BufferedReader dataReader=new BufferedReader(inReader)){
    dataReader.mark(400);
    String line=dataReader.readLine();
    if (line == null) {
      throw new IOException(filename + : unable to read header line);
    }
    long lineNumber=1;
    SampleSaveConfiguration saveConfig=CSVSaveService.getSampleSaveConfiguration(line,filename);
    if (saveConfig == null) {
      log.info({} does not appear to have a valid header. Using default configuration.,filename);
      saveConfig=(SampleSaveConfiguration)resultCollector.getSaveConfig().clone();
      dataReader.reset();
      lineNumber=0;
    }
    String[] parts;
    final char delim=saveConfig.getDelimiter().charAt(0);
    while ((parts=csvReadFile(dataReader,delim)).length != 0) {
      lineNumber++;
      SampleEvent event=CSVSaveService.makeResultFromDelimitedString(parts,saveConfig,lineNumber);
      if (event != null) {
        final SampleResult result=event.getResult();
        if (ResultCollector.isSampleWanted(result.isSuccessful(),errorsOnly,successOnly)) {
          visualizer.add(result);
        }
      }
    }
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\save\CSVSaveService.java",125
1583,"'-tryline","/** 
 * Method will save aggregate statistics as CSV. For now I put it here. Not sure if it should go in the newer SaveService instead of here. if we ever decide to get rid of this class, we'll need to move this method to the new save service.
 * @param data List of data rows
 * @param writer output writer
 * @throws IOException when writing to <code>writer</code> fails
 */
public static void saveCSVStats(List<?> data,Writer writer) throws IOException {
  saveCSVStats(data,writer,null);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\save\CSVSaveService.java",598
1584,"'-tryline","/** 
 * Method will save aggregate statistics as CSV. For now I put it here. Not sure if it should go in the newer SaveService instead of here. if we ever decide to get rid of this class, we'll need to move this method to the new save service.
 * @param data List of data rows
 * @param writer output file
 * @param headers header names (if non-null)
 * @throws IOException when writing to <code>writer</code> fails
 */
public static void saveCSVStats(List<?> data,Writer writer,String[] headers) throws IOException {
  final char DELIM=',';
  final char[] SPECIALS=new char[]{DELIM,QUOTING_CHAR};
  if (headers != null) {
    for (int i=0; i < headers.length; i++) {
      if (i > 0) {
        writer.write(DELIM);
      }
      writer.write(quoteDelimiters(headers[i],SPECIALS));
    }
    writer.write(LINE_SEP);
  }
  for (  Object o : data) {
    List<?> row=(List<?>)o;
    for (int idy=0; idy < row.size(); idy++) {
      if (idy > 0) {
        writer.write(DELIM);
      }
      Object item=row.get(idy);
      writer.write(quoteDelimiters(String.valueOf(item),SPECIALS));
    }
    writer.write(LINE_SEP);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\save\CSVSaveService.java",616
1585,"'-tryline","/** 
 * Method saves aggregate statistics (with header names) as CSV from a table model. Same as  {@link #saveCSVStats(List,Writer,String[])} exceptthat there is no need to create a List containing the data.
 * @param model table model containing the data
 * @param writer output file
 * @throws IOException when writing to <code>writer</code> fails
 */
public static void saveCSVStats(DefaultTableModel model,FileWriter writer) throws IOException {
  saveCSVStats(model,writer,true);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\save\CSVSaveService.java",657
1586,"'-tryline","/** 
 * Method saves aggregate statistics as CSV from a table model. Same as {@link #saveCSVStats(List,Writer,String[])} except that there is noneed to create a List containing the data.
 * @param model table model containing the data
 * @param writer output file
 * @param saveHeaders whether or not to save headers
 * @throws IOException when writing to <code>writer</code> fails
 */
public static void saveCSVStats(DefaultTableModel model,FileWriter writer,boolean saveHeaders) throws IOException {
  final char DELIM=',';
  final char[] SPECIALS=new char[]{DELIM,QUOTING_CHAR};
  final int columns=model.getColumnCount();
  final int rows=model.getRowCount();
  if (saveHeaders) {
    for (int i=0; i < columns; i++) {
      if (i > 0) {
        writer.write(DELIM);
      }
      writer.write(quoteDelimiters(model.getColumnName(i),SPECIALS));
    }
    writer.write(LINE_SEP);
  }
  for (int row=0; row < rows; row++) {
    for (int column=0; column < columns; column++) {
      if (column > 0) {
        writer.write(DELIM);
      }
      Object item=model.getValueAt(row,column);
      writer.write(quoteDelimiters(String.valueOf(item),SPECIALS));
    }
    writer.write(LINE_SEP);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\save\CSVSaveService.java",674
1587,"'-tryline","/** 
 * Reads from file and splits input into strings according to the delimiter, taking note of quoted strings. <p> Handles DOS (CRLF), Unix (LF), and Mac (CR) line-endings equally. <p> A blank line - or a quoted blank line - both return an array containing a single empty String.
 * @param infile input file - must support mark(1)
 * @param delim delimiter (e.g. comma)
 * @return array of strings, will be empty if there is no data, i.e. if the input is at EOF.
 * @throws IOException also for unexpected quote characters
 */
public static String[] csvReadFile(BufferedReader infile,char delim) throws IOException {
  int ch;
  ParserState state=ParserState.INITIAL;
  List<String> list=new ArrayList<>();
  CharArrayWriter baos=new CharArrayWriter(200);
  boolean push=false;
  while (-1 != (ch=infile.read())) {
    push=false;
switch (state) {
case INITIAL:
      if (ch == QUOTING_CHAR) {
        state=ParserState.QUOTED;
      }
 else       if (isDelimOrEOL(delim,ch)) {
        push=true;
      }
 else {
        baos.write(ch);
        state=ParserState.PLAIN;
      }
    break;
case PLAIN:
  if (ch == QUOTING_CHAR) {
    baos.write(ch);
    throw new IOException(Cannot have quote-char in plain field:[ + baos.toString() + ]);
  }
 else   if (isDelimOrEOL(delim,ch)) {
    push=true;
    state=ParserState.INITIAL;
  }
 else {
    baos.write(ch);
  }
break;
case QUOTED:
if (ch == QUOTING_CHAR) {
state=ParserState.EMBEDDEDQUOTE;
}
 else {
baos.write(ch);
}
break;
case EMBEDDEDQUOTE:
if (ch == QUOTING_CHAR) {
baos.write(QUOTING_CHAR);
state=ParserState.QUOTED;
}
 else if (isDelimOrEOL(delim,ch)) {
push=true;
state=ParserState.INITIAL;
}
 else {
baos.write(QUOTING_CHAR);
throw new IOException(Cannot have single quote-char in quoted field:[ + baos.toString() + ]);
}
break;
default :
throw new IllegalStateException(Unexpected state  + state);
}
if (push) {
if (ch == '\r') {
infile.mark(1);
if (infile.read() != '\n') {
infile.reset();
}
}
String s=baos.toString();
list.add(s);
baos.reset();
}
if ((ch == '\n' || ch == '\r') && state != ParserState.QUOTED) {
break;
}
}
if (ch == -1) {
if (state == ParserState.QUOTED) {
throw new IOException(Missing trailing quote-char in quoted field:[\ + baos.toString() + ]);
}
if (baos.size() > 0 || push || state == ParserState.EMBEDDEDQUOTE) {
list.add(baos.toString());
}
}
return list.toArray(new String[list.size()]);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\save\CSVSaveService.java",975
1588,"'-tryline","/** 
 * Reads from String and splits into strings according to the delimiter, taking note of quoted strings. Handles DOS (CRLF), Unix (LF), and Mac (CR) line-endings equally.
 * @param line input line - not  {@code null}
 * @param delim delimiter (e.g. comma)
 * @return array of strings
 * @throws IOException also for unexpected quote characters
 */
public static String[] csvSplitString(String line,char delim) throws IOException {
  return csvReadFile(new BufferedReader(new StringReader(line)),delim);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\save\CSVSaveService.java",1084
1589,"'-tryline","public static Properties loadProperties() throws IOException {
  Properties nameMap=new Properties();
  File saveServiceFile=getSaveServiceFile();
  if (saveServiceFile.canRead()) {
    try (FileInputStream fis=new FileInputStream(saveServiceFile)){
      nameMap.load(fis);
    }
   }
  return nameMap;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\save\SaveService.java",192
1590,"'-tryline","public static void saveTree(HashTree tree,OutputStream out) throws IOException {
  OutputStreamWriter outputStreamWriter=getOutputStreamWriter(out);
  writeXmlHeader(outputStreamWriter);
  ScriptWrapper wrapper=new ScriptWrapper();
  wrapper.testPlan=tree;
  JMXSAVER.toXML(wrapper,outputStreamWriter);
  outputStreamWriter.write('\n');
  outputStreamWriter.close();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\save\SaveService.java",304
1591,"'-tryline","public static void saveElement(Object el,OutputStream out) throws IOException {
  OutputStreamWriter outputStreamWriter=getOutputStreamWriter(out);
  writeXmlHeader(outputStreamWriter);
  JMXSAVER.toXML(el,outputStreamWriter);
  outputStreamWriter.close();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\save\SaveService.java",317
1592,"'-tryline","public static Object loadElement(InputStream in) throws IOException {
  InputStreamReader inputStreamReader=getInputStreamReader(in);
  Object element=JMXSAVER.fromXML(inputStreamReader);
  inputStreamReader.close();
  return element;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\save\SaveService.java",327
1593,"'-tryline","/** 
 * Save a sampleResult to an XML output file using XStream.
 * @param evt sampleResult wrapped in a sampleEvent
 * @param writer output stream which must be created using {@link #getFileEncoding(String)}
 * @throws IOException when writing data to output fails
 */
public static synchronized void saveSampleResult(SampleEvent evt,Writer writer) throws IOException {
  DataHolder dh=JTLSAVER.newDataHolder();
  dh.put(SAMPLE_EVENT_OBJECT,evt);
  try {
    JTLSAVER.marshal(evt.getResult(),new XppDriver().createWriter(writer),dh);
  }
 catch (  RuntimeException e) {
    throw new IllegalArgumentException(Failed marshalling: + (evt.getResult() != null ? showDebuggingInfo(evt.getResult()) : null),e);
  }
  writer.write('\n');
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\save\SaveService.java",336
1594,"'-tryline","/** 
 * Read results from JTL file.
 * @param reader of the file
 * @param resultCollectorHelper helper class to enable TestResultWrapperConverter to deliver the samples
 * @throws IOException if an I/O error occurs
 */
public static void loadTestResults(InputStream reader,ResultCollectorHelper resultCollectorHelper) throws IOException {
  InputStreamReader inputStreamReader=getInputStreamReader(reader);
  DataHolder dh=JTLSAVER.newDataHolder();
  dh.put(RESULTCOLLECTOR_HELPER_OBJECT,resultCollectorHelper);
  JTLSAVER.unmarshal(new XppDriver().createReader(reader),null,dh);
  inputStreamReader.close();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\save\SaveService.java",403
1595,"'-tryline","/** 
 * Load a Test tree (JMX file)
 * @param file the JMX file
 * @return the loaded tree
 * @throws IOException if there is a problem reading the file or processing it
 */
public static HashTree loadTree(File file) throws IOException {
  log.info(Loading file: {},file);
  try (InputStream inputStream=new FileInputStream(file);BufferedInputStream bufferedInputStream=new BufferedInputStream(inputStream)){
    return readTree(bufferedInputStream,file);
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\save\SaveService.java",421
1596,"'-tryline","/** 
 * @param inputStream {@link InputStream}
 * @param file the JMX file used only for debug, can be null
 * @return the loaded tree
 * @throws IOException if there is a problem reading the file or processing it
 */
private static HashTree readTree(InputStream inputStream,File file) throws IOException {
  ScriptWrapper wrapper=null;
  try {
    InputStreamReader inputStreamReader=getInputStreamReader(inputStream);
    wrapper=(ScriptWrapper)JMXSAVER.fromXML(inputStreamReader);
    inputStreamReader.close();
    if (wrapper == null) {
      log.error(Problem loading XML: see above.);
      return null;
    }
    return wrapper.testPlan;
  }
 catch (  CannotResolveClassException|ConversionException|NoClassDefFoundError e) {
    if (file != null) {
      throw new IllegalArgumentException(Problem loading XML from:' + file.getAbsolutePath() + '. \nCause:\n+ ExceptionUtils.getRootCauseMessage(e)+ \n\n Detail:+ e,e);
    }
 else {
      throw new IllegalArgumentException(Problem loading XML. \nCause:\n + ExceptionUtils.getRootCauseMessage(e) + \n\n Detail:+ e,e);
    }
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\save\SaveService.java",436
1597,"'-tryline","private static void writeXmlHeader(OutputStreamWriter writer) throws IOException {
  Charset charset=getFileEncodingCharset();
  String header=XML_HEADER.replaceAll(<ph>,charset.name());
  writer.write(header);
  writer.write('\n');
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\save\SaveService.java",509
1598,"'-tryline","/** 
 * Get the next line of the named file, recycle by default.
 * @param filename the filename or alias that was used to reserve the file
 * @return String containing the next line in the file
 * @throws IOException when reading of the file fails, or the file was not reserved properly
 */
public String readLine(String filename) throws IOException {
  return readLine(filename,true);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\services\FileServer.java",304
1599,"'-tryline","/** 
 * Get the next line of the named file, first line is name to false
 * @param filename the filename or alias that was used to reserve the file
 * @param recycle - should file be restarted at EOF?
 * @return String containing the next line in the file (null if EOF reached and not recycle)
 * @throws IOException when reading of the file fails, or the file was not reserved properly
 */
public String readLine(String filename,boolean recycle) throws IOException {
  return readLine(filename,recycle,false);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\services\FileServer.java",315
1600,"'-tryline","/** 
 * Get the next line of the named file
 * @param filename the filename or alias that was used to reserve the file
 * @param recycle - should file be restarted at EOF?
 * @param ignoreFirstLine - Ignore first line
 * @return String containing the next line in the file (null if EOF reached and not recycle)
 * @throws IOException when reading of the file fails, or the file was not reserved properly
 */
public synchronized String readLine(String filename,boolean recycle,boolean ignoreFirstLine) throws IOException {
  FileEntry fileEntry=files.get(filename);
  if (fileEntry != null) {
    if (fileEntry.inputOutputObject == null) {
      fileEntry.inputOutputObject=createBufferedReader(fileEntry);
    }
 else     if (!(fileEntry.inputOutputObject instanceof Reader)) {
      throw new IOException(File  + filename +  already in use);
    }
    BufferedReader reader=(BufferedReader)fileEntry.inputOutputObject;
    String line=reader.readLine();
    if (line == null && recycle) {
      reader.close();
      reader=createBufferedReader(fileEntry);
      fileEntry.inputOutputObject=reader;
      if (ignoreFirstLine) {
        reader.readLine();
      }
      line=reader.readLine();
    }
    log.debug(Read:{},line);
    return line;
  }
  throw new IOException(File never reserved:  + filename);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\services\FileServer.java",326
1601,"'-tryline","/** 
 * @param alias the file name or alias
 * @param recycle whether the file should be re-started on EOF
 * @param ignoreFirstLine whether the file contains a file header which will be ignored
 * @param delim the delimiter to use for parsing
 * @return the parsed line, will be empty if the file is at EOF
 * @throws IOException when reading of the aliased file fails, or the file was not reserved properly
 */
public synchronized String[] getParsedLine(String alias,boolean recycle,boolean ignoreFirstLine,char delim) throws IOException {
  BufferedReader reader=getReader(alias,recycle,ignoreFirstLine);
  return CSVSaveService.csvReadFile(reader,delim);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\services\FileServer.java",362
1602,"'-tryline","/** 
 * Return BufferedReader handling close if EOF reached and recycle is true and ignoring first line if ignoreFirstLine is true
 * @param alias           String alias
 * @param recycle         Recycle at eof
 * @param ignoreFirstLine Ignore first line
 * @return {@link BufferedReader}
 */
private BufferedReader getReader(String alias,boolean recycle,boolean ignoreFirstLine) throws IOException {
  FileEntry fileEntry=files.get(alias);
  if (fileEntry != null) {
    BufferedReader reader;
    if (fileEntry.inputOutputObject == null) {
      reader=createBufferedReader(fileEntry);
      fileEntry.inputOutputObject=reader;
      if (ignoreFirstLine) {
        reader.readLine();
      }
    }
 else     if (!(fileEntry.inputOutputObject instanceof Reader)) {
      throw new IOException(File  + alias +  already in use);
    }
 else {
      reader=(BufferedReader)fileEntry.inputOutputObject;
      if (recycle) {
        reader.mark(1);
        int peek=reader.read();
        if (peek == -1) {
          reader.close();
          reader=createBufferedReader(fileEntry);
          fileEntry.inputOutputObject=reader;
          if (ignoreFirstLine) {
            reader.readLine();
          }
        }
 else {
          reader.reset();
        }
      }
    }
    return reader;
  }
 else {
    throw new IOException(File never reserved:  + alias);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\services\FileServer.java",376
1603,"'-tryline","private BufferedReader createBufferedReader(FileEntry fileEntry) throws IOException {
  if (!fileEntry.file.canRead() || !fileEntry.file.isFile()) {
    throw new IllegalArgumentException(File  + fileEntry.file.getName() +  must exist and be readable);
  }
  BOMInputStream fis=new BOMInputStream(Files.newInputStream(fileEntry.file.toPath()));
  InputStreamReader isr=null;
  String charsetName=fileEntry.charSetEncoding;
  if (!JOrphanUtils.isBlank(charsetName)) {
    isr=new InputStreamReader(fis,charsetName);
  }
 else   if (fis.hasBOM()) {
    isr=new InputStreamReader(fis,fis.getBOM().getCharsetName());
  }
 else {
    @SuppressWarnings(DefaultCharset) final InputStreamReader withPlatformEncoding=new InputStreamReader(fis);
    isr=withPlatformEncoding;
  }
  return new BufferedReader(isr);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\services\FileServer.java",422
1604,"'-tryline","public synchronized void write(String filename,String value) throws IOException {
  FileEntry fileEntry=files.get(filename);
  if (fileEntry != null) {
    if (fileEntry.inputOutputObject == null) {
      fileEntry.inputOutputObject=createBufferedWriter(fileEntry);
    }
 else     if (!(fileEntry.inputOutputObject instanceof Writer)) {
      throw new IOException(File  + filename +  already in use);
    }
    BufferedWriter writer=(BufferedWriter)fileEntry.inputOutputObject;
    log.debug(Write:{},value);
    writer.write(value);
  }
 else {
    throw new IOException(File never reserved:  + filename);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\services\FileServer.java",442
1605,"'-tryline","private BufferedWriter createBufferedWriter(FileEntry fileEntry) throws IOException {
  OutputStream fos=Files.newOutputStream(fileEntry.file.toPath());
  OutputStreamWriter osw;
  String charsetName=fileEntry.charSetEncoding;
  if (!JOrphanUtils.isBlank(charsetName)) {
    osw=new OutputStreamWriter(fos,charsetName);
  }
 else {
    @SuppressWarnings(DefaultCharset) final OutputStreamWriter withPlatformEncoding=new OutputStreamWriter(fos);
    osw=withPlatformEncoding;
  }
  return new BufferedWriter(osw);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\services\FileServer.java",458
1606,"'-tryline","public synchronized void closeFiles() throws IOException {
  for (  Map.Entry<String,FileEntry> me : files.entrySet()) {
    closeFile(me.getKey(),me.getValue());
  }
  files.clear();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\services\FileServer.java",473
1607,"'-tryline","/** 
 * @param name the name or alias of the file to be closed
 * @throws IOException when closing of the aliased file fails
 */
public synchronized void closeFile(String name) throws IOException {
  FileEntry fileEntry=files.get(name);
  closeFile(name,fileEntry);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\services\FileServer.java",480
1608,"'-tryline","private void closeFile(String name,FileEntry fileEntry) throws IOException {
  if (fileEntry != null && fileEntry.inputOutputObject != null) {
    log.info(Close: {},name);
    fileEntry.inputOutputObject.close();
    fileEntry.inputOutputObject=null;
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\services\FileServer.java",489
1609,"'-tryline","private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
  in.defaultReadObject();
  addThreadLock=new Object();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\threads\ThreadGroup.java",277
1610,"'-tryline","private SSLSocketFactory getSSLSocketFactory() throws IOException {
  try {
    SSLContext sslContext=((JsseSSLManager)SSLManager.getInstance()).getContext();
    return sslContext.getSocketFactory();
  }
 catch (  GeneralSecurityException ex) {
    throw new IOException(Rethrown as IOE,ex);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\HttpSSLProtocolSocketFactory.java",109
1611,"'-tryline","/** 
 * @see javax.net.SocketFactory#createSocket()
 */
@Override public Socket createSocket() throws IOException, UnknownHostException {
  SSLSocketFactory sslfac=getSSLSocketFactory();
  Socket sock=sslfac.createSocket();
  configureSocket(sock);
  return wrapSocket(sock);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\HttpSSLProtocolSocketFactory.java",128
1612,"'-tryline","@Override public Socket createSocket(InetAddress host,int port) throws IOException {
  SSLSocketFactory sslfac=getSSLSocketFactory();
  Socket sock=sslfac.createSocket(host,port);
  configureSocket(sock);
  return wrapSocket(sock);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\HttpSSLProtocolSocketFactory.java",140
1613,"'-tryline","@Override public Socket createSocket(InetAddress address,int port,InetAddress localAddress,int localPort) throws IOException {
  SSLSocketFactory sslfac=getSSLSocketFactory();
  Socket sock=sslfac.createSocket(address,port,localAddress,localPort);
  configureSocket(sock);
  return wrapSocket(sock);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\HttpSSLProtocolSocketFactory.java",148
1614,"'-tryline","@Override public Socket createSocket(Socket s,String host,int port,boolean autoClose) throws IOException {
  SSLSocketFactory sslfac=getSSLSocketFactory();
  Socket sock=sslfac.createSocket(s,host,port,autoClose);
  configureSocket(sock);
  return wrapSocket(sock);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\HttpSSLProtocolSocketFactory.java",176
1615,"'-tryline","@Override public Socket createSocket(String host,int port) throws IOException, UnknownHostException {
  SSLSocketFactory sslfac=getSSLSocketFactory();
  Socket sock=sslfac.createSocket(host,port);
  configureSocket(sock);
  return wrapSocket(sock);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\HttpSSLProtocolSocketFactory.java",184
1616,"'-tryline","@Override public Socket createSocket(String host,int port,InetAddress inetAddress,int localPort) throws IOException, UnknownHostException {
  SSLSocketFactory sslfac=getSSLSocketFactory();
  Socket sock=sslfac.createSocket(host,port,inetAddress,localPort);
  configureSocket(sock);
  return wrapSocket(sock);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\HttpSSLProtocolSocketFactory.java",192
1617,"'-tryline","@Override public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {
  if (!isDataFlavorSupported(flavor)) {
    throw new UnsupportedFlavorException(flavor);
  }
  if (data != null) {
    ObjectInput ois=null;
    try {
      ois=new ObjectInputStream(new ByteArrayInputStream(data));
      JMeterTreeNode[] nodes=(JMeterTreeNode[])ois.readObject();
      return nodes;
    }
 catch (    ClassNotFoundException cnfe) {
      throw new IOException(Failed to read object stream.,cnfe);
    }
 finally {
      if (ois != null) {
        try {
          ois.close();
        }
 catch (        Exception e) {
        }
      }
    }
  }
  return null;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\JMeterTreeNodeTransferable.java",54
1618,"'-tryline","public void setTransferData(JMeterTreeNode[] nodes) throws IOException {
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  ObjectOutputStream oos=null;
  try {
    oos=new ObjectOutputStream(bos);
    oos.writeObject(nodes);
    data=bos.toByteArray();
  }
  finally {
    if (oos != null) {
      try {
        oos.close();
      }
 catch (      Exception e) {
      }
    }
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\JMeterTreeNodeTransferable.java",80
1619,"'-tryline","/** 
 * Convenience method for {@link ClassFinder#findClassesThatExtend(String[],Class[],boolean)}with the option to include inner classes in the search set to false and the path list is derived from JMeterUtils.getSearchPaths().
 * @param superClass - single class to search for
 * @return List of Strings containing discovered class names.
 * @throws IOException when the used {@link ClassFinder} throws one while searching for the class
 */
public static List<String> findClassesThatExtend(Class<?> superClass) throws IOException {
  return ClassFinder.findClassesThatExtend(getSearchPaths(),new Class[]{superClass},false);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\JMeterUtils.java",294
1620,"'-tryline","/** 
 * This method will run inline script or file script with special behaviour for file script: - If ScriptEngine implements Compilable script will be compiled and cached - If not if will be run
 * @param scriptEngine ScriptEngine
 * @param pBindings {@link Bindings} might be null
 * @return Object returned by script
 * @throws IOException when reading the script fails
 * @throws ScriptException when compiling or evaluation of the script fails
 */
protected Object processFileOrScript(ScriptEngine scriptEngine,final Bindings pBindings) throws IOException, ScriptException {
  Bindings bindings=pBindings;
  if (bindings == null) {
    bindings=scriptEngine.createBindings();
  }
  populateBindings(bindings);
  File scriptFile=new File(getFilename());
  boolean supportsCompilable=scriptEngine instanceof Compilable && !bsh.engine.BshScriptEngine.equals(scriptEngine.getClass().getName());
  try {
    if (!StringUtils.isEmpty(getFilename())) {
      if (scriptFile.exists() && scriptFile.canRead()) {
        if (supportsCompilable) {
          String newCacheKey=getScriptLanguage() + # + scriptFile.getAbsolutePath()+ #+ scriptFile.lastModified();
          CompiledScript compiledScript=compiledScriptsCache.get(newCacheKey);
          if (compiledScript == null) {
synchronized (compiledScriptsCache) {
              compiledScript=compiledScriptsCache.get(newCacheKey);
              if (compiledScript == null) {
                try (BufferedReader fileReader=Files.newBufferedReader(scriptFile.toPath())){
                  compiledScript=((Compilable)scriptEngine).compile(fileReader);
                  compiledScriptsCache.put(newCacheKey,compiledScript);
                }
               }
            }
          }
          return compiledScript.eval(bindings);
        }
 else {
          try (BufferedReader fileReader=Files.newBufferedReader(scriptFile.toPath())){
            return scriptEngine.eval(fileReader,bindings);
          }
         }
      }
 else {
        throw new ScriptException(Script file ' + scriptFile.getAbsolutePath() + ' does not exist or is unreadable for element:+ getName());
      }
    }
 else     if (!StringUtils.isEmpty(getScript())) {
      if (supportsCompilable && !ScriptingBeanInfoSupport.FALSE_AS_STRING.equals(cacheKey)) {
        computeScriptMD5();
        CompiledScript compiledScript=compiledScriptsCache.get(this.scriptMd5);
        if (compiledScript == null) {
synchronized (compiledScriptsCache) {
            compiledScript=compiledScriptsCache.get(this.scriptMd5);
            if (compiledScript == null) {
              compiledScript=((Compilable)scriptEngine).compile(getScript());
              compiledScriptsCache.put(this.scriptMd5,compiledScript);
            }
          }
        }
        return compiledScript.eval(bindings);
      }
 else {
        return scriptEngine.eval(getScript(),bindings);
      }
    }
 else {
      throw new ScriptException(Both script file and script text are empty for element: + getName());
    }
  }
 catch (  ScriptException ex) {
    Throwable rootCause=ex.getCause();
    if (isStopCondition(rootCause)) {
      throw (RuntimeException)ex.getCause();
    }
 else {
      throw ex;
    }
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\JSR223TestElement.java",151
1621,"'-tryline","/** 
 * @return boolean true if element is not compilable or if compilation succeeds
 * @throws IOException if script is missing
 * @throws ScriptException if compilation fails
 */
public boolean compile() throws ScriptException, IOException {
  String lang=getScriptLanguageWithDefault();
  ScriptEngine scriptEngine=getInstance().getEngineByName(lang);
  boolean supportsCompilable=scriptEngine instanceof Compilable && !bsh.engine.BshScriptEngine.equals(scriptEngine.getClass().getName());
  if (!supportsCompilable) {
    return true;
  }
  if (!StringUtils.isEmpty(getScript())) {
    try {
      ((Compilable)scriptEngine).compile(getScript());
      return true;
    }
 catch (    ScriptException e) {
      logger.error(Error compiling script for test element {}, error:{},getName(),e.getMessage());
      return false;
    }
  }
 else {
    File scriptFile=new File(getFilename());
    try (BufferedReader fileReader=Files.newBufferedReader(scriptFile.toPath())){
      try {
        ((Compilable)scriptEngine).compile(fileReader);
        return true;
      }
 catch (      ScriptException e) {
        logger.error(Error compiling script for test element {}, error:{},getName(),e.getMessage());
        return false;
      }
    }
   }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\JSR223TestElement.java",234
1622,"'-tryline","/** 
 * Process the input stream and try to read the keys from the store
 * @param is    {@link InputStream} from which the store should be loaded
 * @param pword the password used to check the integrity of the store
 * @throws IOException               if there is a problem decoding or reading the store. A badpassword might be the cause for this, or an empty store
 * @throws CertificateException      if any of the certificated in the store can not be loaded
 * @throws NoSuchAlgorithmException  if the algorithm to check the integrity of the store can notbe found
 * @throws KeyStoreException         if the store has not been initialized (should not happenhere)
 * @throws UnrecoverableKeyException if the key can not be recovered from the store (should nothappen here, either)
 */
@SuppressWarnings(JdkObsolete) public void load(InputStream is,String pword) throws NoSuchAlgorithmException, CertificateException, IOException, KeyStoreException, UnrecoverableKeyException {
  char[] pw=toCharArrayOrNull(pword);
  store.load(is,pw);
  List<String> aliasesList=new ArrayList<>();
  this.privateKeyByAlias=new HashMap<>();
  this.certsByAlias=new HashMap<>();
  PrivateKey privateKey=null;
  int index=0;
  Enumeration<String> aliases=store.aliases();
  while (aliases.hasMoreElements()) {
    String alias=aliases.nextElement();
    if (!store.isKeyEntry(alias)) {
      continue;
    }
    if (isIndexInConfiguredRange(index)) {
      privateKey=Objects.requireNonNull((PrivateKey)store.getKey(alias,pw),No key found for alias:  + alias);
      Certificate[] chain=Objects.requireNonNull(store.getCertificateChain(alias),No certificate chain found for alias + alias);
      aliasesList.add(alias);
      privateKeyByAlias.put(alias,privateKey);
      certsByAlias.put(alias,toX509Certificates(chain));
    }
    index++;
  }
  if (is != null) {
    Objects.requireNonNull(privateKey,No key(s) found);
    if (endIndex != -1 && index <= endIndex - startIndex && log.isWarnEnabled()) {
      log.warn(Did not find as much aliases as configured in indexes Start={}, end={}, found={},startIndex,endIndex,certsByAlias.size());
    }
  }
  this.names=aliasesList.toArray(new String[aliasesList.size()]);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\keystore\JmeterKeyStore.java",90
1623,"'-tryline","@Override public int read() throws IOException {
  pauser.pause(1);
  return in.read();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowInputStream.java",42
1624,"'-tryline","@Override public int read(byte[] b,int off,int len) throws IOException {
  pauser.pause(len);
  return in.read(b,off,len);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowInputStream.java",49
1625,"'-tryline","@Override public void write(byte[] b,int off,int len) throws IOException {
  pauser.pause(len);
  out.write(b,off,len);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowOutputStream.java",43
1626,"'-tryline","@Override public void write(int b) throws IOException {
  pauser.pause(1);
  out.write(b);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowOutputStream.java",49
1627,"'-tryline","public SlowSocket(final int cps,String host,int port,InetAddress localAddress,int localPort,int timeout) throws IOException {
  super();
  if (cps <= 0) {
    throw new IllegalArgumentException(Speed (cps) <= 0);
  }
  charactersPerSecond=cps;
  SocketAddress localaddr=new InetSocketAddress(localAddress,localPort);
  SocketAddress remoteaddr=new InetSocketAddress(host,port);
  bind(localaddr);
  connect(remoteaddr,timeout);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSocket.java",36
1628,"'-tryline","/** 
 * @param cps characters per second
 * @param host hostname
 * @param port port
 * @param localAddr local address
 * @param localPort local port
 * @throws IOException if an I/O error occurs during initialization
 * @throws IllegalArgumentException if cps &lt;= 0, or if the <code>port</code> or <code>localPort</code> values lie outside of the allowed range between <code>0</code> and <code>65535</code>
 */
public SlowSocket(int cps,String host,int port,InetAddress localAddr,int localPort) throws IOException {
  super(host,port,localAddr,localPort);
  if (cps <= 0) {
    throw new IllegalArgumentException(Speed (cps) <= 0);
  }
  charactersPerSecond=cps;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSocket.java",50
1629,"'-tryline","/** 
 * @param cps characters per second
 * @param host hostname
 * @param port port
 * @throws UnknownHostException if the name of the host can not be determined automatically
 * @throws IOException if an I/O error occurs during initialization
 * @throws IllegalArgumentException if cps &lt;= 0, or if the <code>port</code> or <code>localPort</code> values lie outside of the allowed range between <code>0</code> and <code>65535</code>
 */
public SlowSocket(int cps,String host,int port) throws UnknownHostException, IOException {
  super(host,port);
  if (cps <= 0) {
    throw new IllegalArgumentException(Speed (cps) <= 0);
  }
  charactersPerSecond=cps;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSocket.java",78
1630,"'-tryline","@Override public OutputStream getOutputStream() throws IOException {
  return new SlowOutputStream(super.getOutputStream(),charactersPerSecond);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSocket.java",115
1631,"'-tryline","@Override public InputStream getInputStream() throws IOException {
  return new SlowInputStream(super.getInputStream(),charactersPerSecond);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSocket.java",121
1632,"'-tryline","@Override public OutputStream getOutputStream() throws IOException {
  return new SlowOutputStream(sslSock.getOutputStream(),charactersPerSecond);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSSLSocket.java",59
1633,"'-tryline","@Override public InputStream getInputStream() throws IOException {
  return new SlowInputStream(sslSock.getInputStream(),charactersPerSecond);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSSLSocket.java",65
1634,"'-tryline","@Override public void startHandshake() throws IOException {
  sslSock.startHandshake();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSSLSocket.java",157
1635,"'-tryline","@Override public void bind(SocketAddress bindpoint) throws IOException {
  sslSock.bind(bindpoint);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSSLSocket.java",164
1636,"'-tryline","@Override public synchronized void close() throws IOException {
  sslSock.close();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSSLSocket.java",169
1637,"'-tryline","@Override public void connect(SocketAddress endpoint,int timeout) throws IOException {
  sslSock.connect(endpoint,timeout);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSSLSocket.java",174
1638,"'-tryline","@Override public void connect(SocketAddress endpoint) throws IOException {
  sslSock.connect(endpoint);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSSLSocket.java",179
1639,"'-tryline","@Override public void sendUrgentData(int data) throws IOException {
  sslSock.sendUrgentData(data);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSSLSocket.java",289
1640,"'-tryline","@Override public void shutdownInput() throws IOException {
  sslSock.shutdownInput();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSSLSocket.java",339
1641,"'-tryline","@Override public void shutdownOutput() throws IOException {
  sslSock.shutdownOutput();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSSLSocket.java",344
1642,"'-tryline","private void retryLoadKeys(File initStore,boolean allowEmptyPassword) throws NoSuchAlgorithmException, CertificateException, IOException, KeyStoreException, UnrecoverableKeyException {
  for (int i=0; i < 3; i++) {
    String password=getPassword();
    if (!allowEmptyPassword) {
      Validate.notNull(password,Password for keystore must not be null);
    }
    try {
      if (initStore == null) {
        this.keyStore.load(null,password);
      }
 else {
        try (InputStream fis=new FileInputStream(initStore)){
          this.keyStore.load(fis,password);
        }
       }
      return;
    }
 catch (    IOException e) {
      log.debug(Could not load keystore. Wrong password for keystore?,e);
    }
    this.defaultpw=null;
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SSLManager.java",169
1643,"'-tryline","/** 
 * Process a given freemarker template and put its result in a new folder.
 * @param template file that contains the freemarker template to process
 * @param outputFile {@link File} created from template
 * @param templateConfig Configuration of the template
 * @param data to inject in the template
 * @throws IOException if an I/O exception occurs during writing to the writer
 * @throws TemplateException if an exception occurs during template processing
 */
public static void processTemplate(File template,File outputFile,Configuration templateConfig,Map<String,String> data) throws IOException, TemplateException {
  templateConfig.setDirectoryForTemplateLoading(template.getParentFile());
  freemarker.template.Template temp=templateConfig.getTemplate(template.getName());
  try (FileOutputStream stream=new FileOutputStream(outputFile);Writer writer=new OutputStreamWriter(stream,StandardCharsets.UTF_8);BufferedWriter bufferedWriter=new BufferedWriter(writer)){
    temp.process(data,bufferedWriter);
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\TemplateUtil.java",61
1644,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override public Socket createSocket(Socket socket,String host,int port,boolean autoClose) throws IOException {
  return factory.createSocket(socket,host,port,autoClose);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\TrustAllSSLSocketFactory.java",103
1645,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override public Socket createSocket(InetAddress address,int port,InetAddress localAddress,int localPort) throws IOException {
  return factory.createSocket(address,port,localAddress,localPort);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\TrustAllSSLSocketFactory.java",112
1646,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override public Socket createSocket(InetAddress address,int port) throws IOException {
  return factory.createSocket(address,port);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\TrustAllSSLSocketFactory.java",121
1647,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override public Socket createSocket(String host,int port,InetAddress localHost,int localPort) throws IOException {
  return factory.createSocket(host,port,localHost,localPort);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\TrustAllSSLSocketFactory.java",130
1648,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override public Socket createSocket(String host,int port) throws IOException {
  return factory.createSocket(host,port);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\TrustAllSSLSocketFactory.java",139
1649,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override public Socket createSocket() throws IOException {
  return factory.createSocket();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\TrustAllSSLSocketFactory.java",147
1650,"'-tryline","/** 
 * Utility function to get new Document
 * @param stream - Document Input stream
 * @param validate - Validate Document (not Tidy)
 * @param whitespace - Element Whitespace (not Tidy)
 * @param namespace - Is Namespace aware. (not Tidy)
 * @param tolerant - Is tolerant - i.e. use the Tidy parser
 * @param quiet - set Tidy quiet
 * @param showWarnings - set Tidy warnings
 * @param reportErrors - throw TidyException if Tidy detects an error
 * @param isXml - is document already XML (Tidy only)
 * @param downloadDTDs - if true, try to download external DTDs
 * @return document
 * @throws ParserConfigurationException when no {@link DocumentBuilder} can be constructed for the wanted configuration
 * @throws SAXException if parsing fails
 * @throws IOException if an I/O error occurs while parsing
 * @throws TidyException if a ParseError is detected and <code>report_errors</code> is <code>true</code>
 */
public static Document makeDocument(InputStream stream,boolean validate,boolean whitespace,boolean namespace,boolean tolerant,boolean quiet,boolean showWarnings,boolean reportErrors,boolean isXml,boolean downloadDTDs) throws ParserConfigurationException, SAXException, IOException, TidyException {
  return makeDocument(stream,validate,whitespace,namespace,tolerant,quiet,showWarnings,reportErrors,isXml,downloadDTDs,null);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\XPathUtil.java",154
1651,"'-tryline","/** 
 * Utility function to get new Document
 * @param stream - Document Input stream
 * @param validate - Validate Document (not Tidy)
 * @param whitespace - Element Whitespace (not Tidy)
 * @param namespace - Is Namespace aware. (not Tidy)
 * @param tolerant - Is tolerant - i.e. use the Tidy parser
 * @param quiet - set Tidy quiet
 * @param showWarnings - set Tidy warnings
 * @param report_errors - throw TidyException if Tidy detects an error
 * @param isXml - is document already XML (Tidy only)
 * @param downloadDTDs - if true, try to download external DTDs
 * @param tidyOut OutputStream for Tidy pretty-printing
 * @return document
 * @throws ParserConfigurationException if {@link DocumentBuilder} can not be created for the wanted configuration
 * @throws SAXException if parsing fails
 * @throws IOException if I/O error occurs while parsing
 * @throws TidyException if a ParseError is detected and <code>report_errors</code> is <code>true</code>
 */
public static Document makeDocument(InputStream stream,boolean validate,boolean whitespace,boolean namespace,boolean tolerant,boolean quiet,boolean showWarnings,boolean report_errors,boolean isXml,boolean downloadDTDs,OutputStream tidyOut) throws ParserConfigurationException, SAXException, IOException, TidyException {
  Document doc;
  if (tolerant) {
    doc=tidyDoc(stream,quiet,showWarnings,report_errors,isXml,tidyOut);
  }
 else {
    doc=makeDocumentBuilder(validate,whitespace,namespace,downloadDTDs).parse(stream);
  }
  return doc;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\XPathUtil.java",180
1652,"'-tryline","@Test public void testSuccessWhenJmxExists() throws IOException, ConfigurationException {
  File temp=File.createTempFile(testPlan,.jmx);
  String testPlan=<?xml version=\1.0\ encoding=\UTF-8\?>\n + <jmeterTestPlan version=\1.2\ properties=\5.0\ jmeter=\5.2-SNAPSHOT\>\n +   <hashTree>\n+     <TestPlan guiclass=\TestPlanGui\ testclass=\TestPlan\ testname=\Test Plan\ enabled=\true\>\n+       <stringProp name=\TestPlan.comments\></stringProp>\n+       <boolProp name=\TestPlan.functional_mode\>false</boolProp>\n+       <boolProp name=\TestPlan.tearDown_on_shutdown\>true</boolProp>\n+       <boolProp name=\TestPlan.serialize_threadgroups\>false</boolProp>\n+       <elementProp name=\TestPlan.user_defined_variables\ elementType=\Arguments\ guiclass=\ArgumentsPanel\ + testclass=\Arguments\ testname=\User Defined Variables\ enabled=\true\>\n+         <collectionProp name=\Arguments.arguments\/>\n+       </elementProp>\n+       <stringProp name=\TestPlan.user_define_classpath\></stringProp></TestPlan>+     <hashTree/></hashTree></jmeterTestPlan>;
  try (FileWriter fw=new FileWriter(temp);BufferedWriter out=new BufferedWriter(fw)){
    out.write(testPlan);
  }
   try {
    JMeter jmeter=new JMeter();
    jmeter.runNonGui(temp.getAbsolutePath(),null,false,null,false);
  }
  finally {
    assertTrue(File  + temp.getAbsolutePath() +  should have been deleted,temp.delete());
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\JMeterTest.java",47
1653,"'-tryline","@Test public void testFailureWithMissingPlugin() throws IOException, ConfigurationException {
  File temp=File.createTempFile(testPlan,.jmx);
  String testPlan=<?xml version=\1.0\ encoding=\UTF-8\?>\n + <jmeterTestPlan version=\1.2\ properties=\5.0\ jmeter=\5.2-SNAPSHOT.20190506\>\n +   <hashTree>\n+     <TestPlan guiclass=\TestPlanGui\ testclass=\TestPlan\ testname=\Test Plan\ enabled=\true\>\n+       <stringProp name=\TestPlan.comments\></stringProp>\n+       <boolProp name=\TestPlan.functional_mode\>false</boolProp>\n+       <boolProp name=\TestPlan.tearDown_on_shutdown\>true</boolProp>\n+       <boolProp name=\TestPlan.serialize_threadgroups\>false</boolProp>\n+       <elementProp name=\TestPlan.user_defined_variables\ elementType=\Arguments\ + guiclass=\ArgumentsPanel\ testclass=\Arguments\ testname=\User Defined Variables\ enabled=\true\>\n+         <collectionProp name=\Arguments.arguments\/>\n+       </elementProp>\n+       <stringProp name=\TestPlan.user_define_classpath\></stringProp>\n+     </TestPlan>\n+     <hashTree>\n+       <hashTree>\n+         <kg.apc.jmeter.samplers.DummySampler guiclass=\kg.apc.jmeter.samplers.DummySamplerGui\ + testclass=\kg.apc.jmeter.samplers.DummySampler\ testname=\jp@gc - Dummy Sampler\ enabled=\true\>\n+           <boolProp name=\WAITING\>true</boolProp>\n+           <boolProp name=\SUCCESFULL\>true</boolProp>\n+           <stringProp name=\RESPONSE_CODE\>200</stringProp>\n+           <stringProp name=\RESPONSE_MESSAGE\>OK</stringProp>\n+           <stringProp name=\REQUEST_DATA\>{&quot;email&quot;:&quot;user1&quot;, &quot;password&quot;:&quot;password1&quot;}ï¼›+ </stringProp>\n+           <stringProp name=\RESPONSE_DATA\>{&quot;successful&quot;: true, &quot;account_id&quot;:&quot;0123456789&quot;}</stringProp>\n+           <stringProp name=\RESPONSE_TIME\>${__Random(50,500)}</stringProp>\n+           <stringProp name=\LATENCY\>${__Random(1,50)}</stringProp>\n+           <stringProp name=\CONNECT\>${__Random(1,5)}</stringProp>\n+         </kg.apc.jmeter.samplers.DummySampler></hashTree></hashTree>\n+   </hashTree></jmeterTestPlan><hashTree/></hashTree>\n+ </jmeterTestPlan>;
  try (FileWriter fw=new FileWriter(temp);BufferedWriter out=new BufferedWriter(fw)){
    out.write(testPlan);
  }
   JMeter jmeter=new JMeter();
  try {
    jmeter.runNonGui(temp.getAbsolutePath(),null,false,null,false);
    fail(Expected ConfigurationException to be thrown);
  }
 catch (  ConfigurationException e) {
    assertTrue(When the plugin doesn't exist, the method 'runNonGui' should have a detailed message,e.getMessage().contains(Error in NonGUIDriver Problem loading XML from));
  }
 finally {
    assertTrue(File  + temp.getAbsolutePath() +  should have been deleted,temp.delete());
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\JMeterTest.java",75
1654,"'-tryline","@BeforeEach public void setUp() throws IOException {
  tempCsv=File.createTempFile(samplecsv,.csv);
  tempCsv.deleteOnExit();
  try (CsvSampleWriter writer=new CsvSampleWriter(tempCsv,metadata)){
    writer.setSeparator(',');
    for (long i=0; i < NR_ROWS; i++) {
      final Sample sample=new SampleBuilder(metadata).add(i).add(a + i).build();
      writer.write(sample);
    }
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\report\core\CsvSampleReaderTest.java",39
1655,"'-tryline","private void checkMessagesForLanguage(Map<String,Map<String,String>> missingLabelsPerBundle,Map<String,Map<String,String>> missingLabelsPerBundle2,Properties messages,String bundlePath,String language) throws IOException {
  Properties messagesFr=new Properties();
  String languageBundle=bundlePath + _ + language+ .properties;
  InputStream inputStream=Thread.currentThread().getContextClassLoader().getResourceAsStream(languageBundle);
  if (inputStream == null) {
    Map<String,String> messagesAsProperties=new HashMap<>();
    for (    Map.Entry<Object,Object> entry : messages.entrySet()) {
      messagesAsProperties.put((String)entry.getKey(),(String)entry.getValue());
    }
    missingLabelsPerBundle.put(languageBundle,messagesAsProperties);
    return;
  }
  messagesFr.load(inputStream);
  Map<String,String> missingLabels=new TreeMap<>();
  for (  Map.Entry<Object,Object> entry : messages.entrySet()) {
    String key=(String)entry.getKey();
    final String I18NString=[\\d% ]+;
    if (!messagesFr.containsKey(key)) {
      String value=(String)entry.getValue();
      if (value.matches(I18NString)) {
        System.out.println(Ignoring missing  + key + =+ value+  in + languageBundle);
      }
 else {
        missingLabels.put(key,(String)entry.getValue());
      }
    }
 else {
      String value=(String)entry.getValue();
      if (value.matches(I18NString)) {
        System.out.println(Unnecessary entry  + key + =+ value+  in + languageBundle);
      }
    }
  }
  if (!missingLabels.isEmpty()) {
    missingLabelsPerBundle.put(languageBundle,missingLabels);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\resources\PackageTest.java",334
1656,"'-tryline","@Test public void testSampleOccurred() throws IOException {
  Path props=Files.createTempFile(mydummy,.properties);
  JMeterUtils.loadJMeterProperties(props.toString());
  JMeterUtils.getJMeterProperties().setProperty(sample_sender_strip_also_on_error,stripOnError.toString());
  SimpleSender nextSender=new SimpleSender();
  DataStrippingSampleSender sut=new DataStrippingSampleSender(nextSender);
  sut.readResolve();
  SampleResult sample=result(successfulParent,result(result(result())));
  sut.sampleOccurred(event(sample));
  assertResultsHaveContent(content,sample);
  assertThat(sample,CoreMatchers.is(nextSender.getResult()));
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\samplers\TestDataStrippingSampleSender.java",61
1657,"'-tryline","@Test public void testMakeDocument() throws ParserConfigurationException, SAXException, IOException, TidyException {
  String responseData=<book><page>one</page><page>two</page><empty></empty><a><b></b></a></book>;
  Document testDoc=XPathUtil.makeDocument(new ByteArrayInputStream(responseData.getBytes(StandardCharsets.UTF_8)),false,false,false,false,false,false,false,false,false);
  AssertionResult res=new AssertionResult(test);
  String xpathquery=/book;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,false);
  assertFalse(Should not be an error,res.isError());
  assertFalse(Should not be a failure,res.isFailure());
  xpathquery=/book/error;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,false);
  assertFalse(Should not be an error,res.isError());
  assertTrue(Should be a failure,res.isFailure());
  xpathquery=count(/book/page)=2;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,false);
  assertFalse(Should not be an error,res.isError());
  assertFalse(Should not be a failure,res.isFailure());
  xpathquery=count(/book/page)=1;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,false);
  assertFalse(Should not be an error,res.isError());
  assertTrue(Should be a failure,res.isFailure());
  xpathquery=///book;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,false);
  assertTrue(Should be an error,res.isError());
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\XPathUtilTest.java",173
1658,"'-tryline","@Test public void testMakeDocumentIsnegated() throws ParserConfigurationException, SAXException, IOException, TidyException {
  String responseData=<book><preface>zero</preface><page>one</page><page>two</page><empty></empty><a><b></b></a></book>;
  Document testDoc=XPathUtil.makeDocument(new ByteArrayInputStream(responseData.getBytes(StandardCharsets.UTF_8)),false,false,false,false,false,false,false,false,false);
  AssertionResult res=new AssertionResult(test);
  String xpathquery=/book/error;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,true);
  assertFalse(Should not be an error,res.isError());
  assertFalse(Should not be a failure,res.isFailure());
  xpathquery=/book/preface;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,true);
  assertFalse(Should not be an error,res.isError());
  assertTrue(Should be a failure,res.isFailure());
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,true);
  assertFalse(Should not be an error,res.isError());
  assertTrue(Should be a failure,res.isFailure());
  xpathquery=count(/book/page)=1;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,true);
  assertFalse(Should not be an error,res.isError());
  assertFalse(Should not be a failure,res.isFailure());
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\XPathUtilTest.java",201
1659,"'-tryline","@Test public void testPutValuesForXPathInList() throws ParserConfigurationException, SAXException, IOException, TidyException, TransformerException {
  String responseData=<book><page>one</page><page>two</page><empty></empty><a><b></b></a></book>;
  Document testDoc=XPathUtil.makeDocument(new ByteArrayInputStream(responseData.getBytes(StandardCharsets.UTF_8)),false,false,false,false,false,false,false,false,false);
  String xpathquery=/book/page;
  List<String> matchs=new ArrayList<>();
  XPathUtil.putValuesForXPathInList(testDoc,xpathquery,matchs,true);
  assertEquals(<page>one</page>,matchs.get(0));
  assertEquals(<page>two</page>,matchs.get(1));
  matchs=new ArrayList<>();
  XPathUtil.putValuesForXPathInList(testDoc,xpathquery,matchs,false);
  assertEquals(one,matchs.get(0));
  assertEquals(two,matchs.get(1));
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\XPathUtilTest.java",263
1660,"'-tryline","private static List<String> findJMeterJUnitTests(String searchPathString) throws IOException {
  final String[] searchPaths=JOrphanUtils.split(searchPathString,,);
  return ClassFinder.findClasses(searchPaths,new JunitTestFilter());
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jorphan\test\AllTests.java",324
1661,"'-tryline","private Element getBodyFromXMLDocument(InputStream stream) throws ParserConfigurationException, SAXException, IOException {
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  dbf.setIgnoringElementContentWhitespace(true);
  dbf.setIgnoringComments(true);
  DocumentBuilder db=dbf.newDocumentBuilder();
  Document doc=db.parse(new InputSource(stream));
  org.w3c.dom.Element root=doc.getDocumentElement();
  org.w3c.dom.Element body=(org.w3c.dom.Element)root.getElementsByTagName(body).item(0);
  return body;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\functions\ComponentReferenceFunctionTest.java",87
1662,"'-tryline","/** 
 * @return
 * @throws ParserConfigurationException
 * @throws IOException
 * @throws SAXException
 * @throws FileNotFoundException
 */
private Element getBodyFromXMLDocument(InputStream stream) throws ParserConfigurationException, SAXException, IOException {
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  dbf.setIgnoringElementContentWhitespace(true);
  dbf.setIgnoringComments(true);
  DocumentBuilder db=dbf.newDocumentBuilder();
  Document doc=db.parse(new InputSource(stream));
  org.w3c.dom.Element root=doc.getDocumentElement();
  org.w3c.dom.Element body=(org.w3c.dom.Element)root.getElementsByTagName(body).item(0);
  return body;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\junit\JMeterTest.java",190
1663,"'-tryline","private FileStats getFileStats(File testFile) throws IOException, FileNotFoundException {
  if (testFile == null || !testFile.exists()) {
    return FileStats.NO_STATS;
  }
  try (FileReader fileReader=new FileReader(testFile);BufferedReader bufferedReader=new BufferedReader(fileReader)){
    return computeFileStats(bufferedReader);
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\save\TestSaveService.java",173
1664,"'-tryline","/** 
 * Calculate size and line count ignoring EOL and jmeterTestPlan element which may vary because of different attributes/attribute lengths.
 */
private FileStats computeFileStats(BufferedReader br) throws IOException {
  int length=0;
  int lines=0;
  String line;
  while ((line=br.readLine()) != null) {
    lines++;
    if (!line.startsWith(<jmeterTestPlan)) {
      length+=line.length();
    }
  }
  return new FileStats(length,lines);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\save\TestSaveService.java",184
1665,"'-tryline","private void checkElementAlias(Object item) throws IOException {
  Properties nameMap=SaveService.loadProperties();
  assertNotNull(SaveService nameMap (saveservice.properties) should not be null,nameMap);
  String name=item.getClass().getName();
  boolean contains=nameMap.values().contains(name);
  if (!contains) {
    fail(SaveService nameMap (saveservice.properties) should contain  + name);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\testelement\TestElementTest.java",95
1666,"'-tryline","@Test public void readJmxSavedWithJMeter26() throws IOException {
  String jmx26=<?xml version=\1.0\ encoding=\UTF-8\?>\n + <jmeterTestPlan version=\1.2\ properties=\2.2\>\n +   <hashTree>\n+     <TestPlan guiclass=\TestPlanGui\ testclass=\TestPlan\ testname=\Test Plan\ enabled=\true\>\n+       <stringProp name=\TestPlan.comments\></stringProp>\n+       <boolProp name=\TestPlan.functional_mode\>false</boolProp>\n+       <boolProp name=\TestPlan.serialize_threadgroups\>false</boolProp>\n+       <elementProp name=\TestPlan.user_defined_variables\ elementType=\Arguments\+  guiclass=\ArgumentsPanel\ testclass=\Arguments\ testname=\User Defined Variables\n+ \ enabled=\true\>\n+         <collectionProp name=\Arguments.arguments\/>\n+       </elementProp>\n+       <stringProp name=\TestPlan.user_define_classpath\></stringProp>\n+     </TestPlan>\n+     <hashTree>\n+       <ThreadGroup guiclass=\ThreadGroupGui\ testclass=\ThreadGroup\ testname=\Thread Group\ enabled=\true\>\n+         <stringProp name=\ThreadGroup.on_sample_error\>continue</stringProp>\n+         <elementProp name=\ThreadGroup.main_controller\ elementType=\LoopController\+  guiclass=\LoopControlPanel\ testclass=\LoopController\ testname=\Loop Control\n+ ler\ enabled=\true\>\n+           <boolProp name=\LoopController.continue_forever\>false</boolProp>\n+           <stringProp name=\LoopController.loops\>1</stringProp>\n+         </elementProp>\n+         <stringProp name=\ThreadGroup.num_threads\>1</stringProp>\n+         <stringProp name=\ThreadGroup.ramp_time\>1</stringProp>\n+         <longProp name=\ThreadGroup.start_time\>1570221190000</longProp>\n+         <longProp name=\ThreadGroup.end_time\>1570221190000</longProp>\n+         <boolProp name=\ThreadGroup.scheduler\>false</boolProp>\n+         <stringProp name=\ThreadGroup.duration\></stringProp>\n+         <stringProp name=\ThreadGroup.delay\></stringProp>\n+       </ThreadGroup>\n+       <hashTree/>\n+     </hashTree>\n+   </hashTree>\n+ </jmeterTestPlan>;
  Path jmx=tmpDir.resolve(default_thread_group_2_6.xml);
  Files.write(jmx,Collections.singleton(jmx26));
  HashTree hashTree=SaveService.loadTree(jmx.toFile());
  HashTree testPlanTree=hashTree.values().iterator().next();
  ThreadGroup tg=(ThreadGroup)testPlanTree.keySet().iterator().next();
  tg.setRunningVersion(true);
  String actual=getName:  + tg.getName() + \n+ getNumThreads: + tg.getNumThreads()+ \n+ getRampUp: + tg.getRampUp()+ \n+ getScheduler: + tg.getScheduler()+ \n+ isSameUserOnNextIteration: + tg.isSameUserOnNextIteration()+ \n;
  Assertions.assertEquals(getName: Thread Group\n + getNumThreads: 1\n + getRampUp: 1\n+ getScheduler: false\n+ isSameUserOnNextIteration: true\n,actual);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\threads\ThreadGroupLoad.java",41
1667,"'-tryline","@Test public void testFindClassesThatExtendStringArrayClassOfQArray() throws IOException {
  List<String> findClassesThatExtend=ClassFinder.findClassesThatExtend(libDirs,new Class<?>[]{Exception.class});
  MatcherAssert.assertThat(findClassesThatExtend,CoreMatchers.hasItem(LoggingException.class.getName()));
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jorphan\reflect\TestClassFinder.java",49
1668,"'-tryline","@Test public void testFindClasses() throws IOException {
  Assert.assertFalse(ClassFinder.findClasses(libDirs,className -> true).isEmpty());
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jorphan\reflect\TestClassFinder.java",120
1669,"'-tryline","@Test public void testFindClassesNone() throws IOException {
  Assert.assertTrue(ClassFinder.findClasses(libDirs,className -> false).isEmpty());
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jorphan\reflect\TestClassFinder.java",125
1670,"'-tryline","public FileRowColContainer(String file,String delim) throws IOException, FileNotFoundException {
  log.debug(FRCC({},{}),file,delim);
  fileName=file;
  delimiter=delim;
  nextRow=0;
  fileData=new ArrayList<>();
  load();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\FileRowColContainer.java",57
1671,"'-tryline","public FileRowColContainer(String file) throws IOException, FileNotFoundException {
  log.debug(FRCC({})[{}],file,DELIMITER);
  fileName=file;
  delimiter=DELIMITER;
  nextRow=0;
  fileData=new ArrayList<>();
  load();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\FileRowColContainer.java",66
1672,"'-tryline","private void load() throws IOException, FileNotFoundException {
  try (BufferedReader myBread=Files.newBufferedReader(FileServer.getFileServer().getResolvedFile(fileName).toPath(),Charset.defaultCharset())){
    String line=myBread.readLine();
    while (line != null && line.length() > 0) {
      fileData.add(splitLine(line,delimiter));
      line=myBread.readLine();
    }
  }
 catch (  IOException e) {
    fileData.clear();
    log.warn(e.toString());
    throw e;
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\FileRowColContainer.java",75
1673,"'-tryline","private static FileRowColContainer getFile(String file,String alias) throws FileNotFoundException, IOException {
  FileRowColContainer frcc;
  if ((frcc=fileContainers.get(alias)) == null) {
    frcc=new FileRowColContainer(file);
    fileContainers.put(alias,frcc);
    log.info(Saved {} as {} delimiter=<{}>,file,alias,frcc.getDelimiter());
    if (defaultFile.length() == 0) {
      defaultFile=file;
    }
  }
  return frcc;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\FileWrapper.java",104
1674,"'-tryline","/** 
 * Write to file
 * @return boolean true if success , false otherwise
 * @throws IOException
 */
private boolean writeToFile() throws IOException {
  String fileName=((CompoundVariable)values[0]).execute().trim();
  String content=((CompoundVariable)values[1]).execute();
  boolean append=true;
  if (values.length >= 3) {
    String appendString=((CompoundVariable)values[2]).execute().toLowerCase().trim();
    if (!appendString.isEmpty()) {
      append=Boolean.parseBoolean(appendString);
    }
  }
  content=NEW_LINE_PATTERN.matcher(content).replaceAll(System.lineSeparator());
  Charset charset=StandardCharsets.UTF_8;
  if (values.length == 4) {
    String charsetParamValue=((CompoundVariable)values[3]).execute();
    if (StringUtils.isNotEmpty(charsetParamValue)) {
      charset=Charset.forName(charsetParamValue);
    }
  }
  if (fileName.isEmpty()) {
    log.error(File name '{}' is empty,fileName);
    return false;
  }
  log.debug(Writing {} to file {} with charset {} and append {},content,fileName,charset,append);
  Lock lock=lockMap.computeIfAbsent(fileName,key -> new ReentrantLock());
  lock.lock();
  try {
    File file=new File(fileName);
    File fileParent=file.getParentFile();
    if (fileParent == null || (fileParent.exists() && fileParent.isDirectory() && fileParent.canWrite())) {
      FileUtils.writeStringToFile(file,content,charset,append);
    }
 else {
      log.error(The parent file of {} doesn't exist or is not writable,file);
      return false;
    }
  }
  finally {
    lock.unlock();
  }
  return true;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\StringToFile.java",75
1675,"'-tryline","public XPathFileContainer(String file,String xpath) throws FileNotFoundException, IOException, ParserConfigurationException, SAXException, TransformerException {
  log.debug(XPath({}) xpath {},file,xpath);
  fileName=file;
  nextRow=0;
  nodeList=load(xpath);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\XPathFileContainer.java",57
1676,"'-tryline","private NodeList load(String xpath) throws IOException, FileNotFoundException, ParserConfigurationException, SAXException, TransformerException {
  NodeList nl=null;
  try (FileInputStream fis=new FileInputStream(fileName);BufferedInputStream bis=new BufferedInputStream(fis)){
    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
    factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
    DocumentBuilder builder=factory.newDocumentBuilder();
    nl=XPathUtil.selectNodeList(builder.parse(bis),xpath);
    if (log.isDebugEnabled()) {
      log.debug(found {},nl.getLength());
    }
  }
 catch (  TransformerException|SAXException|ParserConfigurationException|IOException e) {
    log.warn(e.toString());
    throw e;
  }
  return nl;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\XPathFileContainer.java",65
1677,"'-tryline","@BeforeAll public static void prepareCsv(@TempDir Path dir) throws IOException {
  Path path=dir.resolve(test.csv);
  Files.write(path,Arrays.asList(a1,b1,c1,d1,a2,b2,c2,d2,a3,b3,c3,d3,a4,b4,c4,d4));
  csvFilePath=path.toString();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\CSVReadFunctionTest.java",43
1678,"'-tryline","@BeforeAll public static void init(@TempDir Path tempDir) throws IOException {
  dir=tempDir;
  Files.write(dir.resolve(SFFTest1.txt),Arrays.asList(uno,dos,tres,cuatro,cinco));
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\test\java\org\apache\jmeter\functions\StringFromFileFunctionTest.java",36
1679,"'-tryline","/** 
 * Method readObject.
 * @param ois the stream to read the objects from
 * @throws ClassNotFoundException when the class for the deserialization can not be found
 * @throws IOException when I/O error occurs
 */
private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {
  ois.defaultReadObject();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\collections\HashTree.java",936
1680,"'-tryline","private void writeObject(ObjectOutputStream oos) throws IOException {
  oos.defaultWriteObject();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\collections\HashTree.java",950
1681,"'-tryline","private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {
  ois.defaultReadObject();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\collections\ListedHashTree.java",209
1682,"'-tryline","private void writeObject(ObjectOutputStream oos) throws IOException {
  oos.defaultWriteObject();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\collections\ListedHashTree.java",213
1683,"'-tryline","/** 
 * Generate a self-signed keypair using the algorithm RSA.
 * @param keystore the keystore; if it already contains the alias the command will fail
 * @param alias the alias to use, not null
 * @param password the password to use for the store and the key
 * @param validity the validity period in days, greater than 0
 * @param dname the <em>distinguished name</em> value, if omitted use cn=JMeter Proxy (DO NOT TRUST)
 * @param ext if not null, the extension (-ext) to add (e.g. bc:c).
 * @throws IOException if keytool was not configured or running keytool application fails
 */
public static void genkeypair(final File keystore,String alias,final String password,int validity,String dname,String ext) throws IOException {
  final File workingDir=keystore.getParentFile();
  final SystemCommand nativeCommand=new SystemCommand(workingDir,null);
  final List<String> arguments=new ArrayList<>();
  arguments.add(getKeyToolPath());
  arguments.add(-genkeypair);
  arguments.add(-alias);
  arguments.add(alias);
  arguments.add(-dname);
  arguments.add(dname == null ? DEFAULT_DNAME : dname);
  arguments.add(-keyalg);
  arguments.add(RSA);
  arguments.add(-keystore);
  arguments.add(keystore.getName());
  arguments.add(-storepass);
  arguments.add(password);
  arguments.add(-keypass);
  arguments.add(password);
  arguments.add(-validity);
  arguments.add(Integer.toString(validity));
  if (ext != null) {
    arguments.add(-ext);
    arguments.add(ext);
  }
  try {
    int exitVal=nativeCommand.run(arguments);
    if (exitVal != 0) {
      throw new IOException(  >>  + nativeCommand.getOutResult().trim() +  <<+ \nCommand failed, code: + exitVal+ \n'+ formatCommand(arguments)+ ');
    }
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    throw new IOException(Command was interrupted\n + nativeCommand.getOutResult(),e);
  }
catch (  TimeoutException e) {
    throw new IOException(Timeout reached while executing\n + nativeCommand.getOutResult(),e);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\exec\KeyToolUtils.java",130
1684,"'-tryline","/** 
 * Creates a self-signed Root CA certificate and an intermediate CA certificate (signed by the Root CA certificate) that can be used to sign server certificates. The Root CA certificate file is exported to the same directory as the keystore in formats suitable for Firefox/Chrome/IE (.crt) and Opera (.usr).
 * @param keystore the keystore in which to store everything
 * @param password the password for keystore and keys
 * @param validity the validity period in days, must be greater than 0
 * @throws IOException if keytool was not configured, running keytool application failed or copying the keys failed
 */
public static void generateProxyCA(File keystore,String password,int validity) throws IOException {
  File caCertCrt=new File(ROOT_CACERT_CRT);
  File caCertUsr=new File(ROOT_CACERT_USR);
  boolean fileExists=false;
  if (!keystore.delete() && keystore.exists()) {
    log.warn(Problem deleting the keystore ' + keystore + ');
    fileExists=true;
  }
  if (!caCertCrt.delete() && caCertCrt.exists()) {
    log.warn(Problem deleting the certificate file ' + caCertCrt + ');
    fileExists=true;
  }
  if (!caCertUsr.delete() && caCertUsr.exists()) {
    log.warn(Problem deleting the certificate file ' + caCertUsr + ');
    fileExists=true;
  }
  if (fileExists) {
    log.warn(If problems occur when recording SSL, delete the files manually and retry.);
  }
  KeyToolUtils.genkeypair(keystore,ROOTCA_ALIAS,password,validity,DNAME_ROOT_CA_KEY,bc:c);
  KeyToolUtils.genkeypair(keystore,INTERMEDIATE_CA_ALIAS,password,validity,DNAME_INTERMEDIATE_CA_KEY,bc:c);
  ByteArrayOutputStream certReqOut=new ByteArrayOutputStream();
  KeyToolUtils.keytool(-certreq,keystore,password,INTERMEDIATE_CA_ALIAS,null,certReqOut);
  InputStream certReqIn=new ByteArrayInputStream(certReqOut.toByteArray());
  ByteArrayOutputStream genCertOut=new ByteArrayOutputStream();
  KeyToolUtils.keytool(-gencert,keystore,password,ROOTCA_ALIAS,certReqIn,genCertOut,-ext,BC:0);
  InputStream genCertIn=new ByteArrayInputStream(genCertOut.toByteArray());
  KeyToolUtils.keytool(-importcert,keystore,password,INTERMEDIATE_CA_ALIAS,genCertIn,null);
  KeyToolUtils.keytool(-exportcert,keystore,password,ROOTCA_ALIAS,null,null,-rfc,-file,ROOT_CACERT_CRT);
  if (caCertCrt.exists() && caCertCrt.canRead()) {
    FileUtils.copyFile(caCertCrt,caCertUsr);
  }
 else {
    log.warn(Failed creating  + caCertCrt.getAbsolutePath() + , check 'keytool' utility in path is available and points to a JDK >= 7);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\exec\KeyToolUtils.java",209
1685,"'-tryline","/** 
 * Create a host certificate signed with the CA certificate.
 * @param keystore the keystore to use
 * @param password the password to use for the keystore and keys
 * @param host the host, e.g. jmeter.apache.org or *.apache.org; also used as the alias
 * @param validity the validity period for the generated keypair
 * @throws IOException if keytool was not configured or running keytool application failed
 */
public static void generateHostCert(File keystore,String password,String host,int validity) throws IOException {
  generateSignedCert(keystore,password,validity,host,host);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\exec\KeyToolUtils.java",268
1686,"'-tryline","private static void generateSignedCert(File keystore,String password,int validity,String alias,String subject) throws IOException {
  String dname=cn= + guardSubjectName(subject) + , o=JMeter Proxy (TEMPORARY TRUST ONLY);
  String ext=san= + chooseExtension(subject);
  KeyToolUtils.genkeypair(keystore,alias,password,validity,dname,ext);
  ByteArrayOutputStream certReqOut=new ByteArrayOutputStream();
  KeyToolUtils.keytool(-certreq,keystore,password,alias,null,certReqOut,-ext,ext);
  InputStream certReqIn=new ByteArrayInputStream(certReqOut.toByteArray());
  ByteArrayOutputStream certOut=new ByteArrayOutputStream();
  KeyToolUtils.keytool(-gencert,keystore,password,INTERMEDIATE_CA_ALIAS,certReqIn,certOut,-ext,ku:c=dig,keyE,-ext ,ext);
  InputStream certIn=new ByteArrayInputStream(certOut.toByteArray());
  KeyToolUtils.keytool(-importcert,keystore,password,alias,certIn,null,-noprompt);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\exec\KeyToolUtils.java",286
1687,"'-tryline","/** 
 * List the contents of a keystore
 * @param keystore the keystore file
 * @param storePass the keystore password
 * @return the output from the command keytool -list -v
 * @throws IOException if keytool was not configured or running keytool application failed
 */
public static String list(final File keystore,final String storePass) throws IOException {
  final File workingDir=keystore.getParentFile();
  final SystemCommand nativeCommand=new SystemCommand(workingDir,null);
  final List<String> arguments=new ArrayList<>();
  arguments.add(getKeyToolPath());
  arguments.add(-list);
  arguments.add(-v);
  arguments.add(-keystore);
  arguments.add(keystore.getName());
  arguments.add(-storepass);
  arguments.add(storePass);
  runNativeCommand(nativeCommand,arguments);
  return nativeCommand.getOutResult();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\exec\KeyToolUtils.java",336
1688,"'-tryline","/** 
 * @param nativeCommand {@link SystemCommand}
 * @param arguments {@link List}
 */
private static void runNativeCommand(SystemCommand nativeCommand,List<String> arguments) throws IOException {
  try {
    int exitVal=nativeCommand.run(arguments);
    if (exitVal != 0) {
      throw new IOException(Command failed, code:  + exitVal + \n+ nativeCommand.getOutResult());
    }
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    throw new IOException(Command was interrupted\n + nativeCommand.getOutResult(),e);
  }
catch (  TimeoutException e) {
    throw new IOException(Timeout reached while executing\n + nativeCommand.getOutResult(),e);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\exec\KeyToolUtils.java",364
1689,"'-tryline","/** 
 * Helper method to simplify chaining keytool commands.
 * @param command the command, not null
 * @param keystore the keystore, not null
 * @param password the password used for keystore and key, not null
 * @param alias the alias, not null
 * @param input where to source input, may be null
 * @param output where to send output, may be null
 * @param parameters additional parameters to the command, may be null
 * @throws IOException if keytool is not configured or running it failed
 */
private static void keytool(String command,File keystore,String password,String alias,InputStream input,OutputStream output,String... parameters) throws IOException {
  final File workingDir=keystore.getParentFile();
  final SystemCommand nativeCommand=new SystemCommand(workingDir,0L,0,null,input,output,null);
  final List<String> arguments=new ArrayList<>();
  arguments.add(getKeyToolPath());
  arguments.add(command);
  arguments.add(-keystore);
  arguments.add(keystore.getName());
  arguments.add(-storepass);
  arguments.add(password);
  arguments.add(-keypass);
  arguments.add(password);
  arguments.add(-alias);
  arguments.add(alias);
  Collections.addAll(arguments,parameters);
  runNativeCommand(nativeCommand,arguments);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\exec\KeyToolUtils.java",400
1690,"'-tryline","/** 
 * @return path to keytool binary
 * @throws IOException when  {@link KeyToolUtils#KEYTOOL_PATH KEYTOOL_PATH} is<code>null</code>
 */
private static String getKeyToolPath() throws IOException {
  if (KEYTOOL_PATH == null) {
    throw new IOException(keytool application cannot be found);
  }
  return KEYTOOL_PATH;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\exec\KeyToolUtils.java",451
1691,"'-tryline","/** 
 * @param is {@link InputStream}
 * @param os {@link OutputStream}
 * @throws IOException if something goes wrong
 */
StreamCopier(InputStream is,OutputStream os) throws IOException {
  this.is=is;
  this.os=os;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\exec\StreamCopier.java",39
1692,"'-tryline","/** 
 * @param env Environment variables appended to environment (may be null)
 * @param directory File working directory (may be null)
 * @param timeoutMillis timeout in Milliseconds
 * @param pollInterval Value used to poll for Process execution end
 * @param stdin File name that will contain data to be input to process (may be null)
 * @param stdout File name that will contain out stream (may be null)
 * @param stderr File name that will contain err stream (may be null)
 * @throws IOException if the input file is not found or output cannot be written
 */
public SystemCommand(File directory,long timeoutMillis,int pollInterval,Map<String,String> env,String stdin,String stdout,String stderr) throws IOException {
  this(directory,timeoutMillis,pollInterval,env,checkIn(stdin),checkOut(stdout),checkOut(stderr));
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\exec\SystemCommand.java",63
1693,"'-tryline","private static OutputStream checkOut(String path) throws IOException {
  String in=JOrphanUtils.nullifyIfEmptyTrimmed(path);
  if (in == null) {
    return null;
  }
 else {
    return new FileOutputStream(path);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\exec\SystemCommand.java",88
1694,"'-tryline","/** 
 * Runs the command with given arguments and returns its return code.
 * @param arguments List of strings, not null
 * @return return code
 * @throws InterruptedException when execution was interrupted
 * @throws IOException when I/O error occurs while execution
 * @throws TimeoutException when timeout is reached while execution
 */
public int run(List<String> arguments) throws InterruptedException, IOException, TimeoutException {
  return run(arguments,stdin,stdout,stderr);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\exec\SystemCommand.java",123
1695,"'-tryline","private int run(List<String> arguments,InputStream in,OutputStream out,OutputStream err) throws InterruptedException, IOException, TimeoutException {
  Process proc=null;
  final ProcessBuilder procBuild=new ProcessBuilder(arguments);
  if (env != null) {
    procBuild.environment().putAll(env);
  }
  this.executionEnvironment=Collections.unmodifiableMap(procBuild.environment());
  procBuild.directory(directory);
  if (err == null) {
    procBuild.redirectErrorStream(true);
  }
  try {
    proc=procBuild.start();
    final OutputStream procOut=proc.getOutputStream();
    final InputStream procErr=proc.getErrorStream();
    final InputStream procIn=proc.getInputStream();
    final StreamCopier swerr;
    if (err != null) {
      swerr=new StreamCopier(procErr,err);
      swerr.start();
    }
 else {
      swerr=null;
    }
    final StreamCopier swout=new StreamCopier(procIn,out);
    swout.start();
    final StreamCopier swin;
    if (in != null) {
      swin=new StreamCopier(in,procOut);
      swin.start();
    }
 else {
      swin=null;
      procOut.close();
    }
    int exitVal=waitForEndWithTimeout(proc,timeoutMillis);
    swout.join();
    if (swerr != null) {
      swerr.join();
    }
    if (swin != null) {
      swin.interrupt();
      swin.join();
    }
    procErr.close();
    procIn.close();
    procOut.close();
    return exitVal;
  }
  finally {
    if (proc != null) {
      try {
        proc.destroy();
      }
 catch (      Exception ignored) {
      }
    }
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\exec\SystemCommand.java",136
1696,"'-tryline","/** 
 * Pipe the output of one command into another
 * @param arguments1 first command to run
 * @param arguments2 second command to run
 * @return exit status
 * @throws InterruptedException when execution gets interrupted
 * @throws TimeoutException when timeout is reached while execution
 * @throws IOException when I/O error occurs while execution
 */
public int run(List<String> arguments1,List<String> arguments2) throws InterruptedException, IOException, TimeoutException {
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  int exitCode=run(arguments1,stdin,out,stderr);
  if (exitCode == 0) {
    exitCode=run(arguments2,new ByteArrayInputStream(out.toByteArray()),stdout,stderr);
  }
  return exitCode;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\exec\SystemCommand.java",200
1697,"'-tryline","/** 
 * Get pasted text from clipboard
 * @return String Pasted text
 * @throws UnsupportedFlavorException if the clipboard data can not be get as a  {@link String}
 * @throws IOException if the clipboard data is no longer available
 */
public static String getPastedText() throws UnsupportedFlavorException, IOException {
  Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();
  Transferable trans=clipboard.getContents(null);
  DataFlavor[] flavourList=trans.getTransferDataFlavors();
  Collection<DataFlavor> flavours=new ArrayList<>(flavourList.length);
  if (Collections.addAll(flavours,flavourList) && flavours.contains(DataFlavor.stringFlavor)) {
    return (String)trans.getTransferData(DataFlavor.stringFlavor);
  }
 else {
    return null;
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\gui\GuiUtils.java",144
1698,"'-tryline","/** 
 * Convenience method for {@link #findClassesThatExtend(String[],Class[],boolean)} with theoption to include inner classes in the search set to false.
 * @param paths        pathnames or jarfiles to search for classes
 * @param superClasses required parent class(es)
 * @return List of Strings containing discovered class names.
 * @throws IOException when scanning the classes fails
 */
public static List<String> findClassesThatExtend(String[] paths,Class<?>[] superClasses) throws IOException {
  return findClassesThatExtend(paths,superClasses,false);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\reflect\ClassFinder.java",170
1699,"'-tryline","/** 
 * Find classes in the provided path(s)/jar(s) that extend the class(es).
 * @param strPathsOrJars pathnames or jarfiles to search for classes
 * @param superClasses   required parent class(es)
 * @param innerClasses   should we include inner classes?
 * @return List containing discovered classes
 * @throws IOException when scanning for classes fails
 */
public static List<String> findClassesThatExtend(String[] strPathsOrJars,final Class<?>[] superClasses,final boolean innerClasses) throws IOException {
  return findClassesThatExtend(strPathsOrJars,superClasses,innerClasses,null,null);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\reflect\ClassFinder.java",201
1700,"'-tryline","/** 
 * Find classes in the provided path(s)/jar(s) that extend the class(es).
 * @param strPathsOrJars pathnames or jarfiles to search for classes
 * @param superClasses   required parent class(es)
 * @param innerClasses   should we include inner classes?
 * @param contains       classname should contain this string
 * @param notContains    classname should not contain this string
 * @return List containing discovered classes
 * @throws IOException when scanning classes fails
 */
public static List<String> findClassesThatExtend(String[] strPathsOrJars,final Class<?>[] superClasses,final boolean innerClasses,String contains,String notContains) throws IOException {
  return findClassesThatExtend(strPathsOrJars,superClasses,innerClasses,contains,notContains,false);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\reflect\ClassFinder.java",216
1701,"'-tryline","/** 
 * Find classes in the provided path(s)/jar(s) that extend the class(es).
 * @param strPathsOrJars pathnames or jarfiles to search for classes
 * @param annotations    required annotations
 * @param innerClasses   should we include inner classes?
 * @return List containing discovered classes
 * @throws IOException when scanning classes fails
 */
public static List<String> findAnnotatedClasses(String[] strPathsOrJars,final Class<? extends Annotation>[] annotations,final boolean innerClasses) throws IOException {
  return findClassesThatExtend(strPathsOrJars,annotations,innerClasses,null,null,true);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\reflect\ClassFinder.java",234
1702,"'-tryline","/** 
 * Find classes in the provided path(s)/jar(s) that extend the class(es). Inner classes are not searched.
 * @param strPathsOrJars pathnames or jarfiles to search for classes
 * @param annotations    required annotations
 * @return List containing discovered classes
 * @throws IOException when scanning classes fails
 */
public static List<String> findAnnotatedClasses(String[] strPathsOrJars,final Class<? extends Annotation>[] annotations) throws IOException {
  return findClassesThatExtend(strPathsOrJars,annotations,false,null,null,true);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\reflect\ClassFinder.java",249
1703,"'-tryline","/** 
 * Find classes in the provided path(s)/jar(s) that extend the class(es).
 * @param searchPathsOrJars pathnames or jarfiles to search for classes
 * @param classNames        required parent class(es) or annotations
 * @param innerClasses      should we include inner classes?
 * @param contains          classname should contain this string
 * @param notContains       classname should not contain this string
 * @param annotations       true if classnames are annotations
 * @return List containing discovered classes
 * @throws IOException when scanning classes fails
 */
public static List<String> findClassesThatExtend(String[] searchPathsOrJars,final Class<?>[] classNames,final boolean innerClasses,String contains,String notContains,boolean annotations) throws IOException {
  if (log.isDebugEnabled()) {
    log.debug(findClassesThatExtend with searchPathsOrJars : {}, superclass : {} +  innerClasses : {} annotations: {} contains: {}, notContains: {},Arrays.toString(searchPathsOrJars),Arrays.toString(classNames),innerClasses,annotations,contains,notContains);
  }
  ClassFilter filter;
  if (annotations) {
    @SuppressWarnings(unchecked) final Class<? extends Annotation>[] annoclassNames=(Class<? extends Annotation>[])classNames;
    filter=new AnnoClassFilter(annoclassNames,innerClasses);
  }
 else {
    filter=new ExtendsClassFilter(classNames,innerClasses,contains,notContains);
  }
  return findClasses(searchPathsOrJars,filter);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\reflect\ClassFinder.java",264
1704,"'-tryline","/** 
 * Find all classes in the given jars that passes the class filter.
 * @param searchPathsOrJars list of strings representing the jar locations
 * @param filter            {@link ClassFilter} that the classes in the jars shouldconform to
 * @return list of all classes in the jars, that conform to {@code filter}
 * @throws IOException when reading the jar files fails
 */
public static List<String> findClasses(String[] searchPathsOrJars,ClassFilter filter) throws IOException {
  if (log.isDebugEnabled()) {
    log.debug(findClasses with searchPathsOrJars : {} and classFilter : {},Arrays.toString(searchPathsOrJars),filter);
  }
  Collection<File> strPathsOrJars=addJarsInPath(searchPathsOrJars);
  Set<String> listClasses=new TreeSet<>();
  for (  File path : strPathsOrJars) {
    findClassesInOnePath(path,listClasses,filter);
  }
  if (log.isDebugEnabled()) {
    log.debug(listClasses.size()={},listClasses.size());
    for (    String clazz : listClasses) {
      log.debug(listClasses : {},clazz);
    }
  }
  return new ArrayList<>(listClasses);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\reflect\ClassFinder.java",302
1705,"'-tryline","private static void findClassesInOnePath(File file,Set<String> listClasses,ClassFilter filter) throws IOException {
  if (file.isDirectory()) {
    findClassesInPathsDir(file.getAbsolutePath(),file,listClasses,filter);
  }
 else   if (file.exists()) {
    try (ZipFile zipFile=new ZipFile(file);Stream<? extends ZipEntry> entries=zipFile.stream()){
      entries.filter(entry -> entry.getName().endsWith(DOT_CLASS)).forEach(entry -> {
        String fixedClassName=fixClassName(entry.getName());
        applyFiltering(listClasses,filter,fixedClassName);
      }
);
    }
 catch (    IOException e) {
      log.warn(Can not open the jar {}, message: {},file.getAbsolutePath(),e.getLocalizedMessage(),e);
    }
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\reflect\ClassFinder.java",355
1706,"'-tryline","private static void findClassesInPathsDir(String strPathElement,File dir,Set<String> listClasses,ClassFilter filter) throws IOException {
  File[] list=dir.listFiles();
  if (list == null) {
    log.warn({} is not a folder,dir.getAbsolutePath());
    return;
  }
  for (  File file : list) {
    if (file.isDirectory()) {
      findClassesInPathsDir(strPathElement,file,listClasses,filter);
    }
 else     if (file.getPath().endsWith(DOT_CLASS) && file.exists() && (file.length() != 0)) {
      final String path=file.getPath();
      String className=path.substring(strPathElement.length() + 1,path.lastIndexOf('.')).replace(File.separator.charAt(0),'.');
      applyFiltering(listClasses,filter,className);
    }
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\reflect\ClassFinder.java",374
1707,"'-tryline","/** 
 * Read as much as possible into buffer.
 * @param is     the stream to read from
 * @param buffer output buffer
 * @param offset offset into buffer
 * @param length number of bytes to read
 * @return the number of bytes actually read
 * @throws IOException if some I/O errors occur
 */
public static int read(InputStream is,byte[] buffer,int offset,int length) throws IOException {
  int remaining=length;
  while (remaining > 0) {
    int location=length - remaining;
    int count=is.read(buffer,location,remaining);
    if (-1 == count) {
      break;
    }
    remaining-=count;
  }
  return length - remaining;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\util\JOrphanUtils.java",463
1708,"'-tryline","/** 
 * Write data to an output stream in chunks with a maximum size of 4K. This is to avoid OutOfMemory issues if the data buffer is very large and the JVM needs to copy the buffer for use by native code.
 * @param data   the buffer to be written
 * @param output the output stream to use
 * @throws IOException if there is a problem writing the data
 */
public static void write(byte[] data,OutputStream output) throws IOException {
  int bytes=data.length;
  int offset=0;
  while (bytes > 0) {
    int chunk=Math.min(bytes,DEFAULT_CHUNK_SIZE);
    output.write(data,offset,chunk);
    bytes-=chunk;
    offset+=chunk;
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\util\JOrphanUtils.java",541
1709,"'-tryline","/** 
 * Write Thread Dump
 * @param writer {@link Writer}
 * @throws IOException if file cannot be written
 */
public static void writeThreadDump(Writer writer) throws IOException {
  ThreadMXBean threadMxBean=ManagementFactory.getThreadMXBean();
  for (  ThreadInfo ti : threadMxBean.dumpAllThreads(true,true)) {
    writer.write(ti.toString());
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\util\ThreadDumper.java",73
1710,"'-tryline","@BeforeAll public static void setup(@TempDir Path keystoreDir) throws IOException {
  keystore=keystoreDir.resolve(dummy-keystore.jks).toFile();
  password=JOrphanUtils.generateRandomAlphanumericPassword(32);
  KeyToolUtils.generateProxyCA(keystore,password,validity);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\test\java\org\apache\jorphan\exec\TestKeyToolUtils.java",43
1711,"'-tryline","public static void main(String[] args) throws IOException {
  int port=UDP_PORT_DEFAULT;
  if (args.length > 1) {
    port=Integer.parseInt(args[1]);
  }
 else   if (args.length == 0) {
    throw new RuntimeException(Usage: command [port]);
  }
  String command=args[0];
  System.out.println(Sending  + command +  request to port + port);
  try (DatagramSocket socket=new DatagramSocket()){
    byte[] buf=command.getBytes(ASCII);
    InetAddress address=InetAddress.getByName(localhost);
    DatagramPacket packet=new DatagramPacket(buf,buf.length,address,port);
    socket.send(packet);
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\launcher\src\main\java\org\apache\jmeter\util\ShutdownClient.java",31
1712,"'-tryline","private Map<String,Object> getParamsAsMap() throws IOException {
  if (getParams() != null && getParams().length() > 0) {
    return Holder.OBJECT_READER.readValue(getParams());
  }
 else {
    return Collections.emptyMap();
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\bolt\src\main\java\org\apache\jmeter\protocol\bolt\sampler\BoltSampler.java",135
1713,"'-tryline","/** 
 * Save the authentication data to a file.
 * @param authFile path of the file to save the authentication data to
 * @throws IOException when writing to the file fails
 */
public void save(String authFile) throws IOException {
  File file=new File(authFile);
  if (!file.isAbsolute()) {
    file=new File(System.getProperty(user.dir),authFile);
  }
  try (BufferedWriter fw=Files.newBufferedWriter(file.toPath());PrintWriter writer=new PrintWriter(fw)){
    writer.println(# JMeter generated Authorization file);
    for (int i=0; i < getAuthObjects().size(); i++) {
      Authorization auth=(Authorization)getAuthObjects().get(i).getObjectValue();
      writer.println(auth.toString());
    }
    writer.flush();
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\control\AuthManager.java",347
1714,"'-tryline","/** 
 * Add authentication data from a file.
 * @param authFile path to the file to read the authentication data from
 * @throws IOException when reading the data fails
 */
public void addFile(String authFile) throws IOException {
  File file=new File(authFile);
  if (!file.isAbsolute()) {
    file=new File(System.getProperty(user.dir) + File.separator + authFile);
  }
  if (!file.canRead()) {
    throw new IOException(The file you specified cannot be read.);
  }
  boolean ok=true;
  try (BufferedReader reader=Files.newBufferedReader(file.toPath(),Charset.defaultCharset())){
    String line;
    while ((line=reader.readLine()) != null) {
      try {
        if (line.startsWith(#) || JOrphanUtils.isBlank(line)) {
          continue;
        }
        String[] tokens=line.split(\t);
        if (tokens.length >= 3) {
          String url=tokens[0];
          String user=tokens[1];
          String pass=tokens[2];
          String domain;
          String realm;
          if (tokens.length > 3) {
            domain=tokens[3];
            realm=tokens[4];
          }
 else {
            domain=;
            realm=;
          }
          Mechanism mechanism;
          if (tokens.length > 5) {
            mechanism=Mechanism.valueOf(tokens[5]);
          }
 else {
            mechanism=Mechanism.BASIC;
          }
          Authorization auth=new Authorization(url,user,pass,domain,realm,mechanism);
          getAuthObjects().addItem(auth);
        }
      }
 catch (      NoSuchElementException e) {
        log.error(Error parsing auth line: '{}',line,e);
        ok=false;
      }
    }
  }
   if (!ok) {
    JMeterUtils.reportErrorToUser(One or more errors found when reading the Auth file - see the log file);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\control\AuthManager.java",371
1715,"'-tryline","/** 
 * Save the static cookie data to a file. <p> Cookies are only taken from the GUI - runtime cookies are not included.
 * @param authFile name of the file to store the cookies into. If the name is relative, the system property <code>user.dir</code> will be prepended
 * @throws IOException when writing to that file fails
 */
public void save(String authFile) throws IOException {
  File file=new File(authFile);
  if (!file.isAbsolute()) {
    file=new File(System.getProperty(user.dir) + File.separator + authFile);
  }
  try (PrintWriter writer=new PrintWriter(Files.newBufferedWriter(file.toPath()))){
    writer.println(# JMeter generated Cookie file);
    long now=System.currentTimeMillis();
    for (    JMeterProperty jMeterProperty : getCookies()) {
      Cookie cook=(Cookie)jMeterProperty.getObjectValue();
      final long expiresMillis=cook.getExpiresMillis();
      if (expiresMillis == 0 || expiresMillis > now) {
        writer.println(cookieToString(cook));
      }
    }
    writer.flush();
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\control\CookieManager.java",167
1716,"'-tryline","/** 
 * Add cookie data from a file.
 * @param cookieFile name of the file to read the cookies from. If the name is relative, the system property <code>user.dir</code> will be prepended
 * @throws IOException if reading the file fails
 */
public void addFile(String cookieFile) throws IOException {
  File file=new File(cookieFile);
  if (!file.isAbsolute()) {
    file=new File(System.getProperty(user.dir) + File.separator + cookieFile);
  }
  if (!file.canRead()) {
    throw new IOException(The file you specified cannot be read.);
  }
  String line;
  try (BufferedReader reader=Files.newBufferedReader(file.toPath())){
    final CollectionProperty cookies=getCookies();
    while ((line=reader.readLine()) != null) {
      try {
        if (line.startsWith(#) || JOrphanUtils.isBlank(line)) {
          continue;
        }
        String[] st=JOrphanUtils.split(line,TAB,false);
        final int _domain=0;
        final int _path=2;
        final int _secure=3;
        final int _expires=4;
        final int _name=5;
        final int _value=6;
        final int _fields=7;
        if (st.length != _fields) {
          throw new IOException(Expected  + _fields +  fields, found + st.length+  in + line);
        }
        if (st[_path].length() == 0) {
          st[_path]=/;
        }
        boolean secure=Boolean.parseBoolean(st[_secure]);
        long expires=Long.parseLong(st[_expires]);
        if (expires == Long.MAX_VALUE) {
          expires=0;
        }
        Cookie cookie=new Cookie(st[_name],st[_value],st[_domain],st[_path],secure,expires);
        cookies.addItem(cookie);
      }
 catch (      NumberFormatException e) {
        throw new IOException(Error parsing cookie line\n\t' + line + '\n\t+ e);
      }
    }
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\control\CookieManager.java",199
1717,"'-tryline","/** 
 * Save the header data to a file.
 * @param headFile name of the file to store headers into. If name is relative the system property <code>user.dir</code> will be prepended
 * @throws IOException if writing the headers fails
 */
public void save(String headFile) throws IOException {
  File file=new File(headFile);
  if (!file.isAbsolute()) {
    file=new File(System.getProperty(user.dir) + File.separator + headFile);
  }
  try (BufferedWriter fw=Files.newBufferedWriter(file.toPath());PrintWriter writer=new PrintWriter(fw)){
    writer.println(# JMeter generated Header file);
    final CollectionProperty hdrs=getHeaders();
    for (int i=0; i < hdrs.size(); i++) {
      final JMeterProperty hdr=hdrs.get(i);
      Header head=(Header)hdr.getObjectValue();
      writer.println(head.toString());
    }
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\control\HeaderManager.java",92
1718,"'-tryline","/** 
 * Add header data from a file.
 * @param headerFile name of the file to read headers from. If name is relative the system property <code>user.dir</code> will be prepended
 * @throws IOException if reading headers fails
 */
public void addFile(String headerFile) throws IOException {
  File file=new File(headerFile);
  if (!file.isAbsolute()) {
    file=new File(System.getProperty(user.dir) + File.separator + headerFile);
  }
  if (!file.canRead()) {
    throw new IOException(The file you specified cannot be read.);
  }
  try (BufferedReader reader=Files.newBufferedReader(file.toPath(),Charset.defaultCharset())){
    String line;
    while ((line=reader.readLine()) != null) {
      try {
        if (line.startsWith(#) || JOrphanUtils.isBlank(line)) {
          continue;
        }
        String[] st=JOrphanUtils.split(line,\t, );
        int name=0;
        int value=1;
        Header header=new Header(st[name],st[value]);
        getHeaders().addItem(header);
      }
 catch (      Exception e) {
        throw new IOException(Error parsing header line\n\t' + line + '\n\t+ e);
      }
    }
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\control\HeaderManager.java",119
1719,"'-tryline","@Override public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
  for (  Callback callback : callbacks) {
    if (callback instanceof NameCallback && username != null) {
      NameCallback nc=(NameCallback)callback;
      nc.setName(username);
    }
 else     if (callback instanceof PasswordCallback) {
      PasswordCallback pc=(PasswordCallback)callback;
      pc.setPassword(password.toCharArray());
    }
 else {
      throw new UnsupportedCallbackException(callback,Unrecognized Callback);
    }
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\control\KerberosManager.java",106
1720,"'-tryline","public List<String> readFromFile(String pathname) throws IOException {
  String encoding=StandardCharsets.UTF_8.name();
  File file=new File(pathname);
  return FileUtils.readLines(file,encoding);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\gui\action\ParseCurlCommandAction.java",809
1721,"'-tryline","/** 
 * Create a new Daemon with the specified port and target.
 * @param port the port to listen on.
 * @param target the target which will receive the generated JMeter test components.
 * @throws IOException if an I/O error occurs opening the socket
 * @throws IllegalArgumentException if <code>port</code> is outside the allowed range from <code>0</code> to <code>65535</code>
 * @throws SocketException when something is wrong on the underlying protocol layer
 */
public Daemon(int port,ProxyControl target) throws IOException {
  this(port,target,Proxy.class);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\Daemon.java",67
1722,"'-tryline","/** 
 * Create a new Daemon with the specified port and target, using the specified class to handle individual requests.
 * @param port the port to listen on.
 * @param target the target which will receive the generated JMeter test components.
 * @param proxyClass the proxy class to use to handle individual requests. This class must be the  {@link Proxy} class or a subclass.
 * @throws IOException if an I/O error occurs opening the socket
 * @throws IllegalArgumentException if <code>port</code> is outside the allowed range from <code>0</code> to <code>65535</code>
 * @throws SocketException when something is wrong on the underlying protocol layer
 */
public Daemon(int port,ProxyControl target,Class<? extends Proxy> proxyClass) throws IOException {
  super(HTTP Proxy Daemon);
  this.target=target;
  this.daemonPort=port;
  this.proxyClass=proxyClass;
  log.info(Creating Daemon Socket on port: {},daemonPort);
  mainSocket=new ServerSocket(daemonPort);
  mainSocket.setSoTimeout(ACCEPT_TIMEOUT);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\Daemon.java",83
1723,"'-tryline","/** 
 * Parses a http header from a stream.
 * @param in the stream to parse.
 * @return array of bytes from client.
 * @throws IOException when reading the input stream fails
 */
public byte[] parse(InputStream in) throws IOException {
  boolean inHeaders=true;
  int readLength=0;
  int dataLength=0;
  boolean firstLine=true;
  ByteArrayOutputStream clientRequest=new ByteArrayOutputStream();
  ByteArrayOutputStream line=new ByteArrayOutputStream();
  int x;
  while ((inHeaders || readLength < dataLength) && ((x=in.read()) != -1)) {
    line.write(x);
    clientRequest.write(x);
    if (firstLine && !CharUtils.isAscii((char)x)) {
      throw new IllegalArgumentException(Only ASCII supported in headers (perhaps SSL was used?));
    }
    if (inHeaders && (byte)x == (byte)'\n') {
      if (line.size() < 3) {
        inHeaders=false;
        firstLine=false;
      }
      final String reqLine=line.toString();
      if (firstLine) {
        parseFirstLine(reqLine);
        firstLine=false;
      }
 else {
        final int contentLen=parseLine(reqLine);
        if (contentLen > 0) {
          dataLength=contentLen;
        }
      }
      if (log.isDebugEnabled()) {
        log.debug(Client Request Line: '{}',reqLine.replaceFirst(\r\n$,CRLF));
      }
      line.reset();
    }
 else     if (!inHeaders) {
      readLength++;
    }
  }
  rawPostData=line.toByteArray();
  if (log.isDebugEnabled()) {
    log.debug(rawPostData in default JRE encoding: {}, Request: '{}',new String(rawPostData,Charset.defaultCharset()),clientRequest.toString().replaceAll(\r\n,CRLF));
  }
  return clientRequest.toByteArray();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\HttpRequestHdr.java",140
1724,"'-tryline","/** 
 * Return the key managers, wrapped to return a specific alias
 */
private KeyManager[] getWrappedKeyManagers(final String keyAlias) throws GeneralSecurityException, IOException {
  if (!keyStore.containsAlias(keyAlias)) {
    throw new IOException(Keystore does not contain alias  + keyAlias);
  }
  KeyManagerFactory kmf=KeyManagerFactory.getInstance(KEYMANAGERFACTORY);
  kmf.init(keyStore,keyPassword.toCharArray());
  final KeyManager[] keyManagers=kmf.getKeyManagers();
  final int keyManagerCount=keyManagers.length;
  final KeyManager[] wrappedKeyManagers=new KeyManager[keyManagerCount];
  for (int i=0; i < keyManagerCount; i++) {
    wrappedKeyManagers[i]=new ServerAliasKeyManager(keyManagers[i],keyAlias);
  }
  return wrappedKeyManagers;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\Proxy.java",420
1725,"'-tryline","/** 
 * Negotiate a SSL connection.
 * @param sock socket in
 * @param host
 * @return a new client socket over ssl
 * @throws IOException if negotiation failed
 */
private Socket startSSL(Socket sock,String host) throws IOException {
  SSLSocketFactory sslFactory=getSSLSocketFactory(host);
  SSLSocket secureSocket;
  if (sslFactory != null) {
    try {
      secureSocket=(SSLSocket)sslFactory.createSocket(sock,sock.getInetAddress().getHostName(),sock.getPort(),true);
      secureSocket.setUseClientMode(false);
      if (log.isDebugEnabled()) {
        log.debug({} SSL transaction ok with cipher: {},port,secureSocket.getSession().getCipherSuite());
      }
      return secureSocket;
    }
 catch (    IOException e) {
      log.error({} Error in SSL socket negotiation: ,port,e);
      throw e;
    }
  }
 else {
    log.warn({} Unable to negotiate SSL transaction, no keystore?,port);
    throw new IOException(Unable to negotiate SSL transaction, no keystore?);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\Proxy.java",440
1726,"'-tryline","/** 
 * Write output to the output stream, then flush and close the stream.
 * @param res the SampleResult to write
 * @param out the output stream to write to
 * @throws IOException if an IOException occurs while writing
 */
private void writeToClient(SampleResult res,OutputStream out) throws IOException {
  try {
    String responseHeaders=messageResponseHeaders(res);
    out.write(responseHeaders.getBytes(SampleResult.DEFAULT_HTTP_ENCODING));
    out.write(CRLF_BYTES);
    out.write(res.getResponseData());
    out.flush();
    log.debug({} Done writing to client,port);
  }
 catch (  IOException e) {
    log.error(,e);
    throw e;
  }
 finally {
    try {
      out.close();
    }
 catch (    Exception ex) {
      log.warn({} Error while closing socket,port,ex);
    }
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\Proxy.java",488
1727,"'-tryline","public void startProxy() throws IOException {
  try {
    initKeyStore();
  }
 catch (  GeneralSecurityException e) {
    log.error(Could not initialise key store,e);
    throw new IOException(Could not create keystore,e);
  }
catch (  IOException e) {
    log.error(Could not initialise key store,e);
    throw e;
  }
  sampleWorkerTimer=new javax.swing.Timer(200,this::putSamplesIntoModel);
  sampleWorkerTimer.start();
  notifyTestListenersOfStart();
  try {
    server=new Daemon(getPort(),this);
    if (getProxyPauseHTTPSample().isEmpty()) {
      sampleGap=JMeterUtils.getPropDefault(proxy.pause,5000);
    }
 else {
      sampleGap=Long.parseLong(getProxyPauseHTTPSample().trim());
    }
    server.start();
    if (GuiPackage.getInstance() != null) {
      GuiPackage.getInstance().register(server);
    }
  }
 catch (  IOException e) {
    log.error(Could not create HTTP(S) Test Script Recorder Proxy daemon,e);
    throw e;
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\ProxyControl.java",521
1728,"'-tryline","private void initKeyStore() throws IOException, GeneralSecurityException {
switch (KEYSTORE_MODE) {
case DYNAMIC_KEYSTORE:
    storePassword=getPassword();
  keyPassword=getPassword();
initDynamicKeyStore();
break;
case JMETER_KEYSTORE:
storePassword=getPassword();
keyPassword=getPassword();
initJMeterKeyStore();
break;
case USER_KEYSTORE:
storePassword=JMeterUtils.getPropDefault(proxy.cert.keystorepass,DEFAULT_PASSWORD);
keyPassword=JMeterUtils.getPropDefault(proxy.cert.keypassword,DEFAULT_PASSWORD);
log.info(HTTP(S) Test Script Recorder will use the keystore '{}' with the alias: '{}',CERT_PATH_ABS,CERT_ALIAS);
initUserKeyStore();
break;
case NONE:
throw new IOException(Cannot find keytool application and no keystore was provided);
default :
throw new IllegalStateException(Impossible case:  + KEYSTORE_MODE);
}
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\ProxyControl.java",1475
1729,"'-tryline","/** 
 * Initialise the dynamic domain keystore
 */
@SuppressWarnings(JdkObsolete) private void initDynamicKeyStore() throws IOException, GeneralSecurityException {
  if (storePassword != null) {
    try {
      keyStore=getKeyStore(storePassword.toCharArray());
      for (      String alias : KeyToolUtils.getCAaliases()) {
        X509Certificate caCert=(X509Certificate)keyStore.getCertificate(alias);
        if (caCert == null) {
          keyStore=null;
          break;
        }
 else {
          caCert.checkValidity(new Date(System.currentTimeMillis() + DateUtils.MILLIS_PER_DAY));
          log.info(Valid alias found for {},alias);
        }
      }
    }
 catch (    IOException e) {
      keyStore=null;
      if (e.getCause() instanceof UnrecoverableKeyException) {
        log.warn(Could not read key store {}; cause: {}, a new one will be created, ensure you install it in browser,e.getMessage(),e.getCause().getMessage(),e);
      }
 else {
        log.warn(Could not open/read key store {}, a new one will be created, ensure you install it in browser,e.getMessage(),e);
      }
    }
catch (    CertificateExpiredException e) {
      keyStore=null;
      log.warn(Existing ROOT Certificate has expired, a new one will be created, ensure you install it in browser, message: {},e.getMessage(),e);
    }
catch (    CertificateNotYetValidException e) {
      keyStore=null;
      log.warn(Existing ROOT Certificate is not yet valid, a new one will be created, ensure you install it in browser, message: {},e.getMessage(),e);
    }
catch (    GeneralSecurityException e) {
      keyStore=null;
      log.warn(Problem reading key store, a new one will be created, ensure you install it in browser, message: {},e.getMessage(),e);
    }
  }
  if (keyStore == null) {
    storePassword=JOrphanUtils.generateRandomAlphanumericPassword(20);
    keyPassword=storePassword;
    setPassword(storePassword);
    log.info(Creating HTTP(S) Test Script Recorder Root CA in {}, ensure you install certificate in your Browser for recording,CERT_PATH_ABS);
    KeyToolUtils.generateProxyCA(CERT_PATH,storePassword,CERT_VALIDITY);
    log.info(Created keystore in {},CERT_PATH_ABS);
    keyStore=getKeyStore(storePassword.toCharArray());
  }
  final String sslDomains=getSslDomains().trim();
  if (sslDomains.length() > 0) {
    final String[] domains=sslDomains.split(,);
    for (    String subject : domains) {
      if (isValid(subject)) {
        if (!keyStore.containsAlias(subject)) {
          log.info(Creating entry {} in {},subject,CERT_PATH_ABS);
          KeyToolUtils.generateHostCert(CERT_PATH,storePassword,subject,CERT_VALIDITY);
          keyStore=getKeyStore(storePassword.toCharArray());
        }
      }
 else {
        log.warn(Attempt to create an invalid domain certificate: {},subject);
      }
    }
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\ProxyControl.java",1522
1730,"'-tryline","KeyStore updateKeyStore(String port,String host) throws IOException, GeneralSecurityException {
synchronized (CERT_PATH) {
    if (!keyStore.containsAlias(host)) {
      log.info({} Creating entry {} in {},port,host,CERT_PATH_ABS);
      KeyToolUtils.generateHostCert(CERT_PATH,storePassword,host,CERT_VALIDITY);
    }
    keyStore=getKeyStore(storePassword.toCharArray());
  }
  return keyStore;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\ProxyControl.java",1607
1731,"'-tryline","/** 
 * Initialise the single key JMeter keystore (original behaviour)
 */
@SuppressWarnings(JdkObsolete) private void initJMeterKeyStore() throws IOException, GeneralSecurityException {
  if (storePassword != null) {
    try {
      keyStore=getKeyStore(storePassword.toCharArray());
      X509Certificate caCert=(X509Certificate)keyStore.getCertificate(JMETER_SERVER_ALIAS);
      caCert.checkValidity(new Date(System.currentTimeMillis() + DateUtils.MILLIS_PER_DAY));
    }
 catch (    Exception e) {
      keyStore=null;
      log.warn(Could not open expected file or certificate is not valid {} {},CERT_PATH_ABS,e.getMessage(),e);
    }
  }
  if (keyStore == null) {
    storePassword=JOrphanUtils.generateRandomAlphanumericPassword(20);
    keyPassword=storePassword;
    setPassword(storePassword);
    log.info(Generating standard keypair in {},CERT_PATH_ABS);
    if (!CERT_PATH.delete()) {
      log.warn(Could not delete {}, this could create issues, stop jmeter, ensure file is deleted and restart again,CERT_PATH.getAbsolutePath());
    }
    KeyToolUtils.genkeypair(CERT_PATH,JMETER_SERVER_ALIAS,storePassword,CERT_VALIDITY,null,null);
    keyStore=getKeyStore(storePassword.toCharArray());
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\ProxyControl.java",1618
1732,"'-tryline","private KeyStore getKeyStore(char[] password) throws GeneralSecurityException, IOException {
  try (InputStream in=new BufferedInputStream(new FileInputStream(CERT_PATH))){
    log.debug(Opened Keystore file: {},CERT_PATH_ABS);
    KeyStore ks=KeyStore.getInstance(KEYSTORE_TYPE);
    ks.load(in,password);
    log.debug(Loaded Keystore file: {},CERT_PATH_ABS);
    return ks;
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\ProxyControl.java",1650
1733,"'-tryline","private void setupConnection(URL url,String method,HTTPSampleResult res) throws IOException {
  String host=url.getHost();
  int port=url.getPort();
  if (port <= 0 || port == url.getDefaultPort()) {
    port=8009;
  }
  String scheme=url.getProtocol();
  if (channel == null || !host.equals(lastHost) || port != lastPort) {
    if (channel != null) {
      channel.close();
    }
    channel=new Socket(host,port);
    int timeout=JMeterUtils.getPropDefault(httpclient.timeout,0);
    if (timeout > 0) {
      channel.setSoTimeout(timeout);
    }
    localAddress=channel.getLocalAddress().getHostAddress();
    localName=channel.getLocalAddress().getHostName();
    lastHost=host;
    lastPort=port;
  }
  res.setURL(url);
  res.setHTTPMethod(method);
  outpos=4;
  setByte((byte)2);
  if (method.equals(HTTPConstants.POST)) {
    setByte((byte)4);
  }
 else {
    setByte((byte)2);
  }
  if (JMeterUtils.getPropDefault(httpclient.version,1.1).equals(1.0)) {
    setString(HTTP/1.0);
  }
 else {
    setString(HTTPConstants.HTTP_1_1);
  }
  setString(url.getPath());
  setString(localAddress);
  setString(localName);
  setString(host);
  setInt(url.getDefaultPort());
  setByte(HTTPConstants.PROTOCOL_HTTPS.equalsIgnoreCase(scheme) ? (byte)1 : (byte)0);
  setInt(getHeaderSize(method,url));
  String hdr=setConnectionHeaders(url,host,method);
  res.setRequestHeaders(hdr);
  res.setCookies(setConnectionCookies(url,getCookieManager()));
  String query=url.getQuery();
  if (query != null) {
    setByte((byte)0x05);
    setString(query);
  }
  setByte((byte)0xff);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\AjpSampler.java",147
1734,"'-tryline","private String setConnectionHeaders(URL url,String host,String method) throws IOException {
  HeaderManager headers=getHeaderManager();
  AuthManager auth=getAuthManager();
  StringBuilder hbuf=new StringBuilder();
  hbuf.append(Host).append(COLON_SPACE).append(host).append(NEWLINE);
  setInt(0xA00b);
  setString(host);
  if (headers != null) {
    for (    JMeterProperty jMeterProperty : headers.getHeaders()) {
      Header header=(Header)jMeterProperty.getObjectValue();
      String n=header.getName();
      String v=header.getValue();
      hbuf.append(n).append(COLON_SPACE).append(v).append(NEWLINE);
      int hc=translateHeader(n);
      if (hc > 0) {
        setInt(hc + AJP_HEADER_BASE);
      }
 else {
        setString(n);
      }
      setString(v);
    }
  }
  if (method.equals(HTTPConstants.POST)) {
    int cl=-1;
    HTTPFileArg[] hfa=getHTTPFiles();
    if (hfa.length > 0) {
      HTTPFileArg fa=hfa[0];
      String fn=fa.getPath();
      File input=new File(fn);
      cl=(int)input.length();
      if (body != null) {
        JOrphanUtils.closeQuietly(body);
        body=null;
      }
      body=new BufferedInputStream(new FileInputStream(input));
      setString(HTTPConstants.HEADER_CONTENT_DISPOSITION);
      setString(form-data; name=\ + encode(fa.getParamName()) + \; filename=\+ encode(fn)+ \);
      String mt=fa.getMimeType();
      hbuf.append(HTTPConstants.HEADER_CONTENT_TYPE).append(COLON_SPACE).append(mt).append(NEWLINE);
      setInt(0xA007);
      setString(mt);
    }
 else {
      hbuf.append(HTTPConstants.HEADER_CONTENT_TYPE).append(COLON_SPACE).append(HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED).append(NEWLINE);
      setInt(0xA007);
      setString(HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);
      StringBuilder sb=new StringBuilder();
      boolean first=true;
      for (      JMeterProperty arg : getArguments()) {
        if (first) {
          first=false;
        }
 else {
          sb.append('&');
        }
        sb.append(arg.getStringValue());
      }
      stringBody=sb.toString();
      @SuppressWarnings(DefaultCharset) byte[] sbody=stringBody.getBytes();
      cl=sbody.length;
      body=new ByteArrayInputStream(sbody);
    }
    hbuf.append(HTTPConstants.HEADER_CONTENT_LENGTH).append(COLON_SPACE).append(String.valueOf(cl)).append(NEWLINE);
    setInt(0xA008);
    setString(String.valueOf(cl));
  }
  if (auth != null) {
    String authHeader=auth.getAuthHeaderForURL(url);
    if (authHeader != null) {
      setInt(0xA005);
      setString(authHeader);
      hbuf.append(HTTPConstants.HEADER_AUTHORIZATION).append(COLON_SPACE).append(authHeader).append(NEWLINE);
    }
  }
  return hbuf.toString();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\AjpSampler.java",232
1735,"'-tryline","private void send() throws IOException {
  OutputStream os=channel.getOutputStream();
  int len=outpos;
  outpos=0;
  setInt(0x1234);
  setInt(len - 4);
  os.write(outbuf,0,len);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\AjpSampler.java",369
1736,"'-tryline","private void execute(String method,HTTPSampleResult res) throws IOException {
  send();
  if (method.equals(HTTPConstants.POST)) {
    res.setQueryString(stringBody);
    sendPostBody();
  }
  handshake(res);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\AjpSampler.java",378
1737,"'-tryline","private void handshake(HTTPSampleResult res) throws IOException {
  responseData.reset();
  int msg=getMessage();
  while (msg != 5) {
    if (msg == 3) {
      int len=getInt();
      responseData.write(inbuf,inpos,len);
    }
 else     if (msg == 4) {
      parseHeaders(res);
    }
 else     if (msg == 6) {
      setNextBodyChunk();
      send();
    }
    msg=getMessage();
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\AjpSampler.java",388
1738,"'-tryline","private void sendPostBody() throws IOException {
  setNextBodyChunk();
  send();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\AjpSampler.java",406
1739,"'-tryline","private void setNextBodyChunk() throws IOException {
  int nr=0;
  if (body != null) {
    int len=body.available();
    if (len < 0) {
      len=0;
    }
 else     if (len > MAX_SEND_SIZE) {
      len=MAX_SEND_SIZE;
    }
    outpos=4;
    if (len > 0) {
      nr=body.read(outbuf,outpos + 2,len);
    }
  }
 else {
    outpos=4;
  }
  setInt(nr);
  outpos+=nr;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\AjpSampler.java",411
1740,"'-tryline","private void parseHeaders(HTTPSampleResult res) throws IOException {
  int status=getInt();
  res.setResponseCode(Integer.toString(status));
  res.setSuccessful(200 <= status && status <= 399);
  String msg=getString();
  res.setResponseMessage(msg);
  int nh=getInt();
  StringBuilder sb=new StringBuilder();
  sb.append(HTTPConstants.HTTP_1_1).append(status).append( ).append(msg).append(NEWLINE);
  for (int i=0; i < nh; i++) {
    String name;
    int thn=peekInt();
    if ((thn & 0xff00) == AJP_HEADER_BASE) {
      name=HEADER_TRANS_ARRAY[(thn & 0xff) - 1];
      getInt();
    }
 else {
      name=getString();
    }
    String value=getString();
    if (HTTPConstants.HEADER_CONTENT_TYPE.equalsIgnoreCase(name)) {
      res.setContentType(value);
      res.setEncodingAndType(value);
    }
 else     if (HTTPConstants.HEADER_SET_COOKIE.equalsIgnoreCase(name)) {
      CookieManager cookies=getCookieManager();
      if (cookies != null) {
        cookies.addCookieFromHeader(value,res.getURL());
      }
    }
    sb.append(name).append(COLON_SPACE).append(value).append(NEWLINE);
  }
  res.setResponseHeaders(sb.toString());
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\AjpSampler.java",432
1741,"'-tryline","private int getMessage() throws IOException {
  InputStream is=channel.getInputStream();
  inpos=0;
  int nr=is.read(inbuf,inpos,4);
  if (nr != 4) {
    channel.close();
    channel=null;
    throw new IOException(Connection Closed:  + nr);
  }
  getInt();
  int len=getInt();
  int toRead=len;
  int cpos=inpos;
  while (toRead > 0) {
    nr=is.read(inbuf,cpos,toRead);
    cpos+=nr;
    toRead-=nr;
  }
  return getByte();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\AjpSampler.java",467
1742,"'-tryline","private String getString() throws IOException {
  int len=getInt();
  String s=new String(inbuf,inpos,len,iso-8859-1);
  inpos+=len + 1;
  return s;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\AjpSampler.java",504
1743,"'-tryline","/** 
 * @param wrapped the InputStream that should be wrapped
 * @param relax flag to enable relaxed mode
 * @throws IOException when super class throws an IOException
 */
public LaxDeflateInputStream(InputStream wrapped,boolean relax) throws IOException {
  super(wrapped);
  this.relax=relax;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\hc\LaxDeflateInputStream.java",37
1744,"'-tryline","@Override public int read(byte[] b,int off,int len) throws IOException {
  try {
    return super.read(b,off,len);
  }
 catch (  final EOFException ex) {
    return handleRelaxMode(ex,relax);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\hc\LaxDeflateInputStream.java",50
1745,"'-tryline","@Override public int read() throws IOException {
  try {
    return super.read();
  }
 catch (  final EOFException ex) {
    return handleRelaxMode(ex,relax);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\hc\LaxDeflateInputStream.java",59
1746,"'-tryline","@Override public int read(byte[] b) throws IOException {
  try {
    return super.read(b);
  }
 catch (  final EOFException ex) {
    return handleRelaxMode(ex,relax);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\hc\LaxDeflateInputStream.java",68
1747,"'-tryline","/** 
 * @param wrapped the InputStream that should be wrapped
 * @param relax flag to enable relaxed mode
 * @throws IOException when super class throws an IOException
 */
public LaxGZIPInputStream(InputStream wrapped,boolean relax) throws IOException {
  super(wrapped);
  this.relax=relax;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\hc\LaxGZIPInputStream.java",36
1748,"'-tryline","@Override public int read(byte[] b,int off,int len) throws IOException {
  try {
    return super.read(b,off,len);
  }
 catch (  final EOFException ex) {
    return handleRelaxMode(ex,relax);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\hc\LaxGZIPInputStream.java",49
1749,"'-tryline","@Override public int read() throws IOException {
  try {
    return super.read();
  }
 catch (  final EOFException ex) {
    return handleRelaxMode(ex,relax);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\hc\LaxGZIPInputStream.java",58
1750,"'-tryline","@Override public int read(byte[] b) throws IOException {
  try {
    return super.read(b);
  }
 catch (  final EOFException ex) {
    return handleRelaxMode(ex,relax);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\hc\LaxGZIPInputStream.java",67
1751,"'-tryline","@Override public Socket createSocket(HttpContext paramHttpContext) throws IOException {
  return AdapteeHolder.getINSTANCE().createSocket(paramHttpContext);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\hc\LazyLayeredConnectionSocketFactory.java",82
1752,"'-tryline","@Override public Socket connectSocket(int paramInt,Socket paramSocket,HttpHost paramHttpHost,InetSocketAddress paramInetSocketAddress1,InetSocketAddress paramInetSocketAddress2,HttpContext paramHttpContext) throws IOException {
  return AdapteeHolder.getINSTANCE().connectSocket(paramInt,paramSocket,paramHttpHost,paramInetSocketAddress1,paramInetSocketAddress2,paramHttpContext);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\hc\LazyLayeredConnectionSocketFactory.java",87
1753,"'-tryline","@Override public Socket createLayeredSocket(Socket paramSocket,String paramString,int paramInt,HttpContext paramHttpContext) throws IOException {
  return AdapteeHolder.getINSTANCE().createLayeredSocket(paramSocket,paramString,paramInt,paramHttpContext);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\hc\LazyLayeredConnectionSocketFactory.java",96
1754,"'-tryline","/** 
 * Read response from the input stream, converting to MD5 digest if the useMD5 property is set. <p> For the MD5 case, the result byte count is set to the size of the original response. <p> Closes the inputStream <p> Invokes {@link HTTPSamplerBase#readResponse(SampleResult,InputStream,long)}
 * @param res sample to store information about the response into
 * @param instream input stream from which to read the response
 * @param responseContentLength expected input length or zero
 * @return the response or the MD5 of the response
 * @throws IOException if reading the result fails
 */
protected byte[] readResponse(SampleResult res,InputStream instream,int responseContentLength) throws IOException {
  return readResponse(res,instream,(long)responseContentLength);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPAbstractImpl.java",426
1755,"'-tryline","/** 
 * Read response from the input stream, converting to MD5 digest if the useMD5 property is set. <p> For the MD5 case, the result byte count is set to the size of the original response. <p> Closes the inputStream <p> Invokes {@link HTTPSamplerBase#readResponse(SampleResult,InputStream,long)}
 * @param res sample to store information about the response into
 * @param instream input stream from which to read the response
 * @param responseContentLength expected input length or zero
 * @return the response or the MD5 of the response
 * @throws IOException if reading the result fails
 */
protected byte[] readResponse(SampleResult res,InputStream instream,long responseContentLength) throws IOException {
  return testElement.readResponse(res,instream,responseContentLength);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPAbstractImpl.java",452
1756,"'-tryline","/** 
 * Read response from the input stream, converting to MD5 digest if the useMD5 property is set. <p> For the MD5 case, the result byte count is set to the size of the original response. <p> Closes the inputStream <p> Invokes  {@link HTTPSamplerBase#readResponse(SampleResult,InputStream,long)}
 * @param res sample to store information about the response into
 * @param in input stream from which to read the response
 * @param contentLength expected input length or zero
 * @return the response or the MD5 of the response
 * @throws IOException when reading the result fails
 * @deprecated use {@link HTTPAbstractImpl#readResponse(SampleResult,BufferedInputStream,long)}
 */
@Deprecated protected byte[] readResponse(SampleResult res,BufferedInputStream in,int contentLength) throws IOException {
  return testElement.readResponse(res,in,contentLength);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPAbstractImpl.java",479
1757,"'-tryline","/** 
 * Read response from the input stream, converting to MD5 digest if the useMD5 property is set. <p> For the MD5 case, the result byte count is set to the size of the original response. <p> Closes the inputStream <p> Invokes  {@link HTTPSamplerBase#readResponse(SampleResult,InputStream,long)}
 * @param res sample to store information about the response into
 * @param in input stream from which to read the response
 * @param contentLength expected input length or zero
 * @return the response or the MD5 of the response
 * @throws IOException when reading the result fails
 */
protected byte[] readResponse(SampleResult res,BufferedInputStream in,long contentLength) throws IOException {
  return testElement.readResponse(res,in,contentLength);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPAbstractImpl.java",507
1758,"'-tryline","@Override public void process(HttpRequest request,HttpContext context) throws HttpException, IOException {
  HttpClientContext localContext=HttpClientContext.adapt(context);
  AuthManager authManager=(AuthManager)localContext.getAttribute(CONTEXT_ATTRIBUTE_AUTH_MANAGER);
  if (authManager == null) {
    Credentials credentials=null;
    HttpClientKey key=(HttpClientKey)localContext.getAttribute(CONTEXT_ATTRIBUTE_CLIENT_KEY);
    AuthScope authScope=null;
    CredentialsProvider credentialsProvider=localContext.getCredentialsProvider();
    if (key.hasProxy && !StringUtils.isEmpty(key.proxyUser)) {
      authScope=new AuthScope(key.proxyHost,key.proxyPort);
      credentials=credentialsProvider.getCredentials(authScope);
    }
    credentialsProvider.clear();
    if (credentials != null) {
      credentialsProvider.setCredentials(authScope,credentials);
    }
    return;
  }
  URI requestURI=null;
  if (request instanceof HttpUriRequest) {
    requestURI=((HttpUriRequest)request).getURI();
  }
 else {
    try {
      requestURI=new URI(request.getRequestLine().getUri());
    }
 catch (    final URISyntaxException ignore) {
    }
  }
  if (requestURI != null) {
    HttpHost targetHost=(HttpHost)context.getAttribute(HttpCoreContext.HTTP_TARGET_HOST);
    URL url;
    if (requestURI.isAbsolute()) {
      url=requestURI.toURL();
    }
 else {
      url=new URL(targetHost.getSchemeName(),targetHost.getHostName(),targetHost.getPort(),requestURI.getPath());
    }
    Authorization authorization=authManager.getAuthForURL(url);
    CredentialsProvider credentialsProvider=localContext.getCredentialsProvider();
    if (authorization != null) {
      AuthCache authCache=localContext.getAuthCache();
      if (authCache == null) {
        authCache=new BasicAuthCache();
        localContext.setAuthCache(authCache);
      }
      authManager.setupCredentials(authorization,url,localContext,credentialsProvider,LOCALHOST);
      AuthState authState=(AuthState)context.getAttribute(HttpClientContext.TARGET_AUTH_STATE);
      if (authState.getAuthScheme() == null) {
        AuthScope authScope=new AuthScope(targetHost.getHostName(),targetHost.getPort(),authorization.getRealm(),targetHost.getSchemeName());
        Credentials creds=credentialsProvider.getCredentials(authScope);
        if (creds != null) {
          fillAuthCache(targetHost,authorization,authCache,authScope);
        }
      }
    }
 else {
      credentialsProvider.clear();
    }
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPHC4Impl.java",286
1759,"'-tryline","@Override public void connect(ManagedHttpClientConnection conn,HttpHost host,InetSocketAddress localAddress,int connectTimeout,SocketConfig socketConfig,HttpContext context) throws IOException {
  try {
    super.connect(conn,host,localAddress,connectTimeout,socketConfig,context);
  }
  finally {
    SampleResult sample=(SampleResult)context.getAttribute(HTTPHC4Impl.CONTEXT_ATTRIBUTE_SAMPLER_RESULT);
    if (sample != null) {
      sample.connectEnd();
    }
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPHC4Impl.java",400
1760,"'-tryline","@Override protected HttpResponse doSendRequest(final HttpRequest request,final HttpClientConnection conn,final HttpContext context) throws IOException, HttpException {
  HttpResponse response=super.doSendRequest(request,conn,context);
  HttpConnectionMetrics metrics=conn.getMetrics();
  long sentBytesCount=metrics.getSentBytesCount();
  context.setAttribute(CONTEXT_ATTRIBUTE_SENT_BYTES,metrics.getSentBytesCount());
  context.setAttribute(CONTEXT_ATTRIBUTE_METRICS,metrics);
  log.debug(Sent {} bytes,sentBytesCount);
  metrics.reset();
  return response;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPHC4Impl.java",453
1761,"'-tryline","@Override public void process(HttpResponse response,HttpContext context) throws HttpException, IOException {
  ArrayList<Header[]> headersToSave=null;
  final HttpEntity entity=response.getEntity();
  final HttpClientContext clientContext=HttpClientContext.adapt(context);
  final RequestConfig requestConfig=clientContext.getRequestConfig();
  if (requestConfig.isContentCompressionEnabled() && entity != null && entity.getContentLength() != 0) {
    final Header ceheader=entity.getContentEncoding();
    if (ceheader != null) {
      headersToSave=new ArrayList<>(3);
      for (      String name : HEADERS_TO_SAVE) {
        Header[] hdr=response.getHeaders(name);
        headersToSave.add(hdr);
      }
    }
  }
  super.process(response,clientContext);
  if (headersToSave != null) {
    for (    Header[] headers : headersToSave) {
      for (      Header headerToRestore : headers) {
        if (response.containsHeader(headerToRestore.getName())) {
          break;
        }
        response.addHeader(headerToRestore);
      }
    }
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPHC4Impl.java",483
1762,"'-tryline","/** 
 * Setup Body of request if different from GET. Field HTTPSampleResult#queryString of result is modified in the 2 cases
 * @param method       String HTTP method
 * @param result       {@link HTTPSampleResult}
 * @param httpRequest  {@link HttpRequestBase}
 * @param localContext {@link HttpContext}
 * @throws IOException when posting data fails due to I/O
 */
protected void handleMethod(String method,HTTPSampleResult result,HttpRequestBase httpRequest,HttpContext localContext) throws IOException {
  if (httpRequest instanceof HttpEntityEnclosingRequestBase) {
    String entityBody=setupHttpEntityEnclosingRequestData((HttpEntityEnclosingRequestBase)httpRequest);
    result.setQueryString(entityBody);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPHC4Impl.java",872
1763,"'-tryline","/** 
 * Execute request either as is or under PrivilegedAction if a Subject is available for url
 * @param httpClient the {@link CloseableHttpClient} to be used to execute the httpRequest
 * @param httpRequest the {@link HttpRequest} to be executed
 * @param localContext th {@link HttpContext} to be used for execution
 * @param url the target url (will be used to look up a possible subject for the execution)
 * @return the result of the execution of the httpRequest
 * @throws IOException
 */
private CloseableHttpResponse executeRequest(final CloseableHttpClient httpClient,final HttpRequestBase httpRequest,final HttpContext localContext,final URL url) throws IOException {
  AuthManager authManager=getAuthManager();
  if (authManager != null) {
    Subject subject=authManager.getSubjectForUrl(url);
    if (subject != null) {
      try {
        return Subject.doAs(subject,(PrivilegedExceptionAction<CloseableHttpResponse>)() -> httpClient.execute(httpRequest,localContext));
      }
 catch (      PrivilegedActionException e) {
        log.error(Can't execute httpRequest with subject: {},subject,e);
        throw new IllegalArgumentException(Can't execute httpRequest with subject: + subject,e);
      }
    }
  }
  return httpClient.execute(httpRequest,localContext);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPHC4Impl.java",908
1764,"'-tryline","/** 
 * Setup following elements on httpRequest: <ul> <li>ConnRoutePNames.LOCAL_ADDRESS enabling IP-SPOOFING</li> <li>Socket and connection timeout</li> <li>Redirect handling</li> <li>Keep Alive header or Connection Close</li> <li>Calls setConnectionHeaders to setup headers</li> <li>Calls setConnectionCookie to setup Cookie</li> </ul>
 * @param url         {@link URL} of the request
 * @param httpRequest http request for the request
 * @param res         sample result to set cookies on
 * @throws IOException if hostname/ip to use could not be figured out
 */
protected void setupRequest(URL url,HttpRequestBase httpRequest,HTTPSampleResult res) throws IOException {
  RequestConfig.Builder rCB=RequestConfig.custom();
  final InetAddress inetAddr=getIpSourceAddress();
  if (inetAddr != null) {
    rCB.setLocalAddress(inetAddr);
  }
 else   if (localAddress != null) {
    rCB.setLocalAddress(localAddress);
  }
  int rto=getResponseTimeout();
  if (rto > 0) {
    rCB.setSocketTimeout(rto);
  }
  int cto=getConnectTimeout();
  if (cto > 0) {
    rCB.setConnectTimeout(cto);
  }
  rCB.setRedirectsEnabled(getAutoRedirects());
  rCB.setMaxRedirects(HTTPSamplerBase.MAX_REDIRECTS);
  httpRequest.setConfig(rCB.build());
  if (getUseKeepAlive()) {
    httpRequest.setHeader(HTTPConstants.HEADER_CONNECTION,HTTPConstants.KEEP_ALIVE);
  }
 else {
    httpRequest.setHeader(HTTPConstants.HEADER_CONNECTION,HTTPConstants.CONNECTION_CLOSE);
  }
  setConnectionHeaders(httpRequest,url,getHeaderManager(),getCacheManager());
  String cookies=setConnectionCookie(httpRequest,url,getCookieManager());
  if (res != null) {
    if (cookies != null && !cookies.isEmpty()) {
      res.setCookies(cookies);
    }
 else {
      res.setCookies(getOnlyCookieFromHeaders(httpRequest));
    }
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPHC4Impl.java",1253
1765,"'-tryline","@Override public void writeTo(final OutputStream out) throws IOException {
  if (hideFileData) {
    out.write(<actual file content, not shown here>.getBytes(StandardCharsets.UTF_8));
  }
 else {
    super.writeTo(out);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPHC4Impl.java",1508
1766,"'-tryline","/** 
 * @param entityEnclosingRequest {@link HttpEntityEnclosingRequestBase}
 * @return String body sent if computable
 * @throws IOException if sending the data fails due to I/O
 */
protected String setupHttpEntityEnclosingRequestData(HttpEntityEnclosingRequestBase entityEnclosingRequest) throws IOException {
  StringBuilder postedBody=new StringBuilder(1000);
  HTTPFileArg[] files=getHTTPFiles();
  final String contentEncoding=getContentEncodingOrNull();
  final boolean haveContentEncoding=contentEncoding != null;
  if (getUseMultipart()) {
    Charset charset;
    if (haveContentEncoding) {
      charset=Charset.forName(contentEncoding);
    }
 else {
      charset=MIME.DEFAULT_CHARSET;
    }
    if (log.isDebugEnabled()) {
      log.debug(Building multipart with:getDoBrowserCompatibleMultipart(): {}, with charset:{}, haveContentEncoding:{},getDoBrowserCompatibleMultipart(),charset,haveContentEncoding);
    }
    MultipartEntityBuilder multipartEntityBuilder=MultipartEntityBuilder.create();
    if (getDoBrowserCompatibleMultipart()) {
      multipartEntityBuilder.setLaxMode();
    }
 else {
      multipartEntityBuilder.setStrictMode();
    }
    for (    JMeterProperty jMeterProperty : getArguments()) {
      HTTPArgument arg=(HTTPArgument)jMeterProperty.getObjectValue();
      String parameterName=arg.getName();
      if (arg.isSkippable(parameterName)) {
        continue;
      }
      ContentType contentType;
      if (arg.getContentType().indexOf(';') >= 0) {
        contentType=ContentType.parse(arg.getContentType());
      }
 else {
        contentType=ContentType.create(arg.getContentType(),charset);
      }
      StringBody stringBody=new StringBody(arg.getValue(),contentType);
      FormBodyPart formPart=FormBodyPartBuilder.create(parameterName,stringBody).build();
      multipartEntityBuilder.addPart(formPart);
    }
    ViewableFileBody[] fileBodies=new ViewableFileBody[files.length];
    for (int i=0; i < files.length; i++) {
      HTTPFileArg file=files[i];
      File reservedFile=FileServer.getFileServer().getResolvedFile(file.getPath());
      fileBodies[i]=new ViewableFileBody(reservedFile,ContentType.parse(file.getMimeType()));
      multipartEntityBuilder.addPart(file.getParamName(),fileBodies[i]);
    }
    HttpEntity entity=multipartEntityBuilder.build();
    entityEnclosingRequest.setEntity(entity);
    writeEntityToSB(postedBody,entity,fileBodies,contentEncoding);
  }
 else {
    Header contentTypeHeader=entityEnclosingRequest.getFirstHeader(HTTPConstants.HEADER_CONTENT_TYPE);
    boolean hasContentTypeHeader=contentTypeHeader != null && contentTypeHeader.getValue() != null && contentTypeHeader.getValue().length() > 0;
    if (!hasArguments() && getSendFileAsPostBody()) {
      HTTPFileArg file=files[0];
      if (!hasContentTypeHeader) {
        if (file.getMimeType() != null && file.getMimeType().length() > 0) {
          entityEnclosingRequest.setHeader(HTTPConstants.HEADER_CONTENT_TYPE,file.getMimeType());
        }
 else         if (ADD_CONTENT_TYPE_TO_POST_IF_MISSING) {
          entityEnclosingRequest.setHeader(HTTPConstants.HEADER_CONTENT_TYPE,HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);
        }
      }
      FileEntity fileRequestEntity=new FileEntity(FileServer.getFileServer().getResolvedFile(file.getPath()),(ContentType)null);
      entityEnclosingRequest.setEntity(fileRequestEntity);
      postedBody.append(<actual file content, not shown here>);
    }
 else {
      if (getSendParameterValuesAsPostBody()) {
        if (!hasContentTypeHeader) {
          HTTPFileArg file=files.length > 0 ? files[0] : null;
          if (file != null && file.getMimeType() != null && file.getMimeType().length() > 0) {
            entityEnclosingRequest.setHeader(HTTPConstants.HEADER_CONTENT_TYPE,file.getMimeType());
          }
 else           if (ADD_CONTENT_TYPE_TO_POST_IF_MISSING) {
            entityEnclosingRequest.setHeader(HTTPConstants.HEADER_CONTENT_TYPE,HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);
          }
        }
        StringBuilder postBody=new StringBuilder();
        for (        JMeterProperty jMeterProperty : getArguments()) {
          HTTPArgument arg=(HTTPArgument)jMeterProperty.getObjectValue();
          if (haveContentEncoding) {
            postBody.append(arg.getEncodedValue(contentEncoding));
          }
 else {
            postBody.append(arg.getEncodedValue());
          }
        }
        StringEntity requestEntity=new StringEntity(postBody.toString(),contentEncoding);
        entityEnclosingRequest.setEntity(requestEntity);
        postedBody.append(postBody.toString());
      }
 else {
        if (!hasContentTypeHeader && ADD_CONTENT_TYPE_TO_POST_IF_MISSING) {
          entityEnclosingRequest.setHeader(HTTPConstants.HEADER_CONTENT_TYPE,HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);
        }
        String urlContentEncoding=contentEncoding;
        UrlEncodedFormEntity entity=createUrlEncodedFormEntity(urlContentEncoding);
        entityEnclosingRequest.setEntity(entity);
        writeEntityToSB(postedBody,entity,EMPTY_FILE_BODIES,contentEncoding);
      }
    }
  }
  return postedBody.toString();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPHC4Impl.java",1518
1767,"'-tryline","/** 
 * @param postedBody
 * @param entity
 * @param fileBodies Array of {@link ViewableFileBody}
 * @param contentEncoding
 * @throws IOException
 * @throws UnsupportedEncodingException
 */
private void writeEntityToSB(final StringBuilder postedBody,final HttpEntity entity,final ViewableFileBody[] fileBodies,final String contentEncoding) throws IOException {
  if (entity.isRepeatable()) {
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    for (    ViewableFileBody fileBody : fileBodies) {
      fileBody.hideFileData=true;
    }
    entity.writeTo(bos);
    for (    ViewableFileBody fileBody : fileBodies) {
      fileBody.hideFileData=false;
    }
    bos.flush();
    postedBody.append(bos.toString(contentEncoding == null ? SampleResult.DEFAULT_HTTP_ENCODING : contentEncoding));
    bos.close();
  }
 else {
    postedBody.append(<Entity was not repeatable, cannot view what was sent>);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPHC4Impl.java",1666
1768,"'-tryline","/** 
 * Creates the entity data to be sent. <p> If there is a file entry with a non-empty MIME type we use that to set the request Content-Type header, otherwise we default to whatever header is present from a Header Manager. <p> If the content charset  {@link #getContentEncoding()} is null or emptywe use the HC4 default provided by  {@link HTTP#DEF_CONTENT_CHARSET} which isISO-8859-1.
 * @param entity to be processed, e.g. PUT or PATCH
 * @return the entity content, may be empty
 * @throws UnsupportedEncodingException for invalid charset name
 * @throws IOException cannot really occur for ByteArrayOutputStream methods
 */
protected String sendEntityData(HttpEntityEnclosingRequestBase entity) throws IOException {
  boolean hasEntityBody=false;
  final HTTPFileArg[] files=getHTTPFiles();
  final HTTPFileArg file=files.length > 0 ? files[0] : null;
  String contentTypeValue;
  if (file != null && file.getMimeType() != null && file.getMimeType().length() > 0) {
    contentTypeValue=file.getMimeType();
    entity.setHeader(HEADER_CONTENT_TYPE,contentTypeValue);
  }
  final String charset=getContentEncoding(HTTP.DEF_CONTENT_CHARSET.name());
  if (!hasArguments() && getSendFileAsPostBody()) {
    hasEntityBody=true;
    File reservedFile=FileServer.getFileServer().getResolvedFile(files[0].getPath());
    FileEntity fileRequestEntity=new FileEntity(reservedFile);
    entity.setEntity(fileRequestEntity);
  }
 else   if (getSendParameterValuesAsPostBody()) {
    hasEntityBody=true;
    Arguments arguments=getArguments();
    StringBuilder entityBodyContent=new StringBuilder(arguments.getArgumentCount() * 15);
    for (    JMeterProperty jMeterProperty : arguments) {
      HTTPArgument arg=(HTTPArgument)jMeterProperty.getObjectValue();
      if (charset != null) {
        entityBodyContent.append(arg.getEncodedValue(charset));
      }
 else {
        entityBodyContent.append(arg.getEncodedValue());
      }
    }
    StringEntity requestEntity=new StringEntity(entityBodyContent.toString(),charset);
    entity.setEntity(requestEntity);
  }
 else   if (hasArguments()) {
    hasEntityBody=true;
    entity.setEntity(createUrlEncodedFormEntity(getContentEncodingOrNull()));
  }
  if (hasEntityBody) {
    final HttpEntity entityEntry=entity.getEntity();
    StringBuilder entityBody=new StringBuilder(65);
    writeEntityToSB(entityBody,entityEntry,EMPTY_FILE_BODIES,charset);
    return entityBody.toString();
  }
  return ;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPHC4Impl.java",1697
1769,"'-tryline","/** 
 * Set request headers in preparation to opening a connection.
 * @param conn <code>URLConnection</code> to set headers on
 * @exception IOException if an I/O exception occurs
 */
protected void setPostHeaders(URLConnection conn) throws IOException {
  postOrPutWriter=new PostWriter();
  postOrPutWriter.setHeaders(conn,testElement);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPJavaImpl.java",83
1770,"'-tryline","private void setPutHeaders(URLConnection conn) throws IOException {
  postOrPutWriter=new PutWriter();
  postOrPutWriter.setHeaders(conn,testElement);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPJavaImpl.java",96
1771,"'-tryline","/** 
 * Send POST data from <code>Entry</code> to the open connection. This also handles sending data for PUT requests
 * @param connection <code>URLConnection</code> where POST data should be sent
 * @return a String show what was posted. Will not contain actual file upload content
 * @exception IOException if an I/O exception occurs
 */
protected String sendPostData(URLConnection connection) throws IOException {
  return postOrPutWriter.sendPostData(connection,testElement);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPJavaImpl.java",101
1772,"'-tryline","private String sendPutData(URLConnection connection) throws IOException {
  return postOrPutWriter.sendPostData(connection,testElement);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPJavaImpl.java",115
1773,"'-tryline","/** 
 * Returns an <code>HttpURLConnection</code> fully ready to attempt connection. This means it sets the request method (GET or POST), headers, cookies, and authorization for the URL request. <p> The request infos are saved into the sample result if one is provided.
 * @param u <code>URL</code> of the URL request
 * @param method GET, POST etc
 * @param res sample result to save request infos to
 * @return <code>HttpURLConnection</code> ready for .connect
 * @exception IOException if an I/O Exception occurs
 */
protected HttpURLConnection setupConnection(URL u,String method,HTTPSampleResult res) throws IOException {
  SSLManager sslmgr=null;
  if (HTTPConstants.PROTOCOL_HTTPS.equalsIgnoreCase(u.getProtocol())) {
    try {
      sslmgr=SSLManager.getInstance();
    }
 catch (    Exception e) {
      log.warn(Problem creating the SSLManager: ,e);
    }
  }
  final HttpURLConnection conn;
  final String proxyHost=getProxyHost();
  final int proxyPort=getProxyPortInt();
  if (proxyHost.length() > 0 && proxyPort > 0) {
    Proxy proxy=new Proxy(Proxy.Type.HTTP,new InetSocketAddress(proxyHost,proxyPort));
    conn=(HttpURLConnection)u.openConnection(proxy);
  }
 else {
    conn=(HttpURLConnection)u.openConnection();
  }
  conn.setInstanceFollowRedirects(getAutoRedirects());
  int cto=getConnectTimeout();
  if (cto > 0) {
    conn.setConnectTimeout(cto);
  }
  int rto=getResponseTimeout();
  if (rto > 0) {
    conn.setReadTimeout(rto);
  }
  if (HTTPConstants.PROTOCOL_HTTPS.equalsIgnoreCase(u.getProtocol())) {
    try {
      if (null != sslmgr) {
        sslmgr.setContext(conn);
      }
    }
 catch (    Exception e) {
      log.warn(Problem setting the SSLManager for the connection: ,e);
    }
  }
  if (getUseKeepAlive()) {
    conn.setRequestProperty(HTTPConstants.HEADER_CONNECTION,HTTPConstants.KEEP_ALIVE);
  }
 else {
    conn.setRequestProperty(HTTPConstants.HEADER_CONNECTION,HTTPConstants.CONNECTION_CLOSE);
  }
  conn.setRequestMethod(method);
  setConnectionHeaders(conn,u,getHeaderManager(),getCacheManager());
  String cookies=setConnectionCookie(conn,u,getCookieManager());
  Map<String,String> securityHeaders=setConnectionAuthorization(conn,u,getAuthManager());
  if (method.equals(HTTPConstants.POST)) {
    setPostHeaders(conn);
  }
 else   if (method.equals(HTTPConstants.PUT)) {
    setPutHeaders(conn);
  }
  if (res != null) {
    res.setRequestHeaders(getAllHeadersExceptCookie(conn,securityHeaders));
    if (cookies != null && !cookies.isEmpty()) {
      res.setCookies(cookies);
    }
 else {
      res.setCookies(getOnlyCookieFromHeaders(conn,securityHeaders));
    }
  }
  return conn;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPJavaImpl.java",119
1774,"'-tryline","/** 
 * Reads the response from the URL connection.
 * @param conn URL from which to read response
 * @param res {@link SampleResult} to read response into
 * @return response content
 * @exception IOException if an I/O exception occurs
 */
protected byte[] readResponse(HttpURLConnection conn,SampleResult res) throws IOException {
  BufferedInputStream in;
  final long contentLength=conn.getContentLength();
  if ((contentLength == 0) && OBEY_CONTENT_LENGTH) {
    log.info(Content-Length: 0, not reading http-body);
    res.setResponseHeaders(getResponseHeaders(conn));
    res.latencyEnd();
    return NULL_BA;
  }
  boolean gzipped=HTTPConstants.ENCODING_GZIP.equals(conn.getContentEncoding());
  CountingInputStream instream=null;
  try {
    instream=new CountingInputStream(conn.getInputStream());
    if (gzipped) {
      in=new BufferedInputStream(new GZIPInputStream(instream));
    }
 else {
      in=new BufferedInputStream(instream);
    }
  }
 catch (  IOException e) {
    if (!(e.getCause() instanceof FileNotFoundException)) {
      log.error(readResponse: {},e.toString());
      Throwable cause=e.getCause();
      if (cause != null) {
        log.error(Cause: {},cause.toString());
        if (cause instanceof Error) {
          throw (Error)cause;
        }
      }
    }
    InputStream errorStream=conn.getErrorStream();
    if (errorStream == null) {
      if (log.isInfoEnabled()) {
        log.info(Error Response Code: {}, Server sent no Errorpage,conn.getResponseCode());
      }
      res.setResponseHeaders(getResponseHeaders(conn));
      res.latencyEnd();
      return NULL_BA;
    }
    if (log.isInfoEnabled()) {
      log.info(Error Response Code: {},conn.getResponseCode());
    }
    if (gzipped) {
      in=new BufferedInputStream(new GZIPInputStream(errorStream));
    }
 else {
      in=new BufferedInputStream(errorStream);
    }
  }
catch (  Exception e) {
    log.error(readResponse: {},e.toString());
    Throwable cause=e.getCause();
    if (cause != null) {
      log.error(Cause: {},cause.toString());
      if (cause instanceof Error) {
        throw (Error)cause;
      }
    }
    in=new BufferedInputStream(conn.getErrorStream());
  }
  byte[] responseData=readResponse(res,in,contentLength);
  if (instream != null) {
    res.setBodySize(instream.getByteCount());
    instream.close();
  }
  return responseData;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPJavaImpl.java",219
1775,"'-tryline","/** 
 * Read response from the input stream, converting to MD5 digest if the useMD5 property is set. <p> For the MD5 case, the result byte count is set to the size of the original response. <p> Closes the inputStream
 * @param sampleResult sample to store information about the response into
 * @param in input stream from which to read the response
 * @param length expected input length or zero
 * @return the response or the MD5 of the response
 * @throws IOException if reading the result fails
 */
public byte[] readResponse(SampleResult sampleResult,InputStream in,long length) throws IOException {
  OutputStream w=null;
  try (Closeable ignore=in){
    byte[] readBuffer=new byte[8192];
    int bufferSize=32;
    MessageDigest md=null;
    boolean knownResponseLength=length > 0;
    if (useMD5()) {
      try {
        md=MessageDigest.getInstance(MD5);
      }
 catch (      NoSuchAlgorithmException e) {
        log.error(Should not happen - could not find MD5 digest,e);
      }
    }
 else {
      if (!knownResponseLength) {
        bufferSize=4 * 1024;
      }
 else {
        bufferSize=(int)Math.min(MAX_BUFFER_SIZE,length);
      }
    }
    int bytesReadInBuffer=0;
    long totalBytes=0;
    boolean first=true;
    boolean storeInBOS=true;
    while ((bytesReadInBuffer=in.read(readBuffer)) > -1) {
      if (first) {
        sampleResult.latencyEnd();
        first=false;
        if (md == null) {
          if (!knownResponseLength) {
            w=new org.apache.commons.io.output.ByteArrayOutputStream(bufferSize);
          }
 else {
            w=new DirectAccessByteArrayOutputStream(bufferSize);
          }
        }
      }
      if (md == null) {
        if (storeInBOS) {
          if (MAX_BYTES_TO_STORE_PER_REQUEST <= 0 || (totalBytes + bytesReadInBuffer <= MAX_BYTES_TO_STORE_PER_REQUEST) || JMeterContextService.getContext().isRecording()) {
            w.write(readBuffer,0,bytesReadInBuffer);
          }
 else {
            log.debug(Big response, truncating it to {} bytes,MAX_BYTES_TO_STORE_PER_REQUEST);
            w.write(readBuffer,0,(int)(MAX_BYTES_TO_STORE_PER_REQUEST - totalBytes));
            storeInBOS=false;
          }
        }
      }
 else {
        md.update(readBuffer,0,bytesReadInBuffer);
      }
      totalBytes+=bytesReadInBuffer;
    }
    if (first) {
      sampleResult.latencyEnd();
      return new byte[0];
    }
    if (md == null) {
      return toByteArray(w);
    }
 else {
      byte[] md5Result=md.digest();
      sampleResult.setBytes(totalBytes);
      return JOrphanUtils.baToHexBytes(md5Result);
    }
  }
  finally {
    IOUtils.closeQuietly(w,null);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPSamplerBase.java",1895
1776,"'-tryline","/** 
 * Send POST data from Entry to the open connection.
 * @param connection the open connection to use for sending data
 * @param sampler sampler to get information about what to send
 * @return the post body sent. Actual file content is not returned, it isjust shown as a placeholder text actual file content
 * @throws IOException when writing data fails
 */
public String sendPostData(URLConnection connection,HTTPSamplerBase sampler) throws IOException {
  StringBuilder postedBody=new StringBuilder(1000);
  HTTPFileArg[] files=sampler.getHTTPFiles();
  String contentEncoding=sampler.getContentEncoding();
  if (contentEncoding == null || contentEncoding.length() == 0) {
    contentEncoding=ENCODING;
  }
  if (sampler.getUseMultipart()) {
    OutputStream out=connection.getOutputStream();
    out.write(formDataPostBody);
    postedBody.append(new String(formDataPostBody,contentEncoding));
    for (int i=0; i < files.length; i++) {
      HTTPFileArg file=files[i];
      final String headerValue=file.getHeader();
      byte[] header=headerValue.getBytes(ENCODING);
      out.write(header);
      postedBody.append(headerValue);
      writeFileToStream(file.getPath(),out);
      postedBody.append(<actual file content, not shown here>);
      byte[] fileMultipartEndDivider=getFileMultipartEndDivider();
      out.write(fileMultipartEndDivider);
      postedBody.append(new String(fileMultipartEndDivider,ENCODING));
      if (i + 1 < files.length) {
        out.write(CRLF);
        postedBody.append(new String(CRLF,SampleResult.DEFAULT_HTTP_ENCODING));
      }
    }
    byte[] multipartEndDivider=getMultipartEndDivider();
    out.write(multipartEndDivider);
    postedBody.append(new String(multipartEndDivider,ENCODING));
    out.flush();
    out.close();
  }
 else {
    if (sampler.getArguments() != null && !sampler.hasArguments() && sampler.getSendFileAsPostBody()) {
      OutputStream out=connection.getOutputStream();
      HTTPFileArg file=files[0];
      writeFileToStream(file.getPath(),out);
      out.flush();
      out.close();
      postedBody.append(<actual file content, not shown here>);
    }
 else     if (formDataUrlEncoded != null) {
      OutputStream out=connection.getOutputStream();
      out.write(formDataUrlEncoded);
      out.flush();
      out.close();
      postedBody.append(new String(formDataUrlEncoded,contentEncoding));
    }
  }
  return postedBody.toString();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\PostWriter.java",78
1777,"'-tryline","public void setHeaders(URLConnection connection,HTTPSamplerBase sampler) throws IOException {
  String contentEncoding=sampler.getContentEncoding();
  if (contentEncoding == null || contentEncoding.length() == 0) {
    contentEncoding=ENCODING;
  }
  long contentLength=0L;
  HTTPFileArg[] files=sampler.getHTTPFiles();
  if (sampler.getUseMultipart()) {
    connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE,HTTPConstants.MULTIPART_FORM_DATA + ; boundary= + getBoundary());
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    bos.write(getMultipartDivider());
    for (    JMeterProperty jMeterProperty : sampler.getArguments()) {
      HTTPArgument arg=(HTTPArgument)jMeterProperty.getObjectValue();
      String parameterName=arg.getName();
      if (arg.isSkippable(parameterName)) {
        continue;
      }
      bos.write(CRLF);
      writeFormMultipart(bos,parameterName,arg.getValue(),contentEncoding,sampler.getDoBrowserCompatibleMultipart());
    }
    if (files.length > 0) {
      bos.write(CRLF);
    }
    bos.flush();
    formDataPostBody=bos.toByteArray();
    bos.close();
    contentLength=formDataPostBody.length;
    for (int i=0; i < files.length; i++) {
      HTTPFileArg file=files[i];
      bos=new ByteArrayOutputStream();
      writeStartFileMultipart(bos,file.getPath(),file.getParamName(),file.getMimeType());
      bos.flush();
      String header=bos.toString(contentEncoding);
      file.setHeader(header);
      bos.close();
      contentLength+=header.length();
      File uploadFile=new File(file.getPath());
      contentLength+=uploadFile.length();
      contentLength+=getFileMultipartEndDivider().length;
      if (i + 1 < files.length) {
        contentLength+=CRLF.length;
      }
    }
    contentLength+=getMultipartEndDivider().length;
    connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_LENGTH,Long.toString(contentLength));
    connection.setDoOutput(true);
    connection.setDoInput(true);
  }
 else {
    String contentTypeHeader=connection.getRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE);
    boolean hasContentTypeHeader=contentTypeHeader != null && contentTypeHeader.length() > 0;
    if (sampler.getArguments() != null && sampler.getArguments().getArgumentCount() == 0 && sampler.getSendFileAsPostBody()) {
      HTTPFileArg file=files[0];
      if (!hasContentTypeHeader) {
        if (file.getMimeType() != null && file.getMimeType().length() > 0) {
          connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE,file.getMimeType());
        }
 else {
          if (HTTPAbstractImpl.ADD_CONTENT_TYPE_TO_POST_IF_MISSING) {
            connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE,HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);
          }
        }
      }
      File inputFile=new File(file.getPath());
      contentLength=inputFile.length();
    }
 else {
      ByteArrayOutputStream bos=new ByteArrayOutputStream();
      String postBody=null;
      if (!sampler.getSendParameterValuesAsPostBody()) {
        if (!hasContentTypeHeader && HTTPAbstractImpl.ADD_CONTENT_TYPE_TO_POST_IF_MISSING) {
          connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE,HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);
        }
        postBody=sampler.getQueryString(contentEncoding);
      }
 else {
        if (!hasContentTypeHeader) {
          HTTPFileArg file=files.length > 0 ? files[0] : null;
          if (file != null && file.getMimeType() != null && file.getMimeType().length() > 0) {
            connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE,file.getMimeType());
          }
 else {
            if (HTTPAbstractImpl.ADD_CONTENT_TYPE_TO_POST_IF_MISSING) {
              connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE,HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);
            }
          }
        }
        StringBuilder postBodyBuffer=new StringBuilder();
        for (        JMeterProperty jMeterProperty : sampler.getArguments()) {
          HTTPArgument arg=(HTTPArgument)jMeterProperty.getObjectValue();
          postBodyBuffer.append(arg.getEncodedValue(contentEncoding));
        }
        postBody=postBodyBuffer.toString();
      }
      bos.write(postBody.getBytes(contentEncoding));
      bos.flush();
      bos.close();
      formDataUrlEncoded=bos.toByteArray();
      contentLength=bos.toByteArray().length;
    }
    connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_LENGTH,Long.toString(contentLength));
    connection.setDoOutput(true);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\PostWriter.java",171
1778,"'-tryline","/** 
 * Get the bytes used to separate multiparts Encoded using ENCODING
 * @return the bytes used to separate multiparts
 * @throws IOException
 */
private byte[] getMultipartDivider() throws IOException {
  return (DASH_DASH + getBoundary()).getBytes(ENCODING);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\PostWriter.java",345
1779,"'-tryline","/** 
 * Get the bytes used to end a file multipart Encoded using ENCODING
 * @return the bytes used to end a file multipart
 * @throws IOException
 */
private byte[] getFileMultipartEndDivider() throws IOException {
  byte[] ending=getMultipartDivider();
  byte[] completeEnding=new byte[ending.length + CRLF.length];
  System.arraycopy(CRLF,0,completeEnding,0,CRLF.length);
  System.arraycopy(ending,0,completeEnding,CRLF.length,ending.length);
  return completeEnding;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\PostWriter.java",356
1780,"'-tryline","/** 
 * Write the start of a file multipart, up to the point where the actual file content should be written
 */
private void writeStartFileMultipart(OutputStream out,String filename,String nameField,String mimetype) throws IOException {
  write(out,Content-Disposition: form-data; name=\);
  write(out,nameField);
  write(out,\; filename=\);
  write(out,new File(filename).getName());
  writeln(out,\);
  writeln(out,Content-Type:  + mimetype);
  writeln(out,Content-Transfer-Encoding: binary);
  out.write(CRLF);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\PostWriter.java",384
1781,"'-tryline","/** 
 * Write the content of a file to the output stream
 * @param filename the filename of the file to write to the stream
 * @param out the stream to write to
 * @throws IOException
 */
private static void writeFileToStream(String filename,OutputStream out) throws IOException {
  byte[] buf=new byte[1024];
  int read;
  try (InputStream in=new BufferedInputStream(new FileInputStream(filename))){
    while ((read=in.read(buf)) > 0) {
      out.write(buf,0,read);
    }
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\PostWriter.java",401
1782,"'-tryline","/** 
 * Writes form data in multipart format.
 */
private void writeFormMultipart(OutputStream out,String name,String value,String charSet,boolean browserCompatibleMultipart) throws IOException {
  writeln(out,Content-Disposition: form-data; name=\ + name + \);
  if (!browserCompatibleMultipart) {
    writeln(out,Content-Type: text/plain; charset= + charSet);
    writeln(out,Content-Transfer-Encoding: 8bit);
  }
  out.write(CRLF);
  out.write(value.getBytes(charSet));
  out.write(CRLF);
  out.write(getMultipartDivider());
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\PostWriter.java",422
1783,"'-tryline","private void write(OutputStream out,String value) throws UnsupportedEncodingException, IOException {
  out.write(value.getBytes(ENCODING));
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\PostWriter.java",440
1784,"'-tryline","private void writeln(OutputStream out,String value) throws UnsupportedEncodingException, IOException {
  out.write(value.getBytes(ENCODING));
  out.write(CRLF);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\PostWriter.java",447
1785,"'-tryline","@Override public void setHeaders(URLConnection connection,HTTPSamplerBase sampler) throws IOException {
  String contentEncoding=sampler.getContentEncoding();
  if (contentEncoding == null || contentEncoding.length() == 0) {
    contentEncoding=ENCODING;
  }
  long contentLength=0L;
  boolean hasPutBody=false;
  String contentTypeHeader=connection.getRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE);
  boolean hasContentTypeHeader=contentTypeHeader != null && contentTypeHeader.length() > 0;
  HTTPFileArg[] files=sampler.getHTTPFiles();
  if (sampler.getArguments() != null && sampler.getArguments().getArgumentCount() == 0 && sampler.getSendFileAsPostBody()) {
    HTTPFileArg file=files[0];
    hasPutBody=true;
    if (!hasContentTypeHeader) {
      if (file.getMimeType().length() > 0) {
        connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE,file.getMimeType());
      }
    }
    File inputFile=new File(file.getPath());
    contentLength=inputFile.length();
  }
 else   if (sampler.getSendParameterValuesAsPostBody()) {
    hasPutBody=true;
    if (!hasContentTypeHeader && files.length == 1 && files[0].getMimeType().length() > 0) {
      connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE,files[0].getMimeType());
    }
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    StringBuilder putBodyBuffer=new StringBuilder();
    for (    JMeterProperty jMeterProperty : sampler.getArguments()) {
      HTTPArgument arg=(HTTPArgument)jMeterProperty.getObjectValue();
      putBodyBuffer.append(arg.getEncodedValue(contentEncoding));
    }
    bos.write(putBodyBuffer.toString().getBytes(contentEncoding));
    bos.flush();
    bos.close();
    formDataUrlEncoded=bos.toByteArray();
    contentLength=bos.toByteArray().length;
  }
  if (hasPutBody) {
    connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_LENGTH,Long.toString(contentLength));
    connection.setDoOutput(true);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\PutWriter.java",43
1786,"'-tryline","@SuppressWarnings(DefaultCharset) private static BufferedReader getReader(File file) throws IOException {
  if (!isGZIP(file)) {
    return new BufferedReader(new FileReader(file));
  }
  GZIPInputStream in=new GZIPInputStream(new FileInputStream(file));
  return new BufferedReader(new InputStreamReader(in));
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\util\accesslog\TCLogParser.java",199
1787,"'-tryline","private static boolean isGZIP(File file) throws IOException {
  try (FileInputStream in=new FileInputStream(file)){
    return in.read() == (GZIPInputStream.GZIP_MAGIC & 0xFF) && in.read() == (GZIPInputStream.GZIP_MAGIC >> 8);
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\util\accesslog\TCLogParser.java",208
1788,"'-tryline","private LoopbackHTTPSocket() throws IOException {
  os=new LoopbackOutputStream();
  os.write(HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\n\r\n.getBytes(SampleResult.DEFAULT_HTTP_ENCODING));
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\util\LoopbackHTTPSocket.java",67
1789,"'-tryline","public LoopbackHTTPSocket(String host,int port,InetAddress localAddress,int localPort,int timeout) throws IOException {
  this();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\util\LoopbackHTTPSocket.java",73
1790,"'-tryline","public LoopbackHTTPSocket(String host,int port,InetAddress localAddr,int localPort) throws IOException {
  this();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\util\LoopbackHTTPSocket.java",77
1791,"'-tryline","public LoopbackHTTPSocket(String host,int port) throws UnknownHostException, IOException {
  this();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\util\LoopbackHTTPSocket.java",81
1792,"'-tryline","@Override public OutputStream getOutputStream() throws IOException {
  return os;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\util\LoopbackHTTPSocket.java",86
1793,"'-tryline","@Override public InputStream getInputStream() throws IOException {
  return new LoopBackInputStream(os);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\util\LoopbackHTTPSocket.java",92
1794,"'-tryline","@Override public Socket createSocket(final HttpContext context) throws IOException {
  return new SlowSocket(charactersPerSecond);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\util\SlowHCPlainConnectionSocketFactory.java",44
1795,"'-tryline","@Test public void testDataReadFromFile() throws IOException {
  String encoding=StandardCharsets.UTF_8.name();
  FileUtils.writeStringToFile(tempFile,name=test + System.lineSeparator(),encoding,true);
  String pathname=tempFile.getAbsolutePath();
  String cmdLine=curl 'https://www.w3schools.com/html/tryit.asp?filename=tryhtml_form_submit/action_page.php'  + -H 'cache-control: no-cache' --data '@ + pathname + ' ;
  BasicCurlParser basicCurlParser=new BasicCurlParser();
  BasicCurlParser.Request request=basicCurlParser.parse(cmdLine);
  assertEquals(name=test,request.getPostData(),With method 'parser',the parameters need to reserve '\n' and '\r' );
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\curl\BasicCurlParserTest.java",333
1796,"'-tryline","@Test public void testDataUrlEncodeFromFile() throws IOException {
  String encoding=StandardCharsets.UTF_8.name();
  FileUtils.writeStringToFile(tempFile,test,encoding,true);
  String pathname=tempFile.getAbsolutePath();
  String cmdLine=curl 'https://www.w3schools.com/html/tryit.asp?filename=tryhtml_form_submit/action_page.php'  + -H 'cache-control: no-cache' --data-urlencode 'name@ + pathname + ' ;
  BasicCurlParser basicCurlParser=new BasicCurlParser();
  BasicCurlParser.Request request=basicCurlParser.parse(cmdLine);
  assertEquals(name=test,request.getPostData(),With method 'parser',the parameters in the file need to be encoded' );
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\curl\BasicCurlParserTest.java",387
1797,"'-tryline","@Test public void testDataUrlEncodeWith2AtSymbol() throws IOException {
  String encoding=StandardCharsets.UTF_8.name();
  FileUtils.writeStringToFile(tempFile,test@,encoding,true);
  String pathname=tempFile.getAbsolutePath();
  String cmdLine=curl 'https://www.w3schools.com/html/tryit.asp?filename=tryhtml_form_submit/action_page.php'  + -H 'cache-control: no-cache' --data-urlencode 'name@ + pathname + ' ;
  BasicCurlParser basicCurlParser=new BasicCurlParser();
  BasicCurlParser.Request request=basicCurlParser.parse(cmdLine);
  assertEquals(name=test%40,request.getPostData(),With method 'parser',the parameters in the file need to be encoded');
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\curl\BasicCurlParserTest.java",400
1798,"'-tryline","@Test public void testDataBinaryReadFromFile() throws IOException {
  String encoding=StandardCharsets.UTF_8.name();
  FileUtils.writeStringToFile(tempFile,name=test + System.lineSeparator(),encoding,true);
  String pathname=tempFile.getAbsolutePath();
  String cmdLine=curl 'https://www.w3schools.com/html/tryit.asp?filename=tryhtml_form_submit/action_page.php'  + -H 'cache-control: no-cache' --data-binary '@ + pathname + ' ;
  BasicCurlParser basicCurlParser=new BasicCurlParser();
  BasicCurlParser.Request request=basicCurlParser.parse(cmdLine);
  assertEquals(name=test + System.lineSeparator(),request.getPostData(),With method 'parser',the parameters need to reserve '\n' and '\r');
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\curl\BasicCurlParserTest.java",413
1799,"'-tryline","@Test public void testCookieFromFile() throws IOException {
  String pathname=tempFile.getAbsolutePath();
  String cmdLine=curl -X POST  \https://api.imgur.com/3/upload\ -b ' + pathname + ';
  BasicCurlParser basicCurlParser=new BasicCurlParser();
  BasicCurlParser.Request request=basicCurlParser.parse(cmdLine);
  assertEquals(pathname,request.getFilepathCookie(),With method 'parser', the file of cookie should be uploaded in CookieManager);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\curl\BasicCurlParserTest.java",638
1800,"'-tryline","private String writeToTempFile(Path dir,String s) throws IOException {
  return Files.write(dir.resolve(test.txt),s.getBytes(StandardCharsets.UTF_8),StandardOpenOption.CREATE_NEW).toAbsolutePath().toString();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\gui\action\ParseCurlCommandActionTest.java",126
1801,"'-tryline","@Test public void testAddFileWithoutDomainAndRealmWithMechanism() throws IOException {
  File authFile=File.createTempFile(auth,.txt);
  Files.write(authFile.toPath(),http://example.com\tuser\tpassword\t\t\tBASIC_DIGEST.getBytes());
  AuthManager manager=new AuthManager();
  manager.addFile(authFile.getAbsolutePath());
  Authorization authForURL=manager.getAuthForURL(new URL(http://example.com));
  assertEquals(password,authForURL.getPass());
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestAuthManager.java",88
1802,"'-tryline","@Test public void testAddFileWithDomainAndRealmAndDefaultMechanism() throws IOException {
  File authFile=File.createTempFile(auth,.txt);
  Files.write(authFile.toPath(),http://example.com\tuser\tpassword\tdomain\tEXAMPLE.COM\tBASIC_DIGEST.getBytes());
  AuthManager manager=new AuthManager();
  manager.addFile(authFile.getAbsolutePath());
  Authorization authForURL=manager.getAuthForURL(new URL(http://example.com));
  assertEquals(password,authForURL.getPass());
  assertEquals(domain,authForURL.getDomain());
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestAuthManager.java",98
1803,"'-tryline","@Test public void testAddFileWithDomainAndRealmAndMechanism() throws IOException {
  File authFile=File.createTempFile(auth,.txt);
  Files.write(authFile.toPath(),http://example.com\tuser\tpassword\tdomain\tEXAMPLE.COM\tKERBEROS.getBytes());
  AuthManager manager=new AuthManager();
  manager.addFile(authFile.getAbsolutePath());
  Authorization authForURL=manager.getAuthForURL(new URL(http://example.com));
  assertEquals(password,authForURL.getPass());
  assertEquals(domain,authForURL.getDomain());
  assertEquals(AuthManager.Mechanism.KERBEROS,authForURL.getMechanism());
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestAuthManager.java",109
1804,"'-tryline","@Override public void connect() throws IOException {
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\control\TestCacheManagerUrlConnectionBase.java",42
1805,"'-tryline","public static void main(String[] args) throws IllegalUserActionException, IOException {
  JMeterUtils.setJMeterHome(./);
  JMeterUtils.loadJMeterProperties(JMeterUtils.getJMeterBinDir() + /jmeter.properties);
  JMeterUtils.initLocale();
  TestPlan testPlan=new TestPlan();
  ThreadGroup threadGroup=new ThreadGroup();
  ListedHashTree testPlanTree=new ListedHashTree();
  testPlanTree.add(testPlan);
  testPlanTree.add(threadGroup,testPlan);
  @SuppressWarnings(deprecation) JMeterTreeModel treeModel=new JMeterTreeModel(new Object());
  JMeterTreeNode root=(JMeterTreeNode)treeModel.getRoot();
  treeModel.addSubTree(testPlanTree,root);
  ProxyControl proxy=new ProxyControl();
  proxy.setNonGuiTreeModel(treeModel);
  proxy.setTarget(treeModel.getNodeOf(threadGroup));
  proxy.setPort(8282);
  treeModel.addComponent(proxy,(JMeterTreeNode)root.getChildAt(1));
  proxy.startProxy();
  HttpHost proxyHost=new HttpHost(localhost,8282);
  DefaultProxyRoutePlanner routePlanner=new DefaultProxyRoutePlanner(proxyHost);
  CloseableHttpClient httpclient=HttpClients.custom().setRoutePlanner(routePlanner).build();
  try {
    httpclient.execute(new HttpGet(http://example.invalid));
  }
 catch (  Exception e) {
  }
  proxy.stopProxy();
  try (ByteArrayOutputStream out=new ByteArrayOutputStream()){
    SaveService.saveTree(treeModel.getTestPlan(),out);
    out.close();
    System.out.println(out.toString());
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\proxy\NonGuiProxySample.java",38
1806,"'-tryline","private String createMultipartFormRequest(String url,String postBody,String contentEncoding,String boundary,String endOfLine) throws IOException {
  String postRequest=POST  + url +  HTTP/1.1+ endOfLine+ Content-type: + HTTPConstants.MULTIPART_FORM_DATA+ ; boundary=+ boundary+ endOfLine+ Content-length: + getBodyLength(postBody,contentEncoding)+ endOfLine+ endOfLine+ postBody;
  return postRequest;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\proxy\TestHttpRequestHdr.java",624
1807,"'-tryline","private void checkArgument(HTTPArgument arg,String expectedName,String expectedValue,String expectedEncodedValue,String contentEncoding,boolean expectedEncoded) throws IOException {
  assertEquals(expectedName,arg.getName());
  assertEquals(expectedValue,arg.getValue());
  if (contentEncoding != null && contentEncoding.length() > 0) {
    assertEquals(expectedEncodedValue,arg.getEncodedValue(contentEncoding));
  }
 else {
    assertEquals(expectedEncodedValue,arg.getEncodedValue(ISO-8859-1));
  }
  assertPrimitiveEquals(expectedEncoded,arg.isAlwaysEncoded());
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\proxy\TestHttpRequestHdr.java",662
1808,"'-tryline","private int getBodyLength(String postBody,String contentEncoding) throws IOException {
  if (contentEncoding != null && contentEncoding.length() > 0) {
    return postBody.getBytes(contentEncoding).length;
  }
 else {
    return postBody.getBytes().length;
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\proxy\TestHttpRequestHdr.java",681
1809,"'-tryline","@Test public void testSendPostData() throws IOException {
  sampler.setMethod(HTTPConstants.POST);
  setupFilepart(sampler);
  String titleValue=mytitle;
  String descriptionValue=mydescription;
  setupFormData(sampler,titleValue,descriptionValue);
  String contentEncoding=;
  sampler.setContentEncoding(contentEncoding);
  postWriter.setHeaders(connection,sampler);
  postWriter.sendPostData(connection,sampler);
  checkContentTypeMultipart(connection,PostWriter.BOUNDARY);
  byte[] expectedFormBody=createExpectedOutput(PostWriter.BOUNDARY,null,titleValue,descriptionValue,TEST_FILE_CONTENT);
  checkContentLength(connection,expectedFormBody.length);
  checkArraysHaveSameContent(expectedFormBody,connection.getOutputStreamContent());
  connection.disconnect();
  establishConnection();
  contentEncoding=ISO-8859-1;
  sampler.setContentEncoding(contentEncoding);
  postWriter.setHeaders(connection,sampler);
  postWriter.sendPostData(connection,sampler);
  checkContentTypeMultipart(connection,PostWriter.BOUNDARY);
  expectedFormBody=createExpectedOutput(PostWriter.BOUNDARY,contentEncoding,titleValue,descriptionValue,TEST_FILE_CONTENT);
  checkContentLength(connection,expectedFormBody.length);
  checkArraysHaveSameContent(expectedFormBody,connection.getOutputStreamContent());
  connection.disconnect();
  establishConnection();
  titleValue=mytitle\u0153\u20a1\u0115\u00c5;
  descriptionValue=mydescription\u0153\u20a1\u0115\u00c5;
  contentEncoding=UTF_8;
  sampler.setContentEncoding(contentEncoding);
  setupFormData(sampler,titleValue,descriptionValue);
  postWriter.setHeaders(connection,sampler);
  postWriter.sendPostData(connection,sampler);
  checkContentTypeMultipart(connection,PostWriter.BOUNDARY);
  expectedFormBody=createExpectedOutput(PostWriter.BOUNDARY,contentEncoding,titleValue,descriptionValue,TEST_FILE_CONTENT);
  checkContentLength(connection,expectedFormBody.length);
  checkArraysHaveSameContent(expectedFormBody,connection.getOutputStreamContent());
  connection.disconnect();
  establishConnection();
  contentEncoding=UTF_8;
  sampler.setContentEncoding(ISO-8859-1);
  postWriter.setHeaders(connection,sampler);
  postWriter.sendPostData(connection,sampler);
  checkContentTypeMultipart(connection,PostWriter.BOUNDARY);
  expectedFormBody=createExpectedOutput(PostWriter.BOUNDARY,contentEncoding,titleValue,descriptionValue,TEST_FILE_CONTENT);
  checkContentLength(connection,expectedFormBody.length);
  checkArraysHaveDifferentContent(expectedFormBody,connection.getOutputStreamContent());
  connection.disconnect();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\PostWriterTest.java",98
1810,"'-tryline","@Test public void testSendPostData_NoFilename() throws IOException {
  setupNoFilename(sampler);
  sampler.setMethod(HTTPConstants.POST);
  String titleValue=mytitle;
  String descriptionValue=mydescription;
  setupFormData(sampler,titleValue,descriptionValue);
  String contentEncoding=;
  sampler.setContentEncoding(contentEncoding);
  postWriter.setHeaders(connection,sampler);
  postWriter.sendPostData(connection,sampler);
  checkNoContentType(connection);
  byte[] expectedUrl=title=mytitle&description=mydescription.getBytes();
  checkContentLength(connection,expectedUrl.length);
  checkArraysHaveSameContent(expectedUrl,connection.getOutputStreamContent());
  expectedUrl=title=mytitle&description=mydescription.getBytes(UTF_8);
  checkContentLength(connection,expectedUrl.length);
  checkArraysHaveSameContent(expectedUrl,connection.getOutputStreamContent());
  connection.disconnect();
  establishConnection();
  contentEncoding=ISO-8859-1;
  sampler.setContentEncoding(contentEncoding);
  postWriter.setHeaders(connection,sampler);
  postWriter.sendPostData(connection,sampler);
  checkNoContentType(connection);
  expectedUrl=title=mytitle&description=mydescription.getBytes(contentEncoding);
  checkContentLength(connection,expectedUrl.length);
  checkArraysHaveSameContent(expectedUrl,connection.getOutputStreamContent());
  expectedUrl=title=mytitle&description=mydescription.getBytes(UTF_8);
  checkContentLength(connection,expectedUrl.length);
  checkArraysHaveSameContent(expectedUrl,connection.getOutputStreamContent());
  connection.disconnect();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\PostWriterTest.java",164
1811,"'-tryline","@Test public void testSendPostData_FileAsBody() throws IOException {
  sampler.setMethod(HTTPConstants.POST);
  setupFilepart(sampler,,temporaryFile,);
  postWriter.setHeaders(connection,sampler);
  postWriter.sendPostData(connection,sampler);
  checkContentLength(connection,TEST_FILE_CONTENT.length);
  checkArraysHaveSameContent(TEST_FILE_CONTENT,connection.getOutputStreamContent());
  connection.disconnect();
  String otherEncoding;
  final String fileEncoding=System.getProperty(file.encoding);
  log.info(file.encoding: {},fileEncoding);
  if (UTF_8.equalsIgnoreCase(fileEncoding) || UTF8.equalsIgnoreCase(fileEncoding)) {
    otherEncoding=ISO-8859-1;
  }
 else {
    otherEncoding=UTF_8;
  }
  log.info(Using other encoding: {},otherEncoding);
  establishConnection();
  sampler.setContentEncoding(otherEncoding);
  postWriter.setHeaders(connection,sampler);
  postWriter.sendPostData(connection,sampler);
  checkContentLength(connection,TEST_FILE_CONTENT.length);
  checkArraysHaveSameContent(TEST_FILE_CONTENT,connection.getOutputStreamContent());
  checkArraysHaveDifferentContent(new String(TEST_FILE_CONTENT).getBytes(otherEncoding),connection.getOutputStreamContent());
  setupFormData(sampler);
  establishConnection();
  sampler.setContentEncoding();
  postWriter.setHeaders(connection,sampler);
  postWriter.sendPostData(connection,sampler);
  checkNoContentType(connection);
  byte[] expectedUrl=title=mytitle&description=mydescription.getBytes();
  checkContentLength(connection,expectedUrl.length);
  checkArraysHaveSameContent(expectedUrl,connection.getOutputStreamContent());
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\PostWriterTest.java",208
1812,"'-tryline","@Test public void testSendFileData_Multipart() throws IOException {
  sampler.setMethod(HTTPConstants.POST);
  String fileField=upload;
  String mimeType=text/plain;
  File file=temporaryFile;
  byte[] fileContent=TEST_FILE_CONTENT;
  setupFilepart(sampler,fileField,file,mimeType);
  String contentEncoding=;
  sampler.setContentEncoding(contentEncoding);
  postWriter.setHeaders(connection,sampler);
  postWriter.sendPostData(connection,sampler);
  checkContentTypeMultipart(connection,PostWriter.BOUNDARY);
  byte[] expectedFormBody=createExpectedFilepartOutput(PostWriter.BOUNDARY,fileField,file,mimeType,fileContent,true,true);
  checkContentLength(connection,expectedFormBody.length);
  checkArraysHaveSameContent(expectedFormBody,connection.getOutputStreamContent());
  connection.disconnect();
  establishConnection();
  contentEncoding=ISO-8859-1;
  sampler.setContentEncoding(contentEncoding);
  postWriter.setHeaders(connection,sampler);
  postWriter.sendPostData(connection,sampler);
  checkContentTypeMultipart(connection,PostWriter.BOUNDARY);
  expectedFormBody=createExpectedFilepartOutput(PostWriter.BOUNDARY,fileField,file,mimeType,fileContent,true,true);
  checkContentLength(connection,expectedFormBody.length);
  checkArraysHaveSameContent(expectedFormBody,connection.getOutputStreamContent());
  connection.disconnect();
  establishConnection();
  fileField=some_file_field;
  mimeType=image/png;
  contentEncoding=UTF_8;
  sampler.setContentEncoding(contentEncoding);
  setupFilepart(sampler,fileField,file,mimeType);
  postWriter.setHeaders(connection,sampler);
  postWriter.sendPostData(connection,sampler);
  checkContentTypeMultipart(connection,PostWriter.BOUNDARY);
  expectedFormBody=createExpectedFilepartOutput(PostWriter.BOUNDARY,fileField,file,mimeType,fileContent,true,true);
  checkContentLength(connection,expectedFormBody.length);
  checkArraysHaveSameContent(expectedFormBody,connection.getOutputStreamContent());
  connection.disconnect();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\PostWriterTest.java",261
1813,"'-tryline","@Test public void testSendFormData_Multipart() throws IOException {
  sampler.setMethod(HTTPConstants.POST);
  String titleField=title;
  String titleValue=mytitle;
  String descriptionField=description;
  String descriptionValue=mydescription;
  setupFormData(sampler,titleValue,descriptionValue);
  sampler.setDoMultipart(true);
  String contentEncoding=;
  sampler.setContentEncoding(contentEncoding);
  postWriter.setHeaders(connection,sampler);
  postWriter.sendPostData(connection,sampler);
  checkContentTypeMultipart(connection,PostWriter.BOUNDARY);
  byte[] expectedFormBody=createExpectedFormdataOutput(PostWriter.BOUNDARY,null,titleField,titleValue,descriptionField,descriptionValue,true,true);
  checkContentLength(connection,expectedFormBody.length);
  checkArraysHaveSameContent(expectedFormBody,connection.getOutputStreamContent());
  connection.disconnect();
  establishConnection();
  contentEncoding=ISO-8859-1;
  sampler.setContentEncoding(contentEncoding);
  postWriter.setHeaders(connection,sampler);
  postWriter.sendPostData(connection,sampler);
  checkContentTypeMultipart(connection,PostWriter.BOUNDARY);
  expectedFormBody=createExpectedFormdataOutput(PostWriter.BOUNDARY,contentEncoding,titleField,titleValue,descriptionField,descriptionValue,true,true);
  checkContentLength(connection,expectedFormBody.length);
  checkArraysHaveSameContent(expectedFormBody,connection.getOutputStreamContent());
  connection.disconnect();
  establishConnection();
  titleValue=mytitle+123 456&yes;
  descriptionValue=mydescription and some spaces;
  contentEncoding=ISO-8859-1;
  sampler.setContentEncoding(contentEncoding);
  setupFormData(sampler,titleValue,descriptionValue);
  postWriter.setHeaders(connection,sampler);
  postWriter.sendPostData(connection,sampler);
  checkContentTypeMultipart(connection,PostWriter.BOUNDARY);
  expectedFormBody=createExpectedFormdataOutput(PostWriter.BOUNDARY,contentEncoding,titleField,titleValue,descriptionField,descriptionValue,true,true);
  checkContentLength(connection,expectedFormBody.length);
  checkArraysHaveSameContent(expectedFormBody,connection.getOutputStreamContent());
  connection.disconnect();
  establishConnection();
  titleValue=mytitle\u0153\u20a1\u0115\u00c5;
  descriptionValue=mydescription\u0153\u20a1\u0115\u00c5;
  contentEncoding=UTF_8;
  sampler.setContentEncoding(contentEncoding);
  setupFormData(sampler,titleValue,descriptionValue);
  postWriter.setHeaders(connection,sampler);
  postWriter.sendPostData(connection,sampler);
  checkContentTypeMultipart(connection,PostWriter.BOUNDARY);
  expectedFormBody=createExpectedFormdataOutput(PostWriter.BOUNDARY,contentEncoding,titleField,titleValue,descriptionField,descriptionValue,true,true);
  checkContentLength(connection,expectedFormBody.length);
  checkArraysHaveSameContent(expectedFormBody,connection.getOutputStreamContent());
  connection.disconnect();
  establishConnection();
  titleValue=mytitle\u0153+\u20a1 \u0115&yes\u00c5;
  descriptionValue=mydescription \u0153 \u20a1 \u0115 \u00c5;
  contentEncoding=UTF_8;
  sampler.setContentEncoding(contentEncoding);
  setupFormData(sampler,titleValue,descriptionValue);
  postWriter.setHeaders(connection,sampler);
  postWriter.sendPostData(connection,sampler);
  checkContentTypeMultipart(connection,PostWriter.BOUNDARY);
  expectedFormBody=createExpectedFormdataOutput(PostWriter.BOUNDARY,contentEncoding,titleField,titleValue,descriptionField,descriptionValue,true,true);
  checkContentLength(connection,expectedFormBody.length);
  checkArraysHaveSameContent(expectedFormBody,connection.getOutputStreamContent());
  connection.disconnect();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\PostWriterTest.java",316
1814,"'-tryline","@Test public void testSendFormData_Urlencoded() throws IOException {
  String titleValue=mytitle;
  String descriptionValue=mydescription;
  setupFormData(sampler,titleValue,descriptionValue);
  String contentEncoding=;
  sampler.setContentEncoding(contentEncoding);
  sampler.setMethod(HTTPConstants.POST);
  postWriter.setHeaders(connection,sampler);
  postWriter.sendPostData(connection,sampler);
  checkNoContentType(connection);
  byte[] expectedUrl=(title= + titleValue + &description=+ descriptionValue).getBytes(US-ASCII);
  checkContentLength(connection,expectedUrl.length);
  checkArraysHaveSameContent(expectedUrl,connection.getOutputStreamContent());
  assertEquals(URLDecoder.decode(new String(expectedUrl,US-ASCII),ISO-8859-1),URLDecoder.decode(new String(connection.getOutputStreamContent(),US-ASCII),ISO-8859-1));
  connection.disconnect();
  establishConnection();
  contentEncoding=ISO-8859-1;
  sampler.setContentEncoding(contentEncoding);
  postWriter.setHeaders(connection,sampler);
  postWriter.sendPostData(connection,sampler);
  checkNoContentType(connection);
  expectedUrl=new StringBuilder(title=).append(titleValue).append(&description=).append(descriptionValue).toString().getBytes(US-ASCII);
  checkContentLength(connection,expectedUrl.length);
  checkArraysHaveSameContent(expectedUrl,connection.getOutputStreamContent());
  assertEquals(URLDecoder.decode(new String(expectedUrl,US-ASCII),contentEncoding),URLDecoder.decode(new String(connection.getOutputStreamContent(),US-ASCII),contentEncoding));
  connection.disconnect();
  establishConnection();
  titleValue=mytitle+123 456&yes;
  descriptionValue=mydescription and some spaces;
  contentEncoding=ISO-8859-1;
  sampler.setContentEncoding(contentEncoding);
  setupFormData(sampler,titleValue,descriptionValue);
  postWriter.setHeaders(connection,sampler);
  postWriter.sendPostData(connection,sampler);
  checkNoContentType(connection);
  String expectedString=title= + URLEncoder.encode(titleValue,contentEncoding) + &description=+ URLEncoder.encode(descriptionValue,contentEncoding);
  expectedUrl=expectedString.getBytes(contentEncoding);
  checkContentLength(connection,expectedUrl.length);
  checkArraysHaveSameContent(expectedUrl,connection.getOutputStreamContent());
  assertEquals(URLDecoder.decode(new String(expectedUrl,US-ASCII),contentEncoding),URLDecoder.decode(new String(connection.getOutputStreamContent(),US-ASCII),contentEncoding));
  String unencodedString=title= + titleValue + &description=+ descriptionValue;
  byte[] unexpectedUrl=unencodedString.getBytes(UTF_8);
  checkArraysHaveDifferentContent(unexpectedUrl,connection.getOutputStreamContent());
  connection.disconnect();
  establishConnection();
  titleValue=mytitle\u0153\u20a1\u0115\u00c5;
  descriptionValue=mydescription\u0153\u20a1\u0115\u00c5;
  contentEncoding=UTF_8;
  sampler.setContentEncoding(contentEncoding);
  setupFormData(sampler,titleValue,descriptionValue);
  postWriter.setHeaders(connection,sampler);
  postWriter.sendPostData(connection,sampler);
  checkNoContentType(connection);
  expectedString=title= + URLEncoder.encode(titleValue,contentEncoding) + &description=+ URLEncoder.encode(descriptionValue,contentEncoding);
  expectedUrl=expectedString.getBytes(US-ASCII);
  checkContentLength(connection,expectedUrl.length);
  checkArraysHaveSameContent(expectedUrl,connection.getOutputStreamContent());
  assertEquals(URLDecoder.decode(new String(expectedUrl,US-ASCII),contentEncoding),URLDecoder.decode(new String(connection.getOutputStreamContent(),US-ASCII),contentEncoding));
  connection.disconnect();
  establishConnection();
  titleValue=mytitle\u0153+\u20a1 \u0115&yes\u00c5;
  descriptionValue=mydescription \u0153 \u20a1 \u0115 \u00c5;
  contentEncoding=UTF_8;
  sampler.setContentEncoding(contentEncoding);
  setupFormData(sampler,titleValue,descriptionValue);
  postWriter.setHeaders(connection,sampler);
  postWriter.sendPostData(connection,sampler);
  checkNoContentType(connection);
  expectedString=title= + URLEncoder.encode(titleValue,UTF_8) + &description=+ URLEncoder.encode(descriptionValue,UTF_8);
  expectedUrl=expectedString.getBytes(US-ASCII);
  checkContentLength(connection,expectedUrl.length);
  checkArraysHaveSameContent(expectedUrl,connection.getOutputStreamContent());
  assertEquals(URLDecoder.decode(new String(expectedUrl,US-ASCII),contentEncoding),URLDecoder.decode(new String(connection.getOutputStreamContent(),US-ASCII),contentEncoding));
  unencodedString=title= + titleValue + &description=+ descriptionValue;
  unexpectedUrl=unencodedString.getBytes(US-ASCII);
  checkArraysHaveDifferentContent(unexpectedUrl,connection.getOutputStreamContent());
  connection.disconnect();
  titleValue=mytitle%20and%20space%2Ftest%C3%85;
  descriptionValue=mydescription+and+plus+as+space%2Ftest%C3%85;
  setupFormData(sampler,true,titleValue,descriptionValue);
  establishConnection();
  contentEncoding=;
  sampler.setContentEncoding(contentEncoding);
  postWriter.setHeaders(connection,sampler);
  postWriter.sendPostData(connection,sampler);
  checkNoContentType(connection);
  StringBuilder sb=new StringBuilder();
  expectedUrl=sb.append(title=).append(titleValue.replaceAll(%20,+).replaceAll(%C3%85,%C5)).append(&description=).append(descriptionValue.replaceAll(%C3%85,%C5)).toString().getBytes(US-ASCII);
  checkContentLength(connection,expectedUrl.length);
  checkArraysHaveSameContent(expectedUrl,connection.getOutputStreamContent());
  assertEquals(URLDecoder.decode(new String(expectedUrl,US-ASCII),ISO-8859-1),URLDecoder.decode(new String(connection.getOutputStreamContent(),US-ASCII),ISO-8859-1));
  connection.disconnect();
  establishConnection();
  contentEncoding=ISO-8859-1;
  sampler.setContentEncoding(contentEncoding);
  postWriter.setHeaders(connection,sampler);
  postWriter.sendPostData(connection,sampler);
  checkNoContentType(connection);
  sb=new StringBuilder();
  expectedUrl=sb.append(title=).append(titleValue.replaceAll(%20,+).replaceAll(%C3%85,%C5)).append(&description=).append(descriptionValue.replaceAll(%C3%85,%C5)).toString().getBytes(US-ASCII);
  checkContentLength(connection,expectedUrl.length);
  checkArraysHaveSameContent(expectedUrl,connection.getOutputStreamContent());
  assertEquals(URLDecoder.decode(new String(expectedUrl,US-ASCII),contentEncoding),URLDecoder.decode(new String(connection.getOutputStreamContent(),US-ASCII),contentEncoding));
  connection.disconnect();
  establishConnection();
  contentEncoding=UTF_8;
  sampler.setContentEncoding(contentEncoding);
  postWriter.setHeaders(connection,sampler);
  postWriter.sendPostData(connection,sampler);
  checkNoContentType(connection);
  sb=new StringBuilder();
  expectedUrl=sb.append(title=).append(titleValue.replaceAll(%20,+)).append(&description=).append(descriptionValue).toString().getBytes(US-ASCII);
  checkContentLength(connection,expectedUrl.length);
  checkArraysHaveSameContent(expectedUrl,connection.getOutputStreamContent());
  assertEquals(URLDecoder.decode(new String(expectedUrl,US-ASCII),contentEncoding),URLDecoder.decode(new String(connection.getOutputStreamContent(),US-ASCII),contentEncoding));
  connection.disconnect();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\PostWriterTest.java",416
1815,"'-tryline","@Test public void testSetHeaders() throws IOException {
  sampler.setMethod(HTTPConstants.POST);
  setupFilepart(sampler);
  setupFormData(sampler);
  postWriter.setHeaders(connection,sampler);
  checkContentTypeMultipart(connection,PostWriter.BOUNDARY);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\PostWriterTest.java",596
1816,"'-tryline","@Test public void testSetHeaders_NoFilename() throws IOException {
  sampler.setMethod(HTTPConstants.POST);
  setupNoFilename(sampler);
  setupFormData(sampler);
  postWriter.setHeaders(connection,sampler);
  checkNoContentType(connection);
  checkContentLength(connection,title=mytitle&description=mydescription.length());
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\PostWriterTest.java",609
1817,"'-tryline","/** 
 * Create the expected output post body for form data and file multiparts with default values for field names
 */
private byte[] createExpectedOutput(String boundaryString,String contentEncoding,String titleValue,String descriptionValue,byte[] fileContent) throws IOException {
  return createExpectedOutput(boundaryString,contentEncoding,title,titleValue,description,descriptionValue,upload,fileContent);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\PostWriterTest.java",655
1818,"'-tryline","/** 
 * Create the expected output post body for form data and file multiparts with specified values
 */
private byte[] createExpectedOutput(String boundaryString,String contentEncoding,String titleField,String titleValue,String descriptionField,String descriptionValue,String fileField,byte[] fileContent) throws IOException {
  byte[] formdataMultipart=createExpectedFormdataOutput(boundaryString,contentEncoding,titleField,titleValue,descriptionField,descriptionValue,true,false);
  byte[] fileMultipart=createExpectedFilepartOutput(boundaryString,fileField,temporaryFile,text/plain,fileContent,false,true);
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  output.write(formdataMultipart);
  output.write(fileMultipart);
  output.flush();
  output.close();
  return output.toByteArray();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\PostWriterTest.java",670
1819,"'-tryline","/** 
 * Create the expected output multipart/form-data, with only form data, and no file multipart
 * @param lastMultipart true if this is the last multipart in the request
 */
private byte[] createExpectedFormdataOutput(String boundaryString,String contentEncoding,String titleField,String titleValue,String descriptionField,String descriptionValue,boolean firstMultipart,boolean lastMultipart) throws IOException {
  final byte[] DASH_DASH=--.getBytes(HTTP_ENCODING);
  final String mimeType=text/plain;
  final ByteArrayOutputStream output=new ByteArrayOutputStream();
  if (firstMultipart) {
    output.write(DASH_DASH);
    output.write(boundaryString.getBytes(HTTP_ENCODING));
    output.write(CRLF);
  }
  output.write(Content-Disposition: form-data; name=\.getBytes(HTTP_ENCODING));
  output.write(titleField.getBytes(HTTP_ENCODING));
  output.write(\.getBytes(HTTP_ENCODING));
  output.write(CRLF);
  output.write(Content-Type: .getBytes(HTTP_ENCODING));
  output.write(mimeType.getBytes(HTTP_ENCODING));
  output.write(; charset=.getBytes(HTTP_ENCODING));
  output.write((contentEncoding == null ? PostWriter.ENCODING : contentEncoding).getBytes(HTTP_ENCODING));
  output.write(CRLF);
  output.write(Content-Transfer-Encoding: 8bit.getBytes(HTTP_ENCODING));
  output.write(CRLF);
  output.write(CRLF);
  if (contentEncoding != null) {
    output.write(titleValue.getBytes(contentEncoding));
  }
 else {
    output.write(titleValue.getBytes());
  }
  output.write(CRLF);
  output.write(DASH_DASH);
  output.write(boundaryString.getBytes(HTTP_ENCODING));
  output.write(CRLF);
  output.write(Content-Disposition: form-data; name=\.getBytes(HTTP_ENCODING));
  output.write(descriptionField.getBytes(HTTP_ENCODING));
  output.write(\.getBytes(HTTP_ENCODING));
  output.write(CRLF);
  output.write(Content-Type: .getBytes(HTTP_ENCODING));
  output.write(mimeType.getBytes(HTTP_ENCODING));
  output.write(; charset=.getBytes(HTTP_ENCODING));
  output.write((contentEncoding == null ? PostWriter.ENCODING : contentEncoding).getBytes(HTTP_ENCODING));
  output.write(CRLF);
  output.write(Content-Transfer-Encoding: 8bit.getBytes(HTTP_ENCODING));
  output.write(CRLF);
  output.write(CRLF);
  if (contentEncoding != null) {
    output.write(descriptionValue.getBytes(contentEncoding));
  }
 else {
    output.write(descriptionValue.getBytes());
  }
  output.write(CRLF);
  output.write(DASH_DASH);
  output.write(boundaryString.getBytes(HTTP_ENCODING));
  if (lastMultipart) {
    output.write(DASH_DASH);
  }
  output.write(CRLF);
  output.flush();
  output.close();
  return output.toByteArray();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\PostWriterTest.java",702
1820,"'-tryline","/** 
 * Create the expected file multipart
 * @param lastMultipart true if this is the last multipart in the request
 */
private byte[] createExpectedFilepartOutput(String boundaryString,String fileField,File file,String mimeType,byte[] fileContent,boolean firstMultipart,boolean lastMultipart) throws IOException {
  final String httpEncoding=ISO-8859-1;
  final byte[] DASH_DASH=--.getBytes(httpEncoding);
  final ByteArrayOutputStream output=new ByteArrayOutputStream();
  if (firstMultipart) {
    output.write(DASH_DASH);
    output.write(boundaryString.getBytes(httpEncoding));
    output.write(CRLF);
  }
  String filename=file.getName();
  output.write(Content-Disposition: form-data; name=\.getBytes(httpEncoding));
  output.write(fileField.getBytes(httpEncoding));
  output.write((\; filename=\ + filename + \).getBytes(httpEncoding));
  output.write(CRLF);
  output.write(Content-Type: .getBytes(httpEncoding));
  output.write(mimeType.getBytes(httpEncoding));
  output.write(CRLF);
  output.write(Content-Transfer-Encoding: binary.getBytes(httpEncoding));
  output.write(CRLF);
  output.write(CRLF);
  output.write(fileContent);
  output.write(CRLF);
  output.write(DASH_DASH);
  output.write(boundaryString.getBytes(httpEncoding));
  if (lastMultipart) {
    output.write(DASH_DASH);
  }
  output.write(CRLF);
  output.flush();
  output.close();
  return output.toByteArray();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\PostWriterTest.java",781
1821,"'-tryline","@Override public void connect() throws IOException {
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\PostWriterTest.java",907
1822,"'-tryline","@Override public OutputStream getOutputStream() throws IOException {
  return output;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\PostWriterTest.java",911
1823,"'-tryline","private void checkPostRequestUrlEncoded(HTTPSamplerBase sampler,HTTPSampleResult res,String samplerDefaultEncoding,String contentEncoding,String titleField,String titleValue,String descriptionField,String descriptionValue,boolean valuesAlreadyUrlEncoded) throws IOException {
  if (contentEncoding == null || contentEncoding.length() == 0) {
    contentEncoding=samplerDefaultEncoding;
  }
  assertEquals(sampler.getUrl(),res.getURL());
  String expectedPostBody=null;
  if (!valuesAlreadyUrlEncoded) {
    String expectedTitle=URLEncoder.encode(titleValue,contentEncoding);
    String expectedDescription=URLEncoder.encode(descriptionValue,contentEncoding);
    expectedPostBody=titleField + = + expectedTitle+ &+ descriptionField+ =+ expectedDescription;
  }
 else {
    expectedPostBody=titleField + = + titleValue+ &+ descriptionField+ =+ descriptionValue;
  }
  checkPostRequestBody(sampler,res,samplerDefaultEncoding,contentEncoding,expectedPostBody,HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",828
1824,"'-tryline","private void checkPostRequestFormMultipart(HTTPSamplerBase sampler,HTTPSampleResult res,String samplerDefaultEncoding,String contentEncoding,String titleField,String titleValue,String descriptionField,String descriptionValue) throws IOException {
  if (contentEncoding == null || contentEncoding.length() == 0) {
    contentEncoding=samplerDefaultEncoding;
  }
  assertEquals(sampler.getUrl(),res.getURL());
  String boundaryString=getBoundaryStringFromContentType(res.getRequestHeaders());
  assertNotNull(boundaryString);
  byte[] expectedPostBody=createExpectedFormDataOutput(boundaryString,contentEncoding,titleField,titleValue,descriptionField,descriptionValue,true);
  checkHeaderContentType(res.getRequestHeaders(),multipart/form-data + ; boundary= + boundaryString);
  checkArraysHaveSameContent(expectedPostBody,res.getQueryString().getBytes(contentEncoding),contentEncoding,res);
  String dataSentToMirrorServer=new String(res.getResponseData(),contentEncoding);
  int posDividerHeadersAndBody=getPositionOfBody(dataSentToMirrorServer);
  String headersSent=null;
  String bodySent=;
  if (posDividerHeadersAndBody >= 0) {
    headersSent=dataSentToMirrorServer.substring(0,posDividerHeadersAndBody);
    bodySent=dataSentToMirrorServer.substring(posDividerHeadersAndBody + 2);
  }
 else {
    fail(No header and body section found);
  }
  checkHeaderContentType(headersSent,multipart/form-data + ; boundary= + boundaryString);
  checkArraysHaveSameContent(expectedPostBody,bodySent.getBytes(contentEncoding),contentEncoding,res);
  checkMethodPathQuery(headersSent,sampler.getMethod(),sampler.getPath(),(String)null,res);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",861
1825,"'-tryline","private void checkPostRequestFileUpload(HTTPSamplerBase sampler,HTTPSampleResult res,String samplerDefaultEncoding,String contentEncoding,String titleField,String titleValue,String descriptionField,String descriptionValue,String fileField,File fileValue,String fileMimeType,byte[] fileContent) throws IOException {
  if (contentEncoding == null || contentEncoding.length() == 0) {
    contentEncoding=samplerDefaultEncoding;
  }
  assertEquals(sampler.getUrl(),res.getURL());
  String boundaryString=getBoundaryStringFromContentType(res.getRequestHeaders());
  assertNotNull(boundaryString);
  byte[] expectedPostBody=createExpectedFormAndUploadOutput(boundaryString,contentEncoding,titleField,titleValue,descriptionField,descriptionValue,fileField,fileValue,fileMimeType,fileContent);
  checkHeaderContentType(res.getRequestHeaders(),multipart/form-data + ; boundary= + boundaryString);
  String headersSent=getHeadersSent(res.getResponseData());
  if (headersSent == null) {
    fail(No header and body section found);
  }
  checkHeaderContentType(headersSent,multipart/form-data + ; boundary= + boundaryString);
  byte[] bodySent=getBodySent(res.getResponseData());
  assertNotNull(Sent body should not be null,bodySent);
  checkArraysHaveSameContent(expectedPostBody,bodySent,contentEncoding,res);
  checkMethodPathQuery(headersSent,sampler.getMethod(),sampler.getPath(),(String)null,res);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",906
1826,"'-tryline","private void checkPostRequestBody(HTTPSamplerBase sampler,HTTPSampleResult res,String samplerDefaultEncoding,String contentEncoding,String expectedPostBody,String expectedContentType) throws IOException {
  if (contentEncoding == null || contentEncoding.length() == 0) {
    contentEncoding=samplerDefaultEncoding;
  }
  assertEquals(sampler.getUrl(),res.getURL());
  if (sampler instanceof HTTPSampler) {
    checkHeaderContentType(res.getRequestHeaders(),null);
  }
 else {
    checkHeaderContentType(res.getRequestHeaders(),expectedContentType);
  }
  checkArraysHaveSameContent(expectedPostBody.getBytes(contentEncoding),res.getQueryString().getBytes(contentEncoding),contentEncoding,res);
  String dataSentToMirrorServer=new String(res.getResponseData(),contentEncoding);
  int posDividerHeadersAndBody=getPositionOfBody(dataSentToMirrorServer);
  String headersSent=null;
  String bodySent=;
  if (posDividerHeadersAndBody >= 0) {
    headersSent=dataSentToMirrorServer.substring(0,posDividerHeadersAndBody);
    bodySent=dataSentToMirrorServer.substring(posDividerHeadersAndBody + 2);
  }
 else {
    fail(No header and body section found);
  }
  if (sampler instanceof HTTPSampler) {
    checkHeaderContentType(res.getRequestHeaders(),null);
  }
 else {
    checkHeaderContentType(headersSent,expectedContentType);
  }
  checkArraysHaveSameContent(expectedPostBody.getBytes(contentEncoding),bodySent.getBytes(contentEncoding),contentEncoding,res);
  checkMethodPathQuery(headersSent,sampler.getMethod(),sampler.getPath(),(String)null,res);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",952
1827,"'-tryline","private void checkGetRequest(HTTPSamplerBase sampler,HTTPSampleResult res) throws IOException {
  assertEquals(sampler.getUrl(),res.getURL());
  assertEquals(sampler.getMethod(),res.getHTTPMethod());
  assertEquals(0,res.getQueryString().length());
  String dataSentToMirrorServer=new String(res.getResponseData(),EncoderCache.URL_ARGUMENT_ENCODING);
  int posDividerHeadersAndBody=getPositionOfBody(dataSentToMirrorServer);
  String headersSent=null;
  String bodySent=;
  if (posDividerHeadersAndBody >= 0) {
    headersSent=dataSentToMirrorServer.substring(0,posDividerHeadersAndBody);
    bodySent=dataSentToMirrorServer.substring(posDividerHeadersAndBody + 2);
  }
 else {
    fail(No header and body section found);
  }
  assertEquals(bodySent.length(),0);
  checkMethodPathQuery(headersSent,sampler.getMethod(),sampler.getPath(),(String)null,res);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",1001
1828,"'-tryline","private void checkGetRequest_Parameters(HTTPSamplerBase sampler,HTTPSampleResult res,String contentEncoding,URL executedUrl,String titleField,String titleValue,String descriptionField,String descriptionValue,boolean valuesAlreadyUrlEncoded) throws IOException {
  if (contentEncoding == null || contentEncoding.length() == 0) {
    contentEncoding=EncoderCache.URL_ARGUMENT_ENCODING;
  }
  assertEquals(executedUrl,res.getURL());
  assertEquals(sampler.getMethod(),res.getHTTPMethod());
  String expectedQueryString=null;
  if (!valuesAlreadyUrlEncoded) {
    String expectedTitle=URLEncoder.encode(titleValue,contentEncoding);
    String expectedDescription=URLEncoder.encode(descriptionValue,contentEncoding);
    expectedQueryString=titleField + = + expectedTitle+ &+ descriptionField+ =+ expectedDescription;
  }
 else {
    expectedQueryString=titleField + = + titleValue+ &+ descriptionField+ =+ descriptionValue;
  }
  String dataSentToMirrorServer=new String(res.getResponseData(),EncoderCache.URL_ARGUMENT_ENCODING);
  int posDividerHeadersAndBody=getPositionOfBody(dataSentToMirrorServer);
  String headersSent=null;
  String bodySent=;
  if (posDividerHeadersAndBody >= 0) {
    headersSent=dataSentToMirrorServer.substring(0,posDividerHeadersAndBody);
    bodySent=dataSentToMirrorServer.substring(posDividerHeadersAndBody + 2);
  }
 else {
    fail(No header and body section found in: [ + dataSentToMirrorServer + ]);
  }
  assertEquals(bodySent.length(),0);
  checkMethodPathQuery(headersSent,sampler.getMethod(),sampler.getPath(),expectedQueryString,res);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",1030
1829,"'-tryline","private void checkMethodPathQuery(String headersSent,String expectedMethod,String expectedPath,String expectedQueryString,HTTPSampleResult res) throws IOException {
  int indexFirstSpace=headersSent.indexOf(' ');
  int indexSecondSpace=headersSent.indexOf(' ',headersSent.length() > indexFirstSpace ? indexFirstSpace + 1 : indexFirstSpace);
  if (indexFirstSpace <= 0 && indexSecondSpace <= 0 || indexFirstSpace == indexSecondSpace) {
    fail(Could not find method and URI sent);
  }
  String methodSent=headersSent.substring(0,indexFirstSpace);
  assertEquals(expectedMethod,methodSent);
  String uriSent=headersSent.substring(indexFirstSpace + 1,indexSecondSpace);
  int indexQueryStart=uriSent.indexOf('?');
  if (expectedQueryString != null && expectedQueryString.length() > 0) {
    if (indexQueryStart <= 0 || indexQueryStart == uriSent.length() - 1) {
      fail(Could not find query string in URI);
    }
  }
 else {
    if (indexQueryStart > 0) {
      fail(Query string present in URI);
    }
 else {
      indexQueryStart=uriSent.length();
    }
  }
  String pathSent=uriSent.substring(0,indexQueryStart);
  assertEquals(expectedPath,pathSent);
  if (expectedQueryString != null && expectedQueryString.length() > 0) {
    String queryStringSent=uriSent.substring(indexQueryStart + 1);
    checkArraysHaveSameContent(expectedQueryString.getBytes(EncoderCache.URL_ARGUMENT_ENCODING),queryStringSent.getBytes(EncoderCache.URL_ARGUMENT_ENCODING),EncoderCache.URL_ARGUMENT_ENCODING,res);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",1077
1830,"'-tryline","private String getHeadersSent(byte[] responseData) throws IOException {
  String dataSentToMirrorServer=new String(responseData,StandardCharsets.ISO_8859_1);
  int posDividerHeadersAndBody=getPositionOfBody(dataSentToMirrorServer);
  String headersSent=null;
  if (posDividerHeadersAndBody >= 0) {
    headersSent=dataSentToMirrorServer.substring(0,posDividerHeadersAndBody);
  }
  return headersSent;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",1127
1831,"'-tryline","private byte[] getBodySent(byte[] responseData) throws IOException {
  byte[] bodySent=null;
  String headersSent=getHeadersSent(responseData);
  if (headersSent != null) {
    String contentLengthValue=getSentRequestHeaderValue(headersSent,HTTPConstants.HEADER_CONTENT_LENGTH);
    int contentLength=-1;
    if (contentLengthValue != null) {
      contentLength=Integer.parseInt(contentLengthValue);
    }
 else {
      fail(Did not receive any content-length header);
    }
    bodySent=new byte[contentLength];
    System.arraycopy(responseData,responseData.length - contentLength,bodySent,0,contentLength);
  }
  return bodySent;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",1139
1832,"'-tryline","/** 
 * Create the expected output multipart/form-data, with only form data, and no file multipart. This method is copied from the PostWriterTest class
 * @param lastMultipart true if this is the last multipart in the request
 */
private byte[] createExpectedFormDataOutput(String boundaryString,String contentEncoding,String titleField,String titleValue,String descriptionField,String descriptionValue,boolean lastMultipart) throws IOException {
  final byte[] DASH_DASH=--.getBytes(StandardCharsets.ISO_8859_1);
  final ByteArrayOutputStream output=new ByteArrayOutputStream();
  output.write(DASH_DASH);
  output.write(boundaryString.getBytes(StandardCharsets.ISO_8859_1));
  output.write(CRLF);
  output.write(Content-Disposition: form-data; name=\.getBytes(StandardCharsets.ISO_8859_1));
  output.write(titleField.getBytes(StandardCharsets.ISO_8859_1));
  output.write(\.getBytes(StandardCharsets.ISO_8859_1));
  output.write(CRLF);
  output.write(Content-Type: text/plain.getBytes(StandardCharsets.ISO_8859_1));
  if (contentEncoding != null) {
    output.write(; charset=.getBytes(StandardCharsets.ISO_8859_1));
    output.write(contentEncoding.getBytes(StandardCharsets.ISO_8859_1));
  }
  output.write(CRLF);
  output.write(Content-Transfer-Encoding: 8bit.getBytes(StandardCharsets.ISO_8859_1));
  output.write(CRLF);
  output.write(CRLF);
  if (contentEncoding != null) {
    output.write(titleValue.getBytes(contentEncoding));
  }
 else {
    output.write(titleValue.getBytes());
  }
  output.write(CRLF);
  output.write(DASH_DASH);
  output.write(boundaryString.getBytes(StandardCharsets.ISO_8859_1));
  output.write(CRLF);
  output.write(Content-Disposition: form-data; name=\.getBytes(StandardCharsets.ISO_8859_1));
  output.write(descriptionField.getBytes(StandardCharsets.ISO_8859_1));
  output.write(\.getBytes(StandardCharsets.ISO_8859_1));
  output.write(CRLF);
  output.write(Content-Type: text/plain.getBytes(StandardCharsets.ISO_8859_1));
  if (contentEncoding != null) {
    output.write(; charset=.getBytes(StandardCharsets.ISO_8859_1));
    output.write(contentEncoding.getBytes(StandardCharsets.ISO_8859_1));
  }
  output.write(CRLF);
  output.write(Content-Transfer-Encoding: 8bit.getBytes(StandardCharsets.ISO_8859_1));
  output.write(CRLF);
  output.write(CRLF);
  if (contentEncoding != null) {
    output.write(descriptionValue.getBytes(contentEncoding));
  }
 else {
    output.write(descriptionValue.getBytes());
  }
  output.write(CRLF);
  output.write(DASH_DASH);
  output.write(boundaryString.getBytes(StandardCharsets.ISO_8859_1));
  if (lastMultipart) {
    output.write(DASH_DASH);
  }
  output.write(CRLF);
  output.flush();
  output.close();
  return output.toByteArray();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",1336
1833,"'-tryline","private byte[] createExpectedFilepartOutput(String boundaryString,String fileField,File file,String mimeType,byte[] fileContent) throws IOException {
  final byte[] DASH_DASH=--.getBytes(StandardCharsets.ISO_8859_1);
  final ByteArrayOutputStream output=new ByteArrayOutputStream();
  String filename=file.getName();
  output.write(Content-Disposition: form-data; name=\.getBytes(StandardCharsets.ISO_8859_1));
  output.write(fileField.getBytes(StandardCharsets.ISO_8859_1));
  output.write((\; filename=\ + filename + \).getBytes(StandardCharsets.ISO_8859_1));
  output.write(CRLF);
  output.write(Content-Type: .getBytes(StandardCharsets.ISO_8859_1));
  output.write(mimeType.getBytes(StandardCharsets.ISO_8859_1));
  output.write(CRLF);
  output.write(Content-Transfer-Encoding: binary.getBytes(StandardCharsets.ISO_8859_1));
  output.write(CRLF);
  output.write(CRLF);
  output.write(fileContent);
  output.write(CRLF);
  output.write(DASH_DASH);
  output.write(boundaryString.getBytes(StandardCharsets.ISO_8859_1));
  output.write(DASH_DASH);
  output.write(CRLF);
  output.flush();
  output.close();
  return output.toByteArray();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",1415
1834,"'-tryline","/** 
 * Create the expected output post body for form data and file multi-parts with specified values, when request is multipart
 */
private byte[] createExpectedFormAndUploadOutput(String boundaryString,String contentEncoding,String titleField,String titleValue,String descriptionField,String descriptionValue,String fileField,File fileValue,String fileMimeType,byte[] fileContent) throws IOException {
  byte[] formdataMultipart=createExpectedFormDataOutput(boundaryString,contentEncoding,titleField,titleValue,descriptionField,descriptionValue,false);
  byte[] fileMultipart=createExpectedFilepartOutput(boundaryString,fileField,fileValue,fileMimeType,fileContent);
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  output.write(formdataMultipart);
  output.write(fileMultipart);
  output.flush();
  output.close();
  return output.toByteArray();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\sampler\TestHTTPSamplersAgainstHttpMirrorServer.java",1449
1835,"'-tryline","/** 
 * Execute the test element.
 * @param conn a {@link Connection}
 * @return the result of the execute command
 * @throws SQLException if a database error occurs
 * @throws IOException when I/O error occurs
 * @throws UnsupportedOperationException if the user provided incorrect query type
 */
protected byte[] execute(Connection conn) throws SQLException, IOException, UnsupportedOperationException {
  return execute(conn,new SampleResult());
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jdbc\src\main\java\org\apache\jmeter\protocol\jdbc\AbstractJDBCTestElement.java",140
1836,"'-tryline","/** 
 * Execute the test element. Use the sample given as argument to set time to first byte in the latency field of the SampleResult.
 * @param conn a {@link Connection}
 * @param sample a {@link SampleResult} to save the latency
 * @return the result of the execute command
 * @throws SQLException if a database error occurs
 * @throws IOException when I/O error occurs
 * @throws UnsupportedOperationException if the user provided incorrect query type
 */
protected byte[] execute(Connection conn,SampleResult sample) throws SQLException, IOException, UnsupportedOperationException {
  log.debug(executing jdbc:{},getQuery());
  String currentQueryType=getQueryType();
  if (SELECT.equals(currentQueryType)) {
    try (Statement stmt=conn.createStatement()){
      setQueryTimeout(stmt,getIntegerQueryTimeout());
      ResultSet rs=null;
      try {
        rs=stmt.executeQuery(getQuery());
        sample.latencyEnd();
        return getStringFromResultSet(rs).getBytes(ENCODING);
      }
  finally {
        close(rs);
      }
    }
   }
 else   if (CALLABLE.equals(currentQueryType)) {
    try (CallableStatement cstmt=getCallableStatement(conn)){
      int[] out=setArguments(cstmt);
      boolean hasResultSet=cstmt.execute();
      sample.latencyEnd();
      String sb=resultSetsToString(cstmt,hasResultSet,out);
      return sb.getBytes(ENCODING);
    }
   }
 else   if (UPDATE.equals(currentQueryType)) {
    try (Statement stmt=conn.createStatement()){
      setQueryTimeout(stmt,getIntegerQueryTimeout());
      stmt.executeUpdate(getQuery());
      sample.latencyEnd();
      int updateCount=stmt.getUpdateCount();
      String results=updateCount +  updates;
      return results.getBytes(ENCODING);
    }
   }
 else   if (PREPARED_SELECT.equals(currentQueryType)) {
    try (PreparedStatement pstmt=getPreparedStatement(conn)){
      setArguments(pstmt);
      ResultSet rs=null;
      try {
        rs=pstmt.executeQuery();
        sample.latencyEnd();
        return getStringFromResultSet(rs).getBytes(ENCODING);
      }
  finally {
        close(rs);
      }
    }
   }
 else   if (PREPARED_UPDATE.equals(currentQueryType)) {
    try (PreparedStatement pstmt=getPreparedStatement(conn)){
      setArguments(pstmt);
      pstmt.executeUpdate();
      sample.latencyEnd();
      String sb=resultSetsToString(pstmt,false,null);
      return sb.getBytes(ENCODING);
    }
   }
 else   if (ROLLBACK.equals(currentQueryType)) {
    conn.rollback();
    sample.latencyEnd();
    return ROLLBACK.getBytes(ENCODING);
  }
 else   if (COMMIT.equals(currentQueryType)) {
    conn.commit();
    sample.latencyEnd();
    return COMMIT.getBytes(ENCODING);
  }
 else   if (AUTOCOMMIT_FALSE.equals(currentQueryType)) {
    conn.setAutoCommit(false);
    sample.latencyEnd();
    return AUTOCOMMIT_FALSE.getBytes(ENCODING);
  }
 else   if (AUTOCOMMIT_TRUE.equals(currentQueryType)) {
    conn.setAutoCommit(true);
    sample.latencyEnd();
    return AUTOCOMMIT_TRUE.getBytes(ENCODING);
  }
 else {
    throw new UnsupportedOperationException(Unexpected query type:  + currentQueryType);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jdbc\src\main\java\org\apache\jmeter\protocol\jdbc\AbstractJDBCTestElement.java",153
1837,"'-tryline","private int[] setArguments(PreparedStatement pstmt) throws SQLException, IOException {
  if (getQueryArguments().trim().length() == 0) {
    return new int[]{};
  }
  String[] arguments=CSVSaveService.csvSplitString(getQueryArguments(),COMMA_CHAR);
  String[] argumentsTypes=getQueryArgumentsTypes().split(COMMA);
  if (arguments.length != argumentsTypes.length) {
    throw new SQLException(number of arguments ( + arguments.length + ) and number of types (+ argumentsTypes.length+ ) are not equal);
  }
  int[] outputs=new int[arguments.length];
  for (int i=0; i < arguments.length; i++) {
    String argument=arguments[i];
    String argumentType=argumentsTypes[i];
    String[] arg=argumentType.split( );
    String inputOutput=;
    if (arg.length > 1) {
      argumentType=arg[1];
      inputOutput=arg[0];
    }
    int targetSqlType=getJdbcType(argumentType);
    try {
      if (!OUT.equalsIgnoreCase(inputOutput)) {
        if (argument.equals(NULL_MARKER)) {
          pstmt.setNull(i + 1,targetSqlType);
        }
 else {
          setArgument(pstmt,argument,targetSqlType,i + 1);
        }
      }
      if (OUT.equalsIgnoreCase(inputOutput) || INOUT.equalsIgnoreCase(inputOutput)) {
        CallableStatement cs=(CallableStatement)pstmt;
        cs.registerOutParameter(i + 1,targetSqlType);
        outputs[i]=targetSqlType;
      }
 else {
        outputs[i]=java.sql.Types.NULL;
      }
    }
 catch (    NullPointerException e) {
      throw new SQLException(Could not set argument no:  + (i + 1) +  - missing parameter marker?,e);
    }
  }
  return outputs;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jdbc\src\main\java\org\apache\jmeter\protocol\jdbc\AbstractJDBCTestElement.java",379
1838,"'-tryline","@ParameterizedTest @ValueSource(strings={UTF-8,Cp1252}) public void testGetContent(String encoding) throws UnsupportedEncodingException, IOException {
  String value=Ã©Ã¨â‚¬;
  byte[] expected=value.getBytes(encoding);
  String filename=writeFile(encoding,expected);
  byte[] actual=render.getContent(filename);
  assertArrayEquals(expected,actual,value:  + value);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\test\java\org\apache\jmeter\protocol\jms\sampler\render\BinaryMessageRendererTest.java",53
1839,"'-tryline","@Test public void getValueFromFile_withNoVar() throws IOException {
  String text=Ã©Ã¨â‚¬;
  String fileName=writeFile(utf8.txt,text);
  assertValueFromFile(text,fileName,true);
  assertCacheContentInString(text);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\test\java\org\apache\jmeter\protocol\jms\sampler\render\BinaryMessageRendererTest.java",79
1840,"'-tryline","@Test public void getValueFromFile_withOneVar(JMeterVariables vars) throws IOException {
  String fileName=writeFile(oneVar.txt,${oneVar});
  String value=Ã©Ã¨â‚¬;
  vars.put(oneVar,value);
  assertValueFromFile(value,fileName,true);
  assertCacheContentInString(${oneVar});
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\test\java\org\apache\jmeter\protocol\jms\sampler\render\BinaryMessageRendererTest.java",87
1841,"'-tryline","@Test public void getValueFromFile_inRawMode() throws IOException {
  String text=${oneVar};
  String fileName=writeFile(oneVar.txt,text);
  assertValueFromFile(text,fileName,false);
  assertCacheContentInBytes(text);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\test\java\org\apache\jmeter\protocol\jms\sampler\render\BinaryMessageRendererTest.java",111
1842,"'-tryline","protected String writeFile(String fileName,byte[] contents) throws IOException {
  Path filePath=tmpDir.resolve(fileName);
  Files.write(filePath,contents);
  return filePath.toString();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\test\java\org\apache\jmeter\protocol\jms\sampler\render\MessageRendererTest.java",53
1843,"'-tryline","protected String writeFile(String fileName,String text) throws IOException {
  return writeFile(fileName,text.getBytes(StandardCharsets.UTF_8));
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\test\java\org\apache\jmeter\protocol\jms\sampler\render\MessageRendererTest.java",59
1844,"'-tryline","protected String writeFile(String fileName,String text,Charset charset) throws IOException {
  return writeFile(fileName,text.getBytes(charset));
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\test\java\org\apache\jmeter\protocol\jms\sampler\render\MessageRendererTest.java",63
1845,"'-tryline","@Test public void getValueFromFile_inRawMode() throws IOException {
  String fileName=writeFile(object_doe.xml,<org.apache.jmeter.protocol.jms.sampler.render.Person><name>Doe</name></org.apache.jmeter.protocol.jms.sampler.render.Person>);
  assertValueFromFile(object -> {
    assertObject(object,Doe);
    Person p=(Person)object;
    assertSame(p,getFirstCachedValue(),cache);
  }
,fileName,false);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\test\java\org\apache\jmeter\protocol\jms\sampler\render\ObjectMessageRendererTest.java",58
1846,"'-tryline","@Test public void getValueFromFile_withForcedEncoding() throws IOException {
  String filename=writeFile(object_cp1252.xml,CP1252_SAFE_XML,Charset.forName(Cp1252));
  Serializable object=getRenderer().getValueFromFile(filename,Cp1252,true,cache);
  assertObject(object,eÃ©Ã¨â‚¬);
  assertEquals(CP1252_SAFE_XML,getFirstCachedValue(),cache);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\test\java\org\apache\jmeter\protocol\jms\sampler\render\ObjectMessageRendererTest.java",71
1847,"'-tryline","@Test public void getValueFromFile_withDefaultEncodingAndNoProlog() throws IOException {
  String content=<org.apache.jmeter.protocol.jms.sampler.render.Person><name>eÃ©Ã¨â‚¬</name></org.apache.jmeter.protocol.jms.sampler.render.Person>;
  String filename=writeFile(object_utf8.xml,content,StandardCharsets.UTF_8);
  Serializable object=getRenderer().getValueFromFile(filename,PublisherSampler.DEFAULT_ENCODING,true,cache);
  assertObject(object,eÃ©Ã¨â‚¬);
  assertEquals(CP1252_SAFE_XML,getFirstCachedValue(),cache);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\test\java\org\apache\jmeter\protocol\jms\sampler\render\ObjectMessageRendererTest.java",79
1848,"'-tryline","@Test public void getValueFromFile_withDefaultEncodingAndProlog() throws IOException {
  String content=<?xml version=\1.0\ encoding=\Windows-1252\?>\n + CP1252_SAFE_XML;
  String filename=writeFile(object_prolog_cp1252.xml,content,Charset.forName(Cp1252));
  Serializable object=getRenderer().getValueFromFile(filename,PublisherSampler.DEFAULT_ENCODING,true,cache);
  assertObject(object,eÃ©Ã¨â‚¬);
  Person p=(Person)object;
  assertEquals(eÃ©Ã¨â‚¬,p.getName(),object.name);
  Object firstCachedValue=getFirstCachedValue();
  assertEquals(content,convertLineEndingsToSystem(firstCachedValue),cache);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\test\java\org\apache\jmeter\protocol\jms\sampler\render\ObjectMessageRendererTest.java",90
1849,"'-tryline","@ParameterizedTest @ValueSource(strings={UTF-8,Cp1252}) public void testGetContent(String encoding) throws UnsupportedEncodingException, IOException {
  String value=Ã©Ã¨â‚¬;
  byte[] expected=value.getBytes(encoding);
  String filename=writeFile(encoding,expected);
  String actual=render.getContent(new FileKey(filename,encoding));
  assertEquals(value,actual);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\test\java\org\apache\jmeter\protocol\jms\sampler\render\TextMessageRendererTest.java",40
1850,"'-tryline","@Test public void getValueFromFileWithNoVar() throws IOException {
  String fileName=writeFile(noVar,noVar);
  assertValueFromFile(noVar,fileName,true);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\test\java\org\apache\jmeter\protocol\jms\sampler\render\TextMessageRendererTest.java",53
1851,"'-tryline","@Test public void getValueFromFileWithOneVar(JMeterVariables vars) throws IOException {
  String fileName=writeFile(oneVar.txt,${oneVar});
  vars.put(oneVar,foobar);
  assertValueFromFile(foobar,fileName,true);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\test\java\org\apache\jmeter\protocol\jms\sampler\render\TextMessageRendererTest.java",59
1852,"'-tryline","@Test public void checkCache(JMeterVariables vars) throws IOException {
  String fileName=writeFile(oneVar.txt,${oneVar});
  vars.put(oneVar,foo);
  assertValueFromFile(foo,fileName,true);
  assertEquals(${oneVar},getFirstCachedValue());
  vars.put(oneVar,bar);
  assertValueFromFile(bar,fileName,true);
  assertEquals(${oneVar},getFirstCachedValue());
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\test\java\org\apache\jmeter\protocol\jms\sampler\render\TextMessageRendererTest.java",66
1853,"'-tryline","@Test public void checkNoVariable(JMeterVariables vars) throws IOException {
  String fileName=writeFile(oneVar.txt,${oneVar});
  vars.put(oneVar,RAW);
  assertValueFromFile(${oneVar},fileName,false);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\jms\src\test\java\org\apache\jmeter\protocol\jms\sampler\render\TextMessageRendererTest.java",78
1854,"'-tryline","private void appendMessageData(SampleResult child,Message message) throws MessagingException, IOException {
  StringBuilder cdata=new StringBuilder();
  cdata.append(Date: );
  cdata.append(message.getSentDate());
  cdata.append(NEW_LINE);
  cdata.append(To: );
  Address[] recips=message.getAllRecipients();
  for (int j=0; recips != null && j < recips.length; j++) {
    cdata.append(recips[j].toString());
    if (j < recips.length - 1) {
      cdata.append(; );
    }
  }
  cdata.append(NEW_LINE);
  cdata.append(From: );
  Address[] from=message.getFrom();
  for (int j=0; from != null && j < from.length; j++) {
    cdata.append(from[j].toString());
    if (j < from.length - 1) {
      cdata.append(; );
    }
  }
  cdata.append(NEW_LINE);
  cdata.append(Subject: );
  cdata.append(message.getSubject());
  cdata.append(NEW_LINE);
  cdata.append(NEW_LINE);
  Object content=message.getContent();
  if (content instanceof MimeMultipart) {
    appendMultiPart(child,cdata,(MimeMultipart)content);
  }
 else   if (content instanceof InputStream) {
    child.setResponseData(IOUtils.toByteArray((InputStream)content));
  }
 else {
    cdata.append(content);
    child.setResponseData(cdata.toString(),child.getDataEncodingNoDefault());
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\mail\sampler\MailReaderSampler.java",323
1855,"'-tryline","private void appendMultiPart(SampleResult child,StringBuilder cdata,MimeMultipart mmp) throws MessagingException, IOException {
  String preamble=mmp.getPreamble();
  if (preamble != null) {
    cdata.append(preamble);
  }
  child.setResponseData(cdata.toString(),child.getDataEncodingNoDefault());
  int count=mmp.getCount();
  for (int j=0; j < count; j++) {
    BodyPart bodyPart=mmp.getBodyPart(j);
    final Object bodyPartContent=bodyPart.getContent();
    final String contentType=bodyPart.getContentType();
    SampleResult sr=new SampleResult();
    sr.setSampleLabel(Part:  + j);
    sr.setContentType(contentType);
    sr.setDataEncoding(RFC_822_DEFAULT_ENCODING);
    sr.setEncodingAndType(contentType);
    sr.sampleStart();
    if (bodyPartContent instanceof InputStream) {
      sr.setResponseData(IOUtils.toByteArray((InputStream)bodyPartContent));
    }
 else     if (bodyPartContent instanceof MimeMultipart) {
      appendMultiPart(sr,cdata,(MimeMultipart)bodyPartContent);
    }
 else {
      sr.setResponseData(bodyPartContent.toString(),sr.getDataEncodingNoDefault());
    }
    sr.setResponseOK();
    if (sr.getEndTime() == 0) {
      sr.sampleEnd();
    }
    child.addSubResult(sr);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\mail\sampler\MailReaderSampler.java",366
1856,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override public Socket createSocket(Socket socket,String s,int i,boolean flag) throws IOException {
  return factory.createSocket(socket,s,i,flag);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\protocol\LocalTrustStoreSSLSocketFactory.java",62
1857,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override public Socket createSocket(InetAddress inaddr,int i,InetAddress inaddr1,int j) throws IOException {
  return factory.createSocket(inaddr,i,inaddr1,j);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\protocol\LocalTrustStoreSSLSocketFactory.java",72
1858,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override public Socket createSocket(InetAddress inaddr,int i) throws IOException {
  return factory.createSocket(inaddr,i);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\protocol\LocalTrustStoreSSLSocketFactory.java",81
1859,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override public Socket createSocket(String s,int i,InetAddress inaddr,int j) throws IOException {
  return factory.createSocket(s,i,inaddr,j);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\protocol\LocalTrustStoreSSLSocketFactory.java",90
1860,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override public Socket createSocket(String s,int i) throws IOException {
  return factory.createSocket(s,i);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\protocol\LocalTrustStoreSSLSocketFactory.java",99
1861,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override public Socket createSocket() throws IOException {
  return factory.createSocket();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\protocol\LocalTrustStoreSSLSocketFactory.java",107
1862,"'-tryline","/** 
 * Prepares message prior to be sent via execute()-method, i.e. sets properties such as protocol, authentication, etc.
 * @return Message-object to be sent to execute()-method
 * @throws MessagingException when problems constructing or sending the mail occur
 * @throws IOException when the mail content can not be read or truststore problems are detected
 */
public Message prepareMessage() throws MessagingException, IOException {
  Properties props=new Properties();
  String protocol=getProtocol();
  props.setProperty(MAIL_PROPERTY_PREFIX + protocol + .host,smtpServer);
  props.setProperty(MAIL_PROPERTY_PREFIX + protocol + .port,getPort());
  props.setProperty(MAIL_PROPERTY_PREFIX + protocol + .auth,Boolean.toString(useAuthentication));
  props.setProperty(MAIL_PROPERTY_PREFIX + protocol + .timeout,getTimeout());
  props.setProperty(MAIL_PROPERTY_PREFIX + protocol + .connectiontimeout,getConnectionTimeout());
  configureTLSProtocols(props,protocol);
  if (enableDebug) {
    props.setProperty(mail.debug,true);
  }
  if (useStartTLS) {
    props.setProperty(mail.smtp.starttls.enable,true);
    if (enforceStartTLS) {
      props.setProperty(mail.smtp.starttls.require,true);
    }
  }
  configureCertificateTrust(props);
  session=Session.getInstance(props,null);
  Message message=buildMessage();
  message.saveChanges();
  return message;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\protocol\SendMailCommand.java",119
1863,"'-tryline","/** 
 * @return
 * @throws MessagingException
 * @throws FileNotFoundException
 * @throws IOException
 * @throws AddressException
 */
private Message buildMessage() throws MessagingException, IOException {
  Message message;
  if (sendEmlMessage) {
    message=new MimeMessage(session,new BufferedInputStream(new FileInputStream(emlMessage)));
  }
 else {
    message=new MimeMessage(session);
    Multipart multipart=new MimeMultipart();
    final int attachmentCount=attachments.size();
    if (plainBody && (attachmentCount == 0 || (mailBody.length() == 0 && attachmentCount == 1))) {
      if (attachmentCount == 1) {
        File first=attachments.get(0);
        try (FileInputStream fis=new FileInputStream(first);InputStream is=new BufferedInputStream(fis)){
          message.setText(IOUtils.toString(is,Charset.defaultCharset()));
        }
       }
 else {
        message.setText(mailBody);
      }
    }
 else {
      BodyPart body=new MimeBodyPart();
      body.setText(mailBody);
      multipart.addBodyPart(body);
      for (      File f : attachments) {
        BodyPart attach=new MimeBodyPart();
        attach.setFileName(f.getName());
        attach.setDataHandler(new DataHandler(new FileDataSource(f.getAbsolutePath())));
        multipart.addBodyPart(attach);
      }
      message.setContent(multipart);
    }
  }
  if (null != sender) {
    message.setFrom(new InternetAddress(sender));
  }
  if (null != replyTo) {
    InternetAddress[] to=new InternetAddress[replyTo.size()];
    message.setReplyTo(replyTo.toArray(to));
  }
  if (null != subject) {
    message.setSubject(subject);
  }
  if (receiverTo != null) {
    InternetAddress[] to=new InternetAddress[receiverTo.size()];
    receiverTo.toArray(to);
    message.setRecipients(Message.RecipientType.TO,to);
  }
  if (receiverCC != null) {
    InternetAddress[] cc=new InternetAddress[receiverCC.size()];
    receiverCC.toArray(cc);
    message.setRecipients(Message.RecipientType.CC,cc);
  }
  if (receiverBCC != null) {
    InternetAddress[] bcc=new InternetAddress[receiverBCC.size()];
    receiverBCC.toArray(bcc);
    message.setRecipients(Message.RecipientType.BCC,bcc);
  }
  for (int i=0; i < headerFields.size(); i++) {
    Argument argument=(Argument)headerFields.get(i).getObjectValue();
    message.setHeader(argument.getName(),argument.getValue());
  }
  return message;
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\protocol\SendMailCommand.java",168
1864,"'-tryline","private void configureCertificateTrust(Properties props) throws IOException {
  if (trustAllCerts) {
    if (useSSL) {
      props.setProperty(mail.smtps.ssl.socketFactory.class,TRUST_ALL_SOCKET_FACTORY);
      props.setProperty(mail.smtps.ssl.socketFactory.fallback,FALSE);
    }
 else     if (useStartTLS) {
      props.setProperty(mail.smtp.ssl.socketFactory.class,TRUST_ALL_SOCKET_FACTORY);
      props.setProperty(mail.smtp.ssl.socketFactory.fallback,FALSE);
    }
  }
 else   if (useLocalTrustStore) {
    File truststore=new File(trustStoreToUse);
    logger.info(load local truststore - try to load truststore from: {},truststore.getAbsolutePath());
    if (!truststore.exists()) {
      logger.info(load local truststore -Failed to load truststore from: {},truststore.getAbsolutePath());
      truststore=new File(FileServer.getFileServer().getBaseDir(),trustStoreToUse);
      logger.info(load local truststore -Attempting to read truststore from: {},truststore.getAbsolutePath());
      if (!truststore.exists()) {
        logger.info(load local truststore -Failed to load truststore from: {}. Local truststore not available, aborting execution.,truststore.getAbsolutePath());
        throw new IOException(Local truststore file not found. Also not available under :  + truststore.getAbsolutePath());
      }
    }
    if (useSSL) {
      props.put(mail.smtps.ssl.socketFactory,new LocalTrustStoreSSLSocketFactory(truststore));
      props.put(mail.smtps.ssl.socketFactory.fallback,FALSE);
    }
 else     if (useStartTLS) {
      props.put(mail.smtp.ssl.socketFactory,new LocalTrustStoreSSLSocketFactory(truststore));
      props.put(mail.smtp.ssl.socketFactory.fallback,FALSE);
    }
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\protocol\SendMailCommand.java",248
1865,"'-tryline","/** 
 * Processes prepareMessage() and execute()
 * @throws InterruptedException when interrupted while waiting for delivery in synchronous modus
 * @throws IOException when the mail content can not be read or truststore problems are detected
 * @throws MessagingException when problems constructing or sending the mail occur
 */
public void execute() throws MessagingException, IOException, InterruptedException {
  execute(prepareMessage());
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\protocol\SendMailCommand.java",347
1866,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override public Socket createSocket(Socket socket,String s,int i,boolean flag) throws IOException {
  return factory.createSocket(socket,s,i,flag);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\protocol\TrustAllSSLSocketFactory.java",80
1867,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override public Socket createSocket(InetAddress inaddr,int i,InetAddress inaddr1,int j) throws IOException {
  return factory.createSocket(inaddr,i,inaddr1,j);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\protocol\TrustAllSSLSocketFactory.java",90
1868,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override public Socket createSocket(InetAddress inaddr,int i) throws IOException {
  return factory.createSocket(inaddr,i);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\protocol\TrustAllSSLSocketFactory.java",99
1869,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override public Socket createSocket(String s,int i,InetAddress inaddr,int j) throws IOException {
  return factory.createSocket(s,i,inaddr,j);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\protocol\TrustAllSSLSocketFactory.java",108
1870,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override public Socket createSocket(String s,int i) throws IOException {
  return factory.createSocket(s,i);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\protocol\TrustAllSSLSocketFactory.java",117
1871,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override public Socket createSocket() throws IOException {
  return factory.createSocket();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\protocol\TrustAllSSLSocketFactory.java",125
1872,"'-tryline","private long calculateMessageSize(Message message) throws IOException, MessagingException {
  if (getPropertyAsBoolean(MESSAGE_SIZE_STATS)) {
    CountingOutputStream cs=new CountingOutputStream(NullOutputStream.NULL_OUTPUT_STREAM);
    message.writeTo(cs);
    return cs.getByteCount();
  }
 else {
    return -1L;
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\SmtpSampler.java",191
1873,"'-tryline","private byte[] processSampler(Message message) throws IOException, MessagingException {
  try (InputStream is=message.getInputStream()){
    return IOUtils.toByteArray(is);
  }
 }
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\SmtpSampler.java",202
1874,"'-tryline","private String getSamplerData(Message message) throws MessagingException, IOException {
  StringBuilder sb=new StringBuilder();
  Object content=message.getContent();
  if (content instanceof Multipart) {
    Multipart multipart=(Multipart)content;
    String contentType=multipart.getContentType();
    ContentType ct=new ContentType(contentType);
    String boundary=ct.getParameter(boundary);
    for (int i=0; i < multipart.getCount(); i++) {
      sb.append(--);
      sb.append(boundary);
      sb.append(\n);
      BodyPart bodyPart=multipart.getBodyPart(i);
      writeBodyPart(sb,bodyPart);
    }
    sb.append(--);
    sb.append(boundary);
    sb.append(--);
    sb.append(\n);
  }
 else   if (content instanceof BodyPart) {
    BodyPart bodyPart=(BodyPart)content;
    writeBodyPart(sb,bodyPart);
  }
 else   if (content instanceof String) {
    sb.append(content);
  }
 else {
    sb.append(Content has class: );
    sb.append(content.getClass().getCanonicalName());
  }
  return sb.toString();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\SmtpSampler.java",304
1875,"'-tryline","private void writeBodyPart(StringBuilder sb,BodyPart bodyPart) throws MessagingException, IOException {
  @SuppressWarnings(unchecked) Enumeration<Header> allHeaders=bodyPart.getAllHeaders();
  writeHeaders(allHeaders,sb);
  String disposition=bodyPart.getDisposition();
  sb.append(\n);
  if (Part.ATTACHMENT.equals(disposition)) {
    sb.append(<attachment content not shown>);
  }
 else {
    sb.append(bodyPart.getContent());
  }
  sb.append(\n);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\SmtpSampler.java",346
1876,"'-tryline","/** 
 * Input (hex) string is converted to binary and written to the output stream.
 * @param os output stream
 * @param hexEncodedBinary hex-encoded binary
 */
@Override public void write(OutputStream os,String hexEncodedBinary) throws IOException {
  os.write(hexStringToByteArray(hexEncodedBinary));
  os.flush();
  if (log.isDebugEnabled()) {
    log.debug(Wrote:  + hexEncodedBinary);
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\tcp\src\main\java\org\apache\jmeter\protocol\tcp\sampler\BinaryTCPClientImpl.java",83
1877,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override public void write(OutputStream os,String s) throws IOException {
  os.write(intToByteArray(s.length() / 2,lengthPrefixLen));
  if (log.isDebugEnabled()) {
    log.debug(Wrote:  + s.length() / 2 +  bytes);
  }
  this.tcpClient.write(os,s);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\tcp\src\main\java\org\apache\jmeter\protocol\tcp\sampler\LengthPrefixedBinaryTCPClientImpl.java",50
1878,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override public void write(OutputStream os,InputStream is) throws IOException {
  this.tcpClient.write(os,is);
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\tcp\src\main\java\org\apache\jmeter\protocol\tcp\sampler\LengthPrefixedBinaryTCPClientImpl.java",62
1879,"'-tryline","/** 
 * @param os -OutputStream for socket
 * @param is -InputStream to be written to Socket
 * @throws IOException when writing fails
 */
void write(OutputStream os,InputStream is) throws IOException ;
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\tcp\src\main\java\org\apache\jmeter\protocol\tcp\sampler\TCPClient.java",41
1880,"'-tryline","/** 
 * @param os -OutputStream for socket
 * @param s -String to write
 * @throws IOException when writing fails
 */
void write(OutputStream os,String s) throws IOException ;
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\tcp\src\main\java\org\apache\jmeter\protocol\tcp\sampler\TCPClient.java",51
1881,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override public void write(OutputStream os,String s) throws IOException {
  if (log.isDebugEnabled()) {
    log.debug(WriteS: {},showEOL(s));
  }
  os.write(s.getBytes(CHARSET));
  os.flush();
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\tcp\src\main\java\org\apache\jmeter\protocol\tcp\sampler\TCPClientImpl.java",61
1882,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override public void write(OutputStream os,InputStream is) throws IOException {
  byte[] buff=new byte[512];
  while (is.read(buff) > 0) {
    if (log.isDebugEnabled()) {
      log.debug(WriteIS: {},showEOL(new String(buff,CHARSET)));
    }
    os.write(buff);
    os.flush();
  }
}
","java.io.IOException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\tcp\src\main\java\org\apache\jmeter\protocol\tcp\sampler\TCPClientImpl.java",73
1883,"'-tryline","private boolean checkResult(ObjectMapper mapper,JsonNode jsonNode) throws JsonProcessingException {
  if (!isJsonValidationBool()) {
    return !(jsonNode instanceof NullNode);
  }
  if (isExpectNull()) {
    return jsonNode instanceof NullNode;
  }
 else {
    return isEquals(mapper,jsonNode);
  }
}
","com.fasterxml.jackson.core.JsonProcessingException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\assertions\jmespath\JMESPathAssertion.java",127
1884,"'-tryline","public static String objectToString(ObjectMapper mapper,JsonNode element) throws JsonProcessingException {
  if (element.isTextual()) {
    return element.asText();
  }
 else {
    return mapper.writeValueAsString(element);
  }
}
","com.fasterxml.jackson.core.JsonProcessingException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\assertions\jmespath\JMESPathAssertion.java",168
1885,"'-tryline","private boolean isEquals(ObjectMapper mapper,JsonNode jsonNode) throws JsonProcessingException {
  String str=objectToString(mapper,jsonNode);
  if (isUseRegex()) {
    Pattern pattern=JMeterUtils.getPatternCache().getPattern(getExpectedValue());
    return JMeterUtils.getMatcher().matches(str,pattern);
  }
 else {
    return str.equals(getExpectedValue());
  }
}
","com.fasterxml.jackson.core.JsonProcessingException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\assertions\jmespath\JMESPathAssertion.java",176
1886,"'-tryline","private static String writeJsonNode(ObjectMapper mapper,JsonNode element) throws JsonProcessingException {
  if (element.isTextual()) {
    return element.asText();
  }
 else {
    return mapper.writeValueAsString(element);
  }
}
","com.fasterxml.jackson.core.JsonProcessingException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\extractor\json\jmespath\JMESPathExtractor.java",181
1887,"'-tryline","private static String writeJsonNode(ObjectMapper mapper,JsonNode element) throws JsonProcessingException {
  if (element.isTextual()) {
    return element.asText();
  }
 else {
    return mapper.writeValueAsString(element);
  }
}
","com.fasterxml.jackson.core.JsonProcessingException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\extractor\json\render\RenderAsJmesPathRenderer.java",77
1888,"'-tryline","/** 
 * Parse  {@code postData} and convert it to a {@link GraphQLRequestParams} object if it is a valid GraphQL post data.
 * @param postData post data
 * @param contentEncoding content encoding
 * @return a converted {@link GraphQLRequestParams} object form the {@code postData}
 * @throws IllegalArgumentException if {@code postData} is not a GraphQL post JSON data or not a valid JSON
 * @throws JsonProcessingException if it fails to serialize a parsed JSON object to string
 * @throws UnsupportedEncodingException if it fails to decode parameter value
 */
public static GraphQLRequestParams toGraphQLRequestParams(byte[] postData,final String contentEncoding) throws JsonProcessingException, UnsupportedEncodingException {
  final String encoding=StringUtils.isNotEmpty(contentEncoding) ? contentEncoding : EncoderCache.URL_ARGUMENT_ENCODING;
  final ObjectMapper mapper=new ObjectMapper();
  ObjectNode data;
  try (InputStreamReader reader=new InputStreamReader(new ByteArrayInputStream(postData),encoding)){
    data=mapper.readValue(reader,ObjectNode.class);
  }
 catch (  IOException e) {
    throw new IllegalArgumentException(Invalid json data:  + e.getLocalizedMessage());
  }
  String operationName=null;
  String query;
  String variables=null;
  final JsonNode operationNameNode=data.has(OPERATION_NAME_FIELD) ? data.get(OPERATION_NAME_FIELD) : null;
  if (operationNameNode != null) {
    operationName=getJsonNodeTextContent(operationNameNode,true);
  }
  if (!data.has(QUERY_FIELD)) {
    throw new IllegalArgumentException(Not a valid GraphQL query.);
  }
  final JsonNode queryNode=data.get(QUERY_FIELD);
  query=getJsonNodeTextContent(queryNode,false);
  final String trimmedQuery=StringUtils.trim(query);
  if (!StringUtils.startsWith(trimmedQuery,QUERY_FIELD) && !StringUtils.startsWith(trimmedQuery,mutation)) {
    throw new IllegalArgumentException(Not a valid GraphQL query.);
  }
  final JsonNode variablesNode=data.has(VARIABLES_FIELD) ? data.get(VARIABLES_FIELD) : null;
  if (variablesNode != null) {
    final JsonNodeType nodeType=variablesNode.getNodeType();
    if (nodeType != JsonNodeType.NULL) {
      if (nodeType == JsonNodeType.OBJECT) {
        variables=mapper.writeValueAsString(variablesNode);
      }
 else {
        throw new IllegalArgumentException(Not a valid object node for GraphQL variables.);
      }
    }
  }
  return new GraphQLRequestParams(operationName,query,variables);
}
","com.fasterxml.jackson.core.JsonProcessingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\util\GraphQLRequestParamUtils.java",134
1889,"'-tryline","@ParameterizedTest @ValueSource(strings={,{}}) void testInvalidJsonData(String postDataAsString) throws JsonProcessingException, UnsupportedEncodingException {
  byte[] postData=postDataAsString.getBytes(StandardCharsets.UTF_8);
  assertThrows(IllegalArgumentException.class,() -> {
    GraphQLRequestParamUtils.toGraphQLRequestParams(postData,null);
  }
);
}
","com.fasterxml.jackson.core.JsonProcessingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\util\TestGraphQLRequestParamUtils.java",133
1890,"'-tryline","@ParameterizedTest @ValueSource(strings={{\query\:\select * from emp\},{\operationName\:{\id\:123},\query\:\query { droid { id }}\},{\variables\:\r2d2\,\query\:\query { droid { id }}\}}) void testInvalidGraphQueryParam(String postDataAsString) throws JsonProcessingException, UnsupportedEncodingException {
  byte[] postData=postDataAsString.getBytes(StandardCharsets.UTF_8);
  assertThrows(IllegalArgumentException.class,() -> {
    GraphQLRequestParamUtils.toGraphQLRequestParams(postData,null);
  }
);
}
","com.fasterxml.jackson.core.JsonProcessingException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\util\TestGraphQLRequestParamUtils.java",143
1891,"'-tryline","/** 
 * Wait until all threads called await on this timer
 * @return The arrival index of the current thread
 * @throws InterruptedException when interrupted while waiting, or the interrupted status is set on entering this method
 * @throws BrokenBarrierException if the barrier is reset while waiting or broken on entering or while waiting
 * @see java.util.concurrent.CyclicBarrier#await()
 */
public int await() throws InterruptedException, BrokenBarrierException {
  return barrier.await();
}
","java.util.concurrent.BrokenBarrierException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\timers\SyncTimer.java",77
1892,"'-tryline","/** 
 * Wait until all threads called await on this timer
 * @param timeout The timeout in <code>timeUnit</code> units
 * @param timeUnit The time unit for the <code>timeout</code>
 * @return The arrival index of the current thread
 * @throws InterruptedException when interrupted while waiting, or the interrupted status is set on entering this method
 * @throws BrokenBarrierException if the barrier is reset while waiting or broken on entering or while waiting
 * @throws TimeoutException if the specified time elapses
 * @see java.util.concurrent.CyclicBarrier#await()
 */
public int await(long timeout,TimeUnit timeUnit) throws InterruptedException, BrokenBarrierException, TimeoutException {
  return barrier.await(timeout,timeUnit);
}
","java.util.concurrent.BrokenBarrierException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\timers\SyncTimer.java",93
1893,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override protected void setNumberValue(String n) throws NumberFormatException {
  value=Double.parseDouble(n);
}
","java.lang.NumberFormatException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\testelement\property\DoubleProperty.java",51
1894,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override protected void setNumberValue(String n) throws NumberFormatException {
  value=Float.parseFloat(n);
}
","java.lang.NumberFormatException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\testelement\property\FloatProperty.java",68
1895,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override protected void setNumberValue(String n) throws NumberFormatException {
  value=Integer.parseInt(n);
}
","java.lang.NumberFormatException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\testelement\property\IntegerProperty.java",73
1896,"'-tryline","/** 
 * {@inheritDoc}
 */
@Override protected void setNumberValue(String n) throws NumberFormatException {
  value=Long.parseLong(n);
}
","java.lang.NumberFormatException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\testelement\property\LongProperty.java",69
1897,"'-tryline","/** 
 * Set the value of the property with a String object.
 * @param n the number to set as a string representation
 * @throws NumberFormatException if the number <code>n</code> can not be converted to a {@link Number}
 */
protected abstract void setNumberValue(String n) throws NumberFormatException ;
","java.lang.NumberFormatException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\testelement\property\NumberProperty.java",38
1898,"'-tryline","/** 
 * Get the value of a specified parameter as an integer. An exception will be thrown if the parameter is not specified or if it is not an integer. The value may be specified in decimal, hexadecimal, or octal, as defined by Integer.decode().
 * @param name the name of the parameter whose value should be retrieved
 * @return the value of the parameter
 * @throws NumberFormatException if the parameter is not specified or is not an integer
 * @see java.lang.Integer#decode(java.lang.String)
 */
public int getIntParameter(String name) throws NumberFormatException {
  if (params == null || !params.containsKey(name)) {
    throw new NumberFormatException(No value for parameter named ' + name + '.);
  }
  return Integer.decode(params.get(name));
}
","java.lang.NumberFormatException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\java\src\main\java\org\apache\jmeter\protocol\java\sampler\JavaSamplerContext.java",124
1899,"'-tryline","/** 
 * Get the value of a specified parameter as a long. An exception will be thrown if the parameter is not specified or if it is not a long. The value may be specified in decimal, hexadecimal, or octal, as defined by Long.decode().
 * @param name the name of the parameter whose value should be retrieved
 * @return the value of the parameter
 * @throws NumberFormatException if the parameter is not specified or is not a long
 * @see Long#decode(String)
 */
public long getLongParameter(String name) throws NumberFormatException {
  if (params == null || !params.containsKey(name)) {
    throw new NumberFormatException(No value for parameter named ' + name + '.);
  }
  return Long.decode(params.get(name));
}
","java.lang.NumberFormatException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\java\src\main\java\org\apache\jmeter\protocol\java\sampler\JavaSamplerContext.java",178
1900,"'-tryline","private static void verifySignature(SignerInformation signer,AssertionResult res,X509CertificateHolder cert) throws CertificateException, CMSException {
  SignerInformationVerifier verifier=null;
  try {
    verifier=new JcaSimpleSignerInfoVerifierBuilder().setProvider(BC).build(cert);
  }
 catch (  OperatorCreationException e) {
    log.error(Can't create a provider.,e);
  }
  if (verifier == null || !signer.verify(verifier)) {
    res.setFailure(true);
    res.setFailureMessage(Signature is invalid);
  }
}
","java.security.cert.CertificateException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\assertions\SMIMEAssertion.java",208
1901,"'-tryline","private static void checkSignerByFile(SMIMEAssertionTestElement testElement,AssertionResult res,X509CertificateHolder cert) throws CertificateException {
  CertificateFactory cf=CertificateFactory.getInstance(X.509);
  try (InputStream fis=new FileInputStream(testElement.getSignerCertFile());InputStream bis=new BufferedInputStream(fis)){
    X509CertificateHolder certFromFile=new JcaX509CertificateHolder((X509Certificate)cf.generateCertificate(bis));
    if (!certFromFile.equals(cert)) {
      res.setFailure(true);
      res.setFailureMessage(Signer certificate does not match certificate  + testElement.getSignerCertFile());
    }
  }
 catch (  IOException e) {
    if (log.isDebugEnabled()) {
      log.debug(Could not read cert file {},testElement.getSignerCertFile(),e);
    }
    res.setFailure(true);
    res.setFailureMessage(Could not read certificate file  + testElement.getSignerCertFile());
  }
}
","java.security.cert.CertificateException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\assertions\SMIMEAssertion.java",223
1902,"'-tryline","/** 
 * @see javax.net.ssl.X509TrustManager#checkServerTrusted(X509Certificate[],String)
 */
@Override public void checkServerTrusted(X509Certificate[] certificates,String authType) throws CertificateException {
  if (log.isDebugEnabled() && certificates != null) {
    for (int i=0; i < certificates.length; i++) {
      X509Certificate cert=certificates[i];
      log.debug( Server certificate {}:\n +   Subject DN: {}\n +   Signature Algorithm: {}\n+   Valid from: {}\n+   Valid until: {}\n+   Issuer: {},i + 1,cert.getSubjectDN(),cert.getSigAlgName(),cert.getNotBefore(),cert.getNotAfter(),cert.getIssuerDN());
    }
  }
}
","java.security.cert.CertificateException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\CustomX509TrustManager.java",76
1903,"'-tryline","/** 
 * Process the input stream and try to read the keys from the store
 * @param is    {@link InputStream} from which the store should be loaded
 * @param pword the password used to check the integrity of the store
 * @throws IOException               if there is a problem decoding or reading the store. A badpassword might be the cause for this, or an empty store
 * @throws CertificateException      if any of the certificated in the store can not be loaded
 * @throws NoSuchAlgorithmException  if the algorithm to check the integrity of the store can notbe found
 * @throws KeyStoreException         if the store has not been initialized (should not happenhere)
 * @throws UnrecoverableKeyException if the key can not be recovered from the store (should nothappen here, either)
 */
@SuppressWarnings(JdkObsolete) public void load(InputStream is,String pword) throws NoSuchAlgorithmException, CertificateException, IOException, KeyStoreException, UnrecoverableKeyException {
  char[] pw=toCharArrayOrNull(pword);
  store.load(is,pw);
  List<String> aliasesList=new ArrayList<>();
  this.privateKeyByAlias=new HashMap<>();
  this.certsByAlias=new HashMap<>();
  PrivateKey privateKey=null;
  int index=0;
  Enumeration<String> aliases=store.aliases();
  while (aliases.hasMoreElements()) {
    String alias=aliases.nextElement();
    if (!store.isKeyEntry(alias)) {
      continue;
    }
    if (isIndexInConfiguredRange(index)) {
      privateKey=Objects.requireNonNull((PrivateKey)store.getKey(alias,pw),No key found for alias:  + alias);
      Certificate[] chain=Objects.requireNonNull(store.getCertificateChain(alias),No certificate chain found for alias + alias);
      aliasesList.add(alias);
      privateKeyByAlias.put(alias,privateKey);
      certsByAlias.put(alias,toX509Certificates(chain));
    }
    index++;
  }
  if (is != null) {
    Objects.requireNonNull(privateKey,No key(s) found);
    if (endIndex != -1 && index <= endIndex - startIndex && log.isWarnEnabled()) {
      log.warn(Did not find as much aliases as configured in indexes Start={}, end={}, found={},startIndex,endIndex,certsByAlias.size());
    }
  }
  this.names=aliasesList.toArray(new String[aliasesList.size()]);
}
","java.security.cert.CertificateException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\keystore\JmeterKeyStore.java",90
1904,"'-tryline","private void retryLoadKeys(File initStore,boolean allowEmptyPassword) throws NoSuchAlgorithmException, CertificateException, IOException, KeyStoreException, UnrecoverableKeyException {
  for (int i=0; i < 3; i++) {
    String password=getPassword();
    if (!allowEmptyPassword) {
      Validate.notNull(password,Password for keystore must not be null);
    }
    try {
      if (initStore == null) {
        this.keyStore.load(null,password);
      }
 else {
        try (InputStream fis=new FileInputStream(initStore)){
          this.keyStore.load(fis,password);
        }
       }
      return;
    }
 catch (    IOException e) {
      log.debug(Could not load keystore. Wrong password for keystore?,e);
    }
    this.defaultpw=null;
  }
}
","java.security.cert.CertificateException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SSLManager.java",169
1905,"'-tryline","@Override public void checkClientTrusted(X509Certificate[] chain,String authType,Socket socket) throws CertificateException {
}
","java.security.cert.CertificateException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\TrustAllSSLSocketFactory.java",66
1906,"'-tryline","@Override public void checkClientTrusted(X509Certificate[] chain,String authType,SSLEngine engine) throws CertificateException {
}
","java.security.cert.CertificateException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\TrustAllSSLSocketFactory.java",71
1907,"'-tryline","@Override public void checkServerTrusted(X509Certificate[] chain,String authType,Socket socket) throws CertificateException {
}
","java.security.cert.CertificateException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\TrustAllSSLSocketFactory.java",76
1908,"'-tryline","@Override public void checkServerTrusted(X509Certificate[] chain,String authType,SSLEngine engine) throws CertificateException {
}
","java.security.cert.CertificateException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\TrustAllSSLSocketFactory.java",81
1909,"'-tryline","/** 
 * Constructor to transform a line value (from icon set file) to a icon bean for toolbar.
 * @param strToSplit - the line value (i18n key, ActionNames ID, icon path, optional icon pressed path)
 * @throws IllegalArgumentException if error in parsing.
 */
IconToolbarBean(final String strToSplit,final String iconSize) throws IllegalArgumentException {
  if (strToSplit == null) {
    throw new IllegalArgumentException(Icon definition must not be null);
  }
  final String[] tmp=strToSplit.split(ICON_FIELD_SEP);
  if (tmp.length > 2) {
    this.i18nKey=tmp[0];
    this.actionName=tmp[1];
    this.iconPath=tmp[2].replace(<SIZE>,iconSize);
    this.iconPathPressed=(tmp.length > 3) ? tmp[3].replace(<SIZE>,iconSize) : this.iconPath;
  }
 else {
    throw new IllegalArgumentException(Incorrect argument format - expected at least 2 fields separated by  + ICON_FIELD_SEP);
  }
  Matcher m=DIMENSIONS.matcher(iconSize);
  if (m.matches()) {
    this.width=Integer.parseInt(m.group(1));
    this.height=Integer.parseInt(m.group(2));
  }
 else {
    log.info(Unable to parse {} as width x height for icon {}. Will default to 22x22,iconSize,actionName);
    this.width=22;
    this.height=22;
  }
}
","java.lang.IllegalArgumentException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\util\IconToolbarBean.java",47
1910,"'-tryline","/** 
 * Set the value of the i-th property, properly reporting a possible failure.
 * @param i the index of the property in the descriptors and editors arrays
 * @param value the value to be stored in the editor
 * @throws IllegalArgumentException if the editor refuses the value
 */
private void setEditorValue(int i,Object value) throws IllegalArgumentException {
  editors[i].setValue(value);
}
","java.lang.IllegalArgumentException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\testbeans\gui\GenericTestBeanCustomizer.java",465
1911,"'-tryline","@Override public void setAsText(String text) throws IllegalArgumentException {
}
","java.lang.IllegalArgumentException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\testbeans\gui\TableEditor.java",147
1912,"'-tryline","/** 
 * {@inheritDoc} 
 */
@Override public void setAsText(String text) throws IllegalArgumentException {
  textUI.setInitialText(text);
  textUI.setCaretPosition(0);
}
","java.lang.IllegalArgumentException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\testbeans\gui\TextAreaEditor.java",101
1913,"'-tryline","@Override public void setAsText(String text) throws IllegalArgumentException {
  if (log.isDebugEnabled()) {
    if (text == null) {
      log.debug(<-null);
    }
 else {
      log.debug(<-\{}\,text);
    }
  }
  String value;
  if (text == null) {
    if (!acceptsNull) {
      throw new IllegalArgumentException(Null parameter not allowed);
    }
    value=null;
  }
 else {
    if (acceptsExpressions && isExpression(text)) {
      value=text;
    }
 else {
      typeEditor.setAsText(text);
      value=typeEditor.getAsText();
      if (!acceptsOther && !isATag(text)) {
        throw new IllegalArgumentException(Value not allowed:  + text);
      }
    }
  }
  guiEditor.setValue(value);
}
","java.lang.IllegalArgumentException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\testbeans\gui\WrapperEditor.java",399
1914,"'-tryline","@Test public void testSyntaxNames() throws IllegalArgumentException, IllegalAccessException {
  HashSet<String> values=new HashSet<>();
  for (  Field field : SyntaxConstants.class.getFields()) {
    int modifiers=field.getModifiers();
    if (field.getType().equals(String.class) && Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers)) {
      values.add((String)field.get(null));
    }
  }
  final Properties languageProperties=JMeterUtils.loadProperties(org/apache/jmeter/gui/util/textarea.properties);
  for (  Object s : languageProperties.values()) {
    if (!values.contains(s)) {
      fail(Invalid property value:  + s);
    }
  }
}
","java.lang.IllegalArgumentException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\gui\util\JSyntaxTextAreaTest.java",48
1915,"'-tryline","/** 
 * Invoke a public method on a class instance
 * @param instance object on which the method should be called
 * @param methodName name of the method to be called
 * @throws SecurityException if a security violation occurred while looking for the method
 * @throws IllegalArgumentException if the method parameters (none given) do not match the signature of the method
 * @throws JMeterException if something went wrong in the invoked method
 */
public static void invoke(Object instance,String methodName) throws SecurityException, IllegalArgumentException, JMeterException {
  Method m;
  try {
    m=ClassUtils.getPublicMethod(instance.getClass(),methodName,new Class[]{});
    m.invoke(instance,(Object[])null);
  }
 catch (  NoSuchMethodException|InvocationTargetException|IllegalAccessException e) {
    throw new JMeterException(e);
  }
}
","java.lang.IllegalArgumentException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\reflect\ClassTools.java",95
1916,"'-tryline","@Override public JMeterTreeNode[] createThinkTime(GuiPackage guiPackage,JMeterTreeNode parentNode) throws IllegalUserActionException {
  TestAction testAction=(TestAction)guiPackage.createTestElement(TestActionGui.class.getName());
  testAction.setAction(TestAction.PAUSE);
  testAction.setDuration(0);
  JMeterTreeNode thinkTimeNode=new JMeterTreeNode(testAction,guiPackage.getTreeModel());
  thinkTimeNode.setName(Think Time);
  RandomTimer randomTimer=(RandomTimer)guiPackage.createTestElement(DEFAULT_TIMER_IMPLEMENTATION);
  randomTimer.setDelay(DEFAULT_PAUSE);
  randomTimer.setRange(DEFAULT_RANGE);
  randomTimer.setName(Pause);
  JMeterTreeNode urtNode=new JMeterTreeNode(randomTimer,guiPackage.getTreeModel());
  return new JMeterTreeNode[]{thinkTimeNode,urtNode};
}
","org.apache.jmeter.exceptions.IllegalUserActionException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\thinktime\DefaultThinkTimeCreator.java",56
1917,"'-tryline","/** 
 * @see Command#doAction(ActionEvent)
 */
@Override public void doAction(ActionEvent e) throws IllegalUserActionException {
}
","org.apache.jmeter.exceptions.IllegalUserActionException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\action\AbstractAction.java",56
1918,"'-tryline","@Override public final void doAction(ActionEvent e) throws IllegalUserActionException {
  if (JMeterUtils.isTestRunning()) {
    JOptionPane.showMessageDialog(GuiPackage.getInstance().getMainFrame(),JMeterUtils.getResString(action_check_message),JMeterUtils.getResString(action_check_title),JOptionPane.WARNING_MESSAGE);
    return;
  }
  doActionAfterCheck(e);
}
","org.apache.jmeter.exceptions.IllegalUserActionException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\action\AbstractActionWithNoRunningTest.java",35
1919,"'-tryline","/** 
 * Called to handle  {@link ActionEvent} only if no test is running
 * @param e {@link ActionEvent}
 * @throws IllegalUserActionException when user action is invalid
 */
protected abstract void doActionAfterCheck(ActionEvent e) throws IllegalUserActionException ;
","org.apache.jmeter.exceptions.IllegalUserActionException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\action\AbstractActionWithNoRunningTest.java",47
1920,"'-tryline","/** 
 * Add Think Time to children of parentNode
 * @param guiPackage {@link GuiPackage}
 * @param parentNode Parent node of elements on which we add think times
 * @throws IllegalUserActionException
 */
private void addThinkTimeToChildren(GuiPackage guiPackage,JMeterTreeNode parentNode) throws IllegalUserActionException {
  guiPackage.updateCurrentNode();
  boolean insertThinkTime;
  try {
    int index=0;
    while (true) {
      if (index == parentNode.getChildCount()) {
        break;
      }
      JMeterTreeNode childNode=(JMeterTreeNode)parentNode.getChildAt(index);
      Object userObject=childNode.getUserObject();
      insertThinkTime=childNode.isEnabled() && (userObject instanceof Sampler || userObject instanceof Controller);
      if (insertThinkTime) {
        JMeterTreeNode[] nodes=createThinkTime(guiPackage,parentNode);
        if (nodes.length != 2) {
          throw new IllegalArgumentException(Invalid Think Time, expected 2 nodes, got: + nodes.length);
        }
        index++;
        addNodesToTreeHierachically(guiPackage,parentNode,nodes,index);
      }
      index++;
    }
  }
 catch (  Exception ex) {
    throw new IllegalUserActionException(Cannot add think times,ex);
  }
}
","org.apache.jmeter.exceptions.IllegalUserActionException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\action\AddThinkTimeBetweenEachStep.java",79
1921,"'-tryline","/** 
 * @param guiPackage {@link GuiPackage}
 * @param parentNode {@link JMeterTreeNode}
 * @return array of {@link JMeterTreeNode}
 * @throws ReflectiveOperationException when class instantiation for {@value #DEFAULT_IMPLEMENTATION} fails
 * @throws IllegalUserActionException when {@link ThinkTimeCreator#createThinkTime(GuiPackage,JMeterTreeNode)} throws this
 */
private JMeterTreeNode[] createThinkTime(GuiPackage guiPackage,JMeterTreeNode parentNode) throws ReflectiveOperationException, IllegalUserActionException {
  Class<?> clazz=Class.forName(DEFAULT_IMPLEMENTATION);
  ThinkTimeCreator thinkTimeCreator=(ThinkTimeCreator)clazz.getDeclaredConstructor().newInstance();
  return thinkTimeCreator.createThinkTime(guiPackage,parentNode);
}
","org.apache.jmeter.exceptions.IllegalUserActionException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\action\AddThinkTimeBetweenEachStep.java",129
1922,"'-tryline","void doAction(ActionEvent e) throws IllegalUserActionException ;
","org.apache.jmeter.exceptions.IllegalUserActionException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\action\Command.java",26
1923,"'-tryline","/** 
 * Inserts (or merges) the tree into the GUI. Does not check if the previous tree has been saved. Clears the existing GUI test plan if we are inserting a complete plan.
 * @param id the id for the ActionEvent that is created
 * @param tree the tree to load
 * @param merging true if the tree is to be merged; false if it is to replace the existing tree
 * @return true if the loaded tree was a full test plan
 * @throws IllegalUserActionException if the tree cannot be merged at the selected position or the tree is empty
 */
public static boolean insertLoadedTree(final int id,final HashTree tree,final boolean merging) throws IllegalUserActionException {
  if (tree == null) {
    throw new IllegalUserActionException(Empty TestPlan or error reading test plan - see log file);
  }
  final boolean isTestPlan=tree.getArray()[0] instanceof TestPlan;
  final GuiPackage guiInstance=GuiPackage.getInstance();
  if (isTestPlan && !merging) {
    guiInstance.clearTestPlan((TestElement)tree.getArray()[0]);
  }
  if (merging) {
    final TestElement te=(TestElement)tree.getArray()[0];
    if (!(te instanceof TestPlan)) {
      final boolean ok=MenuFactory.canAddTo(guiInstance.getCurrentNode(),te);
      if (!ok) {
        String name=te.getName();
        String className=te.getClass().getName();
        className=className.substring(className.lastIndexOf('.') + 1);
        throw new IllegalUserActionException(Can't merge  + name +  (+ className+ ) here);
      }
    }
  }
  final HashTree newTree=guiInstance.addSubTree(tree);
  guiInstance.updateCurrentGui();
  guiInstance.getMainFrame().getTree().setSelectionPath(new TreePath(((JMeterTreeNode)newTree.getArray()[0]).getPath()));
  final HashTree subTree=guiInstance.getCurrentSubTree();
  ActionEvent actionEvent=new ActionEvent(subTree.get(subTree.getArray()[subTree.size() - 1]),id,merging ? ActionNames.SUB_TREE_MERGED : ActionNames.SUB_TREE_LOADED);
  ActionRouter.getInstance().actionPerformed(actionEvent);
  final JTree jTree=guiInstance.getMainFrame().getTree();
  if (EXPAND_TREE && !merging) {
    for (int i=0; i < jTree.getRowCount(); i++) {
      jTree.expandRow(i);
    }
  }
 else {
    jTree.expandRow(0);
  }
  jTree.setSelectionPath(jTree.getPathForRow(1));
  FocusRequester.requestFocus(jTree);
  return isTestPlan;
}
","org.apache.jmeter.exceptions.IllegalUserActionException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\action\Load.java",162
1924,"'-tryline","/** 
 * Inserts the tree into the GUI. Does not check if the previous tree has been saved. Clears the existing GUI test plan if we are inserting a complete plan.
 * @param id the id for the ActionEvent that is created
 * @param tree the tree to load
 * @return true if the loaded tree was a full test plan
 * @throws IllegalUserActionException if the tree cannot be merged at the selected position or the tree is empty
 */
public static boolean insertLoadedTree(final int id,final HashTree tree) throws IllegalUserActionException {
  return insertLoadedTree(id,tree,false);
}
","org.apache.jmeter.exceptions.IllegalUserActionException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\action\Load.java",224
1925,"'-tryline","@Override public void doAction(ActionEvent e) throws IllegalUserActionException {
  HashTree subTree;
  boolean fullSave=false;
  if (!commands.contains(e.getActionCommand())) {
    throw new IllegalUserActionException(Invalid user command: + e.getActionCommand());
  }
  if (e.getActionCommand().equals(ActionNames.SAVE_AS)) {
    JMeterTreeNode[] nodes=GuiPackage.getInstance().getTreeListener().getSelectedNodes();
    if (nodes.length > 1) {
      JMeterUtils.reportErrorToUser(JMeterUtils.getResString(save_as_error),JMeterUtils.getResString(save_as));
      return;
    }
    subTree=GuiPackage.getInstance().getCurrentSubTree();
  }
 else   if (e.getActionCommand().equals(ActionNames.SAVE_AS_TEST_FRAGMENT)) {
    JMeterTreeNode[] nodes=GuiPackage.getInstance().getTreeListener().getSelectedNodes();
    if (checkAcceptableForTestFragment(nodes)) {
      subTree=createTestFragmentNode(nodes);
    }
 else {
      JMeterUtils.reportErrorToUser(JMeterUtils.getResString(save_as_test_fragment_error),JMeterUtils.getResString(save_as_test_fragment));
      return;
    }
  }
 else {
    fullSave=true;
    subTree=GuiPackage.getInstance().getTreeModel().getTestPlan();
  }
  String updateFile=GuiPackage.getInstance().getTestPlanFile();
  if (!ActionNames.SAVE.equals(e.getActionCommand()) || updateFile == null) {
    boolean isNewFile=updateFile == null;
    updateFile=computeFileName();
    if (updateFile == null) {
      return;
    }
    if (e.getActionCommand().equals(ActionNames.SAVE_ALL_AS) || isNewFile) {
      GuiPackage.getInstance().setTestPlanFile(updateFile);
    }
  }
  ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(),e.getID(),ActionNames.CHECK_DIRTY));
  backupAndSave(e,subTree,fullSave,updateFile);
  GuiPackage.getInstance().updateCurrentGui();
}
","org.apache.jmeter.exceptions.IllegalUserActionException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\action\Save.java",125
1926,"'-tryline","/** 
 * Backup existing file according to jmeter/user.properties settings and save
 * @param e {@link ActionEvent}
 * @param subTree HashTree Test plan to save
 * @param fullSave Partial or full save
 * @param newFile File to save
 * @throws IllegalUserActionException
 */
void backupAndSave(ActionEvent e,HashTree subTree,boolean fullSave,String newFile) throws IllegalUserActionException {
  List<File> expiredBackupFiles=EMPTY_FILE_LIST;
  if (GuiPackage.getInstance().isDirty()) {
    File fileToBackup=new File(newFile);
    log.debug(Test plan has changed, make backup of {},fileToBackup);
    try {
      expiredBackupFiles=createBackupFile(fileToBackup);
    }
 catch (    Exception ex) {
      log.error(Failed to create a backup for {},fileToBackup,ex);
    }
  }
  try {
    convertSubTree(subTree);
  }
 catch (  Exception err) {
    if (log.isWarnEnabled()) {
      log.warn(Error converting subtree. {},err.toString());
    }
  }
  try (FileOutputStream ostream=new FileOutputStream(newFile)){
    SaveService.saveTree(subTree,ostream);
    if (fullSave) {
      FileServer.getFileServer().setScriptName(new File(newFile).getName());
      subTree=GuiPackage.getInstance().getTreeModel().getTestPlan();
      ActionRouter.getInstance().doActionNow(new ActionEvent(subTree,e.getID(),ActionNames.SUB_TREE_SAVED));
    }
    expiredBackupFiles.forEach(FileUtils::deleteQuietly);
  }
 catch (  RuntimeException ex) {
    throw ex;
  }
catch (  Exception ex) {
    log.error(Error saving tree.,ex);
    throw new IllegalUserActionException(Couldn't save test plan to file:  + newFile,ex);
  }
}
","org.apache.jmeter.exceptions.IllegalUserActionException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\action\Save.java",227
1927,"'-tryline","@Override public void doAction(ActionEvent e) throws IllegalUserActionException {
  if (!commands.contains(e.getActionCommand())) {
    throw new IllegalUserActionException(Invalid user command: + e.getActionCommand());
  }
  if (e.getActionCommand().equals(ActionNames.SAVE_GRAPHICS)) {
    JMeterGUIComponent component=GuiPackage.getInstance().getCurrentGui();
    if (component instanceof Printable) {
      JComponent comp=((Printable)component).getPrintableComponent();
      saveImage(comp);
    }
  }
  if (e.getActionCommand().equals(ActionNames.SAVE_GRAPHICS_ALL)) {
    JMeterGUIComponent component=GuiPackage.getInstance().getCurrentGui();
    JComponent comp=((JComponent)component).getRootPane();
    saveImage(comp);
  }
}
","org.apache.jmeter.exceptions.IllegalUserActionException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\action\SaveGraphics.java",73
1928,"'-tryline","/** 
 * Create think time
 * @param guiPackage {@link GuiPackage}
 * @param parentNode {@link JMeterTreeNode}
 * @return array of 2 nodes
 * @throws IllegalUserActionException when timer can't be created for this node
 */
JMeterTreeNode[] createThinkTime(GuiPackage guiPackage,JMeterTreeNode parentNode) throws IllegalUserActionException ;
","org.apache.jmeter.exceptions.IllegalUserActionException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\action\thinktime\ThinkTimeCreator.java",30
1929,"'-tryline","@Override public void doAction(ActionEvent e) throws IllegalUserActionException {
  GuiPackage guiPackage=GuiPackage.getInstance();
  final String command=e.getActionCommand();
  if (command.equals(ActionNames.UNDO)) {
    guiPackage.undo();
  }
 else   if (command.equals(ActionNames.REDO)) {
    guiPackage.redo();
  }
 else {
    throw new IllegalArgumentException(Wrong action called:  + command);
  }
}
","org.apache.jmeter.exceptions.IllegalUserActionException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\action\UndoCommand.java",42
1930,"'-tryline","@Override public void doAction(ActionEvent e) throws IllegalUserActionException {
  JMeterTreeNode node=GuiPackage.getInstance().getTreeListener().getCurrentNode();
  TestElement te=(TestElement)node.getUserObject();
  if (ActionNames.WHAT_CLASS.equals(e.getActionCommand())) {
    String guiClassName=te.getPropertyAsString(TestElement.GUI_CLASS);
    System.out.println(te.getClass().getName());
    System.out.println(guiClassName);
    if (log.isInfoEnabled()) {
      log.info(TestElement: {}, guiClassName: {},te.getClass(),guiClassName);
    }
  }
 else   if (ActionNames.DEBUG_ON.equals(e.getActionCommand())) {
    final String loggerName=te.getClass().getName();
    Configurator.setAllLevels(loggerName,Level.DEBUG);
    log.info(Log level set to DEBUG for {},loggerName);
  }
 else   if (ActionNames.DEBUG_OFF.equals(e.getActionCommand())) {
    final String loggerName=te.getClass().getName();
    Configurator.setAllLevels(loggerName,Level.INFO);
    log.info(Log level set to INFO for {},loggerName);
  }
 else   if (ActionNames.HEAP_DUMP.equals(e.getActionCommand())) {
    try {
      String s=HeapDumper.dumpHeap();
      JOptionPane.showMessageDialog(null,Created  + s,HeapDump,JOptionPane.INFORMATION_MESSAGE);
    }
 catch (    Exception ex) {
      JOptionPane.showMessageDialog(null,ex.toString(),HeapDump,JOptionPane.ERROR_MESSAGE);
    }
  }
 else   if (ActionNames.THREAD_DUMP.equals(e.getActionCommand())) {
    try {
      String s=ThreadDumper.threadDump();
      JOptionPane.showMessageDialog(null,Created  + s,ThreadDump,JOptionPane.INFORMATION_MESSAGE);
    }
 catch (    Exception ex) {
      JOptionPane.showMessageDialog(null,ex.toString(),ThreadDump,JOptionPane.ERROR_MESSAGE);
    }
  }
}
","org.apache.jmeter.exceptions.IllegalUserActionException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\action\What.java",62
1931,"'-tryline","/** 
 * Add a subtree to the currently selected node.
 * @param subTree the subtree to add.
 * @return the resulting subtree starting with the currently selected node
 * @throws IllegalUserActionException if a subtree cannot be added to the currently selected node
 */
public HashTree addSubTree(HashTree subTree) throws IllegalUserActionException {
  HashTree hashTree=treeModel.addSubTree(subTree,treeListener.getCurrentNode());
  undoHistory.clear();
  undoHistory.add(this.treeModel,Loaded tree);
  return hashTree;
}
","org.apache.jmeter.exceptions.IllegalUserActionException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\GuiPackage.java",542
1932,"'-tryline","@Override public void doAction(ActionEvent e) throws IllegalUserActionException {
  htmlReportPanel=new HtmlReportUI();
  htmlReportPanel.showInputDialog(getParentFrame(e));
}
","org.apache.jmeter.exceptions.IllegalUserActionException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\HtmlReportAction.java",48
1933,"'-tryline","/** 
 * Adds the sub tree at the given node. Returns a boolean indicating whether the added sub tree was a full test plan.
 * @param subTree The  {@link HashTree} which is to be inserted into<code>current</code>
 * @param current The node in which the <code>subTree</code> is to be inserted. Will be overridden, when an instance of  {@link TestPlan}
 * @return newly created sub tree now found at <code>current</code>
 * @throws IllegalUserActionException when <code>current</code> is not an instance of {@link AbstractConfigGui} and no instance of {@link TestPlan}<code>subTree</code>
 */
public HashTree addSubTree(HashTree subTree,JMeterTreeNode current) throws IllegalUserActionException {
  for (  Object o : subTree.list()) {
    TestElement item=(TestElement)o;
    if (item instanceof TestPlan) {
      TestPlan tp=(TestPlan)item;
      current=(JMeterTreeNode)((JMeterTreeNode)getRoot()).getChildAt(0);
      final TestPlan userObject=(TestPlan)current.getUserObject();
      userObject.addTestElement(item);
      userObject.setName(item.getName());
      userObject.setFunctionalMode(tp.isFunctionalMode());
      userObject.setSerialized(tp.isSerialized());
      addSubTree(subTree.getTree(item),current);
    }
 else     if (isWorkbench(item)) {
      HashTree workbenchTree=subTree.getTree(item);
      if (!workbenchTree.isEmpty()) {
        moveWorkBenchToTestPlan(current,workbenchTree);
      }
    }
 else {
      addSubTree(subTree.getTree(item),addComponent(item,current));
    }
  }
  return getCurrentSubTree(current);
}
","org.apache.jmeter.exceptions.IllegalUserActionException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\tree\JMeterTreeModel.java",96
1934,"'-tryline","/** 
 * Add a  {@link TestElement} to a {@link JMeterTreeNode}
 * @param component The {@link TestElement} to be used as data for the newly created node
 * @param node The {@link JMeterTreeNode} into which the newly created node is to be inserted
 * @return new {@link JMeterTreeNode} for the given <code>component</code>
 * @throws IllegalUserActionException when the user object for the <code>node</code> is not an instance of  {@link AbstractConfigGui}
 */
public JMeterTreeNode addComponent(TestElement component,JMeterTreeNode node) throws IllegalUserActionException {
  if (node.getUserObject() instanceof AbstractConfigGui) {
    throw new IllegalUserActionException(This node cannot hold sub-elements);
  }
  GuiPackage guiPackage=GuiPackage.getInstance();
  if (guiPackage != null) {
    guiPackage.updateCurrentNode();
    JMeterGUIComponent guicomp=guiPackage.getGui(component);
    guicomp.clearGui();
    guicomp.configure(component);
    guicomp.modifyTestElement(component);
    guiPackage.getCurrentGui();
  }
  JMeterTreeNode newNode=new JMeterTreeNode(component,this);
  try {
    newNode.setEnabled(component.isEnabled());
  }
 catch (  Exception e) {
    newNode.setEnabled(true);
  }
  this.insertNodeInto(newNode,node,node.getChildCount());
  return newNode;
}
","org.apache.jmeter.exceptions.IllegalUserActionException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\tree\JMeterTreeModel.java",142
1935,"'-tryline","/** 
 * Move all Non-Test Elements from WorkBench to TestPlan root. Other Test Elements will be move to WorkBench Test Fragment in TestPlan
 * @param current - TestPlan root
 * @param workbenchTree - WorkBench hash tree
 */
private void moveWorkBenchToTestPlan(JMeterTreeNode current,HashTree workbenchTree) throws IllegalUserActionException {
  Object[] workbenchTreeArray=workbenchTree.getArray();
  if (GuiPackage.getInstance() != null) {
    for (    Object node : workbenchTreeArray) {
      if (isNonTestElement(node)) {
        HashTree subtree=workbenchTree.getTree(node);
        workbenchTree.remove(node);
        HashTree tree=new HashTree();
        tree.add(node);
        tree.add(node,subtree);
        ((TestElement)node).setProperty(TestElement.ENABLED,false);
        addSubTree(tree,current);
      }
    }
  }
  if (!workbenchTree.isEmpty()) {
    HashTree testFragmentTree=new HashTree();
    TestFragmentController testFragmentController=new TestFragmentController();
    testFragmentController.setProperty(TestElement.NAME,WorkBench Test Fragment);
    testFragmentController.setProperty(TestElement.GUI_CLASS,TestFragmentControllerGui.class.getName());
    testFragmentController.setProperty(TestElement.ENABLED,false);
    testFragmentTree.add(testFragmentController);
    testFragmentTree.add(testFragmentController,workbenchTree);
    addSubTree(testFragmentTree,current);
  }
}
","org.apache.jmeter.exceptions.IllegalUserActionException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\tree\JMeterTreeModel.java",284
1936,"'-tryline","/** 
 * Sets a proxy server for the JVM if the command line arguments are specified.
 */
private void setProxy(CLArgsParser parser) throws IllegalUserActionException {
  if (parser.getArgumentById(PROXY_USERNAME) != null) {
    Properties jmeterProps=JMeterUtils.getJMeterProperties();
    if (parser.getArgumentById(PROXY_PASSWORD) != null) {
      String u=parser.getArgumentById(PROXY_USERNAME).getArgument();
      String p=parser.getArgumentById(PROXY_PASSWORD).getArgument();
      Authenticator.setDefault(new ProxyAuthenticator(u,p));
      log.info(Set Proxy login: {}/{},u,p);
      jmeterProps.setProperty(HTTP_PROXY_USER,u);
      jmeterProps.setProperty(HTTP_PROXY_PASS,p);
    }
 else {
      String u=parser.getArgumentById(PROXY_USERNAME).getArgument();
      Authenticator.setDefault(new ProxyAuthenticator(u,));
      log.info(Set Proxy login: {},u);
      jmeterProps.setProperty(HTTP_PROXY_USER,u);
    }
  }
  if (parser.getArgumentById(PROXY_HOST) != null && parser.getArgumentById(PROXY_PORT) != null) {
    String h=parser.getArgumentById(PROXY_HOST).getArgument();
    String p=parser.getArgumentById(PROXY_PORT).getArgument();
    System.setProperty(http.proxyHost,h);
    System.setProperty(https.proxyHost,h);
    System.setProperty(http.proxyPort,p);
    System.setProperty(https.proxyPort,p);
    String proxyScheme=null;
    if (parser.getArgumentById(PROXY_SCHEME) != null) {
      proxyScheme=parser.getArgumentById(PROXY_SCHEME).getArgument();
      if (!StringUtils.isBlank(proxyScheme)) {
        System.setProperty(http.proxyScheme,proxyScheme);
      }
    }
    if (log.isInfoEnabled()) {
      log.info(Set proxy Host: {}, Port: {}, Scheme: {},h,p,proxyScheme != null ? proxyScheme : Not set);
    }
  }
 else   if (parser.getArgumentById(PROXY_HOST) != null || parser.getArgumentById(PROXY_PORT) != null) {
    throw new IllegalUserActionException(JMeterUtils.getResString(proxy_cl_error));
  }
  if (parser.getArgumentById(NONPROXY_HOSTS) != null) {
    String n=parser.getArgumentById(NONPROXY_HOSTS).getArgument();
    System.setProperty(http.nonProxyHosts,n);
    System.setProperty(https.nonProxyHosts,n);
    log.info(Set http[s].nonProxyHosts: {},n);
  }
}
","org.apache.jmeter.exceptions.IllegalUserActionException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\JMeter.java",751
1937,"'-tryline","private void startNonGui(String testFile,String logFile,CLOption remoteStart,boolean generateReportDashboard) throws IllegalUserActionException, ConfigurationException {
  System.setProperty(JMETER_NON_GUI,true);
  JMeter driver=new JMeter();
  driver.remoteProps=this.remoteProps;
  driver.remoteStop=this.remoteStop;
  driver.deleteResultFile=this.deleteResultFile;
  PluginManager.install(this,false);
  String remoteHostsString=null;
  if (remoteStart != null) {
    remoteHostsString=remoteStart.getArgument();
    if (remoteHostsString == null) {
      remoteHostsString=JMeterUtils.getPropDefault(remote_hosts,127.0.0.1);
    }
  }
  if (testFile == null) {
    throw new IllegalUserActionException(Non-GUI runs require a test plan);
  }
  driver.runNonGui(testFile,logFile,remoteStart != null,remoteHostsString,generateReportDashboard);
}
","org.apache.jmeter.exceptions.IllegalUserActionException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\JMeter.java",983
1938,"'-tryline","private void createTestPlan(ActionEvent e,Request request,String statusText) throws MalformedURLException, IllegalUserActionException {
  ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(),e.getID(),ActionNames.CLOSE));
  GuiPackage guiPackage=GuiPackage.getInstance();
  guiPackage.clearTestPlan();
  FileServer.getFileServer().setScriptName(null);
  ThreadGroup threadGroup=new ThreadGroup();
  threadGroup.setProperty(TestElement.GUI_CLASS,ThreadGroupGui.class.getName());
  threadGroup.setProperty(TestElement.NAME,Thread Group);
  threadGroup.setProperty(AbstractThreadGroup.NUM_THREADS,${__P(threads,10)});
  threadGroup.setProperty(ThreadGroup.RAMP_TIME,${__P(rampup,30)});
  threadGroup.setScheduler(true);
  threadGroup.setProperty(ThreadGroup.DURATION,${__P(duration,3600)});
  threadGroup.setDelay(5);
  LoopController loopCtrl=new LoopController();
  loopCtrl.setProperty(LoopController.LOOPS,${__P(iterations,-1)});
  loopCtrl.setContinueForever(false);
  threadGroup.setSamplerController(loopCtrl);
  TestPlan testPlan=new TestPlan();
  testPlan.setProperty(TestElement.NAME,Test Plan);
  testPlan.setProperty(TestElement.GUI_CLASS,TestPlanGui.class.getName());
  testPlan.setComment(You can run me using: jmeter -Jthreads=<Number of threads> -Jrampup=<rampup in seconds> -Jduration=<duration in seconds>  + -Jiterations=<Number of iterations, -1 means infinite> -e -o <report output folder>);
  HashTree tree=new HashTree();
  HashTree testPlanHT=tree.add(testPlan);
  HashTree threadGroupHT=testPlanHT.add(threadGroup);
  createHttpRequest(request,threadGroupHT,statusText);
  if (!request.getAuthorization().getUser().isEmpty()) {
    AuthManager authManager=new AuthManager();
    createAuthManager(request,authManager);
    threadGroupHT.add(authManager);
  }
  if (!request.getDnsServers().isEmpty()) {
    DNSCacheManager dnsCacheManager=new DNSCacheManager();
    createDnsServer(request,dnsCacheManager);
    threadGroupHT.add(dnsCacheManager);
  }
  if (request.getDnsResolver() != null) {
    DNSCacheManager dnsCacheManager=new DNSCacheManager();
    createDnsResolver(request,dnsCacheManager);
    threadGroupHT.add(dnsCacheManager);
  }
  CookieManager cookieManager=new CookieManager();
  createCookieManager(cookieManager,request);
  threadGroupHT.add(cookieManager);
  ResultCollector resultCollector=new ResultCollector();
  resultCollector.setProperty(TestElement.NAME,View Results Tree);
  resultCollector.setProperty(TestElement.GUI_CLASS,ViewResultsFullVisualizer.class.getName());
  tree.add(tree.getArray()[0],resultCollector);
  final HashTree newTree=guiPackage.addSubTree(tree);
  guiPackage.updateCurrentGui();
  guiPackage.getMainFrame().getTree().setSelectionPath(new TreePath(((JMeterTreeNode)newTree.getArray()[0]).getPath()));
  final HashTree subTree=guiPackage.getCurrentSubTree();
  ActionEvent actionEvent=new ActionEvent(subTree.get(subTree.getArray()[subTree.size() - 1]),e.getID(),ActionNames.SUB_TREE_LOADED);
  ActionRouter.getInstance().actionPerformed(actionEvent);
  ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(),e.getID(),ActionNames.EXPAND_ALL));
}
","org.apache.jmeter.exceptions.IllegalUserActionException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\gui\action\ParseCurlCommandAction.java",213
1939,"'-tryline","/** 
 * Helper method to add a Response Assertion Called from AWT Event thread
 */
private void addAssertion(JMeterTreeModel model,JMeterTreeNode node) throws IllegalUserActionException {
  ResponseAssertion ra=new ResponseAssertion();
  ra.setProperty(TestElement.GUI_CLASS,ASSERTION_GUI);
  ra.setName(JMeterUtils.getResString(assertion_title));
  ra.setTestFieldResponseData();
  model.addComponent(ra,node);
}
","org.apache.jmeter.exceptions.IllegalUserActionException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\ProxyControl.java",925
1940,"'-tryline","private void addTestElements(final JMeterTreeModel treeModel,TestElement[] testElements,final JMeterTreeNode newNode) throws IllegalUserActionException {
  if (testElements == null) {
    return;
  }
  for (  TestElement testElement : testElements) {
    if (isAddableTestElement(testElement)) {
      treeModel.addComponent(testElement,newNode);
    }
  }
}
","org.apache.jmeter.exceptions.IllegalUserActionException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\proxy\ProxyControl.java",1218
1941,"'-tryline","public static void main(String[] args) throws IllegalUserActionException, IOException {
  JMeterUtils.setJMeterHome(./);
  JMeterUtils.loadJMeterProperties(JMeterUtils.getJMeterBinDir() + /jmeter.properties);
  JMeterUtils.initLocale();
  TestPlan testPlan=new TestPlan();
  ThreadGroup threadGroup=new ThreadGroup();
  ListedHashTree testPlanTree=new ListedHashTree();
  testPlanTree.add(testPlan);
  testPlanTree.add(threadGroup,testPlan);
  @SuppressWarnings(deprecation) JMeterTreeModel treeModel=new JMeterTreeModel(new Object());
  JMeterTreeNode root=(JMeterTreeNode)treeModel.getRoot();
  treeModel.addSubTree(testPlanTree,root);
  ProxyControl proxy=new ProxyControl();
  proxy.setNonGuiTreeModel(treeModel);
  proxy.setTarget(treeModel.getNodeOf(threadGroup));
  proxy.setPort(8282);
  treeModel.addComponent(proxy,(JMeterTreeNode)root.getChildAt(1));
  proxy.startProxy();
  HttpHost proxyHost=new HttpHost(localhost,8282);
  DefaultProxyRoutePlanner routePlanner=new DefaultProxyRoutePlanner(proxyHost);
  CloseableHttpClient httpclient=HttpClients.custom().setRoutePlanner(routePlanner).build();
  try {
    httpclient.execute(new HttpGet(http://example.invalid));
  }
 catch (  Exception e) {
  }
  proxy.stopProxy();
  try (ByteArrayOutputStream out=new ByteArrayOutputStream()){
    SaveService.saveTree(treeModel.getTestPlan(),out);
    out.close();
    System.out.println(out.toString());
  }
 }
","org.apache.jmeter.exceptions.IllegalUserActionException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\test\java\org\apache\jmeter\protocol\http\proxy\NonGuiProxySample.java",38
1942,"'-tryline","/** 
 * @see javax.net.SocketFactory#createSocket()
 */
@Override public Socket createSocket() throws IOException, UnknownHostException {
  SSLSocketFactory sslfac=getSSLSocketFactory();
  Socket sock=sslfac.createSocket();
  configureSocket(sock);
  return wrapSocket(sock);
}
","java.net.UnknownHostException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\HttpSSLProtocolSocketFactory.java",128
1943,"'-tryline","@Override public Socket createSocket(String host,int port) throws IOException, UnknownHostException {
  SSLSocketFactory sslfac=getSSLSocketFactory();
  Socket sock=sslfac.createSocket(host,port);
  configureSocket(sock);
  return wrapSocket(sock);
}
","java.net.UnknownHostException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\HttpSSLProtocolSocketFactory.java",184
1944,"'-tryline","@Override public Socket createSocket(String host,int port,InetAddress inetAddress,int localPort) throws IOException, UnknownHostException {
  SSLSocketFactory sslfac=getSSLSocketFactory();
  Socket sock=sslfac.createSocket(host,port,inetAddress,localPort);
  configureSocket(sock);
  return wrapSocket(sock);
}
","java.net.UnknownHostException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\HttpSSLProtocolSocketFactory.java",192
1945,"'-tryline","/** 
 * @param cps characters per second
 * @param host hostname
 * @param port port
 * @throws UnknownHostException if the name of the host can not be determined automatically
 * @throws IOException if an I/O error occurs during initialization
 * @throws IllegalArgumentException if cps &lt;= 0, or if the <code>port</code> or <code>localPort</code> values lie outside of the allowed range between <code>0</code> and <code>65535</code>
 */
public SlowSocket(int cps,String host,int port) throws UnknownHostException, IOException {
  super(host,port);
  if (cps <= 0) {
    throw new IllegalArgumentException(Speed (cps) <= 0);
  }
  charactersPerSecond=cps;
}
","java.net.UnknownHostException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\SlowSocket.java",78
1946,"'-tryline","private InetAddress getLocalHost() throws UnknownHostException {
  final String key=java.rmi.server.hostname;
  String host=System.getProperties().getProperty(key);
  perr(key + = + host);
  InetAddress localHost;
  if (host == null) {
    localHost=InetAddress.getLocalHost();
  }
 else {
    localHost=InetAddress.getByName(host);
  }
  return localHost;
}
","java.net.UnknownHostException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\engine\LocalHostTest.java",96
1947,"'-tryline","/** 
 * Resolves address using system or custom DNS resolver
 */
@Override public InetAddress[] resolve(String host) throws UnknownHostException {
  InetAddress[] result=cache.get(host);
  if (result != null || cache.containsKey(host)) {
    logCache(hit,host,result);
    return result;
  }
 else   if (isStaticHost(host)) {
    InetAddress[] staticAddresses=fromStaticHost(host);
    logCache(miss,host,staticAddresses);
    cache.put(host,staticAddresses);
    return staticAddresses;
  }
 else {
    InetAddress[] addresses=requestLookup(host);
    logCache(miss,host,addresses);
    cache.put(host,addresses);
    return addresses;
  }
}
","java.net.UnknownHostException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\control\DNSCacheManager.java",138
1948,"'-tryline","/** 
 * Sends DNS request via system or custom DNS resolver
 * @param host Host to lookup
 * @return array of {@link InetAddress} or null if lookup did not return result
 */
private InetAddress[] requestLookup(String host) throws UnknownHostException {
  InetAddress[] addresses;
  if (isCustomResolver()) {
    ExtendedResolver extendedResolver=getOrCreateResolver();
    if (extendedResolver == null) {
      throw new UnknownHostException(Could not resolve host: + host + , failed to initialize resolver or no resolver found);
    }
 else     if (extendedResolver.getResolvers().length > 0) {
      return customRequestLookup(host);
    }
  }
  addresses=systemDefaultDnsResolver.resolve(host);
  logCache(miss (resolved with system resolver),host,addresses);
  return addresses;
}
","java.net.UnknownHostException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\control\DNSCacheManager.java",237
1949,"'-tryline","private InetAddress[] customRequestLookup(String host) throws UnknownHostException {
  InetAddress[] addresses=null;
  try {
    Lookup lookup=new Lookup(host,Type.A);
    lookup.setCache(lookupCache);
    if (timeoutMs > 0) {
      resolver.setTimeout(timeoutMs / 1000,timeoutMs % 1000);
    }
    lookup.setResolver(resolver);
    Record[] records=lookup.run();
    if (records == null || records.length == 0) {
      throw new UnknownHostException(Failed to resolve host name:  + host);
    }
    addresses=new InetAddress[records.length];
    for (int i=0; i < records.length; i++) {
      addresses[i]=((ARecord)records[i]).getAddress();
    }
  }
 catch (  TextParseException tpe) {
    log.debug(Failed to create Lookup object for host:{}, error message:{},host,tpe.toString());
  }
  return addresses;
}
","java.net.UnknownHostException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\control\DNSCacheManager.java",261
1950,"'-tryline","/** 
 * Gets the IP source address (IP spoofing) if one has been provided.
 * @return the IP source address to use (or <code>null</code>, if none provided or the device address could not be found)
 * @throws UnknownHostException if the hostname/ip for {@link #getIpSource()} could not be resolved or not interface was found for it
 * @throws SocketException if an I/O error occurs
 */
protected InetAddress getIpSourceAddress() throws UnknownHostException, SocketException {
  final String ipSource=getIpSource();
  if (ipSource.trim().length() > 0) {
    Class<? extends InetAddress> ipClass=null;
    final SourceType sourceType=HTTPSamplerBase.SourceType.values()[testElement.getIpSourceType()];
switch (sourceType) {
case DEVICE:
      ipClass=InetAddress.class;
    break;
case DEVICE_IPV4:
  ipClass=Inet4Address.class;
break;
case DEVICE_IPV6:
ipClass=Inet6Address.class;
break;
case HOSTNAME:
default :
return InetAddress.getByName(ipSource);
}
NetworkInterface net=NetworkInterface.getByName(ipSource);
if (net != null) {
for (InterfaceAddress ia : net.getInterfaceAddresses()) {
final InetAddress inetAddr=ia.getAddress();
if (ipClass.isInstance(inetAddr)) {
return inetAddr;
}
}
throw new UnknownHostException(Interface  + ipSource +  does not have address of type + ipClass.getSimpleName());
}
throw new UnknownHostException(Cannot find interface  + ipSource);
}
return null;
}
","java.net.UnknownHostException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\HTTPAbstractImpl.java",226
1951,"'-tryline","public LoopbackHTTPSocket(String host,int port) throws UnknownHostException, IOException {
  this();
}
","java.net.UnknownHostException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\util\LoopbackHTTPSocket.java",81
1952,"'-tryline","public static List<ServerAddress> toServerAddresses(String connections) throws UnknownHostException {
  List<ServerAddress> addresses=new ArrayList<>();
  for (  String connection : Arrays.asList(connections.split(,))) {
    int port=DEFAULT_PORT;
    String[] hostPort=connection.split(:);
    if (hostPort.length > 1 && !StringUtils.isEmpty(hostPort[1])) {
      port=Integer.parseInt(hostPort[1].trim());
    }
    addresses.add(new ServerAddress(hostPort[0],port));
  }
  return addresses;
}
","java.net.UnknownHostException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mongodb\src\main\java\org\apache\jmeter\protocol\mongodb\mongo\MongoUtils.java",37
1953,"'-tryline","@Test public void testXPath2AssertionPath1() throws FactoryConfigurationError {
  String namespaces=age=http://www.w3.org/2003/01/geo/wgs84_pos#;
  String xPathQuery=//Employees/Employee[1]/age:ag;
  assertion.setNamespaces(namespaces);
  assertion.setXPathString(xPathQuery);
  response.setResponseData(xmlDoc,UTF-8);
  AssertionResult res=assertion.getResult(response);
  assertFalse(When xpath2 conforms to xml, the result of assertion should be true ,res.isFailure());
  assertFalse(When the format of xpath2 is right, assertion will run correctly ,res.isError());
}
","javax.xml.parsers.FactoryConfigurationError","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPath2AssertionTest.java",59
1954,"'-tryline","@Test public void testXPath2AssertionPath1Negated() throws FactoryConfigurationError {
  String namespaces=age=http://www.w3.org/2003/01/geo/wgs84_pos#;
  String xPathQuery=//Employees/Employee[1]/age:ag;
  assertion.setNamespaces(namespaces);
  assertion.setXPathString(xPathQuery);
  assertion.setNegated(true);
  response.setResponseData(xmlDoc,UTF-8);
  AssertionResult res=assertion.getResult(response);
  assertTrue(When xpath2 conforms to xml, the result of assertion should be false ,res.isFailure());
  assertFalse(When the format of xpath2 is right, assertion will run correctly ,res.isError());
}
","javax.xml.parsers.FactoryConfigurationError","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPath2AssertionTest.java",70
1955,"'-tryline","@Test public void testXPath2AssertionPath2() throws FactoryConfigurationError {
  String namespaces=age=http://www.w3.org/2003/01/geo/wgs84#;
  String xPathQuery=//Employees/Employee[1]/age:ag;
  assertion.setNamespaces(namespaces);
  assertion.setXPathString(xPathQuery);
  response.setResponseData(xmlDoc,UTF-8);
  AssertionResult res=assertion.getResult(response);
  assertTrue(When xpath2 doesn't conform to xml, the result of assertion should be false ,res.isFailure());
  assertFalse(When the format of xpath2 is right, assertion will run correctly ,res.isError());
}
","javax.xml.parsers.FactoryConfigurationError","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPath2AssertionTest.java",83
1956,"'-tryline","@Test public void testXPath2AssertionPath2Negated() throws FactoryConfigurationError {
  String namespaces=age=http://www.w3.org/2003/01/geo/wgs84#;
  String xPathQuery=//Employees/Employee[1]/age:ag;
  assertion.setNamespaces(namespaces);
  assertion.setXPathString(xPathQuery);
  assertion.setNegated(true);
  response.setResponseData(xmlDoc,UTF-8);
  AssertionResult res=assertion.getResult(response);
  assertFalse(When xpath2 doesn't conform to xml, the result of assertion should be true ,res.isFailure());
  assertFalse(When the format of xpath2 is right, assertion will run correctly ,res.isError());
}
","javax.xml.parsers.FactoryConfigurationError","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPath2AssertionTest.java",94
1957,"'-tryline","@Test public void testXPath2AssertionBool1() throws FactoryConfigurationError {
  String namespaces=age=http://www.w3.org/2003/01/geo/wgs84_pos#;
  String xPathQuery=count(//Employee)=4;
  assertion.setNamespaces(namespaces);
  assertion.setXPathString(xPathQuery);
  response.setResponseData(xmlDoc,UTF-8);
  AssertionResult res=assertion.getResult(response);
  assertFalse(When xpath2 conforms to xml, the result of assertion should be true ,res.isFailure());
  assertFalse(When the format of xpath2 is right, assertion will run correctly ,res.isError());
}
","javax.xml.parsers.FactoryConfigurationError","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPath2AssertionTest.java",107
1958,"'-tryline","@Test public void testXPath2AssertionBool1Negated() throws FactoryConfigurationError {
  String namespaces=age=http://www.w3.org/2003/01/geo/wgs84_pos#;
  String xPathQuery=count(//Employee)=4;
  assertion.setNamespaces(namespaces);
  assertion.setXPathString(xPathQuery);
  assertion.setNegated(true);
  response.setResponseData(xmlDoc,UTF-8);
  AssertionResult res=assertion.getResult(response);
  assertTrue(When xpath2 conforms to xml, the result of assertion should be false ,res.isFailure());
  assertFalse(When the format of xpath2 is right, assertion will run correctly ,res.isError());
}
","javax.xml.parsers.FactoryConfigurationError","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPath2AssertionTest.java",118
1959,"'-tryline","@Test public void testXPath2AssertionBool2() throws FactoryConfigurationError {
  String namespaces=age=http://www.w3.org/2003/01/geo/wgs84_pos#;
  String xPathQuery=count(//Employee)=3;
  assertion.setNamespaces(namespaces);
  assertion.setXPathString(xPathQuery);
  response.setResponseData(xmlDoc,UTF-8);
  AssertionResult res=assertion.getResult(response);
  assertTrue(When xpath2 doesn't conforms to xml, the result of assertion should be false ,res.isFailure());
  assertFalse(When the format of xpath2 is right, assertion will run correctly ,res.isError());
}
","javax.xml.parsers.FactoryConfigurationError","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPath2AssertionTest.java",130
1960,"'-tryline","@Test public void testXPath2AssertionBool2Negated() throws FactoryConfigurationError {
  String namespaces=age=http://www.w3.org/2003/01/geo/wgs84_pos#;
  String xPathQuery=count(//Employee)=3;
  assertion.setNamespaces(namespaces);
  assertion.setXPathString(xPathQuery);
  assertion.setNegated(true);
  response.setResponseData(xmlDoc,UTF-8);
  AssertionResult res=assertion.getResult(response);
  assertFalse(When xpath2 doesn't conforms to xml, the result of assertion should be true ,res.isFailure());
  assertFalse(When the format of xpath2 is right, assertion will run correctly ,res.isError());
}
","javax.xml.parsers.FactoryConfigurationError","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPath2AssertionTest.java",141
1961,"'-tryline","@Test public void testBadXpathFormat() throws FactoryConfigurationError {
  String namespaces=age=http://www.w3.org/2003/01/geo/wgs84_pos#;
  String xPathQuery=///Employees/Employee[1]/age:ag;
  assertion.setNamespaces(namespaces);
  assertion.setXPathString(xPathQuery);
  response.setResponseData(xmlDoc,UTF-8);
  AssertionResult res=assertion.getResult(response);
  assertTrue(When format of xpath is wrong, the test should failed,res.isError());
  assertTrue(res.getFailureMessage().contains(Exception occurred computing assertion with XPath));
}
","javax.xml.parsers.FactoryConfigurationError","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPath2AssertionTest.java",200
1962,"'-tryline","@Test public void testXPath2AssertionPathWithoutNamespace() throws FactoryConfigurationError {
  String data=<html><head><title>testtitle</title></head></html>;
  vars=new JMeterVariables();
  jmctx.setVariables(vars);
  jmctx.setPreviousResult(response);
  String xPathQuery=/html/head;
  assertion.setXPathString(xPathQuery);
  response.setResponseData(data,UTF-8);
  AssertionResult res=assertion.getResult(response);
  assertFalse(When xpath2 conforms to xml, the result of assertion should be true ,res.isFailure());
  assertFalse(When the format of xpath2 is right, assertion will run correctly ,res.isError());
}
","javax.xml.parsers.FactoryConfigurationError","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPath2AssertionTest.java",212
1963,"'-tryline","/** 
 * Extract value from String responseData by XPath query.
 * @param query the query to execute
 * @param matchStrings list of matched strings (may include nulls)
 * @param matchNumber int Match Number
 * @param responseData String that contains the entire Document
 * @throws SaxonApiException
 * @throws FactoryConfigurationError
 */
private void getValuesForXPath(String query,List<String> matchStrings,int matchNumber,String responseData) throws SaxonApiException, FactoryConfigurationError {
  XPathUtil.putValuesForXPathInListUsingSaxon(responseData,query,matchStrings,getFragment(),matchNumber,getNamespaces());
}
","javax.xml.stream.FactoryConfigurationError","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\extractor\XPath2Extractor.java",216
1964,"'-tryline","public static void putValuesForXPathInListUsingSaxon(String xmlFile,String xPathQuery,List<String> matchStrings,boolean fragment,int matchNumber,String namespaces) throws SaxonApiException, FactoryConfigurationError {
  final ImmutablePair<String,String> key=ImmutablePair.of(xPathQuery,namespaces);
  XPathExecutable xPathExecutable;
  if (StringUtils.isNotEmpty(xPathQuery)) {
    xPathExecutable=XPATH_CACHE.get(key);
  }
 else {
    log.warn(Error : {},JMeterUtils.getResString(xpath2_extractor_empty_query));
    return;
  }
  try (StringReader reader=new StringReader(xmlFile)){
    net.sf.saxon.s9api.DocumentBuilder builder=PROCESSOR.newDocumentBuilder();
    XdmNode xdmNode=builder.build(new SAXSource(new InputSource(reader)));
    if (xPathExecutable != null) {
      XPathSelector selector=null;
      try {
        selector=xPathExecutable.load();
        selector.setContextItem(xdmNode);
        XdmValue nodes=selector.evaluate();
        int length=nodes.size();
        int indexToMatch=matchNumber;
        if (matchNumber < 0) {
          for (          XdmItem item : nodes) {
            if (fragment) {
              matchStrings.add(item.toString());
            }
 else {
              matchStrings.add(item.getStringValue());
            }
          }
        }
 else {
          if (indexToMatch <= length) {
            if (matchNumber == 0 && length > 0) {
              indexToMatch=JMeterUtils.getRandomInt(length) + 1;
            }
            XdmItem item=nodes.itemAt(indexToMatch - 1);
            matchStrings.add(fragment ? item.toString() : item.getStringValue());
          }
 else {
            if (log.isWarnEnabled()) {
              log.warn(Error : {}{},JMeterUtils.getResString(xpath2_extractor_match_number_failure),indexToMatch);
            }
          }
        }
      }
  finally {
        if (selector != null) {
          try {
            selector.getUnderlyingXPathContext().setContextItem(null);
          }
 catch (          Exception e) {
          }
        }
      }
    }
  }
 }
","javax.xml.stream.FactoryConfigurationError","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\XPathUtil.java",415
1965,"'-tryline","/** 
 * Compute namespaces for XML
 * @param xml XML content
 * @return List of Namespaces
 * @throws XMLStreamException on problematic xml
 * @throws FactoryConfigurationError when no xml input factory can be established
 */
public static List<String[]> getNamespaces(String xml) throws XMLStreamException, FactoryConfigurationError {
  List<String[]> res=new ArrayList<>();
  XMLStreamReader reader;
  if (StringUtils.isNotEmpty(xml)) {
    reader=XMLInputFactory.newFactory().createXMLStreamReader(new StringReader(xml));
    while (reader.hasNext()) {
      int event=reader.next();
      if (XMLStreamConstants.START_ELEMENT == event || XMLStreamConstants.NAMESPACE == event) {
        addToList(reader,res);
      }
    }
  }
  return res;
}
","javax.xml.stream.FactoryConfigurationError","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\XPathUtil.java",514
1966,"'-tryline","/** 
 * @param result The result of xpath2 assertion
 * @param xmlFile XML data
 * @param xPathQuery XPath Query
 * @param namespaces Space separated set of prefix=namespace
 * @param isNegated invert result
 * @throws SaxonApiException when the parser has problems with the given xml or xpath query
 * @throws FactoryConfigurationError when the parser can not be instantiated
 */
public static void computeAssertionResultUsingSaxon(AssertionResult result,String xmlFile,String xPathQuery,String namespaces,Boolean isNegated) throws SaxonApiException, FactoryConfigurationError {
  final ImmutablePair<String,String> key=ImmutablePair.of(xPathQuery,namespaces);
  XPathExecutable xPathExecutable;
  if (StringUtils.isNotEmpty(xPathQuery)) {
    xPathExecutable=XPATH_CACHE.get(key);
  }
 else {
    log.warn(Error : {},JMeterUtils.getResString(xpath2_extractor_empty_query));
    return;
  }
  try (StringReader reader=new StringReader(xmlFile)){
    net.sf.saxon.s9api.DocumentBuilder builder=PROCESSOR.newDocumentBuilder();
    XdmNode xdmNode=builder.build(new SAXSource(new InputSource(reader)));
    if (xPathExecutable != null) {
      XPathSelector selector=null;
      try {
        Document doc;
        doc=XPathUtil.makeDocumentBuilder(false,false,false,false).newDocument();
        XObject xObject=XPathAPI.eval(doc,xPathQuery,getPrefixResolverForXPath2(doc,namespaces));
        selector=xPathExecutable.load();
        selector.setContextItem(xdmNode);
        XdmValue nodes=selector.evaluate();
        boolean resultOfEval=true;
        int length=nodes.size();
        if (length == 0) {
          resultOfEval=false;
        }
 else         if (xObject.getType() == XObject.CLASS_BOOLEAN) {
          resultOfEval=Boolean.parseBoolean(nodes.itemAt(0).getStringValue());
        }
        result.setFailure(isNegated ? resultOfEval : !resultOfEval);
        result.setFailureMessage(isNegated ? Nodes Matched for  + xPathQuery : No Nodes Matched for  + xPathQuery);
      }
 catch (      ParserConfigurationException|TransformerException e) {
        result.setError(true);
        result.setFailureMessage(Exception:  + e.getMessage() +  for:+ xPathQuery);
      }
 finally {
        if (selector != null) {
          try {
            selector.getUnderlyingXPathContext().setContextItem(null);
          }
 catch (          Exception e) {
            result.setError(true);
            result.setFailureMessage(Exception:  + e.getMessage() +  for:+ xPathQuery);
          }
        }
      }
    }
  }
 }
","javax.xml.stream.FactoryConfigurationError","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\XPathUtil.java",664
1967,"'-tryline","@Test public void testputValuesForXPathInListUsingSaxon() throws SaxonApiException, FactoryConfigurationError {
  String xPathQuery=//Employees/Employee/role;
  ArrayList<String> matchStrings=new ArrayList<String>();
  boolean fragment=false;
  String namespaces=age=http://www.w3.org/2003/01/geo/wgs84_pos#;
  int matchNumber=3;
  XPathUtil.putValuesForXPathInListUsingSaxon(xmlDoc,xPathQuery,matchStrings,fragment,matchNumber,namespaces);
  assertEquals(Manager,matchStrings.get(0));
  matchNumber=0;
  xPathQuery=//Employees/Employee[1]/age:ag;
  fragment=true;
  matchStrings.clear();
  XPathUtil.putValuesForXPathInListUsingSaxon(xmlDoc,xPathQuery,matchStrings,fragment,matchNumber,namespaces);
  assertEquals(<age:ag xmlns:age=\http://www.w3.org/2003/01/geo/wgs84_pos#\>29</age:ag>,matchStrings.get(0));
  assertEquals(1,matchStrings.size());
  matchNumber=-1;
  xPathQuery=//Employees/Employee/age:ag;
  matchStrings.clear();
  XPathUtil.putValuesForXPathInListUsingSaxon(xmlDoc,xPathQuery,matchStrings,fragment,matchNumber,namespaces);
  assertEquals(<age:ag xmlns:age=\http://www.w3.org/2003/01/geo/wgs84_pos#\>29</age:ag>,matchStrings.get(0));
  assertEquals(4,matchStrings.size());
  fragment=false;
  matchStrings.clear();
  XPathUtil.putValuesForXPathInListUsingSaxon(xmlDoc,xPathQuery,matchStrings,fragment,matchNumber,namespaces);
  assertEquals(29,matchStrings.get(0));
  assertEquals(4,matchStrings.size());
  matchStrings.clear();
  xPathQuery=regtsgwsdfstgsdf;
  XPathUtil.putValuesForXPathInListUsingSaxon(xmlDoc,xPathQuery,matchStrings,fragment,matchNumber,namespaces);
  assertEquals(new ArrayList<String>(),matchStrings);
  assertEquals(0,matchStrings.size());
  matchStrings.clear();
  xPathQuery=//Employees/Employee[1]/age:ag;
  matchNumber=555;
  XPathUtil.putValuesForXPathInListUsingSaxon(xmlDoc,xPathQuery,matchStrings,fragment,matchNumber,namespaces);
  assertEquals(new ArrayList<String>(),matchStrings);
  assertEquals(0,matchStrings.size());
}
","javax.xml.stream.FactoryConfigurationError","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\XPathUtilTest.java",72
1968,"'-tryline","@Test public void testGetNamespaces() throws XMLStreamException, FactoryConfigurationError {
  String responseData=<age:ag xmlns:age=\http://www.w3.org/wgs84_pos#\>\n + <hd:head xmlns:hd=\http://www.w3.org/wgs85_pos#\><title>test</title></hd:head></age:ag>;
  List<String[]> res=XPathUtil.getNamespaces(responseData);
  assertEquals(age,res.get(0)[0]);
  assertEquals(http://www.w3.org/wgs84_pos#,res.get(0)[1]);
  assertEquals(hd,res.get(1)[0]);
  assertEquals(http://www.w3.org/wgs85_pos#,res.get(1)[1]);
}
","javax.xml.stream.FactoryConfigurationError","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\XPathUtilTest.java",226
1969,"'-tryline","@Test public void testComputeAssertionResultUsingSaxon() throws SaxonApiException, FactoryConfigurationError {
  AssertionResult res=new AssertionResult(test);
  String responseData=<book><page>one</page><page>two</page><empty></empty><a><b></b></a></book>;
  String xpathquery=/book;
  XPathUtil.computeAssertionResultUsingSaxon(res,responseData,xpathquery,,false);
  assertFalse(Should not be an error,res.isError());
  assertFalse(Should not be a failure,res.isFailure());
  xpathquery=/b;
  XPathUtil.computeAssertionResultUsingSaxon(res,responseData,xpathquery,,false);
  assertFalse(Should not be an error,res.isError());
  assertTrue(Should be a failure,res.isFailure());
  xpathquery=count(//page)=2;
  XPathUtil.computeAssertionResultUsingSaxon(res,responseData,xpathquery,,false);
  assertFalse(Should not be an error,res.isError());
  assertFalse(Should not be a failure,res.isFailure());
  xpathquery=count(//page)=3;
  XPathUtil.computeAssertionResultUsingSaxon(res,responseData,xpathquery,,false);
  assertFalse(Should not be an error,res.isError());
  assertTrue(Should be a failure,res.isFailure());
}
","javax.xml.stream.FactoryConfigurationError","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\XPathUtilTest.java",237
1970,"'-tryline","/** 
 * Generate dashboard reports using the data from the specified CSV File.
 * @throws GenerationException when the generation failed
 */
public void generate() throws GenerationException {
  if (resultCollector != null) {
    log.info(Flushing result collector before report Generation);
    resultCollector.flushFile();
  }
  log.debug(Start report generation);
  File tmpDir=configuration.getTempDirectory();
  boolean tmpDirCreated=createTempDir(tmpDir);
  SampleContext sampleContext=new SampleContext();
  sampleContext.setWorkingDirectory(tmpDir);
  SampleSource source=new CsvFileSampleSource(testFile,CSV_DEFAULT_SEPARATOR);
  source.setSampleContext(sampleContext);
  NormalizerSampleConsumer normalizer=new NormalizerSampleConsumer();
  normalizer.setName(NORMALIZER_CONSUMER_NAME);
  FilterConsumer dateRangeConsumer=createFilterByDateRange();
  dateRangeConsumer.addSampleConsumer(createBeginDateConsumer());
  dateRangeConsumer.addSampleConsumer(createEndDateConsumer());
  FilterConsumer nameFilter=createNameFilter();
  FilterConsumer excludeControllerFilter=createExcludeControllerFilter();
  nameFilter.addSampleConsumer(excludeControllerFilter);
  dateRangeConsumer.addSampleConsumer(nameFilter);
  normalizer.addSampleConsumer(dateRangeConsumer);
  source.addSampleConsumer(normalizer);
  Map<String,GraphConfiguration> graphConfigurations=configuration.getGraphConfigurations();
  for (  Map.Entry<String,GraphConfiguration> entryGraphCfg : graphConfigurations.entrySet()) {
    addGraphConsumer(nameFilter,excludeControllerFilter,entryGraphCfg);
  }
  log.debug(Start samples processing);
  try {
    source.run();
  }
 catch (  SampleException ex) {
    throw new GenerationException(Error while processing samples:  + ex.getMessage(),ex);
  }
  log.debug(End of samples processing);
  log.debug(Start data exporting);
  String key;
  ExporterConfiguration value;
  for (  Map.Entry<String,ExporterConfiguration> entry : configuration.getExportConfigurations().entrySet()) {
    key=entry.getKey();
    value=entry.getValue();
    if (log.isInfoEnabled()) {
      log.info(Exporting data using exporter:'{}' of className:'{}',key,value.getClassName());
    }
    exportData(sampleContext,key,value);
  }
  log.debug(End of data exporting);
  removeTempDir(tmpDir,tmpDirCreated);
  log.debug(End of report generation);
}
","org.apache.jmeter.report.dashboard.GenerationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\report\dashboard\ReportGenerator.java",187
1971,"'-tryline","private boolean createTempDir(File tmpDir) throws GenerationException {
  if (tmpDir.exists()) {
    return false;
  }
  boolean tmpDirCreated=tmpDir.mkdir();
  if (!tmpDirCreated) {
    String message=String.format(Cannot create temporary directory \%s\, check property \%s\,tmpDir.getAbsolutePath(),ReportGeneratorConfiguration.REPORT_GENERATOR_KEY_TEMP_DIR);
    log.error(message);
    throw new GenerationException(message);
  }
  return tmpDirCreated;
}
","org.apache.jmeter.report.dashboard.GenerationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\report\dashboard\ReportGenerator.java",306
1972,"'-tryline","private void addGraphConsumer(FilterConsumer nameFilter,FilterConsumer excludeControllerFilter,Map.Entry<String,GraphConfiguration> entryGraphCfg) throws GenerationException {
  String graphName=entryGraphCfg.getKey();
  GraphConfiguration graphConfiguration=entryGraphCfg.getValue();
  String className=graphConfiguration.getClassName();
  try {
    Class<?> clazz=Class.forName(className);
    Object obj=clazz.getDeclaredConstructor().newInstance();
    AbstractGraphConsumer graph=(AbstractGraphConsumer)obj;
    graph.setName(graphName);
    graph.setTitle(graphConfiguration.getTitle());
    Method[] methods=clazz.getMethods();
    for (    Map.Entry<String,String> entryProperty : graphConfiguration.getProperties().entrySet()) {
      String propertyName=entryProperty.getKey();
      String propertyValue=entryProperty.getValue();
      String setterName=getSetterName(propertyName);
      setProperty(className,obj,methods,propertyName,propertyValue,setterName);
    }
    graph.initialize();
    AbstractSampleConsumer entryPoint=graphConfiguration.excludesControllers() ? excludeControllerFilter : nameFilter;
    entryPoint.addSampleConsumer(graph);
  }
 catch (  ClassNotFoundException ex) {
    log.warn(Unable to add class:{} as consumer for HTML report generation,  + check class name or that the plugin that contains it is on classpath,className,ex);
  }
catch (  ClassCastException|IllegalArgumentException|ReflectiveOperationException|SecurityException ex) {
    String error=String.format(INVALID_CLASS_FMT,className);
    throw new GenerationException(error,ex);
  }
}
","org.apache.jmeter.report.dashboard.GenerationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\report\dashboard\ReportGenerator.java",322
1973,"'-tryline","private void exportData(SampleContext sampleContext,String exporterName,ExporterConfiguration exporterConfiguration) throws GenerationException {
  String className=exporterConfiguration.getClassName();
  try {
    Class<?> clazz=Class.forName(className);
    Object obj=clazz.getDeclaredConstructor().newInstance();
    DataExporter exporter=(DataExporter)obj;
    exporter.setName(exporterName);
    exporter.export(sampleContext,testFile,configuration);
  }
 catch (  ReflectiveOperationException|ClassCastException ex) {
    String error=String.format(INVALID_CLASS_FMT,className);
    throw new GenerationException(error,ex);
  }
catch (  ExportException ex) {
    String error=String.format(Data exporter \%s\ is unable to export data.,exporterName);
    throw new GenerationException(error,ex);
  }
}
","org.apache.jmeter.report.dashboard.GenerationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\report\dashboard\ReportGenerator.java",367
1974,"'-tryline","/** 
 * Try to set a property on an object by reflection.
 * @param className     name of the objects class
 * @param obj           the object on which the property should be set
 * @param methods       methods of the object to be searched for the property setter
 * @param propertyName  name of the property to be set
 * @param propertyValue value to be set
 * @param setterName    name of the property setter that should be used to set theproperty
 * @throws IllegalAccessException if reflection throws an IllegalAccessException
 * @throws GenerationException    if conversion of the property value fails or reflectionthrows an InvocationTargetException
 */
private void setProperty(String className,Object obj,Method[] methods,String propertyName,String propertyValue,String setterName) throws IllegalAccessException, GenerationException {
  try {
    int i=0;
    while (i < methods.length) {
      Method method=methods[i];
      if (method.getName().equals(setterName)) {
        Class<?>[] parameterTypes=method.getParameterTypes();
        if (parameterTypes.length == 1) {
          Class<?> parameterType=parameterTypes[0];
          if (parameterType.isAssignableFrom(String.class)) {
            method.invoke(obj,propertyValue);
          }
 else {
            StringConverter<?> converter=Converters.getConverter(parameterType);
            if (converter == null) {
              throw new GenerationException(String.format(Not supported conversion to \%s\,parameterType.getName()));
            }
            method.invoke(obj,converter.convert(propertyValue));
          }
          return;
        }
      }
      i++;
    }
    log.warn('{}' is not a valid property for class '{}', skip it,propertyName,className);
  }
 catch (  InvocationTargetException|ConvertException ex) {
    String message=String.format(Cannot assign \%s\ to property \%s\ (mapped as \%s\), skip it,propertyValue,propertyName,setterName);
    log.error(message,ex);
    throw new GenerationException(message,ex);
  }
}
","org.apache.jmeter.report.dashboard.GenerationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\report\dashboard\ReportGenerator.java",503
1975,"'-tryline","/** 
 * Processed by the RMI server code.
 * @return this
 * @throws ObjectStreamException never
 */
protected Object readResolve() throws ObjectStreamException {
  int capacity=getCapacity();
  log.info(Using batch queue size (asynch.batch.queue.size): {},capacity);
  queue=new ArrayBlockingQueue<>(capacity);
  Worker worker=new Worker(queue,listener);
  worker.setDaemon(true);
  worker.start();
  return this;
}
","java.io.ObjectStreamException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\samplers\AsynchSampleSender.java",77
1976,"'-tryline","/** 
 * Processed by the RMI server code; acts as testStarted().
 * @return this
 * @throws ObjectStreamException never
 */
private Object readResolve() throws ObjectStreamException {
  if (isClientConfigured()) {
    numSamplesThreshold=clientConfiguredNumSamplesThreshold;
    timeThresholdMs=clientConfiguredTimeThresholdMs;
  }
 else {
    numSamplesThreshold=NUM_SAMPLES_THRESHOLD;
    timeThresholdMs=TIME_THRESHOLD_MS;
  }
  log.info(Using batching for this run. Thresholds: num={}, time={},numSamplesThreshold,timeThresholdMs);
  return this;
}
","java.io.ObjectStreamException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\samplers\BatchSampleSender.java",190
1977,"'-tryline","/** 
 * Processed by the RMI server code; acts as testStarted().
 * @return this
 * @throws ObjectStreamException never
 */
protected Object readResolve() throws ObjectStreamException {
  if (isClientConfigured()) {
    stripAlsoOnError=clientConfiguredStripAlsoOnError;
  }
 else {
    stripAlsoOnError=SERVER_CONFIGURED_STRIP_ALSO_ON_ERROR;
  }
  log.info(Using DataStrippingSampleSender for this run with stripAlsoOnError: {},stripAlsoOnError);
  return this;
}
","java.io.ObjectStreamException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\samplers\DataStrippingSampleSender.java",131
1978,"'-tryline","/** 
 * Processed by the RMI server code; acts as testStarted().
 * @return this
 * @throws ObjectStreamException never
 */
@SuppressWarnings(FutureReturnValueIgnored) private Object readResolve() throws ObjectStreamException {
  log.info(Using DiskStoreSampleSender for this test run);
  singleExecutor=Executors.newSingleThreadExecutor();
  try {
    temporaryFile=File.createTempFile(SerialisedSampleSender,.ser);
    temporaryFile.deleteOnExit();
    singleExecutor.submit(() -> {
      OutputStream anOutputStream;
      try {
        anOutputStream=new FileOutputStream(temporaryFile);
        oos=new ObjectOutputStream(anOutputStream);
      }
 catch (      IOException e) {
        log.error(Failed to create output Stream,e);
      }
    }
);
  }
 catch (  IOException e) {
    log.error(Failed to create output file,e);
  }
  return this;
}
","java.io.ObjectStreamException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\samplers\DiskStoreSampleSender.java",138
1979,"'-tryline","/** 
 * Processed by the RMI server code; acts as testStarted().
 * @return this
 * @throws ObjectStreamException never
 */
protected Object readResolve() throws ObjectStreamException {
  log.warn(Using HoldSampleSender for this test run, ensure you have configured enough memory (-Xmx) for your test);
  return this;
}
","java.io.ObjectStreamException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\samplers\HoldSampleSender.java",78
1980,"'-tryline","/** 
 * Processed by the RMI server code; acts as testStarted().
 * @return this
 * @throws ObjectStreamException never
 */
private Object readResolve() throws ObjectStreamException {
  log.info(Using StandardSampleSender for this test run);
  return this;
}
","java.io.ObjectStreamException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\samplers\StandardSampleSender.java",75
1981,"'-tryline","/** 
 * Processed by the RMI server code; acts as testStarted().
 * @return this
 * @throws ObjectStreamException never
 */
private Object readResolve() throws ObjectStreamException {
  if (isClientConfigured()) {
    numSamplesThreshold=clientConfiguredNumSamplesThreshold;
    timeThresholdMs=clientConfiguredTimeThresholdMs;
    keyOnThreadName=clientConfiguredKeyOnThreadName;
  }
 else {
    numSamplesThreshold=NUM_SAMPLES_THRESHOLD;
    timeThresholdMs=TIME_THRESHOLD_MS;
    keyOnThreadName=KEY_ON_THREADNAME;
  }
  if (log.isInfoEnabled()) {
    log.info(Using StatisticalSampleSender for this run. {} config: Thresholds: num={}, time={}. Key uses ThreadName: {},isClientConfigured() ? Client : Server,numSamplesThreshold,timeThresholdMs,keyOnThreadName);
  }
  return this;
}
","java.io.ObjectStreamException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\samplers\StatisticalSampleSender.java",199
1982,"'-tryline","/** 
 * Helper method that replaces deserialized priority with correct singleton.
 * @return the singleton version of object
 * @exception ObjectStreamException if an error occurs
 */
private Object readResolve() throws ObjectStreamException {
  if (null == m_category) {
    m_category=;
  }
  if (null == m_message) {
    m_message=;
  }
  String priorityName=;
  if (null != m_priority) {
    priorityName=m_priority.getName();
  }
  m_priority=Priority.getPriorityForName(priorityName);
  return this;
}
","java.io.ObjectStreamException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\log\LogEvent.java",189
1983,"'-tryline","@Override public void error(SAXParseException exception) throws SAXParseException {
  String msg=error:  + errorDetails(exception);
  log.debug(msg);
  result.setFailureMessage(msg);
  result.setError(true);
  throw exception;
}
","org.xml.sax.SAXParseException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\assertions\XMLSchemaAssertion.java",150
1984,"'-tryline","@Override public void fatalError(SAXParseException exception) throws SAXParseException {
  String msg=fatal:  + errorDetails(exception);
  log.debug(msg);
  result.setFailureMessage(msg);
  result.setError(true);
  throw exception;
}
","org.xml.sax.SAXParseException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\assertions\XMLSchemaAssertion.java",164
1985,"'-tryline","@Override public void warning(SAXParseException exception) throws SAXParseException {
  String msg=warning:  + errorDetails(exception);
  log.debug(msg);
  result.setFailureMessage(msg);
}
","org.xml.sax.SAXParseException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\assertions\XMLSchemaAssertion.java",176
1986,"'-tryline","/** 
 * Converts (X)HTML response to DOM object Tree. This version cares of charset of response.
 * @param unicodeData
 * @return the parsed document
 */
private Document parseResponse(String unicodeData) throws IOException, ParserConfigurationException, SAXException, TidyException {
  byte[] utf8data=unicodeData.getBytes(StandardCharsets.UTF_8);
  ByteArrayInputStream in=new ByteArrayInputStream(utf8data);
  boolean isXML=JOrphanUtils.isXML(utf8data);
  return XPathUtil.makeDocument(in,false,false,useNameSpace(),isTolerant(),isQuiet(),showWarnings(),reportErrors(),isXML,isDownloadDTDs());
}
","javax.xml.parsers.ParserConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\extractor\XPathExtractor.java",288
1987,"'-tryline","/** 
 * Converts (X)HTML response to DOM object Tree. This version cares of charset of response.
 * @param unicodeData
 * @param extractor
 * @return Document
 */
private Document parseResponse(String unicodeData,XPathExtractor extractor) throws IOException, ParserConfigurationException, SAXException, TidyException {
  byte[] utf8data=unicodeData.getBytes(StandardCharsets.UTF_8);
  ByteArrayInputStream in=new ByteArrayInputStream(utf8data);
  boolean isXML=JOrphanUtils.isXML(utf8data);
  return XPathUtil.makeDocument(in,false,false,extractor.useNameSpace(),extractor.isTolerant(),extractor.isQuiet(),extractor.showWarnings(),extractor.reportErrors(),isXML,extractor.isDownloadDTDs());
}
","javax.xml.parsers.ParserConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\RenderAsXPath.java",152
1988,"'-tryline","@Test public void testValidateXPath2() throws ParserConfigurationException {
  Document testDoc=XPathUtil.makeDocumentBuilder(false,false,false,false).newDocument();
  Element el=testDoc.createElement(root);
  testDoc.appendChild(el);
  String namespaces=a=http://www.w3.org/2003/01/geo/wgs84_pos# b=http://www.w3.org/2003/01/geo/wgs85_pos#;
  String xPathQuery=//Employees/b:Employee[1]/a:ag;
  assertTrue(When the user give namspaces, the result of validation should be true,XPath2Panel.validXPath(xPathQuery,false,namespaces));
  namespaces=a=http://www.w3.org/2003/01/geo/wgs84_pos#;
  assertFalse(When the user doesn't give namspaces, the result of validation should be false,XPath2Panel.validXPath(xPathQuery,false,namespaces));
}
","javax.xml.parsers.ParserConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\assertions\XPath2AssertionTest.java",226
1989,"'-tryline","@Test public void testInvalidTemplateXml() throws IOException, SAXException, ParserConfigurationException {
  try {
    File templateFile=getFileFromResource(invalidTemplates.xml);
    TemplateManager.getInstance().parseTemplateFile(templateFile);
  }
 catch (  SAXParseException ex) {
    assertTrue(Exception did not contains expected message, got: + ex.getMessage(),ex.getMessage().contains(Element type \key\ must be declared.));
  }
}
","javax.xml.parsers.ParserConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\test\java\org\apache\jmeter\gui\action\template\TestTemplateManager.java",108
1990,"'-tryline","public Map<String,Template> parseTemplateFile(File file) throws IOException, SAXException, ParserConfigurationException {
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  dbf.setValidating(true);
  dbf.setNamespaceAware(true);
  dbf.setFeature(http://xml.org/sax/features/external-general-entities,false);
  dbf.setFeature(http://xml.org/sax/features/external-parameter-entities,false);
  dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
  DocumentBuilder bd=dbf.newDocumentBuilder();
  bd.setEntityResolver(new DefaultEntityResolver());
  LoggingErrorHandler errorHandler=new LoggingErrorHandler(log,file);
  bd.setErrorHandler(errorHandler);
  Document document=bd.parse(file);
  document.getDocumentElement().normalize();
  Map<String,Template> templates=new TreeMap<>();
  NodeList templateNodes=document.getElementsByTagName(template);
  for (int i=0; i < templateNodes.getLength(); i++) {
    Node node=templateNodes.item(i);
    parseTemplateNode(templates,node);
  }
  return templates;
}
","javax.xml.parsers.ParserConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\action\template\TemplateManager.java",165
1991,"'-tryline","/** 
 * Returns a suitable document builder factory. Caches the factory in case the next caller wants the same options.
 * @param validate should the parser validate documents?
 * @param whitespace should the parser eliminate whitespace in element content?
 * @param namespace should the parser be namespace aware?
 * @return javax.xml.parsers.DocumentBuilderFactory
 */
private static synchronized DocumentBuilderFactory makeDocumentBuilderFactory(boolean validate,boolean whitespace,boolean namespace) throws ParserConfigurationException {
  if (XPathUtil.documentBuilderFactory == null || documentBuilderFactory.isValidating() != validate || documentBuilderFactory.isNamespaceAware() != namespace || documentBuilderFactory.isIgnoringElementContentWhitespace() != whitespace) {
    documentBuilderFactory=DocumentBuilderFactory.newInstance();
    documentBuilderFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
    documentBuilderFactory.setValidating(validate);
    documentBuilderFactory.setNamespaceAware(namespace);
    documentBuilderFactory.setIgnoringElementContentWhitespace(whitespace);
  }
  return XPathUtil.documentBuilderFactory;
}
","javax.xml.parsers.ParserConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\XPathUtil.java",108
1992,"'-tryline","/** 
 * Create a DocumentBuilder using the makeDocumentFactory func.
 * @param validate should the parser validate documents?
 * @param whitespace should the parser eliminate whitespace in element content?
 * @param namespace should the parser be namespace aware?
 * @param downloadDTDs if true, parser should attempt to resolve external entities
 * @return document builder
 * @throws ParserConfigurationException if {@link DocumentBuilder} can not be created for the wanted configuration
 */
public static DocumentBuilder makeDocumentBuilder(boolean validate,boolean whitespace,boolean namespace,boolean downloadDTDs) throws ParserConfigurationException {
  DocumentBuilder builder=makeDocumentBuilderFactory(validate,whitespace,namespace).newDocumentBuilder();
  builder.setErrorHandler(new MyErrorHandler(validate,false));
  if (!downloadDTDs) {
    EntityResolver er=(publicId,systemId) -> new InputSource(new ByteArrayInputStream(new byte[0]));
    builder.setEntityResolver(er);
  }
  return builder;
}
","javax.xml.parsers.ParserConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\XPathUtil.java",133
1993,"'-tryline","/** 
 * Utility function to get new Document
 * @param stream - Document Input stream
 * @param validate - Validate Document (not Tidy)
 * @param whitespace - Element Whitespace (not Tidy)
 * @param namespace - Is Namespace aware. (not Tidy)
 * @param tolerant - Is tolerant - i.e. use the Tidy parser
 * @param quiet - set Tidy quiet
 * @param showWarnings - set Tidy warnings
 * @param reportErrors - throw TidyException if Tidy detects an error
 * @param isXml - is document already XML (Tidy only)
 * @param downloadDTDs - if true, try to download external DTDs
 * @return document
 * @throws ParserConfigurationException when no {@link DocumentBuilder} can be constructed for the wanted configuration
 * @throws SAXException if parsing fails
 * @throws IOException if an I/O error occurs while parsing
 * @throws TidyException if a ParseError is detected and <code>report_errors</code> is <code>true</code>
 */
public static Document makeDocument(InputStream stream,boolean validate,boolean whitespace,boolean namespace,boolean tolerant,boolean quiet,boolean showWarnings,boolean reportErrors,boolean isXml,boolean downloadDTDs) throws ParserConfigurationException, SAXException, IOException, TidyException {
  return makeDocument(stream,validate,whitespace,namespace,tolerant,quiet,showWarnings,reportErrors,isXml,downloadDTDs,null);
}
","javax.xml.parsers.ParserConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\XPathUtil.java",154
1994,"'-tryline","/** 
 * Utility function to get new Document
 * @param stream - Document Input stream
 * @param validate - Validate Document (not Tidy)
 * @param whitespace - Element Whitespace (not Tidy)
 * @param namespace - Is Namespace aware. (not Tidy)
 * @param tolerant - Is tolerant - i.e. use the Tidy parser
 * @param quiet - set Tidy quiet
 * @param showWarnings - set Tidy warnings
 * @param report_errors - throw TidyException if Tidy detects an error
 * @param isXml - is document already XML (Tidy only)
 * @param downloadDTDs - if true, try to download external DTDs
 * @param tidyOut OutputStream for Tidy pretty-printing
 * @return document
 * @throws ParserConfigurationException if {@link DocumentBuilder} can not be created for the wanted configuration
 * @throws SAXException if parsing fails
 * @throws IOException if I/O error occurs while parsing
 * @throws TidyException if a ParseError is detected and <code>report_errors</code> is <code>true</code>
 */
public static Document makeDocument(InputStream stream,boolean validate,boolean whitespace,boolean namespace,boolean tolerant,boolean quiet,boolean showWarnings,boolean report_errors,boolean isXml,boolean downloadDTDs,OutputStream tidyOut) throws ParserConfigurationException, SAXException, IOException, TidyException {
  Document doc;
  if (tolerant) {
    doc=tidyDoc(stream,quiet,showWarnings,report_errors,isXml,tidyOut);
  }
 else {
    doc=makeDocumentBuilder(validate,whitespace,namespace,downloadDTDs).parse(stream);
  }
  return doc;
}
","javax.xml.parsers.ParserConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\XPathUtil.java",180
1995,"'-tryline","@Test public void testMakeDocument() throws ParserConfigurationException, SAXException, IOException, TidyException {
  String responseData=<book><page>one</page><page>two</page><empty></empty><a><b></b></a></book>;
  Document testDoc=XPathUtil.makeDocument(new ByteArrayInputStream(responseData.getBytes(StandardCharsets.UTF_8)),false,false,false,false,false,false,false,false,false);
  AssertionResult res=new AssertionResult(test);
  String xpathquery=/book;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,false);
  assertFalse(Should not be an error,res.isError());
  assertFalse(Should not be a failure,res.isFailure());
  xpathquery=/book/error;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,false);
  assertFalse(Should not be an error,res.isError());
  assertTrue(Should be a failure,res.isFailure());
  xpathquery=count(/book/page)=2;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,false);
  assertFalse(Should not be an error,res.isError());
  assertFalse(Should not be a failure,res.isFailure());
  xpathquery=count(/book/page)=1;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,false);
  assertFalse(Should not be an error,res.isError());
  assertTrue(Should be a failure,res.isFailure());
  xpathquery=///book;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,false);
  assertTrue(Should be an error,res.isError());
}
","javax.xml.parsers.ParserConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\XPathUtilTest.java",173
1996,"'-tryline","@Test public void testMakeDocumentIsnegated() throws ParserConfigurationException, SAXException, IOException, TidyException {
  String responseData=<book><preface>zero</preface><page>one</page><page>two</page><empty></empty><a><b></b></a></book>;
  Document testDoc=XPathUtil.makeDocument(new ByteArrayInputStream(responseData.getBytes(StandardCharsets.UTF_8)),false,false,false,false,false,false,false,false,false);
  AssertionResult res=new AssertionResult(test);
  String xpathquery=/book/error;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,true);
  assertFalse(Should not be an error,res.isError());
  assertFalse(Should not be a failure,res.isFailure());
  xpathquery=/book/preface;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,true);
  assertFalse(Should not be an error,res.isError());
  assertTrue(Should be a failure,res.isFailure());
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,true);
  assertFalse(Should not be an error,res.isError());
  assertTrue(Should be a failure,res.isFailure());
  xpathquery=count(/book/page)=1;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,true);
  assertFalse(Should not be an error,res.isError());
  assertFalse(Should not be a failure,res.isFailure());
}
","javax.xml.parsers.ParserConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\XPathUtilTest.java",201
1997,"'-tryline","@Test public void testPutValuesForXPathInList() throws ParserConfigurationException, SAXException, IOException, TidyException, TransformerException {
  String responseData=<book><page>one</page><page>two</page><empty></empty><a><b></b></a></book>;
  Document testDoc=XPathUtil.makeDocument(new ByteArrayInputStream(responseData.getBytes(StandardCharsets.UTF_8)),false,false,false,false,false,false,false,false,false);
  String xpathquery=/book/page;
  List<String> matchs=new ArrayList<>();
  XPathUtil.putValuesForXPathInList(testDoc,xpathquery,matchs,true);
  assertEquals(<page>one</page>,matchs.get(0));
  assertEquals(<page>two</page>,matchs.get(1));
  matchs=new ArrayList<>();
  XPathUtil.putValuesForXPathInList(testDoc,xpathquery,matchs,false);
  assertEquals(one,matchs.get(0));
  assertEquals(two,matchs.get(1));
}
","javax.xml.parsers.ParserConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\XPathUtilTest.java",263
1998,"'-tryline","private Element getBodyFromXMLDocument(InputStream stream) throws ParserConfigurationException, SAXException, IOException {
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  dbf.setIgnoringElementContentWhitespace(true);
  dbf.setIgnoringComments(true);
  DocumentBuilder db=dbf.newDocumentBuilder();
  Document doc=db.parse(new InputSource(stream));
  org.w3c.dom.Element root=doc.getDocumentElement();
  org.w3c.dom.Element body=(org.w3c.dom.Element)root.getElementsByTagName(body).item(0);
  return body;
}
","javax.xml.parsers.ParserConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\functions\ComponentReferenceFunctionTest.java",87
1999,"'-tryline","/** 
 * @return
 * @throws ParserConfigurationException
 * @throws IOException
 * @throws SAXException
 * @throws FileNotFoundException
 */
private Element getBodyFromXMLDocument(InputStream stream) throws ParserConfigurationException, SAXException, IOException {
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  dbf.setIgnoringElementContentWhitespace(true);
  dbf.setIgnoringComments(true);
  DocumentBuilder db=dbf.newDocumentBuilder();
  Document doc=db.parse(new InputSource(stream));
  org.w3c.dom.Element root=doc.getDocumentElement();
  org.w3c.dom.Element body=(org.w3c.dom.Element)root.getElementsByTagName(body).item(0);
  return body;
}
","javax.xml.parsers.ParserConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\dist-check\src\test\java\org\apache\jmeter\junit\JMeterTest.java",190
2000,"'-tryline","public XPathFileContainer(String file,String xpath) throws FileNotFoundException, IOException, ParserConfigurationException, SAXException, TransformerException {
  log.debug(XPath({}) xpath {},file,xpath);
  fileName=file;
  nextRow=0;
  nodeList=load(xpath);
}
","javax.xml.parsers.ParserConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\XPathFileContainer.java",57
2001,"'-tryline","private NodeList load(String xpath) throws IOException, FileNotFoundException, ParserConfigurationException, SAXException, TransformerException {
  NodeList nl=null;
  try (FileInputStream fis=new FileInputStream(fileName);BufferedInputStream bis=new BufferedInputStream(fis)){
    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
    factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
    DocumentBuilder builder=factory.newDocumentBuilder();
    nl=XPathUtil.selectNodeList(builder.parse(bis),xpath);
    if (log.isDebugEnabled()) {
      log.debug(found {},nl.getLength());
    }
  }
 catch (  TransformerException|SAXException|ParserConfigurationException|IOException e) {
    log.warn(e.toString());
    throw e;
  }
  return nl;
}
","javax.xml.parsers.ParserConfigurationException","C:\Users\pavan\Downloads\jmeter-master\src\functions\src\main\java\org\apache\jmeter\functions\XPathFileContainer.java",65
2002,"'-tryline","/** 
 * Wait until all threads called await on this timer
 * @return The arrival index of the current thread
 * @throws InterruptedException when interrupted while waiting, or the interrupted status is set on entering this method
 * @throws BrokenBarrierException if the barrier is reset while waiting or broken on entering or while waiting
 * @see java.util.concurrent.CyclicBarrier#await()
 */
public int await() throws InterruptedException, BrokenBarrierException {
  return barrier.await();
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\timers\SyncTimer.java",77
2003,"'-tryline","/** 
 * Wait until all threads called await on this timer
 * @param timeout The timeout in <code>timeUnit</code> units
 * @param timeUnit The time unit for the <code>timeout</code>
 * @return The arrival index of the current thread
 * @throws InterruptedException when interrupted while waiting, or the interrupted status is set on entering this method
 * @throws BrokenBarrierException if the barrier is reset while waiting or broken on entering or while waiting
 * @throws TimeoutException if the specified time elapses
 * @see java.util.concurrent.CyclicBarrier#await()
 */
public int await(long timeout,TimeUnit timeUnit) throws InterruptedException, BrokenBarrierException, TimeoutException {
  return barrier.await(timeout,timeUnit);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\timers\SyncTimer.java",93
2004,"'-tryline","public T getResult() throws InterruptedException {
synchronized (lock) {
    while (!resultReady) {
      lock.wait();
    }
  }
  return result;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\report\processor\Job.java",49
2005,"'-tryline","private long sleep(long ms) throws InterruptedException {
  long start=System.currentTimeMillis();
  Thread.sleep(ms);
  return System.currentTimeMillis() - start;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\samplers\TestSampleResult.java",340
2006,"'-tryline","/** 
 * Runs the command with given arguments and returns its return code.
 * @param arguments List of strings, not null
 * @return return code
 * @throws InterruptedException when execution was interrupted
 * @throws IOException when I/O error occurs while execution
 * @throws TimeoutException when timeout is reached while execution
 */
public int run(List<String> arguments) throws InterruptedException, IOException, TimeoutException {
  return run(arguments,stdin,stdout,stderr);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\exec\SystemCommand.java",123
2007,"'-tryline","private int run(List<String> arguments,InputStream in,OutputStream out,OutputStream err) throws InterruptedException, IOException, TimeoutException {
  Process proc=null;
  final ProcessBuilder procBuild=new ProcessBuilder(arguments);
  if (env != null) {
    procBuild.environment().putAll(env);
  }
  this.executionEnvironment=Collections.unmodifiableMap(procBuild.environment());
  procBuild.directory(directory);
  if (err == null) {
    procBuild.redirectErrorStream(true);
  }
  try {
    proc=procBuild.start();
    final OutputStream procOut=proc.getOutputStream();
    final InputStream procErr=proc.getErrorStream();
    final InputStream procIn=proc.getInputStream();
    final StreamCopier swerr;
    if (err != null) {
      swerr=new StreamCopier(procErr,err);
      swerr.start();
    }
 else {
      swerr=null;
    }
    final StreamCopier swout=new StreamCopier(procIn,out);
    swout.start();
    final StreamCopier swin;
    if (in != null) {
      swin=new StreamCopier(in,procOut);
      swin.start();
    }
 else {
      swin=null;
      procOut.close();
    }
    int exitVal=waitForEndWithTimeout(proc,timeoutMillis);
    swout.join();
    if (swerr != null) {
      swerr.join();
    }
    if (swin != null) {
      swin.interrupt();
      swin.join();
    }
    procErr.close();
    procIn.close();
    procOut.close();
    return exitVal;
  }
  finally {
    if (proc != null) {
      try {
        proc.destroy();
      }
 catch (      Exception ignored) {
      }
    }
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\exec\SystemCommand.java",136
2008,"'-tryline","/** 
 * Pipe the output of one command into another
 * @param arguments1 first command to run
 * @param arguments2 second command to run
 * @return exit status
 * @throws InterruptedException when execution gets interrupted
 * @throws TimeoutException when timeout is reached while execution
 * @throws IOException when I/O error occurs while execution
 */
public int run(List<String> arguments1,List<String> arguments2) throws InterruptedException, IOException, TimeoutException {
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  int exitCode=run(arguments1,stdin,out,stderr);
  if (exitCode == 0) {
    exitCode=run(arguments2,new ByteArrayInputStream(out.toByteArray()),stdout,stderr);
  }
  return exitCode;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\exec\SystemCommand.java",200
2009,"'-tryline","/** 
 * Wait for end of proc execution or timeout if timeoutInMillis is greater than 0
 * @param proc Process
 * @param timeoutInMillis long timeout in ms
 * @return proc exit value
 * @throws TimeoutException when timeout is reached while execution
 */
private int waitForEndWithTimeout(Process proc,long timeoutInMillis) throws InterruptedException, TimeoutException {
  if (timeoutInMillis <= 0L) {
    return proc.waitFor();
  }
  if (proc.waitFor(timeoutInMillis,TimeUnit.MILLISECONDS)) {
    return proc.exitValue();
  }
  throw new TimeoutException(Process timeout reached after  + timeoutInMillis +  milliseconds);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\exec\SystemCommand.java",219
2010,"'-tryline","/** 
 * This method will block until the downloads complete or it get interrupted the Future list returned by this method only contains tasks that have been scheduled in the threadpool.<br> The status of those futures are either done or cancelled
 * @param maxConcurrentDownloads max concurrent downloads
 * @param list                   list of resources to download
 * @return list tasks that have been scheduled
 * @throws InterruptedException when interrupted while waiting
 */
public List<Future<AsynSamplerResultHolder>> invokeAllAndAwaitTermination(int maxConcurrentDownloads,List<Callable<AsynSamplerResultHolder>> list) throws InterruptedException {
  List<Future<AsynSamplerResultHolder>> submittedTasks=new ArrayList<>();
  if (list.isEmpty()) {
    return submittedTasks;
  }
  concurrentExecutor.setMaximumPoolSize(MAX_POOL_SIZE);
  if (LOG.isDebugEnabled()) {
    LOG.debug(PoolSize={} LargestPoolSize={},concurrentExecutor.getPoolSize(),concurrentExecutor.getLargestPoolSize());
  }
  CompletionService<AsynSamplerResultHolder> completionService=new ExecutorCompletionService<>(concurrentExecutor);
  int remainingTasksToTake=list.size();
  try {
    int i=0;
    for (i=0; i < Math.min(maxConcurrentDownloads,list.size()); i++) {
      Callable<AsynSamplerResultHolder> task=list.get(i);
      submittedTasks.add(completionService.submit(task));
    }
    for (; i < list.size(); i++) {
      Callable<AsynSamplerResultHolder> task=list.get(i);
      try {
        completionService.take().get();
      }
 catch (      ExecutionException e) {
        throw new RuntimeException(Task execution failed,e.getCause());
      }
      remainingTasksToTake--;
      submittedTasks.add(completionService.submit(task));
    }
    while (remainingTasksToTake > 0) {
      try {
        completionService.take().get();
      }
 catch (      ExecutionException e) {
        throw new RuntimeException(Task execution failed,e.getCause());
      }
      remainingTasksToTake--;
    }
  }
  finally {
    if (remainingTasksToTake > 0) {
      LOG.debug(Interrupted while waiting for resource downloads : cancelling remaining tasks);
      for (      Future<AsynSamplerResultHolder> future : submittedTasks) {
        if (!future.isDone()) {
          future.cancel(true);
        }
      }
    }
  }
  return submittedTasks;
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\http\src\main\java\org\apache\jmeter\protocol\http\sampler\ResourcesDownloader.java",136
2011,"'-tryline","/** 
 * Sends message to mailserver, waiting for delivery if using synchronous mode.
 * @param message Message previously prepared by prepareMessage()
 * @throws MessagingException when problems sending the mail arise
 * @throws InterruptedException when interrupted while waiting for delivery in synchronous mode
 */
public void execute(Message message) throws MessagingException, InterruptedException {
  Transport tr=null;
  try {
    tr=session.getTransport(getProtocol());
    SynchronousTransportListener listener=null;
    if (synchronousMode) {
      listener=new SynchronousTransportListener();
      tr.addTransportListener(listener);
    }
    if (useAuthentication) {
      tr.connect(smtpServer,username,password);
    }
 else {
      tr.connect();
    }
    tr.sendMessage(message,message.getAllRecipients());
    if (listener != null) {
      listener.attend();
    }
  }
  finally {
    if (tr != null) {
      try {
        tr.close();
      }
 catch (      Exception e) {
      }
    }
    logger.debug(transport closed);
  }
  logger.debug(message sent);
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\protocol\SendMailCommand.java",298
2012,"'-tryline","/** 
 * Processes prepareMessage() and execute()
 * @throws InterruptedException when interrupted while waiting for delivery in synchronous modus
 * @throws IOException when the mail content can not be read or truststore problems are detected
 * @throws MessagingException when problems constructing or sending the mail occur
 */
public void execute() throws MessagingException, IOException, InterruptedException {
  execute(prepareMessage());
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\protocol\SendMailCommand.java",347
2013,"'-tryline","/** 
 * Synchronized-method <p> Waits until  {@link #finish()} was called and thus the end of the mailsending was signaled.
 * @throws InterruptedException when interrupted while waiting with the lock
 */
public void attend() throws InterruptedException {
synchronized (LOCK) {
    while (!finished) {
      LOCK.wait();
    }
  }
}
","java.lang.InterruptedException","C:\Users\pavan\Downloads\jmeter-master\src\protocol\mail\src\main\java\org\apache\jmeter\protocol\smtp\sampler\protocol\SynchronousTransportListener.java",73
2014,"'-tryline","/** 
 * Converts the specified value to the destination type
 * @param < T >   the target type
 * @param clazz the target class
 * @param value the value to convert
 * @return the converted value
 * @throws ConvertException when the conversion failed
 */
public static <T>T convert(Class<T> clazz,String value) throws ConvertException {
  T result;
  if (clazz.isAssignableFrom(String.class)) {
    @SuppressWarnings(unchecked) T temp=(T)value;
    result=temp;
  }
 else {
    StringConverter<T> converter=Converters.getConverter(clazz);
    if (converter == null) {
      throw new ConvertException(value,clazz.getName());
    }
    result=converter.convert(value);
  }
  return result;
}
","org.apache.jmeter.report.core.ConvertException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\report\core\Converters.java",110
2015,"'-tryline","/** 
 * Converts the specified value to the type TDest.
 * @param value the value to convert
 * @return the destination type
 * @throws ConvertException occurs when the value cannot be converted to the type TDest
 */
TDest convert(String value) throws ConvertException ;
","org.apache.jmeter.report.core.ConvertException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\report\core\StringConverter.java",30
2016,"'-tryline","private static List<String> findClassesThatExtend(String className,String excluding,String[] searchPath) throws IOException, ClassNotFoundException {
  return ClassFinder.findClassesThatExtend(searchPath,new Class[]{Class.forName(className)},false,null,excluding,false);
}
","java.lang.ClassNotFoundException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\gui\action\ActionRouter.java",312
2017,"'-tryline","/** 
 * Register converter.
 * @param key
 * @param jmxsaver
 * @param useMapper
 * @throws InstantiationException
 * @throws IllegalAccessException
 * @throws InvocationTargetException
 * @throws NoSuchMethodException
 * @throws ClassNotFoundException
 */
private static void registerConverter(String key,XStream jmxsaver,boolean useMapper) throws InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException, ClassNotFoundException {
  final Class<? extends Converter> clazz=Class.forName(key).asSubclass(Converter.class);
  if (useMapper) {
    jmxsaver.registerConverter(clazz.getConstructor(Mapper.class).newInstance(jmxsaver.getMapper()));
  }
 else {
    jmxsaver.registerConverter(clazz.getDeclaredConstructor().newInstance());
  }
}
","java.lang.ClassNotFoundException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\save\SaveService.java",267
2018,"'-tryline","private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
  in.defaultReadObject();
  addThreadLock=new Object();
}
","java.lang.ClassNotFoundException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\threads\ThreadGroup.java",277
2019,"'-tryline","public BeanShellInterpreter() throws ClassNotFoundException {
  this(null,null);
}
","java.lang.ClassNotFoundException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\BeanShellInterpreter.java",91
2020,"'-tryline","/** 
 * @param init initialisation file
 * @param log logger to pass to interpreter
 * @throws ClassNotFoundException when beanshell can not be instantiated
 */
public BeanShellInterpreter(String init,Logger log) throws ClassNotFoundException {
  initFile=init;
  logger=log;
  init();
}
","java.lang.ClassNotFoundException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\BeanShellInterpreter.java",95
2021,"'-tryline","private void init() throws ClassNotFoundException {
  if (bshClass == null) {
    throw new ClassNotFoundException(BSH_INTERPRETER);
  }
  try {
    bshInstance=bshClass.getDeclaredConstructor().newInstance();
  }
 catch (  IllegalArgumentException|ReflectiveOperationException|SecurityException e) {
    log.error(Can't instantiate BeanShell,e);
    throw new ClassNotFoundException(Can't instantiate BeanShell,e);
  }
  if (logger != null) {
    try {
      set(log,logger);
    }
 catch (    JMeterException e) {
      log.warn(Can't set logger variable,e);
    }
  }
  if (StringUtils.isNotBlank(initFile)) {
    String fileToUse=initFile;
    File in=new File(fileToUse);
    if (!in.exists()) {
      fileToUse=JMeterUtils.getJMeterHome() + File.separator + bin+ File.separator+ initFile;
      in=new File(fileToUse);
      if (!in.exists()) {
        log.warn(Cannot find init file: {},initFile);
      }
    }
    if (!in.canRead()) {
      log.warn(Cannot read init file: {},fileToUse);
    }
    try {
      source(fileToUse);
    }
 catch (    JMeterException e) {
      log.warn(Cannot source init file: {},fileToUse,e);
    }
  }
}
","java.lang.ClassNotFoundException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\BeanShellInterpreter.java",108
2022,"'-tryline","/** 
 * Resets the BeanShell interpreter.
 * @throws ClassNotFoundException if interpreter cannot be instantiated
 */
public void reset() throws ClassNotFoundException {
  init();
}
","java.lang.ClassNotFoundException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\BeanShellInterpreter.java",149
2023,"'-tryline","/** 
 * Method readObject.
 * @param ois the stream to read the objects from
 * @throws ClassNotFoundException when the class for the deserialization can not be found
 * @throws IOException when I/O error occurs
 */
private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {
  ois.defaultReadObject();
}
","java.lang.ClassNotFoundException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\collections\HashTree.java",936
2024,"'-tryline","private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {
  ois.defaultReadObject();
}
","java.lang.ClassNotFoundException","C:\Users\pavan\Downloads\jmeter-master\src\jorphan\src\main\java\org\apache\jorphan\collections\ListedHashTree.java",209
2025,"'-tryline","/** 
 * Converts (X)HTML response to DOM object Tree. This version cares of charset of response.
 * @param unicodeData
 * @return the parsed document
 */
private Document parseResponse(String unicodeData) throws IOException, ParserConfigurationException, SAXException, TidyException {
  byte[] utf8data=unicodeData.getBytes(StandardCharsets.UTF_8);
  ByteArrayInputStream in=new ByteArrayInputStream(utf8data);
  boolean isXML=JOrphanUtils.isXML(utf8data);
  return XPathUtil.makeDocument(in,false,false,useNameSpace(),isTolerant(),isQuiet(),showWarnings(),reportErrors(),isXML,isDownloadDTDs());
}
","org.apache.jmeter.util.TidyException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\extractor\XPathExtractor.java",288
2026,"'-tryline","/** 
 * Converts (X)HTML response to DOM object Tree. This version cares of charset of response.
 * @param unicodeData
 * @param extractor
 * @return Document
 */
private Document parseResponse(String unicodeData,XPathExtractor extractor) throws IOException, ParserConfigurationException, SAXException, TidyException {
  byte[] utf8data=unicodeData.getBytes(StandardCharsets.UTF_8);
  ByteArrayInputStream in=new ByteArrayInputStream(utf8data);
  boolean isXML=JOrphanUtils.isXML(utf8data);
  return XPathUtil.makeDocument(in,false,false,extractor.useNameSpace(),extractor.isTolerant(),extractor.isQuiet(),extractor.showWarnings(),extractor.reportErrors(),isXML,extractor.isDownloadDTDs());
}
","org.apache.jmeter.util.TidyException","C:\Users\pavan\Downloads\jmeter-master\src\components\src\main\java\org\apache\jmeter\visualizers\RenderAsXPath.java",152
2027,"'-tryline","/** 
 * Utility function to get new Document
 * @param stream - Document Input stream
 * @param validate - Validate Document (not Tidy)
 * @param whitespace - Element Whitespace (not Tidy)
 * @param namespace - Is Namespace aware. (not Tidy)
 * @param tolerant - Is tolerant - i.e. use the Tidy parser
 * @param quiet - set Tidy quiet
 * @param showWarnings - set Tidy warnings
 * @param reportErrors - throw TidyException if Tidy detects an error
 * @param isXml - is document already XML (Tidy only)
 * @param downloadDTDs - if true, try to download external DTDs
 * @return document
 * @throws ParserConfigurationException when no {@link DocumentBuilder} can be constructed for the wanted configuration
 * @throws SAXException if parsing fails
 * @throws IOException if an I/O error occurs while parsing
 * @throws TidyException if a ParseError is detected and <code>report_errors</code> is <code>true</code>
 */
public static Document makeDocument(InputStream stream,boolean validate,boolean whitespace,boolean namespace,boolean tolerant,boolean quiet,boolean showWarnings,boolean reportErrors,boolean isXml,boolean downloadDTDs) throws ParserConfigurationException, SAXException, IOException, TidyException {
  return makeDocument(stream,validate,whitespace,namespace,tolerant,quiet,showWarnings,reportErrors,isXml,downloadDTDs,null);
}
","org.apache.jmeter.util.TidyException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\XPathUtil.java",154
2028,"'-tryline","/** 
 * Utility function to get new Document
 * @param stream - Document Input stream
 * @param validate - Validate Document (not Tidy)
 * @param whitespace - Element Whitespace (not Tidy)
 * @param namespace - Is Namespace aware. (not Tidy)
 * @param tolerant - Is tolerant - i.e. use the Tidy parser
 * @param quiet - set Tidy quiet
 * @param showWarnings - set Tidy warnings
 * @param report_errors - throw TidyException if Tidy detects an error
 * @param isXml - is document already XML (Tidy only)
 * @param downloadDTDs - if true, try to download external DTDs
 * @param tidyOut OutputStream for Tidy pretty-printing
 * @return document
 * @throws ParserConfigurationException if {@link DocumentBuilder} can not be created for the wanted configuration
 * @throws SAXException if parsing fails
 * @throws IOException if I/O error occurs while parsing
 * @throws TidyException if a ParseError is detected and <code>report_errors</code> is <code>true</code>
 */
public static Document makeDocument(InputStream stream,boolean validate,boolean whitespace,boolean namespace,boolean tolerant,boolean quiet,boolean showWarnings,boolean report_errors,boolean isXml,boolean downloadDTDs,OutputStream tidyOut) throws ParserConfigurationException, SAXException, IOException, TidyException {
  Document doc;
  if (tolerant) {
    doc=tidyDoc(stream,quiet,showWarnings,report_errors,isXml,tidyOut);
  }
 else {
    doc=makeDocumentBuilder(validate,whitespace,namespace,downloadDTDs).parse(stream);
  }
  return doc;
}
","org.apache.jmeter.util.TidyException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\XPathUtil.java",180
2029,"'-tryline","/** 
 * Create a document using Tidy
 * @param stream - input
 * @param quiet - set Tidy quiet?
 * @param showWarnings - show Tidy warnings?
 * @param report_errors - log errors and throw TidyException?
 * @param isXML - treat document as XML?
 * @param out OutputStream, null if no output required
 * @return the document
 * @throws TidyException if a ParseError is detected and report_errors is true
 */
private static Document tidyDoc(InputStream stream,boolean quiet,boolean showWarnings,boolean report_errors,boolean isXML,OutputStream out) throws TidyException {
  StringWriter sw=new StringWriter();
  Tidy tidy=makeTidyParser(quiet,showWarnings,isXML,sw);
  Document doc=tidy.parseDOM(stream,out);
  doc.normalize();
  if (tidy.getParseErrors() > 0) {
    if (report_errors) {
      log.error(TidyException: {},sw);
      throw new TidyException(tidy.getParseErrors(),tidy.getParseWarnings());
    }
    log.warn(Tidy errors: {},sw);
  }
  return doc;
}
","org.apache.jmeter.util.TidyException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\main\java\org\apache\jmeter\util\XPathUtil.java",213
2030,"'-tryline","@Test public void testMakeDocument() throws ParserConfigurationException, SAXException, IOException, TidyException {
  String responseData=<book><page>one</page><page>two</page><empty></empty><a><b></b></a></book>;
  Document testDoc=XPathUtil.makeDocument(new ByteArrayInputStream(responseData.getBytes(StandardCharsets.UTF_8)),false,false,false,false,false,false,false,false,false);
  AssertionResult res=new AssertionResult(test);
  String xpathquery=/book;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,false);
  assertFalse(Should not be an error,res.isError());
  assertFalse(Should not be a failure,res.isFailure());
  xpathquery=/book/error;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,false);
  assertFalse(Should not be an error,res.isError());
  assertTrue(Should be a failure,res.isFailure());
  xpathquery=count(/book/page)=2;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,false);
  assertFalse(Should not be an error,res.isError());
  assertFalse(Should not be a failure,res.isFailure());
  xpathquery=count(/book/page)=1;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,false);
  assertFalse(Should not be an error,res.isError());
  assertTrue(Should be a failure,res.isFailure());
  xpathquery=///book;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,false);
  assertTrue(Should be an error,res.isError());
}
","org.apache.jmeter.util.TidyException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\XPathUtilTest.java",173
2031,"'-tryline","@Test public void testMakeDocumentIsnegated() throws ParserConfigurationException, SAXException, IOException, TidyException {
  String responseData=<book><preface>zero</preface><page>one</page><page>two</page><empty></empty><a><b></b></a></book>;
  Document testDoc=XPathUtil.makeDocument(new ByteArrayInputStream(responseData.getBytes(StandardCharsets.UTF_8)),false,false,false,false,false,false,false,false,false);
  AssertionResult res=new AssertionResult(test);
  String xpathquery=/book/error;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,true);
  assertFalse(Should not be an error,res.isError());
  assertFalse(Should not be a failure,res.isFailure());
  xpathquery=/book/preface;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,true);
  assertFalse(Should not be an error,res.isError());
  assertTrue(Should be a failure,res.isFailure());
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,true);
  assertFalse(Should not be an error,res.isError());
  assertTrue(Should be a failure,res.isFailure());
  xpathquery=count(/book/page)=1;
  XPathUtil.computeAssertionResult(res,testDoc,xpathquery,true);
  assertFalse(Should not be an error,res.isError());
  assertFalse(Should not be a failure,res.isFailure());
}
","org.apache.jmeter.util.TidyException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\XPathUtilTest.java",201
2032,"'-tryline","@Test public void testPutValuesForXPathInList() throws ParserConfigurationException, SAXException, IOException, TidyException, TransformerException {
  String responseData=<book><page>one</page><page>two</page><empty></empty><a><b></b></a></book>;
  Document testDoc=XPathUtil.makeDocument(new ByteArrayInputStream(responseData.getBytes(StandardCharsets.UTF_8)),false,false,false,false,false,false,false,false,false);
  String xpathquery=/book/page;
  List<String> matchs=new ArrayList<>();
  XPathUtil.putValuesForXPathInList(testDoc,xpathquery,matchs,true);
  assertEquals(<page>one</page>,matchs.get(0));
  assertEquals(<page>two</page>,matchs.get(1));
  matchs=new ArrayList<>();
  XPathUtil.putValuesForXPathInList(testDoc,xpathquery,matchs,false);
  assertEquals(one,matchs.get(0));
  assertEquals(two,matchs.get(1));
}
","org.apache.jmeter.util.TidyException","C:\Users\pavan\Downloads\jmeter-master\src\core\src\test\java\org\apache\jmeter\util\XPathUtilTest.java",263
